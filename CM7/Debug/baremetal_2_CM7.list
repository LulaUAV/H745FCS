
baremetal_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08012648  08012648  00022648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012aac  08012aac  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08012aac  08012aac  00022aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ab4  08012ab4  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ab4  08012ab4  00022ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012ab8  08012ab8  00022ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  24000000  08012abc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  24000354  08012e10  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002010  08012e10  00032010  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f7ae  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006070  00000000  00000000  0005fb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b8  00000000  00000000  00065ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fd0  00000000  00000000  00067d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b84a  00000000  00000000  00069d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f985  00000000  00000000  00075572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001928da  00000000  00000000  000a4ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002377d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099d4  00000000  00000000  00237824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000036e  00000000  00000000  002411f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000354 	.word	0x24000354
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801262c 	.word	0x0801262c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000358 	.word	0x24000358
 80002dc:	0801262c 	.word	0x0801262c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <SystemInit+0x104>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3e      	ldr	r2, [pc, #248]	; (8000798 <SystemInit+0x104>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b3b      	ldr	r3, [pc, #236]	; (8000798 <SystemInit+0x104>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a3a      	ldr	r2, [pc, #232]	; (8000798 <SystemInit+0x104>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b39      	ldr	r3, [pc, #228]	; (800079c <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b36      	ldr	r3, [pc, #216]	; (800079c <SystemInit+0x108>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a34      	ldr	r2, [pc, #208]	; (800079c <SystemInit+0x108>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <SystemInit+0x10c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <SystemInit+0x10c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b30      	ldr	r3, [pc, #192]	; (80007a0 <SystemInit+0x10c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <SystemInit+0x10c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492e      	ldr	r1, [pc, #184]	; (80007a0 <SystemInit+0x10c>)
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <SystemInit+0x110>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <SystemInit+0x108>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemInit+0x108>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <SystemInit+0x10c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemInit+0x10c>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <SystemInit+0x114>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemInit+0x10c>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0x118>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <SystemInit+0x10c>)
 800072a:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemInit+0x11c>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <SystemInit+0x10c>)
 8000736:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <SystemInit+0x11c>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <SystemInit+0x10c>)
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <SystemInit+0x11c>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <SystemInit+0x10c>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <SystemInit+0x10c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <SystemInit+0x10c>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x10c>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <SystemInit+0x120>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <SystemInit+0x120>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <SystemInit+0x124>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <SystemInit+0x128>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <SystemInit+0x12c>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <SystemInit+0x130>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SystemInit+0x104>)
 8000788:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00
 800079c:	52002000 	.word	0x52002000
 80007a0:	58024400 	.word	0x58024400
 80007a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a8:	02020200 	.word	0x02020200
 80007ac:	01ff0000 	.word	0x01ff0000
 80007b0:	01010280 	.word	0x01010280
 80007b4:	580000c0 	.word	0x580000c0
 80007b8:	5c001000 	.word	0x5c001000
 80007bc:	ffff0000 	.word	0xffff0000
 80007c0:	51008108 	.word	0x51008108
 80007c4:	52004000 	.word	0x52004000

080007c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_DMA_Init+0x7c>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_DMA_Init+0x7c>)
 80007e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_DMA_Init+0x7c>)
 80007ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <MX_DMA_Init+0x7c>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_DMA_Init+0x7c>)
 80007fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	2010      	movs	r0, #16
 8000810:	f001 fa37 	bl	8001c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000814:	2010      	movs	r0, #16
 8000816:	f001 fa4e 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	2011      	movs	r0, #17
 8000820:	f001 fa2f 	bl	8001c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000824:	2011      	movs	r0, #17
 8000826:	f001 fa46 	bl	8001cb6 <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream7 Interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	2046      	movs	r0, #70	; 0x46
 8000830:	f001 fa27 	bl	8001c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000834:	2046      	movs	r0, #70	; 0x46
 8000836:	f001 fa3e 	bl	8001cb6 <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	58024400 	.word	0x58024400

08000848 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_GPIO_Init+0xe4>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a35      	ldr	r2, [pc, #212]	; (800092c <MX_GPIO_Init+0xe4>)
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0xe4>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	61fb      	str	r3, [r7, #28]
 800086a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_GPIO_Init+0xe4>)
 800086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000872:	4a2e      	ldr	r2, [pc, #184]	; (800092c <MX_GPIO_Init+0xe4>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0xe4>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	61bb      	str	r3, [r7, #24]
 8000888:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_GPIO_Init+0xe4>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a26      	ldr	r2, [pc, #152]	; (800092c <MX_GPIO_Init+0xe4>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_GPIO_Init+0xe4>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_GPIO_Init+0xe4>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_GPIO_Init+0xe4>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_GPIO_Init+0xe4>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0xe4>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_GPIO_Init+0xe4>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <MX_GPIO_Init+0xe4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_GPIO_Init+0xe4>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_GPIO_Init+0xe4>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a08      	ldr	r2, [pc, #32]	; (800092c <MX_GPIO_Init+0xe4>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_GPIO_Init+0xe4>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000920:	f000 f806 	bl	8000930 <GPIO_Port_Config>

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58024400 	.word	0x58024400

08000930 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2180      	movs	r1, #128	; 0x80
 8000948:	4827      	ldr	r0, [pc, #156]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800094a:	f003 fe3d 	bl	80045c8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000964:	f003 fc80 	bl	8004268 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096e:	481e      	ldr	r0, [pc, #120]	; (80009e8 <GPIO_Port_Config+0xb8>)
 8000970:	f003 fe2a 	bl	80045c8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000978:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <GPIO_Port_Config+0xb8>)
 800098c:	f003 fc6c 	bl	8004268 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <GPIO_Port_Config+0xbc>)
 8000998:	f003 fe16 	bl	80045c8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009b4:	f003 fc58 	bl	8004268 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009c0:	f003 fe02 	bl	80045c8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <GPIO_Port_Config+0xbc>)
 80009dc:	f003 fc44 	bl	8004268 <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	58021000 	.word	0x58021000
 80009ec:	58021400 	.word	0x58021400

080009f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C2_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C2_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C2_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a2c:	f003 fe14 	bl	8004658 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 f9bf 	bl	8000db8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a3e:	f004 fd20 	bl	8005482 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 f9b6 	bl	8000db8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C2_Init+0x74>)
 8000a50:	f004 fd62 	bl	8005518 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f9ad 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24000370 	.word	0x24000370
 8000a68:	40005800 	.word	0x40005800
 8000a6c:	307075b1 	.word	0x307075b1

08000a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b8      	sub	sp, #224	; 0xe0
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	22bc      	movs	r2, #188	; 0xbc
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f00f f95b 	bl	800fd4c <memset>
  if(i2cHandle->Instance==I2C2)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <HAL_I2C_MspInit+0xe0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d152      	bne.n	8000b46 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f006 ffa0 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aba:	f000 f97d 	bl	8000db8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac4:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000adc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000af6:	2304      	movs	r3, #4
 8000af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b00:	4619      	mov	r1, r3
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0xe8>)
 8000b04:	f003 fbb0 	bl	8004268 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b0e:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_I2C_MspInit+0xe4>)
 8000b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2021      	movs	r0, #33	; 0x21
 8000b2c:	f001 f8a9 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b30:	2021      	movs	r0, #33	; 0x21
 8000b32:	f001 f8c0 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2022      	movs	r0, #34	; 0x22
 8000b3c:	f001 f8a1 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b40:	2022      	movs	r0, #34	; 0x22
 8000b42:	f001 f8b8 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b46:	bf00      	nop
 8000b48:	37e0      	adds	r7, #224	; 0xe0
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40005800 	.word	0x40005800
 8000b54:	58024400 	.word	0x58024400
 8000b58:	58020400 	.word	0x58020400
 8000b5c:	00000000 	.word	0x00000000

08000b60 <_Z18SystemClock_Configv>:
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
void SystemClock_Config(void)
{
 8000b60:	b510      	push	{r4, lr}
 8000b62:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b64:	224c      	movs	r2, #76	; 0x4c
 8000b66:	2100      	movs	r1, #0
 8000b68:	a80a      	add	r0, sp, #40	; 0x28
 8000b6a:	f00f f8ef 	bl	800fd4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	a802      	add	r0, sp, #8
 8000b74:	f00f f8ea 	bl	800fd4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f005 fef5 	bl	8006968 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <_Z18SystemClock_Configv+0xe8>)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <_Z18SystemClock_Configv+0xec>)
 8000b84:	9101      	str	r1, [sp, #4]
 8000b86:	6991      	ldr	r1, [r2, #24]
 8000b88:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000b8c:	6191      	str	r1, [r2, #24]
 8000b8e:	6991      	ldr	r1, [r2, #24]
 8000b90:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8000b94:	9101      	str	r1, [sp, #4]
 8000b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b98:	f041 0101 	orr.w	r1, r1, #1
 8000b9c:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba8:	6993      	ldr	r3, [r2, #24]
 8000baa:	049b      	lsls	r3, r3, #18
 8000bac:	d5fc      	bpl.n	8000ba8 <_Z18SystemClock_Configv+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bae:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <_Z18SystemClock_Configv+0xf0>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bb0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bb2:	243c      	movs	r4, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 15;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000bb8:	f023 0303 	bic.w	r3, r3, #3
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bc4:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bc6:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bc8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bca:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bcc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bce:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bd0:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bd2:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000c30 <_Z18SystemClock_Configv+0xd0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000bdc:	230f      	movs	r3, #15
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000bde:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be2:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000be6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f005 ff28 	bl	8006a3c <HAL_RCC_OscConfig>
 8000bec:	b108      	cbz	r0, 8000bf2 <_Z18SystemClock_Configv+0x92>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <_Z18SystemClock_Configv+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8000c38 <_Z18SystemClock_Configv+0xd8>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bfa:	a802      	add	r0, sp, #8
 8000bfc:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c02:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8000c40 <_Z18SystemClock_Configv+0xe0>
 8000c06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000c14:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c18:	f006 fb1e 	bl	8007258 <HAL_RCC_ClockConfig>
 8000c1c:	b108      	cbz	r0, 8000c22 <_Z18SystemClock_Configv+0xc2>
 8000c1e:	b672      	cpsid	i
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <_Z18SystemClock_Configv+0xc0>
  HAL_PWREx_EnableUSBVoltageDetector();
 8000c22:	f005 fefb 	bl	8006a1c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000c26:	b01e      	add	sp, #120	; 0x78
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	00000021 	.word	0x00000021
 8000c34:	00010000 	.word	0x00010000
 8000c38:	0000003f 	.word	0x0000003f
 8000c3c:	00000003 	.word	0x00000003
 8000c40:	00000040 	.word	0x00000040
 8000c44:	00000040 	.word	0x00000040
 8000c48:	58024800 	.word	0x58024800
 8000c4c:	58000400 	.word	0x58000400
 8000c50:	58024400 	.word	0x58024400

08000c54 <main>:
{
 8000c54:	b530      	push	{r4, r5, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c56:	2400      	movs	r4, #0
{
 8000c58:	b09b      	sub	sp, #108	; 0x6c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5a:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c5c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000c60:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_MPU_Disable();
 8000c64:	f001 f842 	bl	8001cec <HAL_MPU_Disable>
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c68:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c6c:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <main+0x154>)
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c6e:	a802      	add	r0, sp, #8
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000c70:	9203      	str	r2, [sp, #12]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c72:	9304      	str	r3, [sp, #16]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c74:	f8ad 5008 	strh.w	r5, [sp, #8]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c78:	9405      	str	r4, [sp, #20]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c7a:	f001 f86f 	bl	8001d5c <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c7e:	4a4b      	ldr	r2, [pc, #300]	; (8000dac <main+0x158>)
 8000c80:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c84:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c88:	a802      	add	r0, sp, #8
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c8a:	f88d 5009 	strb.w	r5, [sp, #9]
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000c8e:	9103      	str	r1, [sp, #12]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c90:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c94:	f001 f862 	bl	8001d5c <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c98:	2004      	movs	r0, #4
 8000c9a:	f001 f83f 	bl	8001d1c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c9e:	4a44      	ldr	r2, [pc, #272]	; (8000db0 <main+0x15c>)
 8000ca0:	6953      	ldr	r3, [r2, #20]
 8000ca2:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000ca6:	d111      	bne.n	8000ccc <main+0x78>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cac:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cb0:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cb8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cbc:	6953      	ldr	r3, [r2, #20]
 8000cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cc8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ccc:	4838      	ldr	r0, [pc, #224]	; (8000db0 <main+0x15c>)
 8000cce:	6943      	ldr	r3, [r0, #20]
 8000cd0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000cd4:	d126      	bne.n	8000d24 <main+0xd0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000cd6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000cda:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000cde:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ce2:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ce6:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cea:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8000cee:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf2:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cf6:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cf8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d00:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000d04:	d1f8      	bne.n	8000cf8 <main+0xa4>
    } while(sets-- != 0U);
 8000d06:	f1ac 0c20 	sub.w	ip, ip, #32
 8000d0a:	f11c 0f20 	cmn.w	ip, #32
 8000d0e:	d1f0      	bne.n	8000cf2 <main+0x9e>
 8000d10:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d14:	6943      	ldr	r3, [r0, #20]
 8000d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1a:	6143      	str	r3, [r0, #20]
 8000d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d20:	f3bf 8f6f 	isb	sy
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8000d24:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <main+0x160>)
 8000d26:	6813      	ldr	r3, [r2, #0]
 8000d28:	0418      	lsls	r0, r3, #16
 8000d2a:	d503      	bpl.n	8000d34 <main+0xe0>
    asm("NOP");
 8000d2c:	bf00      	nop
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	0419      	lsls	r1, r3, #16
 8000d32:	d4fb      	bmi.n	8000d2c <main+0xd8>
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d34:	4c1f      	ldr	r4, [pc, #124]	; (8000db4 <main+0x160>)
  HAL_Init();
 8000d36:	f000 fe07 	bl	8001948 <HAL_Init>
  SystemClock_Config();
 8000d3a:	f7ff ff11 	bl	8000b60 <_Z18SystemClock_Configv>
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d3e:	2000      	movs	r0, #0
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000d40:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d48:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d4c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d58:	f003 fc50 	bl	80045fc <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	f003 fc66 	bl	8004630 <HAL_HSEM_Release>
 8000d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d68:	e001      	b.n	8000d6e <main+0x11a>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	d019      	beq.n	8000da2 <main+0x14e>
 8000d6e:	6822      	ldr	r2, [r4, #0]
 8000d70:	0412      	lsls	r2, r2, #16
 8000d72:	d5fa      	bpl.n	8000d6a <main+0x116>
  MX_GPIO_Init();
 8000d74:	f7ff fd68 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d78:	f7ff fd26 	bl	80007c8 <MX_DMA_Init>
  MX_UART4_Init();
 8000d7c:	f000 fbd0 	bl	8001520 <MX_UART4_Init>
  MX_I2C2_Init();
 8000d80:	f7ff fe36 	bl	80009f0 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d84:	f000 fa24 	bl	80011d0 <MX_TIM1_Init>
  MX_UART7_Init();
 8000d88:	f000 fc12 	bl	80015b0 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000d8c:	f00e fa34 	bl	800f1f8 <MX_USB_DEVICE_Init>
  DWT_Init();
 8000d90:	f000 f814 	bl	8000dbc <_Z8DWT_Initv>
  SensorData sensors;
 8000d94:	a802      	add	r0, sp, #8
 8000d96:	f000 f823 	bl	8000de0 <_ZN10SensorDataC1Ev>
	  	  sensors.ReadRawData();
 8000d9a:	a802      	add	r0, sp, #8
 8000d9c:	f000 f834 	bl	8000e08 <_ZN10SensorData11ReadRawDataEv>
  while (1)
 8000da0:	e7fb      	b.n	8000d9a <main+0x146>
  __ASM volatile ("cpsid i" : : : "memory");
 8000da2:	b672      	cpsid	i
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <main+0x150>
 8000da6:	bf00      	nop
 8000da8:	03000012 	.word	0x03000012
 8000dac:	0301000f 	.word	0x0301000f
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	58024400 	.word	0x58024400

08000db8 <Error_Handler>:
 8000db8:	b672      	cpsid	i
 8000dba:	e7fe      	b.n	8000dba <Error_Handler+0x2>

08000dbc <_Z8DWT_Initv>:



void DWT_Init(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000dbc:	4906      	ldr	r1, [pc, #24]	; (8000dd8 <_Z8DWT_Initv+0x1c>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <_Z8DWT_Initv+0x20>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000dc0:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 8000dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dc8:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000dcc:	6813      	ldr	r3, [r2, #0]
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	e0001000 	.word	0xe0001000

08000de0 <_ZN10SensorDataC1Ev>:
#include <sensors.hpp>


SensorData::SensorData()
 8000de0:	4906      	ldr	r1, [pc, #24]	; (8000dfc <_ZN10SensorDataC1Ev+0x1c>)
 8000de2:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <_ZN10SensorDataC1Ev+0x20>)
 8000de4:	b410      	push	{r4}
 8000de6:	e9c0 1200 	strd	r1, r2, [r0]
 8000dea:	4c06      	ldr	r4, [pc, #24]	; (8000e04 <_ZN10SensorDataC1Ev+0x24>)
 8000dec:	3160      	adds	r1, #96	; 0x60
 8000dee:	3260      	adds	r2, #96	; 0x60
 8000df0:	e9c0 4102 	strd	r4, r1, [r0, #8]
 8000df4:	6102      	str	r2, [r0, #16]
{

}
 8000df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	38001000 	.word	0x38001000
 8000e00:	38001020 	.word	0x38001020
 8000e04:	38001040 	.word	0x38001040

08000e08 <_ZN10SensorData11ReadRawDataEv>:

void SensorData::ReadRawData()
{
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	4604      	mov	r4, r0
    ReadGyro();
}

void SensorData::ReadGPS()
{
	  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f003 fbf5 	bl	80045fc <HAL_HSEM_FastTake>
 8000e12:	b970      	cbnz	r0, 8000e32 <_ZN10SensorData11ReadRawDataEv+0x2a>
	      {
	        gps_values.gps_latitude = gps_values_m7->gps_latitude;
 8000e14:	6923      	ldr	r3, [r4, #16]
 8000e16:	6819      	ldr	r1, [r3, #0]
	        gps_values.gps_longitude = gps_values_m7->gps_longitude;
 8000e18:	685a      	ldr	r2, [r3, #4]
	        gps_values.gps_altitude = gps_values_m7->gps_altitude;
 8000e1a:	6898      	ldr	r0, [r3, #8]
	        gps_values.gps_longitude = gps_values_m7->gps_longitude;
 8000e1c:	61a2      	str	r2, [r4, #24]
	        gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 8000e1e:	68da      	ldr	r2, [r3, #12]
	        gps_values.gps_latitude = gps_values_m7->gps_latitude;
 8000e20:	6161      	str	r1, [r4, #20]
	        gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 8000e22:	6919      	ldr	r1, [r3, #16]
	        gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 8000e24:	6222      	str	r2, [r4, #32]
	        gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 8000e26:	695a      	ldr	r2, [r3, #20]
	        gps_values.gps_satellites = gps_values_m7->gps_satellites;
 8000e28:	69db      	ldr	r3, [r3, #28]
	        gps_values.gps_altitude = gps_values_m7->gps_altitude;
 8000e2a:	61e0      	str	r0, [r4, #28]
	        gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 8000e2c:	6261      	str	r1, [r4, #36]	; 0x24
	        gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 8000e2e:	62a2      	str	r2, [r4, #40]	; 0x28
	        gps_values.gps_satellites = gps_values_m7->gps_satellites;
 8000e30:	6323      	str	r3, [r4, #48]	; 0x30
	      }
	      HAL_HSEM_Release(HSEM_ID_0,0);
 8000e32:	2100      	movs	r1, #0
 8000e34:	4608      	mov	r0, r1
 8000e36:	f003 fbfb 	bl	8004630 <HAL_HSEM_Release>
}


void SensorData::ReadMag()
{
	  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f003 fbde 	bl	80045fc <HAL_HSEM_FastTake>
 8000e40:	b930      	cbnz	r0, 8000e50 <_ZN10SensorData11ReadRawDataEv+0x48>
	  {
	    mag_values.imu_mag_x = mag_values_m7->imu_mag_x;
 8000e42:	68a3      	ldr	r3, [r4, #8]
 8000e44:	6819      	ldr	r1, [r3, #0]
	    mag_values.imu_mag_y = mag_values_m7->imu_mag_y;
 8000e46:	685a      	ldr	r2, [r3, #4]
	    mag_values.imu_mag_z = mag_values_m7->imu_mag_z;
 8000e48:	689b      	ldr	r3, [r3, #8]
	    mag_values.imu_mag_x = mag_values_m7->imu_mag_x;
 8000e4a:	6561      	str	r1, [r4, #84]	; 0x54
	    mag_values.imu_mag_y = mag_values_m7->imu_mag_y;
 8000e4c:	65a2      	str	r2, [r4, #88]	; 0x58
	    mag_values.imu_mag_z = mag_values_m7->imu_mag_z;
 8000e4e:	65e3      	str	r3, [r4, #92]	; 0x5c
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8000e50:	2100      	movs	r1, #0
 8000e52:	4608      	mov	r0, r1
 8000e54:	f003 fbec 	bl	8004630 <HAL_HSEM_Release>

}

void SensorData::ReadAcc()
{
	if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f003 fbcf 	bl	80045fc <HAL_HSEM_FastTake>
 8000e5e:	b930      	cbnz	r0, 8000e6e <_ZN10SensorData11ReadRawDataEv+0x66>
	  {
	      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	6819      	ldr	r1, [r3, #0]
	      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8000e64:	685a      	ldr	r2, [r3, #4]
	      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8000e66:	689b      	ldr	r3, [r3, #8]
	      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8000e68:	6361      	str	r1, [r4, #52]	; 0x34
	      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8000e6a:	63a2      	str	r2, [r4, #56]	; 0x38
	      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8000e6c:	63e3      	str	r3, [r4, #60]	; 0x3c
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4608      	mov	r0, r1
 8000e72:	f003 fbdd 	bl	8004630 <HAL_HSEM_Release>
}

void SensorData::ReadBaro()
{
	  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000e76:	2000      	movs	r0, #0
 8000e78:	f003 fbc0 	bl	80045fc <HAL_HSEM_FastTake>
 8000e7c:	b920      	cbnz	r0, 8000e88 <_ZN10SensorData11ReadRawDataEv+0x80>
	  {
	     baro_values.baro_altitude = baro_values_m7->baro_altitude;
 8000e7e:	68e3      	ldr	r3, [r4, #12]
 8000e80:	685a      	ldr	r2, [r3, #4]
	     baro_values.baro_pressure = baro_values_m7->baro_pressure;
 8000e82:	681b      	ldr	r3, [r3, #0]
	     baro_values.baro_altitude = baro_values_m7->baro_altitude;
 8000e84:	6522      	str	r2, [r4, #80]	; 0x50
	     baro_values.baro_pressure = baro_values_m7->baro_pressure;
 8000e86:	64e3      	str	r3, [r4, #76]	; 0x4c
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	f003 fbd0 	bl	8004630 <HAL_HSEM_Release>
}

void SensorData::ReadGyro()
{
	  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000e90:	2000      	movs	r0, #0
 8000e92:	f003 fbb3 	bl	80045fc <HAL_HSEM_FastTake>
 8000e96:	b930      	cbnz	r0, 8000ea6 <_ZN10SensorData11ReadRawDataEv+0x9e>
	  {
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8000e98:	6863      	ldr	r3, [r4, #4]
 8000e9a:	6819      	ldr	r1, [r3, #0]
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8000e9c:	685a      	ldr	r2, [r3, #4]
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 8000e9e:	689b      	ldr	r3, [r3, #8]
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8000ea0:	6421      	str	r1, [r4, #64]	; 0x40
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8000ea2:	6462      	str	r2, [r4, #68]	; 0x44
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 8000ea4:	64a3      	str	r3, [r4, #72]	; 0x48
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8000ea6:	2100      	movs	r1, #0
}
 8000ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8000eac:	4608      	mov	r0, r1
 8000eae:	f003 bbbf 	b.w	8004630 <HAL_HSEM_Release>
 8000eb2:	bf00      	nop

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_MspInit+0x30>)
 8000ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x30>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x30>)
 8000ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	58024400 	.word	0x58024400

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 fd7a 	bl	8001a2c <HAL_IncTick>

  HAL_SYSTICK_IRQHandler();
 8000f38:	f000 ff54 	bl	8001de4 <HAL_SYSTICK_IRQHandler>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <DMA2_Stream7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

void DMA2_Stream7_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <DMA2_Stream7_IRQHandler+0x10>)
 8000f46:	f002 f81b 	bl	8002f80 <HAL_DMA_IRQHandler>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	24000698 	.word	0x24000698

08000f54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <DMA1_Stream5_IRQHandler+0x10>)
 8000f5a:	f002 f811 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	240005a8 	.word	0x240005a8

08000f68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <DMA1_Stream6_IRQHandler+0x10>)
 8000f6e:	f002 f807 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	24000620 	.word	0x24000620

08000f7c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM1_BRK_IRQHandler+0x10>)
 8000f82:	f008 fbd1 	bl	8009728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2400043c 	.word	0x2400043c

08000f90 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <TIM1_UP_IRQHandler+0x10>)
 8000f96:	f008 fbc7 	bl	8009728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2400043c 	.word	0x2400043c

08000fa4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000faa:	f008 fbbd 	bl	8009728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2400043c 	.word	0x2400043c

08000fb8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <TIM1_CC_IRQHandler+0x10>)
 8000fbe:	f008 fbb3 	bl	8009728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2400043c 	.word	0x2400043c

08000fcc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <I2C2_EV_IRQHandler+0x10>)
 8000fd2:	f003 fbd1 	bl	8004778 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	24000370 	.word	0x24000370

08000fe0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <I2C2_ER_IRQHandler+0x10>)
 8000fe6:	f003 fbe1 	bl	80047ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	24000370 	.word	0x24000370

08000ff4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <SDMMC1_IRQHandler+0x10>)
 8000ffa:	f008 f863 	bl	80090c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	240003bc 	.word	0x240003bc

08001008 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
//  {
//    HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
//    __HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
//  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <UART4_IRQHandler+0x10>)
 800100e:	f009 fc5b 	bl	800a8c8 <HAL_UART_IRQHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24000488 	.word	0x24000488

0800101c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <UART7_IRQHandler+0x10>)
 8001022:	f009 fc51 	bl	800a8c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24000518 	.word	0x24000518

08001030 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <OTG_FS_IRQHandler+0x10>)
 8001036:	f004 fc12 	bl	800585e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	24001bf8 	.word	0x24001bf8

08001044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	return 1;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_kill>:

int _kill(int pid, int sig)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800105e:	f00e fe3b 	bl	800fcd8 <__errno>
 8001062:	4603      	mov	r3, r0
 8001064:	2216      	movs	r2, #22
 8001066:	601a      	str	r2, [r3, #0]
	return -1;
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_exit>:

void _exit (int status)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffe7 	bl	8001054 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001086:	e7fe      	b.n	8001086 <_exit+0x12>

08001088 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e00a      	b.n	80010b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800109a:	f3af 8000 	nop.w
 800109e:	4601      	mov	r1, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	b2ca      	uxtb	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf0      	blt.n	800109a <_read+0x12>
	}

return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e009      	b.n	80010e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf1      	blt.n	80010d4 <_write+0x12>
	}
	return len;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_close>:

int _close(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001122:	605a      	str	r2, [r3, #4]
	return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_isatty>:

int _isatty(int file)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	return 1;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f00e fda0 	bl	800fcd8 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	24080000 	.word	0x24080000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	24000438 	.word	0x24000438
 80011cc:	24002010 	.word	0x24002010

080011d0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0a4      	sub	sp, #144	; 0x90
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001208:	222c      	movs	r2, #44	; 0x2c
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f00e fd9d 	bl	800fd4c <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2220      	movs	r2, #32
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f00e fd97 	bl	800fd4c <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800122e:	463a      	mov	r2, r7
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f006 fb9b 	bl	8007970 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d104      	bne.n	800124a <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 8001240:	f006 fb6a 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 8001244:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001248:	e005      	b.n	8001256 <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 800124a:	f006 fb65 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 800124e:	4603      	mov	r3, r0
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 8001256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800125a:	4a5f      	ldr	r2, [pc, #380]	; (80013d8 <MX_TIM1_Init+0x208>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	0c9b      	lsrs	r3, r3, #18
 8001262:	3301      	adds	r3, #1
 8001264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 8001268:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <MX_TIM1_Init+0x20c>)
 800126a:	4a5d      	ldr	r2, [pc, #372]	; (80013e0 <MX_TIM1_Init+0x210>)
 800126c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 800126e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001272:	3b01      	subs	r3, #1
 8001274:	4a59      	ldr	r2, [pc, #356]	; (80013dc <MX_TIM1_Init+0x20c>)
 8001276:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b58      	ldr	r3, [pc, #352]	; (80013dc <MX_TIM1_Init+0x20c>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 800127e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001282:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001286:	fb02 f303 	mul.w	r3, r2, r3
 800128a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	3b01      	subs	r3, #1
 8001294:	4a51      	ldr	r2, [pc, #324]	; (80013dc <MX_TIM1_Init+0x20c>)
 8001296:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001298:	4b50      	ldr	r3, [pc, #320]	; (80013dc <MX_TIM1_Init+0x20c>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800129e:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <MX_TIM1_Init+0x20c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <MX_TIM1_Init+0x20c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012aa:	484c      	ldr	r0, [pc, #304]	; (80013dc <MX_TIM1_Init+0x20c>)
 80012ac:	f008 f984 	bl	80095b8 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80012b6:	f7ff fd7f 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012be:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012c4:	4619      	mov	r1, r3
 80012c6:	4845      	ldr	r0, [pc, #276]	; (80013dc <MX_TIM1_Init+0x20c>)
 80012c8:	f008 fc5e 	bl	8009b88 <HAL_TIM_ConfigClockSource>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80012d2:	f7ff fd71 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012d6:	4841      	ldr	r0, [pc, #260]	; (80013dc <MX_TIM1_Init+0x20c>)
 80012d8:	f008 f9c5 	bl	8009666 <HAL_TIM_PWM_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80012e2:	f7ff fd69 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012f6:	4619      	mov	r1, r3
 80012f8:	4838      	ldr	r0, [pc, #224]	; (80013dc <MX_TIM1_Init+0x20c>)
 80012fa:	f009 f971 	bl	800a5e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001304:	f7ff fd58 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 800130c:	2332      	movs	r3, #50	; 0x32
 800130e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001324:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001328:	2200      	movs	r2, #0
 800132a:	4619      	mov	r1, r3
 800132c:	482b      	ldr	r0, [pc, #172]	; (80013dc <MX_TIM1_Init+0x20c>)
 800132e:	f008 fb1b 	bl	8009968 <HAL_TIM_PWM_ConfigChannel>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001338:	f7ff fd3e 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800133c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001340:	2204      	movs	r2, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4825      	ldr	r0, [pc, #148]	; (80013dc <MX_TIM1_Init+0x20c>)
 8001346:	f008 fb0f 	bl	8009968 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001350:	f7ff fd32 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001354:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001358:	2208      	movs	r2, #8
 800135a:	4619      	mov	r1, r3
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <MX_TIM1_Init+0x20c>)
 800135e:	f008 fb03 	bl	8009968 <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8001368:	f7ff fd26 	bl	8000db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800136c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001370:	220c      	movs	r2, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4819      	ldr	r0, [pc, #100]	; (80013dc <MX_TIM1_Init+0x20c>)
 8001376:	f008 faf7 	bl	8009968 <HAL_TIM_PWM_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8001380:	f7ff fd1a 	bl	8000db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013aa:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4808      	ldr	r0, [pc, #32]	; (80013dc <MX_TIM1_Init+0x20c>)
 80013bc:	f009 f998 	bl	800a6f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 80013c6:	f7ff fcf7 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_TIM1_Init+0x20c>)
 80013cc:	f000 f84a 	bl	8001464 <HAL_TIM_MspPostInit>

}
 80013d0:	bf00      	nop
 80013d2:	3790      	adds	r7, #144	; 0x90
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	66673335 	.word	0x66673335
 80013dc:	2400043c 	.word	0x2400043c
 80013e0:	40010000 	.word	0x40010000

080013e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1a      	ldr	r2, [pc, #104]	; (800145c <HAL_TIM_Base_MspInit+0x78>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12e      	bne.n	8001454 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <HAL_TIM_Base_MspInit+0x7c>)
 80013f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_TIM_Base_MspInit+0x7c>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_TIM_Base_MspInit+0x7c>)
 8001408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2018      	movs	r0, #24
 800141a:	f000 fc32 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800141e:	2018      	movs	r0, #24
 8001420:	f000 fc49 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2019      	movs	r0, #25
 800142a:	f000 fc2a 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800142e:	2019      	movs	r0, #25
 8001430:	f000 fc41 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	201a      	movs	r0, #26
 800143a:	f000 fc22 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800143e:	201a      	movs	r0, #26
 8001440:	f000 fc39 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	201b      	movs	r0, #27
 800144a:	f000 fc1a 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800144e:	201b      	movs	r0, #27
 8001450:	f000 fc31 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40010000 	.word	0x40010000
 8001460:	58024400 	.word	0x58024400

08001464 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a23      	ldr	r2, [pc, #140]	; (8001510 <HAL_TIM_MspPostInit+0xac>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d13f      	bne.n	8001506 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_TIM_MspPostInit+0xb0>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_TIM_MspPostInit+0xb0>)
 800148e:	f043 0310 	orr.w	r3, r3, #16
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <HAL_TIM_MspPostInit+0xb0>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_TIM_MspPostInit+0xb0>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_TIM_MspPostInit+0xb0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_TIM_MspPostInit+0xb0>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80014c2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <HAL_TIM_MspPostInit+0xb4>)
 80014e0:	f002 fec2 	bl	8004268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <HAL_TIM_MspPostInit+0xb8>)
 8001502:	f002 feb1 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40010000 	.word	0x40010000
 8001514:	58024400 	.word	0x58024400
 8001518:	58021000 	.word	0x58021000
 800151c:	58020000 	.word	0x58020000

08001520 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;
DMA_HandleTypeDef hdma_uart4_rx;
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_UART4_Init+0x84>)
 8001526:	4a20      	ldr	r2, [pc, #128]	; (80015a8 <MX_UART4_Init+0x88>)
 8001528:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_UART4_Init+0x84>)
 800152c:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <MX_UART4_Init+0x8c>)
 800152e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_UART4_Init+0x84>)
 8001532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001536:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_UART4_Init+0x84>)
 800153a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_UART4_Init+0x84>)
 8001542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001546:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_UART4_Init+0x84>)
 800154a:	2204      	movs	r2, #4
 800154c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_UART4_Init+0x84>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_UART4_Init+0x84>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_UART4_Init+0x84>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_UART4_Init+0x84>)
 8001562:	2202      	movs	r2, #2
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_UART4_Init+0x84>)
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_UART4_Init+0x84>)
 800156e:	f009 f95b 	bl	800a828 <HAL_UART_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001578:	f7ff fc1e 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157c:	2100      	movs	r1, #0
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <MX_UART4_Init+0x84>)
 8001580:	f00a fc4b 	bl	800be1a <HAL_UARTEx_SetRxFifoThreshold>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 800158a:	f7ff fc15 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_UART4_Init+0x84>)
 8001590:	f00a fbcc 	bl	800bd2c <HAL_UARTEx_DisableFifoMode>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 800159a:	f7ff fc0d 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	24000488 	.word	0x24000488
 80015a8:	40004c00 	.word	0x40004c00
 80015ac:	000186a0 	.word	0x000186a0

080015b0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <MX_UART7_Init+0x90>)
 80015b6:	4a23      	ldr	r2, [pc, #140]	; (8001644 <MX_UART7_Init+0x94>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <MX_UART7_Init+0x90>)
 80015bc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80015c0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <MX_UART7_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <MX_UART7_Init+0x90>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <MX_UART7_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_UART7_Init+0x90>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <MX_UART7_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_UART7_Init+0x90>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_UART7_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_UART7_Init+0x90>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_UART7_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <MX_UART7_Init+0x90>)
 80015fa:	f009 f915 	bl	800a828 <HAL_UART_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001604:	f7ff fbd8 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001608:	2100      	movs	r1, #0
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_UART7_Init+0x90>)
 800160c:	f00a fbc7 	bl	800bd9e <HAL_UARTEx_SetTxFifoThreshold>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001616:	f7ff fbcf 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161a:	2100      	movs	r1, #0
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <MX_UART7_Init+0x90>)
 800161e:	f00a fbfc 	bl	800be1a <HAL_UARTEx_SetRxFifoThreshold>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001628:	f7ff fbc6 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_UART7_Init+0x90>)
 800162e:	f00a fb7d 	bl	800bd2c <HAL_UARTEx_DisableFifoMode>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001638:	f7ff fbbe 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	24000518 	.word	0x24000518
 8001644:	40007800 	.word	0x40007800

08001648 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0ba      	sub	sp, #232	; 0xe8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	22bc      	movs	r2, #188	; 0xbc
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00e fb6f 	bl	800fd4c <memset>
  if(uartHandle->Instance==UART4)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a95      	ldr	r2, [pc, #596]	; (80018c8 <HAL_UART_MspInit+0x280>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d179      	bne.n	800176c <HAL_UART_MspInit+0x124>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001682:	f107 0318 	add.w	r3, r7, #24
 8001686:	4618      	mov	r0, r3
 8001688:	f006 f9b4 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001692:	f7ff fb91 	bl	8000db8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001696:	4b8d      	ldr	r3, [pc, #564]	; (80018cc <HAL_UART_MspInit+0x284>)
 8001698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800169c:	4a8b      	ldr	r2, [pc, #556]	; (80018cc <HAL_UART_MspInit+0x284>)
 800169e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016a6:	4b89      	ldr	r3, [pc, #548]	; (80018cc <HAL_UART_MspInit+0x284>)
 80016a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b85      	ldr	r3, [pc, #532]	; (80018cc <HAL_UART_MspInit+0x284>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a84      	ldr	r2, [pc, #528]	; (80018cc <HAL_UART_MspInit+0x284>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_UART_MspInit+0x284>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016d2:	2303      	movs	r3, #3
 80016d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016ea:	2308      	movs	r3, #8
 80016ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4876      	ldr	r0, [pc, #472]	; (80018d0 <HAL_UART_MspInit+0x288>)
 80016f8:	f002 fdb6 	bl	8004268 <HAL_GPIO_Init>

    /*UART4 RX Init
     *
     */

    hdma_uart4_rx.Instance = DMA2_Stream7;
 80016fc:	4b75      	ldr	r3, [pc, #468]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 80016fe:	4a76      	ldr	r2, [pc, #472]	; (80018d8 <HAL_UART_MspInit+0x290>)
 8001700:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001702:	4b74      	ldr	r3, [pc, #464]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 8001704:	223f      	movs	r2, #63	; 0x3f
 8001706:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001708:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800170e:	4b71      	ldr	r3, [pc, #452]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001714:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 8001716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800171a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171c:	4b6d      	ldr	r3, [pc, #436]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001722:	4b6c      	ldr	r3, [pc, #432]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 800172a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001730:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 8001732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001736:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001738:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800173e:	4865      	ldr	r0, [pc, #404]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 8001740:	f000 fb5e 	bl	8001e00 <HAL_DMA_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800174a:	f7ff fb35 	bl	8000db8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a60      	ldr	r2, [pc, #384]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 8001752:	67da      	str	r2, [r3, #124]	; 0x7c
 8001754:	4a5f      	ldr	r2, [pc, #380]	; (80018d4 <HAL_UART_MspInit+0x28c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6393      	str	r3, [r2, #56]	; 0x38
    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2034      	movs	r0, #52	; 0x34
 8001760:	f000 fa8f 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001764:	2034      	movs	r0, #52	; 0x34
 8001766:	f000 faa6 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 800176a:	e0a9      	b.n	80018c0 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==UART7)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a5a      	ldr	r2, [pc, #360]	; (80018dc <HAL_UART_MspInit+0x294>)
 8001772:	4293      	cmp	r3, r2
 8001774:	f040 80a4 	bne.w	80018c0 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001782:	f107 0318 	add.w	r3, r7, #24
 8001786:	4618      	mov	r0, r3
 8001788:	f006 f934 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001792:	f7ff fb11 	bl	8000db8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001796:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <HAL_UART_MspInit+0x284>)
 8001798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800179c:	4a4b      	ldr	r2, [pc, #300]	; (80018cc <HAL_UART_MspInit+0x284>)
 800179e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017a6:	4b49      	ldr	r3, [pc, #292]	; (80018cc <HAL_UART_MspInit+0x284>)
 80017a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b4:	4b45      	ldr	r3, [pc, #276]	; (80018cc <HAL_UART_MspInit+0x284>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	4a44      	ldr	r2, [pc, #272]	; (80018cc <HAL_UART_MspInit+0x284>)
 80017bc:	f043 0320 	orr.w	r3, r3, #32
 80017c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c4:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_UART_MspInit+0x284>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d2:	23c0      	movs	r3, #192	; 0xc0
 80017d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80017ea:	2307      	movs	r3, #7
 80017ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017f4:	4619      	mov	r1, r3
 80017f6:	483a      	ldr	r0, [pc, #232]	; (80018e0 <HAL_UART_MspInit+0x298>)
 80017f8:	f002 fd36 	bl	8004268 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 80017fc:	4b39      	ldr	r3, [pc, #228]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 80017fe:	4a3a      	ldr	r2, [pc, #232]	; (80018e8 <HAL_UART_MspInit+0x2a0>)
 8001800:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001802:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 8001804:	224f      	movs	r2, #79	; 0x4f
 8001806:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800180e:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 8001816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001828:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800183a:	482a      	ldr	r0, [pc, #168]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 800183c:	f000 fae0 	bl	8001e00 <HAL_DMA_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001846:	f7ff fab7 	bl	8000db8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a25      	ldr	r2, [pc, #148]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 800184e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001850:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <HAL_UART_MspInit+0x29c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 8001858:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_UART_MspInit+0x2a8>)
 800185a:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 800185e:	2250      	movs	r2, #80	; 0x50
 8001860:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 8001864:	2240      	movs	r2, #64	; 0x40
 8001866:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 8001870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001874:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 8001890:	2200      	movs	r2, #0
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001894:	4815      	ldr	r0, [pc, #84]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 8001896:	f000 fab3 	bl	8001e00 <HAL_DMA_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80018a0:	f7ff fa8a 	bl	8000db8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 80018a8:	679a      	str	r2, [r3, #120]	; 0x78
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_UART_MspInit+0x2a4>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	2052      	movs	r0, #82	; 0x52
 80018b6:	f000 f9e4 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80018ba:	2052      	movs	r0, #82	; 0x52
 80018bc:	f000 f9fb 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
}
 80018c0:	bf00      	nop
 80018c2:	37e8      	adds	r7, #232	; 0xe8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40004c00 	.word	0x40004c00
 80018cc:	58024400 	.word	0x58024400
 80018d0:	58020000 	.word	0x58020000
 80018d4:	24000698 	.word	0x24000698
 80018d8:	400204b8 	.word	0x400204b8
 80018dc:	40007800 	.word	0x40007800
 80018e0:	58021400 	.word	0x58021400
 80018e4:	240005a8 	.word	0x240005a8
 80018e8:	40020088 	.word	0x40020088
 80018ec:	24000620 	.word	0x24000620
 80018f0:	400200a0 	.word	0x400200a0

080018f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800192c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018f8:	f7fe fecc 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fe:	490d      	ldr	r1, [pc, #52]	; (8001934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001914:	4c0a      	ldr	r4, [pc, #40]	; (8001940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001922:	f00e f9df 	bl	800fce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001926:	f7ff f995 	bl	8000c54 <main>
  bx  lr
 800192a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800192c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001930:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001934:	24000354 	.word	0x24000354
  ldr r2, =_sidata
 8001938:	08012abc 	.word	0x08012abc
  ldr r2, =_sbss
 800193c:	24000354 	.word	0x24000354
  ldr r4, =_ebss
 8001940:	24002010 	.word	0x24002010

08001944 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC3_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194e:	2003      	movs	r0, #3
 8001950:	f000 f98c 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001954:	f005 fe36 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_Init+0x68>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	0a1b      	lsrs	r3, r3, #8
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	4913      	ldr	r1, [pc, #76]	; (80019b4 <HAL_Init+0x6c>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_Init+0x68>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <HAL_Init+0x6c>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <HAL_Init+0x70>)
 800198a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800198c:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_Init+0x74>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001992:	2000      	movs	r0, #0
 8001994:	f000 f814 	bl	80019c0 <HAL_InitTick>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e002      	b.n	80019a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019a2:	f7ff fa87 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	58024400 	.word	0x58024400
 80019b4:	08012690 	.word	0x08012690
 80019b8:	24000004 	.word	0x24000004
 80019bc:	24000000 	.word	0x24000000

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_InitTick+0x60>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e021      	b.n	8001a18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_InitTick+0x64>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_InitTick+0x60>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f971 	bl	8001cd2 <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 f93b 	bl	8001c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x68>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2400000c 	.word	0x2400000c
 8001a24:	24000000 	.word	0x24000000
 8001a28:	24000008 	.word	0x24000008

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2400000c 	.word	0x2400000c
 8001a50:	24000710 	.word	0x24000710

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	24000710 	.word	0x24000710

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2400000c 	.word	0x2400000c

08001ab4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_GetREVID+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0c1b      	lsrs	r3, r3, #16
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	5c001000 	.word	0x5c001000

08001acc <__NVIC_SetPriorityGrouping>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <__NVIC_SetPriorityGrouping+0x40>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x40>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00
 8001b10:	05fa0000 	.word	0x05fa0000

08001b14 <__NVIC_GetPriorityGrouping>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4907      	ldr	r1, [pc, #28]	; (8001b68 <__NVIC_EnableIRQ+0x38>)
 8001b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <__NVIC_SetPriority>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	; (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	; (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	; 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff8e 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff29 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff40 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff90 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5f 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff33 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffa4 	bl	8001c28 <SysTick_Config>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cf0:	f3bf 8f5f 	dmb	sy
}
 8001cf4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_MPU_Disable+0x28>)
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_MPU_Disable+0x28>)
 8001cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d00:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_MPU_Disable+0x2c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	e000ed90 	.word	0xe000ed90

08001d1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <HAL_MPU_Enable+0x38>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_MPU_Enable+0x3c>)
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <HAL_MPU_Enable+0x3c>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d3a:	f3bf 8f4f 	dsb	sy
}
 8001d3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d40:	f3bf 8f6f 	isb	sy
}
 8001d44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed90 	.word	0xe000ed90
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	785a      	ldrb	r2, [r3, #1]
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_MPU_ConfigRegion+0x84>)
 8001d6a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d029      	beq.n	8001dc8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001d74:	4a1a      	ldr	r2, [pc, #104]	; (8001de0 <HAL_MPU_ConfigRegion+0x84>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7b1b      	ldrb	r3, [r3, #12]
 8001d80:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7adb      	ldrb	r3, [r3, #11]
 8001d86:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7a9b      	ldrb	r3, [r3, #10]
 8001d8e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7b5b      	ldrb	r3, [r3, #13]
 8001d96:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7b9b      	ldrb	r3, [r3, #14]
 8001d9e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001da0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7bdb      	ldrb	r3, [r3, #15]
 8001da6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001da8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7a5b      	ldrb	r3, [r3, #9]
 8001dae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001db0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7a1b      	ldrb	r3, [r3, #8]
 8001db6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001db8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001dc2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001dc4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001dc6:	e005      	b.n	8001dd4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_MPU_ConfigRegion+0x84>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <HAL_MPU_ConfigRegion+0x84>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed90 	.word	0xe000ed90

08001de4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001de8:	f000 f802 	bl	8001df0 <HAL_SYSTICK_Callback>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff fe24 	bl	8001a54 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e316      	b.n	8002446 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a66      	ldr	r2, [pc, #408]	; (8001fb8 <HAL_DMA_Init+0x1b8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d04a      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a65      	ldr	r2, [pc, #404]	; (8001fbc <HAL_DMA_Init+0x1bc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d045      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a63      	ldr	r2, [pc, #396]	; (8001fc0 <HAL_DMA_Init+0x1c0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d040      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a62      	ldr	r2, [pc, #392]	; (8001fc4 <HAL_DMA_Init+0x1c4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d03b      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a60      	ldr	r2, [pc, #384]	; (8001fc8 <HAL_DMA_Init+0x1c8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d036      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5f      	ldr	r2, [pc, #380]	; (8001fcc <HAL_DMA_Init+0x1cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d031      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5d      	ldr	r2, [pc, #372]	; (8001fd0 <HAL_DMA_Init+0x1d0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02c      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5c      	ldr	r2, [pc, #368]	; (8001fd4 <HAL_DMA_Init+0x1d4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d027      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5a      	ldr	r2, [pc, #360]	; (8001fd8 <HAL_DMA_Init+0x1d8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a59      	ldr	r2, [pc, #356]	; (8001fdc <HAL_DMA_Init+0x1dc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a57      	ldr	r2, [pc, #348]	; (8001fe0 <HAL_DMA_Init+0x1e0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a56      	ldr	r2, [pc, #344]	; (8001fe4 <HAL_DMA_Init+0x1e4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a54      	ldr	r2, [pc, #336]	; (8001fe8 <HAL_DMA_Init+0x1e8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a53      	ldr	r2, [pc, #332]	; (8001fec <HAL_DMA_Init+0x1ec>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_DMA_Init+0x1f0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_DMA_Init+0xb8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a50      	ldr	r2, [pc, #320]	; (8001ff4 <HAL_DMA_Init+0x1f4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_DMA_Init+0xbc>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_DMA_Init+0xbe>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 813b 	beq.w	800213a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a37      	ldr	r2, [pc, #220]	; (8001fb8 <HAL_DMA_Init+0x1b8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d04a      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a36      	ldr	r2, [pc, #216]	; (8001fbc <HAL_DMA_Init+0x1bc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d045      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <HAL_DMA_Init+0x1c0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d040      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a33      	ldr	r2, [pc, #204]	; (8001fc4 <HAL_DMA_Init+0x1c4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d03b      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a31      	ldr	r2, [pc, #196]	; (8001fc8 <HAL_DMA_Init+0x1c8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d036      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <HAL_DMA_Init+0x1cc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d031      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2e      	ldr	r2, [pc, #184]	; (8001fd0 <HAL_DMA_Init+0x1d0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02c      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	; (8001fd4 <HAL_DMA_Init+0x1d4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d027      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a2b      	ldr	r2, [pc, #172]	; (8001fd8 <HAL_DMA_Init+0x1d8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d022      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2a      	ldr	r2, [pc, #168]	; (8001fdc <HAL_DMA_Init+0x1dc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d01d      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <HAL_DMA_Init+0x1e0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d018      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <HAL_DMA_Init+0x1e4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d013      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <HAL_DMA_Init+0x1e8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00e      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a24      	ldr	r2, [pc, #144]	; (8001fec <HAL_DMA_Init+0x1ec>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a22      	ldr	r2, [pc, #136]	; (8001ff0 <HAL_DMA_Init+0x1f0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d004      	beq.n	8001f74 <HAL_DMA_Init+0x174>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a21      	ldr	r2, [pc, #132]	; (8001ff4 <HAL_DMA_Init+0x1f4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d108      	bne.n	8001f86 <HAL_DMA_Init+0x186>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e007      	b.n	8001f96 <HAL_DMA_Init+0x196>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f96:	e02f      	b.n	8001ff8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f98:	f7ff fd5c 	bl	8001a54 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d928      	bls.n	8001ff8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2203      	movs	r2, #3
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e246      	b.n	8002446 <HAL_DMA_Init+0x646>
 8001fb8:	40020010 	.word	0x40020010
 8001fbc:	40020028 	.word	0x40020028
 8001fc0:	40020040 	.word	0x40020040
 8001fc4:	40020058 	.word	0x40020058
 8001fc8:	40020070 	.word	0x40020070
 8001fcc:	40020088 	.word	0x40020088
 8001fd0:	400200a0 	.word	0x400200a0
 8001fd4:	400200b8 	.word	0x400200b8
 8001fd8:	40020410 	.word	0x40020410
 8001fdc:	40020428 	.word	0x40020428
 8001fe0:	40020440 	.word	0x40020440
 8001fe4:	40020458 	.word	0x40020458
 8001fe8:	40020470 	.word	0x40020470
 8001fec:	40020488 	.word	0x40020488
 8001ff0:	400204a0 	.word	0x400204a0
 8001ff4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1c8      	bne.n	8001f98 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4b83      	ldr	r3, [pc, #524]	; (8002220 <HAL_DMA_Init+0x420>)
 8002012:	4013      	ands	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800201e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2b04      	cmp	r3, #4
 800204a:	d107      	bne.n	800205c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	4313      	orrs	r3, r2
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800205c:	4b71      	ldr	r3, [pc, #452]	; (8002224 <HAL_DMA_Init+0x424>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b71      	ldr	r3, [pc, #452]	; (8002228 <HAL_DMA_Init+0x428>)
 8002062:	4013      	ands	r3, r2
 8002064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002068:	d328      	bcc.n	80020bc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b28      	cmp	r3, #40	; 0x28
 8002070:	d903      	bls.n	800207a <HAL_DMA_Init+0x27a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b2e      	cmp	r3, #46	; 0x2e
 8002078:	d917      	bls.n	80020aa <HAL_DMA_Init+0x2aa>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b3e      	cmp	r3, #62	; 0x3e
 8002080:	d903      	bls.n	800208a <HAL_DMA_Init+0x28a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b42      	cmp	r3, #66	; 0x42
 8002088:	d90f      	bls.n	80020aa <HAL_DMA_Init+0x2aa>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b46      	cmp	r3, #70	; 0x46
 8002090:	d903      	bls.n	800209a <HAL_DMA_Init+0x29a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b48      	cmp	r3, #72	; 0x48
 8002098:	d907      	bls.n	80020aa <HAL_DMA_Init+0x2aa>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b4e      	cmp	r3, #78	; 0x4e
 80020a0:	d905      	bls.n	80020ae <HAL_DMA_Init+0x2ae>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b52      	cmp	r3, #82	; 0x52
 80020a8:	d801      	bhi.n	80020ae <HAL_DMA_Init+0x2ae>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_DMA_Init+0x2b0>
 80020ae:	2300      	movs	r3, #0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f023 0307 	bic.w	r3, r3, #7
 80020d2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d117      	bne.n	8002116 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00e      	beq.n	8002116 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f001 ff2b 	bl	8003f54 <DMA_CheckFifoParam>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2240      	movs	r2, #64	; 0x40
 8002108:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e197      	b.n	8002446 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f001 fe66 	bl	8003df0 <DMA_CalcBaseAndBitshift>
 8002124:	4603      	mov	r3, r0
 8002126:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	223f      	movs	r2, #63	; 0x3f
 8002132:	409a      	lsls	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e0cd      	b.n	80022d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a3b      	ldr	r2, [pc, #236]	; (800222c <HAL_DMA_Init+0x42c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_DMA_Init+0x38a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a39      	ldr	r2, [pc, #228]	; (8002230 <HAL_DMA_Init+0x430>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01d      	beq.n	800218a <HAL_DMA_Init+0x38a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a38      	ldr	r2, [pc, #224]	; (8002234 <HAL_DMA_Init+0x434>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d018      	beq.n	800218a <HAL_DMA_Init+0x38a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a36      	ldr	r2, [pc, #216]	; (8002238 <HAL_DMA_Init+0x438>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_DMA_Init+0x38a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a35      	ldr	r2, [pc, #212]	; (800223c <HAL_DMA_Init+0x43c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00e      	beq.n	800218a <HAL_DMA_Init+0x38a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a33      	ldr	r2, [pc, #204]	; (8002240 <HAL_DMA_Init+0x440>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_DMA_Init+0x38a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a32      	ldr	r2, [pc, #200]	; (8002244 <HAL_DMA_Init+0x444>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <HAL_DMA_Init+0x38a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a30      	ldr	r2, [pc, #192]	; (8002248 <HAL_DMA_Init+0x448>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_DMA_Init+0x38e>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_DMA_Init+0x390>
 800218e:	2300      	movs	r3, #0
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 8097 	beq.w	80022c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_DMA_Init+0x42c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d021      	beq.n	80021e4 <HAL_DMA_Init+0x3e4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a22      	ldr	r2, [pc, #136]	; (8002230 <HAL_DMA_Init+0x430>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01c      	beq.n	80021e4 <HAL_DMA_Init+0x3e4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a21      	ldr	r2, [pc, #132]	; (8002234 <HAL_DMA_Init+0x434>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d017      	beq.n	80021e4 <HAL_DMA_Init+0x3e4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1f      	ldr	r2, [pc, #124]	; (8002238 <HAL_DMA_Init+0x438>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d012      	beq.n	80021e4 <HAL_DMA_Init+0x3e4>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1e      	ldr	r2, [pc, #120]	; (800223c <HAL_DMA_Init+0x43c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00d      	beq.n	80021e4 <HAL_DMA_Init+0x3e4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <HAL_DMA_Init+0x440>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d008      	beq.n	80021e4 <HAL_DMA_Init+0x3e4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <HAL_DMA_Init+0x444>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <HAL_DMA_Init+0x3e4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <HAL_DMA_Init+0x448>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_DMA_Init+0x44c>)
 8002202:	4013      	ands	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d020      	beq.n	8002250 <HAL_DMA_Init+0x450>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b80      	cmp	r3, #128	; 0x80
 8002214:	d102      	bne.n	800221c <HAL_DMA_Init+0x41c>
 8002216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800221a:	e01a      	b.n	8002252 <HAL_DMA_Init+0x452>
 800221c:	2300      	movs	r3, #0
 800221e:	e018      	b.n	8002252 <HAL_DMA_Init+0x452>
 8002220:	fe10803f 	.word	0xfe10803f
 8002224:	5c001000 	.word	0x5c001000
 8002228:	ffff0000 	.word	0xffff0000
 800222c:	58025408 	.word	0x58025408
 8002230:	5802541c 	.word	0x5802541c
 8002234:	58025430 	.word	0x58025430
 8002238:	58025444 	.word	0x58025444
 800223c:	58025458 	.word	0x58025458
 8002240:	5802546c 	.word	0x5802546c
 8002244:	58025480 	.word	0x58025480
 8002248:	58025494 	.word	0x58025494
 800224c:	fffe000f 	.word	0xfffe000f
 8002250:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68d2      	ldr	r2, [r2, #12]
 8002256:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002258:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002260:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002268:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002270:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002278:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002280:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b6e      	ldr	r3, [pc, #440]	; (8002450 <HAL_DMA_Init+0x650>)
 8002298:	4413      	add	r3, r2
 800229a:	4a6e      	ldr	r2, [pc, #440]	; (8002454 <HAL_DMA_Init+0x654>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	009a      	lsls	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f001 fda1 	bl	8003df0 <DMA_CalcBaseAndBitshift>
 80022ae:	4603      	mov	r3, r0
 80022b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	f003 031f 	and.w	r3, r3, #31
 80022ba:	2201      	movs	r2, #1
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	e008      	b.n	80022d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2240      	movs	r2, #64	; 0x40
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2203      	movs	r2, #3
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0b7      	b.n	8002446 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a5f      	ldr	r2, [pc, #380]	; (8002458 <HAL_DMA_Init+0x658>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d072      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a5d      	ldr	r2, [pc, #372]	; (800245c <HAL_DMA_Init+0x65c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d06d      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5c      	ldr	r2, [pc, #368]	; (8002460 <HAL_DMA_Init+0x660>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d068      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5a      	ldr	r2, [pc, #360]	; (8002464 <HAL_DMA_Init+0x664>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d063      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a59      	ldr	r2, [pc, #356]	; (8002468 <HAL_DMA_Init+0x668>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d05e      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a57      	ldr	r2, [pc, #348]	; (800246c <HAL_DMA_Init+0x66c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d059      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a56      	ldr	r2, [pc, #344]	; (8002470 <HAL_DMA_Init+0x670>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d054      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a54      	ldr	r2, [pc, #336]	; (8002474 <HAL_DMA_Init+0x674>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d04f      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a53      	ldr	r2, [pc, #332]	; (8002478 <HAL_DMA_Init+0x678>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d04a      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a51      	ldr	r2, [pc, #324]	; (800247c <HAL_DMA_Init+0x67c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d045      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a50      	ldr	r2, [pc, #320]	; (8002480 <HAL_DMA_Init+0x680>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d040      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a4e      	ldr	r2, [pc, #312]	; (8002484 <HAL_DMA_Init+0x684>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d03b      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <HAL_DMA_Init+0x688>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d036      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a4b      	ldr	r2, [pc, #300]	; (800248c <HAL_DMA_Init+0x68c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d031      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a4a      	ldr	r2, [pc, #296]	; (8002490 <HAL_DMA_Init+0x690>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d02c      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a48      	ldr	r2, [pc, #288]	; (8002494 <HAL_DMA_Init+0x694>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d027      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a47      	ldr	r2, [pc, #284]	; (8002498 <HAL_DMA_Init+0x698>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a45      	ldr	r2, [pc, #276]	; (800249c <HAL_DMA_Init+0x69c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d01d      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a44      	ldr	r2, [pc, #272]	; (80024a0 <HAL_DMA_Init+0x6a0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d018      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a42      	ldr	r2, [pc, #264]	; (80024a4 <HAL_DMA_Init+0x6a4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a41      	ldr	r2, [pc, #260]	; (80024a8 <HAL_DMA_Init+0x6a8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00e      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a3f      	ldr	r2, [pc, #252]	; (80024ac <HAL_DMA_Init+0x6ac>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a3e      	ldr	r2, [pc, #248]	; (80024b0 <HAL_DMA_Init+0x6b0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_DMA_Init+0x5c6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3c      	ldr	r2, [pc, #240]	; (80024b4 <HAL_DMA_Init+0x6b4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_DMA_Init+0x5ca>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_DMA_Init+0x5cc>
 80023ca:	2300      	movs	r3, #0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d032      	beq.n	8002436 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f001 fe3b 	bl	800404c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b80      	cmp	r3, #128	; 0x80
 80023dc:	d102      	bne.n	80023e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d010      	beq.n	8002424 <HAL_DMA_Init+0x624>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b08      	cmp	r3, #8
 8002408:	d80c      	bhi.n	8002424 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f001 feb8 	bl	8004180 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	e008      	b.n	8002436 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	a7fdabf8 	.word	0xa7fdabf8
 8002454:	cccccccd 	.word	0xcccccccd
 8002458:	40020010 	.word	0x40020010
 800245c:	40020028 	.word	0x40020028
 8002460:	40020040 	.word	0x40020040
 8002464:	40020058 	.word	0x40020058
 8002468:	40020070 	.word	0x40020070
 800246c:	40020088 	.word	0x40020088
 8002470:	400200a0 	.word	0x400200a0
 8002474:	400200b8 	.word	0x400200b8
 8002478:	40020410 	.word	0x40020410
 800247c:	40020428 	.word	0x40020428
 8002480:	40020440 	.word	0x40020440
 8002484:	40020458 	.word	0x40020458
 8002488:	40020470 	.word	0x40020470
 800248c:	40020488 	.word	0x40020488
 8002490:	400204a0 	.word	0x400204a0
 8002494:	400204b8 	.word	0x400204b8
 8002498:	58025408 	.word	0x58025408
 800249c:	5802541c 	.word	0x5802541c
 80024a0:	58025430 	.word	0x58025430
 80024a4:	58025444 	.word	0x58025444
 80024a8:	58025458 	.word	0x58025458
 80024ac:	5802546c 	.word	0x5802546c
 80024b0:	58025480 	.word	0x58025480
 80024b4:	58025494 	.word	0x58025494

080024b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff fac8 	bl	8001a54 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e2dc      	b.n	8002a8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d008      	beq.n	80024ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e2cd      	b.n	8002a8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a76      	ldr	r2, [pc, #472]	; (80026cc <HAL_DMA_Abort+0x214>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d04a      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a74      	ldr	r2, [pc, #464]	; (80026d0 <HAL_DMA_Abort+0x218>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d045      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a73      	ldr	r2, [pc, #460]	; (80026d4 <HAL_DMA_Abort+0x21c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d040      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a71      	ldr	r2, [pc, #452]	; (80026d8 <HAL_DMA_Abort+0x220>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d03b      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a70      	ldr	r2, [pc, #448]	; (80026dc <HAL_DMA_Abort+0x224>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d036      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6e      	ldr	r2, [pc, #440]	; (80026e0 <HAL_DMA_Abort+0x228>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d031      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6d      	ldr	r2, [pc, #436]	; (80026e4 <HAL_DMA_Abort+0x22c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d02c      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6b      	ldr	r2, [pc, #428]	; (80026e8 <HAL_DMA_Abort+0x230>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d027      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6a      	ldr	r2, [pc, #424]	; (80026ec <HAL_DMA_Abort+0x234>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d022      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a68      	ldr	r2, [pc, #416]	; (80026f0 <HAL_DMA_Abort+0x238>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01d      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a67      	ldr	r2, [pc, #412]	; (80026f4 <HAL_DMA_Abort+0x23c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d018      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a65      	ldr	r2, [pc, #404]	; (80026f8 <HAL_DMA_Abort+0x240>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a64      	ldr	r2, [pc, #400]	; (80026fc <HAL_DMA_Abort+0x244>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00e      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a62      	ldr	r2, [pc, #392]	; (8002700 <HAL_DMA_Abort+0x248>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d009      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a61      	ldr	r2, [pc, #388]	; (8002704 <HAL_DMA_Abort+0x24c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d004      	beq.n	800258e <HAL_DMA_Abort+0xd6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a5f      	ldr	r2, [pc, #380]	; (8002708 <HAL_DMA_Abort+0x250>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_DMA_Abort+0xda>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_DMA_Abort+0xdc>
 8002592:	2300      	movs	r3, #0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 021e 	bic.w	r2, r2, #30
 80025a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e00a      	b.n	80025d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 020e 	bic.w	r2, r2, #14
 80025ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a3c      	ldr	r2, [pc, #240]	; (80026cc <HAL_DMA_Abort+0x214>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d072      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a3a      	ldr	r2, [pc, #232]	; (80026d0 <HAL_DMA_Abort+0x218>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d06d      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a39      	ldr	r2, [pc, #228]	; (80026d4 <HAL_DMA_Abort+0x21c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d068      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a37      	ldr	r2, [pc, #220]	; (80026d8 <HAL_DMA_Abort+0x220>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d063      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a36      	ldr	r2, [pc, #216]	; (80026dc <HAL_DMA_Abort+0x224>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d05e      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a34      	ldr	r2, [pc, #208]	; (80026e0 <HAL_DMA_Abort+0x228>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d059      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <HAL_DMA_Abort+0x22c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d054      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <HAL_DMA_Abort+0x230>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d04f      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a30      	ldr	r2, [pc, #192]	; (80026ec <HAL_DMA_Abort+0x234>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04a      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2e      	ldr	r2, [pc, #184]	; (80026f0 <HAL_DMA_Abort+0x238>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d045      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <HAL_DMA_Abort+0x23c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d040      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2b      	ldr	r2, [pc, #172]	; (80026f8 <HAL_DMA_Abort+0x240>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d03b      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <HAL_DMA_Abort+0x244>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d036      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a28      	ldr	r2, [pc, #160]	; (8002700 <HAL_DMA_Abort+0x248>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a27      	ldr	r2, [pc, #156]	; (8002704 <HAL_DMA_Abort+0x24c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d02c      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a25      	ldr	r2, [pc, #148]	; (8002708 <HAL_DMA_Abort+0x250>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d027      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a24      	ldr	r2, [pc, #144]	; (800270c <HAL_DMA_Abort+0x254>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a22      	ldr	r2, [pc, #136]	; (8002710 <HAL_DMA_Abort+0x258>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01d      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a21      	ldr	r2, [pc, #132]	; (8002714 <HAL_DMA_Abort+0x25c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d018      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <HAL_DMA_Abort+0x260>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1e      	ldr	r2, [pc, #120]	; (800271c <HAL_DMA_Abort+0x264>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <HAL_DMA_Abort+0x268>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_DMA_Abort+0x26c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_DMA_Abort+0x20e>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a19      	ldr	r2, [pc, #100]	; (8002728 <HAL_DMA_Abort+0x270>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d132      	bne.n	800272c <HAL_DMA_Abort+0x274>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e031      	b.n	800272e <HAL_DMA_Abort+0x276>
 80026ca:	bf00      	nop
 80026cc:	40020010 	.word	0x40020010
 80026d0:	40020028 	.word	0x40020028
 80026d4:	40020040 	.word	0x40020040
 80026d8:	40020058 	.word	0x40020058
 80026dc:	40020070 	.word	0x40020070
 80026e0:	40020088 	.word	0x40020088
 80026e4:	400200a0 	.word	0x400200a0
 80026e8:	400200b8 	.word	0x400200b8
 80026ec:	40020410 	.word	0x40020410
 80026f0:	40020428 	.word	0x40020428
 80026f4:	40020440 	.word	0x40020440
 80026f8:	40020458 	.word	0x40020458
 80026fc:	40020470 	.word	0x40020470
 8002700:	40020488 	.word	0x40020488
 8002704:	400204a0 	.word	0x400204a0
 8002708:	400204b8 	.word	0x400204b8
 800270c:	58025408 	.word	0x58025408
 8002710:	5802541c 	.word	0x5802541c
 8002714:	58025430 	.word	0x58025430
 8002718:	58025444 	.word	0x58025444
 800271c:	58025458 	.word	0x58025458
 8002720:	5802546c 	.word	0x5802546c
 8002724:	58025480 	.word	0x58025480
 8002728:	58025494 	.word	0x58025494
 800272c:	2300      	movs	r3, #0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002740:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6d      	ldr	r2, [pc, #436]	; (80028fc <HAL_DMA_Abort+0x444>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d04a      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6b      	ldr	r2, [pc, #428]	; (8002900 <HAL_DMA_Abort+0x448>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d045      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6a      	ldr	r2, [pc, #424]	; (8002904 <HAL_DMA_Abort+0x44c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d040      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a68      	ldr	r2, [pc, #416]	; (8002908 <HAL_DMA_Abort+0x450>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d03b      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a67      	ldr	r2, [pc, #412]	; (800290c <HAL_DMA_Abort+0x454>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d036      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a65      	ldr	r2, [pc, #404]	; (8002910 <HAL_DMA_Abort+0x458>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d031      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a64      	ldr	r2, [pc, #400]	; (8002914 <HAL_DMA_Abort+0x45c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d02c      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a62      	ldr	r2, [pc, #392]	; (8002918 <HAL_DMA_Abort+0x460>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d027      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a61      	ldr	r2, [pc, #388]	; (800291c <HAL_DMA_Abort+0x464>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d022      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5f      	ldr	r2, [pc, #380]	; (8002920 <HAL_DMA_Abort+0x468>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01d      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5e      	ldr	r2, [pc, #376]	; (8002924 <HAL_DMA_Abort+0x46c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d018      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <HAL_DMA_Abort+0x470>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5b      	ldr	r2, [pc, #364]	; (800292c <HAL_DMA_Abort+0x474>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00e      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a59      	ldr	r2, [pc, #356]	; (8002930 <HAL_DMA_Abort+0x478>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d009      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_DMA_Abort+0x47c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d004      	beq.n	80027e2 <HAL_DMA_Abort+0x32a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a56      	ldr	r2, [pc, #344]	; (8002938 <HAL_DMA_Abort+0x480>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d108      	bne.n	80027f4 <HAL_DMA_Abort+0x33c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e007      	b.n	8002804 <HAL_DMA_Abort+0x34c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002804:	e013      	b.n	800282e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002806:	f7ff f925 	bl	8001a54 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b05      	cmp	r3, #5
 8002812:	d90c      	bls.n	800282e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2203      	movs	r2, #3
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e12d      	b.n	8002a8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e5      	bne.n	8002806 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <HAL_DMA_Abort+0x444>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d04a      	beq.n	80028da <HAL_DMA_Abort+0x422>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <HAL_DMA_Abort+0x448>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d045      	beq.n	80028da <HAL_DMA_Abort+0x422>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <HAL_DMA_Abort+0x44c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d040      	beq.n	80028da <HAL_DMA_Abort+0x422>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <HAL_DMA_Abort+0x450>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d03b      	beq.n	80028da <HAL_DMA_Abort+0x422>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a29      	ldr	r2, [pc, #164]	; (800290c <HAL_DMA_Abort+0x454>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d036      	beq.n	80028da <HAL_DMA_Abort+0x422>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_DMA_Abort+0x458>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d031      	beq.n	80028da <HAL_DMA_Abort+0x422>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a26      	ldr	r2, [pc, #152]	; (8002914 <HAL_DMA_Abort+0x45c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d02c      	beq.n	80028da <HAL_DMA_Abort+0x422>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a24      	ldr	r2, [pc, #144]	; (8002918 <HAL_DMA_Abort+0x460>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d027      	beq.n	80028da <HAL_DMA_Abort+0x422>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a23      	ldr	r2, [pc, #140]	; (800291c <HAL_DMA_Abort+0x464>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <HAL_DMA_Abort+0x422>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_DMA_Abort+0x468>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01d      	beq.n	80028da <HAL_DMA_Abort+0x422>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a20      	ldr	r2, [pc, #128]	; (8002924 <HAL_DMA_Abort+0x46c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d018      	beq.n	80028da <HAL_DMA_Abort+0x422>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_DMA_Abort+0x470>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_DMA_Abort+0x422>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_DMA_Abort+0x474>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <HAL_DMA_Abort+0x422>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1b      	ldr	r2, [pc, #108]	; (8002930 <HAL_DMA_Abort+0x478>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_DMA_Abort+0x422>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <HAL_DMA_Abort+0x47c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <HAL_DMA_Abort+0x422>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a18      	ldr	r2, [pc, #96]	; (8002938 <HAL_DMA_Abort+0x480>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d101      	bne.n	80028de <HAL_DMA_Abort+0x426>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_DMA_Abort+0x428>
 80028de:	2300      	movs	r3, #0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d02b      	beq.n	800293c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	223f      	movs	r2, #63	; 0x3f
 80028f4:	409a      	lsls	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	e02a      	b.n	8002952 <HAL_DMA_Abort+0x49a>
 80028fc:	40020010 	.word	0x40020010
 8002900:	40020028 	.word	0x40020028
 8002904:	40020040 	.word	0x40020040
 8002908:	40020058 	.word	0x40020058
 800290c:	40020070 	.word	0x40020070
 8002910:	40020088 	.word	0x40020088
 8002914:	400200a0 	.word	0x400200a0
 8002918:	400200b8 	.word	0x400200b8
 800291c:	40020410 	.word	0x40020410
 8002920:	40020428 	.word	0x40020428
 8002924:	40020440 	.word	0x40020440
 8002928:	40020458 	.word	0x40020458
 800292c:	40020470 	.word	0x40020470
 8002930:	40020488 	.word	0x40020488
 8002934:	400204a0 	.word	0x400204a0
 8002938:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2201      	movs	r2, #1
 800294c:	409a      	lsls	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a4f      	ldr	r2, [pc, #316]	; (8002a94 <HAL_DMA_Abort+0x5dc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d072      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4d      	ldr	r2, [pc, #308]	; (8002a98 <HAL_DMA_Abort+0x5e0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d06d      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a4c      	ldr	r2, [pc, #304]	; (8002a9c <HAL_DMA_Abort+0x5e4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d068      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a4a      	ldr	r2, [pc, #296]	; (8002aa0 <HAL_DMA_Abort+0x5e8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d063      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a49      	ldr	r2, [pc, #292]	; (8002aa4 <HAL_DMA_Abort+0x5ec>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d05e      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a47      	ldr	r2, [pc, #284]	; (8002aa8 <HAL_DMA_Abort+0x5f0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d059      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a46      	ldr	r2, [pc, #280]	; (8002aac <HAL_DMA_Abort+0x5f4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d054      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a44      	ldr	r2, [pc, #272]	; (8002ab0 <HAL_DMA_Abort+0x5f8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d04f      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a43      	ldr	r2, [pc, #268]	; (8002ab4 <HAL_DMA_Abort+0x5fc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d04a      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a41      	ldr	r2, [pc, #260]	; (8002ab8 <HAL_DMA_Abort+0x600>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d045      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a40      	ldr	r2, [pc, #256]	; (8002abc <HAL_DMA_Abort+0x604>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d040      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a3e      	ldr	r2, [pc, #248]	; (8002ac0 <HAL_DMA_Abort+0x608>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d03b      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a3d      	ldr	r2, [pc, #244]	; (8002ac4 <HAL_DMA_Abort+0x60c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d036      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a3b      	ldr	r2, [pc, #236]	; (8002ac8 <HAL_DMA_Abort+0x610>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d031      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a3a      	ldr	r2, [pc, #232]	; (8002acc <HAL_DMA_Abort+0x614>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d02c      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <HAL_DMA_Abort+0x618>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d027      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a37      	ldr	r2, [pc, #220]	; (8002ad4 <HAL_DMA_Abort+0x61c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d022      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a35      	ldr	r2, [pc, #212]	; (8002ad8 <HAL_DMA_Abort+0x620>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01d      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a34      	ldr	r2, [pc, #208]	; (8002adc <HAL_DMA_Abort+0x624>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d018      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a32      	ldr	r2, [pc, #200]	; (8002ae0 <HAL_DMA_Abort+0x628>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a31      	ldr	r2, [pc, #196]	; (8002ae4 <HAL_DMA_Abort+0x62c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d00e      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a2f      	ldr	r2, [pc, #188]	; (8002ae8 <HAL_DMA_Abort+0x630>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2e      	ldr	r2, [pc, #184]	; (8002aec <HAL_DMA_Abort+0x634>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_DMA_Abort+0x58a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2c      	ldr	r2, [pc, #176]	; (8002af0 <HAL_DMA_Abort+0x638>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_DMA_Abort+0x58e>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_DMA_Abort+0x590>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40020010 	.word	0x40020010
 8002a98:	40020028 	.word	0x40020028
 8002a9c:	40020040 	.word	0x40020040
 8002aa0:	40020058 	.word	0x40020058
 8002aa4:	40020070 	.word	0x40020070
 8002aa8:	40020088 	.word	0x40020088
 8002aac:	400200a0 	.word	0x400200a0
 8002ab0:	400200b8 	.word	0x400200b8
 8002ab4:	40020410 	.word	0x40020410
 8002ab8:	40020428 	.word	0x40020428
 8002abc:	40020440 	.word	0x40020440
 8002ac0:	40020458 	.word	0x40020458
 8002ac4:	40020470 	.word	0x40020470
 8002ac8:	40020488 	.word	0x40020488
 8002acc:	400204a0 	.word	0x400204a0
 8002ad0:	400204b8 	.word	0x400204b8
 8002ad4:	58025408 	.word	0x58025408
 8002ad8:	5802541c 	.word	0x5802541c
 8002adc:	58025430 	.word	0x58025430
 8002ae0:	58025444 	.word	0x58025444
 8002ae4:	58025458 	.word	0x58025458
 8002ae8:	5802546c 	.word	0x5802546c
 8002aec:	58025480 	.word	0x58025480
 8002af0:	58025494 	.word	0x58025494

08002af4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e237      	b.n	8002f76 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d004      	beq.n	8002b1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2280      	movs	r2, #128	; 0x80
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e22c      	b.n	8002f76 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5c      	ldr	r2, [pc, #368]	; (8002c94 <HAL_DMA_Abort_IT+0x1a0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d04a      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <HAL_DMA_Abort_IT+0x1a4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d045      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a59      	ldr	r2, [pc, #356]	; (8002c9c <HAL_DMA_Abort_IT+0x1a8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d040      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_DMA_Abort_IT+0x1ac>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d03b      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <HAL_DMA_Abort_IT+0x1b0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d036      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <HAL_DMA_Abort_IT+0x1b4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d031      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a53      	ldr	r2, [pc, #332]	; (8002cac <HAL_DMA_Abort_IT+0x1b8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d02c      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a52      	ldr	r2, [pc, #328]	; (8002cb0 <HAL_DMA_Abort_IT+0x1bc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d027      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a50      	ldr	r2, [pc, #320]	; (8002cb4 <HAL_DMA_Abort_IT+0x1c0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d022      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4f      	ldr	r2, [pc, #316]	; (8002cb8 <HAL_DMA_Abort_IT+0x1c4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d01d      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <HAL_DMA_Abort_IT+0x1c8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d018      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4c      	ldr	r2, [pc, #304]	; (8002cc0 <HAL_DMA_Abort_IT+0x1cc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d013      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a4a      	ldr	r2, [pc, #296]	; (8002cc4 <HAL_DMA_Abort_IT+0x1d0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00e      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a49      	ldr	r2, [pc, #292]	; (8002cc8 <HAL_DMA_Abort_IT+0x1d4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d009      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a47      	ldr	r2, [pc, #284]	; (8002ccc <HAL_DMA_Abort_IT+0x1d8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_DMA_Abort_IT+0xc8>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a46      	ldr	r2, [pc, #280]	; (8002cd0 <HAL_DMA_Abort_IT+0x1dc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_DMA_Abort_IT+0xcc>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_DMA_Abort_IT+0xce>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8086 	beq.w	8002cd4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2204      	movs	r2, #4
 8002bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <HAL_DMA_Abort_IT+0x1a0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d04a      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2e      	ldr	r2, [pc, #184]	; (8002c98 <HAL_DMA_Abort_IT+0x1a4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d045      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <HAL_DMA_Abort_IT+0x1a8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d040      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <HAL_DMA_Abort_IT+0x1ac>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d03b      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <HAL_DMA_Abort_IT+0x1b0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d036      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a28      	ldr	r2, [pc, #160]	; (8002ca8 <HAL_DMA_Abort_IT+0x1b4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d031      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <HAL_DMA_Abort_IT+0x1b8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d02c      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <HAL_DMA_Abort_IT+0x1bc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d027      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <HAL_DMA_Abort_IT+0x1c0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d022      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a22      	ldr	r2, [pc, #136]	; (8002cb8 <HAL_DMA_Abort_IT+0x1c4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d01d      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <HAL_DMA_Abort_IT+0x1c8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d018      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <HAL_DMA_Abort_IT+0x1cc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d013      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_DMA_Abort_IT+0x1d0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00e      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <HAL_DMA_Abort_IT+0x1d4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d009      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_DMA_Abort_IT+0x1d8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d004      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x17c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_DMA_Abort_IT+0x1dc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d108      	bne.n	8002c82 <HAL_DMA_Abort_IT+0x18e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e178      	b.n	8002f74 <HAL_DMA_Abort_IT+0x480>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e16f      	b.n	8002f74 <HAL_DMA_Abort_IT+0x480>
 8002c94:	40020010 	.word	0x40020010
 8002c98:	40020028 	.word	0x40020028
 8002c9c:	40020040 	.word	0x40020040
 8002ca0:	40020058 	.word	0x40020058
 8002ca4:	40020070 	.word	0x40020070
 8002ca8:	40020088 	.word	0x40020088
 8002cac:	400200a0 	.word	0x400200a0
 8002cb0:	400200b8 	.word	0x400200b8
 8002cb4:	40020410 	.word	0x40020410
 8002cb8:	40020428 	.word	0x40020428
 8002cbc:	40020440 	.word	0x40020440
 8002cc0:	40020458 	.word	0x40020458
 8002cc4:	40020470 	.word	0x40020470
 8002cc8:	40020488 	.word	0x40020488
 8002ccc:	400204a0 	.word	0x400204a0
 8002cd0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 020e 	bic.w	r2, r2, #14
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a6c      	ldr	r2, [pc, #432]	; (8002e9c <HAL_DMA_Abort_IT+0x3a8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d04a      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6b      	ldr	r2, [pc, #428]	; (8002ea0 <HAL_DMA_Abort_IT+0x3ac>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d045      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a69      	ldr	r2, [pc, #420]	; (8002ea4 <HAL_DMA_Abort_IT+0x3b0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d040      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a68      	ldr	r2, [pc, #416]	; (8002ea8 <HAL_DMA_Abort_IT+0x3b4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d03b      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a66      	ldr	r2, [pc, #408]	; (8002eac <HAL_DMA_Abort_IT+0x3b8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d036      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a65      	ldr	r2, [pc, #404]	; (8002eb0 <HAL_DMA_Abort_IT+0x3bc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d031      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a63      	ldr	r2, [pc, #396]	; (8002eb4 <HAL_DMA_Abort_IT+0x3c0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02c      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a62      	ldr	r2, [pc, #392]	; (8002eb8 <HAL_DMA_Abort_IT+0x3c4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d027      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a60      	ldr	r2, [pc, #384]	; (8002ebc <HAL_DMA_Abort_IT+0x3c8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d022      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a5f      	ldr	r2, [pc, #380]	; (8002ec0 <HAL_DMA_Abort_IT+0x3cc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d01d      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a5d      	ldr	r2, [pc, #372]	; (8002ec4 <HAL_DMA_Abort_IT+0x3d0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d018      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a5c      	ldr	r2, [pc, #368]	; (8002ec8 <HAL_DMA_Abort_IT+0x3d4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a5a      	ldr	r2, [pc, #360]	; (8002ecc <HAL_DMA_Abort_IT+0x3d8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00e      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a59      	ldr	r2, [pc, #356]	; (8002ed0 <HAL_DMA_Abort_IT+0x3dc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a57      	ldr	r2, [pc, #348]	; (8002ed4 <HAL_DMA_Abort_IT+0x3e0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x290>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <HAL_DMA_Abort_IT+0x3e4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d108      	bne.n	8002d96 <HAL_DMA_Abort_IT+0x2a2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e007      	b.n	8002da6 <HAL_DMA_Abort_IT+0x2b2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a3c      	ldr	r2, [pc, #240]	; (8002e9c <HAL_DMA_Abort_IT+0x3a8>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d072      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3a      	ldr	r2, [pc, #232]	; (8002ea0 <HAL_DMA_Abort_IT+0x3ac>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d06d      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a39      	ldr	r2, [pc, #228]	; (8002ea4 <HAL_DMA_Abort_IT+0x3b0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d068      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a37      	ldr	r2, [pc, #220]	; (8002ea8 <HAL_DMA_Abort_IT+0x3b4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d063      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a36      	ldr	r2, [pc, #216]	; (8002eac <HAL_DMA_Abort_IT+0x3b8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d05e      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a34      	ldr	r2, [pc, #208]	; (8002eb0 <HAL_DMA_Abort_IT+0x3bc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d059      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a33      	ldr	r2, [pc, #204]	; (8002eb4 <HAL_DMA_Abort_IT+0x3c0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d054      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a31      	ldr	r2, [pc, #196]	; (8002eb8 <HAL_DMA_Abort_IT+0x3c4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d04f      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a30      	ldr	r2, [pc, #192]	; (8002ebc <HAL_DMA_Abort_IT+0x3c8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d04a      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2e      	ldr	r2, [pc, #184]	; (8002ec0 <HAL_DMA_Abort_IT+0x3cc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d045      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_DMA_Abort_IT+0x3d0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d040      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2b      	ldr	r2, [pc, #172]	; (8002ec8 <HAL_DMA_Abort_IT+0x3d4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d03b      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <HAL_DMA_Abort_IT+0x3d8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d036      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a28      	ldr	r2, [pc, #160]	; (8002ed0 <HAL_DMA_Abort_IT+0x3dc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d031      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <HAL_DMA_Abort_IT+0x3e0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d02c      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a25      	ldr	r2, [pc, #148]	; (8002ed8 <HAL_DMA_Abort_IT+0x3e4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d027      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a24      	ldr	r2, [pc, #144]	; (8002edc <HAL_DMA_Abort_IT+0x3e8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d022      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a22      	ldr	r2, [pc, #136]	; (8002ee0 <HAL_DMA_Abort_IT+0x3ec>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01d      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <HAL_DMA_Abort_IT+0x3f0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d018      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <HAL_DMA_Abort_IT+0x3f4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <HAL_DMA_Abort_IT+0x3f8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ef0 <HAL_DMA_Abort_IT+0x3fc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <HAL_DMA_Abort_IT+0x400>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_DMA_Abort_IT+0x3a2>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <HAL_DMA_Abort_IT+0x404>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d132      	bne.n	8002efc <HAL_DMA_Abort_IT+0x408>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e031      	b.n	8002efe <HAL_DMA_Abort_IT+0x40a>
 8002e9a:	bf00      	nop
 8002e9c:	40020010 	.word	0x40020010
 8002ea0:	40020028 	.word	0x40020028
 8002ea4:	40020040 	.word	0x40020040
 8002ea8:	40020058 	.word	0x40020058
 8002eac:	40020070 	.word	0x40020070
 8002eb0:	40020088 	.word	0x40020088
 8002eb4:	400200a0 	.word	0x400200a0
 8002eb8:	400200b8 	.word	0x400200b8
 8002ebc:	40020410 	.word	0x40020410
 8002ec0:	40020428 	.word	0x40020428
 8002ec4:	40020440 	.word	0x40020440
 8002ec8:	40020458 	.word	0x40020458
 8002ecc:	40020470 	.word	0x40020470
 8002ed0:	40020488 	.word	0x40020488
 8002ed4:	400204a0 	.word	0x400204a0
 8002ed8:	400204b8 	.word	0x400204b8
 8002edc:	58025408 	.word	0x58025408
 8002ee0:	5802541c 	.word	0x5802541c
 8002ee4:	58025430 	.word	0x58025430
 8002ee8:	58025444 	.word	0x58025444
 8002eec:	58025458 	.word	0x58025458
 8002ef0:	5802546c 	.word	0x5802546c
 8002ef4:	58025480 	.word	0x58025480
 8002ef8:	58025494 	.word	0x58025494
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d028      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f10:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	f003 031f 	and.w	r3, r3, #31
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f30:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00c      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f52:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop

08002f80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f8c:	4b67      	ldr	r3, [pc, #412]	; (800312c <HAL_DMA_IRQHandler+0x1ac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a67      	ldr	r2, [pc, #412]	; (8003130 <HAL_DMA_IRQHandler+0x1b0>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5f      	ldr	r2, [pc, #380]	; (8003134 <HAL_DMA_IRQHandler+0x1b4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d04a      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5d      	ldr	r2, [pc, #372]	; (8003138 <HAL_DMA_IRQHandler+0x1b8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d045      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5c      	ldr	r2, [pc, #368]	; (800313c <HAL_DMA_IRQHandler+0x1bc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d040      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5a      	ldr	r2, [pc, #360]	; (8003140 <HAL_DMA_IRQHandler+0x1c0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d03b      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a59      	ldr	r2, [pc, #356]	; (8003144 <HAL_DMA_IRQHandler+0x1c4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d036      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a57      	ldr	r2, [pc, #348]	; (8003148 <HAL_DMA_IRQHandler+0x1c8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d031      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_DMA_IRQHandler+0x1cc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d02c      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a54      	ldr	r2, [pc, #336]	; (8003150 <HAL_DMA_IRQHandler+0x1d0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d027      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a53      	ldr	r2, [pc, #332]	; (8003154 <HAL_DMA_IRQHandler+0x1d4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d022      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a51      	ldr	r2, [pc, #324]	; (8003158 <HAL_DMA_IRQHandler+0x1d8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d01d      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a50      	ldr	r2, [pc, #320]	; (800315c <HAL_DMA_IRQHandler+0x1dc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d018      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a4e      	ldr	r2, [pc, #312]	; (8003160 <HAL_DMA_IRQHandler+0x1e0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d013      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a4d      	ldr	r2, [pc, #308]	; (8003164 <HAL_DMA_IRQHandler+0x1e4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00e      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a4b      	ldr	r2, [pc, #300]	; (8003168 <HAL_DMA_IRQHandler+0x1e8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d009      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a4a      	ldr	r2, [pc, #296]	; (800316c <HAL_DMA_IRQHandler+0x1ec>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d004      	beq.n	8003052 <HAL_DMA_IRQHandler+0xd2>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a48      	ldr	r2, [pc, #288]	; (8003170 <HAL_DMA_IRQHandler+0x1f0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_DMA_IRQHandler+0xd6>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_DMA_IRQHandler+0xd8>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 842b 	beq.w	80038b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2208      	movs	r2, #8
 8003068:	409a      	lsls	r2, r3
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80a2 	beq.w	80031b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2e      	ldr	r2, [pc, #184]	; (8003134 <HAL_DMA_IRQHandler+0x1b4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d04a      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <HAL_DMA_IRQHandler+0x1b8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d045      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2b      	ldr	r2, [pc, #172]	; (800313c <HAL_DMA_IRQHandler+0x1bc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d040      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2a      	ldr	r2, [pc, #168]	; (8003140 <HAL_DMA_IRQHandler+0x1c0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d03b      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <HAL_DMA_IRQHandler+0x1c4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d036      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_DMA_IRQHandler+0x1c8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d031      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a25      	ldr	r2, [pc, #148]	; (800314c <HAL_DMA_IRQHandler+0x1cc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02c      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a24      	ldr	r2, [pc, #144]	; (8003150 <HAL_DMA_IRQHandler+0x1d0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d027      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <HAL_DMA_IRQHandler+0x1d4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d022      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_DMA_IRQHandler+0x1d8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d01d      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_DMA_IRQHandler+0x1dc>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d018      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_DMA_IRQHandler+0x1e0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d013      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <HAL_DMA_IRQHandler+0x1e4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00e      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_DMA_IRQHandler+0x1e8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d009      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_DMA_IRQHandler+0x1ec>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_DMA_IRQHandler+0x194>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <HAL_DMA_IRQHandler+0x1f0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d12f      	bne.n	8003174 <HAL_DMA_IRQHandler+0x1f4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf14      	ite	ne
 8003122:	2301      	movne	r3, #1
 8003124:	2300      	moveq	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	e02e      	b.n	8003188 <HAL_DMA_IRQHandler+0x208>
 800312a:	bf00      	nop
 800312c:	24000000 	.word	0x24000000
 8003130:	1b4e81b5 	.word	0x1b4e81b5
 8003134:	40020010 	.word	0x40020010
 8003138:	40020028 	.word	0x40020028
 800313c:	40020040 	.word	0x40020040
 8003140:	40020058 	.word	0x40020058
 8003144:	40020070 	.word	0x40020070
 8003148:	40020088 	.word	0x40020088
 800314c:	400200a0 	.word	0x400200a0
 8003150:	400200b8 	.word	0x400200b8
 8003154:	40020410 	.word	0x40020410
 8003158:	40020428 	.word	0x40020428
 800315c:	40020440 	.word	0x40020440
 8003160:	40020458 	.word	0x40020458
 8003164:	40020470 	.word	0x40020470
 8003168:	40020488 	.word	0x40020488
 800316c:	400204a0 	.word	0x400204a0
 8003170:	400204b8 	.word	0x400204b8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d015      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0204 	bic.w	r2, r2, #4
 800319a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	2208      	movs	r2, #8
 80031a6:	409a      	lsls	r2, r3
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d06e      	beq.n	80032ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a69      	ldr	r2, [pc, #420]	; (8003378 <HAL_DMA_IRQHandler+0x3f8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d04a      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a67      	ldr	r2, [pc, #412]	; (800337c <HAL_DMA_IRQHandler+0x3fc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d045      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a66      	ldr	r2, [pc, #408]	; (8003380 <HAL_DMA_IRQHandler+0x400>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d040      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a64      	ldr	r2, [pc, #400]	; (8003384 <HAL_DMA_IRQHandler+0x404>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d03b      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a63      	ldr	r2, [pc, #396]	; (8003388 <HAL_DMA_IRQHandler+0x408>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d036      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a61      	ldr	r2, [pc, #388]	; (800338c <HAL_DMA_IRQHandler+0x40c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d031      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a60      	ldr	r2, [pc, #384]	; (8003390 <HAL_DMA_IRQHandler+0x410>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d02c      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a5e      	ldr	r2, [pc, #376]	; (8003394 <HAL_DMA_IRQHandler+0x414>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d027      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5d      	ldr	r2, [pc, #372]	; (8003398 <HAL_DMA_IRQHandler+0x418>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5b      	ldr	r2, [pc, #364]	; (800339c <HAL_DMA_IRQHandler+0x41c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01d      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a5a      	ldr	r2, [pc, #360]	; (80033a0 <HAL_DMA_IRQHandler+0x420>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a58      	ldr	r2, [pc, #352]	; (80033a4 <HAL_DMA_IRQHandler+0x424>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a57      	ldr	r2, [pc, #348]	; (80033a8 <HAL_DMA_IRQHandler+0x428>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a55      	ldr	r2, [pc, #340]	; (80033ac <HAL_DMA_IRQHandler+0x42c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a54      	ldr	r2, [pc, #336]	; (80033b0 <HAL_DMA_IRQHandler+0x430>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_DMA_IRQHandler+0x2ee>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_DMA_IRQHandler+0x434>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10a      	bne.n	8003284 <HAL_DMA_IRQHandler+0x304>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e003      	b.n	800328c <HAL_DMA_IRQHandler+0x30c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00d      	beq.n	80032ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2201      	movs	r2, #1
 800329a:	409a      	lsls	r2, r3
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0202 	orr.w	r2, r3, #2
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	2204      	movs	r2, #4
 80032b6:	409a      	lsls	r2, r3
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 808f 	beq.w	80033e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	; (8003378 <HAL_DMA_IRQHandler+0x3f8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d04a      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a2a      	ldr	r2, [pc, #168]	; (800337c <HAL_DMA_IRQHandler+0x3fc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d045      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a29      	ldr	r2, [pc, #164]	; (8003380 <HAL_DMA_IRQHandler+0x400>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d040      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a27      	ldr	r2, [pc, #156]	; (8003384 <HAL_DMA_IRQHandler+0x404>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d03b      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a26      	ldr	r2, [pc, #152]	; (8003388 <HAL_DMA_IRQHandler+0x408>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d036      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a24      	ldr	r2, [pc, #144]	; (800338c <HAL_DMA_IRQHandler+0x40c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d031      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a23      	ldr	r2, [pc, #140]	; (8003390 <HAL_DMA_IRQHandler+0x410>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d02c      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a21      	ldr	r2, [pc, #132]	; (8003394 <HAL_DMA_IRQHandler+0x414>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d027      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a20      	ldr	r2, [pc, #128]	; (8003398 <HAL_DMA_IRQHandler+0x418>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d022      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1e      	ldr	r2, [pc, #120]	; (800339c <HAL_DMA_IRQHandler+0x41c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01d      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <HAL_DMA_IRQHandler+0x420>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d018      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <HAL_DMA_IRQHandler+0x424>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a1a      	ldr	r2, [pc, #104]	; (80033a8 <HAL_DMA_IRQHandler+0x428>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00e      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_DMA_IRQHandler+0x42c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d009      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <HAL_DMA_IRQHandler+0x430>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_DMA_IRQHandler+0x3e2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a15      	ldr	r2, [pc, #84]	; (80033b4 <HAL_DMA_IRQHandler+0x434>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d12a      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x438>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	bf14      	ite	ne
 8003370:	2301      	movne	r3, #1
 8003372:	2300      	moveq	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	e023      	b.n	80033c0 <HAL_DMA_IRQHandler+0x440>
 8003378:	40020010 	.word	0x40020010
 800337c:	40020028 	.word	0x40020028
 8003380:	40020040 	.word	0x40020040
 8003384:	40020058 	.word	0x40020058
 8003388:	40020070 	.word	0x40020070
 800338c:	40020088 	.word	0x40020088
 8003390:	400200a0 	.word	0x400200a0
 8003394:	400200b8 	.word	0x400200b8
 8003398:	40020410 	.word	0x40020410
 800339c:	40020428 	.word	0x40020428
 80033a0:	40020440 	.word	0x40020440
 80033a4:	40020458 	.word	0x40020458
 80033a8:	40020470 	.word	0x40020470
 80033ac:	40020488 	.word	0x40020488
 80033b0:	400204a0 	.word	0x400204a0
 80033b4:	400204b8 	.word	0x400204b8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2204      	movs	r2, #4
 80033ce:	409a      	lsls	r2, r3
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f043 0204 	orr.w	r2, r3, #4
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2210      	movs	r2, #16
 80033ea:	409a      	lsls	r2, r3
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80a6 	beq.w	8003542 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a85      	ldr	r2, [pc, #532]	; (8003610 <HAL_DMA_IRQHandler+0x690>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d04a      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a83      	ldr	r2, [pc, #524]	; (8003614 <HAL_DMA_IRQHandler+0x694>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d045      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a82      	ldr	r2, [pc, #520]	; (8003618 <HAL_DMA_IRQHandler+0x698>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d040      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a80      	ldr	r2, [pc, #512]	; (800361c <HAL_DMA_IRQHandler+0x69c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d03b      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7f      	ldr	r2, [pc, #508]	; (8003620 <HAL_DMA_IRQHandler+0x6a0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d036      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a7d      	ldr	r2, [pc, #500]	; (8003624 <HAL_DMA_IRQHandler+0x6a4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d031      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7c      	ldr	r2, [pc, #496]	; (8003628 <HAL_DMA_IRQHandler+0x6a8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d02c      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a7a      	ldr	r2, [pc, #488]	; (800362c <HAL_DMA_IRQHandler+0x6ac>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d027      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a79      	ldr	r2, [pc, #484]	; (8003630 <HAL_DMA_IRQHandler+0x6b0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a77      	ldr	r2, [pc, #476]	; (8003634 <HAL_DMA_IRQHandler+0x6b4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01d      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a76      	ldr	r2, [pc, #472]	; (8003638 <HAL_DMA_IRQHandler+0x6b8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d018      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a74      	ldr	r2, [pc, #464]	; (800363c <HAL_DMA_IRQHandler+0x6bc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a73      	ldr	r2, [pc, #460]	; (8003640 <HAL_DMA_IRQHandler+0x6c0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a71      	ldr	r2, [pc, #452]	; (8003644 <HAL_DMA_IRQHandler+0x6c4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a70      	ldr	r2, [pc, #448]	; (8003648 <HAL_DMA_IRQHandler+0x6c8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_IRQHandler+0x516>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a6e      	ldr	r2, [pc, #440]	; (800364c <HAL_DMA_IRQHandler+0x6cc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10a      	bne.n	80034ac <HAL_DMA_IRQHandler+0x52c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e009      	b.n	80034c0 <HAL_DMA_IRQHandler+0x540>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d03e      	beq.n	8003542 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	2210      	movs	r2, #16
 80034ce:	409a      	lsls	r2, r3
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d108      	bne.n	8003502 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d024      	beq.n	8003542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
 8003500:	e01f      	b.n	8003542 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01b      	beq.n	8003542 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
 8003512:	e016      	b.n	8003542 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d107      	bne.n	8003532 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0208 	bic.w	r2, r2, #8
 8003530:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2220      	movs	r2, #32
 800354c:	409a      	lsls	r2, r3
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8110 	beq.w	8003778 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2c      	ldr	r2, [pc, #176]	; (8003610 <HAL_DMA_IRQHandler+0x690>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d04a      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <HAL_DMA_IRQHandler+0x694>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d045      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <HAL_DMA_IRQHandler+0x698>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d040      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a28      	ldr	r2, [pc, #160]	; (800361c <HAL_DMA_IRQHandler+0x69c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d03b      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a26      	ldr	r2, [pc, #152]	; (8003620 <HAL_DMA_IRQHandler+0x6a0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d036      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a25      	ldr	r2, [pc, #148]	; (8003624 <HAL_DMA_IRQHandler+0x6a4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d031      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a23      	ldr	r2, [pc, #140]	; (8003628 <HAL_DMA_IRQHandler+0x6a8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02c      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a22      	ldr	r2, [pc, #136]	; (800362c <HAL_DMA_IRQHandler+0x6ac>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d027      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a20      	ldr	r2, [pc, #128]	; (8003630 <HAL_DMA_IRQHandler+0x6b0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d022      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <HAL_DMA_IRQHandler+0x6b4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d01d      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <HAL_DMA_IRQHandler+0x6b8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d018      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1c      	ldr	r2, [pc, #112]	; (800363c <HAL_DMA_IRQHandler+0x6bc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d013      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <HAL_DMA_IRQHandler+0x6c0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00e      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a19      	ldr	r2, [pc, #100]	; (8003644 <HAL_DMA_IRQHandler+0x6c4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <HAL_DMA_IRQHandler+0x6c8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x678>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a16      	ldr	r2, [pc, #88]	; (800364c <HAL_DMA_IRQHandler+0x6cc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d12b      	bne.n	8003650 <HAL_DMA_IRQHandler+0x6d0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	e02a      	b.n	8003664 <HAL_DMA_IRQHandler+0x6e4>
 800360e:	bf00      	nop
 8003610:	40020010 	.word	0x40020010
 8003614:	40020028 	.word	0x40020028
 8003618:	40020040 	.word	0x40020040
 800361c:	40020058 	.word	0x40020058
 8003620:	40020070 	.word	0x40020070
 8003624:	40020088 	.word	0x40020088
 8003628:	400200a0 	.word	0x400200a0
 800362c:	400200b8 	.word	0x400200b8
 8003630:	40020410 	.word	0x40020410
 8003634:	40020428 	.word	0x40020428
 8003638:	40020440 	.word	0x40020440
 800363c:	40020458 	.word	0x40020458
 8003640:	40020470 	.word	0x40020470
 8003644:	40020488 	.word	0x40020488
 8003648:	400204a0 	.word	0x400204a0
 800364c:	400204b8 	.word	0x400204b8
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf14      	ite	ne
 800365e:	2301      	movne	r3, #1
 8003660:	2300      	moveq	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8087 	beq.w	8003778 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	f003 031f 	and.w	r3, r3, #31
 8003672:	2220      	movs	r2, #32
 8003674:	409a      	lsls	r2, r3
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b04      	cmp	r3, #4
 8003684:	d139      	bne.n	80036fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0216 	bic.w	r2, r2, #22
 8003694:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <HAL_DMA_IRQHandler+0x736>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0208 	bic.w	r2, r2, #8
 80036c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	223f      	movs	r2, #63	; 0x3f
 80036d0:	409a      	lsls	r2, r3
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 834a 	beq.w	8003d84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
          }
          return;
 80036f8:	e344      	b.n	8003d84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d018      	beq.n	800373a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d108      	bne.n	8003728 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02c      	beq.n	8003778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
 8003726:	e027      	b.n	8003778 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d023      	beq.n	8003778 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
 8003738:	e01e      	b.n	8003778 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10f      	bne.n	8003768 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0210 	bic.w	r2, r2, #16
 8003756:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8306 	beq.w	8003d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8088 	beq.w	80038a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2204      	movs	r2, #4
 8003794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a7a      	ldr	r2, [pc, #488]	; (8003988 <HAL_DMA_IRQHandler+0xa08>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d04a      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a79      	ldr	r2, [pc, #484]	; (800398c <HAL_DMA_IRQHandler+0xa0c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d045      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a77      	ldr	r2, [pc, #476]	; (8003990 <HAL_DMA_IRQHandler+0xa10>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d040      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a76      	ldr	r2, [pc, #472]	; (8003994 <HAL_DMA_IRQHandler+0xa14>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d03b      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a74      	ldr	r2, [pc, #464]	; (8003998 <HAL_DMA_IRQHandler+0xa18>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d036      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a73      	ldr	r2, [pc, #460]	; (800399c <HAL_DMA_IRQHandler+0xa1c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d031      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a71      	ldr	r2, [pc, #452]	; (80039a0 <HAL_DMA_IRQHandler+0xa20>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02c      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a70      	ldr	r2, [pc, #448]	; (80039a4 <HAL_DMA_IRQHandler+0xa24>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d027      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a6e      	ldr	r2, [pc, #440]	; (80039a8 <HAL_DMA_IRQHandler+0xa28>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a6d      	ldr	r2, [pc, #436]	; (80039ac <HAL_DMA_IRQHandler+0xa2c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d01d      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a6b      	ldr	r2, [pc, #428]	; (80039b0 <HAL_DMA_IRQHandler+0xa30>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6a      	ldr	r2, [pc, #424]	; (80039b4 <HAL_DMA_IRQHandler+0xa34>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a68      	ldr	r2, [pc, #416]	; (80039b8 <HAL_DMA_IRQHandler+0xa38>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a67      	ldr	r2, [pc, #412]	; (80039bc <HAL_DMA_IRQHandler+0xa3c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a65      	ldr	r2, [pc, #404]	; (80039c0 <HAL_DMA_IRQHandler+0xa40>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_DMA_IRQHandler+0x8b8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a64      	ldr	r2, [pc, #400]	; (80039c4 <HAL_DMA_IRQHandler+0xa44>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d108      	bne.n	800384a <HAL_DMA_IRQHandler+0x8ca>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e007      	b.n	800385a <HAL_DMA_IRQHandler+0x8da>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3301      	adds	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	429a      	cmp	r2, r3
 8003864:	d307      	bcc.n	8003876 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f2      	bne.n	800385a <HAL_DMA_IRQHandler+0x8da>
 8003874:	e000      	b.n	8003878 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003876:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2203      	movs	r2, #3
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003896:	e003      	b.n	80038a0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8272 	beq.w	8003d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
 80038b2:	e26c      	b.n	8003d8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a43      	ldr	r2, [pc, #268]	; (80039c8 <HAL_DMA_IRQHandler+0xa48>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d022      	beq.n	8003904 <HAL_DMA_IRQHandler+0x984>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a42      	ldr	r2, [pc, #264]	; (80039cc <HAL_DMA_IRQHandler+0xa4c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d01d      	beq.n	8003904 <HAL_DMA_IRQHandler+0x984>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a40      	ldr	r2, [pc, #256]	; (80039d0 <HAL_DMA_IRQHandler+0xa50>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d018      	beq.n	8003904 <HAL_DMA_IRQHandler+0x984>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a3f      	ldr	r2, [pc, #252]	; (80039d4 <HAL_DMA_IRQHandler+0xa54>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_DMA_IRQHandler+0x984>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a3d      	ldr	r2, [pc, #244]	; (80039d8 <HAL_DMA_IRQHandler+0xa58>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <HAL_DMA_IRQHandler+0x984>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <HAL_DMA_IRQHandler+0xa5c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_DMA_IRQHandler+0x984>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a3a      	ldr	r2, [pc, #232]	; (80039e0 <HAL_DMA_IRQHandler+0xa60>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <HAL_DMA_IRQHandler+0x984>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a39      	ldr	r2, [pc, #228]	; (80039e4 <HAL_DMA_IRQHandler+0xa64>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <HAL_DMA_IRQHandler+0x988>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_DMA_IRQHandler+0x98a>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 823f 	beq.w	8003d8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	2204      	movs	r2, #4
 8003922:	409a      	lsls	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80cd 	beq.w	8003ac8 <HAL_DMA_IRQHandler+0xb48>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80c7 	beq.w	8003ac8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2204      	movs	r2, #4
 8003944:	409a      	lsls	r2, r3
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d049      	beq.n	80039e8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8210 	beq.w	8003d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003970:	e20a      	b.n	8003d88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8206 	beq.w	8003d88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003984:	e200      	b.n	8003d88 <HAL_DMA_IRQHandler+0xe08>
 8003986:	bf00      	nop
 8003988:	40020010 	.word	0x40020010
 800398c:	40020028 	.word	0x40020028
 8003990:	40020040 	.word	0x40020040
 8003994:	40020058 	.word	0x40020058
 8003998:	40020070 	.word	0x40020070
 800399c:	40020088 	.word	0x40020088
 80039a0:	400200a0 	.word	0x400200a0
 80039a4:	400200b8 	.word	0x400200b8
 80039a8:	40020410 	.word	0x40020410
 80039ac:	40020428 	.word	0x40020428
 80039b0:	40020440 	.word	0x40020440
 80039b4:	40020458 	.word	0x40020458
 80039b8:	40020470 	.word	0x40020470
 80039bc:	40020488 	.word	0x40020488
 80039c0:	400204a0 	.word	0x400204a0
 80039c4:	400204b8 	.word	0x400204b8
 80039c8:	58025408 	.word	0x58025408
 80039cc:	5802541c 	.word	0x5802541c
 80039d0:	58025430 	.word	0x58025430
 80039d4:	58025444 	.word	0x58025444
 80039d8:	58025458 	.word	0x58025458
 80039dc:	5802546c 	.word	0x5802546c
 80039e0:	58025480 	.word	0x58025480
 80039e4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d160      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7f      	ldr	r2, [pc, #508]	; (8003bf4 <HAL_DMA_IRQHandler+0xc74>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d04a      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a7d      	ldr	r2, [pc, #500]	; (8003bf8 <HAL_DMA_IRQHandler+0xc78>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d045      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a7c      	ldr	r2, [pc, #496]	; (8003bfc <HAL_DMA_IRQHandler+0xc7c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a7a      	ldr	r2, [pc, #488]	; (8003c00 <HAL_DMA_IRQHandler+0xc80>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d03b      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a79      	ldr	r2, [pc, #484]	; (8003c04 <HAL_DMA_IRQHandler+0xc84>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d036      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a77      	ldr	r2, [pc, #476]	; (8003c08 <HAL_DMA_IRQHandler+0xc88>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d031      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a76      	ldr	r2, [pc, #472]	; (8003c0c <HAL_DMA_IRQHandler+0xc8c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d02c      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a74      	ldr	r2, [pc, #464]	; (8003c10 <HAL_DMA_IRQHandler+0xc90>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d027      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a73      	ldr	r2, [pc, #460]	; (8003c14 <HAL_DMA_IRQHandler+0xc94>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d022      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a71      	ldr	r2, [pc, #452]	; (8003c18 <HAL_DMA_IRQHandler+0xc98>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01d      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a70      	ldr	r2, [pc, #448]	; (8003c1c <HAL_DMA_IRQHandler+0xc9c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d018      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6e      	ldr	r2, [pc, #440]	; (8003c20 <HAL_DMA_IRQHandler+0xca0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6d      	ldr	r2, [pc, #436]	; (8003c24 <HAL_DMA_IRQHandler+0xca4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a6b      	ldr	r2, [pc, #428]	; (8003c28 <HAL_DMA_IRQHandler+0xca8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d009      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a6a      	ldr	r2, [pc, #424]	; (8003c2c <HAL_DMA_IRQHandler+0xcac>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xb12>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a68      	ldr	r2, [pc, #416]	; (8003c30 <HAL_DMA_IRQHandler+0xcb0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0xb24>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0208 	bic.w	r2, r2, #8
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e007      	b.n	8003ab4 <HAL_DMA_IRQHandler+0xb34>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0204 	bic.w	r2, r2, #4
 8003ab2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8165 	beq.w	8003d88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ac6:	e15f      	b.n	8003d88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80c5 	beq.w	8003c68 <HAL_DMA_IRQHandler+0xce8>
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80bf 	beq.w	8003c68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	2202      	movs	r2, #2
 8003af4:	409a      	lsls	r2, r3
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d018      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 813a 	beq.w	8003d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b20:	e134      	b.n	8003d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8130 	beq.w	8003d8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b34:	e12a      	b.n	8003d8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f040 8089 	bne.w	8003c54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2b      	ldr	r2, [pc, #172]	; (8003bf4 <HAL_DMA_IRQHandler+0xc74>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d04a      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <HAL_DMA_IRQHandler+0xc78>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d045      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <HAL_DMA_IRQHandler+0xc7c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d040      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <HAL_DMA_IRQHandler+0xc80>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d03b      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <HAL_DMA_IRQHandler+0xc84>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d036      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a23      	ldr	r2, [pc, #140]	; (8003c08 <HAL_DMA_IRQHandler+0xc88>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d031      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a22      	ldr	r2, [pc, #136]	; (8003c0c <HAL_DMA_IRQHandler+0xc8c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d02c      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <HAL_DMA_IRQHandler+0xc90>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d027      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <HAL_DMA_IRQHandler+0xc94>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d022      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <HAL_DMA_IRQHandler+0xc98>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01d      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <HAL_DMA_IRQHandler+0xc9c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d018      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1a      	ldr	r2, [pc, #104]	; (8003c20 <HAL_DMA_IRQHandler+0xca0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <HAL_DMA_IRQHandler+0xca4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <HAL_DMA_IRQHandler+0xca8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_DMA_IRQHandler+0xcac>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xc62>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <HAL_DMA_IRQHandler+0xcb0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d128      	bne.n	8003c34 <HAL_DMA_IRQHandler+0xcb4>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0214 	bic.w	r2, r2, #20
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e027      	b.n	8003c44 <HAL_DMA_IRQHandler+0xcc4>
 8003bf4:	40020010 	.word	0x40020010
 8003bf8:	40020028 	.word	0x40020028
 8003bfc:	40020040 	.word	0x40020040
 8003c00:	40020058 	.word	0x40020058
 8003c04:	40020070 	.word	0x40020070
 8003c08:	40020088 	.word	0x40020088
 8003c0c:	400200a0 	.word	0x400200a0
 8003c10:	400200b8 	.word	0x400200b8
 8003c14:	40020410 	.word	0x40020410
 8003c18:	40020428 	.word	0x40020428
 8003c1c:	40020440 	.word	0x40020440
 8003c20:	40020458 	.word	0x40020458
 8003c24:	40020470 	.word	0x40020470
 8003c28:	40020488 	.word	0x40020488
 8003c2c:	400204a0 	.word	0x400204a0
 8003c30:	400204b8 	.word	0x400204b8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 020a 	bic.w	r2, r2, #10
 8003c42:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8097 	beq.w	8003d8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c66:	e091      	b.n	8003d8c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2208      	movs	r2, #8
 8003c72:	409a      	lsls	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8088 	beq.w	8003d8e <HAL_DMA_IRQHandler+0xe0e>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8082 	beq.w	8003d8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a41      	ldr	r2, [pc, #260]	; (8003d94 <HAL_DMA_IRQHandler+0xe14>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d04a      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a3f      	ldr	r2, [pc, #252]	; (8003d98 <HAL_DMA_IRQHandler+0xe18>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d045      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a3e      	ldr	r2, [pc, #248]	; (8003d9c <HAL_DMA_IRQHandler+0xe1c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d040      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a3c      	ldr	r2, [pc, #240]	; (8003da0 <HAL_DMA_IRQHandler+0xe20>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d03b      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a3b      	ldr	r2, [pc, #236]	; (8003da4 <HAL_DMA_IRQHandler+0xe24>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d036      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a39      	ldr	r2, [pc, #228]	; (8003da8 <HAL_DMA_IRQHandler+0xe28>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d031      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a38      	ldr	r2, [pc, #224]	; (8003dac <HAL_DMA_IRQHandler+0xe2c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d02c      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a36      	ldr	r2, [pc, #216]	; (8003db0 <HAL_DMA_IRQHandler+0xe30>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d027      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a35      	ldr	r2, [pc, #212]	; (8003db4 <HAL_DMA_IRQHandler+0xe34>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d022      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a33      	ldr	r2, [pc, #204]	; (8003db8 <HAL_DMA_IRQHandler+0xe38>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01d      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a32      	ldr	r2, [pc, #200]	; (8003dbc <HAL_DMA_IRQHandler+0xe3c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d018      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <HAL_DMA_IRQHandler+0xe40>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d013      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <HAL_DMA_IRQHandler+0xe44>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00e      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <HAL_DMA_IRQHandler+0xe48>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d009      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <HAL_DMA_IRQHandler+0xe4c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_DMA_IRQHandler+0xdaa>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <HAL_DMA_IRQHandler+0xe50>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d108      	bne.n	8003d3c <HAL_DMA_IRQHandler+0xdbc>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 021c 	bic.w	r2, r2, #28
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e007      	b.n	8003d4c <HAL_DMA_IRQHandler+0xdcc>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 020e 	bic.w	r2, r2, #14
 8003d4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	2201      	movs	r2, #1
 8003d56:	409a      	lsls	r2, r3
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
 8003d82:	e004      	b.n	8003d8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d84:	bf00      	nop
 8003d86:	e002      	b.n	8003d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d88:	bf00      	nop
 8003d8a:	e000      	b.n	8003d8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d8e:	3728      	adds	r7, #40	; 0x28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40020010 	.word	0x40020010
 8003d98:	40020028 	.word	0x40020028
 8003d9c:	40020040 	.word	0x40020040
 8003da0:	40020058 	.word	0x40020058
 8003da4:	40020070 	.word	0x40020070
 8003da8:	40020088 	.word	0x40020088
 8003dac:	400200a0 	.word	0x400200a0
 8003db0:	400200b8 	.word	0x400200b8
 8003db4:	40020410 	.word	0x40020410
 8003db8:	40020428 	.word	0x40020428
 8003dbc:	40020440 	.word	0x40020440
 8003dc0:	40020458 	.word	0x40020458
 8003dc4:	40020470 	.word	0x40020470
 8003dc8:	40020488 	.word	0x40020488
 8003dcc:	400204a0 	.word	0x400204a0
 8003dd0:	400204b8 	.word	0x400204b8

08003dd4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003de2:	b2db      	uxtb	r3, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a42      	ldr	r2, [pc, #264]	; (8003f08 <DMA_CalcBaseAndBitshift+0x118>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d04a      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a41      	ldr	r2, [pc, #260]	; (8003f0c <DMA_CalcBaseAndBitshift+0x11c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d045      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3f      	ldr	r2, [pc, #252]	; (8003f10 <DMA_CalcBaseAndBitshift+0x120>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d040      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3e      	ldr	r2, [pc, #248]	; (8003f14 <DMA_CalcBaseAndBitshift+0x124>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d03b      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a3c      	ldr	r2, [pc, #240]	; (8003f18 <DMA_CalcBaseAndBitshift+0x128>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d036      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a3b      	ldr	r2, [pc, #236]	; (8003f1c <DMA_CalcBaseAndBitshift+0x12c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d031      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a39      	ldr	r2, [pc, #228]	; (8003f20 <DMA_CalcBaseAndBitshift+0x130>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02c      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a38      	ldr	r2, [pc, #224]	; (8003f24 <DMA_CalcBaseAndBitshift+0x134>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d027      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a36      	ldr	r2, [pc, #216]	; (8003f28 <DMA_CalcBaseAndBitshift+0x138>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d022      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a35      	ldr	r2, [pc, #212]	; (8003f2c <DMA_CalcBaseAndBitshift+0x13c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d01d      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a33      	ldr	r2, [pc, #204]	; (8003f30 <DMA_CalcBaseAndBitshift+0x140>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d018      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a32      	ldr	r2, [pc, #200]	; (8003f34 <DMA_CalcBaseAndBitshift+0x144>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a30      	ldr	r2, [pc, #192]	; (8003f38 <DMA_CalcBaseAndBitshift+0x148>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2f      	ldr	r2, [pc, #188]	; (8003f3c <DMA_CalcBaseAndBitshift+0x14c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <DMA_CalcBaseAndBitshift+0x150>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <DMA_CalcBaseAndBitshift+0xa8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <DMA_CalcBaseAndBitshift+0x154>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <DMA_CalcBaseAndBitshift+0xac>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <DMA_CalcBaseAndBitshift+0xae>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d024      	beq.n	8003eec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	3b10      	subs	r3, #16
 8003eaa:	4a27      	ldr	r2, [pc, #156]	; (8003f48 <DMA_CalcBaseAndBitshift+0x158>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	4a24      	ldr	r2, [pc, #144]	; (8003f4c <DMA_CalcBaseAndBitshift+0x15c>)
 8003ebc:	5cd3      	ldrb	r3, [r2, r3]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d908      	bls.n	8003edc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <DMA_CalcBaseAndBitshift+0x160>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	1d1a      	adds	r2, r3, #4
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	659a      	str	r2, [r3, #88]	; 0x58
 8003eda:	e00d      	b.n	8003ef8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <DMA_CalcBaseAndBitshift+0x160>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eea:	e005      	b.n	8003ef8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	40020010 	.word	0x40020010
 8003f0c:	40020028 	.word	0x40020028
 8003f10:	40020040 	.word	0x40020040
 8003f14:	40020058 	.word	0x40020058
 8003f18:	40020070 	.word	0x40020070
 8003f1c:	40020088 	.word	0x40020088
 8003f20:	400200a0 	.word	0x400200a0
 8003f24:	400200b8 	.word	0x400200b8
 8003f28:	40020410 	.word	0x40020410
 8003f2c:	40020428 	.word	0x40020428
 8003f30:	40020440 	.word	0x40020440
 8003f34:	40020458 	.word	0x40020458
 8003f38:	40020470 	.word	0x40020470
 8003f3c:	40020488 	.word	0x40020488
 8003f40:	400204a0 	.word	0x400204a0
 8003f44:	400204b8 	.word	0x400204b8
 8003f48:	aaaaaaab 	.word	0xaaaaaaab
 8003f4c:	080126a0 	.word	0x080126a0
 8003f50:	fffffc00 	.word	0xfffffc00

08003f54 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d120      	bne.n	8003faa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d858      	bhi.n	8004022 <DMA_CheckFifoParam+0xce>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <DMA_CheckFifoParam+0x24>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f89 	.word	0x08003f89
 8003f7c:	08003f9b 	.word	0x08003f9b
 8003f80:	08003f89 	.word	0x08003f89
 8003f84:	08004023 	.word	0x08004023
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d048      	beq.n	8004026 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f98:	e045      	b.n	8004026 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fa2:	d142      	bne.n	800402a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fa8:	e03f      	b.n	800402a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb2:	d123      	bne.n	8003ffc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d838      	bhi.n	800402e <DMA_CheckFifoParam+0xda>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <DMA_CheckFifoParam+0x70>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fdb 	.word	0x08003fdb
 8003fcc:	08003fd5 	.word	0x08003fd5
 8003fd0:	08003fed 	.word	0x08003fed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
        break;
 8003fd8:	e030      	b.n	800403c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d025      	beq.n	8004032 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fea:	e022      	b.n	8004032 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ff4:	d11f      	bne.n	8004036 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ffa:	e01c      	b.n	8004036 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	2b02      	cmp	r3, #2
 8004002:	d902      	bls.n	800400a <DMA_CheckFifoParam+0xb6>
 8004004:	2b03      	cmp	r3, #3
 8004006:	d003      	beq.n	8004010 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004008:	e018      	b.n	800403c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
        break;
 800400e:	e015      	b.n	800403c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
    break;
 8004020:	e00b      	b.n	800403a <DMA_CheckFifoParam+0xe6>
        break;
 8004022:	bf00      	nop
 8004024:	e00a      	b.n	800403c <DMA_CheckFifoParam+0xe8>
        break;
 8004026:	bf00      	nop
 8004028:	e008      	b.n	800403c <DMA_CheckFifoParam+0xe8>
        break;
 800402a:	bf00      	nop
 800402c:	e006      	b.n	800403c <DMA_CheckFifoParam+0xe8>
        break;
 800402e:	bf00      	nop
 8004030:	e004      	b.n	800403c <DMA_CheckFifoParam+0xe8>
        break;
 8004032:	bf00      	nop
 8004034:	e002      	b.n	800403c <DMA_CheckFifoParam+0xe8>
        break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <DMA_CheckFifoParam+0xe8>
    break;
 800403a:	bf00      	nop
    }
  }

  return status;
 800403c:	7bfb      	ldrb	r3, [r7, #15]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop

0800404c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a38      	ldr	r2, [pc, #224]	; (8004140 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d022      	beq.n	80040aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a36      	ldr	r2, [pc, #216]	; (8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01d      	beq.n	80040aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a35      	ldr	r2, [pc, #212]	; (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d018      	beq.n	80040aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a33      	ldr	r2, [pc, #204]	; (800414c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a32      	ldr	r2, [pc, #200]	; (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a30      	ldr	r2, [pc, #192]	; (8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2f      	ldr	r2, [pc, #188]	; (8004158 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2d      	ldr	r2, [pc, #180]	; (800415c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80040ae:	2300      	movs	r3, #0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01a      	beq.n	80040ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	3b08      	subs	r3, #8
 80040bc:	4a28      	ldr	r2, [pc, #160]	; (8004160 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4b26      	ldr	r3, [pc, #152]	; (8004164 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	461a      	mov	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a24      	ldr	r2, [pc, #144]	; (8004168 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80040d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2201      	movs	r2, #1
 80040e2:	409a      	lsls	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040e8:	e024      	b.n	8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	3b10      	subs	r3, #16
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d806      	bhi.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d902      	bls.n	8004112 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3308      	adds	r3, #8
 8004110:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4b18      	ldr	r3, [pc, #96]	; (8004178 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	461a      	mov	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a16      	ldr	r2, [pc, #88]	; (800417c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004124:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2201      	movs	r2, #1
 800412e:	409a      	lsls	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	58025408 	.word	0x58025408
 8004144:	5802541c 	.word	0x5802541c
 8004148:	58025430 	.word	0x58025430
 800414c:	58025444 	.word	0x58025444
 8004150:	58025458 	.word	0x58025458
 8004154:	5802546c 	.word	0x5802546c
 8004158:	58025480 	.word	0x58025480
 800415c:	58025494 	.word	0x58025494
 8004160:	cccccccd 	.word	0xcccccccd
 8004164:	16009600 	.word	0x16009600
 8004168:	58025880 	.word	0x58025880
 800416c:	aaaaaaab 	.word	0xaaaaaaab
 8004170:	400204b8 	.word	0x400204b8
 8004174:	4002040f 	.word	0x4002040f
 8004178:	10008200 	.word	0x10008200
 800417c:	40020880 	.word	0x40020880

08004180 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04a      	beq.n	800422c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b08      	cmp	r3, #8
 800419a:	d847      	bhi.n	800422c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a25      	ldr	r2, [pc, #148]	; (8004238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d022      	beq.n	80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a24      	ldr	r2, [pc, #144]	; (800423c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d01d      	beq.n	80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a22      	ldr	r2, [pc, #136]	; (8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d018      	beq.n	80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a21      	ldr	r2, [pc, #132]	; (8004244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1e      	ldr	r2, [pc, #120]	; (800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d009      	beq.n	80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1b      	ldr	r2, [pc, #108]	; (8004254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d101      	bne.n	80041f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80041f0:	2300      	movs	r3, #0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4b17      	ldr	r3, [pc, #92]	; (8004258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	461a      	mov	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a15      	ldr	r2, [pc, #84]	; (800425c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004208:	671a      	str	r2, [r3, #112]	; 0x70
 800420a:	e009      	b.n	8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4b14      	ldr	r3, [pc, #80]	; (8004260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	461a      	mov	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a11      	ldr	r2, [pc, #68]	; (8004264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800421e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b01      	subs	r3, #1
 8004224:	2201      	movs	r2, #1
 8004226:	409a      	lsls	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	58025408 	.word	0x58025408
 800423c:	5802541c 	.word	0x5802541c
 8004240:	58025430 	.word	0x58025430
 8004244:	58025444 	.word	0x58025444
 8004248:	58025458 	.word	0x58025458
 800424c:	5802546c 	.word	0x5802546c
 8004250:	58025480 	.word	0x58025480
 8004254:	58025494 	.word	0x58025494
 8004258:	1600963f 	.word	0x1600963f
 800425c:	58025940 	.word	0x58025940
 8004260:	1000823f 	.word	0x1000823f
 8004264:	40020940 	.word	0x40020940

08004268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004276:	4b89      	ldr	r3, [pc, #548]	; (800449c <HAL_GPIO_Init+0x234>)
 8004278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800427a:	e194      	b.n	80045a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2101      	movs	r1, #1
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	4013      	ands	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 8186 	beq.w	80045a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d00b      	beq.n	80042b4 <HAL_GPIO_Init+0x4c>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d007      	beq.n	80042b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042a8:	2b11      	cmp	r3, #17
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b12      	cmp	r3, #18
 80042b2:	d130      	bne.n	8004316 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	2203      	movs	r2, #3
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	4013      	ands	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042ea:	2201      	movs	r2, #1
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	43db      	mvns	r3, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4013      	ands	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	091b      	lsrs	r3, r3, #4
 8004300:	f003 0201 	and.w	r2, r3, #1
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	2203      	movs	r2, #3
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0xee>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b12      	cmp	r3, #18
 8004354:	d123      	bne.n	800439e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	08da      	lsrs	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3208      	adds	r2, #8
 800435e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	220f      	movs	r2, #15
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4013      	ands	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	08da      	lsrs	r2, r3, #3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3208      	adds	r2, #8
 8004398:	69b9      	ldr	r1, [r7, #24]
 800439a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	2203      	movs	r2, #3
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 0203 	and.w	r2, r3, #3
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80e0 	beq.w	80045a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043e0:	4b2f      	ldr	r3, [pc, #188]	; (80044a0 <HAL_GPIO_Init+0x238>)
 80043e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043e6:	4a2e      	ldr	r2, [pc, #184]	; (80044a0 <HAL_GPIO_Init+0x238>)
 80043e8:	f043 0302 	orr.w	r3, r3, #2
 80043ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <HAL_GPIO_Init+0x238>)
 80043f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043fe:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <HAL_GPIO_Init+0x23c>)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	3302      	adds	r3, #2
 8004406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	220f      	movs	r2, #15
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a20      	ldr	r2, [pc, #128]	; (80044a8 <HAL_GPIO_Init+0x240>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d052      	beq.n	80044d0 <HAL_GPIO_Init+0x268>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a1f      	ldr	r2, [pc, #124]	; (80044ac <HAL_GPIO_Init+0x244>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d031      	beq.n	8004496 <HAL_GPIO_Init+0x22e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1e      	ldr	r2, [pc, #120]	; (80044b0 <HAL_GPIO_Init+0x248>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d02b      	beq.n	8004492 <HAL_GPIO_Init+0x22a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_GPIO_Init+0x24c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d025      	beq.n	800448e <HAL_GPIO_Init+0x226>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <HAL_GPIO_Init+0x250>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01f      	beq.n	800448a <HAL_GPIO_Init+0x222>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_GPIO_Init+0x254>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d019      	beq.n	8004486 <HAL_GPIO_Init+0x21e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1a      	ldr	r2, [pc, #104]	; (80044c0 <HAL_GPIO_Init+0x258>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d013      	beq.n	8004482 <HAL_GPIO_Init+0x21a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <HAL_GPIO_Init+0x25c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00d      	beq.n	800447e <HAL_GPIO_Init+0x216>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <HAL_GPIO_Init+0x260>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d007      	beq.n	800447a <HAL_GPIO_Init+0x212>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <HAL_GPIO_Init+0x264>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d101      	bne.n	8004476 <HAL_GPIO_Init+0x20e>
 8004472:	2309      	movs	r3, #9
 8004474:	e02d      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 8004476:	230a      	movs	r3, #10
 8004478:	e02b      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 800447a:	2308      	movs	r3, #8
 800447c:	e029      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 800447e:	2307      	movs	r3, #7
 8004480:	e027      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 8004482:	2306      	movs	r3, #6
 8004484:	e025      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 8004486:	2305      	movs	r3, #5
 8004488:	e023      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 800448a:	2304      	movs	r3, #4
 800448c:	e021      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 800448e:	2303      	movs	r3, #3
 8004490:	e01f      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 8004492:	2302      	movs	r3, #2
 8004494:	e01d      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 8004496:	2301      	movs	r3, #1
 8004498:	e01b      	b.n	80044d2 <HAL_GPIO_Init+0x26a>
 800449a:	bf00      	nop
 800449c:	58000080 	.word	0x58000080
 80044a0:	58024400 	.word	0x58024400
 80044a4:	58000400 	.word	0x58000400
 80044a8:	58020000 	.word	0x58020000
 80044ac:	58020400 	.word	0x58020400
 80044b0:	58020800 	.word	0x58020800
 80044b4:	58020c00 	.word	0x58020c00
 80044b8:	58021000 	.word	0x58021000
 80044bc:	58021400 	.word	0x58021400
 80044c0:	58021800 	.word	0x58021800
 80044c4:	58021c00 	.word	0x58021c00
 80044c8:	58022000 	.word	0x58022000
 80044cc:	58022400 	.word	0x58022400
 80044d0:	2300      	movs	r3, #0
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	f002 0203 	and.w	r2, r2, #3
 80044d8:	0092      	lsls	r2, r2, #2
 80044da:	4093      	lsls	r3, r2
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044e2:	4938      	ldr	r1, [pc, #224]	; (80045c4 <HAL_GPIO_Init+0x35c>)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	089b      	lsrs	r3, r3, #2
 80044e8:	3302      	adds	r3, #2
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4013      	ands	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800456a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f ae63 	bne.w	800427c <HAL_GPIO_Init+0x14>
  }
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	3724      	adds	r7, #36	; 0x24
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	58000400 	.word	0x58000400

080045c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]
 80045d4:	4613      	mov	r3, r2
 80045d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045d8:	787b      	ldrb	r3, [r7, #1]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80045e4:	e003      	b.n	80045ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80045e6:	887b      	ldrh	r3, [r7, #2]
 80045e8:	041a      	lsls	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	619a      	str	r2, [r3, #24]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004604:	4a08      	ldr	r2, [pc, #32]	; (8004628 <HAL_HSEM_FastTake+0x2c>)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3320      	adds	r3, #32
 800460a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460e:	4a07      	ldr	r2, [pc, #28]	; (800462c <HAL_HSEM_FastTake+0x30>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d101      	bne.n	8004618 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	e000      	b.n	800461a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	58026400 	.word	0x58026400
 800462c:	80000300 	.word	0x80000300

08004630 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800463a:	4906      	ldr	r1, [pc, #24]	; (8004654 <HAL_HSEM_Release+0x24>)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	58026400 	.word	0x58026400

08004658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07f      	b.n	800476a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fc f9f6 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2224      	movs	r2, #36	; 0x24
 8004688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0201 	bic.w	r2, r2, #1
 800469a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d107      	bne.n	80046d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	e006      	b.n	80046e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d104      	bne.n	80046f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6859      	ldr	r1, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_I2C_Init+0x11c>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004710:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	ea42 0103 	orr.w	r1, r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	021a      	lsls	r2, r3, #8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69d9      	ldr	r1, [r3, #28]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1a      	ldr	r2, [r3, #32]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	02008000 	.word	0x02008000

08004778 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
  }
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d010      	beq.n	80047f2 <HAL_I2C_ER_IRQHandler+0x46>
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	09db      	lsrs	r3, r3, #7
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e0:	f043 0201 	orr.w	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	0a9b      	lsrs	r3, r3, #10
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d010      	beq.n	8004820 <HAL_I2C_ER_IRQHandler+0x74>
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	09db      	lsrs	r3, r3, #7
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f043 0208 	orr.w	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800481e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	0a5b      	lsrs	r3, r3, #9
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d010      	beq.n	800484e <HAL_I2C_ER_IRQHandler+0xa2>
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	09db      	lsrs	r3, r3, #7
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	f043 0202 	orr.w	r2, r3, #2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800484c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 030b 	and.w	r3, r3, #11
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800485e:	68f9      	ldr	r1, [r7, #12]
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fc77 	bl	8005154 <I2C_ITError>
  }
}
 8004866:	bf00      	nop
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	70fb      	strb	r3, [r7, #3]
 80048a2:	4613      	mov	r3, r2
 80048a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b086      	sub	sp, #24
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <I2C_Slave_ISR_IT+0x24>
 800490e:	2302      	movs	r3, #2
 8004910:	e0ec      	b.n	8004aec <I2C_Slave_ISR_IT+0x1fe>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <I2C_Slave_ISR_IT+0x4c>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004932:	6939      	ldr	r1, [r7, #16]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 f9bf 	bl	8004cb8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d04d      	beq.n	80049e2 <I2C_Slave_ISR_IT+0xf4>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d047      	beq.n	80049e2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d128      	bne.n	80049ae <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b28      	cmp	r3, #40	; 0x28
 8004966:	d108      	bne.n	800497a <I2C_Slave_ISR_IT+0x8c>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800496e:	d104      	bne.n	800497a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fb98 	bl	80050a8 <I2C_ITListenCplt>
 8004978:	e032      	b.n	80049e0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b29      	cmp	r3, #41	; 0x29
 8004984:	d10e      	bne.n	80049a4 <I2C_Slave_ISR_IT+0xb6>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800498c:	d00a      	beq.n	80049a4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2210      	movs	r2, #16
 8004994:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fcd3 	bl	8005342 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f92d 	bl	8004bfc <I2C_ITSlaveSeqCplt>
 80049a2:	e01d      	b.n	80049e0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2210      	movs	r2, #16
 80049aa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80049ac:	e096      	b.n	8004adc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2210      	movs	r2, #16
 80049b4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	f043 0204 	orr.w	r2, r3, #4
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d004      	beq.n	80049d2 <I2C_Slave_ISR_IT+0xe4>
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ce:	f040 8085 	bne.w	8004adc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	4619      	mov	r1, r3
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fbbb 	bl	8005154 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80049de:	e07d      	b.n	8004adc <I2C_Slave_ISR_IT+0x1ee>
 80049e0:	e07c      	b.n	8004adc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d030      	beq.n	8004a50 <I2C_Slave_ISR_IT+0x162>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	089b      	lsrs	r3, r3, #2
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d02a      	beq.n	8004a50 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d018      	beq.n	8004a36 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d14f      	bne.n	8004ae0 <I2C_Slave_ISR_IT+0x1f2>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a46:	d04b      	beq.n	8004ae0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f8d7 	bl	8004bfc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004a4e:	e047      	b.n	8004ae0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	08db      	lsrs	r3, r3, #3
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	08db      	lsrs	r3, r3, #3
 8004a60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004a68:	6939      	ldr	r1, [r7, #16]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f842 	bl	8004af4 <I2C_ITAddrCplt>
 8004a70:	e037      	b.n	8004ae2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d031      	beq.n	8004ae2 <I2C_Slave_ISR_IT+0x1f4>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d02b      	beq.n	8004ae2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d018      	beq.n	8004ac6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ac4:	e00d      	b.n	8004ae2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004acc:	d002      	beq.n	8004ad4 <I2C_Slave_ISR_IT+0x1e6>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f891 	bl	8004bfc <I2C_ITSlaveSeqCplt>
 8004ada:	e002      	b.n	8004ae2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004adc:	bf00      	nop
 8004ade:	e000      	b.n	8004ae2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004ae0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b0a:	2b28      	cmp	r3, #40	; 0x28
 8004b0c:	d16a      	bne.n	8004be4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	0c1b      	lsrs	r3, r3, #16
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b2c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b3a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b48:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d138      	bne.n	8004bc4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	09db      	lsrs	r3, r3, #7
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	89bb      	ldrh	r3, [r7, #12]
 8004b5a:	4053      	eors	r3, r2
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f003 0306 	and.w	r3, r3, #6
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d11c      	bne.n	8004ba0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b66:	897b      	ldrh	r3, [r7, #10]
 8004b68:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d13b      	bne.n	8004bf4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2208      	movs	r2, #8
 8004b88:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b92:	89ba      	ldrh	r2, [r7, #12]
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff fe7c 	bl	8004896 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b9e:	e029      	b.n	8004bf4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004ba0:	893b      	ldrh	r3, [r7, #8]
 8004ba2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fc0c 	bl	80053c6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bb6:	89ba      	ldrh	r2, [r7, #12]
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fe6a 	bl	8004896 <HAL_I2C_AddrCallback>
}
 8004bc2:	e017      	b.n	8004bf4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fbfc 	bl	80053c6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bd6:	89ba      	ldrh	r2, [r7, #12]
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fe5a 	bl	8004896 <HAL_I2C_AddrCallback>
}
 8004be2:	e007      	b.n	8004bf4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2208      	movs	r2, #8
 8004bea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	0b9b      	lsrs	r3, r3, #14
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e00d      	b.n	8004c4e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	0bdb      	lsrs	r3, r3, #15
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c4c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b29      	cmp	r3, #41	; 0x29
 8004c58:	d112      	bne.n	8004c80 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2228      	movs	r2, #40	; 0x28
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2221      	movs	r2, #33	; 0x21
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c68:	2101      	movs	r1, #1
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fbab 	bl	80053c6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fdf8 	bl	800486e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c7e:	e017      	b.n	8004cb0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b2a      	cmp	r3, #42	; 0x2a
 8004c8a:	d111      	bne.n	8004cb0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2228      	movs	r2, #40	; 0x28
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2222      	movs	r2, #34	; 0x22
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fb92 	bl	80053c6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff fde9 	bl	8004882 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b21      	cmp	r3, #33	; 0x21
 8004ce2:	d002      	beq.n	8004cea <I2C_ITSlaveCplt+0x32>
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b29      	cmp	r3, #41	; 0x29
 8004ce8:	d108      	bne.n	8004cfc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004cea:	f248 0101 	movw	r1, #32769	; 0x8001
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fb69 	bl	80053c6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2221      	movs	r2, #33	; 0x21
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cfa:	e00d      	b.n	8004d18 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b22      	cmp	r3, #34	; 0x22
 8004d00:	d002      	beq.n	8004d08 <I2C_ITSlaveCplt+0x50>
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	2b2a      	cmp	r3, #42	; 0x2a
 8004d06:	d107      	bne.n	8004d18 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004d08:	f248 0102 	movw	r1, #32770	; 0x8002
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fb5a 	bl	80053c6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2222      	movs	r2, #34	; 0x22
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d26:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b80      	ldr	r3, [pc, #512]	; (8004f34 <I2C_ITSlaveCplt+0x27c>)
 8004d34:	400b      	ands	r3, r1
 8004d36:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fb02 	bl	8005342 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	0b9b      	lsrs	r3, r3, #14
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d07a      	beq.n	8004e40 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 8111 	beq.w	8004f86 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a73      	ldr	r2, [pc, #460]	; (8004f38 <I2C_ITSlaveCplt+0x280>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d059      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a71      	ldr	r2, [pc, #452]	; (8004f3c <I2C_ITSlaveCplt+0x284>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d053      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a6f      	ldr	r2, [pc, #444]	; (8004f40 <I2C_ITSlaveCplt+0x288>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d04d      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a6d      	ldr	r2, [pc, #436]	; (8004f44 <I2C_ITSlaveCplt+0x28c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d047      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a6b      	ldr	r2, [pc, #428]	; (8004f48 <I2C_ITSlaveCplt+0x290>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d041      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a69      	ldr	r2, [pc, #420]	; (8004f4c <I2C_ITSlaveCplt+0x294>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d03b      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a67      	ldr	r2, [pc, #412]	; (8004f50 <I2C_ITSlaveCplt+0x298>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d035      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a65      	ldr	r2, [pc, #404]	; (8004f54 <I2C_ITSlaveCplt+0x29c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d02f      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a63      	ldr	r2, [pc, #396]	; (8004f58 <I2C_ITSlaveCplt+0x2a0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d029      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a61      	ldr	r2, [pc, #388]	; (8004f5c <I2C_ITSlaveCplt+0x2a4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d023      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a5f      	ldr	r2, [pc, #380]	; (8004f60 <I2C_ITSlaveCplt+0x2a8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d01d      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a5d      	ldr	r2, [pc, #372]	; (8004f64 <I2C_ITSlaveCplt+0x2ac>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d017      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a5b      	ldr	r2, [pc, #364]	; (8004f68 <I2C_ITSlaveCplt+0x2b0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d011      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a59      	ldr	r2, [pc, #356]	; (8004f6c <I2C_ITSlaveCplt+0x2b4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a57      	ldr	r2, [pc, #348]	; (8004f70 <I2C_ITSlaveCplt+0x2b8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d005      	beq.n	8004e24 <I2C_ITSlaveCplt+0x16c>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a55      	ldr	r2, [pc, #340]	; (8004f74 <I2C_ITSlaveCplt+0x2bc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d105      	bne.n	8004e30 <I2C_ITSlaveCplt+0x178>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	e004      	b.n	8004e3a <I2C_ITSlaveCplt+0x182>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	8553      	strh	r3, [r2, #42]	; 0x2a
 8004e3e:	e0a2      	b.n	8004f86 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	0bdb      	lsrs	r3, r3, #15
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 809c 	beq.w	8004f86 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 808f 	beq.w	8004f86 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a32      	ldr	r2, [pc, #200]	; (8004f38 <I2C_ITSlaveCplt+0x280>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d059      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <I2C_ITSlaveCplt+0x284>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d053      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a2e      	ldr	r2, [pc, #184]	; (8004f40 <I2C_ITSlaveCplt+0x288>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d04d      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <I2C_ITSlaveCplt+0x28c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d047      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <I2C_ITSlaveCplt+0x290>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d041      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a28      	ldr	r2, [pc, #160]	; (8004f4c <I2C_ITSlaveCplt+0x294>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d03b      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a26      	ldr	r2, [pc, #152]	; (8004f50 <I2C_ITSlaveCplt+0x298>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d035      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a24      	ldr	r2, [pc, #144]	; (8004f54 <I2C_ITSlaveCplt+0x29c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d02f      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <I2C_ITSlaveCplt+0x2a0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d029      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a20      	ldr	r2, [pc, #128]	; (8004f5c <I2C_ITSlaveCplt+0x2a4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d023      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1e      	ldr	r2, [pc, #120]	; (8004f60 <I2C_ITSlaveCplt+0x2a8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d01d      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <I2C_ITSlaveCplt+0x2ac>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d017      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1a      	ldr	r2, [pc, #104]	; (8004f68 <I2C_ITSlaveCplt+0x2b0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d011      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <I2C_ITSlaveCplt+0x2b4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <I2C_ITSlaveCplt+0x2b8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d005      	beq.n	8004f28 <I2C_ITSlaveCplt+0x270>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a14      	ldr	r2, [pc, #80]	; (8004f74 <I2C_ITSlaveCplt+0x2bc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d127      	bne.n	8004f78 <I2C_ITSlaveCplt+0x2c0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	e026      	b.n	8004f82 <I2C_ITSlaveCplt+0x2ca>
 8004f34:	fe00e800 	.word	0xfe00e800
 8004f38:	40020010 	.word	0x40020010
 8004f3c:	40020028 	.word	0x40020028
 8004f40:	40020040 	.word	0x40020040
 8004f44:	40020058 	.word	0x40020058
 8004f48:	40020070 	.word	0x40020070
 8004f4c:	40020088 	.word	0x40020088
 8004f50:	400200a0 	.word	0x400200a0
 8004f54:	400200b8 	.word	0x400200b8
 8004f58:	40020410 	.word	0x40020410
 8004f5c:	40020428 	.word	0x40020428
 8004f60:	40020440 	.word	0x40020440
 8004f64:	40020458 	.word	0x40020458
 8004f68:	40020470 	.word	0x40020470
 8004f6c:	40020488 	.word	0x40020488
 8004f70:	400204a0 	.word	0x400204a0
 8004f74:	400204b8 	.word	0x400204b8
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d020      	beq.n	8004fd4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00c      	beq.n	8004fd4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f043 0204 	orr.w	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8a4 	bl	8005154 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b28      	cmp	r3, #40	; 0x28
 8005016:	d141      	bne.n	800509c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f844 	bl	80050a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005020:	e03c      	b.n	800509c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800502a:	d014      	beq.n	8005056 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff fde5 	bl	8004bfc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <I2C_ITSlaveCplt+0x3ec>)
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff fc2f 	bl	80048b2 <HAL_I2C_ListenCpltCallback>
}
 8005054:	e022      	b.n	800509c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b22      	cmp	r3, #34	; 0x22
 8005060:	d10e      	bne.n	8005080 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fc02 	bl	8004882 <HAL_I2C_SlaveRxCpltCallback>
}
 800507e:	e00d      	b.n	800509c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fbe9 	bl	800486e <HAL_I2C_SlaveTxCpltCallback>
}
 800509c:	bf00      	nop
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	ffff0000 	.word	0xffff0000

080050a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a26      	ldr	r2, [pc, #152]	; (8005150 <I2C_ITListenCplt+0xa8>)
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	089b      	lsrs	r3, r3, #2
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d022      	beq.n	8005126 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d012      	beq.n	8005126 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	f043 0204 	orr.w	r2, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005126:	f248 0103 	movw	r1, #32771	; 0x8003
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f94b 	bl	80053c6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2210      	movs	r2, #16
 8005136:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff fbb6 	bl	80048b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	ffff0000 	.word	0xffff0000

08005154 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a5d      	ldr	r2, [pc, #372]	; (80052e8 <I2C_ITError+0x194>)
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	2b28      	cmp	r3, #40	; 0x28
 800518a:	d005      	beq.n	8005198 <I2C_ITError+0x44>
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b29      	cmp	r3, #41	; 0x29
 8005190:	d002      	beq.n	8005198 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	2b2a      	cmp	r3, #42	; 0x2a
 8005196:	d10b      	bne.n	80051b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005198:	2103      	movs	r1, #3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f913 	bl	80053c6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2228      	movs	r2, #40	; 0x28
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a50      	ldr	r2, [pc, #320]	; (80052ec <I2C_ITError+0x198>)
 80051ac:	635a      	str	r2, [r3, #52]	; 0x34
 80051ae:	e011      	b.n	80051d4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051b0:	f248 0103 	movw	r1, #32771	; 0x8003
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f906 	bl	80053c6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b60      	cmp	r3, #96	; 0x60
 80051c4:	d003      	beq.n	80051ce <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d039      	beq.n	8005256 <I2C_ITError+0x102>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b11      	cmp	r3, #17
 80051e6:	d002      	beq.n	80051ee <I2C_ITError+0x9a>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b21      	cmp	r3, #33	; 0x21
 80051ec:	d133      	bne.n	8005256 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051fc:	d107      	bne.n	800520e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800520c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe fdde 	bl	8003dd4 <HAL_DMA_GetState>
 8005218:	4603      	mov	r3, r0
 800521a:	2b01      	cmp	r3, #1
 800521c:	d017      	beq.n	800524e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	4a33      	ldr	r2, [pc, #204]	; (80052f0 <I2C_ITError+0x19c>)
 8005224:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd fc5e 	bl	8002af4 <HAL_DMA_Abort_IT>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d04d      	beq.n	80052da <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005248:	4610      	mov	r0, r2
 800524a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800524c:	e045      	b.n	80052da <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f850 	bl	80052f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005254:	e041      	b.n	80052da <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d039      	beq.n	80052d2 <I2C_ITError+0x17e>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b12      	cmp	r3, #18
 8005262:	d002      	beq.n	800526a <I2C_ITError+0x116>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b22      	cmp	r3, #34	; 0x22
 8005268:	d133      	bne.n	80052d2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005278:	d107      	bne.n	800528a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005288:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	4618      	mov	r0, r3
 8005290:	f7fe fda0 	bl	8003dd4 <HAL_DMA_GetState>
 8005294:	4603      	mov	r3, r0
 8005296:	2b01      	cmp	r3, #1
 8005298:	d017      	beq.n	80052ca <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529e:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <I2C_ITError+0x19c>)
 80052a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fd fc20 	bl	8002af4 <HAL_DMA_Abort_IT>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d011      	beq.n	80052de <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052c4:	4610      	mov	r0, r2
 80052c6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052c8:	e009      	b.n	80052de <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f812 	bl	80052f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052d0:	e005      	b.n	80052de <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f80e 	bl	80052f4 <I2C_TreatErrorCallback>
  }
}
 80052d8:	e002      	b.n	80052e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052de:	bf00      	nop
}
 80052e0:	bf00      	nop
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	ffff0000 	.word	0xffff0000
 80052ec:	080048ef 	.word	0x080048ef
 80052f0:	0800538b 	.word	0x0800538b

080052f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b60      	cmp	r3, #96	; 0x60
 8005306:	d10e      	bne.n	8005326 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fadb 	bl	80048da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005324:	e009      	b.n	800533a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fac6 	bl	80048c6 <HAL_I2C_ErrorCallback>
}
 800533a:	bf00      	nop
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d103      	bne.n	8005360 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2200      	movs	r2, #0
 800535e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d007      	beq.n	800537e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699a      	ldr	r2, [r3, #24]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	619a      	str	r2, [r3, #24]
  }
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	2200      	movs	r2, #0
 80053a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b4:	2200      	movs	r2, #0
 80053b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff ff9b 	bl	80052f4 <I2C_TreatErrorCallback>
}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	460b      	mov	r3, r1
 80053d0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80053d6:	887b      	ldrh	r3, [r7, #2]
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00f      	beq.n	8005400 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80053e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053f4:	2b28      	cmp	r3, #40	; 0x28
 80053f6:	d003      	beq.n	8005400 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80053fe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00f      	beq.n	800542a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005410:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800541e:	2b28      	cmp	r3, #40	; 0x28
 8005420:	d003      	beq.n	800542a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005428:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800542a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800542e:	2b00      	cmp	r3, #0
 8005430:	da03      	bge.n	800543a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005438:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800543a:	887b      	ldrh	r3, [r7, #2]
 800543c:	2b10      	cmp	r3, #16
 800543e:	d103      	bne.n	8005448 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005446:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005448:	887b      	ldrh	r3, [r7, #2]
 800544a:	2b20      	cmp	r3, #32
 800544c:	d103      	bne.n	8005456 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f043 0320 	orr.w	r3, r3, #32
 8005454:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005456:	887b      	ldrh	r3, [r7, #2]
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d103      	bne.n	8005464 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005462:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6819      	ldr	r1, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	43da      	mvns	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	400a      	ands	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b20      	cmp	r3, #32
 8005496:	d138      	bne.n	800550a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e032      	b.n	800550c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2224      	movs	r2, #36	; 0x24
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6819      	ldr	r1, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800550a:	2302      	movs	r3, #2
  }
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b20      	cmp	r3, #32
 800552c:	d139      	bne.n	80055a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005538:	2302      	movs	r3, #2
 800553a:	e033      	b.n	80055a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	; 0x24
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800556a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e000      	b.n	80055a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
  }
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055b2:	b08f      	sub	sp, #60	; 0x3c
 80055b4:	af0a      	add	r7, sp, #40	; 0x28
 80055b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e116      	b.n	80057f0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f00a f85f 	bl	800f6a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2203      	movs	r2, #3
 80055e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f006 ff4e 	bl	800c4a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	687e      	ldr	r6, [r7, #4]
 800560e:	466d      	mov	r5, sp
 8005610:	f106 0410 	add.w	r4, r6, #16
 8005614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800561a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800561c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005620:	e885 0003 	stmia.w	r5, {r0, r1}
 8005624:	1d33      	adds	r3, r6, #4
 8005626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005628:	6838      	ldr	r0, [r7, #0]
 800562a:	f006 fe19 	bl	800c260 <USB_CoreInit>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0d7      	b.n	80057f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2100      	movs	r1, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f006 ff3c 	bl	800c4c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]
 8005650:	e04a      	b.n	80056e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005652:	7bfa      	ldrb	r2, [r7, #15]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	333d      	adds	r3, #61	; 0x3d
 8005662:	2201      	movs	r2, #1
 8005664:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005666:	7bfa      	ldrb	r2, [r7, #15]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	333c      	adds	r3, #60	; 0x3c
 8005676:	7bfa      	ldrb	r2, [r7, #15]
 8005678:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800567a:	7bfa      	ldrb	r2, [r7, #15]
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	b298      	uxth	r0, r3
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	3342      	adds	r3, #66	; 0x42
 800568e:	4602      	mov	r2, r0
 8005690:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005692:	7bfa      	ldrb	r2, [r7, #15]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	333f      	adds	r3, #63	; 0x3f
 80056a2:	2200      	movs	r2, #0
 80056a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056a6:	7bfa      	ldrb	r2, [r7, #15]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	3344      	adds	r3, #68	; 0x44
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056ba:	7bfa      	ldrb	r2, [r7, #15]
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	3348      	adds	r3, #72	; 0x48
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056ce:	7bfa      	ldrb	r2, [r7, #15]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3350      	adds	r3, #80	; 0x50
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	3301      	adds	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d3af      	bcc.n	8005652 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
 80056f6:	e044      	b.n	8005782 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056f8:	7bfa      	ldrb	r2, [r7, #15]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800570e:	7bfa      	ldrb	r2, [r7, #15]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005724:	7bfa      	ldrb	r2, [r7, #15]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800573a:	7bfa      	ldrb	r2, [r7, #15]
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005750:	7bfa      	ldrb	r2, [r7, #15]
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005766:	7bfa      	ldrb	r2, [r7, #15]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	3301      	adds	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
 8005782:	7bfa      	ldrb	r2, [r7, #15]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	429a      	cmp	r2, r3
 800578a:	d3b5      	bcc.n	80056f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	603b      	str	r3, [r7, #0]
 8005792:	687e      	ldr	r6, [r7, #4]
 8005794:	466d      	mov	r5, sp
 8005796:	f106 0410 	add.w	r4, r6, #16
 800579a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800579c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800579e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80057aa:	1d33      	adds	r3, r6, #4
 80057ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057ae:	6838      	ldr	r0, [r7, #0]
 80057b0:	f006 feb2 	bl	800c518 <USB_DevInit>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e014      	b.n	80057f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d102      	bne.n	80057e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f001 f892 	bl	8006908 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f007 ff32 	bl	800d652 <USB_DevDisconnect>

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_PCD_Start+0x1c>
 8005810:	2302      	movs	r3, #2
 8005812:	e020      	b.n	8005856 <HAL_PCD_Start+0x5e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	2b01      	cmp	r3, #1
 8005822:	d109      	bne.n	8005838 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005828:	2b01      	cmp	r3, #1
 800582a:	d005      	beq.n	8005838 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f006 fe1f 	bl	800c480 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f007 fee2 	bl	800d610 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800585e:	b590      	push	{r4, r7, lr}
 8005860:	b08d      	sub	sp, #52	; 0x34
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f007 ffa0 	bl	800d7ba <USB_GetMode>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	f040 83ca 	bne.w	8006016 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f007 ff04 	bl	800d694 <USB_ReadInterrupts>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 83c0 	beq.w	8006014 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f007 fefb 	bl	800d694 <USB_ReadInterrupts>
 800589e:	4603      	mov	r3, r0
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d107      	bne.n	80058b8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f002 0202 	and.w	r2, r2, #2
 80058b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f007 fee9 	bl	800d694 <USB_ReadInterrupts>
 80058c2:	4603      	mov	r3, r0
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d161      	bne.n	8005990 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0210 	bic.w	r2, r2, #16
 80058da:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	4613      	mov	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	4413      	add	r3, r2
 80058f8:	3304      	adds	r3, #4
 80058fa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	0c5b      	lsrs	r3, r3, #17
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	2b02      	cmp	r3, #2
 8005906:	d124      	bne.n	8005952 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800590e:	4013      	ands	r3, r2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d035      	beq.n	8005980 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800591e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	6a38      	ldr	r0, [r7, #32]
 8005928:	f007 fd20 	bl	800d36c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005938:	441a      	add	r2, r3
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800594a:	441a      	add	r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	619a      	str	r2, [r3, #24]
 8005950:	e016      	b.n	8005980 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	0c5b      	lsrs	r3, r3, #17
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	2b06      	cmp	r3, #6
 800595c:	d110      	bne.n	8005980 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005964:	2208      	movs	r2, #8
 8005966:	4619      	mov	r1, r3
 8005968:	6a38      	ldr	r0, [r7, #32]
 800596a:	f007 fcff 	bl	800d36c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	091b      	lsrs	r3, r3, #4
 8005976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800597a:	441a      	add	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0210 	orr.w	r2, r2, #16
 800598e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f007 fe7d 	bl	800d694 <USB_ReadInterrupts>
 800599a:	4603      	mov	r3, r0
 800599c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059a4:	d16e      	bne.n	8005a84 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f007 fe83 	bl	800d6ba <USB_ReadDevAllOutEpInterrupt>
 80059b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80059b6:	e062      	b.n	8005a7e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d057      	beq.n	8005a72 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	4611      	mov	r1, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f007 fea8 	bl	800d722 <USB_ReadDevOutEPInterrupt>
 80059d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	461a      	mov	r2, r3
 80059ec:	2301      	movs	r3, #1
 80059ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fdde 	bl	80065b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	461a      	mov	r2, r3
 8005a10:	2308      	movs	r3, #8
 8005a12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fed8 	bl	80067cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	461a      	mov	r2, r3
 8005a34:	2310      	movs	r3, #16
 8005a36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2320      	movs	r3, #32
 8005a52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	3301      	adds	r3, #1
 8005a76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d199      	bne.n	80059b8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f007 fe03 	bl	800d694 <USB_ReadInterrupts>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a98:	f040 80c0 	bne.w	8005c1c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f007 fe24 	bl	800d6ee <USB_ReadDevAllInEpInterrupt>
 8005aa6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005aac:	e0b2      	b.n	8005c14 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80a7 	beq.w	8005c08 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f007 fe4a 	bl	800d75e <USB_ReadDevInEPInterrupt>
 8005aca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d057      	beq.n	8005b86 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	2201      	movs	r2, #1
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af6:	4013      	ands	r3, r2
 8005af8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b06:	461a      	mov	r2, r3
 8005b08:	2301      	movs	r3, #1
 8005b0a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d132      	bne.n	8005b7a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	3348      	adds	r3, #72	; 0x48
 8005b24:	6819      	ldr	r1, [r3, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4403      	add	r3, r0
 8005b34:	3344      	adds	r3, #68	; 0x44
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4419      	add	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b3e:	4613      	mov	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4403      	add	r3, r0
 8005b48:	3348      	adds	r3, #72	; 0x48
 8005b4a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d113      	bne.n	8005b7a <HAL_PCD_IRQHandler+0x31c>
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	3350      	adds	r3, #80	; 0x50
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d108      	bne.n	8005b7a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b72:	461a      	mov	r2, r3
 8005b74:	2101      	movs	r1, #1
 8005b76:	f007 fe53 	bl	800d820 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f009 fe2a 	bl	800f7da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2310      	movs	r3, #16
 8005bbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2340      	movs	r3, #64	; 0x40
 8005bd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fc48 	bl	8006498 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f47f af49 	bne.w	8005aae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f007 fd37 	bl	800d694 <USB_ReadInterrupts>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c30:	d122      	bne.n	8005c78 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d108      	bne.n	8005c62 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c58:	2100      	movs	r1, #0
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fe78 	bl	8006950 <HAL_PCDEx_LPM_Callback>
 8005c60:	e002      	b.n	8005c68 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f009 fe30 	bl	800f8c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005c76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f007 fd09 	bl	800d694 <USB_ReadInterrupts>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8c:	d112      	bne.n	8005cb4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d102      	bne.n	8005ca4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f009 fdec 	bl	800f87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695a      	ldr	r2, [r3, #20]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f007 fceb 	bl	800d694 <USB_ReadInterrupts>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cc8:	d121      	bne.n	8005d0e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695a      	ldr	r2, [r3, #20]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005cd8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d111      	bne.n	8005d08 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	089b      	lsrs	r3, r3, #2
 8005cf4:	f003 020f 	and.w	r2, r3, #15
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005cfe:	2101      	movs	r1, #1
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fe25 	bl	8006950 <HAL_PCDEx_LPM_Callback>
 8005d06:	e002      	b.n	8005d0e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f009 fdb7 	bl	800f87c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f007 fcbe 	bl	800d694 <USB_ReadInterrupts>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d22:	f040 80c7 	bne.w	8005eb4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2110      	movs	r1, #16
 8005d40:	4618      	mov	r0, r3
 8005d42:	f006 fd47 	bl	800c7d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d46:	2300      	movs	r3, #0
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4a:	e056      	b.n	8005dfa <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	461a      	mov	r2, r3
 8005d5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d7e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	461a      	mov	r2, r3
 8005dae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005db2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de4:	0151      	lsls	r1, r2, #5
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	440a      	add	r2, r1
 8005dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005df2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	3301      	adds	r3, #1
 8005df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d3a3      	bcc.n	8005d4c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005e16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d016      	beq.n	8005e4e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e30:	f043 030b 	orr.w	r3, r3, #11
 8005e34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e46:	f043 030b 	orr.w	r3, r3, #11
 8005e4a:	6453      	str	r3, [r2, #68]	; 0x44
 8005e4c:	e015      	b.n	8005e7a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	f242 032b 	movw	r3, #8235	; 0x202b
 8005e62:	4313      	orrs	r3, r2
 8005e64:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e74:	f043 030b 	orr.w	r3, r3, #11
 8005e78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f007 fcbe 	bl	800d820 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f007 fbeb 	bl	800d694 <USB_ReadInterrupts>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec8:	d124      	bne.n	8005f14 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f007 fc82 	bl	800d7d8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f006 fcdc 	bl	800c896 <USB_GetDevSpeed>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681c      	ldr	r4, [r3, #0]
 8005eea:	f001 fce5 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8005eee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f006 fa1f 	bl	800c33c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f009 fc93 	bl	800f82a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f007 fbbb 	bl	800d694 <USB_ReadInterrupts>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d10a      	bne.n	8005f3e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f009 fc70 	bl	800f80e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f002 0208 	and.w	r2, r2, #8
 8005f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f007 fba6 	bl	800d694 <USB_ReadInterrupts>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f52:	d10f      	bne.n	8005f74 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f009 fcd2 	bl	800f908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695a      	ldr	r2, [r3, #20]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f007 fb8b 	bl	800d694 <USB_ReadInterrupts>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f88:	d10f      	bne.n	8005faa <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f009 fca5 	bl	800f8e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f007 fb70 	bl	800d694 <USB_ReadInterrupts>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbe:	d10a      	bne.n	8005fd6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f009 fcb3 	bl	800f92c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f007 fb5a 	bl	800d694 <USB_ReadInterrupts>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d115      	bne.n	8006016 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f009 fca3 	bl	800f948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6859      	ldr	r1, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	e000      	b.n	8006016 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006014:	bf00      	nop
    }
  }
}
 8006016:	3734      	adds	r7, #52	; 0x34
 8006018:	46bd      	mov	sp, r7
 800601a:	bd90      	pop	{r4, r7, pc}

0800601c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_PCD_SetAddress+0x1a>
 8006032:	2302      	movs	r3, #2
 8006034:	e013      	b.n	800605e <HAL_PCD_SetAddress+0x42>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f007 fab8 	bl	800d5c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	4608      	mov	r0, r1
 8006070:	4611      	mov	r1, r2
 8006072:	461a      	mov	r2, r3
 8006074:	4603      	mov	r3, r0
 8006076:	70fb      	strb	r3, [r7, #3]
 8006078:	460b      	mov	r3, r1
 800607a:	803b      	strh	r3, [r7, #0]
 800607c:	4613      	mov	r3, r2
 800607e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006088:	2b00      	cmp	r3, #0
 800608a:	da0f      	bge.n	80060ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	4613      	mov	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	3338      	adds	r3, #56	; 0x38
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	3304      	adds	r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	705a      	strb	r2, [r3, #1]
 80060aa:	e00f      	b.n	80060cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	f003 020f 	and.w	r2, r3, #15
 80060b2:	4613      	mov	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	4413      	add	r3, r2
 80060c2:	3304      	adds	r3, #4
 80060c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060d8:	883a      	ldrh	r2, [r7, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	78ba      	ldrb	r2, [r7, #2]
 80060e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060f6:	78bb      	ldrb	r3, [r7, #2]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d102      	bne.n	8006102 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_PCD_EP_Open+0xaa>
 800610c:	2302      	movs	r3, #2
 800610e:	e00e      	b.n	800612e <HAL_PCD_EP_Open+0xc8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	4618      	mov	r0, r3
 8006120:	f006 fbde 	bl	800c8e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800612c:	7afb      	ldrb	r3, [r7, #11]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da0f      	bge.n	800616a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	4613      	mov	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	3338      	adds	r3, #56	; 0x38
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	705a      	strb	r2, [r3, #1]
 8006168:	e00f      	b.n	800618a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	f003 020f 	and.w	r2, r3, #15
 8006170:	4613      	mov	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	4413      	add	r3, r2
 8006180:	3304      	adds	r3, #4
 8006182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	b2da      	uxtb	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_PCD_EP_Close+0x6e>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e00e      	b.n	80061c2 <HAL_PCD_EP_Close+0x8c>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f006 fc1c 	bl	800c9f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	460b      	mov	r3, r1
 80061d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061da:	7afb      	ldrb	r3, [r7, #11]
 80061dc:	f003 020f 	and.w	r2, r3, #15
 80061e0:	4613      	mov	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	3304      	adds	r3, #4
 80061f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2200      	movs	r2, #0
 8006204:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2200      	movs	r2, #0
 800620a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	b2da      	uxtb	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d102      	bne.n	8006226 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006226:	7afb      	ldrb	r3, [r7, #11]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	2b00      	cmp	r3, #0
 800622e:	d109      	bne.n	8006244 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	f006 feff 	bl	800d040 <USB_EP0StartXfer>
 8006242:	e008      	b.n	8006256 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	6979      	ldr	r1, [r7, #20]
 8006252:	f006 fca9 	bl	800cba8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	f003 020f 	and.w	r2, r3, #15
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006282:	681b      	ldr	r3, [r3, #0]
}
 8006284:	4618      	mov	r0, r3
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	460b      	mov	r3, r1
 800629e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	f003 020f 	and.w	r2, r3, #15
 80062a6:	4613      	mov	r3, r2
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	1a9b      	subs	r3, r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	3338      	adds	r3, #56	; 0x38
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	3304      	adds	r3, #4
 80062b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2200      	movs	r2, #0
 80062c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2201      	movs	r2, #1
 80062ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062d0:	7afb      	ldrb	r3, [r7, #11]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d102      	bne.n	80062ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d109      	bne.n	8006308 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6818      	ldr	r0, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	f006 fe9d 	bl	800d040 <USB_EP0StartXfer>
 8006306:	e008      	b.n	800631a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	6979      	ldr	r1, [r7, #20]
 8006316:	f006 fc47 	bl	800cba8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	f003 020f 	and.w	r2, r3, #15
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	429a      	cmp	r2, r3
 800633c:	d901      	bls.n	8006342 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e050      	b.n	80063e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006346:	2b00      	cmp	r3, #0
 8006348:	da0f      	bge.n	800636a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	f003 020f 	and.w	r2, r3, #15
 8006350:	4613      	mov	r3, r2
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	3338      	adds	r3, #56	; 0x38
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	3304      	adds	r3, #4
 8006360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	705a      	strb	r2, [r3, #1]
 8006368:	e00d      	b.n	8006386 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	4613      	mov	r3, r2
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	1a9b      	subs	r3, r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	4413      	add	r3, r2
 800637c:	3304      	adds	r3, #4
 800637e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	b2da      	uxtb	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <HAL_PCD_EP_SetStall+0x82>
 80063a2:	2302      	movs	r3, #2
 80063a4:	e01e      	b.n	80063e4 <HAL_PCD_EP_SetStall+0xc0>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f007 f831 	bl	800d41c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	b2d9      	uxtb	r1, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063d4:	461a      	mov	r2, r3
 80063d6:	f007 fa23 	bl	800d820 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	f003 020f 	and.w	r2, r3, #15
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	429a      	cmp	r2, r3
 8006404:	d901      	bls.n	800640a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e042      	b.n	8006490 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800640a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800640e:	2b00      	cmp	r3, #0
 8006410:	da0f      	bge.n	8006432 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	4613      	mov	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	3338      	adds	r3, #56	; 0x38
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	4413      	add	r3, r2
 8006426:	3304      	adds	r3, #4
 8006428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	705a      	strb	r2, [r3, #1]
 8006430:	e00f      	b.n	8006452 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	f003 020f 	and.w	r2, r3, #15
 8006438:	4613      	mov	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	1a9b      	subs	r3, r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	4413      	add	r3, r2
 8006448:	3304      	adds	r3, #4
 800644a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	b2da      	uxtb	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_PCD_EP_ClrStall+0x86>
 800646e:	2302      	movs	r3, #2
 8006470:	e00e      	b.n	8006490 <HAL_PCD_EP_ClrStall+0xa4>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	4618      	mov	r0, r3
 8006482:	f007 f839 	bl	800d4f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af02      	add	r7, sp, #8
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	4613      	mov	r3, r2
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	3338      	adds	r3, #56	; 0x38
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	4413      	add	r3, r2
 80064bc:	3304      	adds	r3, #4
 80064be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d901      	bls.n	80064d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e06c      	b.n	80065aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d902      	bls.n	80064ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	3303      	adds	r3, #3
 80064f0:	089b      	lsrs	r3, r3, #2
 80064f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064f4:	e02b      	b.n	800654e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	429a      	cmp	r2, r3
 800650a:	d902      	bls.n	8006512 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	3303      	adds	r3, #3
 8006516:	089b      	lsrs	r3, r3, #2
 8006518:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	68d9      	ldr	r1, [r3, #12]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	b2da      	uxtb	r2, r3
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800652a:	b2db      	uxtb	r3, r3
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	4603      	mov	r3, r0
 8006530:	6978      	ldr	r0, [r7, #20]
 8006532:	f006 fedd 	bl	800d2f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	441a      	add	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	441a      	add	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	b29b      	uxth	r3, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	429a      	cmp	r2, r3
 8006562:	d809      	bhi.n	8006578 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	699a      	ldr	r2, [r3, #24]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800656c:	429a      	cmp	r2, r3
 800656e:	d203      	bcs.n	8006578 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1be      	bne.n	80064f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	695a      	ldr	r2, [r3, #20]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	429a      	cmp	r2, r3
 8006582:	d811      	bhi.n	80065a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	2201      	movs	r2, #1
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	43db      	mvns	r3, r3
 800659e:	6939      	ldr	r1, [r7, #16]
 80065a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a4:	4013      	ands	r3, r2
 80065a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	333c      	adds	r3, #60	; 0x3c
 80065cc:	3304      	adds	r3, #4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	f040 80a0 	bne.w	800672c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d015      	beq.n	8006622 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4a72      	ldr	r2, [pc, #456]	; (80067c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	f240 80dd 	bls.w	80067ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 80d7 	beq.w	80067ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006618:	461a      	mov	r2, r3
 800661a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661e:	6093      	str	r3, [r2, #8]
 8006620:	e0cb      	b.n	80067ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006638:	461a      	mov	r2, r3
 800663a:	2320      	movs	r3, #32
 800663c:	6093      	str	r3, [r2, #8]
 800663e:	e0bc      	b.n	80067ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006646:	2b00      	cmp	r3, #0
 8006648:	f040 80b7 	bne.w	80067ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a5d      	ldr	r2, [pc, #372]	; (80067c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d90f      	bls.n	8006674 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	461a      	mov	r2, r3
 800666c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006670:	6093      	str	r3, [r2, #8]
 8006672:	e0a2      	b.n	80067ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006686:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	0159      	lsls	r1, r3, #5
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	440b      	add	r3, r1
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800669a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4403      	add	r3, r0
 80066aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80066ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	1a9b      	subs	r3, r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066c2:	6819      	ldr	r1, [r3, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4613      	mov	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4403      	add	r3, r0
 80066d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4419      	add	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4403      	add	r3, r0
 80066e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d114      	bne.n	800671e <PCD_EP_OutXfrComplete_int+0x16a>
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	4613      	mov	r3, r2
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	1a9b      	subs	r3, r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	440b      	add	r3, r1
 8006702:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d108      	bne.n	800671e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006716:	461a      	mov	r2, r3
 8006718:	2101      	movs	r1, #1
 800671a:	f007 f881 	bl	800d820 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f009 f83d 	bl	800f7a4 <HAL_PCD_DataOutStageCallback>
 800672a:	e046      	b.n	80067ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a26      	ldr	r2, [pc, #152]	; (80067c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d124      	bne.n	800677e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	461a      	mov	r2, r3
 800674c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006750:	6093      	str	r3, [r2, #8]
 8006752:	e032      	b.n	80067ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d008      	beq.n	8006770 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	461a      	mov	r2, r3
 800676c:	2320      	movs	r3, #32
 800676e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f009 f814 	bl	800f7a4 <HAL_PCD_DataOutStageCallback>
 800677c:	e01d      	b.n	80067ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d114      	bne.n	80067ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	1a9b      	subs	r3, r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	440b      	add	r3, r1
 8006792:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d108      	bne.n	80067ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6818      	ldr	r0, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067a6:	461a      	mov	r2, r3
 80067a8:	2100      	movs	r1, #0
 80067aa:	f007 f839 	bl	800d820 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f008 fff5 	bl	800f7a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	4f54300a 	.word	0x4f54300a
 80067c8:	4f54310a 	.word	0x4f54310a

080067cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	333c      	adds	r3, #60	; 0x3c
 80067e4:	3304      	adds	r3, #4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4a15      	ldr	r2, [pc, #84]	; (8006854 <PCD_EP_OutSetupPacket_int+0x88>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d90e      	bls.n	8006820 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006808:	2b00      	cmp	r3, #0
 800680a:	d009      	beq.n	8006820 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006818:	461a      	mov	r2, r3
 800681a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800681e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f008 ffad 	bl	800f780 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4a0a      	ldr	r2, [pc, #40]	; (8006854 <PCD_EP_OutSetupPacket_int+0x88>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d90c      	bls.n	8006848 <PCD_EP_OutSetupPacket_int+0x7c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d108      	bne.n	8006848 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006840:	461a      	mov	r2, r3
 8006842:	2101      	movs	r1, #1
 8006844:	f006 ffec 	bl	800d820 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	4f54300a 	.word	0x4f54300a

08006858 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
 8006864:	4613      	mov	r3, r2
 8006866:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d107      	bne.n	8006886 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006876:	883b      	ldrh	r3, [r7, #0]
 8006878:	0419      	lsls	r1, r3, #16
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	430a      	orrs	r2, r1
 8006882:	629a      	str	r2, [r3, #40]	; 0x28
 8006884:	e028      	b.n	80068d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	0c1b      	lsrs	r3, r3, #16
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	4413      	add	r3, r2
 8006892:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006894:	2300      	movs	r3, #0
 8006896:	73fb      	strb	r3, [r7, #15]
 8006898:	e00d      	b.n	80068b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	3340      	adds	r3, #64	; 0x40
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	0c1b      	lsrs	r3, r3, #16
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	4413      	add	r3, r2
 80068ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	3301      	adds	r3, #1
 80068b4:	73fb      	strb	r3, [r7, #15]
 80068b6:	7bfa      	ldrb	r2, [r7, #15]
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	429a      	cmp	r2, r3
 80068be:	d3ec      	bcc.n	800689a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80068c0:	883b      	ldrh	r3, [r7, #0]
 80068c2:	0418      	lsls	r0, r3, #16
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6819      	ldr	r1, [r3, #0]
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	4302      	orrs	r2, r0
 80068d0:	3340      	adds	r3, #64	; 0x40
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	440b      	add	r3, r1
 80068d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	887a      	ldrh	r2, [r7, #2]
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <HAL_PCDEx_ActivateLPM+0x44>)
 8006938:	4313      	orrs	r3, r2
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	10000003 	.word	0x10000003

08006950 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006970:	4b29      	ldr	r3, [pc, #164]	; (8006a18 <HAL_PWREx_ConfigSupply+0xb0>)
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	2b06      	cmp	r3, #6
 800697a:	d00a      	beq.n	8006992 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800697c:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <HAL_PWREx_ConfigSupply+0xb0>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	429a      	cmp	r2, r3
 8006988:	d001      	beq.n	800698e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e040      	b.n	8006a10 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e03e      	b.n	8006a10 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006992:	4b21      	ldr	r3, [pc, #132]	; (8006a18 <HAL_PWREx_ConfigSupply+0xb0>)
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800699a:	491f      	ldr	r1, [pc, #124]	; (8006a18 <HAL_PWREx_ConfigSupply+0xb0>)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069a2:	f7fb f857 	bl	8001a54 <HAL_GetTick>
 80069a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069a8:	e009      	b.n	80069be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069aa:	f7fb f853 	bl	8001a54 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b8:	d901      	bls.n	80069be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e028      	b.n	8006a10 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069be:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <HAL_PWREx_ConfigSupply+0xb0>)
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ca:	d1ee      	bne.n	80069aa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b1e      	cmp	r3, #30
 80069d0:	d008      	beq.n	80069e4 <HAL_PWREx_ConfigSupply+0x7c>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b2e      	cmp	r3, #46	; 0x2e
 80069d6:	d005      	beq.n	80069e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b1d      	cmp	r3, #29
 80069dc:	d002      	beq.n	80069e4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b2d      	cmp	r3, #45	; 0x2d
 80069e2:	d114      	bne.n	8006a0e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80069e4:	f7fb f836 	bl	8001a54 <HAL_GetTick>
 80069e8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80069ea:	e009      	b.n	8006a00 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069ec:	f7fb f832 	bl	8001a54 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069fa:	d901      	bls.n	8006a00 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e007      	b.n	8006a10 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006a00:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0c:	d1ee      	bne.n	80069ec <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	58024800 	.word	0x58024800

08006a1c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a04      	ldr	r2, [pc, #16]	; (8006a38 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	60d3      	str	r3, [r2, #12]
}
 8006a2c:	bf00      	nop
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	58024800 	.word	0x58024800

08006a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e3fd      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 8087 	beq.w	8006b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a5c:	4b99      	ldr	r3, [pc, #612]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a66:	4b97      	ldr	r3, [pc, #604]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	2b10      	cmp	r3, #16
 8006a70:	d007      	beq.n	8006a82 <HAL_RCC_OscConfig+0x46>
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	2b18      	cmp	r3, #24
 8006a76:	d110      	bne.n	8006a9a <HAL_RCC_OscConfig+0x5e>
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d10b      	bne.n	8006a9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a82:	4b90      	ldr	r3, [pc, #576]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d06c      	beq.n	8006b68 <HAL_RCC_OscConfig+0x12c>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d168      	bne.n	8006b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e3d7      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa2:	d106      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x76>
 8006aa4:	4b87      	ldr	r3, [pc, #540]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a86      	ldr	r2, [pc, #536]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e02e      	b.n	8006b10 <HAL_RCC_OscConfig+0xd4>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x98>
 8006aba:	4b82      	ldr	r3, [pc, #520]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a81      	ldr	r2, [pc, #516]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b7f      	ldr	r3, [pc, #508]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a7e      	ldr	r2, [pc, #504]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	e01d      	b.n	8006b10 <HAL_RCC_OscConfig+0xd4>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006adc:	d10c      	bne.n	8006af8 <HAL_RCC_OscConfig+0xbc>
 8006ade:	4b79      	ldr	r3, [pc, #484]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a78      	ldr	r2, [pc, #480]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	4b76      	ldr	r3, [pc, #472]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a75      	ldr	r2, [pc, #468]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e00b      	b.n	8006b10 <HAL_RCC_OscConfig+0xd4>
 8006af8:	4b72      	ldr	r3, [pc, #456]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a71      	ldr	r2, [pc, #452]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	4b6f      	ldr	r3, [pc, #444]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a6e      	ldr	r2, [pc, #440]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d013      	beq.n	8006b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b18:	f7fa ff9c 	bl	8001a54 <HAL_GetTick>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b20:	f7fa ff98 	bl	8001a54 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b64      	cmp	r3, #100	; 0x64
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e38b      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b32:	4b64      	ldr	r3, [pc, #400]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f0      	beq.n	8006b20 <HAL_RCC_OscConfig+0xe4>
 8006b3e:	e014      	b.n	8006b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b40:	f7fa ff88 	bl	8001a54 <HAL_GetTick>
 8006b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b48:	f7fa ff84 	bl	8001a54 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b64      	cmp	r3, #100	; 0x64
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e377      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b5a:	4b5a      	ldr	r3, [pc, #360]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x10c>
 8006b66:	e000      	b.n	8006b6a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80ae 	beq.w	8006cd4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b78:	4b52      	ldr	r3, [pc, #328]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b82:	4b50      	ldr	r3, [pc, #320]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b88:	6a3b      	ldr	r3, [r7, #32]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <HAL_RCC_OscConfig+0x162>
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	2b18      	cmp	r3, #24
 8006b92:	d13a      	bne.n	8006c0a <HAL_RCC_OscConfig+0x1ce>
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d135      	bne.n	8006c0a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b9e:	4b49      	ldr	r3, [pc, #292]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x17a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e349      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb6:	f7fa ff7d 	bl	8001ab4 <HAL_GetREVID>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d817      	bhi.n	8006bf4 <HAL_RCC_OscConfig+0x1b8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d108      	bne.n	8006bde <HAL_RCC_OscConfig+0x1a2>
 8006bcc:	4b3d      	ldr	r3, [pc, #244]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006bd4:	4a3b      	ldr	r2, [pc, #236]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bda:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bdc:	e07a      	b.n	8006cd4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bde:	4b39      	ldr	r3, [pc, #228]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	031b      	lsls	r3, r3, #12
 8006bec:	4935      	ldr	r1, [pc, #212]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bf2:	e06f      	b.n	8006cd4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf4:	4b33      	ldr	r3, [pc, #204]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	061b      	lsls	r3, r3, #24
 8006c02:	4930      	ldr	r1, [pc, #192]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c08:	e064      	b.n	8006cd4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d045      	beq.n	8006c9e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c12:	4b2c      	ldr	r3, [pc, #176]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f023 0219 	bic.w	r2, r3, #25
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	4929      	ldr	r1, [pc, #164]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fa ff16 	bl	8001a54 <HAL_GetTick>
 8006c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c2c:	f7fa ff12 	bl	8001a54 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e305      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c3e:	4b21      	ldr	r3, [pc, #132]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4a:	f7fa ff33 	bl	8001ab4 <HAL_GetREVID>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d817      	bhi.n	8006c88 <HAL_RCC_OscConfig+0x24c>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	d108      	bne.n	8006c72 <HAL_RCC_OscConfig+0x236>
 8006c60:	4b18      	ldr	r3, [pc, #96]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c68:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6e:	6053      	str	r3, [r2, #4]
 8006c70:	e030      	b.n	8006cd4 <HAL_RCC_OscConfig+0x298>
 8006c72:	4b14      	ldr	r3, [pc, #80]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	031b      	lsls	r3, r3, #12
 8006c80:	4910      	ldr	r1, [pc, #64]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	604b      	str	r3, [r1, #4]
 8006c86:	e025      	b.n	8006cd4 <HAL_RCC_OscConfig+0x298>
 8006c88:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	061b      	lsls	r3, r3, #24
 8006c96:	490b      	ldr	r1, [pc, #44]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	604b      	str	r3, [r1, #4]
 8006c9c:	e01a      	b.n	8006cd4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c9e:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a08      	ldr	r2, [pc, #32]	; (8006cc4 <HAL_RCC_OscConfig+0x288>)
 8006ca4:	f023 0301 	bic.w	r3, r3, #1
 8006ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006caa:	f7fa fed3 	bl	8001a54 <HAL_GetTick>
 8006cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cb0:	e00a      	b.n	8006cc8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cb2:	f7fa fecf 	bl	8001a54 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d903      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e2c2      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
 8006cc4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cc8:	4b94      	ldr	r3, [pc, #592]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1ee      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80a9 	beq.w	8006e34 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ce2:	4b8e      	ldr	r3, [pc, #568]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cec:	4b8b      	ldr	r3, [pc, #556]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d007      	beq.n	8006d08 <HAL_RCC_OscConfig+0x2cc>
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b18      	cmp	r3, #24
 8006cfc:	d13a      	bne.n	8006d74 <HAL_RCC_OscConfig+0x338>
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d135      	bne.n	8006d74 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d08:	4b84      	ldr	r3, [pc, #528]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <HAL_RCC_OscConfig+0x2e4>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	2b80      	cmp	r3, #128	; 0x80
 8006d1a:	d001      	beq.n	8006d20 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e294      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d20:	f7fa fec8 	bl	8001ab4 <HAL_GetREVID>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d817      	bhi.n	8006d5e <HAL_RCC_OscConfig+0x322>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d108      	bne.n	8006d48 <HAL_RCC_OscConfig+0x30c>
 8006d36:	4b79      	ldr	r3, [pc, #484]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d3e:	4a77      	ldr	r2, [pc, #476]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d44:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d46:	e075      	b.n	8006e34 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d48:	4b74      	ldr	r3, [pc, #464]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	069b      	lsls	r3, r3, #26
 8006d56:	4971      	ldr	r1, [pc, #452]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d5c:	e06a      	b.n	8006e34 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d5e:	4b6f      	ldr	r3, [pc, #444]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	061b      	lsls	r3, r3, #24
 8006d6c:	496b      	ldr	r1, [pc, #428]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d72:	e05f      	b.n	8006e34 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d042      	beq.n	8006e02 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006d7c:	4b67      	ldr	r3, [pc, #412]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a66      	ldr	r2, [pc, #408]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d88:	f7fa fe64 	bl	8001a54 <HAL_GetTick>
 8006d8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006d90:	f7fa fe60 	bl	8001a54 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e253      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006da2:	4b5e      	ldr	r3, [pc, #376]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0f0      	beq.n	8006d90 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dae:	f7fa fe81 	bl	8001ab4 <HAL_GetREVID>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d817      	bhi.n	8006dec <HAL_RCC_OscConfig+0x3b0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d108      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x39a>
 8006dc4:	4b55      	ldr	r3, [pc, #340]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006dcc:	4a53      	ldr	r2, [pc, #332]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006dce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dd2:	6053      	str	r3, [r2, #4]
 8006dd4:	e02e      	b.n	8006e34 <HAL_RCC_OscConfig+0x3f8>
 8006dd6:	4b51      	ldr	r3, [pc, #324]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	069b      	lsls	r3, r3, #26
 8006de4:	494d      	ldr	r1, [pc, #308]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	604b      	str	r3, [r1, #4]
 8006dea:	e023      	b.n	8006e34 <HAL_RCC_OscConfig+0x3f8>
 8006dec:	4b4b      	ldr	r3, [pc, #300]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	061b      	lsls	r3, r3, #24
 8006dfa:	4948      	ldr	r1, [pc, #288]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60cb      	str	r3, [r1, #12]
 8006e00:	e018      	b.n	8006e34 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e02:	4b46      	ldr	r3, [pc, #280]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a45      	ldr	r2, [pc, #276]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0e:	f7fa fe21 	bl	8001a54 <HAL_GetTick>
 8006e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e16:	f7fa fe1d 	bl	8001a54 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e210      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e28:	4b3c      	ldr	r3, [pc, #240]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f0      	bne.n	8006e16 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d036      	beq.n	8006eae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d019      	beq.n	8006e7c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e48:	4b34      	ldr	r3, [pc, #208]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4c:	4a33      	ldr	r2, [pc, #204]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e54:	f7fa fdfe 	bl	8001a54 <HAL_GetTick>
 8006e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e5c:	f7fa fdfa 	bl	8001a54 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e1ed      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e6e:	4b2b      	ldr	r3, [pc, #172]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f0      	beq.n	8006e5c <HAL_RCC_OscConfig+0x420>
 8006e7a:	e018      	b.n	8006eae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e7c:	4b27      	ldr	r3, [pc, #156]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e80:	4a26      	ldr	r2, [pc, #152]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e88:	f7fa fde4 	bl	8001a54 <HAL_GetTick>
 8006e8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e90:	f7fa fde0 	bl	8001a54 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e1d3      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ea2:	4b1e      	ldr	r3, [pc, #120]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f0      	bne.n	8006e90 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d038      	beq.n	8006f2c <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d019      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ec2:	4b16      	ldr	r3, [pc, #88]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006ec8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ecc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ece:	f7fa fdc1 	bl	8001a54 <HAL_GetTick>
 8006ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ed6:	f7fa fdbd 	bl	8001a54 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e1b0      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ee8:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d0f0      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x49a>
 8006ef4:	e01a      	b.n	8006f2c <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <HAL_RCC_OscConfig+0x4e0>)
 8006efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f02:	f7fa fda7 	bl	8001a54 <HAL_GetTick>
 8006f06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f08:	e00a      	b.n	8006f20 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f0a:	f7fa fda3 	bl	8001a54 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d903      	bls.n	8006f20 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e196      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
 8006f1c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f20:	4b99      	ldr	r3, [pc, #612]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1ee      	bne.n	8006f0a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8081 	beq.w	800703c <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f3a:	4b94      	ldr	r3, [pc, #592]	; (800718c <HAL_RCC_OscConfig+0x750>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a93      	ldr	r2, [pc, #588]	; (800718c <HAL_RCC_OscConfig+0x750>)
 8006f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f46:	f7fa fd85 	bl	8001a54 <HAL_GetTick>
 8006f4a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f4e:	f7fa fd81 	bl	8001a54 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b64      	cmp	r3, #100	; 0x64
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e174      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f60:	4b8a      	ldr	r3, [pc, #552]	; (800718c <HAL_RCC_OscConfig+0x750>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d106      	bne.n	8006f82 <HAL_RCC_OscConfig+0x546>
 8006f74:	4b84      	ldr	r3, [pc, #528]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	4a83      	ldr	r2, [pc, #524]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006f7a:	f043 0301 	orr.w	r3, r3, #1
 8006f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f80:	e02d      	b.n	8006fde <HAL_RCC_OscConfig+0x5a2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10c      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x568>
 8006f8a:	4b7f      	ldr	r3, [pc, #508]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8e:	4a7e      	ldr	r2, [pc, #504]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	6713      	str	r3, [r2, #112]	; 0x70
 8006f96:	4b7c      	ldr	r3, [pc, #496]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9a:	4a7b      	ldr	r2, [pc, #492]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006f9c:	f023 0304 	bic.w	r3, r3, #4
 8006fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8006fa2:	e01c      	b.n	8006fde <HAL_RCC_OscConfig+0x5a2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b05      	cmp	r3, #5
 8006faa:	d10c      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x58a>
 8006fac:	4b76      	ldr	r3, [pc, #472]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb0:	4a75      	ldr	r2, [pc, #468]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fb2:	f043 0304 	orr.w	r3, r3, #4
 8006fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fb8:	4b73      	ldr	r3, [pc, #460]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbc:	4a72      	ldr	r2, [pc, #456]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fbe:	f043 0301 	orr.w	r3, r3, #1
 8006fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc4:	e00b      	b.n	8006fde <HAL_RCC_OscConfig+0x5a2>
 8006fc6:	4b70      	ldr	r3, [pc, #448]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fca:	4a6f      	ldr	r2, [pc, #444]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fcc:	f023 0301 	bic.w	r3, r3, #1
 8006fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd2:	4b6d      	ldr	r3, [pc, #436]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	4a6c      	ldr	r2, [pc, #432]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8006fd8:	f023 0304 	bic.w	r3, r3, #4
 8006fdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d015      	beq.n	8007012 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe6:	f7fa fd35 	bl	8001a54 <HAL_GetTick>
 8006fea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fec:	e00a      	b.n	8007004 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fee:	f7fa fd31 	bl	8001a54 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e122      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007004:	4b60      	ldr	r3, [pc, #384]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0ee      	beq.n	8006fee <HAL_RCC_OscConfig+0x5b2>
 8007010:	e014      	b.n	800703c <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007012:	f7fa fd1f 	bl	8001a54 <HAL_GetTick>
 8007016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007018:	e00a      	b.n	8007030 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800701a:	f7fa fd1b 	bl	8001a54 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	f241 3288 	movw	r2, #5000	; 0x1388
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e10c      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007030:	4b55      	ldr	r3, [pc, #340]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1ee      	bne.n	800701a <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8101 	beq.w	8007248 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007046:	4b50      	ldr	r3, [pc, #320]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800704e:	2b18      	cmp	r3, #24
 8007050:	f000 80bc 	beq.w	80071cc <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	2b02      	cmp	r3, #2
 800705a:	f040 809d 	bne.w	8007198 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800705e:	4b4a      	ldr	r3, [pc, #296]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a49      	ldr	r2, [pc, #292]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706a:	f7fa fcf3 	bl	8001a54 <HAL_GetTick>
 800706e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007070:	e008      	b.n	8007084 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007072:	f7fa fcef 	bl	8001a54 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b02      	cmp	r3, #2
 800707e:	d901      	bls.n	8007084 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e0e2      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007084:	4b40      	ldr	r3, [pc, #256]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1f0      	bne.n	8007072 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007090:	4b3d      	ldr	r3, [pc, #244]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007094:	4b3e      	ldr	r3, [pc, #248]	; (8007190 <HAL_RCC_OscConfig+0x754>)
 8007096:	4013      	ands	r3, r2
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070a0:	0112      	lsls	r2, r2, #4
 80070a2:	430a      	orrs	r2, r1
 80070a4:	4938      	ldr	r1, [pc, #224]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	628b      	str	r3, [r1, #40]	; 0x28
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	3b01      	subs	r3, #1
 80070b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b8:	3b01      	subs	r3, #1
 80070ba:	025b      	lsls	r3, r3, #9
 80070bc:	b29b      	uxth	r3, r3
 80070be:	431a      	orrs	r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	3b01      	subs	r3, #1
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d2:	3b01      	subs	r3, #1
 80070d4:	061b      	lsls	r3, r3, #24
 80070d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070da:	492b      	ldr	r1, [pc, #172]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80070e0:	4b29      	ldr	r3, [pc, #164]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	4a28      	ldr	r2, [pc, #160]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070e6:	f023 0301 	bic.w	r3, r3, #1
 80070ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070ec:	4b26      	ldr	r3, [pc, #152]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f0:	4b28      	ldr	r3, [pc, #160]	; (8007194 <HAL_RCC_OscConfig+0x758>)
 80070f2:	4013      	ands	r3, r2
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070f8:	00d2      	lsls	r2, r2, #3
 80070fa:	4923      	ldr	r1, [pc, #140]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007100:	4b21      	ldr	r3, [pc, #132]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	f023 020c 	bic.w	r2, r3, #12
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	491e      	ldr	r1, [pc, #120]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800710e:	4313      	orrs	r3, r2
 8007110:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007112:	4b1d      	ldr	r3, [pc, #116]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	f023 0202 	bic.w	r2, r3, #2
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	491a      	ldr	r1, [pc, #104]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007120:	4313      	orrs	r3, r2
 8007122:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007124:	4b18      	ldr	r3, [pc, #96]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	4a17      	ldr	r2, [pc, #92]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800712a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800712e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007130:	4b15      	ldr	r3, [pc, #84]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	4a14      	ldr	r2, [pc, #80]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800713a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800713c:	4b12      	ldr	r3, [pc, #72]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	4a11      	ldr	r2, [pc, #68]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714c:	4a0e      	ldr	r2, [pc, #56]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a0b      	ldr	r2, [pc, #44]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800715a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800715e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fa fc78 	bl	8001a54 <HAL_GetTick>
 8007164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007168:	f7fa fc74 	bl	8001a54 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e067      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800717a:	4b03      	ldr	r3, [pc, #12]	; (8007188 <HAL_RCC_OscConfig+0x74c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0x72c>
 8007186:	e05f      	b.n	8007248 <HAL_RCC_OscConfig+0x80c>
 8007188:	58024400 	.word	0x58024400
 800718c:	58024800 	.word	0x58024800
 8007190:	fffffc0c 	.word	0xfffffc0c
 8007194:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007198:	4b2e      	ldr	r3, [pc, #184]	; (8007254 <HAL_RCC_OscConfig+0x818>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a2d      	ldr	r2, [pc, #180]	; (8007254 <HAL_RCC_OscConfig+0x818>)
 800719e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a4:	f7fa fc56 	bl	8001a54 <HAL_GetTick>
 80071a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071aa:	e008      	b.n	80071be <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ac:	f7fa fc52 	bl	8001a54 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e045      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071be:	4b25      	ldr	r3, [pc, #148]	; (8007254 <HAL_RCC_OscConfig+0x818>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1f0      	bne.n	80071ac <HAL_RCC_OscConfig+0x770>
 80071ca:	e03d      	b.n	8007248 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071cc:	4b21      	ldr	r3, [pc, #132]	; (8007254 <HAL_RCC_OscConfig+0x818>)
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071d2:	4b20      	ldr	r3, [pc, #128]	; (8007254 <HAL_RCC_OscConfig+0x818>)
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d031      	beq.n	8007244 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f003 0203 	and.w	r2, r3, #3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d12a      	bne.n	8007244 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	091b      	lsrs	r3, r3, #4
 80071f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d122      	bne.n	8007244 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007208:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800720a:	429a      	cmp	r2, r3
 800720c:	d11a      	bne.n	8007244 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	0a5b      	lsrs	r3, r3, #9
 8007212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800721c:	429a      	cmp	r2, r3
 800721e:	d111      	bne.n	8007244 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	0c1b      	lsrs	r3, r3, #16
 8007224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800722e:	429a      	cmp	r2, r3
 8007230:	d108      	bne.n	8007244 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	0e1b      	lsrs	r3, r3, #24
 8007236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007240:	429a      	cmp	r2, r3
 8007242:	d001      	beq.n	8007248 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3730      	adds	r7, #48	; 0x30
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	58024400 	.word	0x58024400

08007258 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e19c      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800726c:	4b8a      	ldr	r3, [pc, #552]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 030f 	and.w	r3, r3, #15
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d910      	bls.n	800729c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727a:	4b87      	ldr	r3, [pc, #540]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 020f 	bic.w	r2, r3, #15
 8007282:	4985      	ldr	r1, [pc, #532]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	4313      	orrs	r3, r2
 8007288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800728a:	4b83      	ldr	r3, [pc, #524]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d001      	beq.n	800729c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e184      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d010      	beq.n	80072ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	4b7b      	ldr	r3, [pc, #492]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d908      	bls.n	80072ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072b8:	4b78      	ldr	r3, [pc, #480]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	4975      	ldr	r1, [pc, #468]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d010      	beq.n	80072f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	4b70      	ldr	r3, [pc, #448]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d908      	bls.n	80072f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072e6:	4b6d      	ldr	r3, [pc, #436]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	496a      	ldr	r1, [pc, #424]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d010      	beq.n	8007326 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699a      	ldr	r2, [r3, #24]
 8007308:	4b64      	ldr	r3, [pc, #400]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007310:	429a      	cmp	r2, r3
 8007312:	d908      	bls.n	8007326 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007314:	4b61      	ldr	r3, [pc, #388]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	495e      	ldr	r1, [pc, #376]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007322:	4313      	orrs	r3, r2
 8007324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b00      	cmp	r3, #0
 8007330:	d010      	beq.n	8007354 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	4b59      	ldr	r3, [pc, #356]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800733e:	429a      	cmp	r2, r3
 8007340:	d908      	bls.n	8007354 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007342:	4b56      	ldr	r3, [pc, #344]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	4953      	ldr	r1, [pc, #332]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007350:	4313      	orrs	r3, r2
 8007352:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d010      	beq.n	8007382 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	4b4d      	ldr	r3, [pc, #308]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	429a      	cmp	r2, r3
 800736e:	d908      	bls.n	8007382 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007370:	4b4a      	ldr	r3, [pc, #296]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	f023 020f 	bic.w	r2, r3, #15
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	4947      	ldr	r1, [pc, #284]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800737e:	4313      	orrs	r3, r2
 8007380:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d055      	beq.n	800743a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800738e:	4b43      	ldr	r3, [pc, #268]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	4940      	ldr	r1, [pc, #256]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800739c:	4313      	orrs	r3, r2
 800739e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d107      	bne.n	80073b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073a8:	4b3c      	ldr	r3, [pc, #240]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d121      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e0f6      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d107      	bne.n	80073d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073c0:	4b36      	ldr	r3, [pc, #216]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d115      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0ea      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d107      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073d8:	4b30      	ldr	r3, [pc, #192]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0de      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073e8:	4b2c      	ldr	r3, [pc, #176]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0d6      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80073f8:	4b28      	ldr	r3, [pc, #160]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	f023 0207 	bic.w	r2, r3, #7
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4925      	ldr	r1, [pc, #148]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007406:	4313      	orrs	r3, r2
 8007408:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800740a:	f7fa fb23 	bl	8001a54 <HAL_GetTick>
 800740e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007410:	e00a      	b.n	8007428 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007412:	f7fa fb1f 	bl	8001a54 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007420:	4293      	cmp	r3, r2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e0be      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	429a      	cmp	r2, r3
 8007438:	d1eb      	bne.n	8007412 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d010      	beq.n	8007468 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	4b14      	ldr	r3, [pc, #80]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f003 030f 	and.w	r3, r3, #15
 8007452:	429a      	cmp	r2, r3
 8007454:	d208      	bcs.n	8007468 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007456:	4b11      	ldr	r3, [pc, #68]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f023 020f 	bic.w	r2, r3, #15
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	490e      	ldr	r1, [pc, #56]	; (800749c <HAL_RCC_ClockConfig+0x244>)
 8007464:	4313      	orrs	r3, r2
 8007466:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007468:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d214      	bcs.n	80074a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007476:	4b08      	ldr	r3, [pc, #32]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 020f 	bic.w	r2, r3, #15
 800747e:	4906      	ldr	r1, [pc, #24]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	4313      	orrs	r3, r2
 8007484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007486:	4b04      	ldr	r3, [pc, #16]	; (8007498 <HAL_RCC_ClockConfig+0x240>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d005      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e086      	b.n	80075a6 <HAL_RCC_ClockConfig+0x34e>
 8007498:	52002000 	.word	0x52002000
 800749c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d010      	beq.n	80074ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	4b3f      	ldr	r3, [pc, #252]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d208      	bcs.n	80074ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074bc:	4b3c      	ldr	r3, [pc, #240]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	4939      	ldr	r1, [pc, #228]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d010      	beq.n	80074fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	695a      	ldr	r2, [r3, #20]
 80074de:	4b34      	ldr	r3, [pc, #208]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d208      	bcs.n	80074fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074ea:	4b31      	ldr	r3, [pc, #196]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	492e      	ldr	r1, [pc, #184]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0310 	and.w	r3, r3, #16
 8007504:	2b00      	cmp	r3, #0
 8007506:	d010      	beq.n	800752a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	4b28      	ldr	r3, [pc, #160]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007514:	429a      	cmp	r2, r3
 8007516:	d208      	bcs.n	800752a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007518:	4b25      	ldr	r3, [pc, #148]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	4922      	ldr	r1, [pc, #136]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007526:	4313      	orrs	r3, r2
 8007528:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d010      	beq.n	8007558 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	4b1d      	ldr	r3, [pc, #116]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007542:	429a      	cmp	r2, r3
 8007544:	d208      	bcs.n	8007558 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007546:	4b1a      	ldr	r3, [pc, #104]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	4917      	ldr	r1, [pc, #92]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007554:	4313      	orrs	r3, r2
 8007556:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007558:	f000 f834 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 800755c:	4602      	mov	r2, r0
 800755e:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	f003 030f 	and.w	r3, r3, #15
 8007568:	4912      	ldr	r1, [pc, #72]	; (80075b4 <HAL_RCC_ClockConfig+0x35c>)
 800756a:	5ccb      	ldrb	r3, [r1, r3]
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
 8007574:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007576:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <HAL_RCC_ClockConfig+0x358>)
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f003 030f 	and.w	r3, r3, #15
 800757e:	4a0d      	ldr	r2, [pc, #52]	; (80075b4 <HAL_RCC_ClockConfig+0x35c>)
 8007580:	5cd3      	ldrb	r3, [r2, r3]
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <HAL_RCC_ClockConfig+0x360>)
 800758e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007590:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <HAL_RCC_ClockConfig+0x364>)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007596:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <HAL_RCC_ClockConfig+0x368>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f7fa fa10 	bl	80019c0 <HAL_InitTick>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	58024400 	.word	0x58024400
 80075b4:	08012690 	.word	0x08012690
 80075b8:	24000004 	.word	0x24000004
 80075bc:	24000000 	.word	0x24000000
 80075c0:	24000008 	.word	0x24000008

080075c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b089      	sub	sp, #36	; 0x24
 80075c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075ca:	4bb3      	ldr	r3, [pc, #716]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075d2:	2b18      	cmp	r3, #24
 80075d4:	f200 8155 	bhi.w	8007882 <HAL_RCC_GetSysClockFreq+0x2be>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	08007645 	.word	0x08007645
 80075e4:	08007883 	.word	0x08007883
 80075e8:	08007883 	.word	0x08007883
 80075ec:	08007883 	.word	0x08007883
 80075f0:	08007883 	.word	0x08007883
 80075f4:	08007883 	.word	0x08007883
 80075f8:	08007883 	.word	0x08007883
 80075fc:	08007883 	.word	0x08007883
 8007600:	0800766b 	.word	0x0800766b
 8007604:	08007883 	.word	0x08007883
 8007608:	08007883 	.word	0x08007883
 800760c:	08007883 	.word	0x08007883
 8007610:	08007883 	.word	0x08007883
 8007614:	08007883 	.word	0x08007883
 8007618:	08007883 	.word	0x08007883
 800761c:	08007883 	.word	0x08007883
 8007620:	08007671 	.word	0x08007671
 8007624:	08007883 	.word	0x08007883
 8007628:	08007883 	.word	0x08007883
 800762c:	08007883 	.word	0x08007883
 8007630:	08007883 	.word	0x08007883
 8007634:	08007883 	.word	0x08007883
 8007638:	08007883 	.word	0x08007883
 800763c:	08007883 	.word	0x08007883
 8007640:	08007677 	.word	0x08007677
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007644:	4b94      	ldr	r3, [pc, #592]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007650:	4b91      	ldr	r3, [pc, #580]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	08db      	lsrs	r3, r3, #3
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	4a90      	ldr	r2, [pc, #576]	; (800789c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800765c:	fa22 f303 	lsr.w	r3, r2, r3
 8007660:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007662:	e111      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007664:	4b8d      	ldr	r3, [pc, #564]	; (800789c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007666:	61bb      	str	r3, [r7, #24]
    break;
 8007668:	e10e      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800766a:	4b8d      	ldr	r3, [pc, #564]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800766c:	61bb      	str	r3, [r7, #24]
    break;
 800766e:	e10b      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007670:	4b8c      	ldr	r3, [pc, #560]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007672:	61bb      	str	r3, [r7, #24]
    break;
 8007674:	e108      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007676:	4b88      	ldr	r3, [pc, #544]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007680:	4b85      	ldr	r3, [pc, #532]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	091b      	lsrs	r3, r3, #4
 8007686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800768a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800768c:	4b82      	ldr	r3, [pc, #520]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007696:	4b80      	ldr	r3, [pc, #512]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769a:	08db      	lsrs	r3, r3, #3
 800769c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	fb02 f303 	mul.w	r3, r2, r3
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 80e1 	beq.w	800787c <HAL_RCC_GetSysClockFreq+0x2b8>
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	f000 8083 	beq.w	80077c8 <HAL_RCC_GetSysClockFreq+0x204>
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	f200 80a1 	bhi.w	800780c <HAL_RCC_GetSysClockFreq+0x248>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x114>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d056      	beq.n	8007784 <HAL_RCC_GetSysClockFreq+0x1c0>
 80076d6:	e099      	b.n	800780c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076d8:	4b6f      	ldr	r3, [pc, #444]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d02d      	beq.n	8007740 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076e4:	4b6c      	ldr	r3, [pc, #432]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	08db      	lsrs	r3, r3, #3
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	4a6b      	ldr	r2, [pc, #428]	; (800789c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
 80076f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770e:	4b62      	ldr	r3, [pc, #392]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007722:	eddf 5a61 	vldr	s11, [pc, #388]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800772e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800773e:	e087      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80078ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800774e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007752:	4b51      	ldr	r3, [pc, #324]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007762:	ed97 6a02 	vldr	s12, [r7, #8]
 8007766:	eddf 5a50 	vldr	s11, [pc, #320]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800776a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800776e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800777e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007782:	e065      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80078b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007796:	4b40      	ldr	r3, [pc, #256]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077c6:	e043      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80078b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80077d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077da:	4b2f      	ldr	r3, [pc, #188]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80077ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80077f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800780a:	e021      	b.n	8007850 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007816:	eddf 6a26 	vldr	s13, [pc, #152]	; 80078b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800781a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781e:	4b1e      	ldr	r3, [pc, #120]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007826:	ee07 3a90 	vmov	s15, r3
 800782a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007832:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80078a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800783a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800784e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007850:	4b11      	ldr	r3, [pc, #68]	; (8007898 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	0a5b      	lsrs	r3, r3, #9
 8007856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785a:	3301      	adds	r3, #1
 800785c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	ee07 3a90 	vmov	s15, r3
 8007864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007868:	edd7 6a07 	vldr	s13, [r7, #28]
 800786c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007874:	ee17 3a90 	vmov	r3, s15
 8007878:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800787a:	e005      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	61bb      	str	r3, [r7, #24]
    break;
 8007880:	e002      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007884:	61bb      	str	r3, [r7, #24]
    break;
 8007886:	bf00      	nop
  }

  return sysclockfreq;
 8007888:	69bb      	ldr	r3, [r7, #24]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3724      	adds	r7, #36	; 0x24
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	58024400 	.word	0x58024400
 800789c:	03d09000 	.word	0x03d09000
 80078a0:	003d0900 	.word	0x003d0900
 80078a4:	00f42400 	.word	0x00f42400
 80078a8:	46000000 	.word	0x46000000
 80078ac:	4c742400 	.word	0x4c742400
 80078b0:	4a742400 	.word	0x4a742400
 80078b4:	4b742400 	.word	0x4b742400

080078b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80078be:	f7ff fe81 	bl	80075c4 <HAL_RCC_GetSysClockFreq>
 80078c2:	4602      	mov	r2, r0
 80078c4:	4b10      	ldr	r3, [pc, #64]	; (8007908 <HAL_RCC_GetHCLKFreq+0x50>)
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	f003 030f 	and.w	r3, r3, #15
 80078ce:	490f      	ldr	r1, [pc, #60]	; (800790c <HAL_RCC_GetHCLKFreq+0x54>)
 80078d0:	5ccb      	ldrb	r3, [r1, r3]
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	fa22 f303 	lsr.w	r3, r2, r3
 80078da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078dc:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <HAL_RCC_GetHCLKFreq+0x50>)
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	4a09      	ldr	r2, [pc, #36]	; (800790c <HAL_RCC_GetHCLKFreq+0x54>)
 80078e6:	5cd3      	ldrb	r3, [r2, r3]
 80078e8:	f003 031f 	and.w	r3, r3, #31
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	fa22 f303 	lsr.w	r3, r2, r3
 80078f2:	4a07      	ldr	r2, [pc, #28]	; (8007910 <HAL_RCC_GetHCLKFreq+0x58>)
 80078f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078f6:	4a07      	ldr	r2, [pc, #28]	; (8007914 <HAL_RCC_GetHCLKFreq+0x5c>)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <HAL_RCC_GetHCLKFreq+0x58>)
 80078fe:	681b      	ldr	r3, [r3, #0]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	58024400 	.word	0x58024400
 800790c:	08012690 	.word	0x08012690
 8007910:	24000004 	.word	0x24000004
 8007914:	24000000 	.word	0x24000000

08007918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800791c:	f7ff ffcc 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8007920:	4602      	mov	r2, r0
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	4904      	ldr	r1, [pc, #16]	; (8007940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800792e:	5ccb      	ldrb	r3, [r1, r3]
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	58024400 	.word	0x58024400
 8007940:	08012690 	.word	0x08012690

08007944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007948:	f7ff ffb6 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 800794c:	4602      	mov	r2, r0
 800794e:	4b06      	ldr	r3, [pc, #24]	; (8007968 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	4904      	ldr	r1, [pc, #16]	; (800796c <HAL_RCC_GetPCLK2Freq+0x28>)
 800795a:	5ccb      	ldrb	r3, [r1, r3]
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007964:	4618      	mov	r0, r3
 8007966:	bd80      	pop	{r7, pc}
 8007968:	58024400 	.word	0x58024400
 800796c:	08012690 	.word	0x08012690

08007970 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	223f      	movs	r2, #63	; 0x3f
 800797e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007980:	4b1a      	ldr	r3, [pc, #104]	; (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f003 0207 	and.w	r2, r3, #7
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800798c:	4b17      	ldr	r3, [pc, #92]	; (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007998:	4b14      	ldr	r3, [pc, #80]	; (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f003 020f 	and.w	r2, r3, #15
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80079a4:	4b11      	ldr	r3, [pc, #68]	; (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80079b0:	4b0e      	ldr	r3, [pc, #56]	; (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80079bc:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <HAL_RCC_GetClockConfig+0x7c>)
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80079d4:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <HAL_RCC_GetClockConfig+0x80>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	601a      	str	r2, [r3, #0]
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	58024400 	.word	0x58024400
 80079f0:	52002000 	.word	0x52002000

080079f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079fc:	2300      	movs	r3, #0
 80079fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a00:	2300      	movs	r3, #0
 8007a02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d03f      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a18:	d02a      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007a1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a1e:	d824      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a24:	d018      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a2a:	d81e      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a34:	d007      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a36:	e018      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a38:	4ba3      	ldr	r3, [pc, #652]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4aa2      	ldr	r2, [pc, #648]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a44:	e015      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 f9d5 	bl	8008dfc <RCCEx_PLL2_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a56:	e00c      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3324      	adds	r3, #36	; 0x24
 8007a5c:	2102      	movs	r1, #2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 fa7e 	bl	8008f60 <RCCEx_PLL3_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a68:	e003      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6e:	e000      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a72:	7dfb      	ldrb	r3, [r7, #23]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d109      	bne.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007a78:	4b93      	ldr	r3, [pc, #588]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a84:	4990      	ldr	r1, [pc, #576]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	650b      	str	r3, [r1, #80]	; 0x50
 8007a8a:	e001      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d03d      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d826      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007aa4:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007ac1 	.word	0x08007ac1
 8007ab0:	08007acf 	.word	0x08007acf
 8007ab4:	08007ae1 	.word	0x08007ae1
 8007ab8:	08007af9 	.word	0x08007af9
 8007abc:	08007af9 	.word	0x08007af9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac0:	4b81      	ldr	r3, [pc, #516]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	4a80      	ldr	r2, [pc, #512]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007acc:	e015      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 f991 	bl	8008dfc <RCCEx_PLL2_Config>
 8007ada:	4603      	mov	r3, r0
 8007adc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ade:	e00c      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3324      	adds	r3, #36	; 0x24
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 fa3a 	bl	8008f60 <RCCEx_PLL3_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007af0:	e003      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
      break;
 8007af6:	e000      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d109      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b00:	4b71      	ldr	r3, [pc, #452]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b04:	f023 0207 	bic.w	r2, r3, #7
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0c:	496e      	ldr	r1, [pc, #440]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	650b      	str	r3, [r1, #80]	; 0x50
 8007b12:	e001      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d042      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b2c:	d02b      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b32:	d825      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b34:	2bc0      	cmp	r3, #192	; 0xc0
 8007b36:	d028      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007b38:	2bc0      	cmp	r3, #192	; 0xc0
 8007b3a:	d821      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b3c:	2b80      	cmp	r3, #128	; 0x80
 8007b3e:	d016      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007b40:	2b80      	cmp	r3, #128	; 0x80
 8007b42:	d81d      	bhi.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	d007      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007b4c:	e018      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4e:	4b5e      	ldr	r3, [pc, #376]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	4a5d      	ldr	r2, [pc, #372]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b5a:	e017      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	2100      	movs	r1, #0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 f94a 	bl	8008dfc <RCCEx_PLL2_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b6c:	e00e      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3324      	adds	r3, #36	; 0x24
 8007b72:	2100      	movs	r1, #0
 8007b74:	4618      	mov	r0, r3
 8007b76:	f001 f9f3 	bl	8008f60 <RCCEx_PLL3_Config>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007b7e:	e005      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
      break;
 8007b84:	e002      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b86:	bf00      	nop
 8007b88:	e000      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007b92:	4b4d      	ldr	r3, [pc, #308]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9e:	494a      	ldr	r1, [pc, #296]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	650b      	str	r3, [r1, #80]	; 0x50
 8007ba4:	e001      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d049      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007bbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bc0:	d030      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bc6:	d82a      	bhi.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007bc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bcc:	d02c      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007bce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bd2:	d824      	bhi.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bd8:	d018      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bde:	d81e      	bhi.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007be8:	d007      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007bea:	e018      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bec:	4b36      	ldr	r3, [pc, #216]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf0:	4a35      	ldr	r2, [pc, #212]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bf8:	e017      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	2100      	movs	r1, #0
 8007c00:	4618      	mov	r0, r3
 8007c02:	f001 f8fb 	bl	8008dfc <RCCEx_PLL2_Config>
 8007c06:	4603      	mov	r3, r0
 8007c08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c0a:	e00e      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3324      	adds	r3, #36	; 0x24
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 f9a4 	bl	8008f60 <RCCEx_PLL3_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c1c:	e005      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
      break;
 8007c22:	e002      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007c24:	bf00      	nop
 8007c26:	e000      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007c30:	4b25      	ldr	r3, [pc, #148]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c3e:	4922      	ldr	r1, [pc, #136]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	658b      	str	r3, [r1, #88]	; 0x58
 8007c44:	e001      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d04b      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c60:	d030      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c66:	d82a      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c6c:	d02e      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007c6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c72:	d824      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c78:	d018      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007c7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c7e:	d81e      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c88:	d007      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007c8a:	e018      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	4a0d      	ldr	r2, [pc, #52]	; (8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c98:	e019      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 f8ab 	bl	8008dfc <RCCEx_PLL2_Config>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007caa:	e010      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3324      	adds	r3, #36	; 0x24
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 f954 	bl	8008f60 <RCCEx_PLL3_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cbc:	e007      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc2:	e004      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007cc4:	bf00      	nop
 8007cc6:	e002      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007cc8:	58024400 	.word	0x58024400
      break;
 8007ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007cd4:	4b99      	ldr	r3, [pc, #612]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ce2:	4996      	ldr	r1, [pc, #600]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	658b      	str	r3, [r1, #88]	; 0x58
 8007ce8:	e001      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d032      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cfe:	2b30      	cmp	r3, #48	; 0x30
 8007d00:	d01c      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007d02:	2b30      	cmp	r3, #48	; 0x30
 8007d04:	d817      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d00c      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d813      	bhi.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d016      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d10f      	bne.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d16:	4b89      	ldr	r3, [pc, #548]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	4a88      	ldr	r2, [pc, #544]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d22:	e00e      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3304      	adds	r3, #4
 8007d28:	2102      	movs	r1, #2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f001 f866 	bl	8008dfc <RCCEx_PLL2_Config>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d34:	e005      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3a:	e002      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007d3c:	bf00      	nop
 8007d3e:	e000      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d42:	7dfb      	ldrb	r3, [r7, #23]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d109      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d48:	4b7c      	ldr	r3, [pc, #496]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d54:	4979      	ldr	r1, [pc, #484]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d5a:	e001      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d047      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d74:	d030      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d7a:	d82a      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007d7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d80:	d02c      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007d82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d86:	d824      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d8c:	d018      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d92:	d81e      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d9c:	d007      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007d9e:	e018      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da0:	4b66      	ldr	r3, [pc, #408]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4a65      	ldr	r2, [pc, #404]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007dac:	e017      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3304      	adds	r3, #4
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 f821 	bl	8008dfc <RCCEx_PLL2_Config>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007dbe:	e00e      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3324      	adds	r3, #36	; 0x24
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 f8ca 	bl	8008f60 <RCCEx_PLL3_Config>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007dd0:	e005      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd6:	e002      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007dd8:	bf00      	nop
 8007dda:	e000      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007de4:	4b55      	ldr	r3, [pc, #340]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df0:	4952      	ldr	r1, [pc, #328]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	650b      	str	r3, [r1, #80]	; 0x50
 8007df6:	e001      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d049      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e10:	d02e      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007e12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e16:	d828      	bhi.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007e18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e1c:	d02a      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e22:	d822      	bhi.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007e24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e28:	d026      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007e2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e2e:	d81c      	bhi.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e34:	d010      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e3a:	d816      	bhi.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01d      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e44:	d111      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 ffd5 	bl	8008dfc <RCCEx_PLL2_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e56:	e012      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3324      	adds	r3, #36	; 0x24
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f001 f87e 	bl	8008f60 <RCCEx_PLL3_Config>
 8007e64:	4603      	mov	r3, r0
 8007e66:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e68:	e009      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e6e:	e006      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007e70:	bf00      	nop
 8007e72:	e004      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d109      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e84:	4b2d      	ldr	r3, [pc, #180]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e88:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e90:	492a      	ldr	r1, [pc, #168]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	650b      	str	r3, [r1, #80]	; 0x50
 8007e96:	e001      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d04d      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eb2:	d02e      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007eb8:	d828      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ebe:	d02a      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec4:	d822      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007ec6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eca:	d026      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007ecc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ed0:	d81c      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ed6:	d010      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007edc:	d816      	bhi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01d      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007ee2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ee6:	d111      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3304      	adds	r3, #4
 8007eec:	2101      	movs	r1, #1
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 ff84 	bl	8008dfc <RCCEx_PLL2_Config>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ef8:	e012      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3324      	adds	r3, #36	; 0x24
 8007efe:	2101      	movs	r1, #1
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 f82d 	bl	8008f60 <RCCEx_PLL3_Config>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f0a:	e009      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f10:	e006      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007f12:	bf00      	nop
 8007f14:	e004      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007f16:	bf00      	nop
 8007f18:	e002      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007f1a:	bf00      	nop
 8007f1c:	e000      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10c      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f26:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f34:	4901      	ldr	r1, [pc, #4]	; (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	658b      	str	r3, [r1, #88]	; 0x58
 8007f3a:	e003      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f40:	7dfb      	ldrb	r3, [r7, #23]
 8007f42:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d02f      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f58:	d00e      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f5e:	d814      	bhi.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d015      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f68:	d10f      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f6a:	4baf      	ldr	r3, [pc, #700]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	4aae      	ldr	r2, [pc, #696]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f76:	e00c      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 ff3c 	bl	8008dfc <RCCEx_PLL2_Config>
 8007f84:	4603      	mov	r3, r0
 8007f86:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f88:	e003      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f8e:	e000      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f98:	4ba3      	ldr	r3, [pc, #652]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa4:	49a0      	ldr	r1, [pc, #640]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	650b      	str	r3, [r1, #80]	; 0x50
 8007faa:	e001      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d032      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d81b      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007fc4:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	08008003 	.word	0x08008003
 8007fd0:	08007fdd 	.word	0x08007fdd
 8007fd4:	08007feb 	.word	0x08007feb
 8007fd8:	08008003 	.word	0x08008003
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fdc:	4b92      	ldr	r3, [pc, #584]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	4a91      	ldr	r2, [pc, #580]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fe8:	e00c      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3304      	adds	r3, #4
 8007fee:	2102      	movs	r1, #2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 ff03 	bl	8008dfc <RCCEx_PLL2_Config>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ffa:	e003      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8008000:	e000      	b.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d109      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800800a:	4b87      	ldr	r3, [pc, #540]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800800c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800e:	f023 0203 	bic.w	r2, r3, #3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008016:	4984      	ldr	r1, [pc, #528]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008018:	4313      	orrs	r3, r2
 800801a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800801c:	e001      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 8086 	beq.w	800813c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008030:	4b7e      	ldr	r3, [pc, #504]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a7d      	ldr	r2, [pc, #500]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800803a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800803c:	f7f9 fd0a 	bl	8001a54 <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008042:	e009      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008044:	f7f9 fd06 	bl	8001a54 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b64      	cmp	r3, #100	; 0x64
 8008050:	d902      	bls.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	75fb      	strb	r3, [r7, #23]
        break;
 8008056:	e005      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008058:	4b74      	ldr	r3, [pc, #464]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0ef      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d166      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800806a:	4b6f      	ldr	r3, [pc, #444]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800806c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008074:	4053      	eors	r3, r2
 8008076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800807a:	2b00      	cmp	r3, #0
 800807c:	d013      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800807e:	4b6a      	ldr	r3, [pc, #424]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008086:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008088:	4b67      	ldr	r3, [pc, #412]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800808a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808c:	4a66      	ldr	r2, [pc, #408]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800808e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008092:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008094:	4b64      	ldr	r3, [pc, #400]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008098:	4a63      	ldr	r2, [pc, #396]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800809a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800809e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80080a0:	4a61      	ldr	r2, [pc, #388]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b0:	d115      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b2:	f7f9 fccf 	bl	8001a54 <HAL_GetTick>
 80080b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080b8:	e00b      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ba:	f7f9 fccb 	bl	8001a54 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d902      	bls.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	75fb      	strb	r3, [r7, #23]
            break;
 80080d0:	e005      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080d2:	4b55      	ldr	r3, [pc, #340]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0ed      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d126      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f2:	d10d      	bne.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80080f4:	4b4c      	ldr	r3, [pc, #304]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008102:	0919      	lsrs	r1, r3, #4
 8008104:	4b4a      	ldr	r3, [pc, #296]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008106:	400b      	ands	r3, r1
 8008108:	4947      	ldr	r1, [pc, #284]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800810a:	4313      	orrs	r3, r2
 800810c:	610b      	str	r3, [r1, #16]
 800810e:	e005      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008110:	4b45      	ldr	r3, [pc, #276]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	4a44      	ldr	r2, [pc, #272]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008116:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800811a:	6113      	str	r3, [r2, #16]
 800811c:	4b42      	ldr	r3, [pc, #264]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800811e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800812a:	493f      	ldr	r1, [pc, #252]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800812c:	4313      	orrs	r3, r2
 800812e:	670b      	str	r3, [r1, #112]	; 0x70
 8008130:	e004      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	75bb      	strb	r3, [r7, #22]
 8008136:	e001      	b.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8085 	beq.w	8008254 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800814e:	2b28      	cmp	r3, #40	; 0x28
 8008150:	d866      	bhi.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008152:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	08008235 	.word	0x08008235
 800815c:	08008221 	.word	0x08008221
 8008160:	08008221 	.word	0x08008221
 8008164:	08008221 	.word	0x08008221
 8008168:	08008221 	.word	0x08008221
 800816c:	08008221 	.word	0x08008221
 8008170:	08008221 	.word	0x08008221
 8008174:	08008221 	.word	0x08008221
 8008178:	080081fd 	.word	0x080081fd
 800817c:	08008221 	.word	0x08008221
 8008180:	08008221 	.word	0x08008221
 8008184:	08008221 	.word	0x08008221
 8008188:	08008221 	.word	0x08008221
 800818c:	08008221 	.word	0x08008221
 8008190:	08008221 	.word	0x08008221
 8008194:	08008221 	.word	0x08008221
 8008198:	0800820f 	.word	0x0800820f
 800819c:	08008221 	.word	0x08008221
 80081a0:	08008221 	.word	0x08008221
 80081a4:	08008221 	.word	0x08008221
 80081a8:	08008221 	.word	0x08008221
 80081ac:	08008221 	.word	0x08008221
 80081b0:	08008221 	.word	0x08008221
 80081b4:	08008221 	.word	0x08008221
 80081b8:	08008235 	.word	0x08008235
 80081bc:	08008221 	.word	0x08008221
 80081c0:	08008221 	.word	0x08008221
 80081c4:	08008221 	.word	0x08008221
 80081c8:	08008221 	.word	0x08008221
 80081cc:	08008221 	.word	0x08008221
 80081d0:	08008221 	.word	0x08008221
 80081d4:	08008221 	.word	0x08008221
 80081d8:	08008235 	.word	0x08008235
 80081dc:	08008221 	.word	0x08008221
 80081e0:	08008221 	.word	0x08008221
 80081e4:	08008221 	.word	0x08008221
 80081e8:	08008221 	.word	0x08008221
 80081ec:	08008221 	.word	0x08008221
 80081f0:	08008221 	.word	0x08008221
 80081f4:	08008221 	.word	0x08008221
 80081f8:	08008235 	.word	0x08008235
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3304      	adds	r3, #4
 8008200:	2101      	movs	r1, #1
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fdfa 	bl	8008dfc <RCCEx_PLL2_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800820c:	e013      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3324      	adds	r3, #36	; 0x24
 8008212:	2101      	movs	r1, #1
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fea3 	bl	8008f60 <RCCEx_PLL3_Config>
 800821a:	4603      	mov	r3, r0
 800821c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800821e:	e00a      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	75fb      	strb	r3, [r7, #23]
      break;
 8008224:	e007      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008226:	bf00      	nop
 8008228:	58024400 	.word	0x58024400
 800822c:	58024800 	.word	0x58024800
 8008230:	00ffffcf 	.word	0x00ffffcf
      break;
 8008234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d109      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800823c:	4b96      	ldr	r3, [pc, #600]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800823e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008240:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008248:	4993      	ldr	r1, [pc, #588]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800824a:	4313      	orrs	r3, r2
 800824c:	654b      	str	r3, [r1, #84]	; 0x54
 800824e:	e001      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d038      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008264:	2b05      	cmp	r3, #5
 8008266:	d821      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008268:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	080082b3 	.word	0x080082b3
 8008274:	08008289 	.word	0x08008289
 8008278:	0800829b 	.word	0x0800829b
 800827c:	080082b3 	.word	0x080082b3
 8008280:	080082b3 	.word	0x080082b3
 8008284:	080082b3 	.word	0x080082b3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3304      	adds	r3, #4
 800828c:	2101      	movs	r1, #1
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fdb4 	bl	8008dfc <RCCEx_PLL2_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008298:	e00c      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	3324      	adds	r3, #36	; 0x24
 800829e:	2101      	movs	r1, #1
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fe5d 	bl	8008f60 <RCCEx_PLL3_Config>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80082aa:	e003      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	75fb      	strb	r3, [r7, #23]
      break;
 80082b0:	e000      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80082b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80082ba:	4b77      	ldr	r3, [pc, #476]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082be:	f023 0207 	bic.w	r2, r3, #7
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082c6:	4974      	ldr	r1, [pc, #464]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	654b      	str	r3, [r1, #84]	; 0x54
 80082cc:	e001      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d03a      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	d821      	bhi.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x938>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008333 	.word	0x08008333
 80082f4:	08008309 	.word	0x08008309
 80082f8:	0800831b 	.word	0x0800831b
 80082fc:	08008333 	.word	0x08008333
 8008300:	08008333 	.word	0x08008333
 8008304:	08008333 	.word	0x08008333
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3304      	adds	r3, #4
 800830c:	2101      	movs	r1, #1
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fd74 	bl	8008dfc <RCCEx_PLL2_Config>
 8008314:	4603      	mov	r3, r0
 8008316:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008318:	e00c      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3324      	adds	r3, #36	; 0x24
 800831e:	2101      	movs	r1, #1
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fe1d 	bl	8008f60 <RCCEx_PLL3_Config>
 8008326:	4603      	mov	r3, r0
 8008328:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800832a:	e003      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	75fb      	strb	r3, [r7, #23]
      break;
 8008330:	e000      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008332:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008334:	7dfb      	ldrb	r3, [r7, #23]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d10a      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800833a:	4b57      	ldr	r3, [pc, #348]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800833c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833e:	f023 0207 	bic.w	r2, r3, #7
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008348:	4953      	ldr	r1, [pc, #332]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800834a:	4313      	orrs	r3, r2
 800834c:	658b      	str	r3, [r1, #88]	; 0x58
 800834e:	e001      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d04b      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800836a:	d02e      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800836c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008370:	d828      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008376:	d02a      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837c:	d822      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800837e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008382:	d026      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008384:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008388:	d81c      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800838a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800838e:	d010      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008394:	d816      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d01d      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800839a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800839e:	d111      	bne.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3304      	adds	r3, #4
 80083a4:	2100      	movs	r1, #0
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 fd28 	bl	8008dfc <RCCEx_PLL2_Config>
 80083ac:	4603      	mov	r3, r0
 80083ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80083b0:	e012      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3324      	adds	r3, #36	; 0x24
 80083b6:	2102      	movs	r1, #2
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fdd1 	bl	8008f60 <RCCEx_PLL3_Config>
 80083be:	4603      	mov	r3, r0
 80083c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80083c2:	e009      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	75fb      	strb	r3, [r7, #23]
      break;
 80083c8:	e006      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80083ca:	bf00      	nop
 80083cc:	e004      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80083ce:	bf00      	nop
 80083d0:	e002      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80083d2:	bf00      	nop
 80083d4:	e000      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80083d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083de:	4b2e      	ldr	r3, [pc, #184]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80083e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ec:	492a      	ldr	r1, [pc, #168]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	654b      	str	r3, [r1, #84]	; 0x54
 80083f2:	e001      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d04d      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800840a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800840e:	d02e      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008410:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008414:	d828      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841a:	d02a      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800841c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008420:	d822      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008422:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008426:	d026      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800842c:	d81c      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800842e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008432:	d010      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008438:	d816      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d01d      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800843e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008442:	d111      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3304      	adds	r3, #4
 8008448:	2100      	movs	r1, #0
 800844a:	4618      	mov	r0, r3
 800844c:	f000 fcd6 	bl	8008dfc <RCCEx_PLL2_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008454:	e012      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3324      	adds	r3, #36	; 0x24
 800845a:	2102      	movs	r1, #2
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fd7f 	bl	8008f60 <RCCEx_PLL3_Config>
 8008462:	4603      	mov	r3, r0
 8008464:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008466:	e009      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	75fb      	strb	r3, [r7, #23]
      break;
 800846c:	e006      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800846e:	bf00      	nop
 8008470:	e004      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008472:	bf00      	nop
 8008474:	e002      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008476:	bf00      	nop
 8008478:	e000      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800847a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10c      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008482:	4b05      	ldr	r3, [pc, #20]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008486:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008490:	4901      	ldr	r1, [pc, #4]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008492:	4313      	orrs	r3, r2
 8008494:	658b      	str	r3, [r1, #88]	; 0x58
 8008496:	e003      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d04b      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80084b6:	d02e      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80084b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80084bc:	d828      	bhi.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80084be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c2:	d02a      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80084c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c8:	d822      	bhi.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80084ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084ce:	d026      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80084d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084d4:	d81c      	bhi.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80084d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084da:	d010      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80084dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084e0:	d816      	bhi.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01d      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80084e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ea:	d111      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3304      	adds	r3, #4
 80084f0:	2100      	movs	r1, #0
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fc82 	bl	8008dfc <RCCEx_PLL2_Config>
 80084f8:	4603      	mov	r3, r0
 80084fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084fc:	e012      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3324      	adds	r3, #36	; 0x24
 8008502:	2102      	movs	r1, #2
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fd2b 	bl	8008f60 <RCCEx_PLL3_Config>
 800850a:	4603      	mov	r3, r0
 800850c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800850e:	e009      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008510:	2301      	movs	r3, #1
 8008512:	75fb      	strb	r3, [r7, #23]
      break;
 8008514:	e006      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008516:	bf00      	nop
 8008518:	e004      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800851a:	bf00      	nop
 800851c:	e002      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800851e:	bf00      	nop
 8008520:	e000      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10a      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800852a:	4b9d      	ldr	r3, [pc, #628]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800852c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008538:	4999      	ldr	r1, [pc, #612]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800853a:	4313      	orrs	r3, r2
 800853c:	658b      	str	r3, [r1, #88]	; 0x58
 800853e:	e001      	b.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008540:	7dfb      	ldrb	r3, [r7, #23]
 8008542:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01a      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800855a:	d10a      	bne.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3324      	adds	r3, #36	; 0x24
 8008560:	2102      	movs	r1, #2
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fcfc 	bl	8008f60 <RCCEx_PLL3_Config>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008572:	4b8b      	ldr	r3, [pc, #556]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008576:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008580:	4987      	ldr	r1, [pc, #540]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008582:	4313      	orrs	r3, r2
 8008584:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0310 	and.w	r3, r3, #16
 800858e:	2b00      	cmp	r3, #0
 8008590:	d01a      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859c:	d10a      	bne.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3324      	adds	r3, #36	; 0x24
 80085a2:	2102      	movs	r1, #2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fcdb 	bl	8008f60 <RCCEx_PLL3_Config>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085b4:	4b7a      	ldr	r3, [pc, #488]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085c2:	4977      	ldr	r1, [pc, #476]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d034      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80085da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085de:	d01d      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80085e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085e4:	d817      	bhi.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80085ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ee:	d009      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80085f0:	e011      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3304      	adds	r3, #4
 80085f6:	2100      	movs	r1, #0
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 fbff 	bl	8008dfc <RCCEx_PLL2_Config>
 80085fe:	4603      	mov	r3, r0
 8008600:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008602:	e00c      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3324      	adds	r3, #36	; 0x24
 8008608:	2102      	movs	r1, #2
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fca8 	bl	8008f60 <RCCEx_PLL3_Config>
 8008610:	4603      	mov	r3, r0
 8008612:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008614:	e003      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	75fb      	strb	r3, [r7, #23]
      break;
 800861a:	e000      	b.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800861c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008624:	4b5e      	ldr	r3, [pc, #376]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008632:	495b      	ldr	r1, [pc, #364]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008634:	4313      	orrs	r3, r2
 8008636:	658b      	str	r3, [r1, #88]	; 0x58
 8008638:	e001      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d033      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008650:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008654:	d01c      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008656:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800865a:	d816      	bhi.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800865c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008660:	d003      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008666:	d007      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008668:	e00f      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800866a:	4b4d      	ldr	r3, [pc, #308]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	4a4c      	ldr	r2, [pc, #304]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008676:	e00c      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3324      	adds	r3, #36	; 0x24
 800867c:	2101      	movs	r1, #1
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fc6e 	bl	8008f60 <RCCEx_PLL3_Config>
 8008684:	4603      	mov	r3, r0
 8008686:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008688:	e003      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	75fb      	strb	r3, [r7, #23]
      break;
 800868e:	e000      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008698:	4b41      	ldr	r3, [pc, #260]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800869a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086a6:	493e      	ldr	r1, [pc, #248]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	654b      	str	r3, [r1, #84]	; 0x54
 80086ac:	e001      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d029      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80086c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ca:	d007      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80086cc:	e00f      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ce:	4b34      	ldr	r3, [pc, #208]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	4a33      	ldr	r2, [pc, #204]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086da:	e00b      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	2102      	movs	r1, #2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fb8a 	bl	8008dfc <RCCEx_PLL2_Config>
 80086e8:	4603      	mov	r3, r0
 80086ea:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086ec:	e002      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]
      break;
 80086f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086fa:	4b29      	ldr	r3, [pc, #164]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008706:	4926      	ldr	r1, [pc, #152]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008708:	4313      	orrs	r3, r2
 800870a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800870c:	e001      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3324      	adds	r3, #36	; 0x24
 8008722:	2102      	movs	r1, #2
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fc1b 	bl	8008f60 <RCCEx_PLL3_Config>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d033      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008748:	d017      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800874a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800874e:	d811      	bhi.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008754:	d013      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008756:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800875a:	d80b      	bhi.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800875c:	2b00      	cmp	r3, #0
 800875e:	d010      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008764:	d106      	bne.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008766:	4b0e      	ldr	r3, [pc, #56]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	4a0d      	ldr	r2, [pc, #52]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800876c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008772:	e007      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]
      break;
 8008778:	e004      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800877a:	bf00      	nop
 800877c:	e002      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800877e:	bf00      	nop
 8008780:	e000      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10c      	bne.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800878a:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800878c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008796:	4902      	ldr	r1, [pc, #8]	; (80087a0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008798:	4313      	orrs	r3, r2
 800879a:	654b      	str	r3, [r1, #84]	; 0x54
 800879c:	e004      	b.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800879e:	bf00      	nop
 80087a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d008      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80087b4:	4b31      	ldr	r3, [pc, #196]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80087b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c0:	492e      	ldr	r1, [pc, #184]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d009      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80087d2:	4b2a      	ldr	r3, [pc, #168]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087e0:	4926      	ldr	r1, [pc, #152]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d008      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80087f2:	4b22      	ldr	r3, [pc, #136]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80087f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087fe:	491f      	ldr	r1, [pc, #124]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008800:	4313      	orrs	r3, r2
 8008802:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00d      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008810:	4b1a      	ldr	r3, [pc, #104]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	4a19      	ldr	r2, [pc, #100]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800881a:	6113      	str	r3, [r2, #16]
 800881c:	4b17      	ldr	r3, [pc, #92]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008826:	4915      	ldr	r1, [pc, #84]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008828:	4313      	orrs	r3, r2
 800882a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	da08      	bge.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008834:	4b11      	ldr	r3, [pc, #68]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008838:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008840:	490e      	ldr	r1, [pc, #56]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008842:	4313      	orrs	r3, r2
 8008844:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d009      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008860:	4906      	ldr	r1, [pc, #24]	; (800887c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008862:	4313      	orrs	r3, r2
 8008864:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008866:	7dbb      	ldrb	r3, [r7, #22]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	e000      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	58024400 	.word	0x58024400

08008880 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008884:	f7ff f818 	bl	80078b8 <HAL_RCC_GetHCLKFreq>
 8008888:	4602      	mov	r2, r0
 800888a:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	091b      	lsrs	r3, r3, #4
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	4904      	ldr	r1, [pc, #16]	; (80088a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008896:	5ccb      	ldrb	r3, [r1, r3]
 8008898:	f003 031f 	and.w	r3, r3, #31
 800889c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	58024400 	.word	0x58024400
 80088a8:	08012690 	.word	0x08012690

080088ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b089      	sub	sp, #36	; 0x24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088b4:	4ba1      	ldr	r3, [pc, #644]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b8:	f003 0303 	and.w	r3, r3, #3
 80088bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80088be:	4b9f      	ldr	r3, [pc, #636]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c2:	0b1b      	lsrs	r3, r3, #12
 80088c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80088ca:	4b9c      	ldr	r3, [pc, #624]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ce:	091b      	lsrs	r3, r3, #4
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80088d6:	4b99      	ldr	r3, [pc, #612]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088da:	08db      	lsrs	r3, r3, #3
 80088dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	fb02 f303 	mul.w	r3, r2, r3
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 8111 	beq.w	8008b1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	f000 8083 	beq.w	8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	2b02      	cmp	r3, #2
 8008906:	f200 80a1 	bhi.w	8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d056      	beq.n	80089c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008916:	e099      	b.n	8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008918:	4b88      	ldr	r3, [pc, #544]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0320 	and.w	r3, r3, #32
 8008920:	2b00      	cmp	r3, #0
 8008922:	d02d      	beq.n	8008980 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008924:	4b85      	ldr	r3, [pc, #532]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	08db      	lsrs	r3, r3, #3
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	4a84      	ldr	r2, [pc, #528]	; (8008b40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008930:	fa22 f303 	lsr.w	r3, r2, r3
 8008934:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	ee07 3a90 	vmov	s15, r3
 800893c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894e:	4b7b      	ldr	r3, [pc, #492]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008962:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800897e:	e087      	b.n	8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800898e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008992:	4b6a      	ldr	r3, [pc, #424]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089c2:	e065      	b.n	8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	ee07 3a90 	vmov	s15, r3
 80089ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d6:	4b59      	ldr	r3, [pc, #356]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a06:	e043      	b.n	8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	ee07 3a90 	vmov	s15, r3
 8008a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1a:	4b48      	ldr	r3, [pc, #288]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a4a:	e021      	b.n	8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5e:	4b37      	ldr	r3, [pc, #220]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008a90:	4b2a      	ldr	r3, [pc, #168]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	0a5b      	lsrs	r3, r3, #9
 8008a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ab6:	ee17 2a90 	vmov	r2, s15
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008abe:	4b1f      	ldr	r3, [pc, #124]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	0c1b      	lsrs	r3, r3, #16
 8008ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac8:	ee07 3a90 	vmov	s15, r3
 8008acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ae4:	ee17 2a90 	vmov	r2, s15
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008aec:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af0:	0e1b      	lsrs	r3, r3, #24
 8008af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b12:	ee17 2a90 	vmov	r2, s15
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b1a:	e008      	b.n	8008b2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	609a      	str	r2, [r3, #8]
}
 8008b2e:	bf00      	nop
 8008b30:	3724      	adds	r7, #36	; 0x24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	58024400 	.word	0x58024400
 8008b40:	03d09000 	.word	0x03d09000
 8008b44:	46000000 	.word	0x46000000
 8008b48:	4c742400 	.word	0x4c742400
 8008b4c:	4a742400 	.word	0x4a742400
 8008b50:	4b742400 	.word	0x4b742400

08008b54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b089      	sub	sp, #36	; 0x24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b5c:	4ba1      	ldr	r3, [pc, #644]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008b66:	4b9f      	ldr	r3, [pc, #636]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	0d1b      	lsrs	r3, r3, #20
 8008b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008b72:	4b9c      	ldr	r3, [pc, #624]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	0a1b      	lsrs	r3, r3, #8
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008b7e:	4b99      	ldr	r3, [pc, #612]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b82:	08db      	lsrs	r3, r3, #3
 8008b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	fb02 f303 	mul.w	r3, r2, r3
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 8111 	beq.w	8008dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	f000 8083 	beq.w	8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	f200 80a1 	bhi.w	8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d056      	beq.n	8008c6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008bbe:	e099      	b.n	8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bc0:	4b88      	ldr	r3, [pc, #544]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d02d      	beq.n	8008c28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bcc:	4b85      	ldr	r3, [pc, #532]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	08db      	lsrs	r3, r3, #3
 8008bd2:	f003 0303 	and.w	r3, r3, #3
 8008bd6:	4a84      	ldr	r2, [pc, #528]	; (8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bdc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	ee07 3a90 	vmov	s15, r3
 8008be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bf6:	4b7b      	ldr	r3, [pc, #492]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c26:	e087      	b.n	8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008df0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3a:	4b6a      	ldr	r3, [pc, #424]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c6a:	e065      	b.n	8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7e:	4b59      	ldr	r3, [pc, #356]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008caa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cae:	e043      	b.n	8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc2:	4b48      	ldr	r3, [pc, #288]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cf2:	e021      	b.n	8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d06:	4b37      	ldr	r3, [pc, #220]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008d38:	4b2a      	ldr	r3, [pc, #168]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3c:	0a5b      	lsrs	r3, r3, #9
 8008d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d5e:	ee17 2a90 	vmov	r2, s15
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008d66:	4b1f      	ldr	r3, [pc, #124]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	0c1b      	lsrs	r3, r3, #16
 8008d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d70:	ee07 3a90 	vmov	s15, r3
 8008d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d8c:	ee17 2a90 	vmov	r2, s15
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008d94:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	0e1b      	lsrs	r3, r3, #24
 8008d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dba:	ee17 2a90 	vmov	r2, s15
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008dc2:	e008      	b.n	8008dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	609a      	str	r2, [r3, #8]
}
 8008dd6:	bf00      	nop
 8008dd8:	3724      	adds	r7, #36	; 0x24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	58024400 	.word	0x58024400
 8008de8:	03d09000 	.word	0x03d09000
 8008dec:	46000000 	.word	0x46000000
 8008df0:	4c742400 	.word	0x4c742400
 8008df4:	4a742400 	.word	0x4a742400
 8008df8:	4b742400 	.word	0x4b742400

08008dfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e0a:	4b53      	ldr	r3, [pc, #332]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d101      	bne.n	8008e1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e099      	b.n	8008f4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e1a:	4b4f      	ldr	r3, [pc, #316]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a4e      	ldr	r2, [pc, #312]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008e20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e26:	f7f8 fe15 	bl	8001a54 <HAL_GetTick>
 8008e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e2c:	e008      	b.n	8008e40 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e2e:	f7f8 fe11 	bl	8001a54 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d901      	bls.n	8008e40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e086      	b.n	8008f4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e40:	4b45      	ldr	r3, [pc, #276]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1f0      	bne.n	8008e2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e4c:	4b42      	ldr	r3, [pc, #264]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	031b      	lsls	r3, r3, #12
 8008e5a:	493f      	ldr	r1, [pc, #252]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	025b      	lsls	r3, r3, #9
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	041b      	lsls	r3, r3, #16
 8008e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e82:	431a      	orrs	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	061b      	lsls	r3, r3, #24
 8008e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e90:	4931      	ldr	r1, [pc, #196]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008e96:	4b30      	ldr	r3, [pc, #192]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	492d      	ldr	r1, [pc, #180]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ea8:	4b2b      	ldr	r3, [pc, #172]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	f023 0220 	bic.w	r2, r3, #32
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	4928      	ldr	r1, [pc, #160]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008eba:	4b27      	ldr	r3, [pc, #156]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebe:	4a26      	ldr	r2, [pc, #152]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008ec0:	f023 0310 	bic.w	r3, r3, #16
 8008ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ec6:	4b24      	ldr	r3, [pc, #144]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eca:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <RCCEx_PLL2_Config+0x160>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	69d2      	ldr	r2, [r2, #28]
 8008ed2:	00d2      	lsls	r2, r2, #3
 8008ed4:	4920      	ldr	r1, [pc, #128]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008eda:	4b1f      	ldr	r3, [pc, #124]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ede:	4a1e      	ldr	r2, [pc, #120]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008ee0:	f043 0310 	orr.w	r3, r3, #16
 8008ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d106      	bne.n	8008efa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008eec:	4b1a      	ldr	r3, [pc, #104]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	4a19      	ldr	r2, [pc, #100]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ef8:	e00f      	b.n	8008f1a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d106      	bne.n	8008f0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f00:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	4a14      	ldr	r2, [pc, #80]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f0c:	e005      	b.n	8008f1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f0e:	4b12      	ldr	r3, [pc, #72]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f12:	4a11      	ldr	r2, [pc, #68]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f1a:	4b0f      	ldr	r3, [pc, #60]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a0e      	ldr	r2, [pc, #56]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008f20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f26:	f7f8 fd95 	bl	8001a54 <HAL_GetTick>
 8008f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f2c:	e008      	b.n	8008f40 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008f2e:	f7f8 fd91 	bl	8001a54 <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d901      	bls.n	8008f40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e006      	b.n	8008f4e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f40:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <RCCEx_PLL2_Config+0x15c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d0f0      	beq.n	8008f2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	58024400 	.word	0x58024400
 8008f5c:	ffff0007 	.word	0xffff0007

08008f60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f6e:	4b53      	ldr	r3, [pc, #332]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8008f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d101      	bne.n	8008f7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e099      	b.n	80090b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008f7e:	4b4f      	ldr	r3, [pc, #316]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a4e      	ldr	r2, [pc, #312]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8008f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f8a:	f7f8 fd63 	bl	8001a54 <HAL_GetTick>
 8008f8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f90:	e008      	b.n	8008fa4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f92:	f7f8 fd5f 	bl	8001a54 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d901      	bls.n	8008fa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e086      	b.n	80090b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fa4:	4b45      	ldr	r3, [pc, #276]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1f0      	bne.n	8008f92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fb0:	4b42      	ldr	r3, [pc, #264]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	051b      	lsls	r3, r3, #20
 8008fbe:	493f      	ldr	r1, [pc, #252]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	025b      	lsls	r3, r3, #9
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	041b      	lsls	r3, r3, #16
 8008fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	061b      	lsls	r3, r3, #24
 8008ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ff4:	4931      	ldr	r1, [pc, #196]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ffa:	4b30      	ldr	r3, [pc, #192]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	492d      	ldr	r1, [pc, #180]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009008:	4313      	orrs	r3, r2
 800900a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800900c:	4b2b      	ldr	r3, [pc, #172]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	4928      	ldr	r1, [pc, #160]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 800901a:	4313      	orrs	r3, r2
 800901c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800901e:	4b27      	ldr	r3, [pc, #156]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009022:	4a26      	ldr	r2, [pc, #152]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800902a:	4b24      	ldr	r3, [pc, #144]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 800902c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800902e:	4b24      	ldr	r3, [pc, #144]	; (80090c0 <RCCEx_PLL3_Config+0x160>)
 8009030:	4013      	ands	r3, r2
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	69d2      	ldr	r2, [r2, #28]
 8009036:	00d2      	lsls	r2, r2, #3
 8009038:	4920      	ldr	r1, [pc, #128]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 800903a:	4313      	orrs	r3, r2
 800903c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800903e:	4b1f      	ldr	r3, [pc, #124]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009042:	4a1e      	ldr	r2, [pc, #120]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d106      	bne.n	800905e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009050:	4b1a      	ldr	r3, [pc, #104]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	4a19      	ldr	r2, [pc, #100]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800905a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800905c:	e00f      	b.n	800907e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d106      	bne.n	8009072 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009064:	4b15      	ldr	r3, [pc, #84]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	4a14      	ldr	r2, [pc, #80]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 800906a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800906e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009070:	e005      	b.n	800907e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009072:	4b12      	ldr	r3, [pc, #72]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009076:	4a11      	ldr	r2, [pc, #68]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800907c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800907e:	4b0f      	ldr	r3, [pc, #60]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a0e      	ldr	r2, [pc, #56]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 8009084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800908a:	f7f8 fce3 	bl	8001a54 <HAL_GetTick>
 800908e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009090:	e008      	b.n	80090a4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009092:	f7f8 fcdf 	bl	8001a54 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	2b02      	cmp	r3, #2
 800909e:	d901      	bls.n	80090a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e006      	b.n	80090b2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <RCCEx_PLL3_Config+0x15c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0f0      	beq.n	8009092 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	58024400 	.word	0x58024400
 80090c0:	ffff0007 	.word	0xffff0007

080090c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d008      	beq.n	80090f2 <HAL_SD_IRQHandler+0x2e>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f003 0308 	and.w	r3, r3, #8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f9ac 	bl	8009448 <SD_Read_IT>
 80090f0:	e19a      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80ac 	beq.w	800925a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800910a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	4b59      	ldr	r3, [pc, #356]	; (800927c <HAL_SD_IRQHandler+0x1b8>)
 8009118:	400b      	ands	r3, r1
 800911a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800912a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800913a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f003 0308 	and.w	r3, r3, #8
 8009142:	2b00      	cmp	r3, #0
 8009144:	d038      	beq.n	80091b8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d104      	bne.n	800915a <HAL_SD_IRQHandler+0x96>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b00      	cmp	r3, #0
 8009158:	d011      	beq.n	800917e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4618      	mov	r0, r3
 8009160:	f002 ff50 	bl	800c004 <SDMMC_CmdStopTransfer>
 8009164:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d008      	beq.n	800917e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	431a      	orrs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f95b 	bl	8009434 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a3f      	ldr	r2, [pc, #252]	; (8009280 <HAL_SD_IRQHandler+0x1bc>)
 8009184:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d104      	bne.n	80091a8 <HAL_SD_IRQHandler+0xe4>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f004 fbd5 	bl	800d958 <HAL_SD_RxCpltCallback>
 80091ae:	e13b      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f004 fbc7 	bl	800d944 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80091b6:	e137      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8132 	beq.w	8009428 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2200      	movs	r2, #0
 80091ca:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2200      	movs	r2, #0
 80091d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d104      	bne.n	80091f0 <HAL_SD_IRQHandler+0x12c>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f003 0320 	and.w	r3, r3, #32
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d011      	beq.n	8009214 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f002 ff05 	bl	800c004 <SDMMC_CmdStopTransfer>
 80091fa:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d008      	beq.n	8009214 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	431a      	orrs	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f910 	bl	8009434 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f003 0310 	and.w	r3, r3, #16
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <HAL_SD_IRQHandler+0x172>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f004 fb84 	bl	800d944 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d105      	bne.n	8009252 <HAL_SD_IRQHandler+0x18e>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 80eb 	beq.w	8009428 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f004 fb80 	bl	800d958 <HAL_SD_RxCpltCallback>
}
 8009258:	e0e6      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00d      	beq.n	8009284 <HAL_SD_IRQHandler+0x1c0>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d008      	beq.n	8009284 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f92e 	bl	80094d4 <SD_Write_IT>
 8009278:	e0d6      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
 800927a:	bf00      	nop
 800927c:	ffff3ec5 	.word	0xffff3ec5
 8009280:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 809d 	beq.w	80093ce <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d005      	beq.n	80092ae <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	f043 0202 	orr.w	r2, r3, #2
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b4:	f003 0308 	and.w	r3, r3, #8
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d005      	beq.n	80092c8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c0:	f043 0208 	orr.w	r2, r3, #8
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d005      	beq.n	80092e2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092da:	f043 0220 	orr.w	r2, r3, #32
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e8:	f003 0310 	and.w	r3, r3, #16
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d005      	beq.n	80092fc <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f4:	f043 0210 	orr.w	r2, r3, #16
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a4b      	ldr	r2, [pc, #300]	; (8009430 <HAL_SD_IRQHandler+0x36c>)
 8009302:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009312:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009322:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009332:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009342:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4618      	mov	r0, r3
 800934a:	f002 fe5b 	bl	800c004 <SDMMC_CmdStopTransfer>
 800934e:	4602      	mov	r2, r0
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	431a      	orrs	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009368:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009372:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f003 0308 	and.w	r3, r3, #8
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f851 	bl	8009434 <HAL_SD_ErrorCallback>
}
 8009392:	e049      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800939a:	2b00      	cmp	r3, #0
 800939c:	d044      	beq.n	8009428 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d040      	beq.n	8009428 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80093b4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2200      	movs	r2, #0
 80093bc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f834 	bl	8009434 <HAL_SD_ErrorCallback>
}
 80093cc:	e02c      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d025      	beq.n	8009428 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ec:	f003 0304 	and.w	r3, r3, #4
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10c      	bne.n	800940e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f003 0320 	and.w	r3, r3, #32
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f8d0 	bl	80095a4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009404:	e010      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f8b8 	bl	800957c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800940c:	e00c      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f8b9 	bl	8009590 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800941e:	e003      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f8a1 	bl	8009568 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009426:	e7ff      	b.n	8009428 <HAL_SD_IRQHandler+0x364>
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	18000f3a 	.word	0x18000f3a

08009434 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	2b1f      	cmp	r3, #31
 800945c:	d936      	bls.n	80094cc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	e027      	b.n	80094b4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4618      	mov	r0, r3
 800946a:	f002 fd63 	bl	800bf34 <SDMMC_ReadFIFO>
 800946e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	b2da      	uxtb	r2, r3
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	3301      	adds	r3, #1
 800947c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	0a1b      	lsrs	r3, r3, #8
 8009482:	b2da      	uxtb	r2, r3
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	3301      	adds	r3, #1
 800948c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	0c1b      	lsrs	r3, r3, #16
 8009492:	b2da      	uxtb	r2, r3
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	3301      	adds	r3, #1
 800949c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	0e1b      	lsrs	r3, r3, #24
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	3301      	adds	r3, #1
 80094ac:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	3301      	adds	r3, #1
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2b07      	cmp	r3, #7
 80094b8:	d9d4      	bls.n	8009464 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c4:	f1a3 0220 	sub.w	r2, r3, #32
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80094cc:	bf00      	nop
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	2b1f      	cmp	r3, #31
 80094e8:	d93a      	bls.n	8009560 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80094ea:	2300      	movs	r3, #0
 80094ec:	617b      	str	r3, [r7, #20]
 80094ee:	e02b      	b.n	8009548 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	3301      	adds	r3, #1
 80094fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	021a      	lsls	r2, r3, #8
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	3301      	adds	r3, #1
 800950c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	041a      	lsls	r2, r3, #16
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]
      tmp++;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	3301      	adds	r3, #1
 800951e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	061a      	lsls	r2, r3, #24
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	3301      	adds	r3, #1
 8009530:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f107 020c 	add.w	r2, r7, #12
 800953a:	4611      	mov	r1, r2
 800953c:	4618      	mov	r0, r3
 800953e:	f002 fd06 	bl	800bf4e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	3301      	adds	r3, #1
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2b07      	cmp	r3, #7
 800954c:	d9d0      	bls.n	80094f0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	f1a3 0220 	sub.w	r2, r3, #32
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	621a      	str	r2, [r3, #32]
  }
}
 8009560:	bf00      	nop
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e049      	b.n	800965e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d106      	bne.n	80095e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7f7 ff00 	bl	80013e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4619      	mov	r1, r3
 80095f6:	4610      	mov	r0, r2
 80095f8:	f000 fbec 	bl	8009dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b082      	sub	sp, #8
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e049      	b.n	800970c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d106      	bne.n	8009692 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f841 	bl	8009714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2202      	movs	r2, #2
 8009696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3304      	adds	r3, #4
 80096a2:	4619      	mov	r1, r3
 80096a4:	4610      	mov	r0, r2
 80096a6:	f000 fb95 	bl	8009dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b02      	cmp	r3, #2
 800973c:	d122      	bne.n	8009784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b02      	cmp	r3, #2
 800974a:	d11b      	bne.n	8009784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f06f 0202 	mvn.w	r2, #2
 8009754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	f003 0303 	and.w	r3, r3, #3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fb14 	bl	8009d98 <HAL_TIM_IC_CaptureCallback>
 8009770:	e005      	b.n	800977e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fb06 	bl	8009d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fb17 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	f003 0304 	and.w	r3, r3, #4
 800978e:	2b04      	cmp	r3, #4
 8009790:	d122      	bne.n	80097d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	f003 0304 	and.w	r3, r3, #4
 800979c:	2b04      	cmp	r3, #4
 800979e:	d11b      	bne.n	80097d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f06f 0204 	mvn.w	r2, #4
 80097a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2202      	movs	r2, #2
 80097ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 faea 	bl	8009d98 <HAL_TIM_IC_CaptureCallback>
 80097c4:	e005      	b.n	80097d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fadc 	bl	8009d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 faed 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	f003 0308 	and.w	r3, r3, #8
 80097e2:	2b08      	cmp	r3, #8
 80097e4:	d122      	bne.n	800982c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f003 0308 	and.w	r3, r3, #8
 80097f0:	2b08      	cmp	r3, #8
 80097f2:	d11b      	bne.n	800982c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f06f 0208 	mvn.w	r2, #8
 80097fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2204      	movs	r2, #4
 8009802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	f003 0303 	and.w	r3, r3, #3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fac0 	bl	8009d98 <HAL_TIM_IC_CaptureCallback>
 8009818:	e005      	b.n	8009826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fab2 	bl	8009d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fac3 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f003 0310 	and.w	r3, r3, #16
 8009836:	2b10      	cmp	r3, #16
 8009838:	d122      	bne.n	8009880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f003 0310 	and.w	r3, r3, #16
 8009844:	2b10      	cmp	r3, #16
 8009846:	d11b      	bne.n	8009880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f06f 0210 	mvn.w	r2, #16
 8009850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2208      	movs	r2, #8
 8009856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009862:	2b00      	cmp	r3, #0
 8009864:	d003      	beq.n	800986e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fa96 	bl	8009d98 <HAL_TIM_IC_CaptureCallback>
 800986c:	e005      	b.n	800987a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 fa88 	bl	8009d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa99 	bl	8009dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f003 0301 	and.w	r3, r3, #1
 800988a:	2b01      	cmp	r3, #1
 800988c:	d10e      	bne.n	80098ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	f003 0301 	and.w	r3, r3, #1
 8009898:	2b01      	cmp	r3, #1
 800989a:	d107      	bne.n	80098ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f06f 0201 	mvn.w	r2, #1
 80098a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa62 	bl	8009d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b6:	2b80      	cmp	r3, #128	; 0x80
 80098b8:	d10e      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c4:	2b80      	cmp	r3, #128	; 0x80
 80098c6:	d107      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 ff94 	bl	800a800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098e6:	d10e      	bne.n	8009906 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f2:	2b80      	cmp	r3, #128	; 0x80
 80098f4:	d107      	bne.n	8009906 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80098fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 ff87 	bl	800a814 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009910:	2b40      	cmp	r3, #64	; 0x40
 8009912:	d10e      	bne.n	8009932 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991e:	2b40      	cmp	r3, #64	; 0x40
 8009920:	d107      	bne.n	8009932 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800992a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fa47 	bl	8009dc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f003 0320 	and.w	r3, r3, #32
 800993c:	2b20      	cmp	r3, #32
 800993e:	d10e      	bne.n	800995e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f003 0320 	and.w	r3, r3, #32
 800994a:	2b20      	cmp	r3, #32
 800994c:	d107      	bne.n	800995e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f06f 0220 	mvn.w	r2, #32
 8009956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 ff47 	bl	800a7ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
	...

08009968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800997a:	2b01      	cmp	r3, #1
 800997c:	d101      	bne.n	8009982 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800997e:	2302      	movs	r3, #2
 8009980:	e0fd      	b.n	8009b7e <HAL_TIM_PWM_ConfigChannel+0x216>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b14      	cmp	r3, #20
 800998e:	f200 80f0 	bhi.w	8009b72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099ed 	.word	0x080099ed
 800999c:	08009b73 	.word	0x08009b73
 80099a0:	08009b73 	.word	0x08009b73
 80099a4:	08009b73 	.word	0x08009b73
 80099a8:	08009a2d 	.word	0x08009a2d
 80099ac:	08009b73 	.word	0x08009b73
 80099b0:	08009b73 	.word	0x08009b73
 80099b4:	08009b73 	.word	0x08009b73
 80099b8:	08009a6f 	.word	0x08009a6f
 80099bc:	08009b73 	.word	0x08009b73
 80099c0:	08009b73 	.word	0x08009b73
 80099c4:	08009b73 	.word	0x08009b73
 80099c8:	08009aaf 	.word	0x08009aaf
 80099cc:	08009b73 	.word	0x08009b73
 80099d0:	08009b73 	.word	0x08009b73
 80099d4:	08009b73 	.word	0x08009b73
 80099d8:	08009af1 	.word	0x08009af1
 80099dc:	08009b73 	.word	0x08009b73
 80099e0:	08009b73 	.word	0x08009b73
 80099e4:	08009b73 	.word	0x08009b73
 80099e8:	08009b31 	.word	0x08009b31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68b9      	ldr	r1, [r7, #8]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 fa88 	bl	8009f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0208 	orr.w	r2, r2, #8
 8009a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	699a      	ldr	r2, [r3, #24]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 0204 	bic.w	r2, r2, #4
 8009a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6999      	ldr	r1, [r3, #24]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	691a      	ldr	r2, [r3, #16]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	619a      	str	r2, [r3, #24]
      break;
 8009a2a:	e0a3      	b.n	8009b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 faf8 	bl	800a028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	699a      	ldr	r2, [r3, #24]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6999      	ldr	r1, [r3, #24]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	021a      	lsls	r2, r3, #8
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	619a      	str	r2, [r3, #24]
      break;
 8009a6c:	e082      	b.n	8009b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 fb61 	bl	800a13c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69da      	ldr	r2, [r3, #28]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f042 0208 	orr.w	r2, r2, #8
 8009a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	69da      	ldr	r2, [r3, #28]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0204 	bic.w	r2, r2, #4
 8009a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69d9      	ldr	r1, [r3, #28]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	691a      	ldr	r2, [r3, #16]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	61da      	str	r2, [r3, #28]
      break;
 8009aac:	e062      	b.n	8009b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68b9      	ldr	r1, [r7, #8]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fbc7 	bl	800a248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	69da      	ldr	r2, [r3, #28]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69da      	ldr	r2, [r3, #28]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	69d9      	ldr	r1, [r3, #28]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	021a      	lsls	r2, r3, #8
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	430a      	orrs	r2, r1
 8009aec:	61da      	str	r2, [r3, #28]
      break;
 8009aee:	e041      	b.n	8009b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fc0e 	bl	800a318 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0208 	orr.w	r2, r2, #8
 8009b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0204 	bic.w	r2, r2, #4
 8009b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b2e:	e021      	b.n	8009b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fc50 	bl	800a3dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	021a      	lsls	r2, r3, #8
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b70:	e000      	b.n	8009b74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009b72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop

08009b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d101      	bne.n	8009ba0 <HAL_TIM_ConfigClockSource+0x18>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	e0db      	b.n	8009d58 <HAL_TIM_ConfigClockSource+0x1d0>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	4b69      	ldr	r3, [pc, #420]	; (8009d60 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bc6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a63      	ldr	r2, [pc, #396]	; (8009d64 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	f000 80a9 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1a6>
 8009bdc:	4a61      	ldr	r2, [pc, #388]	; (8009d64 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	f200 80ae 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009be4:	4a60      	ldr	r2, [pc, #384]	; (8009d68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	f000 80a1 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1a6>
 8009bec:	4a5e      	ldr	r2, [pc, #376]	; (8009d68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	f200 80a6 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009bf4:	4a5d      	ldr	r2, [pc, #372]	; (8009d6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	f000 8099 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1a6>
 8009bfc:	4a5b      	ldr	r2, [pc, #364]	; (8009d6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	f200 809e 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c08:	f000 8091 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009c10:	f200 8096 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c18:	f000 8089 	beq.w	8009d2e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c20:	f200 808e 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c28:	d03e      	beq.n	8009ca8 <HAL_TIM_ConfigClockSource+0x120>
 8009c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c2e:	f200 8087 	bhi.w	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c36:	f000 8085 	beq.w	8009d44 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c3e:	d87f      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c40:	2b70      	cmp	r3, #112	; 0x70
 8009c42:	d01a      	beq.n	8009c7a <HAL_TIM_ConfigClockSource+0xf2>
 8009c44:	2b70      	cmp	r3, #112	; 0x70
 8009c46:	d87b      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c48:	2b60      	cmp	r3, #96	; 0x60
 8009c4a:	d050      	beq.n	8009cee <HAL_TIM_ConfigClockSource+0x166>
 8009c4c:	2b60      	cmp	r3, #96	; 0x60
 8009c4e:	d877      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c50:	2b50      	cmp	r3, #80	; 0x50
 8009c52:	d03c      	beq.n	8009cce <HAL_TIM_ConfigClockSource+0x146>
 8009c54:	2b50      	cmp	r3, #80	; 0x50
 8009c56:	d873      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c58:	2b40      	cmp	r3, #64	; 0x40
 8009c5a:	d058      	beq.n	8009d0e <HAL_TIM_ConfigClockSource+0x186>
 8009c5c:	2b40      	cmp	r3, #64	; 0x40
 8009c5e:	d86f      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c60:	2b30      	cmp	r3, #48	; 0x30
 8009c62:	d064      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c64:	2b30      	cmp	r3, #48	; 0x30
 8009c66:	d86b      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c68:	2b20      	cmp	r3, #32
 8009c6a:	d060      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d867      	bhi.n	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d05c      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x1a6>
 8009c74:	2b10      	cmp	r3, #16
 8009c76:	d05a      	beq.n	8009d2e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009c78:	e062      	b.n	8009d40 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	6899      	ldr	r1, [r3, #8]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f000 fc89 	bl	800a5a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	609a      	str	r2, [r3, #8]
      break;
 8009ca6:	e04e      	b.n	8009d46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	6899      	ldr	r1, [r3, #8]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f000 fc72 	bl	800a5a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	689a      	ldr	r2, [r3, #8]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cca:	609a      	str	r2, [r3, #8]
      break;
 8009ccc:	e03b      	b.n	8009d46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6818      	ldr	r0, [r3, #0]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	6859      	ldr	r1, [r3, #4]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f000 fbe2 	bl	800a4a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2150      	movs	r1, #80	; 0x50
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 fc3c 	bl	800a564 <TIM_ITRx_SetConfig>
      break;
 8009cec:	e02b      	b.n	8009d46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	6859      	ldr	r1, [r3, #4]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f000 fc01 	bl	800a502 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2160      	movs	r1, #96	; 0x60
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fc2c 	bl	800a564 <TIM_ITRx_SetConfig>
      break;
 8009d0c:	e01b      	b.n	8009d46 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6818      	ldr	r0, [r3, #0]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	6859      	ldr	r1, [r3, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f000 fbc2 	bl	800a4a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2140      	movs	r1, #64	; 0x40
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fc1c 	bl	800a564 <TIM_ITRx_SetConfig>
      break;
 8009d2c:	e00b      	b.n	8009d46 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4619      	mov	r1, r3
 8009d38:	4610      	mov	r0, r2
 8009d3a:	f000 fc13 	bl	800a564 <TIM_ITRx_SetConfig>
        break;
 8009d3e:	e002      	b.n	8009d46 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009d40:	bf00      	nop
 8009d42:	e000      	b.n	8009d46 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009d44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	ffceff88 	.word	0xffceff88
 8009d64:	00100040 	.word	0x00100040
 8009d68:	00100030 	.word	0x00100030
 8009d6c:	00100020 	.word	0x00100020

08009d70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a40      	ldr	r2, [pc, #256]	; (8009ee8 <TIM_Base_SetConfig+0x114>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d013      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df2:	d00f      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a3d      	ldr	r2, [pc, #244]	; (8009eec <TIM_Base_SetConfig+0x118>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00b      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a3c      	ldr	r2, [pc, #240]	; (8009ef0 <TIM_Base_SetConfig+0x11c>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d007      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a3b      	ldr	r2, [pc, #236]	; (8009ef4 <TIM_Base_SetConfig+0x120>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d003      	beq.n	8009e14 <TIM_Base_SetConfig+0x40>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a3a      	ldr	r2, [pc, #232]	; (8009ef8 <TIM_Base_SetConfig+0x124>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d108      	bne.n	8009e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a2f      	ldr	r2, [pc, #188]	; (8009ee8 <TIM_Base_SetConfig+0x114>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d01f      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e34:	d01b      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a2c      	ldr	r2, [pc, #176]	; (8009eec <TIM_Base_SetConfig+0x118>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d017      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a2b      	ldr	r2, [pc, #172]	; (8009ef0 <TIM_Base_SetConfig+0x11c>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d013      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a2a      	ldr	r2, [pc, #168]	; (8009ef4 <TIM_Base_SetConfig+0x120>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d00f      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a29      	ldr	r2, [pc, #164]	; (8009ef8 <TIM_Base_SetConfig+0x124>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d00b      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a28      	ldr	r2, [pc, #160]	; (8009efc <TIM_Base_SetConfig+0x128>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d007      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a27      	ldr	r2, [pc, #156]	; (8009f00 <TIM_Base_SetConfig+0x12c>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d003      	beq.n	8009e6e <TIM_Base_SetConfig+0x9a>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a26      	ldr	r2, [pc, #152]	; (8009f04 <TIM_Base_SetConfig+0x130>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d108      	bne.n	8009e80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a10      	ldr	r2, [pc, #64]	; (8009ee8 <TIM_Base_SetConfig+0x114>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d00f      	beq.n	8009ecc <TIM_Base_SetConfig+0xf8>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a12      	ldr	r2, [pc, #72]	; (8009ef8 <TIM_Base_SetConfig+0x124>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d00b      	beq.n	8009ecc <TIM_Base_SetConfig+0xf8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a11      	ldr	r2, [pc, #68]	; (8009efc <TIM_Base_SetConfig+0x128>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d007      	beq.n	8009ecc <TIM_Base_SetConfig+0xf8>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a10      	ldr	r2, [pc, #64]	; (8009f00 <TIM_Base_SetConfig+0x12c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <TIM_Base_SetConfig+0xf8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a0f      	ldr	r2, [pc, #60]	; (8009f04 <TIM_Base_SetConfig+0x130>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d103      	bne.n	8009ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	691a      	ldr	r2, [r3, #16]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	615a      	str	r2, [r3, #20]
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	40010000 	.word	0x40010000
 8009eec:	40000400 	.word	0x40000400
 8009ef0:	40000800 	.word	0x40000800
 8009ef4:	40000c00 	.word	0x40000c00
 8009ef8:	40010400 	.word	0x40010400
 8009efc:	40014000 	.word	0x40014000
 8009f00:	40014400 	.word	0x40014400
 8009f04:	40014800 	.word	0x40014800

08009f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	f023 0201 	bic.w	r2, r3, #1
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	4b37      	ldr	r3, [pc, #220]	; (800a010 <TIM_OC1_SetConfig+0x108>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0303 	bic.w	r3, r3, #3
 8009f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	f023 0302 	bic.w	r3, r3, #2
 8009f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a2d      	ldr	r2, [pc, #180]	; (800a014 <TIM_OC1_SetConfig+0x10c>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d00f      	beq.n	8009f84 <TIM_OC1_SetConfig+0x7c>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a2c      	ldr	r2, [pc, #176]	; (800a018 <TIM_OC1_SetConfig+0x110>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d00b      	beq.n	8009f84 <TIM_OC1_SetConfig+0x7c>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a2b      	ldr	r2, [pc, #172]	; (800a01c <TIM_OC1_SetConfig+0x114>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d007      	beq.n	8009f84 <TIM_OC1_SetConfig+0x7c>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a2a      	ldr	r2, [pc, #168]	; (800a020 <TIM_OC1_SetConfig+0x118>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d003      	beq.n	8009f84 <TIM_OC1_SetConfig+0x7c>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a29      	ldr	r2, [pc, #164]	; (800a024 <TIM_OC1_SetConfig+0x11c>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d10c      	bne.n	8009f9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f023 0308 	bic.w	r3, r3, #8
 8009f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f023 0304 	bic.w	r3, r3, #4
 8009f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a1c      	ldr	r2, [pc, #112]	; (800a014 <TIM_OC1_SetConfig+0x10c>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d00f      	beq.n	8009fc6 <TIM_OC1_SetConfig+0xbe>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a1b      	ldr	r2, [pc, #108]	; (800a018 <TIM_OC1_SetConfig+0x110>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d00b      	beq.n	8009fc6 <TIM_OC1_SetConfig+0xbe>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	4a1a      	ldr	r2, [pc, #104]	; (800a01c <TIM_OC1_SetConfig+0x114>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d007      	beq.n	8009fc6 <TIM_OC1_SetConfig+0xbe>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a19      	ldr	r2, [pc, #100]	; (800a020 <TIM_OC1_SetConfig+0x118>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d003      	beq.n	8009fc6 <TIM_OC1_SetConfig+0xbe>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a18      	ldr	r2, [pc, #96]	; (800a024 <TIM_OC1_SetConfig+0x11c>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d111      	bne.n	8009fea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	621a      	str	r2, [r3, #32]
}
 800a004:	bf00      	nop
 800a006:	371c      	adds	r7, #28
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	fffeff8f 	.word	0xfffeff8f
 800a014:	40010000 	.word	0x40010000
 800a018:	40010400 	.word	0x40010400
 800a01c:	40014000 	.word	0x40014000
 800a020:	40014400 	.word	0x40014400
 800a024:	40014800 	.word	0x40014800

0800a028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	f023 0210 	bic.w	r2, r3, #16
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4b34      	ldr	r3, [pc, #208]	; (800a124 <TIM_OC2_SetConfig+0xfc>)
 800a054:	4013      	ands	r3, r2
 800a056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	021b      	lsls	r3, r3, #8
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	4313      	orrs	r3, r2
 800a06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f023 0320 	bic.w	r3, r3, #32
 800a072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a29      	ldr	r2, [pc, #164]	; (800a128 <TIM_OC2_SetConfig+0x100>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d003      	beq.n	800a090 <TIM_OC2_SetConfig+0x68>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a28      	ldr	r2, [pc, #160]	; (800a12c <TIM_OC2_SetConfig+0x104>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d10d      	bne.n	800a0ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a1e      	ldr	r2, [pc, #120]	; (800a128 <TIM_OC2_SetConfig+0x100>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d00f      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xac>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a1d      	ldr	r2, [pc, #116]	; (800a12c <TIM_OC2_SetConfig+0x104>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d00b      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xac>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a1c      	ldr	r2, [pc, #112]	; (800a130 <TIM_OC2_SetConfig+0x108>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d007      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xac>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a1b      	ldr	r2, [pc, #108]	; (800a134 <TIM_OC2_SetConfig+0x10c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <TIM_OC2_SetConfig+0xac>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a1a      	ldr	r2, [pc, #104]	; (800a138 <TIM_OC2_SetConfig+0x110>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d113      	bne.n	800a0fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	621a      	str	r2, [r3, #32]
}
 800a116:	bf00      	nop
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	feff8fff 	.word	0xfeff8fff
 800a128:	40010000 	.word	0x40010000
 800a12c:	40010400 	.word	0x40010400
 800a130:	40014000 	.word	0x40014000
 800a134:	40014400 	.word	0x40014400
 800a138:	40014800 	.word	0x40014800

0800a13c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a16a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0303 	bic.w	r3, r3, #3
 800a172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	021b      	lsls	r3, r3, #8
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	4313      	orrs	r3, r2
 800a190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a27      	ldr	r2, [pc, #156]	; (800a234 <TIM_OC3_SetConfig+0xf8>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d003      	beq.n	800a1a2 <TIM_OC3_SetConfig+0x66>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a26      	ldr	r2, [pc, #152]	; (800a238 <TIM_OC3_SetConfig+0xfc>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d10d      	bne.n	800a1be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	021b      	lsls	r3, r3, #8
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a1c      	ldr	r2, [pc, #112]	; (800a234 <TIM_OC3_SetConfig+0xf8>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d00f      	beq.n	800a1e6 <TIM_OC3_SetConfig+0xaa>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a1b      	ldr	r2, [pc, #108]	; (800a238 <TIM_OC3_SetConfig+0xfc>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00b      	beq.n	800a1e6 <TIM_OC3_SetConfig+0xaa>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a1a      	ldr	r2, [pc, #104]	; (800a23c <TIM_OC3_SetConfig+0x100>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d007      	beq.n	800a1e6 <TIM_OC3_SetConfig+0xaa>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a19      	ldr	r2, [pc, #100]	; (800a240 <TIM_OC3_SetConfig+0x104>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d003      	beq.n	800a1e6 <TIM_OC3_SetConfig+0xaa>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	4a18      	ldr	r2, [pc, #96]	; (800a244 <TIM_OC3_SetConfig+0x108>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d113      	bne.n	800a20e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	011b      	lsls	r3, r3, #4
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	621a      	str	r2, [r3, #32]
}
 800a228:	bf00      	nop
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	40010000 	.word	0x40010000
 800a238:	40010400 	.word	0x40010400
 800a23c:	40014000 	.word	0x40014000
 800a240:	40014400 	.word	0x40014400
 800a244:	40014800 	.word	0x40014800

0800a248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a248:	b480      	push	{r7}
 800a24a:	b087      	sub	sp, #28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a27e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	021b      	lsls	r3, r3, #8
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	4313      	orrs	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	031b      	lsls	r3, r3, #12
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a18      	ldr	r2, [pc, #96]	; (800a304 <TIM_OC4_SetConfig+0xbc>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d00f      	beq.n	800a2c8 <TIM_OC4_SetConfig+0x80>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a17      	ldr	r2, [pc, #92]	; (800a308 <TIM_OC4_SetConfig+0xc0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d00b      	beq.n	800a2c8 <TIM_OC4_SetConfig+0x80>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a16      	ldr	r2, [pc, #88]	; (800a30c <TIM_OC4_SetConfig+0xc4>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d007      	beq.n	800a2c8 <TIM_OC4_SetConfig+0x80>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a15      	ldr	r2, [pc, #84]	; (800a310 <TIM_OC4_SetConfig+0xc8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d003      	beq.n	800a2c8 <TIM_OC4_SetConfig+0x80>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	4a14      	ldr	r2, [pc, #80]	; (800a314 <TIM_OC4_SetConfig+0xcc>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d109      	bne.n	800a2dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	019b      	lsls	r3, r3, #6
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	621a      	str	r2, [r3, #32]
}
 800a2f6:	bf00      	nop
 800a2f8:	371c      	adds	r7, #28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	40010000 	.word	0x40010000
 800a308:	40010400 	.word	0x40010400
 800a30c:	40014000 	.word	0x40014000
 800a310:	40014400 	.word	0x40014400
 800a314:	40014800 	.word	0x40014800

0800a318 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4313      	orrs	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a358:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	041b      	lsls	r3, r3, #16
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	4313      	orrs	r3, r2
 800a364:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a17      	ldr	r2, [pc, #92]	; (800a3c8 <TIM_OC5_SetConfig+0xb0>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d00f      	beq.n	800a38e <TIM_OC5_SetConfig+0x76>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a16      	ldr	r2, [pc, #88]	; (800a3cc <TIM_OC5_SetConfig+0xb4>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d00b      	beq.n	800a38e <TIM_OC5_SetConfig+0x76>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a15      	ldr	r2, [pc, #84]	; (800a3d0 <TIM_OC5_SetConfig+0xb8>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d007      	beq.n	800a38e <TIM_OC5_SetConfig+0x76>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a14      	ldr	r2, [pc, #80]	; (800a3d4 <TIM_OC5_SetConfig+0xbc>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d003      	beq.n	800a38e <TIM_OC5_SetConfig+0x76>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a13      	ldr	r2, [pc, #76]	; (800a3d8 <TIM_OC5_SetConfig+0xc0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d109      	bne.n	800a3a2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a394:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	021b      	lsls	r3, r3, #8
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	621a      	str	r2, [r3, #32]
}
 800a3bc:	bf00      	nop
 800a3be:	371c      	adds	r7, #28
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	40010000 	.word	0x40010000
 800a3cc:	40010400 	.word	0x40010400
 800a3d0:	40014000 	.word	0x40014000
 800a3d4:	40014400 	.word	0x40014400
 800a3d8:	40014800 	.word	0x40014800

0800a3dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a40a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	4313      	orrs	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a41e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	051b      	lsls	r3, r3, #20
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	4313      	orrs	r3, r2
 800a42a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a18      	ldr	r2, [pc, #96]	; (800a490 <TIM_OC6_SetConfig+0xb4>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d00f      	beq.n	800a454 <TIM_OC6_SetConfig+0x78>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a17      	ldr	r2, [pc, #92]	; (800a494 <TIM_OC6_SetConfig+0xb8>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d00b      	beq.n	800a454 <TIM_OC6_SetConfig+0x78>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a16      	ldr	r2, [pc, #88]	; (800a498 <TIM_OC6_SetConfig+0xbc>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d007      	beq.n	800a454 <TIM_OC6_SetConfig+0x78>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a15      	ldr	r2, [pc, #84]	; (800a49c <TIM_OC6_SetConfig+0xc0>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d003      	beq.n	800a454 <TIM_OC6_SetConfig+0x78>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a14      	ldr	r2, [pc, #80]	; (800a4a0 <TIM_OC6_SetConfig+0xc4>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d109      	bne.n	800a468 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a45a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	029b      	lsls	r3, r3, #10
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	4313      	orrs	r3, r2
 800a466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	621a      	str	r2, [r3, #32]
}
 800a482:	bf00      	nop
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	40010000 	.word	0x40010000
 800a494:	40010400 	.word	0x40010400
 800a498:	40014000 	.word	0x40014000
 800a49c:	40014400 	.word	0x40014400
 800a4a0:	40014800 	.word	0x40014800

0800a4a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6a1b      	ldr	r3, [r3, #32]
 800a4b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	f023 0201 	bic.w	r2, r3, #1
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	699b      	ldr	r3, [r3, #24]
 800a4c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	011b      	lsls	r3, r3, #4
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f023 030a 	bic.w	r3, r3, #10
 800a4e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	621a      	str	r2, [r3, #32]
}
 800a4f6:	bf00      	nop
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a502:	b480      	push	{r7}
 800a504:	b087      	sub	sp, #28
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	f023 0210 	bic.w	r2, r3, #16
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a52c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	031b      	lsls	r3, r3, #12
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	4313      	orrs	r3, r2
 800a536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a53e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	693a      	ldr	r2, [r7, #16]
 800a546:	4313      	orrs	r3, r2
 800a548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	621a      	str	r2, [r3, #32]
}
 800a556:	bf00      	nop
 800a558:	371c      	adds	r7, #28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
	...

0800a564 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	4b09      	ldr	r3, [pc, #36]	; (800a59c <TIM_ITRx_SetConfig+0x38>)
 800a578:	4013      	ands	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	4313      	orrs	r3, r2
 800a582:	f043 0307 	orr.w	r3, r3, #7
 800a586:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	609a      	str	r2, [r3, #8]
}
 800a58e:	bf00      	nop
 800a590:	3714      	adds	r7, #20
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	ffcfff8f 	.word	0xffcfff8f

0800a5a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	021a      	lsls	r2, r3, #8
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	697a      	ldr	r2, [r7, #20]
 800a5d2:	609a      	str	r2, [r3, #8]
}
 800a5d4:	bf00      	nop
 800a5d6:	371c      	adds	r7, #28
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d101      	bne.n	800a5f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e068      	b.n	800a6ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2202      	movs	r2, #2
 800a604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a2e      	ldr	r2, [pc, #184]	; (800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d004      	beq.n	800a62c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a2d      	ldr	r2, [pc, #180]	; (800a6dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d108      	bne.n	800a63e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a632:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a644:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a1e      	ldr	r2, [pc, #120]	; (800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d01d      	beq.n	800a69e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a66a:	d018      	beq.n	800a69e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a1b      	ldr	r2, [pc, #108]	; (800a6e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d013      	beq.n	800a69e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a1a      	ldr	r2, [pc, #104]	; (800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d00e      	beq.n	800a69e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a18      	ldr	r2, [pc, #96]	; (800a6e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d009      	beq.n	800a69e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a13      	ldr	r2, [pc, #76]	; (800a6dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d004      	beq.n	800a69e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a14      	ldr	r2, [pc, #80]	; (800a6ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d10c      	bne.n	800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	40010000 	.word	0x40010000
 800a6dc:	40010400 	.word	0x40010400
 800a6e0:	40000400 	.word	0x40000400
 800a6e4:	40000800 	.word	0x40000800
 800a6e8:	40000c00 	.word	0x40000c00
 800a6ec:	40001800 	.word	0x40001800

0800a6f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a704:	2b01      	cmp	r3, #1
 800a706:	d101      	bne.n	800a70c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a708:	2302      	movs	r3, #2
 800a70a:	e065      	b.n	800a7d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	4313      	orrs	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	4313      	orrs	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a772:	4313      	orrs	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	041b      	lsls	r3, r3, #16
 800a782:	4313      	orrs	r3, r2
 800a784:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a16      	ldr	r2, [pc, #88]	; (800a7e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d004      	beq.n	800a79a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a14      	ldr	r2, [pc, #80]	; (800a7e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d115      	bne.n	800a7c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	051b      	lsls	r3, r3, #20
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	6a1b      	ldr	r3, [r3, #32]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	40010000 	.word	0x40010000
 800a7e8:	40010400 	.word	0x40010400

0800a7ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e042      	b.n	800a8c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a840:	2b00      	cmp	r3, #0
 800a842:	d106      	bne.n	800a852 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7f6 fefb 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2224      	movs	r2, #36	; 0x24
 800a856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f022 0201 	bic.w	r2, r2, #1
 800a868:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fb06 	bl	800ae7c <UART_SetConfig>
 800a870:	4603      	mov	r3, r0
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	e022      	b.n	800a8c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d002      	beq.n	800a888 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 f864 	bl	800b950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689a      	ldr	r2, [r3, #8]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f042 0201 	orr.w	r2, r2, #1
 800a8b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f001 f8eb 	bl	800ba94 <UART_CheckIdleState>
 800a8be:	4603      	mov	r3, r0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a8e8:	69fa      	ldr	r2, [r7, #28]
 800a8ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d118      	bne.n	800a92a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d013      	beq.n	800a92a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	f003 0320 	and.w	r3, r3, #32
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d104      	bne.n	800a916 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d009      	beq.n	800a92a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f000 8282 	beq.w	800ae24 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	4798      	blx	r3
      }
      return;
 800a928:	e27c      	b.n	800ae24 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 80ef 	beq.w	800ab10 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	4b73      	ldr	r3, [pc, #460]	; (800ab04 <HAL_UART_IRQHandler+0x23c>)
 800a936:	4013      	ands	r3, r2
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d105      	bne.n	800a948 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a93c:	69ba      	ldr	r2, [r7, #24]
 800a93e:	4b72      	ldr	r3, [pc, #456]	; (800ab08 <HAL_UART_IRQHandler+0x240>)
 800a940:	4013      	ands	r3, r2
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 80e4 	beq.w	800ab10 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d010      	beq.n	800a974 <HAL_UART_IRQHandler+0xac>
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00b      	beq.n	800a974 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2201      	movs	r2, #1
 800a962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a96a:	f043 0201 	orr.w	r2, r3, #1
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	f003 0302 	and.w	r3, r3, #2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d010      	beq.n	800a9a0 <HAL_UART_IRQHandler+0xd8>
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2202      	movs	r2, #2
 800a98e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a996:	f043 0204 	orr.w	r2, r3, #4
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	f003 0304 	and.w	r3, r3, #4
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d010      	beq.n	800a9cc <HAL_UART_IRQHandler+0x104>
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00b      	beq.n	800a9cc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2204      	movs	r2, #4
 800a9ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9c2:	f043 0202 	orr.w	r2, r3, #2
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	f003 0308 	and.w	r3, r3, #8
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d015      	beq.n	800aa02 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	f003 0320 	and.w	r3, r3, #32
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d104      	bne.n	800a9ea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	4b48      	ldr	r3, [pc, #288]	; (800ab04 <HAL_UART_IRQHandler+0x23c>)
 800a9e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00b      	beq.n	800aa02 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	2208      	movs	r2, #8
 800a9f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9f8:	f043 0208 	orr.w	r2, r3, #8
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d011      	beq.n	800aa30 <HAL_UART_IRQHandler+0x168>
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00c      	beq.n	800aa30 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa26:	f043 0220 	orr.w	r2, r3, #32
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 81f6 	beq.w	800ae28 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d011      	beq.n	800aa6a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	f003 0320 	and.w	r3, r3, #32
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d007      	beq.n	800aa6a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d003      	beq.n	800aa6a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa70:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7c:	2b40      	cmp	r3, #64	; 0x40
 800aa7e:	d004      	beq.n	800aa8a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d031      	beq.n	800aaee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 f8ce 	bl	800bc2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9a:	2b40      	cmp	r3, #64	; 0x40
 800aa9c:	d123      	bne.n	800aae6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	689a      	ldr	r2, [r3, #8]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d013      	beq.n	800aade <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaba:	4a14      	ldr	r2, [pc, #80]	; (800ab0c <HAL_UART_IRQHandler+0x244>)
 800aabc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7f8 f816 	bl	8002af4 <HAL_DMA_Abort_IT>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d017      	beq.n	800aafe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800aad8:	4610      	mov	r0, r2
 800aada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aadc:	e00f      	b.n	800aafe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f9b6 	bl	800ae50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aae4:	e00b      	b.n	800aafe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f9b2 	bl	800ae50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaec:	e007      	b.n	800aafe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f9ae 	bl	800ae50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800aafc:	e194      	b.n	800ae28 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aafe:	bf00      	nop
    return;
 800ab00:	e192      	b.n	800ae28 <HAL_UART_IRQHandler+0x560>
 800ab02:	bf00      	nop
 800ab04:	10000001 	.word	0x10000001
 800ab08:	04000120 	.word	0x04000120
 800ab0c:	0800bc91 	.word	0x0800bc91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	f040 810f 	bne.w	800ad38 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	f003 0310 	and.w	r3, r3, #16
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 8109 	beq.w	800ad38 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	f003 0310 	and.w	r3, r3, #16
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 8103 	beq.w	800ad38 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2210      	movs	r2, #16
 800ab38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab44:	2b40      	cmp	r3, #64	; 0x40
 800ab46:	f040 80bb 	bne.w	800acc0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a8f      	ldr	r2, [pc, #572]	; (800ad90 <HAL_UART_IRQHandler+0x4c8>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d059      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a8d      	ldr	r2, [pc, #564]	; (800ad94 <HAL_UART_IRQHandler+0x4cc>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d053      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a8b      	ldr	r2, [pc, #556]	; (800ad98 <HAL_UART_IRQHandler+0x4d0>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d04d      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a89      	ldr	r2, [pc, #548]	; (800ad9c <HAL_UART_IRQHandler+0x4d4>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d047      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a87      	ldr	r2, [pc, #540]	; (800ada0 <HAL_UART_IRQHandler+0x4d8>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d041      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a85      	ldr	r2, [pc, #532]	; (800ada4 <HAL_UART_IRQHandler+0x4dc>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d03b      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a83      	ldr	r2, [pc, #524]	; (800ada8 <HAL_UART_IRQHandler+0x4e0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d035      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a81      	ldr	r2, [pc, #516]	; (800adac <HAL_UART_IRQHandler+0x4e4>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d02f      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a7f      	ldr	r2, [pc, #508]	; (800adb0 <HAL_UART_IRQHandler+0x4e8>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d029      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a7d      	ldr	r2, [pc, #500]	; (800adb4 <HAL_UART_IRQHandler+0x4ec>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d023      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a7b      	ldr	r2, [pc, #492]	; (800adb8 <HAL_UART_IRQHandler+0x4f0>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d01d      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a79      	ldr	r2, [pc, #484]	; (800adbc <HAL_UART_IRQHandler+0x4f4>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d017      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a77      	ldr	r2, [pc, #476]	; (800adc0 <HAL_UART_IRQHandler+0x4f8>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d011      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a75      	ldr	r2, [pc, #468]	; (800adc4 <HAL_UART_IRQHandler+0x4fc>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d00b      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a73      	ldr	r2, [pc, #460]	; (800adc8 <HAL_UART_IRQHandler+0x500>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d005      	beq.n	800ac0a <HAL_UART_IRQHandler+0x342>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a71      	ldr	r2, [pc, #452]	; (800adcc <HAL_UART_IRQHandler+0x504>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d105      	bne.n	800ac16 <HAL_UART_IRQHandler+0x34e>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	e004      	b.n	800ac20 <HAL_UART_IRQHandler+0x358>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800ac22:	893b      	ldrh	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 8101 	beq.w	800ae2c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac30:	893a      	ldrh	r2, [r7, #8]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	f080 80fa 	bcs.w	800ae2c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	893a      	ldrh	r2, [r7, #8]
 800ac3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4a:	d02b      	beq.n	800aca4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	689a      	ldr	r2, [r3, #8]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0201 	bic.w	r2, r2, #1
 800ac6a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac7a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2220      	movs	r2, #32
 800ac80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f022 0210 	bic.w	r2, r2, #16
 800ac98:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7f7 fc0a 	bl	80024b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f8d3 	bl	800ae64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800acbe:	e0b5      	b.n	800ae2c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800accc:	b29b      	uxth	r3, r3
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acd8:	b29b      	uxth	r3, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 80a8 	beq.w	800ae30 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800ace0:	897b      	ldrh	r3, [r7, #10]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 80a4 	beq.w	800ae30 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800acf6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6899      	ldr	r1, [r3, #8]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	4b33      	ldr	r3, [pc, #204]	; (800add0 <HAL_UART_IRQHandler+0x508>)
 800ad04:	400b      	ands	r3, r1
 800ad06:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f022 0210 	bic.w	r2, r2, #16
 800ad2a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad2c:	897b      	ldrh	r3, [r7, #10]
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f897 	bl	800ae64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad36:	e07b      	b.n	800ae30 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00d      	beq.n	800ad5e <HAL_UART_IRQHandler+0x496>
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d008      	beq.n	800ad5e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ad54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 ffca 	bl	800bcf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad5c:	e06b      	b.n	800ae36 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d035      	beq.n	800add4 <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d104      	bne.n	800ad7c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d02b      	beq.n	800add4 <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d057      	beq.n	800ae34 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	4798      	blx	r3
    }
    return;
 800ad8c:	e052      	b.n	800ae34 <HAL_UART_IRQHandler+0x56c>
 800ad8e:	bf00      	nop
 800ad90:	40020010 	.word	0x40020010
 800ad94:	40020028 	.word	0x40020028
 800ad98:	40020040 	.word	0x40020040
 800ad9c:	40020058 	.word	0x40020058
 800ada0:	40020070 	.word	0x40020070
 800ada4:	40020088 	.word	0x40020088
 800ada8:	400200a0 	.word	0x400200a0
 800adac:	400200b8 	.word	0x400200b8
 800adb0:	40020410 	.word	0x40020410
 800adb4:	40020428 	.word	0x40020428
 800adb8:	40020440 	.word	0x40020440
 800adbc:	40020458 	.word	0x40020458
 800adc0:	40020470 	.word	0x40020470
 800adc4:	40020488 	.word	0x40020488
 800adc8:	400204a0 	.word	0x400204a0
 800adcc:	400204b8 	.word	0x400204b8
 800add0:	effffffe 	.word	0xeffffffe
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adda:	2b00      	cmp	r3, #0
 800addc:	d008      	beq.n	800adf0 <HAL_UART_IRQHandler+0x528>
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d003      	beq.n	800adf0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 ff67 	bl	800bcbc <UART_EndTransmit_IT>
    return;
 800adee:	e022      	b.n	800ae36 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d008      	beq.n	800ae0c <HAL_UART_IRQHandler+0x544>
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d003      	beq.n	800ae0c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 ff87 	bl	800bd18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae0a:	e014      	b.n	800ae36 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00f      	beq.n	800ae36 <HAL_UART_IRQHandler+0x56e>
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	da0c      	bge.n	800ae36 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 ff71 	bl	800bd04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae22:	e008      	b.n	800ae36 <HAL_UART_IRQHandler+0x56e>
      return;
 800ae24:	bf00      	nop
 800ae26:	e006      	b.n	800ae36 <HAL_UART_IRQHandler+0x56e>
    return;
 800ae28:	bf00      	nop
 800ae2a:	e004      	b.n	800ae36 <HAL_UART_IRQHandler+0x56e>
      return;
 800ae2c:	bf00      	nop
 800ae2e:	e002      	b.n	800ae36 <HAL_UART_IRQHandler+0x56e>
      return;
 800ae30:	bf00      	nop
 800ae32:	e000      	b.n	800ae36 <HAL_UART_IRQHandler+0x56e>
    return;
 800ae34:	bf00      	nop
  }
}
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae80:	b092      	sub	sp, #72	; 0x48
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	431a      	orrs	r2, r3
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	695b      	ldr	r3, [r3, #20]
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	4bbe      	ldr	r3, [pc, #760]	; (800b1a4 <UART_SetConfig+0x328>)
 800aeac:	4013      	ands	r3, r2
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	6812      	ldr	r2, [r2, #0]
 800aeb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aeb4:	430b      	orrs	r3, r1
 800aeb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	68da      	ldr	r2, [r3, #12]
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	430a      	orrs	r2, r1
 800aecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4ab3      	ldr	r2, [pc, #716]	; (800b1a8 <UART_SetConfig+0x32c>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d004      	beq.n	800aee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aee4:	4313      	orrs	r3, r2
 800aee6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	689a      	ldr	r2, [r3, #8]
 800aeee:	4baf      	ldr	r3, [pc, #700]	; (800b1ac <UART_SetConfig+0x330>)
 800aef0:	4013      	ands	r3, r2
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	6812      	ldr	r2, [r2, #0]
 800aef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aef8:	430b      	orrs	r3, r1
 800aefa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	f023 010f 	bic.w	r1, r3, #15
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	430a      	orrs	r2, r1
 800af10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4aa6      	ldr	r2, [pc, #664]	; (800b1b0 <UART_SetConfig+0x334>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d177      	bne.n	800b00c <UART_SetConfig+0x190>
 800af1c:	4ba5      	ldr	r3, [pc, #660]	; (800b1b4 <UART_SetConfig+0x338>)
 800af1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af24:	2b28      	cmp	r3, #40	; 0x28
 800af26:	d86d      	bhi.n	800b004 <UART_SetConfig+0x188>
 800af28:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <UART_SetConfig+0xb4>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800afd5 	.word	0x0800afd5
 800af34:	0800b005 	.word	0x0800b005
 800af38:	0800b005 	.word	0x0800b005
 800af3c:	0800b005 	.word	0x0800b005
 800af40:	0800b005 	.word	0x0800b005
 800af44:	0800b005 	.word	0x0800b005
 800af48:	0800b005 	.word	0x0800b005
 800af4c:	0800b005 	.word	0x0800b005
 800af50:	0800afdd 	.word	0x0800afdd
 800af54:	0800b005 	.word	0x0800b005
 800af58:	0800b005 	.word	0x0800b005
 800af5c:	0800b005 	.word	0x0800b005
 800af60:	0800b005 	.word	0x0800b005
 800af64:	0800b005 	.word	0x0800b005
 800af68:	0800b005 	.word	0x0800b005
 800af6c:	0800b005 	.word	0x0800b005
 800af70:	0800afe5 	.word	0x0800afe5
 800af74:	0800b005 	.word	0x0800b005
 800af78:	0800b005 	.word	0x0800b005
 800af7c:	0800b005 	.word	0x0800b005
 800af80:	0800b005 	.word	0x0800b005
 800af84:	0800b005 	.word	0x0800b005
 800af88:	0800b005 	.word	0x0800b005
 800af8c:	0800b005 	.word	0x0800b005
 800af90:	0800afed 	.word	0x0800afed
 800af94:	0800b005 	.word	0x0800b005
 800af98:	0800b005 	.word	0x0800b005
 800af9c:	0800b005 	.word	0x0800b005
 800afa0:	0800b005 	.word	0x0800b005
 800afa4:	0800b005 	.word	0x0800b005
 800afa8:	0800b005 	.word	0x0800b005
 800afac:	0800b005 	.word	0x0800b005
 800afb0:	0800aff5 	.word	0x0800aff5
 800afb4:	0800b005 	.word	0x0800b005
 800afb8:	0800b005 	.word	0x0800b005
 800afbc:	0800b005 	.word	0x0800b005
 800afc0:	0800b005 	.word	0x0800b005
 800afc4:	0800b005 	.word	0x0800b005
 800afc8:	0800b005 	.word	0x0800b005
 800afcc:	0800b005 	.word	0x0800b005
 800afd0:	0800affd 	.word	0x0800affd
 800afd4:	2301      	movs	r3, #1
 800afd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afda:	e222      	b.n	800b422 <UART_SetConfig+0x5a6>
 800afdc:	2304      	movs	r3, #4
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afe2:	e21e      	b.n	800b422 <UART_SetConfig+0x5a6>
 800afe4:	2308      	movs	r3, #8
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afea:	e21a      	b.n	800b422 <UART_SetConfig+0x5a6>
 800afec:	2310      	movs	r3, #16
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aff2:	e216      	b.n	800b422 <UART_SetConfig+0x5a6>
 800aff4:	2320      	movs	r3, #32
 800aff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800affa:	e212      	b.n	800b422 <UART_SetConfig+0x5a6>
 800affc:	2340      	movs	r3, #64	; 0x40
 800affe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b002:	e20e      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b004:	2380      	movs	r3, #128	; 0x80
 800b006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b00a:	e20a      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a69      	ldr	r2, [pc, #420]	; (800b1b8 <UART_SetConfig+0x33c>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d130      	bne.n	800b078 <UART_SetConfig+0x1fc>
 800b016:	4b67      	ldr	r3, [pc, #412]	; (800b1b4 <UART_SetConfig+0x338>)
 800b018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01a:	f003 0307 	and.w	r3, r3, #7
 800b01e:	2b05      	cmp	r3, #5
 800b020:	d826      	bhi.n	800b070 <UART_SetConfig+0x1f4>
 800b022:	a201      	add	r2, pc, #4	; (adr r2, 800b028 <UART_SetConfig+0x1ac>)
 800b024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b028:	0800b041 	.word	0x0800b041
 800b02c:	0800b049 	.word	0x0800b049
 800b030:	0800b051 	.word	0x0800b051
 800b034:	0800b059 	.word	0x0800b059
 800b038:	0800b061 	.word	0x0800b061
 800b03c:	0800b069 	.word	0x0800b069
 800b040:	2300      	movs	r3, #0
 800b042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b046:	e1ec      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b048:	2304      	movs	r3, #4
 800b04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b04e:	e1e8      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b050:	2308      	movs	r3, #8
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b056:	e1e4      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b058:	2310      	movs	r3, #16
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05e:	e1e0      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b060:	2320      	movs	r3, #32
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b066:	e1dc      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b068:	2340      	movs	r3, #64	; 0x40
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06e:	e1d8      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b070:	2380      	movs	r3, #128	; 0x80
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b076:	e1d4      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a4f      	ldr	r2, [pc, #316]	; (800b1bc <UART_SetConfig+0x340>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d130      	bne.n	800b0e4 <UART_SetConfig+0x268>
 800b082:	4b4c      	ldr	r3, [pc, #304]	; (800b1b4 <UART_SetConfig+0x338>)
 800b084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	2b05      	cmp	r3, #5
 800b08c:	d826      	bhi.n	800b0dc <UART_SetConfig+0x260>
 800b08e:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <UART_SetConfig+0x218>)
 800b090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b094:	0800b0ad 	.word	0x0800b0ad
 800b098:	0800b0b5 	.word	0x0800b0b5
 800b09c:	0800b0bd 	.word	0x0800b0bd
 800b0a0:	0800b0c5 	.word	0x0800b0c5
 800b0a4:	0800b0cd 	.word	0x0800b0cd
 800b0a8:	0800b0d5 	.word	0x0800b0d5
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0b2:	e1b6      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ba:	e1b2      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b0bc:	2308      	movs	r3, #8
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0c2:	e1ae      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b0c4:	2310      	movs	r3, #16
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ca:	e1aa      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b0cc:	2320      	movs	r3, #32
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0d2:	e1a6      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b0d4:	2340      	movs	r3, #64	; 0x40
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0da:	e1a2      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b0dc:	2380      	movs	r3, #128	; 0x80
 800b0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0e2:	e19e      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a35      	ldr	r2, [pc, #212]	; (800b1c0 <UART_SetConfig+0x344>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d130      	bne.n	800b150 <UART_SetConfig+0x2d4>
 800b0ee:	4b31      	ldr	r3, [pc, #196]	; (800b1b4 <UART_SetConfig+0x338>)
 800b0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f2:	f003 0307 	and.w	r3, r3, #7
 800b0f6:	2b05      	cmp	r3, #5
 800b0f8:	d826      	bhi.n	800b148 <UART_SetConfig+0x2cc>
 800b0fa:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <UART_SetConfig+0x284>)
 800b0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b100:	0800b119 	.word	0x0800b119
 800b104:	0800b121 	.word	0x0800b121
 800b108:	0800b129 	.word	0x0800b129
 800b10c:	0800b131 	.word	0x0800b131
 800b110:	0800b139 	.word	0x0800b139
 800b114:	0800b141 	.word	0x0800b141
 800b118:	2300      	movs	r3, #0
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b11e:	e180      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b120:	2304      	movs	r3, #4
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b126:	e17c      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b128:	2308      	movs	r3, #8
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b12e:	e178      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b130:	2310      	movs	r3, #16
 800b132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b136:	e174      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b138:	2320      	movs	r3, #32
 800b13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b13e:	e170      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b140:	2340      	movs	r3, #64	; 0x40
 800b142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b146:	e16c      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b148:	2380      	movs	r3, #128	; 0x80
 800b14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b14e:	e168      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a1b      	ldr	r2, [pc, #108]	; (800b1c4 <UART_SetConfig+0x348>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d142      	bne.n	800b1e0 <UART_SetConfig+0x364>
 800b15a:	4b16      	ldr	r3, [pc, #88]	; (800b1b4 <UART_SetConfig+0x338>)
 800b15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b15e:	f003 0307 	and.w	r3, r3, #7
 800b162:	2b05      	cmp	r3, #5
 800b164:	d838      	bhi.n	800b1d8 <UART_SetConfig+0x35c>
 800b166:	a201      	add	r2, pc, #4	; (adr r2, 800b16c <UART_SetConfig+0x2f0>)
 800b168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16c:	0800b185 	.word	0x0800b185
 800b170:	0800b18d 	.word	0x0800b18d
 800b174:	0800b195 	.word	0x0800b195
 800b178:	0800b19d 	.word	0x0800b19d
 800b17c:	0800b1c9 	.word	0x0800b1c9
 800b180:	0800b1d1 	.word	0x0800b1d1
 800b184:	2300      	movs	r3, #0
 800b186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18a:	e14a      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b18c:	2304      	movs	r3, #4
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b192:	e146      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b194:	2308      	movs	r3, #8
 800b196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b19a:	e142      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b19c:	2310      	movs	r3, #16
 800b19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1a2:	e13e      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b1a4:	cfff69f3 	.word	0xcfff69f3
 800b1a8:	58000c00 	.word	0x58000c00
 800b1ac:	11fff4ff 	.word	0x11fff4ff
 800b1b0:	40011000 	.word	0x40011000
 800b1b4:	58024400 	.word	0x58024400
 800b1b8:	40004400 	.word	0x40004400
 800b1bc:	40004800 	.word	0x40004800
 800b1c0:	40004c00 	.word	0x40004c00
 800b1c4:	40005000 	.word	0x40005000
 800b1c8:	2320      	movs	r3, #32
 800b1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ce:	e128      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1d6:	e124      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b1d8:	2380      	movs	r3, #128	; 0x80
 800b1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1de:	e120      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4acb      	ldr	r2, [pc, #812]	; (800b514 <UART_SetConfig+0x698>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d176      	bne.n	800b2d8 <UART_SetConfig+0x45c>
 800b1ea:	4bcb      	ldr	r3, [pc, #812]	; (800b518 <UART_SetConfig+0x69c>)
 800b1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1f2:	2b28      	cmp	r3, #40	; 0x28
 800b1f4:	d86c      	bhi.n	800b2d0 <UART_SetConfig+0x454>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <UART_SetConfig+0x380>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b2a1 	.word	0x0800b2a1
 800b200:	0800b2d1 	.word	0x0800b2d1
 800b204:	0800b2d1 	.word	0x0800b2d1
 800b208:	0800b2d1 	.word	0x0800b2d1
 800b20c:	0800b2d1 	.word	0x0800b2d1
 800b210:	0800b2d1 	.word	0x0800b2d1
 800b214:	0800b2d1 	.word	0x0800b2d1
 800b218:	0800b2d1 	.word	0x0800b2d1
 800b21c:	0800b2a9 	.word	0x0800b2a9
 800b220:	0800b2d1 	.word	0x0800b2d1
 800b224:	0800b2d1 	.word	0x0800b2d1
 800b228:	0800b2d1 	.word	0x0800b2d1
 800b22c:	0800b2d1 	.word	0x0800b2d1
 800b230:	0800b2d1 	.word	0x0800b2d1
 800b234:	0800b2d1 	.word	0x0800b2d1
 800b238:	0800b2d1 	.word	0x0800b2d1
 800b23c:	0800b2b1 	.word	0x0800b2b1
 800b240:	0800b2d1 	.word	0x0800b2d1
 800b244:	0800b2d1 	.word	0x0800b2d1
 800b248:	0800b2d1 	.word	0x0800b2d1
 800b24c:	0800b2d1 	.word	0x0800b2d1
 800b250:	0800b2d1 	.word	0x0800b2d1
 800b254:	0800b2d1 	.word	0x0800b2d1
 800b258:	0800b2d1 	.word	0x0800b2d1
 800b25c:	0800b2b9 	.word	0x0800b2b9
 800b260:	0800b2d1 	.word	0x0800b2d1
 800b264:	0800b2d1 	.word	0x0800b2d1
 800b268:	0800b2d1 	.word	0x0800b2d1
 800b26c:	0800b2d1 	.word	0x0800b2d1
 800b270:	0800b2d1 	.word	0x0800b2d1
 800b274:	0800b2d1 	.word	0x0800b2d1
 800b278:	0800b2d1 	.word	0x0800b2d1
 800b27c:	0800b2c1 	.word	0x0800b2c1
 800b280:	0800b2d1 	.word	0x0800b2d1
 800b284:	0800b2d1 	.word	0x0800b2d1
 800b288:	0800b2d1 	.word	0x0800b2d1
 800b28c:	0800b2d1 	.word	0x0800b2d1
 800b290:	0800b2d1 	.word	0x0800b2d1
 800b294:	0800b2d1 	.word	0x0800b2d1
 800b298:	0800b2d1 	.word	0x0800b2d1
 800b29c:	0800b2c9 	.word	0x0800b2c9
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2a6:	e0bc      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ae:	e0b8      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b2b0:	2308      	movs	r3, #8
 800b2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2b6:	e0b4      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b2b8:	2310      	movs	r3, #16
 800b2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2be:	e0b0      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b2c0:	2320      	movs	r3, #32
 800b2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2c6:	e0ac      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b2c8:	2340      	movs	r3, #64	; 0x40
 800b2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2ce:	e0a8      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b2d0:	2380      	movs	r3, #128	; 0x80
 800b2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b2d6:	e0a4      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a8f      	ldr	r2, [pc, #572]	; (800b51c <UART_SetConfig+0x6a0>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d130      	bne.n	800b344 <UART_SetConfig+0x4c8>
 800b2e2:	4b8d      	ldr	r3, [pc, #564]	; (800b518 <UART_SetConfig+0x69c>)
 800b2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2e6:	f003 0307 	and.w	r3, r3, #7
 800b2ea:	2b05      	cmp	r3, #5
 800b2ec:	d826      	bhi.n	800b33c <UART_SetConfig+0x4c0>
 800b2ee:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <UART_SetConfig+0x478>)
 800b2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f4:	0800b30d 	.word	0x0800b30d
 800b2f8:	0800b315 	.word	0x0800b315
 800b2fc:	0800b31d 	.word	0x0800b31d
 800b300:	0800b325 	.word	0x0800b325
 800b304:	0800b32d 	.word	0x0800b32d
 800b308:	0800b335 	.word	0x0800b335
 800b30c:	2300      	movs	r3, #0
 800b30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b312:	e086      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b314:	2304      	movs	r3, #4
 800b316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b31a:	e082      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b31c:	2308      	movs	r3, #8
 800b31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b322:	e07e      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b324:	2310      	movs	r3, #16
 800b326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b32a:	e07a      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b32c:	2320      	movs	r3, #32
 800b32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b332:	e076      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b334:	2340      	movs	r3, #64	; 0x40
 800b336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33a:	e072      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b33c:	2380      	movs	r3, #128	; 0x80
 800b33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b342:	e06e      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a75      	ldr	r2, [pc, #468]	; (800b520 <UART_SetConfig+0x6a4>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d130      	bne.n	800b3b0 <UART_SetConfig+0x534>
 800b34e:	4b72      	ldr	r3, [pc, #456]	; (800b518 <UART_SetConfig+0x69c>)
 800b350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	2b05      	cmp	r3, #5
 800b358:	d826      	bhi.n	800b3a8 <UART_SetConfig+0x52c>
 800b35a:	a201      	add	r2, pc, #4	; (adr r2, 800b360 <UART_SetConfig+0x4e4>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b379 	.word	0x0800b379
 800b364:	0800b381 	.word	0x0800b381
 800b368:	0800b389 	.word	0x0800b389
 800b36c:	0800b391 	.word	0x0800b391
 800b370:	0800b399 	.word	0x0800b399
 800b374:	0800b3a1 	.word	0x0800b3a1
 800b378:	2300      	movs	r3, #0
 800b37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b37e:	e050      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b380:	2304      	movs	r3, #4
 800b382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b386:	e04c      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b388:	2308      	movs	r3, #8
 800b38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b38e:	e048      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b390:	2310      	movs	r3, #16
 800b392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b396:	e044      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b398:	2320      	movs	r3, #32
 800b39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b39e:	e040      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b3a0:	2340      	movs	r3, #64	; 0x40
 800b3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a6:	e03c      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b3a8:	2380      	movs	r3, #128	; 0x80
 800b3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ae:	e038      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a5b      	ldr	r2, [pc, #364]	; (800b524 <UART_SetConfig+0x6a8>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d130      	bne.n	800b41c <UART_SetConfig+0x5a0>
 800b3ba:	4b57      	ldr	r3, [pc, #348]	; (800b518 <UART_SetConfig+0x69c>)
 800b3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3be:	f003 0307 	and.w	r3, r3, #7
 800b3c2:	2b05      	cmp	r3, #5
 800b3c4:	d826      	bhi.n	800b414 <UART_SetConfig+0x598>
 800b3c6:	a201      	add	r2, pc, #4	; (adr r2, 800b3cc <UART_SetConfig+0x550>)
 800b3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3cc:	0800b3e5 	.word	0x0800b3e5
 800b3d0:	0800b3ed 	.word	0x0800b3ed
 800b3d4:	0800b3f5 	.word	0x0800b3f5
 800b3d8:	0800b3fd 	.word	0x0800b3fd
 800b3dc:	0800b405 	.word	0x0800b405
 800b3e0:	0800b40d 	.word	0x0800b40d
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ea:	e01a      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b3ec:	2304      	movs	r3, #4
 800b3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3f2:	e016      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b3f4:	2308      	movs	r3, #8
 800b3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3fa:	e012      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b3fc:	2310      	movs	r3, #16
 800b3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b402:	e00e      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b404:	2320      	movs	r3, #32
 800b406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b40a:	e00a      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b40c:	2340      	movs	r3, #64	; 0x40
 800b40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b412:	e006      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b414:	2380      	movs	r3, #128	; 0x80
 800b416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b41a:	e002      	b.n	800b422 <UART_SetConfig+0x5a6>
 800b41c:	2380      	movs	r3, #128	; 0x80
 800b41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a3f      	ldr	r2, [pc, #252]	; (800b524 <UART_SetConfig+0x6a8>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	f040 80f8 	bne.w	800b61e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b42e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b432:	2b20      	cmp	r3, #32
 800b434:	dc46      	bgt.n	800b4c4 <UART_SetConfig+0x648>
 800b436:	2b02      	cmp	r3, #2
 800b438:	f2c0 8082 	blt.w	800b540 <UART_SetConfig+0x6c4>
 800b43c:	3b02      	subs	r3, #2
 800b43e:	2b1e      	cmp	r3, #30
 800b440:	d87e      	bhi.n	800b540 <UART_SetConfig+0x6c4>
 800b442:	a201      	add	r2, pc, #4	; (adr r2, 800b448 <UART_SetConfig+0x5cc>)
 800b444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b448:	0800b4cb 	.word	0x0800b4cb
 800b44c:	0800b541 	.word	0x0800b541
 800b450:	0800b4d3 	.word	0x0800b4d3
 800b454:	0800b541 	.word	0x0800b541
 800b458:	0800b541 	.word	0x0800b541
 800b45c:	0800b541 	.word	0x0800b541
 800b460:	0800b4e3 	.word	0x0800b4e3
 800b464:	0800b541 	.word	0x0800b541
 800b468:	0800b541 	.word	0x0800b541
 800b46c:	0800b541 	.word	0x0800b541
 800b470:	0800b541 	.word	0x0800b541
 800b474:	0800b541 	.word	0x0800b541
 800b478:	0800b541 	.word	0x0800b541
 800b47c:	0800b541 	.word	0x0800b541
 800b480:	0800b4f3 	.word	0x0800b4f3
 800b484:	0800b541 	.word	0x0800b541
 800b488:	0800b541 	.word	0x0800b541
 800b48c:	0800b541 	.word	0x0800b541
 800b490:	0800b541 	.word	0x0800b541
 800b494:	0800b541 	.word	0x0800b541
 800b498:	0800b541 	.word	0x0800b541
 800b49c:	0800b541 	.word	0x0800b541
 800b4a0:	0800b541 	.word	0x0800b541
 800b4a4:	0800b541 	.word	0x0800b541
 800b4a8:	0800b541 	.word	0x0800b541
 800b4ac:	0800b541 	.word	0x0800b541
 800b4b0:	0800b541 	.word	0x0800b541
 800b4b4:	0800b541 	.word	0x0800b541
 800b4b8:	0800b541 	.word	0x0800b541
 800b4bc:	0800b541 	.word	0x0800b541
 800b4c0:	0800b533 	.word	0x0800b533
 800b4c4:	2b40      	cmp	r3, #64	; 0x40
 800b4c6:	d037      	beq.n	800b538 <UART_SetConfig+0x6bc>
 800b4c8:	e03a      	b.n	800b540 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b4ca:	f7fd f9d9 	bl	8008880 <HAL_RCCEx_GetD3PCLK1Freq>
 800b4ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b4d0:	e03c      	b.n	800b54c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fd f9e8 	bl	80088ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4e0:	e034      	b.n	800b54c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4e2:	f107 0318 	add.w	r3, r7, #24
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fd fb34 	bl	8008b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f0:	e02c      	b.n	800b54c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4f2:	4b09      	ldr	r3, [pc, #36]	; (800b518 <UART_SetConfig+0x69c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0320 	and.w	r3, r3, #32
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d016      	beq.n	800b52c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4fe:	4b06      	ldr	r3, [pc, #24]	; (800b518 <UART_SetConfig+0x69c>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	08db      	lsrs	r3, r3, #3
 800b504:	f003 0303 	and.w	r3, r3, #3
 800b508:	4a07      	ldr	r2, [pc, #28]	; (800b528 <UART_SetConfig+0x6ac>)
 800b50a:	fa22 f303 	lsr.w	r3, r2, r3
 800b50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b510:	e01c      	b.n	800b54c <UART_SetConfig+0x6d0>
 800b512:	bf00      	nop
 800b514:	40011400 	.word	0x40011400
 800b518:	58024400 	.word	0x58024400
 800b51c:	40007800 	.word	0x40007800
 800b520:	40007c00 	.word	0x40007c00
 800b524:	58000c00 	.word	0x58000c00
 800b528:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b52c:	4b9e      	ldr	r3, [pc, #632]	; (800b7a8 <UART_SetConfig+0x92c>)
 800b52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b530:	e00c      	b.n	800b54c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b532:	4b9e      	ldr	r3, [pc, #632]	; (800b7ac <UART_SetConfig+0x930>)
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b536:	e009      	b.n	800b54c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b53e:	e005      	b.n	800b54c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b540:	2300      	movs	r3, #0
 800b542:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b54a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f000 81e0 	beq.w	800b914 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b558:	4a95      	ldr	r2, [pc, #596]	; (800b7b0 <UART_SetConfig+0x934>)
 800b55a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b55e:	461a      	mov	r2, r3
 800b560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b562:	fbb3 f3f2 	udiv	r3, r3, r2
 800b566:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	4613      	mov	r3, r2
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	4413      	add	r3, r2
 800b572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b574:	429a      	cmp	r2, r3
 800b576:	d305      	bcc.n	800b584 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b57e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b580:	429a      	cmp	r2, r3
 800b582:	d903      	bls.n	800b58c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b58a:	e1c3      	b.n	800b914 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58e:	2200      	movs	r2, #0
 800b590:	60bb      	str	r3, [r7, #8]
 800b592:	60fa      	str	r2, [r7, #12]
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b598:	4a85      	ldr	r2, [pc, #532]	; (800b7b0 <UART_SetConfig+0x934>)
 800b59a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	607a      	str	r2, [r7, #4]
 800b5a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b5ae:	f7f4 feef 	bl	8000390 <__aeabi_uldivmod>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	f04f 0200 	mov.w	r2, #0
 800b5be:	f04f 0300 	mov.w	r3, #0
 800b5c2:	020b      	lsls	r3, r1, #8
 800b5c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b5c8:	0202      	lsls	r2, r0, #8
 800b5ca:	6979      	ldr	r1, [r7, #20]
 800b5cc:	6849      	ldr	r1, [r1, #4]
 800b5ce:	0849      	lsrs	r1, r1, #1
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	4605      	mov	r5, r0
 800b5d6:	eb12 0804 	adds.w	r8, r2, r4
 800b5da:	eb43 0905 	adc.w	r9, r3, r5
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	469a      	mov	sl, r3
 800b5e6:	4693      	mov	fp, r2
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	465b      	mov	r3, fp
 800b5ec:	4640      	mov	r0, r8
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	f7f4 fece 	bl	8000390 <__aeabi_uldivmod>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b602:	d308      	bcc.n	800b616 <UART_SetConfig+0x79a>
 800b604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b60a:	d204      	bcs.n	800b616 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b612:	60da      	str	r2, [r3, #12]
 800b614:	e17e      	b.n	800b914 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b61c:	e17a      	b.n	800b914 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b626:	f040 80c7 	bne.w	800b7b8 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800b62a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b62e:	2b20      	cmp	r3, #32
 800b630:	dc48      	bgt.n	800b6c4 <UART_SetConfig+0x848>
 800b632:	2b00      	cmp	r3, #0
 800b634:	db7b      	blt.n	800b72e <UART_SetConfig+0x8b2>
 800b636:	2b20      	cmp	r3, #32
 800b638:	d879      	bhi.n	800b72e <UART_SetConfig+0x8b2>
 800b63a:	a201      	add	r2, pc, #4	; (adr r2, 800b640 <UART_SetConfig+0x7c4>)
 800b63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b640:	0800b6cb 	.word	0x0800b6cb
 800b644:	0800b6d3 	.word	0x0800b6d3
 800b648:	0800b72f 	.word	0x0800b72f
 800b64c:	0800b72f 	.word	0x0800b72f
 800b650:	0800b6db 	.word	0x0800b6db
 800b654:	0800b72f 	.word	0x0800b72f
 800b658:	0800b72f 	.word	0x0800b72f
 800b65c:	0800b72f 	.word	0x0800b72f
 800b660:	0800b6eb 	.word	0x0800b6eb
 800b664:	0800b72f 	.word	0x0800b72f
 800b668:	0800b72f 	.word	0x0800b72f
 800b66c:	0800b72f 	.word	0x0800b72f
 800b670:	0800b72f 	.word	0x0800b72f
 800b674:	0800b72f 	.word	0x0800b72f
 800b678:	0800b72f 	.word	0x0800b72f
 800b67c:	0800b72f 	.word	0x0800b72f
 800b680:	0800b6fb 	.word	0x0800b6fb
 800b684:	0800b72f 	.word	0x0800b72f
 800b688:	0800b72f 	.word	0x0800b72f
 800b68c:	0800b72f 	.word	0x0800b72f
 800b690:	0800b72f 	.word	0x0800b72f
 800b694:	0800b72f 	.word	0x0800b72f
 800b698:	0800b72f 	.word	0x0800b72f
 800b69c:	0800b72f 	.word	0x0800b72f
 800b6a0:	0800b72f 	.word	0x0800b72f
 800b6a4:	0800b72f 	.word	0x0800b72f
 800b6a8:	0800b72f 	.word	0x0800b72f
 800b6ac:	0800b72f 	.word	0x0800b72f
 800b6b0:	0800b72f 	.word	0x0800b72f
 800b6b4:	0800b72f 	.word	0x0800b72f
 800b6b8:	0800b72f 	.word	0x0800b72f
 800b6bc:	0800b72f 	.word	0x0800b72f
 800b6c0:	0800b721 	.word	0x0800b721
 800b6c4:	2b40      	cmp	r3, #64	; 0x40
 800b6c6:	d02e      	beq.n	800b726 <UART_SetConfig+0x8aa>
 800b6c8:	e031      	b.n	800b72e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6ca:	f7fc f925 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 800b6ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b6d0:	e033      	b.n	800b73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6d2:	f7fc f937 	bl	8007944 <HAL_RCC_GetPCLK2Freq>
 800b6d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b6d8:	e02f      	b.n	800b73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7fd f8e4 	bl	80088ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6e8:	e027      	b.n	800b73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ea:	f107 0318 	add.w	r3, r7, #24
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fd fa30 	bl	8008b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6f8:	e01f      	b.n	800b73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6fa:	4b2e      	ldr	r3, [pc, #184]	; (800b7b4 <UART_SetConfig+0x938>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0320 	and.w	r3, r3, #32
 800b702:	2b00      	cmp	r3, #0
 800b704:	d009      	beq.n	800b71a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b706:	4b2b      	ldr	r3, [pc, #172]	; (800b7b4 <UART_SetConfig+0x938>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	08db      	lsrs	r3, r3, #3
 800b70c:	f003 0303 	and.w	r3, r3, #3
 800b710:	4a25      	ldr	r2, [pc, #148]	; (800b7a8 <UART_SetConfig+0x92c>)
 800b712:	fa22 f303 	lsr.w	r3, r2, r3
 800b716:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b718:	e00f      	b.n	800b73a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b71a:	4b23      	ldr	r3, [pc, #140]	; (800b7a8 <UART_SetConfig+0x92c>)
 800b71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b71e:	e00c      	b.n	800b73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b720:	4b22      	ldr	r3, [pc, #136]	; (800b7ac <UART_SetConfig+0x930>)
 800b722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b724:	e009      	b.n	800b73a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b72c:	e005      	b.n	800b73a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b72e:	2300      	movs	r3, #0
 800b730:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 80e9 	beq.w	800b914 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	4a1a      	ldr	r2, [pc, #104]	; (800b7b0 <UART_SetConfig+0x934>)
 800b748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b74c:	461a      	mov	r2, r3
 800b74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b750:	fbb3 f3f2 	udiv	r3, r3, r2
 800b754:	005a      	lsls	r2, r3, #1
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	085b      	lsrs	r3, r3, #1
 800b75c:	441a      	add	r2, r3
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	fbb2 f3f3 	udiv	r3, r2, r3
 800b766:	b29b      	uxth	r3, r3
 800b768:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76c:	2b0f      	cmp	r3, #15
 800b76e:	d916      	bls.n	800b79e <UART_SetConfig+0x922>
 800b770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b776:	d212      	bcs.n	800b79e <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	f023 030f 	bic.w	r3, r3, #15
 800b780:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b784:	085b      	lsrs	r3, r3, #1
 800b786:	b29b      	uxth	r3, r3
 800b788:	f003 0307 	and.w	r3, r3, #7
 800b78c:	b29a      	uxth	r2, r3
 800b78e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b790:	4313      	orrs	r3, r2
 800b792:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b79a:	60da      	str	r2, [r3, #12]
 800b79c:	e0ba      	b.n	800b914 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b7a4:	e0b6      	b.n	800b914 <UART_SetConfig+0xa98>
 800b7a6:	bf00      	nop
 800b7a8:	03d09000 	.word	0x03d09000
 800b7ac:	003d0900 	.word	0x003d0900
 800b7b0:	080126a8 	.word	0x080126a8
 800b7b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7bc:	2b20      	cmp	r3, #32
 800b7be:	dc49      	bgt.n	800b854 <UART_SetConfig+0x9d8>
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	db7c      	blt.n	800b8be <UART_SetConfig+0xa42>
 800b7c4:	2b20      	cmp	r3, #32
 800b7c6:	d87a      	bhi.n	800b8be <UART_SetConfig+0xa42>
 800b7c8:	a201      	add	r2, pc, #4	; (adr r2, 800b7d0 <UART_SetConfig+0x954>)
 800b7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ce:	bf00      	nop
 800b7d0:	0800b85b 	.word	0x0800b85b
 800b7d4:	0800b863 	.word	0x0800b863
 800b7d8:	0800b8bf 	.word	0x0800b8bf
 800b7dc:	0800b8bf 	.word	0x0800b8bf
 800b7e0:	0800b86b 	.word	0x0800b86b
 800b7e4:	0800b8bf 	.word	0x0800b8bf
 800b7e8:	0800b8bf 	.word	0x0800b8bf
 800b7ec:	0800b8bf 	.word	0x0800b8bf
 800b7f0:	0800b87b 	.word	0x0800b87b
 800b7f4:	0800b8bf 	.word	0x0800b8bf
 800b7f8:	0800b8bf 	.word	0x0800b8bf
 800b7fc:	0800b8bf 	.word	0x0800b8bf
 800b800:	0800b8bf 	.word	0x0800b8bf
 800b804:	0800b8bf 	.word	0x0800b8bf
 800b808:	0800b8bf 	.word	0x0800b8bf
 800b80c:	0800b8bf 	.word	0x0800b8bf
 800b810:	0800b88b 	.word	0x0800b88b
 800b814:	0800b8bf 	.word	0x0800b8bf
 800b818:	0800b8bf 	.word	0x0800b8bf
 800b81c:	0800b8bf 	.word	0x0800b8bf
 800b820:	0800b8bf 	.word	0x0800b8bf
 800b824:	0800b8bf 	.word	0x0800b8bf
 800b828:	0800b8bf 	.word	0x0800b8bf
 800b82c:	0800b8bf 	.word	0x0800b8bf
 800b830:	0800b8bf 	.word	0x0800b8bf
 800b834:	0800b8bf 	.word	0x0800b8bf
 800b838:	0800b8bf 	.word	0x0800b8bf
 800b83c:	0800b8bf 	.word	0x0800b8bf
 800b840:	0800b8bf 	.word	0x0800b8bf
 800b844:	0800b8bf 	.word	0x0800b8bf
 800b848:	0800b8bf 	.word	0x0800b8bf
 800b84c:	0800b8bf 	.word	0x0800b8bf
 800b850:	0800b8b1 	.word	0x0800b8b1
 800b854:	2b40      	cmp	r3, #64	; 0x40
 800b856:	d02e      	beq.n	800b8b6 <UART_SetConfig+0xa3a>
 800b858:	e031      	b.n	800b8be <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b85a:	f7fc f85d 	bl	8007918 <HAL_RCC_GetPCLK1Freq>
 800b85e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b860:	e033      	b.n	800b8ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b862:	f7fc f86f 	bl	8007944 <HAL_RCC_GetPCLK2Freq>
 800b866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b868:	e02f      	b.n	800b8ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b86a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fd f81c 	bl	80088ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b878:	e027      	b.n	800b8ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b87a:	f107 0318 	add.w	r3, r7, #24
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fd f968 	bl	8008b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b888:	e01f      	b.n	800b8ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b88a:	4b2d      	ldr	r3, [pc, #180]	; (800b940 <UART_SetConfig+0xac4>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0320 	and.w	r3, r3, #32
 800b892:	2b00      	cmp	r3, #0
 800b894:	d009      	beq.n	800b8aa <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b896:	4b2a      	ldr	r3, [pc, #168]	; (800b940 <UART_SetConfig+0xac4>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	08db      	lsrs	r3, r3, #3
 800b89c:	f003 0303 	and.w	r3, r3, #3
 800b8a0:	4a28      	ldr	r2, [pc, #160]	; (800b944 <UART_SetConfig+0xac8>)
 800b8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8a8:	e00f      	b.n	800b8ca <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800b8aa:	4b26      	ldr	r3, [pc, #152]	; (800b944 <UART_SetConfig+0xac8>)
 800b8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ae:	e00c      	b.n	800b8ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8b0:	4b25      	ldr	r3, [pc, #148]	; (800b948 <UART_SetConfig+0xacc>)
 800b8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8b4:	e009      	b.n	800b8ca <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8bc:	e005      	b.n	800b8ca <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b8c8:	bf00      	nop
    }

    if (pclk != 0U)
 800b8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d021      	beq.n	800b914 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	4a1d      	ldr	r2, [pc, #116]	; (800b94c <UART_SetConfig+0xad0>)
 800b8d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8de:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	085b      	lsrs	r3, r3, #1
 800b8e8:	441a      	add	r2, r3
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f8:	2b0f      	cmp	r3, #15
 800b8fa:	d908      	bls.n	800b90e <UART_SetConfig+0xa92>
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b902:	d204      	bcs.n	800b90e <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b90a:	60da      	str	r2, [r3, #12]
 800b90c:	e002      	b.n	800b914 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	2201      	movs	r2, #1
 800b918:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2201      	movs	r2, #1
 800b920:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	2200      	movs	r2, #0
 800b928:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	2200      	movs	r2, #0
 800b92e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b930:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b934:	4618      	mov	r0, r3
 800b936:	3748      	adds	r7, #72	; 0x48
 800b938:	46bd      	mov	sp, r7
 800b93a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b93e:	bf00      	nop
 800b940:	58024400 	.word	0x58024400
 800b944:	03d09000 	.word	0x03d09000
 800b948:	003d0900 	.word	0x003d0900
 800b94c:	080126a8 	.word	0x080126a8

0800b950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b95c:	f003 0301 	and.w	r3, r3, #1
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00a      	beq.n	800b97a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97e:	f003 0302 	and.w	r3, r3, #2
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00a      	beq.n	800b99c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	430a      	orrs	r2, r1
 800b99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a0:	f003 0304 	and.w	r3, r3, #4
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00a      	beq.n	800b9be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c2:	f003 0308 	and.w	r3, r3, #8
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00a      	beq.n	800b9e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9e4:	f003 0310 	and.w	r3, r3, #16
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00a      	beq.n	800ba02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	430a      	orrs	r2, r1
 800ba00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba06:	f003 0320 	and.w	r3, r3, #32
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00a      	beq.n	800ba24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	430a      	orrs	r2, r1
 800ba22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d01a      	beq.n	800ba66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	430a      	orrs	r2, r1
 800ba44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba4e:	d10a      	bne.n	800ba66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00a      	beq.n	800ba88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	605a      	str	r2, [r3, #4]
  }
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af02      	add	r7, sp, #8
 800ba9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800baa4:	f7f5 ffd6 	bl	8001a54 <HAL_GetTick>
 800baa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f003 0308 	and.w	r3, r3, #8
 800bab4:	2b08      	cmp	r3, #8
 800bab6:	d10e      	bne.n	800bad6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f82f 	bl	800bb2a <UART_WaitOnFlagUntilTimeout>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e025      	b.n	800bb22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0304 	and.w	r3, r3, #4
 800bae0:	2b04      	cmp	r3, #4
 800bae2:	d10e      	bne.n	800bb02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f819 	bl	800bb2a <UART_WaitOnFlagUntilTimeout>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bafe:	2303      	movs	r3, #3
 800bb00:	e00f      	b.n	800bb22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2220      	movs	r2, #32
 800bb06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b084      	sub	sp, #16
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	60b9      	str	r1, [r7, #8]
 800bb34:	603b      	str	r3, [r7, #0]
 800bb36:	4613      	mov	r3, r2
 800bb38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb3a:	e062      	b.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb42:	d05e      	beq.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb44:	f7f5 ff86 	bl	8001a54 <HAL_GetTick>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	1ad3      	subs	r3, r2, r3
 800bb4e:	69ba      	ldr	r2, [r7, #24]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d302      	bcc.n	800bb5a <UART_WaitOnFlagUntilTimeout+0x30>
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d11d      	bne.n	800bb96 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	689a      	ldr	r2, [r3, #8]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f022 0201 	bic.w	r2, r2, #1
 800bb78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2220      	movs	r2, #32
 800bb7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2220      	movs	r2, #32
 800bb86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bb92:	2303      	movs	r3, #3
 800bb94:	e045      	b.n	800bc22 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 0304 	and.w	r3, r3, #4
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d02e      	beq.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	69db      	ldr	r3, [r3, #28]
 800bbaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbb2:	d126      	bne.n	800bc02 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbbc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bbcc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	689a      	ldr	r2, [r3, #8]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0201 	bic.w	r2, r2, #1
 800bbdc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2220      	movs	r2, #32
 800bbea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2220      	movs	r2, #32
 800bbf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	e00f      	b.n	800bc22 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	69da      	ldr	r2, [r3, #28]
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	bf0c      	ite	eq
 800bc12:	2301      	moveq	r3, #1
 800bc14:	2300      	movne	r3, #0
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	461a      	mov	r2, r3
 800bc1a:	79fb      	ldrb	r3, [r7, #7]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d08d      	beq.n	800bb3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
	...

0800bc2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b083      	sub	sp, #12
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bc42:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	6899      	ldr	r1, [r3, #8]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <UART_EndRxTransfer+0x60>)
 800bc50:	400b      	ands	r3, r1
 800bc52:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d107      	bne.n	800bc6c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f022 0210 	bic.w	r2, r2, #16
 800bc6a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2220      	movs	r2, #32
 800bc70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	effffffe 	.word	0xeffffffe

0800bc90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7ff f8ce 	bl	800ae50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcb4:	bf00      	nop
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcd2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2220      	movs	r2, #32
 800bcd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7ff f8aa 	bl	800ae3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bce8:	bf00      	nop
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d101      	bne.n	800bd42 <HAL_UARTEx_DisableFifoMode+0x16>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	e027      	b.n	800bd92 <HAL_UARTEx_DisableFifoMode+0x66>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2224      	movs	r2, #36	; 0x24
 800bd4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f022 0201 	bic.w	r2, r2, #1
 800bd68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bd70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2220      	movs	r2, #32
 800bd84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b084      	sub	sp, #16
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d101      	bne.n	800bdb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	e02d      	b.n	800be12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2224      	movs	r2, #36	; 0x24
 800bdc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f022 0201 	bic.w	r2, r2, #1
 800bddc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	430a      	orrs	r2, r1
 800bdf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f850 	bl	800be98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2220      	movs	r2, #32
 800be04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b084      	sub	sp, #16
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d101      	bne.n	800be32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800be2e:	2302      	movs	r3, #2
 800be30:	e02d      	b.n	800be8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2224      	movs	r2, #36	; 0x24
 800be3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f022 0201 	bic.w	r2, r2, #1
 800be58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	683a      	ldr	r2, [r7, #0]
 800be6a:	430a      	orrs	r2, r1
 800be6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f812 	bl	800be98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2220      	movs	r2, #32
 800be80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d108      	bne.n	800beba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800beb8:	e031      	b.n	800bf1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800beba:	2310      	movs	r3, #16
 800bebc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bebe:	2310      	movs	r3, #16
 800bec0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	0e5b      	lsrs	r3, r3, #25
 800beca:	b2db      	uxtb	r3, r3
 800becc:	f003 0307 	and.w	r3, r3, #7
 800bed0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	0f5b      	lsrs	r3, r3, #29
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	f003 0307 	and.w	r3, r3, #7
 800bee0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bee2:	7bbb      	ldrb	r3, [r7, #14]
 800bee4:	7b3a      	ldrb	r2, [r7, #12]
 800bee6:	4911      	ldr	r1, [pc, #68]	; (800bf2c <UARTEx_SetNbDataToProcess+0x94>)
 800bee8:	5c8a      	ldrb	r2, [r1, r2]
 800beea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800beee:	7b3a      	ldrb	r2, [r7, #12]
 800bef0:	490f      	ldr	r1, [pc, #60]	; (800bf30 <UARTEx_SetNbDataToProcess+0x98>)
 800bef2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bef4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bef8:	b29a      	uxth	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	7b7a      	ldrb	r2, [r7, #13]
 800bf04:	4909      	ldr	r1, [pc, #36]	; (800bf2c <UARTEx_SetNbDataToProcess+0x94>)
 800bf06:	5c8a      	ldrb	r2, [r1, r2]
 800bf08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bf0c:	7b7a      	ldrb	r2, [r7, #13]
 800bf0e:	4908      	ldr	r1, [pc, #32]	; (800bf30 <UARTEx_SetNbDataToProcess+0x98>)
 800bf10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bf12:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bf1e:	bf00      	nop
 800bf20:	3714      	adds	r7, #20
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	080126c0 	.word	0x080126c0
 800bf30:	080126c8 	.word	0x080126c8

0800bf34 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800bf4e:	b480      	push	{r7}
 800bf50:	b083      	sub	sp, #12
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bf8e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800bf94:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800bf9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68da      	ldr	r2, [r3, #12]
 800bfa6:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <SDMMC_SendCommand+0x50>)
 800bfa8:	4013      	ands	r3, r2
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	431a      	orrs	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3714      	adds	r7, #20
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	fffee0c0 	.word	0xfffee0c0

0800bfc4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	b2db      	uxtb	r3, r3
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	3314      	adds	r3, #20
 800bfec:	461a      	mov	r2, r3
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	4413      	add	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c010:	230c      	movs	r3, #12
 800c012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c014:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c01a:	2300      	movs	r3, #0
 800c01c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c01e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c022:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c03c:	f107 0308 	add.w	r3, r7, #8
 800c040:	4619      	mov	r1, r3
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7ff ff94 	bl	800bf70 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c048:	4a0b      	ldr	r2, [pc, #44]	; (800c078 <SDMMC_CmdStopTransfer+0x74>)
 800c04a:	210c      	movs	r1, #12
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 f815 	bl	800c07c <SDMMC_GetCmdResp1>
 800c052:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c066:	d101      	bne.n	800c06c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c068:	2300      	movs	r3, #0
 800c06a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c06c:	69fb      	ldr	r3, [r7, #28]
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3720      	adds	r7, #32
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	05f5e100 	.word	0x05f5e100

0800c07c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b088      	sub	sp, #32
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	460b      	mov	r3, r1
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c08a:	4b70      	ldr	r3, [pc, #448]	; (800c24c <SDMMC_GetCmdResp1+0x1d0>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a70      	ldr	r2, [pc, #448]	; (800c250 <SDMMC_GetCmdResp1+0x1d4>)
 800c090:	fba2 2303 	umull	r2, r3, r2, r3
 800c094:	0a5a      	lsrs	r2, r3, #9
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	fb02 f303 	mul.w	r3, r2, r3
 800c09c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	1e5a      	subs	r2, r3, #1
 800c0a2:	61fa      	str	r2, [r7, #28]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d102      	bne.n	800c0ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c0a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0ac:	e0c9      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c0b4:	69ba      	ldr	r2, [r7, #24]
 800c0b6:	4b67      	ldr	r3, [pc, #412]	; (800c254 <SDMMC_GetCmdResp1+0x1d8>)
 800c0b8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d0ef      	beq.n	800c09e <SDMMC_GetCmdResp1+0x22>
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1ea      	bne.n	800c09e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0cc:	f003 0304 	and.w	r3, r3, #4
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d004      	beq.n	800c0de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2204      	movs	r2, #4
 800c0d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0da:	2304      	movs	r3, #4
 800c0dc:	e0b1      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d004      	beq.n	800c0f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e0a6      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4a58      	ldr	r2, [pc, #352]	; (800c258 <SDMMC_GetCmdResp1+0x1dc>)
 800c0f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f7ff ff62 	bl	800bfc4 <SDMMC_GetCommandResponse>
 800c100:	4603      	mov	r3, r0
 800c102:	461a      	mov	r2, r3
 800c104:	7afb      	ldrb	r3, [r7, #11]
 800c106:	4293      	cmp	r3, r2
 800c108:	d001      	beq.n	800c10e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e099      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c10e:	2100      	movs	r1, #0
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	f7ff ff64 	bl	800bfde <SDMMC_GetResponse>
 800c116:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	4b50      	ldr	r3, [pc, #320]	; (800c25c <SDMMC_GetCmdResp1+0x1e0>)
 800c11c:	4013      	ands	r3, r2
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d101      	bne.n	800c126 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c122:	2300      	movs	r3, #0
 800c124:	e08d      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	da02      	bge.n	800c132 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c12c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c130:	e087      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c13c:	2340      	movs	r3, #64	; 0x40
 800c13e:	e080      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c14a:	2380      	movs	r3, #128	; 0x80
 800c14c:	e079      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c15c:	e071      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c16c:	e069      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d002      	beq.n	800c17e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c17c:	e061      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c18c:	e059      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c19c:	e051      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d002      	beq.n	800c1ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c1a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c1ac:	e049      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d002      	beq.n	800c1be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c1b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c1bc:	e041      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c1c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1cc:	e039      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c1d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c1dc:	e031      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c1e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c1ec:	e029      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c1f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c1fc:	e021      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c20c:	e019      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d002      	beq.n	800c21e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c218:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c21c:	e011      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c228:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c22c:	e009      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f003 0308 	and.w	r3, r3, #8
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c238:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c23c:	e001      	b.n	800c242 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c23e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c242:	4618      	mov	r0, r3
 800c244:	3720      	adds	r7, #32
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	24000000 	.word	0x24000000
 800c250:	10624dd3 	.word	0x10624dd3
 800c254:	00200045 	.word	0x00200045
 800c258:	002000c5 	.word	0x002000c5
 800c25c:	fdffe008 	.word	0xfdffe008

0800c260 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c260:	b084      	sub	sp, #16
 800c262:	b580      	push	{r7, lr}
 800c264:	b084      	sub	sp, #16
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
 800c26a:	f107 001c 	add.w	r0, r7, #28
 800c26e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	2b01      	cmp	r3, #1
 800c276:	d120      	bne.n	800c2ba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	68da      	ldr	r2, [r3, #12]
 800c288:	4b2a      	ldr	r3, [pc, #168]	; (800c334 <USB_CoreInit+0xd4>)
 800c28a:	4013      	ands	r3, r2
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d105      	bne.n	800c2ae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f001 fb14 	bl	800d8dc <USB_CoreReset>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]
 800c2b8:	e01a      	b.n	800c2f0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 fb08 	bl	800d8dc <USB_CoreReset>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d106      	bne.n	800c2e4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	639a      	str	r2, [r3, #56]	; 0x38
 800c2e2:	e005      	b.n	800c2f0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d116      	bne.n	800c324 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c304:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <USB_CoreInit+0xd8>)
 800c306:	4313      	orrs	r3, r2
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	f043 0206 	orr.w	r2, r3, #6
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	f043 0220 	orr.w	r2, r3, #32
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c324:	7bfb      	ldrb	r3, [r7, #15]
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c330:	b004      	add	sp, #16
 800c332:	4770      	bx	lr
 800c334:	ffbdffbf 	.word	0xffbdffbf
 800c338:	03ee0000 	.word	0x03ee0000

0800c33c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	4613      	mov	r3, r2
 800c348:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c34a:	79fb      	ldrb	r3, [r7, #7]
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d165      	bne.n	800c41c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	4a41      	ldr	r2, [pc, #260]	; (800c458 <USB_SetTurnaroundTime+0x11c>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d906      	bls.n	800c366 <USB_SetTurnaroundTime+0x2a>
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	4a40      	ldr	r2, [pc, #256]	; (800c45c <USB_SetTurnaroundTime+0x120>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d202      	bcs.n	800c366 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c360:	230f      	movs	r3, #15
 800c362:	617b      	str	r3, [r7, #20]
 800c364:	e062      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	4a3c      	ldr	r2, [pc, #240]	; (800c45c <USB_SetTurnaroundTime+0x120>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d306      	bcc.n	800c37c <USB_SetTurnaroundTime+0x40>
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	4a3b      	ldr	r2, [pc, #236]	; (800c460 <USB_SetTurnaroundTime+0x124>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d202      	bcs.n	800c37c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c376:	230e      	movs	r3, #14
 800c378:	617b      	str	r3, [r7, #20]
 800c37a:	e057      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	4a38      	ldr	r2, [pc, #224]	; (800c460 <USB_SetTurnaroundTime+0x124>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d306      	bcc.n	800c392 <USB_SetTurnaroundTime+0x56>
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	4a37      	ldr	r2, [pc, #220]	; (800c464 <USB_SetTurnaroundTime+0x128>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d202      	bcs.n	800c392 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c38c:	230d      	movs	r3, #13
 800c38e:	617b      	str	r3, [r7, #20]
 800c390:	e04c      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	4a33      	ldr	r2, [pc, #204]	; (800c464 <USB_SetTurnaroundTime+0x128>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d306      	bcc.n	800c3a8 <USB_SetTurnaroundTime+0x6c>
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	4a32      	ldr	r2, [pc, #200]	; (800c468 <USB_SetTurnaroundTime+0x12c>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d802      	bhi.n	800c3a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c3a2:	230c      	movs	r3, #12
 800c3a4:	617b      	str	r3, [r7, #20]
 800c3a6:	e041      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	4a2f      	ldr	r2, [pc, #188]	; (800c468 <USB_SetTurnaroundTime+0x12c>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d906      	bls.n	800c3be <USB_SetTurnaroundTime+0x82>
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	4a2e      	ldr	r2, [pc, #184]	; (800c46c <USB_SetTurnaroundTime+0x130>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d802      	bhi.n	800c3be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c3b8:	230b      	movs	r3, #11
 800c3ba:	617b      	str	r3, [r7, #20]
 800c3bc:	e036      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	4a2a      	ldr	r2, [pc, #168]	; (800c46c <USB_SetTurnaroundTime+0x130>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d906      	bls.n	800c3d4 <USB_SetTurnaroundTime+0x98>
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	4a29      	ldr	r2, [pc, #164]	; (800c470 <USB_SetTurnaroundTime+0x134>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d802      	bhi.n	800c3d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c3ce:	230a      	movs	r3, #10
 800c3d0:	617b      	str	r3, [r7, #20]
 800c3d2:	e02b      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	4a26      	ldr	r2, [pc, #152]	; (800c470 <USB_SetTurnaroundTime+0x134>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d906      	bls.n	800c3ea <USB_SetTurnaroundTime+0xae>
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	4a25      	ldr	r2, [pc, #148]	; (800c474 <USB_SetTurnaroundTime+0x138>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d202      	bcs.n	800c3ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c3e4:	2309      	movs	r3, #9
 800c3e6:	617b      	str	r3, [r7, #20]
 800c3e8:	e020      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	4a21      	ldr	r2, [pc, #132]	; (800c474 <USB_SetTurnaroundTime+0x138>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d306      	bcc.n	800c400 <USB_SetTurnaroundTime+0xc4>
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	4a20      	ldr	r2, [pc, #128]	; (800c478 <USB_SetTurnaroundTime+0x13c>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d802      	bhi.n	800c400 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c3fa:	2308      	movs	r3, #8
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	e015      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	4a1d      	ldr	r2, [pc, #116]	; (800c478 <USB_SetTurnaroundTime+0x13c>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d906      	bls.n	800c416 <USB_SetTurnaroundTime+0xda>
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	4a1c      	ldr	r2, [pc, #112]	; (800c47c <USB_SetTurnaroundTime+0x140>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d202      	bcs.n	800c416 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c410:	2307      	movs	r3, #7
 800c412:	617b      	str	r3, [r7, #20]
 800c414:	e00a      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c416:	2306      	movs	r3, #6
 800c418:	617b      	str	r3, [r7, #20]
 800c41a:	e007      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c41c:	79fb      	ldrb	r3, [r7, #7]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d102      	bne.n	800c428 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c422:	2309      	movs	r3, #9
 800c424:	617b      	str	r3, [r7, #20]
 800c426:	e001      	b.n	800c42c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c428:	2309      	movs	r3, #9
 800c42a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	68da      	ldr	r2, [r3, #12]
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	029b      	lsls	r3, r3, #10
 800c440:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c444:	431a      	orrs	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	371c      	adds	r7, #28
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr
 800c458:	00d8acbf 	.word	0x00d8acbf
 800c45c:	00e4e1c0 	.word	0x00e4e1c0
 800c460:	00f42400 	.word	0x00f42400
 800c464:	01067380 	.word	0x01067380
 800c468:	011a499f 	.word	0x011a499f
 800c46c:	01312cff 	.word	0x01312cff
 800c470:	014ca43f 	.word	0x014ca43f
 800c474:	016e3600 	.word	0x016e3600
 800c478:	01a6ab1f 	.word	0x01a6ab1f
 800c47c:	01e84800 	.word	0x01e84800

0800c480 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	f043 0201 	orr.w	r2, r3, #1
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b083      	sub	sp, #12
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	f023 0201 	bic.w	r2, r3, #1
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c4dc:	78fb      	ldrb	r3, [r7, #3]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d106      	bne.n	800c4f0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	60da      	str	r2, [r3, #12]
 800c4ee:	e00b      	b.n	800c508 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c4f0:	78fb      	ldrb	r3, [r7, #3]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d106      	bne.n	800c504 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	60da      	str	r2, [r3, #12]
 800c502:	e001      	b.n	800c508 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	e003      	b.n	800c510 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c508:	2032      	movs	r0, #50	; 0x32
 800c50a:	f7f5 faaf 	bl	8001a6c <HAL_Delay>

  return HAL_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c518:	b084      	sub	sp, #16
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b086      	sub	sp, #24
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c532:	2300      	movs	r3, #0
 800c534:	613b      	str	r3, [r7, #16]
 800c536:	e009      	b.n	800c54c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	3340      	adds	r3, #64	; 0x40
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	2200      	movs	r2, #0
 800c544:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	3301      	adds	r3, #1
 800c54a:	613b      	str	r3, [r7, #16]
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	2b0e      	cmp	r3, #14
 800c550:	d9f2      	bls.n	800c538 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c554:	2b00      	cmp	r3, #0
 800c556:	d11c      	bne.n	800c592 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c566:	f043 0302 	orr.w	r3, r3, #2
 800c56a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c570:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	601a      	str	r2, [r3, #0]
 800c590:	e005      	b.n	800c59e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c596:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	680b      	ldr	r3, [r1, #0]
 800c5bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d10c      	bne.n	800c5de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d104      	bne.n	800c5d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f949 	bl	800c864 <USB_SetDevSpeed>
 800c5d2:	e008      	b.n	800c5e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c5d4:	2101      	movs	r1, #1
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f944 	bl	800c864 <USB_SetDevSpeed>
 800c5dc:	e003      	b.n	800c5e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c5de:	2103      	movs	r1, #3
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f93f 	bl	800c864 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c5e6:	2110      	movs	r1, #16
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f8f3 	bl	800c7d4 <USB_FlushTxFifo>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d001      	beq.n	800c5f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f911 	bl	800c820 <USB_FlushRxFifo>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c60e:	461a      	mov	r2, r3
 800c610:	2300      	movs	r3, #0
 800c612:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c61a:	461a      	mov	r2, r3
 800c61c:	2300      	movs	r3, #0
 800c61e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c626:	461a      	mov	r2, r3
 800c628:	2300      	movs	r3, #0
 800c62a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c62c:	2300      	movs	r3, #0
 800c62e:	613b      	str	r3, [r7, #16]
 800c630:	e043      	b.n	800c6ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	015a      	lsls	r2, r3, #5
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	4413      	add	r3, r2
 800c63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c648:	d118      	bne.n	800c67c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10a      	bne.n	800c666 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	015a      	lsls	r2, r3, #5
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c65c:	461a      	mov	r2, r3
 800c65e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c662:	6013      	str	r3, [r2, #0]
 800c664:	e013      	b.n	800c68e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c672:	461a      	mov	r2, r3
 800c674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c678:	6013      	str	r3, [r2, #0]
 800c67a:	e008      	b.n	800c68e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	015a      	lsls	r2, r3, #5
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	4413      	add	r3, r2
 800c684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c688:	461a      	mov	r2, r3
 800c68a:	2300      	movs	r3, #0
 800c68c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	015a      	lsls	r2, r3, #5
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	4413      	add	r3, r2
 800c696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c69a:	461a      	mov	r2, r3
 800c69c:	2300      	movs	r3, #0
 800c69e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	015a      	lsls	r2, r3, #5
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c6b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	613b      	str	r3, [r7, #16]
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d3b7      	bcc.n	800c632 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	613b      	str	r3, [r7, #16]
 800c6c6:	e043      	b.n	800c750 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	015a      	lsls	r2, r3, #5
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6de:	d118      	bne.n	800c712 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10a      	bne.n	800c6fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	015a      	lsls	r2, r3, #5
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c6f8:	6013      	str	r3, [r2, #0]
 800c6fa:	e013      	b.n	800c724 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	015a      	lsls	r2, r3, #5
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4413      	add	r3, r2
 800c704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c708:	461a      	mov	r2, r3
 800c70a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c70e:	6013      	str	r3, [r2, #0]
 800c710:	e008      	b.n	800c724 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	015a      	lsls	r2, r3, #5
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	4413      	add	r3, r2
 800c71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c71e:	461a      	mov	r2, r3
 800c720:	2300      	movs	r3, #0
 800c722:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	015a      	lsls	r2, r3, #5
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	4413      	add	r3, r2
 800c72c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c730:	461a      	mov	r2, r3
 800c732:	2300      	movs	r3, #0
 800c734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	015a      	lsls	r2, r3, #5
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	4413      	add	r3, r2
 800c73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c742:	461a      	mov	r2, r3
 800c744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	3301      	adds	r3, #1
 800c74e:	613b      	str	r3, [r7, #16]
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	429a      	cmp	r2, r3
 800c756:	d3b7      	bcc.n	800c6c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c76a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c778:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d105      	bne.n	800c78c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	f043 0210 	orr.w	r2, r3, #16
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699a      	ldr	r2, [r3, #24]
 800c790:	4b0e      	ldr	r3, [pc, #56]	; (800c7cc <USB_DevInit+0x2b4>)
 800c792:	4313      	orrs	r3, r2
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d005      	beq.n	800c7aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	f043 0208 	orr.w	r2, r3, #8
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c7aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d105      	bne.n	800c7bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	699a      	ldr	r2, [r3, #24]
 800c7b4:	4b06      	ldr	r3, [pc, #24]	; (800c7d0 <USB_DevInit+0x2b8>)
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c7c8:	b004      	add	sp, #16
 800c7ca:	4770      	bx	lr
 800c7cc:	803c3800 	.word	0x803c3800
 800c7d0:	40000004 	.word	0x40000004

0800c7d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	019b      	lsls	r3, r3, #6
 800c7e6:	f043 0220 	orr.w	r2, r3, #32
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	60fb      	str	r3, [r7, #12]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4a09      	ldr	r2, [pc, #36]	; (800c81c <USB_FlushTxFifo+0x48>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d901      	bls.n	800c800 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e006      	b.n	800c80e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	f003 0320 	and.w	r3, r3, #32
 800c808:	2b20      	cmp	r3, #32
 800c80a:	d0f0      	beq.n	800c7ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	00030d40 	.word	0x00030d40

0800c820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2210      	movs	r2, #16
 800c830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3301      	adds	r3, #1
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4a09      	ldr	r2, [pc, #36]	; (800c860 <USB_FlushRxFifo+0x40>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d901      	bls.n	800c844 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c840:	2303      	movs	r3, #3
 800c842:	e006      	b.n	800c852 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	f003 0310 	and.w	r3, r3, #16
 800c84c:	2b10      	cmp	r3, #16
 800c84e:	d0f0      	beq.n	800c832 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	00030d40 	.word	0x00030d40

0800c864 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	460b      	mov	r3, r1
 800c86e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	78fb      	ldrb	r3, [r7, #3]
 800c87e:	68f9      	ldr	r1, [r7, #12]
 800c880:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c884:	4313      	orrs	r3, r2
 800c886:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3714      	adds	r7, #20
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c896:	b480      	push	{r7}
 800c898:	b087      	sub	sp, #28
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	f003 0306 	and.w	r3, r3, #6
 800c8ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d102      	bne.n	800c8bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	75fb      	strb	r3, [r7, #23]
 800c8ba:	e00a      	b.n	800c8d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d002      	beq.n	800c8c8 <USB_GetDevSpeed+0x32>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2b06      	cmp	r3, #6
 800c8c6:	d102      	bne.n	800c8ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c8c8:	2302      	movs	r3, #2
 800c8ca:	75fb      	strb	r3, [r7, #23]
 800c8cc:	e001      	b.n	800c8d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c8ce:	230f      	movs	r3, #15
 800c8d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	371c      	adds	r7, #28
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b085      	sub	sp, #20
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	785b      	ldrb	r3, [r3, #1]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d139      	bne.n	800c970 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c902:	69da      	ldr	r2, [r3, #28]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	f003 030f 	and.w	r3, r3, #15
 800c90c:	2101      	movs	r1, #1
 800c90e:	fa01 f303 	lsl.w	r3, r1, r3
 800c912:	b29b      	uxth	r3, r3
 800c914:	68f9      	ldr	r1, [r7, #12]
 800c916:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c91a:	4313      	orrs	r3, r2
 800c91c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	015a      	lsls	r2, r3, #5
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	4413      	add	r3, r2
 800c926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c930:	2b00      	cmp	r3, #0
 800c932:	d153      	bne.n	800c9dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	015a      	lsls	r2, r3, #5
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	4413      	add	r3, r2
 800c93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	78db      	ldrb	r3, [r3, #3]
 800c94e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c950:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	059b      	lsls	r3, r3, #22
 800c956:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c958:	431a      	orrs	r2, r3
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	0159      	lsls	r1, r3, #5
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	440b      	add	r3, r1
 800c962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c966:	4619      	mov	r1, r3
 800c968:	4b20      	ldr	r3, [pc, #128]	; (800c9ec <USB_ActivateEndpoint+0x10c>)
 800c96a:	4313      	orrs	r3, r2
 800c96c:	600b      	str	r3, [r1, #0]
 800c96e:	e035      	b.n	800c9dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c976:	69da      	ldr	r2, [r3, #28]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	f003 030f 	and.w	r3, r3, #15
 800c980:	2101      	movs	r1, #1
 800c982:	fa01 f303 	lsl.w	r3, r1, r3
 800c986:	041b      	lsls	r3, r3, #16
 800c988:	68f9      	ldr	r1, [r7, #12]
 800c98a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c98e:	4313      	orrs	r3, r2
 800c990:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	015a      	lsls	r2, r3, #5
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	4413      	add	r3, r2
 800c99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d119      	bne.n	800c9dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	015a      	lsls	r2, r3, #5
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	78db      	ldrb	r3, [r3, #3]
 800c9c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c9c4:	430b      	orrs	r3, r1
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	0159      	lsls	r1, r3, #5
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	440b      	add	r3, r1
 800c9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	4b05      	ldr	r3, [pc, #20]	; (800c9ec <USB_ActivateEndpoint+0x10c>)
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c9dc:	2300      	movs	r3, #0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop
 800c9ec:	10008000 	.word	0x10008000

0800c9f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	785b      	ldrb	r3, [r3, #1]
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d161      	bne.n	800cad0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	015a      	lsls	r2, r3, #5
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	4413      	add	r3, r2
 800ca14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca22:	d11f      	bne.n	800ca64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	015a      	lsls	r2, r3, #5
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	0151      	lsls	r1, r2, #5
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	440a      	add	r2, r1
 800ca3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	015a      	lsls	r2, r3, #5
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	4413      	add	r3, r2
 800ca4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	0151      	lsls	r1, r2, #5
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	440a      	add	r2, r1
 800ca5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	f003 030f 	and.w	r3, r3, #15
 800ca74:	2101      	movs	r1, #1
 800ca76:	fa01 f303 	lsl.w	r3, r1, r3
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	43db      	mvns	r3, r3
 800ca7e:	68f9      	ldr	r1, [r7, #12]
 800ca80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca84:	4013      	ands	r3, r2
 800ca86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca8e:	69da      	ldr	r2, [r3, #28]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	f003 030f 	and.w	r3, r3, #15
 800ca98:	2101      	movs	r1, #1
 800ca9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	43db      	mvns	r3, r3
 800caa2:	68f9      	ldr	r1, [r7, #12]
 800caa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caa8:	4013      	ands	r3, r2
 800caaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	015a      	lsls	r2, r3, #5
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	0159      	lsls	r1, r3, #5
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	440b      	add	r3, r1
 800cac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cac6:	4619      	mov	r1, r3
 800cac8:	4b35      	ldr	r3, [pc, #212]	; (800cba0 <USB_DeactivateEndpoint+0x1b0>)
 800caca:	4013      	ands	r3, r2
 800cacc:	600b      	str	r3, [r1, #0]
 800cace:	e060      	b.n	800cb92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cae6:	d11f      	bne.n	800cb28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	015a      	lsls	r2, r3, #5
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	4413      	add	r3, r2
 800caf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68ba      	ldr	r2, [r7, #8]
 800caf8:	0151      	lsls	r1, r2, #5
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	440a      	add	r2, r1
 800cafe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	015a      	lsls	r2, r3, #5
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4413      	add	r3, r2
 800cb10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	0151      	lsls	r1, r2, #5
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	440a      	add	r2, r1
 800cb1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 030f 	and.w	r3, r3, #15
 800cb38:	2101      	movs	r1, #1
 800cb3a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb3e:	041b      	lsls	r3, r3, #16
 800cb40:	43db      	mvns	r3, r3
 800cb42:	68f9      	ldr	r1, [r7, #12]
 800cb44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb48:	4013      	ands	r3, r2
 800cb4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb52:	69da      	ldr	r2, [r3, #28]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	f003 030f 	and.w	r3, r3, #15
 800cb5c:	2101      	movs	r1, #1
 800cb5e:	fa01 f303 	lsl.w	r3, r1, r3
 800cb62:	041b      	lsls	r3, r3, #16
 800cb64:	43db      	mvns	r3, r3
 800cb66:	68f9      	ldr	r1, [r7, #12]
 800cb68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	015a      	lsls	r2, r3, #5
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	4413      	add	r3, r2
 800cb78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	0159      	lsls	r1, r3, #5
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	440b      	add	r3, r1
 800cb86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	4b05      	ldr	r3, [pc, #20]	; (800cba4 <USB_DeactivateEndpoint+0x1b4>)
 800cb8e:	4013      	ands	r3, r2
 800cb90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	ec337800 	.word	0xec337800
 800cba4:	eff37800 	.word	0xeff37800

0800cba8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b08a      	sub	sp, #40	; 0x28
 800cbac:	af02      	add	r7, sp, #8
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	785b      	ldrb	r3, [r3, #1]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	f040 8163 	bne.w	800ce90 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d132      	bne.n	800cc38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	015a      	lsls	r2, r3, #5
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	4413      	add	r3, r2
 800cbda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbde:	691a      	ldr	r2, [r3, #16]
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	0159      	lsls	r1, r3, #5
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	440b      	add	r3, r1
 800cbe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbec:	4619      	mov	r1, r3
 800cbee:	4ba5      	ldr	r3, [pc, #660]	; (800ce84 <USB_EPStartXfer+0x2dc>)
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	015a      	lsls	r2, r3, #5
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc00:	691b      	ldr	r3, [r3, #16]
 800cc02:	69ba      	ldr	r2, [r7, #24]
 800cc04:	0151      	lsls	r1, r2, #5
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	440a      	add	r2, r1
 800cc0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	015a      	lsls	r2, r3, #5
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc20:	691a      	ldr	r2, [r3, #16]
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	0159      	lsls	r1, r3, #5
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	440b      	add	r3, r1
 800cc2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc2e:	4619      	mov	r1, r3
 800cc30:	4b95      	ldr	r3, [pc, #596]	; (800ce88 <USB_EPStartXfer+0x2e0>)
 800cc32:	4013      	ands	r3, r2
 800cc34:	610b      	str	r3, [r1, #16]
 800cc36:	e074      	b.n	800cd22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	015a      	lsls	r2, r3, #5
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc44:	691a      	ldr	r2, [r3, #16]
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	0159      	lsls	r1, r3, #5
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	440b      	add	r3, r1
 800cc4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc52:	4619      	mov	r1, r3
 800cc54:	4b8c      	ldr	r3, [pc, #560]	; (800ce88 <USB_EPStartXfer+0x2e0>)
 800cc56:	4013      	ands	r3, r2
 800cc58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	015a      	lsls	r2, r3, #5
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	4413      	add	r3, r2
 800cc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc66:	691a      	ldr	r2, [r3, #16]
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	0159      	lsls	r1, r3, #5
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	440b      	add	r3, r1
 800cc70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc74:	4619      	mov	r1, r3
 800cc76:	4b83      	ldr	r3, [pc, #524]	; (800ce84 <USB_EPStartXfer+0x2dc>)
 800cc78:	4013      	ands	r3, r2
 800cc7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	015a      	lsls	r2, r3, #5
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	4413      	add	r3, r2
 800cc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc88:	691a      	ldr	r2, [r3, #16]
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	6959      	ldr	r1, [r3, #20]
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	440b      	add	r3, r1
 800cc94:	1e59      	subs	r1, r3, #1
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	fbb1 f3f3 	udiv	r3, r1, r3
 800cc9e:	04d9      	lsls	r1, r3, #19
 800cca0:	4b7a      	ldr	r3, [pc, #488]	; (800ce8c <USB_EPStartXfer+0x2e4>)
 800cca2:	400b      	ands	r3, r1
 800cca4:	69b9      	ldr	r1, [r7, #24]
 800cca6:	0148      	lsls	r0, r1, #5
 800cca8:	69f9      	ldr	r1, [r7, #28]
 800ccaa:	4401      	add	r1, r0
 800ccac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	015a      	lsls	r2, r3, #5
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc0:	691a      	ldr	r2, [r3, #16]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccca:	69b9      	ldr	r1, [r7, #24]
 800cccc:	0148      	lsls	r0, r1, #5
 800ccce:	69f9      	ldr	r1, [r7, #28]
 800ccd0:	4401      	add	r1, r0
 800ccd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	78db      	ldrb	r3, [r3, #3]
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d11f      	bne.n	800cd22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	015a      	lsls	r2, r3, #5
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	4413      	add	r3, r2
 800ccea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	69ba      	ldr	r2, [r7, #24]
 800ccf2:	0151      	lsls	r1, r2, #5
 800ccf4:	69fa      	ldr	r2, [r7, #28]
 800ccf6:	440a      	add	r2, r1
 800ccf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cd00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	015a      	lsls	r2, r3, #5
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	4413      	add	r3, r2
 800cd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	69ba      	ldr	r2, [r7, #24]
 800cd12:	0151      	lsls	r1, r2, #5
 800cd14:	69fa      	ldr	r2, [r7, #28]
 800cd16:	440a      	add	r2, r1
 800cd18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cd22:	79fb      	ldrb	r3, [r7, #7]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d14b      	bne.n	800cdc0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d009      	beq.n	800cd44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	015a      	lsls	r2, r3, #5
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	4413      	add	r3, r2
 800cd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	78db      	ldrb	r3, [r3, #3]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d128      	bne.n	800cd9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d110      	bne.n	800cd7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	69ba      	ldr	r2, [r7, #24]
 800cd6c:	0151      	lsls	r1, r2, #5
 800cd6e:	69fa      	ldr	r2, [r7, #28]
 800cd70:	440a      	add	r2, r1
 800cd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd7a:	6013      	str	r3, [r2, #0]
 800cd7c:	e00f      	b.n	800cd9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	015a      	lsls	r2, r3, #5
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	4413      	add	r3, r2
 800cd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	69ba      	ldr	r2, [r7, #24]
 800cd8e:	0151      	lsls	r1, r2, #5
 800cd90:	69fa      	ldr	r2, [r7, #28]
 800cd92:	440a      	add	r2, r1
 800cd94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd9e:	69bb      	ldr	r3, [r7, #24]
 800cda0:	015a      	lsls	r2, r3, #5
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	4413      	add	r3, r2
 800cda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	69ba      	ldr	r2, [r7, #24]
 800cdae:	0151      	lsls	r1, r2, #5
 800cdb0:	69fa      	ldr	r2, [r7, #28]
 800cdb2:	440a      	add	r2, r1
 800cdb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	e133      	b.n	800d028 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	015a      	lsls	r2, r3, #5
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	69ba      	ldr	r2, [r7, #24]
 800cdd0:	0151      	lsls	r1, r2, #5
 800cdd2:	69fa      	ldr	r2, [r7, #28]
 800cdd4:	440a      	add	r2, r1
 800cdd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cdde:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	78db      	ldrb	r3, [r3, #3]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d015      	beq.n	800ce14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 811b 	beq.w	800d028 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	f003 030f 	and.w	r3, r3, #15
 800ce02:	2101      	movs	r1, #1
 800ce04:	fa01 f303 	lsl.w	r3, r1, r3
 800ce08:	69f9      	ldr	r1, [r7, #28]
 800ce0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	634b      	str	r3, [r1, #52]	; 0x34
 800ce12:	e109      	b.n	800d028 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d110      	bne.n	800ce46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	015a      	lsls	r2, r3, #5
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	69ba      	ldr	r2, [r7, #24]
 800ce34:	0151      	lsls	r1, r2, #5
 800ce36:	69fa      	ldr	r2, [r7, #28]
 800ce38:	440a      	add	r2, r1
 800ce3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ce42:	6013      	str	r3, [r2, #0]
 800ce44:	e00f      	b.n	800ce66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	015a      	lsls	r2, r3, #5
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	69ba      	ldr	r2, [r7, #24]
 800ce56:	0151      	lsls	r1, r2, #5
 800ce58:	69fa      	ldr	r2, [r7, #28]
 800ce5a:	440a      	add	r2, r1
 800ce5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	68d9      	ldr	r1, [r3, #12]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	781a      	ldrb	r2, [r3, #0]
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	b298      	uxth	r0, r3
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	9300      	str	r3, [sp, #0]
 800ce78:	4603      	mov	r3, r0
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	f000 fa38 	bl	800d2f0 <USB_WritePacket>
 800ce80:	e0d2      	b.n	800d028 <USB_EPStartXfer+0x480>
 800ce82:	bf00      	nop
 800ce84:	e007ffff 	.word	0xe007ffff
 800ce88:	fff80000 	.word	0xfff80000
 800ce8c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	015a      	lsls	r2, r3, #5
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	4413      	add	r3, r2
 800ce98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce9c:	691a      	ldr	r2, [r3, #16]
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	0159      	lsls	r1, r3, #5
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	440b      	add	r3, r1
 800cea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4b61      	ldr	r3, [pc, #388]	; (800d034 <USB_EPStartXfer+0x48c>)
 800ceae:	4013      	ands	r3, r2
 800ceb0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	015a      	lsls	r2, r3, #5
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	4413      	add	r3, r2
 800ceba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cebe:	691a      	ldr	r2, [r3, #16]
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	0159      	lsls	r1, r3, #5
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	440b      	add	r3, r1
 800cec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cecc:	4619      	mov	r1, r3
 800cece:	4b5a      	ldr	r3, [pc, #360]	; (800d038 <USB_EPStartXfer+0x490>)
 800ced0:	4013      	ands	r3, r2
 800ced2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	695b      	ldr	r3, [r3, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d123      	bne.n	800cf24 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	015a      	lsls	r2, r3, #5
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	4413      	add	r3, r2
 800cee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee8:	691a      	ldr	r2, [r3, #16]
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cef2:	69b9      	ldr	r1, [r7, #24]
 800cef4:	0148      	lsls	r0, r1, #5
 800cef6:	69f9      	ldr	r1, [r7, #28]
 800cef8:	4401      	add	r1, r0
 800cefa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cefe:	4313      	orrs	r3, r2
 800cf00:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	015a      	lsls	r2, r3, #5
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	4413      	add	r3, r2
 800cf0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	69ba      	ldr	r2, [r7, #24]
 800cf12:	0151      	lsls	r1, r2, #5
 800cf14:	69fa      	ldr	r2, [r7, #28]
 800cf16:	440a      	add	r2, r1
 800cf18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf20:	6113      	str	r3, [r2, #16]
 800cf22:	e033      	b.n	800cf8c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	695a      	ldr	r2, [r3, #20]
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	689b      	ldr	r3, [r3, #8]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	1e5a      	subs	r2, r3, #1
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf38:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	015a      	lsls	r2, r3, #5
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	4413      	add	r3, r2
 800cf42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf46:	691a      	ldr	r2, [r3, #16]
 800cf48:	8afb      	ldrh	r3, [r7, #22]
 800cf4a:	04d9      	lsls	r1, r3, #19
 800cf4c:	4b3b      	ldr	r3, [pc, #236]	; (800d03c <USB_EPStartXfer+0x494>)
 800cf4e:	400b      	ands	r3, r1
 800cf50:	69b9      	ldr	r1, [r7, #24]
 800cf52:	0148      	lsls	r0, r1, #5
 800cf54:	69f9      	ldr	r1, [r7, #28]
 800cf56:	4401      	add	r1, r0
 800cf58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	015a      	lsls	r2, r3, #5
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	4413      	add	r3, r2
 800cf68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf6c:	691a      	ldr	r2, [r3, #16]
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	8af9      	ldrh	r1, [r7, #22]
 800cf74:	fb01 f303 	mul.w	r3, r1, r3
 800cf78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cf7c:	69b9      	ldr	r1, [r7, #24]
 800cf7e:	0148      	lsls	r0, r1, #5
 800cf80:	69f9      	ldr	r1, [r7, #28]
 800cf82:	4401      	add	r1, r0
 800cf84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cf8c:	79fb      	ldrb	r3, [r7, #7]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d10d      	bne.n	800cfae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d009      	beq.n	800cfae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	68d9      	ldr	r1, [r3, #12]
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	015a      	lsls	r2, r3, #5
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfaa:	460a      	mov	r2, r1
 800cfac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	78db      	ldrb	r3, [r3, #3]
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d128      	bne.n	800d008 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d110      	bne.n	800cfe8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	015a      	lsls	r2, r3, #5
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	69ba      	ldr	r2, [r7, #24]
 800cfd6:	0151      	lsls	r1, r2, #5
 800cfd8:	69fa      	ldr	r2, [r7, #28]
 800cfda:	440a      	add	r2, r1
 800cfdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	e00f      	b.n	800d008 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	015a      	lsls	r2, r3, #5
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	4413      	add	r3, r2
 800cff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	69ba      	ldr	r2, [r7, #24]
 800cff8:	0151      	lsls	r1, r2, #5
 800cffa:	69fa      	ldr	r2, [r7, #28]
 800cffc:	440a      	add	r2, r1
 800cffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d006:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	015a      	lsls	r2, r3, #5
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	4413      	add	r3, r2
 800d010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	69ba      	ldr	r2, [r7, #24]
 800d018:	0151      	lsls	r1, r2, #5
 800d01a:	69fa      	ldr	r2, [r7, #28]
 800d01c:	440a      	add	r2, r1
 800d01e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d022:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3720      	adds	r7, #32
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	fff80000 	.word	0xfff80000
 800d038:	e007ffff 	.word	0xe007ffff
 800d03c:	1ff80000 	.word	0x1ff80000

0800d040 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d040:	b480      	push	{r7}
 800d042:	b087      	sub	sp, #28
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	4613      	mov	r3, r2
 800d04c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	785b      	ldrb	r3, [r3, #1]
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	f040 80cd 	bne.w	800d1fc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	695b      	ldr	r3, [r3, #20]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d132      	bne.n	800d0d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	015a      	lsls	r2, r3, #5
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	4413      	add	r3, r2
 800d072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d076:	691a      	ldr	r2, [r3, #16]
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	0159      	lsls	r1, r3, #5
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	440b      	add	r3, r1
 800d080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d084:	4619      	mov	r1, r3
 800d086:	4b98      	ldr	r3, [pc, #608]	; (800d2e8 <USB_EP0StartXfer+0x2a8>)
 800d088:	4013      	ands	r3, r2
 800d08a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	4413      	add	r3, r2
 800d094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	693a      	ldr	r2, [r7, #16]
 800d09c:	0151      	lsls	r1, r2, #5
 800d09e:	697a      	ldr	r2, [r7, #20]
 800d0a0:	440a      	add	r2, r1
 800d0a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	015a      	lsls	r2, r3, #5
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0b8:	691a      	ldr	r2, [r3, #16]
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	0159      	lsls	r1, r3, #5
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	440b      	add	r3, r1
 800d0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4b88      	ldr	r3, [pc, #544]	; (800d2ec <USB_EP0StartXfer+0x2ac>)
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	610b      	str	r3, [r1, #16]
 800d0ce:	e04e      	b.n	800d16e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	015a      	lsls	r2, r3, #5
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0dc:	691a      	ldr	r2, [r3, #16]
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	0159      	lsls	r1, r3, #5
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	440b      	add	r3, r1
 800d0e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	4b7f      	ldr	r3, [pc, #508]	; (800d2ec <USB_EP0StartXfer+0x2ac>)
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	015a      	lsls	r2, r3, #5
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0fe:	691a      	ldr	r2, [r3, #16]
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	0159      	lsls	r1, r3, #5
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	440b      	add	r3, r1
 800d108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d10c:	4619      	mov	r1, r3
 800d10e:	4b76      	ldr	r3, [pc, #472]	; (800d2e8 <USB_EP0StartXfer+0x2a8>)
 800d110:	4013      	ands	r3, r2
 800d112:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	695a      	ldr	r2, [r3, #20]
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d903      	bls.n	800d128 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	689a      	ldr	r2, [r3, #8]
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	015a      	lsls	r2, r3, #5
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	4413      	add	r3, r2
 800d130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d134:	691b      	ldr	r3, [r3, #16]
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	0151      	lsls	r1, r2, #5
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	440a      	add	r2, r1
 800d13e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	015a      	lsls	r2, r3, #5
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	4413      	add	r3, r2
 800d150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d154:	691a      	ldr	r2, [r3, #16]
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	695b      	ldr	r3, [r3, #20]
 800d15a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d15e:	6939      	ldr	r1, [r7, #16]
 800d160:	0148      	lsls	r0, r1, #5
 800d162:	6979      	ldr	r1, [r7, #20]
 800d164:	4401      	add	r1, r0
 800d166:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d16a:	4313      	orrs	r3, r2
 800d16c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d16e:	79fb      	ldrb	r3, [r7, #7]
 800d170:	2b01      	cmp	r3, #1
 800d172:	d11e      	bne.n	800d1b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	691b      	ldr	r3, [r3, #16]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d009      	beq.n	800d190 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	015a      	lsls	r2, r3, #5
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	4413      	add	r3, r2
 800d184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d188:	461a      	mov	r2, r3
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	015a      	lsls	r2, r3, #5
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	4413      	add	r3, r2
 800d198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	0151      	lsls	r1, r2, #5
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	440a      	add	r2, r1
 800d1a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	e092      	b.n	800d2d8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	0151      	lsls	r1, r2, #5
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	440a      	add	r2, r1
 800d1c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d1d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d07e      	beq.n	800d2d8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	f003 030f 	and.w	r3, r3, #15
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	fa01 f303 	lsl.w	r3, r1, r3
 800d1f0:	6979      	ldr	r1, [r7, #20]
 800d1f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	634b      	str	r3, [r1, #52]	; 0x34
 800d1fa:	e06d      	b.n	800d2d8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	015a      	lsls	r2, r3, #5
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	4413      	add	r3, r2
 800d204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d208:	691a      	ldr	r2, [r3, #16]
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	0159      	lsls	r1, r3, #5
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	440b      	add	r3, r1
 800d212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d216:	4619      	mov	r1, r3
 800d218:	4b34      	ldr	r3, [pc, #208]	; (800d2ec <USB_EP0StartXfer+0x2ac>)
 800d21a:	4013      	ands	r3, r2
 800d21c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	015a      	lsls	r2, r3, #5
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	4413      	add	r3, r2
 800d226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d22a:	691a      	ldr	r2, [r3, #16]
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	0159      	lsls	r1, r3, #5
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	440b      	add	r3, r1
 800d234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d238:	4619      	mov	r1, r3
 800d23a:	4b2b      	ldr	r3, [pc, #172]	; (800d2e8 <USB_EP0StartXfer+0x2a8>)
 800d23c:	4013      	ands	r3, r2
 800d23e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	695b      	ldr	r3, [r3, #20]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d003      	beq.n	800d250 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	689a      	ldr	r2, [r3, #8]
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	015a      	lsls	r2, r3, #5
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	4413      	add	r3, r2
 800d258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	0151      	lsls	r1, r2, #5
 800d262:	697a      	ldr	r2, [r7, #20]
 800d264:	440a      	add	r2, r1
 800d266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d26a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d26e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	015a      	lsls	r2, r3, #5
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	4413      	add	r3, r2
 800d278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d27c:	691a      	ldr	r2, [r3, #16]
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d286:	6939      	ldr	r1, [r7, #16]
 800d288:	0148      	lsls	r0, r1, #5
 800d28a:	6979      	ldr	r1, [r7, #20]
 800d28c:	4401      	add	r1, r0
 800d28e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d292:	4313      	orrs	r3, r2
 800d294:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d296:	79fb      	ldrb	r3, [r7, #7]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d10d      	bne.n	800d2b8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d009      	beq.n	800d2b8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	68d9      	ldr	r1, [r3, #12]
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	015a      	lsls	r2, r3, #5
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b4:	460a      	mov	r2, r1
 800d2b6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	015a      	lsls	r2, r3, #5
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	4413      	add	r3, r2
 800d2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	693a      	ldr	r2, [r7, #16]
 800d2c8:	0151      	lsls	r1, r2, #5
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	440a      	add	r2, r1
 800d2ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d2d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	371c      	adds	r7, #28
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop
 800d2e8:	e007ffff 	.word	0xe007ffff
 800d2ec:	fff80000 	.word	0xfff80000

0800d2f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b089      	sub	sp, #36	; 0x24
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	4611      	mov	r1, r2
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	460b      	mov	r3, r1
 800d300:	71fb      	strb	r3, [r7, #7]
 800d302:	4613      	mov	r3, r2
 800d304:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d30e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d312:	2b00      	cmp	r3, #0
 800d314:	d123      	bne.n	800d35e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d316:	88bb      	ldrh	r3, [r7, #4]
 800d318:	3303      	adds	r3, #3
 800d31a:	089b      	lsrs	r3, r3, #2
 800d31c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d31e:	2300      	movs	r3, #0
 800d320:	61bb      	str	r3, [r7, #24]
 800d322:	e018      	b.n	800d356 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d324:	79fb      	ldrb	r3, [r7, #7]
 800d326:	031a      	lsls	r2, r3, #12
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	4413      	add	r3, r2
 800d32c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d330:	461a      	mov	r2, r3
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	3301      	adds	r3, #1
 800d33c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	3301      	adds	r3, #1
 800d342:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	3301      	adds	r3, #1
 800d348:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	3301      	adds	r3, #1
 800d34e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	3301      	adds	r3, #1
 800d354:	61bb      	str	r3, [r7, #24]
 800d356:	69ba      	ldr	r2, [r7, #24]
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d3e2      	bcc.n	800d324 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3724      	adds	r7, #36	; 0x24
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b08b      	sub	sp, #44	; 0x2c
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	4613      	mov	r3, r2
 800d378:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d382:	88fb      	ldrh	r3, [r7, #6]
 800d384:	089b      	lsrs	r3, r3, #2
 800d386:	b29b      	uxth	r3, r3
 800d388:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d38a:	88fb      	ldrh	r3, [r7, #6]
 800d38c:	f003 0303 	and.w	r3, r3, #3
 800d390:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d392:	2300      	movs	r3, #0
 800d394:	623b      	str	r3, [r7, #32]
 800d396:	e014      	b.n	800d3c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	601a      	str	r2, [r3, #0]
    pDest++;
 800d3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d3bc:	6a3b      	ldr	r3, [r7, #32]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	623b      	str	r3, [r7, #32]
 800d3c2:	6a3a      	ldr	r2, [r7, #32]
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d3e6      	bcc.n	800d398 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d3ca:	8bfb      	ldrh	r3, [r7, #30]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d01e      	beq.n	800d40e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3da:	461a      	mov	r2, r3
 800d3dc:	f107 0310 	add.w	r3, r7, #16
 800d3e0:	6812      	ldr	r2, [r2, #0]
 800d3e2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d3e4:	693a      	ldr	r2, [r7, #16]
 800d3e6:	6a3b      	ldr	r3, [r7, #32]
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	00db      	lsls	r3, r3, #3
 800d3ec:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	701a      	strb	r2, [r3, #0]
      i++;
 800d3f6:	6a3b      	ldr	r3, [r7, #32]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	623b      	str	r3, [r7, #32]
      pDest++;
 800d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fe:	3301      	adds	r3, #1
 800d400:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d402:	8bfb      	ldrh	r3, [r7, #30]
 800d404:	3b01      	subs	r3, #1
 800d406:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d408:	8bfb      	ldrh	r3, [r7, #30]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1ea      	bne.n	800d3e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d410:	4618      	mov	r0, r3
 800d412:	372c      	adds	r7, #44	; 0x2c
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	785b      	ldrb	r3, [r3, #1]
 800d434:	2b01      	cmp	r3, #1
 800d436:	d12c      	bne.n	800d492 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	015a      	lsls	r2, r3, #5
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	4413      	add	r3, r2
 800d440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	db12      	blt.n	800d470 <USB_EPSetStall+0x54>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00f      	beq.n	800d470 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	015a      	lsls	r2, r3, #5
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	4413      	add	r3, r2
 800d458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68ba      	ldr	r2, [r7, #8]
 800d460:	0151      	lsls	r1, r2, #5
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	440a      	add	r2, r1
 800d466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d46a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d46e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	015a      	lsls	r2, r3, #5
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	4413      	add	r3, r2
 800d478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	0151      	lsls	r1, r2, #5
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	440a      	add	r2, r1
 800d486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d48a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d48e:	6013      	str	r3, [r2, #0]
 800d490:	e02b      	b.n	800d4ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	015a      	lsls	r2, r3, #5
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	4413      	add	r3, r2
 800d49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	db12      	blt.n	800d4ca <USB_EPSetStall+0xae>
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00f      	beq.n	800d4ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	015a      	lsls	r2, r3, #5
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	68ba      	ldr	r2, [r7, #8]
 800d4ba:	0151      	lsls	r1, r2, #5
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	440a      	add	r2, r1
 800d4c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d4c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	015a      	lsls	r2, r3, #5
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	0151      	lsls	r1, r2, #5
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	440a      	add	r2, r1
 800d4e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d4e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b085      	sub	sp, #20
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	785b      	ldrb	r3, [r3, #1]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d128      	bne.n	800d566 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	015a      	lsls	r2, r3, #5
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	4413      	add	r3, r2
 800d51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	0151      	lsls	r1, r2, #5
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	440a      	add	r2, r1
 800d52a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d52e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d532:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	78db      	ldrb	r3, [r3, #3]
 800d538:	2b03      	cmp	r3, #3
 800d53a:	d003      	beq.n	800d544 <USB_EPClearStall+0x4c>
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	78db      	ldrb	r3, [r3, #3]
 800d540:	2b02      	cmp	r3, #2
 800d542:	d138      	bne.n	800d5b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	015a      	lsls	r2, r3, #5
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	4413      	add	r3, r2
 800d54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	0151      	lsls	r1, r2, #5
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	440a      	add	r2, r1
 800d55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d55e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d562:	6013      	str	r3, [r2, #0]
 800d564:	e027      	b.n	800d5b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	015a      	lsls	r2, r3, #5
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	4413      	add	r3, r2
 800d56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	0151      	lsls	r1, r2, #5
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	440a      	add	r2, r1
 800d57c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d584:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	78db      	ldrb	r3, [r3, #3]
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	d003      	beq.n	800d596 <USB_EPClearStall+0x9e>
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	78db      	ldrb	r3, [r3, #3]
 800d592:	2b02      	cmp	r3, #2
 800d594:	d10f      	bne.n	800d5b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	015a      	lsls	r2, r3, #5
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	4413      	add	r3, r2
 800d59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	0151      	lsls	r1, r2, #5
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	440a      	add	r2, r1
 800d5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d5e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	78fb      	ldrb	r3, [r7, #3]
 800d5f2:	011b      	lsls	r3, r3, #4
 800d5f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d5f8:	68f9      	ldr	r1, [r7, #12]
 800d5fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5fe:	4313      	orrs	r3, r2
 800d600:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3714      	adds	r7, #20
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d610:	b480      	push	{r7}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d62a:	f023 0303 	bic.w	r3, r3, #3
 800d62e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d63e:	f023 0302 	bic.w	r3, r3, #2
 800d642:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d652:	b480      	push	{r7}
 800d654:	b085      	sub	sp, #20
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d66c:	f023 0303 	bic.w	r3, r3, #3
 800d670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d680:	f043 0302 	orr.w	r3, r3, #2
 800d684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3714      	adds	r7, #20
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	695b      	ldr	r3, [r3, #20]
 800d6a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3714      	adds	r7, #20
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr

0800d6ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d6ba:	b480      	push	{r7}
 800d6bc:	b085      	sub	sp, #20
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6d6:	69db      	ldr	r3, [r3, #28]
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	4013      	ands	r3, r2
 800d6dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	0c1b      	lsrs	r3, r3, #16
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3714      	adds	r7, #20
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr

0800d6ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b085      	sub	sp, #20
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d70a:	69db      	ldr	r3, [r3, #28]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	4013      	ands	r3, r2
 800d710:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	b29b      	uxth	r3, r3
}
 800d716:	4618      	mov	r0, r3
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d722:	b480      	push	{r7}
 800d724:	b085      	sub	sp, #20
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	460b      	mov	r3, r1
 800d72c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d732:	78fb      	ldrb	r3, [r7, #3]
 800d734:	015a      	lsls	r2, r3, #5
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	4413      	add	r3, r2
 800d73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d748:	695b      	ldr	r3, [r3, #20]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	4013      	ands	r3, r2
 800d74e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d750:	68bb      	ldr	r3, [r7, #8]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3714      	adds	r7, #20
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d75e:	b480      	push	{r7}
 800d760:	b087      	sub	sp, #28
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	460b      	mov	r3, r1
 800d768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d780:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d782:	78fb      	ldrb	r3, [r7, #3]
 800d784:	f003 030f 	and.w	r3, r3, #15
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	fa22 f303 	lsr.w	r3, r2, r3
 800d78e:	01db      	lsls	r3, r3, #7
 800d790:	b2db      	uxtb	r3, r3
 800d792:	693a      	ldr	r2, [r7, #16]
 800d794:	4313      	orrs	r3, r2
 800d796:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d798:	78fb      	ldrb	r3, [r7, #3]
 800d79a:	015a      	lsls	r2, r3, #5
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	4413      	add	r3, r2
 800d7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	693a      	ldr	r2, [r7, #16]
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d7ac:	68bb      	ldr	r3, [r7, #8]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	371c      	adds	r7, #28
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	b083      	sub	sp, #12
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	695b      	ldr	r3, [r3, #20]
 800d7c6:	f003 0301 	and.w	r3, r3, #1
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	370c      	adds	r7, #12
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
	...

0800d7d8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4b09      	ldr	r3, [pc, #36]	; (800d81c <USB_ActivateSetup+0x44>)
 800d7f6:	4013      	ands	r3, r2
 800d7f8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	68fa      	ldr	r2, [r7, #12]
 800d804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d80c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3714      	adds	r7, #20
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr
 800d81c:	fffff800 	.word	0xfffff800

0800d820 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d820:	b480      	push	{r7}
 800d822:	b087      	sub	sp, #28
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	460b      	mov	r3, r1
 800d82a:	607a      	str	r2, [r7, #4]
 800d82c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	333c      	adds	r3, #60	; 0x3c
 800d836:	3304      	adds	r3, #4
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	4a26      	ldr	r2, [pc, #152]	; (800d8d8 <USB_EP0_OutStart+0xb8>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d90a      	bls.n	800d85a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d854:	d101      	bne.n	800d85a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d856:	2300      	movs	r3, #0
 800d858:	e037      	b.n	800d8ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d860:	461a      	mov	r2, r3
 800d862:	2300      	movs	r3, #0
 800d864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d888:	f043 0318 	orr.w	r3, r3, #24
 800d88c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d894:	691b      	ldr	r3, [r3, #16]
 800d896:	697a      	ldr	r2, [r7, #20]
 800d898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d89c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d8a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d8a2:	7afb      	ldrb	r3, [r7, #11]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d10f      	bne.n	800d8c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d8c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	371c      	adds	r7, #28
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	4f54300a 	.word	0x4f54300a

0800d8dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b085      	sub	sp, #20
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	4a13      	ldr	r2, [pc, #76]	; (800d940 <USB_CoreReset+0x64>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d901      	bls.n	800d8fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e01b      	b.n	800d932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	daf2      	bge.n	800d8e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d902:	2300      	movs	r3, #0
 800d904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	f043 0201 	orr.w	r2, r3, #1
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	3301      	adds	r3, #1
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	4a09      	ldr	r2, [pc, #36]	; (800d940 <USB_CoreReset+0x64>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d901      	bls.n	800d924 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d920:	2303      	movs	r3, #3
 800d922:	e006      	b.n	800d932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	691b      	ldr	r3, [r3, #16]
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d0f0      	beq.n	800d912 <USB_CoreReset+0x36>

  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3714      	adds	r7, #20
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	00030d40 	.word	0x00030d40

0800d944 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d94c:	f000 f80e 	bl	800d96c <BSP_SD_WriteCpltCallback>
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d960:	f000 f810 	bl	800d984 <BSP_SD_ReadCpltCallback>
}
 800d964:	bf00      	nop
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d96c:	b480      	push	{r7}
 800d96e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d970:	4b03      	ldr	r3, [pc, #12]	; (800d980 <BSP_SD_WriteCpltCallback+0x14>)
 800d972:	2201      	movs	r2, #1
 800d974:	601a      	str	r2, [r3, #0]
}
 800d976:	bf00      	nop
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	24000714 	.word	0x24000714

0800d984 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d984:	b480      	push	{r7}
 800d986:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d988:	4b03      	ldr	r3, [pc, #12]	; (800d998 <BSP_SD_ReadCpltCallback+0x14>)
 800d98a:	2201      	movs	r2, #1
 800d98c:	601a      	str	r2, [r3, #0]
}
 800d98e:	bf00      	nop
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr
 800d998:	24000718 	.word	0x24000718

0800d99c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d9a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d9ac:	f002 f9be 	bl	800fd2c <malloc>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d105      	bne.n	800d9c6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	e066      	b.n	800da94 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	7c1b      	ldrb	r3, [r3, #16]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d119      	bne.n	800da0a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d9d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9da:	2202      	movs	r2, #2
 800d9dc:	2181      	movs	r1, #129	; 0x81
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f002 f82b 	bl	800fa3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d9ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9ee:	2202      	movs	r2, #2
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f002 f821 	bl	800fa3a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2210      	movs	r2, #16
 800da04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800da08:	e016      	b.n	800da38 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800da0a:	2340      	movs	r3, #64	; 0x40
 800da0c:	2202      	movs	r2, #2
 800da0e:	2181      	movs	r1, #129	; 0x81
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f002 f812 	bl	800fa3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2201      	movs	r2, #1
 800da1a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800da1c:	2340      	movs	r3, #64	; 0x40
 800da1e:	2202      	movs	r2, #2
 800da20:	2101      	movs	r1, #1
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f002 f809 	bl	800fa3a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2210      	movs	r2, #16
 800da34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800da38:	2308      	movs	r3, #8
 800da3a:	2203      	movs	r2, #3
 800da3c:	2182      	movs	r1, #130	; 0x82
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f001 fffb 	bl	800fa3a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2201      	movs	r2, #1
 800da48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2200      	movs	r2, #0
 800da62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	7c1b      	ldrb	r3, [r3, #16]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d109      	bne.n	800da82 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da78:	2101      	movs	r1, #1
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f002 f8cc 	bl	800fc18 <USBD_LL_PrepareReceive>
 800da80:	e007      	b.n	800da92 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da88:	2340      	movs	r3, #64	; 0x40
 800da8a:	2101      	movs	r1, #1
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f002 f8c3 	bl	800fc18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800daac:	2181      	movs	r1, #129	; 0x81
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f001 ffe9 	bl	800fa86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800daba:	2101      	movs	r1, #1
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f001 ffe2 	bl	800fa86 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800daca:	2182      	movs	r1, #130	; 0x82
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f001 ffda 	bl	800fa86 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2200      	movs	r2, #0
 800dade:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00e      	beq.n	800db0a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dafc:	4618      	mov	r0, r3
 800dafe:	f002 f91d 	bl	800fd3c <free>
    pdev->pClassData = NULL;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3710      	adds	r7, #16
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db24:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800db26:	2300      	movs	r3, #0
 800db28:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800db2a:	2300      	movs	r3, #0
 800db2c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d03a      	beq.n	800dbb4 <USBD_CDC_Setup+0xa0>
 800db3e:	2b20      	cmp	r3, #32
 800db40:	f040 809a 	bne.w	800dc78 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	88db      	ldrh	r3, [r3, #6]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d029      	beq.n	800dba0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	b25b      	sxtb	r3, r3
 800db52:	2b00      	cmp	r3, #0
 800db54:	da11      	bge.n	800db7a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	683a      	ldr	r2, [r7, #0]
 800db60:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800db62:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	88d2      	ldrh	r2, [r2, #6]
 800db68:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800db6a:	6939      	ldr	r1, [r7, #16]
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	88db      	ldrh	r3, [r3, #6]
 800db70:	461a      	mov	r2, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f001 fabf 	bl	800f0f6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800db78:	e085      	b.n	800dc86 <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	785a      	ldrb	r2, [r3, #1]
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	88db      	ldrh	r3, [r3, #6]
 800db88:	b2da      	uxtb	r2, r3
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800db90:	6939      	ldr	r1, [r7, #16]
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	88db      	ldrh	r3, [r3, #6]
 800db96:	461a      	mov	r2, r3
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f001 fad8 	bl	800f14e <USBD_CtlPrepareRx>
    break;
 800db9e:	e072      	b.n	800dc86 <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dba6:	689b      	ldr	r3, [r3, #8]
 800dba8:	683a      	ldr	r2, [r7, #0]
 800dbaa:	7850      	ldrb	r0, [r2, #1]
 800dbac:	2200      	movs	r2, #0
 800dbae:	6839      	ldr	r1, [r7, #0]
 800dbb0:	4798      	blx	r3
    break;
 800dbb2:	e068      	b.n	800dc86 <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	785b      	ldrb	r3, [r3, #1]
 800dbb8:	2b0b      	cmp	r3, #11
 800dbba:	d852      	bhi.n	800dc62 <USBD_CDC_Setup+0x14e>
 800dbbc:	a201      	add	r2, pc, #4	; (adr r2, 800dbc4 <USBD_CDC_Setup+0xb0>)
 800dbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc2:	bf00      	nop
 800dbc4:	0800dbf5 	.word	0x0800dbf5
 800dbc8:	0800dc71 	.word	0x0800dc71
 800dbcc:	0800dc63 	.word	0x0800dc63
 800dbd0:	0800dc63 	.word	0x0800dc63
 800dbd4:	0800dc63 	.word	0x0800dc63
 800dbd8:	0800dc63 	.word	0x0800dc63
 800dbdc:	0800dc63 	.word	0x0800dc63
 800dbe0:	0800dc63 	.word	0x0800dc63
 800dbe4:	0800dc63 	.word	0x0800dc63
 800dbe8:	0800dc63 	.word	0x0800dc63
 800dbec:	0800dc1f 	.word	0x0800dc1f
 800dbf0:	0800dc49 	.word	0x0800dc49
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	2b03      	cmp	r3, #3
 800dbfe:	d107      	bne.n	800dc10 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dc00:	f107 030c 	add.w	r3, r7, #12
 800dc04:	2202      	movs	r2, #2
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f001 fa74 	bl	800f0f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dc0e:	e032      	b.n	800dc76 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f001 f9fe 	bl	800f014 <USBD_CtlError>
        ret = USBD_FAIL;
 800dc18:	2303      	movs	r3, #3
 800dc1a:	75fb      	strb	r3, [r7, #23]
      break;
 800dc1c:	e02b      	b.n	800dc76 <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d107      	bne.n	800dc3a <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dc2a:	f107 030f 	add.w	r3, r7, #15
 800dc2e:	2201      	movs	r2, #1
 800dc30:	4619      	mov	r1, r3
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f001 fa5f 	bl	800f0f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800dc38:	e01d      	b.n	800dc76 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800dc3a:	6839      	ldr	r1, [r7, #0]
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f001 f9e9 	bl	800f014 <USBD_CtlError>
        ret = USBD_FAIL;
 800dc42:	2303      	movs	r3, #3
 800dc44:	75fb      	strb	r3, [r7, #23]
      break;
 800dc46:	e016      	b.n	800dc76 <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	2b03      	cmp	r3, #3
 800dc52:	d00f      	beq.n	800dc74 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f001 f9dc 	bl	800f014 <USBD_CtlError>
        ret = USBD_FAIL;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800dc60:	e008      	b.n	800dc74 <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800dc62:	6839      	ldr	r1, [r7, #0]
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f001 f9d5 	bl	800f014 <USBD_CtlError>
      ret = USBD_FAIL;
 800dc6a:	2303      	movs	r3, #3
 800dc6c:	75fb      	strb	r3, [r7, #23]
      break;
 800dc6e:	e002      	b.n	800dc76 <USBD_CDC_Setup+0x162>
      break;
 800dc70:	bf00      	nop
 800dc72:	e008      	b.n	800dc86 <USBD_CDC_Setup+0x172>
      break;
 800dc74:	bf00      	nop
    }
    break;
 800dc76:	e006      	b.n	800dc86 <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 800dc78:	6839      	ldr	r1, [r7, #0]
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f001 f9ca 	bl	800f014 <USBD_CtlError>
    ret = USBD_FAIL;
 800dc80:	2303      	movs	r3, #3
 800dc82:	75fb      	strb	r3, [r7, #23]
    break;
 800dc84:	bf00      	nop
  }

  return (uint8_t)ret;
 800dc86:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dca2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d101      	bne.n	800dcb2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dcae:	2303      	movs	r3, #3
 800dcb0:	e049      	b.n	800dd46 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dcba:	78fa      	ldrb	r2, [r7, #3]
 800dcbc:	6879      	ldr	r1, [r7, #4]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	4413      	add	r3, r2
 800dcc4:	009b      	lsls	r3, r3, #2
 800dcc6:	440b      	add	r3, r1
 800dcc8:	3318      	adds	r3, #24
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d029      	beq.n	800dd24 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dcd0:	78fa      	ldrb	r2, [r7, #3]
 800dcd2:	6879      	ldr	r1, [r7, #4]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4413      	add	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	440b      	add	r3, r1
 800dcde:	3318      	adds	r3, #24
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	78f9      	ldrb	r1, [r7, #3]
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	460b      	mov	r3, r1
 800dce8:	00db      	lsls	r3, r3, #3
 800dcea:	1a5b      	subs	r3, r3, r1
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	4403      	add	r3, r0
 800dcf0:	3344      	adds	r3, #68	; 0x44
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	fbb2 f1f3 	udiv	r1, r2, r3
 800dcf8:	fb01 f303 	mul.w	r3, r1, r3
 800dcfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d110      	bne.n	800dd24 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dd02:	78fa      	ldrb	r2, [r7, #3]
 800dd04:	6879      	ldr	r1, [r7, #4]
 800dd06:	4613      	mov	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	4413      	add	r3, r2
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	440b      	add	r3, r1
 800dd10:	3318      	adds	r3, #24
 800dd12:	2200      	movs	r2, #0
 800dd14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dd16:	78f9      	ldrb	r1, [r7, #3]
 800dd18:	2300      	movs	r3, #0
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f001 ff5a 	bl	800fbd6 <USBD_LL_Transmit>
 800dd22:	e00f      	b.n	800dd44 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	2200      	movs	r2, #0
 800dd28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd32:	691b      	ldr	r3, [r3, #16]
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dd40:	78fa      	ldrb	r2, [r7, #3]
 800dd42:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3710      	adds	r7, #16
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}

0800dd4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b084      	sub	sp, #16
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	6078      	str	r0, [r7, #4]
 800dd56:	460b      	mov	r3, r1
 800dd58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d101      	bne.n	800dd70 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dd6c:	2303      	movs	r3, #3
 800dd6e:	e015      	b.n	800dd9c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dd70:	78fb      	ldrb	r3, [r7, #3]
 800dd72:	4619      	mov	r1, r3
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f001 ff70 	bl	800fc5a <USBD_LL_GetRxDataSize>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dd96:	4611      	mov	r1, r2
 800dd98:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dd9a:	2300      	movs	r3, #0
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddb2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d015      	beq.n	800ddea <USBD_CDC_EP0_RxReady+0x46>
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ddc4:	2bff      	cmp	r3, #255	; 0xff
 800ddc6:	d010      	beq.n	800ddea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ddd6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ddde:	b292      	uxth	r2, r2
 800dde0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	22ff      	movs	r2, #255	; 0xff
 800dde6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2243      	movs	r2, #67	; 0x43
 800de00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800de02:	4b03      	ldr	r3, [pc, #12]	; (800de10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800de04:	4618      	mov	r0, r3
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	24000098 	.word	0x24000098

0800de14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2243      	movs	r2, #67	; 0x43
 800de20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800de22:	4b03      	ldr	r3, [pc, #12]	; (800de30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800de24:	4618      	mov	r0, r3
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	24000054 	.word	0x24000054

0800de34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2243      	movs	r2, #67	; 0x43
 800de40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800de42:	4b03      	ldr	r3, [pc, #12]	; (800de50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800de44:	4618      	mov	r0, r3
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	240000dc 	.word	0x240000dc

0800de54 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	220a      	movs	r2, #10
 800de60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800de62:	4b03      	ldr	r3, [pc, #12]	; (800de70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800de64:	4618      	mov	r0, r3
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	24000010 	.word	0x24000010

0800de74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d101      	bne.n	800de88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800de84:	2303      	movs	r3, #3
 800de86:	e004      	b.n	800de92 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	683a      	ldr	r2, [r7, #0]
 800de8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	370c      	adds	r7, #12
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800de9e:	b480      	push	{r7}
 800dea0:	b087      	sub	sp, #28
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800deb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	371c      	adds	r7, #28
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dee0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	683a      	ldr	r2, [r7, #0]
 800dee6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3714      	adds	r7, #20
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df06:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800df08:	2301      	movs	r3, #1
 800df0a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df12:	2b00      	cmp	r3, #0
 800df14:	d101      	bne.n	800df1a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800df16:	2303      	movs	r3, #3
 800df18:	e01a      	b.n	800df50 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df20:	2b00      	cmp	r3, #0
 800df22:	d114      	bne.n	800df4e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2201      	movs	r2, #1
 800df28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800df42:	2181      	movs	r1, #129	; 0x81
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f001 fe46 	bl	800fbd6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800df4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d101      	bne.n	800df76 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800df72:	2303      	movs	r3, #3
 800df74:	e016      	b.n	800dfa4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	7c1b      	ldrb	r3, [r3, #16]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d109      	bne.n	800df92 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df88:	2101      	movs	r1, #1
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f001 fe44 	bl	800fc18 <USBD_LL_PrepareReceive>
 800df90:	e007      	b.n	800dfa2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df98:	2340      	movs	r3, #64	; 0x40
 800df9a:	2101      	movs	r1, #1
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f001 fe3b 	bl	800fc18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d101      	bne.n	800dfc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dfc0:	2303      	movs	r3, #3
 800dfc2:	e025      	b.n	800e010 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d003      	beq.n	800dfe8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d003      	beq.n	800dff6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	68ba      	ldr	r2, [r7, #8]
 800dff2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2201      	movs	r2, #1
 800dffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	79fa      	ldrb	r2, [r7, #7]
 800e002:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f001 fcad 	bl	800f964 <USBD_LL_Init>
 800e00a:	4603      	mov	r3, r0
 800e00c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}

0800e018 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e022:	2300      	movs	r3, #0
 800e024:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d101      	bne.n	800e030 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e02c:	2303      	movs	r3, #3
 800e02e:	e010      	b.n	800e052 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	683a      	ldr	r2, [r7, #0]
 800e034:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e040:	f107 020e 	add.w	r2, r7, #14
 800e044:	4610      	mov	r0, r2
 800e046:	4798      	blx	r3
 800e048:	4602      	mov	r2, r0
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e050:	2300      	movs	r3, #0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b082      	sub	sp, #8
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f001 fcce 	bl	800fa04 <USBD_LL_Start>
 800e068:	4603      	mov	r3, r0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e072:	b480      	push	{r7}
 800e074:	b083      	sub	sp, #12
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	460b      	mov	r3, r1
 800e092:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e094:	2303      	movs	r3, #3
 800e096:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d009      	beq.n	800e0b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	78fa      	ldrb	r2, [r7, #3]
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	4798      	blx	r3
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3710      	adds	r7, #16
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d007      	beq.n	800e0e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	78fa      	ldrb	r2, [r7, #3]
 800e0e0:	4611      	mov	r1, r2
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	4798      	blx	r3
  }

  return USBD_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e100:	6839      	ldr	r1, [r7, #0]
 800e102:	4618      	mov	r0, r3
 800e104:	f000 ff4c 	bl	800efa0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e116:	461a      	mov	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e124:	f003 031f 	and.w	r3, r3, #31
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d01a      	beq.n	800e162 <USBD_LL_SetupStage+0x72>
 800e12c:	2b02      	cmp	r3, #2
 800e12e:	d822      	bhi.n	800e176 <USBD_LL_SetupStage+0x86>
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <USBD_LL_SetupStage+0x4a>
 800e134:	2b01      	cmp	r3, #1
 800e136:	d00a      	beq.n	800e14e <USBD_LL_SetupStage+0x5e>
 800e138:	e01d      	b.n	800e176 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e140:	4619      	mov	r1, r3
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fa20 	bl	800e588 <USBD_StdDevReq>
 800e148:	4603      	mov	r3, r0
 800e14a:	73fb      	strb	r3, [r7, #15]
      break;
 800e14c:	e020      	b.n	800e190 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e154:	4619      	mov	r1, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 fa84 	bl	800e664 <USBD_StdItfReq>
 800e15c:	4603      	mov	r3, r0
 800e15e:	73fb      	strb	r3, [r7, #15]
      break;
 800e160:	e016      	b.n	800e190 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e168:	4619      	mov	r1, r3
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 fac3 	bl	800e6f6 <USBD_StdEPReq>
 800e170:	4603      	mov	r3, r0
 800e172:	73fb      	strb	r3, [r7, #15]
      break;
 800e174:	e00c      	b.n	800e190 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e17c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e180:	b2db      	uxtb	r3, r3
 800e182:	4619      	mov	r1, r3
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f001 fc9d 	bl	800fac4 <USBD_LL_StallEP>
 800e18a:	4603      	mov	r3, r0
 800e18c:	73fb      	strb	r3, [r7, #15]
      break;
 800e18e:	bf00      	nop
  }

  return ret;
 800e190:	7bfb      	ldrb	r3, [r7, #15]
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b086      	sub	sp, #24
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	60f8      	str	r0, [r7, #12]
 800e1a2:	460b      	mov	r3, r1
 800e1a4:	607a      	str	r2, [r7, #4]
 800e1a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e1a8:	7afb      	ldrb	r3, [r7, #11]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d138      	bne.n	800e220 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e1b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e1bc:	2b03      	cmp	r3, #3
 800e1be:	d14c      	bne.n	800e25a <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	689a      	ldr	r2, [r3, #8]
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d913      	bls.n	800e1f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	689a      	ldr	r2, [r3, #8]
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	1ad2      	subs	r2, r2, r3
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	68da      	ldr	r2, [r3, #12]
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	bf28      	it	cs
 800e1e6:	4613      	movcs	r3, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	6879      	ldr	r1, [r7, #4]
 800e1ec:	68f8      	ldr	r0, [r7, #12]
 800e1ee:	f000 ffcb 	bl	800f188 <USBD_CtlContinueRx>
 800e1f2:	e032      	b.n	800e25a <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00b      	beq.n	800e218 <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e206:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d105      	bne.n	800e218 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f000 ffc6 	bl	800f1aa <USBD_CtlSendStatus>
 800e21e:	e01c      	b.n	800e25a <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d014      	beq.n	800e256 <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e232:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 800e234:	2b03      	cmp	r3, #3
 800e236:	d10e      	bne.n	800e256 <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	7afa      	ldrb	r2, [r7, #11]
 800e242:	4611      	mov	r1, r2
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	4798      	blx	r3
 800e248:	4603      	mov	r3, r0
 800e24a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e24c:	7dfb      	ldrb	r3, [r7, #23]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 800e252:	7dfb      	ldrb	r3, [r7, #23]
 800e254:	e002      	b.n	800e25c <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e256:	2303      	movs	r3, #3
 800e258:	e000      	b.n	800e25c <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 800e25a:	2300      	movs	r3, #0
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3718      	adds	r7, #24
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	460b      	mov	r3, r1
 800e26e:	607a      	str	r2, [r7, #4]
 800e270:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e272:	7afb      	ldrb	r3, [r7, #11]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d16b      	bne.n	800e350 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	3314      	adds	r3, #20
 800e27c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e284:	2b02      	cmp	r3, #2
 800e286:	d156      	bne.n	800e336 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	689a      	ldr	r2, [r3, #8]
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	429a      	cmp	r2, r3
 800e292:	d914      	bls.n	800e2be <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	689a      	ldr	r2, [r3, #8]
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	1ad2      	subs	r2, r2, r3
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	689b      	ldr	r3, [r3, #8]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	6879      	ldr	r1, [r7, #4]
 800e2aa:	68f8      	ldr	r0, [r7, #12]
 800e2ac:	f000 ff3e 	bl	800f12c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	2100      	movs	r1, #0
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f001 fcae 	bl	800fc18 <USBD_LL_PrepareReceive>
 800e2bc:	e03b      	b.n	800e336 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	68da      	ldr	r2, [r3, #12]
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d11c      	bne.n	800e304 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	685a      	ldr	r2, [r3, #4]
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d316      	bcc.n	800e304 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	685a      	ldr	r2, [r3, #4]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d20f      	bcs.n	800e304 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f000 ff1f 	bl	800f12c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f001 fc8b 	bl	800fc18 <USBD_LL_PrepareReceive>
 800e302:	e018      	b.n	800e336 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00b      	beq.n	800e328 <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e316:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e318:	2b03      	cmp	r3, #3
 800e31a:	d105      	bne.n	800e328 <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e328:	2180      	movs	r1, #128	; 0x80
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	f001 fbca 	bl	800fac4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f000 ff4d 	bl	800f1d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d124      	bne.n	800e38a <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f7ff fe96 	bl	800e072 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2200      	movs	r2, #0
 800e34a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e34e:	e01c      	b.n	800e38a <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d014      	beq.n	800e386 <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e362:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 800e364:	2b03      	cmp	r3, #3
 800e366:	d10e      	bne.n	800e386 <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e36e:	695b      	ldr	r3, [r3, #20]
 800e370:	7afa      	ldrb	r2, [r7, #11]
 800e372:	4611      	mov	r1, r2
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	4798      	blx	r3
 800e378:	4603      	mov	r3, r0
 800e37a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e37c:	7dfb      	ldrb	r3, [r7, #23]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d003      	beq.n	800e38a <USBD_LL_DataInStage+0x126>
    {
      return ret;
 800e382:	7dfb      	ldrb	r3, [r7, #23]
 800e384:	e002      	b.n	800e38c <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e386:	2303      	movs	r3, #3
 800e388:	e000      	b.n	800e38c <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3718      	adds	r7, #24
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2201      	movs	r2, #1
 800e3a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d009      	beq.n	800e3d8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	6852      	ldr	r2, [r2, #4]
 800e3d0:	b2d2      	uxtb	r2, r2
 800e3d2:	4611      	mov	r1, r2
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3d8:	2340      	movs	r3, #64	; 0x40
 800e3da:	2200      	movs	r2, #0
 800e3dc:	2100      	movs	r1, #0
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f001 fb2b 	bl	800fa3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2240      	movs	r2, #64	; 0x40
 800e3f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e3f4:	2340      	movs	r3, #64	; 0x40
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	2180      	movs	r1, #128	; 0x80
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f001 fb1d 	bl	800fa3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2201      	movs	r2, #1
 800e404:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2240      	movs	r2, #64	; 0x40
 800e40a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e416:	b480      	push	{r7}
 800e418:	b083      	sub	sp, #12
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
 800e41e:	460b      	mov	r3, r1
 800e420:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	78fa      	ldrb	r2, [r7, #3]
 800e426:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	370c      	adds	r7, #12
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr

0800e436 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e436:	b480      	push	{r7}
 800e438:	b083      	sub	sp, #12
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e444:	b2da      	uxtb	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2204      	movs	r2, #4
 800e450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	370c      	adds	r7, #12
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e462:	b480      	push	{r7}
 800e464:	b083      	sub	sp, #12
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e470:	b2db      	uxtb	r3, r3
 800e472:	2b04      	cmp	r3, #4
 800e474:	d106      	bne.n	800e484 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	370c      	adds	r7, #12
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr

0800e492 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b082      	sub	sp, #8
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	2b03      	cmp	r3, #3
 800e4a4:	d10b      	bne.n	800e4be <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ac:	69db      	ldr	r3, [r3, #28]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d005      	beq.n	800e4be <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4b8:	69db      	ldr	r3, [r3, #28]
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	370c      	adds	r7, #12
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr

0800e4e2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e4e2:	b480      	push	{r7}
 800e4e4:	b083      	sub	sp, #12
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800e4ee:	2300      	movs	r3, #0
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e504:	2300      	movs	r3, #0
}
 800e506:	4618      	mov	r0, r3
 800e508:	370c      	adds	r7, #12
 800e50a:	46bd      	mov	sp, r7
 800e50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e510:	4770      	bx	lr

0800e512 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b082      	sub	sp, #8
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d009      	beq.n	800e540 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	6852      	ldr	r2, [r2, #4]
 800e538:	b2d2      	uxtb	r2, r2
 800e53a:	4611      	mov	r1, r2
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	4798      	blx	r3
  }

  return USBD_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e54a:	b480      	push	{r7}
 800e54c:	b087      	sub	sp, #28
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	3301      	adds	r3, #1
 800e560:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e568:	8a3b      	ldrh	r3, [r7, #16]
 800e56a:	021b      	lsls	r3, r3, #8
 800e56c:	b21a      	sxth	r2, r3
 800e56e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e572:	4313      	orrs	r3, r2
 800e574:	b21b      	sxth	r3, r3
 800e576:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e578:	89fb      	ldrh	r3, [r7, #14]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	371c      	adds	r7, #28
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr
	...

0800e588 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e59e:	2b40      	cmp	r3, #64	; 0x40
 800e5a0:	d005      	beq.n	800e5ae <USBD_StdDevReq+0x26>
 800e5a2:	2b40      	cmp	r3, #64	; 0x40
 800e5a4:	d853      	bhi.n	800e64e <USBD_StdDevReq+0xc6>
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00b      	beq.n	800e5c2 <USBD_StdDevReq+0x3a>
 800e5aa:	2b20      	cmp	r3, #32
 800e5ac:	d14f      	bne.n	800e64e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	6839      	ldr	r1, [r7, #0]
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	4798      	blx	r3
 800e5bc:	4603      	mov	r3, r0
 800e5be:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c0:	e04a      	b.n	800e658 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	785b      	ldrb	r3, [r3, #1]
 800e5c6:	2b09      	cmp	r3, #9
 800e5c8:	d83b      	bhi.n	800e642 <USBD_StdDevReq+0xba>
 800e5ca:	a201      	add	r2, pc, #4	; (adr r2, 800e5d0 <USBD_StdDevReq+0x48>)
 800e5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d0:	0800e625 	.word	0x0800e625
 800e5d4:	0800e639 	.word	0x0800e639
 800e5d8:	0800e643 	.word	0x0800e643
 800e5dc:	0800e62f 	.word	0x0800e62f
 800e5e0:	0800e643 	.word	0x0800e643
 800e5e4:	0800e603 	.word	0x0800e603
 800e5e8:	0800e5f9 	.word	0x0800e5f9
 800e5ec:	0800e643 	.word	0x0800e643
 800e5f0:	0800e61b 	.word	0x0800e61b
 800e5f4:	0800e60d 	.word	0x0800e60d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800e5f8:	6839      	ldr	r1, [r7, #0]
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f9dc 	bl	800e9b8 <USBD_GetDescriptor>
      break;
 800e600:	e024      	b.n	800e64c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fb41 	bl	800ec8c <USBD_SetAddress>
      break;
 800e60a:	e01f      	b.n	800e64c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 fb80 	bl	800ed14 <USBD_SetConfig>
 800e614:	4603      	mov	r3, r0
 800e616:	73fb      	strb	r3, [r7, #15]
      break;
 800e618:	e018      	b.n	800e64c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800e61a:	6839      	ldr	r1, [r7, #0]
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 fc1f 	bl	800ee60 <USBD_GetConfig>
      break;
 800e622:	e013      	b.n	800e64c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800e624:	6839      	ldr	r1, [r7, #0]
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 fc50 	bl	800eecc <USBD_GetStatus>
      break;
 800e62c:	e00e      	b.n	800e64c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 fc7f 	bl	800ef34 <USBD_SetFeature>
      break;
 800e636:	e009      	b.n	800e64c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800e638:	6839      	ldr	r1, [r7, #0]
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 fc8e 	bl	800ef5c <USBD_ClrFeature>
      break;
 800e640:	e004      	b.n	800e64c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800e642:	6839      	ldr	r1, [r7, #0]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 fce5 	bl	800f014 <USBD_CtlError>
      break;
 800e64a:	bf00      	nop
    }
    break;
 800e64c:	e004      	b.n	800e658 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 fcdf 	bl	800f014 <USBD_CtlError>
    break;
 800e656:	bf00      	nop
  }

  return ret;
 800e658:	7bfb      	ldrb	r3, [r7, #15]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop

0800e664 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e66e:	2300      	movs	r3, #0
 800e670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e67a:	2b40      	cmp	r3, #64	; 0x40
 800e67c:	d005      	beq.n	800e68a <USBD_StdItfReq+0x26>
 800e67e:	2b40      	cmp	r3, #64	; 0x40
 800e680:	d82f      	bhi.n	800e6e2 <USBD_StdItfReq+0x7e>
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <USBD_StdItfReq+0x26>
 800e686:	2b20      	cmp	r3, #32
 800e688:	d12b      	bne.n	800e6e2 <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e690:	b2db      	uxtb	r3, r3
 800e692:	3b01      	subs	r3, #1
 800e694:	2b02      	cmp	r3, #2
 800e696:	d81d      	bhi.n	800e6d4 <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	889b      	ldrh	r3, [r3, #4]
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d813      	bhi.n	800e6ca <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a8:	689b      	ldr	r3, [r3, #8]
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	4798      	blx	r3
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	88db      	ldrh	r3, [r3, #6]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d110      	bne.n	800e6de <USBD_StdItfReq+0x7a>
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d10d      	bne.n	800e6de <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fd71 	bl	800f1aa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e6c8:	e009      	b.n	800e6de <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fca1 	bl	800f014 <USBD_CtlError>
      break;
 800e6d2:	e004      	b.n	800e6de <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 fc9c 	bl	800f014 <USBD_CtlError>
      break;
 800e6dc:	e000      	b.n	800e6e0 <USBD_StdItfReq+0x7c>
      break;
 800e6de:	bf00      	nop
    }
    break;
 800e6e0:	e004      	b.n	800e6ec <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 fc95 	bl	800f014 <USBD_CtlError>
    break;
 800e6ea:	bf00      	nop
  }

  return ret;
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b084      	sub	sp, #16
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	889b      	ldrh	r3, [r3, #4]
 800e708:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e712:	2b40      	cmp	r3, #64	; 0x40
 800e714:	d007      	beq.n	800e726 <USBD_StdEPReq+0x30>
 800e716:	2b40      	cmp	r3, #64	; 0x40
 800e718:	f200 8143 	bhi.w	800e9a2 <USBD_StdEPReq+0x2ac>
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00c      	beq.n	800e73a <USBD_StdEPReq+0x44>
 800e720:	2b20      	cmp	r3, #32
 800e722:	f040 813e 	bne.w	800e9a2 <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e72c:	689b      	ldr	r3, [r3, #8]
 800e72e:	6839      	ldr	r1, [r7, #0]
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	4798      	blx	r3
 800e734:	4603      	mov	r3, r0
 800e736:	73fb      	strb	r3, [r7, #15]
    break;
 800e738:	e138      	b.n	800e9ac <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	785b      	ldrb	r3, [r3, #1]
 800e73e:	2b03      	cmp	r3, #3
 800e740:	d007      	beq.n	800e752 <USBD_StdEPReq+0x5c>
 800e742:	2b03      	cmp	r3, #3
 800e744:	f300 8127 	bgt.w	800e996 <USBD_StdEPReq+0x2a0>
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d07d      	beq.n	800e848 <USBD_StdEPReq+0x152>
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d03c      	beq.n	800e7ca <USBD_StdEPReq+0xd4>
 800e750:	e121      	b.n	800e996 <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b02      	cmp	r3, #2
 800e75c:	d002      	beq.n	800e764 <USBD_StdEPReq+0x6e>
 800e75e:	2b03      	cmp	r3, #3
 800e760:	d016      	beq.n	800e790 <USBD_StdEPReq+0x9a>
 800e762:	e02c      	b.n	800e7be <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e764:	7bbb      	ldrb	r3, [r7, #14]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00d      	beq.n	800e786 <USBD_StdEPReq+0x90>
 800e76a:	7bbb      	ldrb	r3, [r7, #14]
 800e76c:	2b80      	cmp	r3, #128	; 0x80
 800e76e:	d00a      	beq.n	800e786 <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e770:	7bbb      	ldrb	r3, [r7, #14]
 800e772:	4619      	mov	r1, r3
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f001 f9a5 	bl	800fac4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e77a:	2180      	movs	r1, #128	; 0x80
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f001 f9a1 	bl	800fac4 <USBD_LL_StallEP>
 800e782:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e784:	e020      	b.n	800e7c8 <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 800e786:	6839      	ldr	r1, [r7, #0]
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f000 fc43 	bl	800f014 <USBD_CtlError>
        break;
 800e78e:	e01b      	b.n	800e7c8 <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	885b      	ldrh	r3, [r3, #2]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d10e      	bne.n	800e7b6 <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e798:	7bbb      	ldrb	r3, [r7, #14]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00b      	beq.n	800e7b6 <USBD_StdEPReq+0xc0>
 800e79e:	7bbb      	ldrb	r3, [r7, #14]
 800e7a0:	2b80      	cmp	r3, #128	; 0x80
 800e7a2:	d008      	beq.n	800e7b6 <USBD_StdEPReq+0xc0>
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	88db      	ldrh	r3, [r3, #6]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d104      	bne.n	800e7b6 <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7ac:	7bbb      	ldrb	r3, [r7, #14]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f001 f987 	bl	800fac4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 fcf7 	bl	800f1aa <USBD_CtlSendStatus>

        break;
 800e7bc:	e004      	b.n	800e7c8 <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 800e7be:	6839      	ldr	r1, [r7, #0]
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 fc27 	bl	800f014 <USBD_CtlError>
        break;
 800e7c6:	bf00      	nop
      }
      break;
 800e7c8:	e0ea      	b.n	800e9a0 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d002      	beq.n	800e7dc <USBD_StdEPReq+0xe6>
 800e7d6:	2b03      	cmp	r3, #3
 800e7d8:	d016      	beq.n	800e808 <USBD_StdEPReq+0x112>
 800e7da:	e02e      	b.n	800e83a <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e7dc:	7bbb      	ldrb	r3, [r7, #14]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00d      	beq.n	800e7fe <USBD_StdEPReq+0x108>
 800e7e2:	7bbb      	ldrb	r3, [r7, #14]
 800e7e4:	2b80      	cmp	r3, #128	; 0x80
 800e7e6:	d00a      	beq.n	800e7fe <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e7e8:	7bbb      	ldrb	r3, [r7, #14]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f001 f969 	bl	800fac4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7f2:	2180      	movs	r1, #128	; 0x80
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f001 f965 	bl	800fac4 <USBD_LL_StallEP>
 800e7fa:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e7fc:	e023      	b.n	800e846 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fc07 	bl	800f014 <USBD_CtlError>
        break;
 800e806:	e01e      	b.n	800e846 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	885b      	ldrh	r3, [r3, #2]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d119      	bne.n	800e844 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e810:	7bbb      	ldrb	r3, [r7, #14]
 800e812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e816:	2b00      	cmp	r3, #0
 800e818:	d004      	beq.n	800e824 <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e81a:	7bbb      	ldrb	r3, [r7, #14]
 800e81c:	4619      	mov	r1, r3
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f001 f96f 	bl	800fb02 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 fcc0 	bl	800f1aa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e830:	689b      	ldr	r3, [r3, #8]
 800e832:	6839      	ldr	r1, [r7, #0]
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	4798      	blx	r3
        }
        break;
 800e838:	e004      	b.n	800e844 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800e83a:	6839      	ldr	r1, [r7, #0]
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 fbe9 	bl	800f014 <USBD_CtlError>
        break;
 800e842:	e000      	b.n	800e846 <USBD_StdEPReq+0x150>
        break;
 800e844:	bf00      	nop
      }
      break;
 800e846:	e0ab      	b.n	800e9a0 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	2b02      	cmp	r3, #2
 800e852:	d002      	beq.n	800e85a <USBD_StdEPReq+0x164>
 800e854:	2b03      	cmp	r3, #3
 800e856:	d032      	beq.n	800e8be <USBD_StdEPReq+0x1c8>
 800e858:	e097      	b.n	800e98a <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e85a:	7bbb      	ldrb	r3, [r7, #14]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d007      	beq.n	800e870 <USBD_StdEPReq+0x17a>
 800e860:	7bbb      	ldrb	r3, [r7, #14]
 800e862:	2b80      	cmp	r3, #128	; 0x80
 800e864:	d004      	beq.n	800e870 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 800e866:	6839      	ldr	r1, [r7, #0]
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 fbd3 	bl	800f014 <USBD_CtlError>
          break;
 800e86e:	e091      	b.n	800e994 <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e874:	2b00      	cmp	r3, #0
 800e876:	da0b      	bge.n	800e890 <USBD_StdEPReq+0x19a>
 800e878:	7bbb      	ldrb	r3, [r7, #14]
 800e87a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e87e:	4613      	mov	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	4413      	add	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	3310      	adds	r3, #16
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	4413      	add	r3, r2
 800e88c:	3304      	adds	r3, #4
 800e88e:	e00b      	b.n	800e8a8 <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e890:	7bbb      	ldrb	r3, [r7, #14]
 800e892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e896:	4613      	mov	r3, r2
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	4413      	add	r3, r2
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	2202      	movs	r2, #2
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 fc1d 	bl	800f0f6 <USBD_CtlSendData>
        break;
 800e8bc:	e06a      	b.n	800e994 <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800e8be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	da11      	bge.n	800e8ea <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e8c6:	7bbb      	ldrb	r3, [r7, #14]
 800e8c8:	f003 020f 	and.w	r2, r3, #15
 800e8cc:	6879      	ldr	r1, [r7, #4]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	4413      	add	r3, r2
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	440b      	add	r3, r1
 800e8d8:	3324      	adds	r3, #36	; 0x24
 800e8da:	881b      	ldrh	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d117      	bne.n	800e910 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800e8e0:	6839      	ldr	r1, [r7, #0]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 fb96 	bl	800f014 <USBD_CtlError>
            break;
 800e8e8:	e054      	b.n	800e994 <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e8ea:	7bbb      	ldrb	r3, [r7, #14]
 800e8ec:	f003 020f 	and.w	r2, r3, #15
 800e8f0:	6879      	ldr	r1, [r7, #4]
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	440b      	add	r3, r1
 800e8fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e900:	881b      	ldrh	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d104      	bne.n	800e910 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800e906:	6839      	ldr	r1, [r7, #0]
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 fb83 	bl	800f014 <USBD_CtlError>
            break;
 800e90e:	e041      	b.n	800e994 <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e914:	2b00      	cmp	r3, #0
 800e916:	da0b      	bge.n	800e930 <USBD_StdEPReq+0x23a>
 800e918:	7bbb      	ldrb	r3, [r7, #14]
 800e91a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e91e:	4613      	mov	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	4413      	add	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	3310      	adds	r3, #16
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4413      	add	r3, r2
 800e92c:	3304      	adds	r3, #4
 800e92e:	e00b      	b.n	800e948 <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e930:	7bbb      	ldrb	r3, [r7, #14]
 800e932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e936:	4613      	mov	r3, r2
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	4413      	add	r3, r2
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	4413      	add	r3, r2
 800e946:	3304      	adds	r3, #4
 800e948:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e94a:	7bbb      	ldrb	r3, [r7, #14]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d002      	beq.n	800e956 <USBD_StdEPReq+0x260>
 800e950:	7bbb      	ldrb	r3, [r7, #14]
 800e952:	2b80      	cmp	r3, #128	; 0x80
 800e954:	d103      	bne.n	800e95e <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	2200      	movs	r2, #0
 800e95a:	601a      	str	r2, [r3, #0]
 800e95c:	e00e      	b.n	800e97c <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e95e:	7bbb      	ldrb	r3, [r7, #14]
 800e960:	4619      	mov	r1, r3
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f001 f8ec 	bl	800fb40 <USBD_LL_IsStallEP>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d003      	beq.n	800e976 <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	2201      	movs	r2, #1
 800e972:	601a      	str	r2, [r3, #0]
 800e974:	e002      	b.n	800e97c <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2200      	movs	r2, #0
 800e97a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	2202      	movs	r2, #2
 800e980:	4619      	mov	r1, r3
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 fbb7 	bl	800f0f6 <USBD_CtlSendData>
          break;
 800e988:	e004      	b.n	800e994 <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 800e98a:	6839      	ldr	r1, [r7, #0]
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 fb41 	bl	800f014 <USBD_CtlError>
        break;
 800e992:	bf00      	nop
      }
      break;
 800e994:	e004      	b.n	800e9a0 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800e996:	6839      	ldr	r1, [r7, #0]
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f000 fb3b 	bl	800f014 <USBD_CtlError>
      break;
 800e99e:	bf00      	nop
    }
    break;
 800e9a0:	e004      	b.n	800e9ac <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 800e9a2:	6839      	ldr	r1, [r7, #0]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 fb35 	bl	800f014 <USBD_CtlError>
    break;
 800e9aa:	bf00      	nop
  }

  return ret;
 800e9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
	...

0800e9b8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	885b      	ldrh	r3, [r3, #2]
 800e9d2:	0a1b      	lsrs	r3, r3, #8
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	3b01      	subs	r3, #1
 800e9d8:	2b06      	cmp	r3, #6
 800e9da:	f200 8128 	bhi.w	800ec2e <USBD_GetDescriptor+0x276>
 800e9de:	a201      	add	r2, pc, #4	; (adr r2, 800e9e4 <USBD_GetDescriptor+0x2c>)
 800e9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e4:	0800ea01 	.word	0x0800ea01
 800e9e8:	0800ea19 	.word	0x0800ea19
 800e9ec:	0800ea59 	.word	0x0800ea59
 800e9f0:	0800ec2f 	.word	0x0800ec2f
 800e9f4:	0800ec2f 	.word	0x0800ec2f
 800e9f8:	0800ebcf 	.word	0x0800ebcf
 800e9fc:	0800ebfb 	.word	0x0800ebfb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	7c12      	ldrb	r2, [r2, #16]
 800ea0c:	f107 0108 	add.w	r1, r7, #8
 800ea10:	4610      	mov	r0, r2
 800ea12:	4798      	blx	r3
 800ea14:	60f8      	str	r0, [r7, #12]
    break;
 800ea16:	e112      	b.n	800ec3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	7c1b      	ldrb	r3, [r3, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10d      	bne.n	800ea3c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea28:	f107 0208 	add.w	r2, r7, #8
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	4798      	blx	r3
 800ea30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3301      	adds	r3, #1
 800ea36:	2202      	movs	r2, #2
 800ea38:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ea3a:	e100      	b.n	800ec3e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea44:	f107 0208 	add.w	r2, r7, #8
 800ea48:	4610      	mov	r0, r2
 800ea4a:	4798      	blx	r3
 800ea4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	3301      	adds	r3, #1
 800ea52:	2202      	movs	r2, #2
 800ea54:	701a      	strb	r2, [r3, #0]
    break;
 800ea56:	e0f2      	b.n	800ec3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	885b      	ldrh	r3, [r3, #2]
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b05      	cmp	r3, #5
 800ea60:	f200 80ac 	bhi.w	800ebbc <USBD_GetDescriptor+0x204>
 800ea64:	a201      	add	r2, pc, #4	; (adr r2, 800ea6c <USBD_GetDescriptor+0xb4>)
 800ea66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6a:	bf00      	nop
 800ea6c:	0800ea85 	.word	0x0800ea85
 800ea70:	0800eab9 	.word	0x0800eab9
 800ea74:	0800eaed 	.word	0x0800eaed
 800ea78:	0800eb21 	.word	0x0800eb21
 800ea7c:	0800eb55 	.word	0x0800eb55
 800ea80:	0800eb89 	.word	0x0800eb89
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00b      	beq.n	800eaa8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	7c12      	ldrb	r2, [r2, #16]
 800ea9c:	f107 0108 	add.w	r1, r7, #8
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	4798      	blx	r3
 800eaa4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eaa6:	e091      	b.n	800ebcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800eaa8:	6839      	ldr	r1, [r7, #0]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fab2 	bl	800f014 <USBD_CtlError>
        err++;
 800eab0:	7afb      	ldrb	r3, [r7, #11]
 800eab2:	3301      	adds	r3, #1
 800eab4:	72fb      	strb	r3, [r7, #11]
      break;
 800eab6:	e089      	b.n	800ebcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00b      	beq.n	800eadc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	7c12      	ldrb	r2, [r2, #16]
 800ead0:	f107 0108 	add.w	r1, r7, #8
 800ead4:	4610      	mov	r0, r2
 800ead6:	4798      	blx	r3
 800ead8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eada:	e077      	b.n	800ebcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800eadc:	6839      	ldr	r1, [r7, #0]
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 fa98 	bl	800f014 <USBD_CtlError>
        err++;
 800eae4:	7afb      	ldrb	r3, [r7, #11]
 800eae6:	3301      	adds	r3, #1
 800eae8:	72fb      	strb	r3, [r7, #11]
      break;
 800eaea:	e06f      	b.n	800ebcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00b      	beq.n	800eb10 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	7c12      	ldrb	r2, [r2, #16]
 800eb04:	f107 0108 	add.w	r1, r7, #8
 800eb08:	4610      	mov	r0, r2
 800eb0a:	4798      	blx	r3
 800eb0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eb0e:	e05d      	b.n	800ebcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800eb10:	6839      	ldr	r1, [r7, #0]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 fa7e 	bl	800f014 <USBD_CtlError>
        err++;
 800eb18:	7afb      	ldrb	r3, [r7, #11]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	72fb      	strb	r3, [r7, #11]
      break;
 800eb1e:	e055      	b.n	800ebcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00b      	beq.n	800eb44 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	7c12      	ldrb	r2, [r2, #16]
 800eb38:	f107 0108 	add.w	r1, r7, #8
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	4798      	blx	r3
 800eb40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eb42:	e043      	b.n	800ebcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800eb44:	6839      	ldr	r1, [r7, #0]
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f000 fa64 	bl	800f014 <USBD_CtlError>
        err++;
 800eb4c:	7afb      	ldrb	r3, [r7, #11]
 800eb4e:	3301      	adds	r3, #1
 800eb50:	72fb      	strb	r3, [r7, #11]
      break;
 800eb52:	e03b      	b.n	800ebcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb5a:	695b      	ldr	r3, [r3, #20]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00b      	beq.n	800eb78 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb66:	695b      	ldr	r3, [r3, #20]
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	7c12      	ldrb	r2, [r2, #16]
 800eb6c:	f107 0108 	add.w	r1, r7, #8
 800eb70:	4610      	mov	r0, r2
 800eb72:	4798      	blx	r3
 800eb74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eb76:	e029      	b.n	800ebcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800eb78:	6839      	ldr	r1, [r7, #0]
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 fa4a 	bl	800f014 <USBD_CtlError>
        err++;
 800eb80:	7afb      	ldrb	r3, [r7, #11]
 800eb82:	3301      	adds	r3, #1
 800eb84:	72fb      	strb	r3, [r7, #11]
      break;
 800eb86:	e021      	b.n	800ebcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb8e:	699b      	ldr	r3, [r3, #24]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00b      	beq.n	800ebac <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	7c12      	ldrb	r2, [r2, #16]
 800eba0:	f107 0108 	add.w	r1, r7, #8
 800eba4:	4610      	mov	r0, r2
 800eba6:	4798      	blx	r3
 800eba8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ebaa:	e00f      	b.n	800ebcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ebac:	6839      	ldr	r1, [r7, #0]
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 fa30 	bl	800f014 <USBD_CtlError>
        err++;
 800ebb4:	7afb      	ldrb	r3, [r7, #11]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	72fb      	strb	r3, [r7, #11]
      break;
 800ebba:	e007      	b.n	800ebcc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ebbc:	6839      	ldr	r1, [r7, #0]
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 fa28 	bl	800f014 <USBD_CtlError>
      err++;
 800ebc4:	7afb      	ldrb	r3, [r7, #11]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ebca:	bf00      	nop
    }
    break;
 800ebcc:	e037      	b.n	800ec3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	7c1b      	ldrb	r3, [r3, #16]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d109      	bne.n	800ebea <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebde:	f107 0208 	add.w	r2, r7, #8
 800ebe2:	4610      	mov	r0, r2
 800ebe4:	4798      	blx	r3
 800ebe6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ebe8:	e029      	b.n	800ec3e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ebea:	6839      	ldr	r1, [r7, #0]
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f000 fa11 	bl	800f014 <USBD_CtlError>
      err++;
 800ebf2:	7afb      	ldrb	r3, [r7, #11]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	72fb      	strb	r3, [r7, #11]
    break;
 800ebf8:	e021      	b.n	800ec3e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	7c1b      	ldrb	r3, [r3, #16]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10d      	bne.n	800ec1e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec0a:	f107 0208 	add.w	r2, r7, #8
 800ec0e:	4610      	mov	r0, r2
 800ec10:	4798      	blx	r3
 800ec12:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	3301      	adds	r3, #1
 800ec18:	2207      	movs	r2, #7
 800ec1a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ec1c:	e00f      	b.n	800ec3e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ec1e:	6839      	ldr	r1, [r7, #0]
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 f9f7 	bl	800f014 <USBD_CtlError>
      err++;
 800ec26:	7afb      	ldrb	r3, [r7, #11]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	72fb      	strb	r3, [r7, #11]
    break;
 800ec2c:	e007      	b.n	800ec3e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800ec2e:	6839      	ldr	r1, [r7, #0]
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f000 f9ef 	bl	800f014 <USBD_CtlError>
    err++;
 800ec36:	7afb      	ldrb	r3, [r7, #11]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	72fb      	strb	r3, [r7, #11]
    break;
 800ec3c:	bf00      	nop
  }

  if (err != 0U)
 800ec3e:	7afb      	ldrb	r3, [r7, #11]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d11e      	bne.n	800ec82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	88db      	ldrh	r3, [r3, #6]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d016      	beq.n	800ec7a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800ec4c:	893b      	ldrh	r3, [r7, #8]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00e      	beq.n	800ec70 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	88da      	ldrh	r2, [r3, #6]
 800ec56:	893b      	ldrh	r3, [r7, #8]
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	bf28      	it	cs
 800ec5c:	4613      	movcs	r3, r2
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ec62:	893b      	ldrh	r3, [r7, #8]
 800ec64:	461a      	mov	r2, r3
 800ec66:	68f9      	ldr	r1, [r7, #12]
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 fa44 	bl	800f0f6 <USBD_CtlSendData>
 800ec6e:	e009      	b.n	800ec84 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ec70:	6839      	ldr	r1, [r7, #0]
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 f9ce 	bl	800f014 <USBD_CtlError>
 800ec78:	e004      	b.n	800ec84 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 fa95 	bl	800f1aa <USBD_CtlSendStatus>
 800ec80:	e000      	b.n	800ec84 <USBD_GetDescriptor+0x2cc>
    return;
 800ec82:	bf00      	nop
    }
  }
}
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop

0800ec8c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	889b      	ldrh	r3, [r3, #4]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d131      	bne.n	800ed02 <USBD_SetAddress+0x76>
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	88db      	ldrh	r3, [r3, #6]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d12d      	bne.n	800ed02 <USBD_SetAddress+0x76>
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	885b      	ldrh	r3, [r3, #2]
 800ecaa:	2b7f      	cmp	r3, #127	; 0x7f
 800ecac:	d829      	bhi.n	800ed02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	885b      	ldrh	r3, [r3, #2]
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	2b03      	cmp	r3, #3
 800ecc4:	d104      	bne.n	800ecd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ecc6:	6839      	ldr	r1, [r7, #0]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 f9a3 	bl	800f014 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecce:	e01d      	b.n	800ed0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	7bfa      	ldrb	r2, [r7, #15]
 800ecd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ecd8:	7bfb      	ldrb	r3, [r7, #15]
 800ecda:	4619      	mov	r1, r3
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 ff5b 	bl	800fb98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 fa61 	bl	800f1aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ece8:	7bfb      	ldrb	r3, [r7, #15]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d004      	beq.n	800ecf8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecf6:	e009      	b.n	800ed0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed00:	e004      	b.n	800ed0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 f985 	bl	800f014 <USBD_CtlError>
  }
}
 800ed0a:	bf00      	nop
 800ed0c:	bf00      	nop
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b084      	sub	sp, #16
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	885b      	ldrh	r3, [r3, #2]
 800ed26:	b2da      	uxtb	r2, r3
 800ed28:	4b4c      	ldr	r3, [pc, #304]	; (800ee5c <USBD_SetConfig+0x148>)
 800ed2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ed2c:	4b4b      	ldr	r3, [pc, #300]	; (800ee5c <USBD_SetConfig+0x148>)
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d905      	bls.n	800ed40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 f96c 	bl	800f014 <USBD_CtlError>
    return USBD_FAIL;
 800ed3c:	2303      	movs	r3, #3
 800ed3e:	e088      	b.n	800ee52 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d002      	beq.n	800ed52 <USBD_SetConfig+0x3e>
 800ed4c:	2b03      	cmp	r3, #3
 800ed4e:	d025      	beq.n	800ed9c <USBD_SetConfig+0x88>
 800ed50:	e071      	b.n	800ee36 <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ed52:	4b42      	ldr	r3, [pc, #264]	; (800ee5c <USBD_SetConfig+0x148>)
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d01c      	beq.n	800ed94 <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 800ed5a:	4b40      	ldr	r3, [pc, #256]	; (800ee5c <USBD_SetConfig+0x148>)
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	461a      	mov	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ed64:	4b3d      	ldr	r3, [pc, #244]	; (800ee5c <USBD_SetConfig+0x148>)
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	4619      	mov	r1, r3
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7ff f98c 	bl	800e088 <USBD_SetClassConfig>
 800ed70:	4603      	mov	r3, r0
 800ed72:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ed74:	7bfb      	ldrb	r3, [r7, #15]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d004      	beq.n	800ed84 <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 800ed7a:	6839      	ldr	r1, [r7, #0]
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f000 f949 	bl	800f014 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ed82:	e065      	b.n	800ee50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fa10 	bl	800f1aa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2203      	movs	r2, #3
 800ed8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ed92:	e05d      	b.n	800ee50 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f000 fa08 	bl	800f1aa <USBD_CtlSendStatus>
    break;
 800ed9a:	e059      	b.n	800ee50 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ed9c:	4b2f      	ldr	r3, [pc, #188]	; (800ee5c <USBD_SetConfig+0x148>)
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d112      	bne.n	800edca <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2202      	movs	r2, #2
 800eda8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800edac:	4b2b      	ldr	r3, [pc, #172]	; (800ee5c <USBD_SetConfig+0x148>)
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	461a      	mov	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800edb6:	4b29      	ldr	r3, [pc, #164]	; (800ee5c <USBD_SetConfig+0x148>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	4619      	mov	r1, r3
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7ff f97f 	bl	800e0c0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 f9f1 	bl	800f1aa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800edc8:	e042      	b.n	800ee50 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 800edca:	4b24      	ldr	r3, [pc, #144]	; (800ee5c <USBD_SetConfig+0x148>)
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d02a      	beq.n	800ee2e <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	4619      	mov	r1, r3
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7ff f96d 	bl	800e0c0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ede6:	4b1d      	ldr	r3, [pc, #116]	; (800ee5c <USBD_SetConfig+0x148>)
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	461a      	mov	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800edf0:	4b1a      	ldr	r3, [pc, #104]	; (800ee5c <USBD_SetConfig+0x148>)
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7ff f946 	bl	800e088 <USBD_SetClassConfig>
 800edfc:	4603      	mov	r3, r0
 800edfe:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ee00:	7bfb      	ldrb	r3, [r7, #15]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d00f      	beq.n	800ee26 <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 800ee06:	6839      	ldr	r1, [r7, #0]
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 f903 	bl	800f014 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	4619      	mov	r1, r3
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7ff f952 	bl	800e0c0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2202      	movs	r2, #2
 800ee20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ee24:	e014      	b.n	800ee50 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 f9bf 	bl	800f1aa <USBD_CtlSendStatus>
    break;
 800ee2c:	e010      	b.n	800ee50 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f000 f9bb 	bl	800f1aa <USBD_CtlSendStatus>
    break;
 800ee34:	e00c      	b.n	800ee50 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 800ee36:	6839      	ldr	r1, [r7, #0]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 f8eb 	bl	800f014 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ee3e:	4b07      	ldr	r3, [pc, #28]	; (800ee5c <USBD_SetConfig+0x148>)
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	4619      	mov	r1, r3
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7ff f93b 	bl	800e0c0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ee4a:	2303      	movs	r3, #3
 800ee4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee4e:	bf00      	nop
  }

  return ret;
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3710      	adds	r7, #16
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	2400071c 	.word	0x2400071c

0800ee60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	88db      	ldrh	r3, [r3, #6]
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d004      	beq.n	800ee7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 f8cd 	bl	800f014 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ee7a:	e023      	b.n	800eec4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	2b02      	cmp	r3, #2
 800ee86:	dc02      	bgt.n	800ee8e <USBD_GetConfig+0x2e>
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	dc03      	bgt.n	800ee94 <USBD_GetConfig+0x34>
 800ee8c:	e015      	b.n	800eeba <USBD_GetConfig+0x5a>
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	d00b      	beq.n	800eeaa <USBD_GetConfig+0x4a>
 800ee92:	e012      	b.n	800eeba <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	2201      	movs	r2, #1
 800eea0:	4619      	mov	r1, r3
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 f927 	bl	800f0f6 <USBD_CtlSendData>
      break;
 800eea8:	e00c      	b.n	800eec4 <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	3304      	adds	r3, #4
 800eeae:	2201      	movs	r2, #1
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 f91f 	bl	800f0f6 <USBD_CtlSendData>
      break;
 800eeb8:	e004      	b.n	800eec4 <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 800eeba:	6839      	ldr	r1, [r7, #0]
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f8a9 	bl	800f014 <USBD_CtlError>
      break;
 800eec2:	bf00      	nop
}
 800eec4:	bf00      	nop
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	3b01      	subs	r3, #1
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d81e      	bhi.n	800ef22 <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	88db      	ldrh	r3, [r3, #6]
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d004      	beq.n	800eef6 <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 800eeec:	6839      	ldr	r1, [r7, #0]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 f890 	bl	800f014 <USBD_CtlError>
      break;
 800eef4:	e01a      	b.n	800ef2c <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d005      	beq.n	800ef12 <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	f043 0202 	orr.w	r2, r3, #2
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	330c      	adds	r3, #12
 800ef16:	2202      	movs	r2, #2
 800ef18:	4619      	mov	r1, r3
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 f8eb 	bl	800f0f6 <USBD_CtlSendData>
    break;
 800ef20:	e004      	b.n	800ef2c <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 f875 	bl	800f014 <USBD_CtlError>
    break;
 800ef2a:	bf00      	nop
  }
}
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	885b      	ldrh	r3, [r3, #2]
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d106      	bne.n	800ef54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2201      	movs	r2, #1
 800ef4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f92b 	bl	800f1aa <USBD_CtlSendStatus>
  }
}
 800ef54:	bf00      	nop
 800ef56:	3708      	adds	r7, #8
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	2b02      	cmp	r3, #2
 800ef72:	d80b      	bhi.n	800ef8c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	885b      	ldrh	r3, [r3, #2]
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d10c      	bne.n	800ef96 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 f910 	bl	800f1aa <USBD_CtlSendStatus>
      }
      break;
 800ef8a:	e004      	b.n	800ef96 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ef8c:	6839      	ldr	r1, [r7, #0]
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f840 	bl	800f014 <USBD_CtlError>
      break;
 800ef94:	e000      	b.n	800ef98 <USBD_ClrFeature+0x3c>
      break;
 800ef96:	bf00      	nop
  }
}
 800ef98:	bf00      	nop
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	781a      	ldrb	r2, [r3, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	3301      	adds	r3, #1
 800efba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	781a      	ldrb	r2, [r3, #0]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3301      	adds	r3, #1
 800efc8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800efca:	68f8      	ldr	r0, [r7, #12]
 800efcc:	f7ff fabd 	bl	800e54a <SWAPBYTE>
 800efd0:	4603      	mov	r3, r0
 800efd2:	461a      	mov	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	3301      	adds	r3, #1
 800efdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	3301      	adds	r3, #1
 800efe2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800efe4:	68f8      	ldr	r0, [r7, #12]
 800efe6:	f7ff fab0 	bl	800e54a <SWAPBYTE>
 800efea:	4603      	mov	r3, r0
 800efec:	461a      	mov	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	3301      	adds	r3, #1
 800eff6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	3301      	adds	r3, #1
 800effc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800effe:	68f8      	ldr	r0, [r7, #12]
 800f000:	f7ff faa3 	bl	800e54a <SWAPBYTE>
 800f004:	4603      	mov	r3, r0
 800f006:	461a      	mov	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	80da      	strh	r2, [r3, #6]
}
 800f00c:	bf00      	nop
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f01e:	2180      	movs	r1, #128	; 0x80
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 fd4f 	bl	800fac4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f026:	2100      	movs	r1, #0
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 fd4b 	bl	800fac4 <USBD_LL_StallEP>
}
 800f02e:	bf00      	nop
 800f030:	3708      	adds	r7, #8
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f036:	b580      	push	{r7, lr}
 800f038:	b086      	sub	sp, #24
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	60f8      	str	r0, [r7, #12]
 800f03e:	60b9      	str	r1, [r7, #8]
 800f040:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f042:	2300      	movs	r3, #0
 800f044:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d036      	beq.n	800f0ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f050:	6938      	ldr	r0, [r7, #16]
 800f052:	f000 f836 	bl	800f0c2 <USBD_GetLen>
 800f056:	4603      	mov	r3, r0
 800f058:	3301      	adds	r3, #1
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	b29a      	uxth	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f064:	7dfb      	ldrb	r3, [r7, #23]
 800f066:	68ba      	ldr	r2, [r7, #8]
 800f068:	4413      	add	r3, r2
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	7812      	ldrb	r2, [r2, #0]
 800f06e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f070:	7dfb      	ldrb	r3, [r7, #23]
 800f072:	3301      	adds	r3, #1
 800f074:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f076:	7dfb      	ldrb	r3, [r7, #23]
 800f078:	68ba      	ldr	r2, [r7, #8]
 800f07a:	4413      	add	r3, r2
 800f07c:	2203      	movs	r2, #3
 800f07e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f080:	7dfb      	ldrb	r3, [r7, #23]
 800f082:	3301      	adds	r3, #1
 800f084:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f086:	e013      	b.n	800f0b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f088:	7dfb      	ldrb	r3, [r7, #23]
 800f08a:	68ba      	ldr	r2, [r7, #8]
 800f08c:	4413      	add	r3, r2
 800f08e:	693a      	ldr	r2, [r7, #16]
 800f090:	7812      	ldrb	r2, [r2, #0]
 800f092:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	3301      	adds	r3, #1
 800f098:	613b      	str	r3, [r7, #16]
    idx++;
 800f09a:	7dfb      	ldrb	r3, [r7, #23]
 800f09c:	3301      	adds	r3, #1
 800f09e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f0a0:	7dfb      	ldrb	r3, [r7, #23]
 800f0a2:	68ba      	ldr	r2, [r7, #8]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	701a      	strb	r2, [r3, #0]
    idx++;
 800f0aa:	7dfb      	ldrb	r3, [r7, #23]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1e7      	bne.n	800f088 <USBD_GetString+0x52>
 800f0b8:	e000      	b.n	800f0bc <USBD_GetString+0x86>
    return;
 800f0ba:	bf00      	nop
  }
}
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f0c2:	b480      	push	{r7}
 800f0c4:	b085      	sub	sp, #20
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f0d2:	e005      	b.n	800f0e0 <USBD_GetLen+0x1e>
  {
    len++;
 800f0d4:	7bfb      	ldrb	r3, [r7, #15]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1f5      	bne.n	800f0d4 <USBD_GetLen+0x12>
  }

  return len;
 800f0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3714      	adds	r7, #20
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b084      	sub	sp, #16
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	60f8      	str	r0, [r7, #12]
 800f0fe:	60b9      	str	r1, [r7, #8]
 800f100:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2202      	movs	r2, #2
 800f106:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	2100      	movs	r1, #0
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f000 fd5a 	bl	800fbd6 <USBD_LL_Transmit>

  return USBD_OK;
 800f122:	2300      	movs	r3, #0
}
 800f124:	4618      	mov	r0, r3
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	68ba      	ldr	r2, [r7, #8]
 800f13c:	2100      	movs	r1, #0
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f000 fd49 	bl	800fbd6 <USBD_LL_Transmit>

  return USBD_OK;
 800f144:	2300      	movs	r3, #0
}
 800f146:	4618      	mov	r0, r3
 800f148:	3710      	adds	r7, #16
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f14e:	b580      	push	{r7, lr}
 800f150:	b084      	sub	sp, #16
 800f152:	af00      	add	r7, sp, #0
 800f154:	60f8      	str	r0, [r7, #12]
 800f156:	60b9      	str	r1, [r7, #8]
 800f158:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2203      	movs	r2, #3
 800f15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	68ba      	ldr	r2, [r7, #8]
 800f176:	2100      	movs	r1, #0
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f000 fd4d 	bl	800fc18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f17e:	2300      	movs	r3, #0
}
 800f180:	4618      	mov	r0, r3
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	60f8      	str	r0, [r7, #12]
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	2100      	movs	r1, #0
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f000 fd3c 	bl	800fc18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b082      	sub	sp, #8
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2204      	movs	r2, #4
 800f1b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	2200      	movs	r2, #0
 800f1be:	2100      	movs	r1, #0
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 fd08 	bl	800fbd6 <USBD_LL_Transmit>

  return USBD_OK;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3708      	adds	r7, #8
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2205      	movs	r2, #5
 800f1dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 fd16 	bl	800fc18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f1ec:	2300      	movs	r3, #0
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
	...

0800f1f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	4913      	ldr	r1, [pc, #76]	; (800f24c <MX_USB_DEVICE_Init+0x54>)
 800f200:	4813      	ldr	r0, [pc, #76]	; (800f250 <MX_USB_DEVICE_Init+0x58>)
 800f202:	f7fe fed3 	bl	800dfac <USBD_Init>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f20c:	f7f1 fdd4 	bl	8000db8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f210:	4910      	ldr	r1, [pc, #64]	; (800f254 <MX_USB_DEVICE_Init+0x5c>)
 800f212:	480f      	ldr	r0, [pc, #60]	; (800f250 <MX_USB_DEVICE_Init+0x58>)
 800f214:	f7fe ff00 	bl	800e018 <USBD_RegisterClass>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f21e:	f7f1 fdcb 	bl	8000db8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f222:	490d      	ldr	r1, [pc, #52]	; (800f258 <MX_USB_DEVICE_Init+0x60>)
 800f224:	480a      	ldr	r0, [pc, #40]	; (800f250 <MX_USB_DEVICE_Init+0x58>)
 800f226:	f7fe fe25 	bl	800de74 <USBD_CDC_RegisterInterface>
 800f22a:	4603      	mov	r3, r0
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f230:	f7f1 fdc2 	bl	8000db8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f234:	4806      	ldr	r0, [pc, #24]	; (800f250 <MX_USB_DEVICE_Init+0x58>)
 800f236:	f7fe ff10 	bl	800e05a <USBD_Start>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d001      	beq.n	800f244 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f240:	f7f1 fdba 	bl	8000db8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f244:	f7f7 fbea 	bl	8006a1c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f248:	bf00      	nop
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	24000134 	.word	0x24000134
 800f250:	24000720 	.word	0x24000720
 800f254:	2400001c 	.word	0x2400001c
 800f258:	24000120 	.word	0x24000120

0800f25c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f260:	2200      	movs	r2, #0
 800f262:	4905      	ldr	r1, [pc, #20]	; (800f278 <CDC_Init_FS+0x1c>)
 800f264:	4805      	ldr	r0, [pc, #20]	; (800f27c <CDC_Init_FS+0x20>)
 800f266:	f7fe fe1a 	bl	800de9e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f26a:	4905      	ldr	r1, [pc, #20]	; (800f280 <CDC_Init_FS+0x24>)
 800f26c:	4803      	ldr	r0, [pc, #12]	; (800f27c <CDC_Init_FS+0x20>)
 800f26e:	f7fe fe2f 	bl	800ded0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f272:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f274:	4618      	mov	r0, r3
 800f276:	bd80      	pop	{r7, pc}
 800f278:	240011f0 	.word	0x240011f0
 800f27c:	24000720 	.word	0x24000720
 800f280:	240009f0 	.word	0x240009f0

0800f284 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f288:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	4603      	mov	r3, r0
 800f29c:	6039      	str	r1, [r7, #0]
 800f29e:	71fb      	strb	r3, [r7, #7]
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f2a4:	79fb      	ldrb	r3, [r7, #7]
 800f2a6:	2b23      	cmp	r3, #35	; 0x23
 800f2a8:	f200 808c 	bhi.w	800f3c4 <CDC_Control_FS+0x130>
 800f2ac:	a201      	add	r2, pc, #4	; (adr r2, 800f2b4 <CDC_Control_FS+0x20>)
 800f2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b2:	bf00      	nop
 800f2b4:	0800f3c5 	.word	0x0800f3c5
 800f2b8:	0800f3c5 	.word	0x0800f3c5
 800f2bc:	0800f3c5 	.word	0x0800f3c5
 800f2c0:	0800f3c5 	.word	0x0800f3c5
 800f2c4:	0800f3c5 	.word	0x0800f3c5
 800f2c8:	0800f3c5 	.word	0x0800f3c5
 800f2cc:	0800f3c5 	.word	0x0800f3c5
 800f2d0:	0800f3c5 	.word	0x0800f3c5
 800f2d4:	0800f3c5 	.word	0x0800f3c5
 800f2d8:	0800f3c5 	.word	0x0800f3c5
 800f2dc:	0800f3c5 	.word	0x0800f3c5
 800f2e0:	0800f3c5 	.word	0x0800f3c5
 800f2e4:	0800f3c5 	.word	0x0800f3c5
 800f2e8:	0800f3c5 	.word	0x0800f3c5
 800f2ec:	0800f3c5 	.word	0x0800f3c5
 800f2f0:	0800f3c5 	.word	0x0800f3c5
 800f2f4:	0800f3c5 	.word	0x0800f3c5
 800f2f8:	0800f3c5 	.word	0x0800f3c5
 800f2fc:	0800f3c5 	.word	0x0800f3c5
 800f300:	0800f3c5 	.word	0x0800f3c5
 800f304:	0800f3c5 	.word	0x0800f3c5
 800f308:	0800f3c5 	.word	0x0800f3c5
 800f30c:	0800f3c5 	.word	0x0800f3c5
 800f310:	0800f3c5 	.word	0x0800f3c5
 800f314:	0800f3c5 	.word	0x0800f3c5
 800f318:	0800f3c5 	.word	0x0800f3c5
 800f31c:	0800f3c5 	.word	0x0800f3c5
 800f320:	0800f3c5 	.word	0x0800f3c5
 800f324:	0800f3c5 	.word	0x0800f3c5
 800f328:	0800f3c5 	.word	0x0800f3c5
 800f32c:	0800f3c5 	.word	0x0800f3c5
 800f330:	0800f3c5 	.word	0x0800f3c5
 800f334:	0800f345 	.word	0x0800f345
 800f338:	0800f37f 	.word	0x0800f37f
 800f33c:	0800f3c5 	.word	0x0800f3c5
 800f340:	0800f3c5 	.word	0x0800f3c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	781a      	ldrb	r2, [r3, #0]
 800f348:	4b22      	ldr	r3, [pc, #136]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f34a:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	785a      	ldrb	r2, [r3, #1]
 800f350:	4b20      	ldr	r3, [pc, #128]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f352:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	789a      	ldrb	r2, [r3, #2]
 800f358:	4b1e      	ldr	r3, [pc, #120]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f35a:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	78da      	ldrb	r2, [r3, #3]
 800f360:	4b1c      	ldr	r3, [pc, #112]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f362:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	791a      	ldrb	r2, [r3, #4]
 800f368:	4b1a      	ldr	r3, [pc, #104]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f36a:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	795a      	ldrb	r2, [r3, #5]
 800f370:	4b18      	ldr	r3, [pc, #96]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f372:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	799a      	ldrb	r2, [r3, #6]
 800f378:	4b16      	ldr	r3, [pc, #88]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f37a:	719a      	strb	r2, [r3, #6]

    break;
 800f37c:	e023      	b.n	800f3c6 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 800f37e:	4b15      	ldr	r3, [pc, #84]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f380:	781a      	ldrb	r2, [r3, #0]
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	3301      	adds	r3, #1
 800f38a:	4a12      	ldr	r2, [pc, #72]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f38c:	7852      	ldrb	r2, [r2, #1]
 800f38e:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	3302      	adds	r3, #2
 800f394:	4a0f      	ldr	r2, [pc, #60]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f396:	7892      	ldrb	r2, [r2, #2]
 800f398:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	3303      	adds	r3, #3
 800f39e:	4a0d      	ldr	r2, [pc, #52]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f3a0:	78d2      	ldrb	r2, [r2, #3]
 800f3a2:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	3304      	adds	r3, #4
 800f3a8:	4a0a      	ldr	r2, [pc, #40]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f3aa:	7912      	ldrb	r2, [r2, #4]
 800f3ac:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	3305      	adds	r3, #5
 800f3b2:	4a08      	ldr	r2, [pc, #32]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f3b4:	7952      	ldrb	r2, [r2, #5]
 800f3b6:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	3306      	adds	r3, #6
 800f3bc:	4a05      	ldr	r2, [pc, #20]	; (800f3d4 <CDC_Control_FS+0x140>)
 800f3be:	7992      	ldrb	r2, [r2, #6]
 800f3c0:	701a      	strb	r2, [r3, #0]

    break;
 800f3c2:	e000      	b.n	800f3c6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f3c4:	bf00      	nop
  }

  return (USBD_OK);
 800f3c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr
 800f3d4:	240019f0 	.word	0x240019f0

0800f3d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f3e2:	6879      	ldr	r1, [r7, #4]
 800f3e4:	4809      	ldr	r0, [pc, #36]	; (800f40c <CDC_Receive_FS+0x34>)
 800f3e6:	f7fe fd73 	bl	800ded0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f3ea:	4808      	ldr	r0, [pc, #32]	; (800f40c <CDC_Receive_FS+0x34>)
 800f3ec:	f7fe fdb4 	bl	800df58 <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 800f3f6:	89fb      	ldrh	r3, [r7, #14]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 f808 	bl	800f410 <CDC_Transmit_FS>
  return (USBD_OK);
 800f400:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	24000720 	.word	0x24000720

0800f410 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	460b      	mov	r3, r1
 800f41a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f41c:	2300      	movs	r3, #0
 800f41e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f420:	4b0d      	ldr	r3, [pc, #52]	; (800f458 <CDC_Transmit_FS+0x48>)
 800f422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f426:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d001      	beq.n	800f436 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f432:	2301      	movs	r3, #1
 800f434:	e00b      	b.n	800f44e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f436:	887b      	ldrh	r3, [r7, #2]
 800f438:	461a      	mov	r2, r3
 800f43a:	6879      	ldr	r1, [r7, #4]
 800f43c:	4806      	ldr	r0, [pc, #24]	; (800f458 <CDC_Transmit_FS+0x48>)
 800f43e:	f7fe fd2e 	bl	800de9e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f442:	4805      	ldr	r0, [pc, #20]	; (800f458 <CDC_Transmit_FS+0x48>)
 800f444:	f7fe fd58 	bl	800def8 <USBD_CDC_TransmitPacket>
 800f448:	4603      	mov	r3, r0
 800f44a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	24000720 	.word	0x24000720

0800f45c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b087      	sub	sp, #28
 800f460:	af00      	add	r7, sp, #0
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	4613      	mov	r3, r2
 800f468:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f46a:	2300      	movs	r3, #0
 800f46c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f46e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f472:	4618      	mov	r0, r3
 800f474:	371c      	adds	r7, #28
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
	...

0800f480 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f480:	b480      	push	{r7}
 800f482:	b083      	sub	sp, #12
 800f484:	af00      	add	r7, sp, #0
 800f486:	4603      	mov	r3, r0
 800f488:	6039      	str	r1, [r7, #0]
 800f48a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	2212      	movs	r2, #18
 800f490:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f492:	4b03      	ldr	r3, [pc, #12]	; (800f4a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f494:	4618      	mov	r0, r3
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr
 800f4a0:	24000150 	.word	0x24000150

0800f4a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	6039      	str	r1, [r7, #0]
 800f4ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	2204      	movs	r2, #4
 800f4b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f4b6:	4b03      	ldr	r3, [pc, #12]	; (800f4c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr
 800f4c4:	24000164 	.word	0x24000164

0800f4c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	6039      	str	r1, [r7, #0]
 800f4d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f4d4:	79fb      	ldrb	r3, [r7, #7]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d105      	bne.n	800f4e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4da:	683a      	ldr	r2, [r7, #0]
 800f4dc:	4907      	ldr	r1, [pc, #28]	; (800f4fc <USBD_FS_ProductStrDescriptor+0x34>)
 800f4de:	4808      	ldr	r0, [pc, #32]	; (800f500 <USBD_FS_ProductStrDescriptor+0x38>)
 800f4e0:	f7ff fda9 	bl	800f036 <USBD_GetString>
 800f4e4:	e004      	b.n	800f4f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4e6:	683a      	ldr	r2, [r7, #0]
 800f4e8:	4904      	ldr	r1, [pc, #16]	; (800f4fc <USBD_FS_ProductStrDescriptor+0x34>)
 800f4ea:	4805      	ldr	r0, [pc, #20]	; (800f500 <USBD_FS_ProductStrDescriptor+0x38>)
 800f4ec:	f7ff fda3 	bl	800f036 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4f0:	4b02      	ldr	r3, [pc, #8]	; (800f4fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	240019f8 	.word	0x240019f8
 800f500:	08012648 	.word	0x08012648

0800f504 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	4603      	mov	r3, r0
 800f50c:	6039      	str	r1, [r7, #0]
 800f50e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	4904      	ldr	r1, [pc, #16]	; (800f524 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f514:	4804      	ldr	r0, [pc, #16]	; (800f528 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f516:	f7ff fd8e 	bl	800f036 <USBD_GetString>
  return USBD_StrDesc;
 800f51a:	4b02      	ldr	r3, [pc, #8]	; (800f524 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	240019f8 	.word	0x240019f8
 800f528:	08012660 	.word	0x08012660

0800f52c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	4603      	mov	r3, r0
 800f534:	6039      	str	r1, [r7, #0]
 800f536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	221a      	movs	r2, #26
 800f53c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f53e:	f000 f843 	bl	800f5c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f542:	4b02      	ldr	r3, [pc, #8]	; (800f54c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f544:	4618      	mov	r0, r3
 800f546:	3708      	adds	r7, #8
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	24000168 	.word	0x24000168

0800f550 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	4603      	mov	r3, r0
 800f558:	6039      	str	r1, [r7, #0]
 800f55a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f55c:	79fb      	ldrb	r3, [r7, #7]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d105      	bne.n	800f56e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f562:	683a      	ldr	r2, [r7, #0]
 800f564:	4907      	ldr	r1, [pc, #28]	; (800f584 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f566:	4808      	ldr	r0, [pc, #32]	; (800f588 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f568:	f7ff fd65 	bl	800f036 <USBD_GetString>
 800f56c:	e004      	b.n	800f578 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f56e:	683a      	ldr	r2, [r7, #0]
 800f570:	4904      	ldr	r1, [pc, #16]	; (800f584 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f572:	4805      	ldr	r0, [pc, #20]	; (800f588 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f574:	f7ff fd5f 	bl	800f036 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f578:	4b02      	ldr	r3, [pc, #8]	; (800f584 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	240019f8 	.word	0x240019f8
 800f588:	08012674 	.word	0x08012674

0800f58c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b082      	sub	sp, #8
 800f590:	af00      	add	r7, sp, #0
 800f592:	4603      	mov	r3, r0
 800f594:	6039      	str	r1, [r7, #0]
 800f596:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f598:	79fb      	ldrb	r3, [r7, #7]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d105      	bne.n	800f5aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	4907      	ldr	r1, [pc, #28]	; (800f5c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5a2:	4808      	ldr	r0, [pc, #32]	; (800f5c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5a4:	f7ff fd47 	bl	800f036 <USBD_GetString>
 800f5a8:	e004      	b.n	800f5b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	4904      	ldr	r1, [pc, #16]	; (800f5c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5ae:	4805      	ldr	r0, [pc, #20]	; (800f5c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5b0:	f7ff fd41 	bl	800f036 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5b4:	4b02      	ldr	r3, [pc, #8]	; (800f5c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	240019f8 	.word	0x240019f8
 800f5c4:	08012680 	.word	0x08012680

0800f5c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f5ce:	4b0f      	ldr	r3, [pc, #60]	; (800f60c <Get_SerialNum+0x44>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f5d4:	4b0e      	ldr	r3, [pc, #56]	; (800f610 <Get_SerialNum+0x48>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f5da:	4b0e      	ldr	r3, [pc, #56]	; (800f614 <Get_SerialNum+0x4c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d009      	beq.n	800f602 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f5ee:	2208      	movs	r2, #8
 800f5f0:	4909      	ldr	r1, [pc, #36]	; (800f618 <Get_SerialNum+0x50>)
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f000 f814 	bl	800f620 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f5f8:	2204      	movs	r2, #4
 800f5fa:	4908      	ldr	r1, [pc, #32]	; (800f61c <Get_SerialNum+0x54>)
 800f5fc:	68b8      	ldr	r0, [r7, #8]
 800f5fe:	f000 f80f 	bl	800f620 <IntToUnicode>
  }
}
 800f602:	bf00      	nop
 800f604:	3710      	adds	r7, #16
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	1ff1e800 	.word	0x1ff1e800
 800f610:	1ff1e804 	.word	0x1ff1e804
 800f614:	1ff1e808 	.word	0x1ff1e808
 800f618:	2400016a 	.word	0x2400016a
 800f61c:	2400017a 	.word	0x2400017a

0800f620 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f620:	b480      	push	{r7}
 800f622:	b087      	sub	sp, #28
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	4613      	mov	r3, r2
 800f62c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f62e:	2300      	movs	r3, #0
 800f630:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f632:	2300      	movs	r3, #0
 800f634:	75fb      	strb	r3, [r7, #23]
 800f636:	e027      	b.n	800f688 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	0f1b      	lsrs	r3, r3, #28
 800f63c:	2b09      	cmp	r3, #9
 800f63e:	d80b      	bhi.n	800f658 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	0f1b      	lsrs	r3, r3, #28
 800f644:	b2da      	uxtb	r2, r3
 800f646:	7dfb      	ldrb	r3, [r7, #23]
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	4619      	mov	r1, r3
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	440b      	add	r3, r1
 800f650:	3230      	adds	r2, #48	; 0x30
 800f652:	b2d2      	uxtb	r2, r2
 800f654:	701a      	strb	r2, [r3, #0]
 800f656:	e00a      	b.n	800f66e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	0f1b      	lsrs	r3, r3, #28
 800f65c:	b2da      	uxtb	r2, r3
 800f65e:	7dfb      	ldrb	r3, [r7, #23]
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	4619      	mov	r1, r3
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	440b      	add	r3, r1
 800f668:	3237      	adds	r2, #55	; 0x37
 800f66a:	b2d2      	uxtb	r2, r2
 800f66c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	011b      	lsls	r3, r3, #4
 800f672:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f674:	7dfb      	ldrb	r3, [r7, #23]
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	3301      	adds	r3, #1
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	4413      	add	r3, r2
 800f67e:	2200      	movs	r2, #0
 800f680:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f682:	7dfb      	ldrb	r3, [r7, #23]
 800f684:	3301      	adds	r3, #1
 800f686:	75fb      	strb	r3, [r7, #23]
 800f688:	7dfa      	ldrb	r2, [r7, #23]
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d3d3      	bcc.n	800f638 <IntToUnicode+0x18>
  }
}
 800f690:	bf00      	nop
 800f692:	bf00      	nop
 800f694:	371c      	adds	r7, #28
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
	...

0800f6a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b0b8      	sub	sp, #224	; 0xe0
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	601a      	str	r2, [r3, #0]
 800f6b0:	605a      	str	r2, [r3, #4]
 800f6b2:	609a      	str	r2, [r3, #8]
 800f6b4:	60da      	str	r2, [r3, #12]
 800f6b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f6b8:	f107 0310 	add.w	r3, r7, #16
 800f6bc:	22bc      	movs	r2, #188	; 0xbc
 800f6be:	2100      	movs	r1, #0
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f000 fb43 	bl	800fd4c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	4a2a      	ldr	r2, [pc, #168]	; (800f774 <HAL_PCD_MspInit+0xd4>)
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d14c      	bne.n	800f76a <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f6d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f6d4:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f6d6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800f6da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f6de:	f107 0310 	add.w	r3, r7, #16
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7f8 f986 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d001      	beq.n	800f6f2 <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 800f6ee:	f7f1 fb63 	bl	8000db8 <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f6f2:	4b21      	ldr	r3, [pc, #132]	; (800f778 <HAL_PCD_MspInit+0xd8>)
 800f6f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f6f8:	4a1f      	ldr	r2, [pc, #124]	; (800f778 <HAL_PCD_MspInit+0xd8>)
 800f6fa:	f043 0301 	orr.w	r3, r3, #1
 800f6fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f702:	4b1d      	ldr	r3, [pc, #116]	; (800f778 <HAL_PCD_MspInit+0xd8>)
 800f704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f708:	f003 0301 	and.w	r3, r3, #1
 800f70c:	60fb      	str	r3, [r7, #12]
 800f70e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f710:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f718:	2302      	movs	r3, #2
 800f71a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f71e:	2300      	movs	r3, #0
 800f720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f724:	2300      	movs	r3, #0
 800f726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f72a:	230a      	movs	r3, #10
 800f72c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f730:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f734:	4619      	mov	r1, r3
 800f736:	4811      	ldr	r0, [pc, #68]	; (800f77c <HAL_PCD_MspInit+0xdc>)
 800f738:	f7f4 fd96 	bl	8004268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f73c:	4b0e      	ldr	r3, [pc, #56]	; (800f778 <HAL_PCD_MspInit+0xd8>)
 800f73e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f742:	4a0d      	ldr	r2, [pc, #52]	; (800f778 <HAL_PCD_MspInit+0xd8>)
 800f744:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f748:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f74c:	4b0a      	ldr	r3, [pc, #40]	; (800f778 <HAL_PCD_MspInit+0xd8>)
 800f74e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f756:	60bb      	str	r3, [r7, #8]
 800f758:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f75a:	2200      	movs	r2, #0
 800f75c:	2100      	movs	r1, #0
 800f75e:	2065      	movs	r0, #101	; 0x65
 800f760:	f7f2 fa8f 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f764:	2065      	movs	r0, #101	; 0x65
 800f766:	f7f2 faa6 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f76a:	bf00      	nop
 800f76c:	37e0      	adds	r7, #224	; 0xe0
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	40080000 	.word	0x40080000
 800f778:	58024400 	.word	0x58024400
 800f77c:	58020000 	.word	0x58020000

0800f780 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f794:	4619      	mov	r1, r3
 800f796:	4610      	mov	r0, r2
 800f798:	f7fe fcaa 	bl	800e0f0 <USBD_LL_SetupStage>
}
 800f79c:	bf00      	nop
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f7b6:	78fa      	ldrb	r2, [r7, #3]
 800f7b8:	6879      	ldr	r1, [r7, #4]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	00db      	lsls	r3, r3, #3
 800f7be:	1a9b      	subs	r3, r3, r2
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	440b      	add	r3, r1
 800f7c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	78fb      	ldrb	r3, [r7, #3]
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	f7fe fce4 	bl	800e19a <USBD_LL_DataOutStage>
}
 800f7d2:	bf00      	nop
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}

0800f7da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7da:	b580      	push	{r7, lr}
 800f7dc:	b082      	sub	sp, #8
 800f7de:	af00      	add	r7, sp, #0
 800f7e0:	6078      	str	r0, [r7, #4]
 800f7e2:	460b      	mov	r3, r1
 800f7e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f7ec:	78fa      	ldrb	r2, [r7, #3]
 800f7ee:	6879      	ldr	r1, [r7, #4]
 800f7f0:	4613      	mov	r3, r2
 800f7f2:	00db      	lsls	r3, r3, #3
 800f7f4:	1a9b      	subs	r3, r3, r2
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	440b      	add	r3, r1
 800f7fa:	3348      	adds	r3, #72	; 0x48
 800f7fc:	681a      	ldr	r2, [r3, #0]
 800f7fe:	78fb      	ldrb	r3, [r7, #3]
 800f800:	4619      	mov	r1, r3
 800f802:	f7fe fd2f 	bl	800e264 <USBD_LL_DataInStage>
}
 800f806:	bf00      	nop
 800f808:	3708      	adds	r7, #8
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f80e:	b580      	push	{r7, lr}
 800f810:	b082      	sub	sp, #8
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fe fe38 	bl	800e492 <USBD_LL_SOF>
}
 800f822:	bf00      	nop
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}

0800f82a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f82a:	b580      	push	{r7, lr}
 800f82c:	b084      	sub	sp, #16
 800f82e:	af00      	add	r7, sp, #0
 800f830:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f832:	2301      	movs	r3, #1
 800f834:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d102      	bne.n	800f844 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f83e:	2300      	movs	r3, #0
 800f840:	73fb      	strb	r3, [r7, #15]
 800f842:	e008      	b.n	800f856 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d102      	bne.n	800f852 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f84c:	2301      	movs	r3, #1
 800f84e:	73fb      	strb	r3, [r7, #15]
 800f850:	e001      	b.n	800f856 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f852:	f7f1 fab1 	bl	8000db8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f85c:	7bfa      	ldrb	r2, [r7, #15]
 800f85e:	4611      	mov	r1, r2
 800f860:	4618      	mov	r0, r3
 800f862:	f7fe fdd8 	bl	800e416 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7fe fd91 	bl	800e394 <USBD_LL_Reset>
}
 800f872:	bf00      	nop
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
	...

0800f87c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fe fdd3 	bl	800e436 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	6812      	ldr	r2, [r2, #0]
 800f89e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f8a2:	f043 0301 	orr.w	r3, r3, #1
 800f8a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	6a1b      	ldr	r3, [r3, #32]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d005      	beq.n	800f8bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f8b0:	4b04      	ldr	r3, [pc, #16]	; (800f8c4 <HAL_PCD_SuspendCallback+0x48>)
 800f8b2:	691b      	ldr	r3, [r3, #16]
 800f8b4:	4a03      	ldr	r2, [pc, #12]	; (800f8c4 <HAL_PCD_SuspendCallback+0x48>)
 800f8b6:	f043 0306 	orr.w	r3, r3, #6
 800f8ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f8bc:	bf00      	nop
 800f8be:	3708      	adds	r7, #8
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	e000ed00 	.word	0xe000ed00

0800f8c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fe fdc3 	bl	800e462 <USBD_LL_Resume>
}
 800f8dc:	bf00      	nop
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f8f6:	78fa      	ldrb	r2, [r7, #3]
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fe fdf1 	bl	800e4e2 <USBD_LL_IsoOUTIncomplete>
}
 800f900:	bf00      	nop
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	460b      	mov	r3, r1
 800f912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f91a:	78fa      	ldrb	r2, [r7, #3]
 800f91c:	4611      	mov	r1, r2
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fe fdd2 	bl	800e4c8 <USBD_LL_IsoINIncomplete>
}
 800f924:	bf00      	nop
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fe fdde 	bl	800e4fc <USBD_LL_DevConnected>
}
 800f940:	bf00      	nop
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f956:	4618      	mov	r0, r3
 800f958:	f7fe fddb 	bl	800e512 <USBD_LL_DevDisconnected>
}
 800f95c:	bf00      	nop
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d13e      	bne.n	800f9f2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f974:	4a21      	ldr	r2, [pc, #132]	; (800f9fc <USBD_LL_Init+0x98>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4a1f      	ldr	r2, [pc, #124]	; (800f9fc <USBD_LL_Init+0x98>)
 800f980:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f984:	4b1d      	ldr	r3, [pc, #116]	; (800f9fc <USBD_LL_Init+0x98>)
 800f986:	4a1e      	ldr	r2, [pc, #120]	; (800fa00 <USBD_LL_Init+0x9c>)
 800f988:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f98a:	4b1c      	ldr	r3, [pc, #112]	; (800f9fc <USBD_LL_Init+0x98>)
 800f98c:	2209      	movs	r2, #9
 800f98e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f990:	4b1a      	ldr	r3, [pc, #104]	; (800f9fc <USBD_LL_Init+0x98>)
 800f992:	2202      	movs	r2, #2
 800f994:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f996:	4b19      	ldr	r3, [pc, #100]	; (800f9fc <USBD_LL_Init+0x98>)
 800f998:	2200      	movs	r2, #0
 800f99a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f99c:	4b17      	ldr	r3, [pc, #92]	; (800f9fc <USBD_LL_Init+0x98>)
 800f99e:	2202      	movs	r2, #2
 800f9a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f9a2:	4b16      	ldr	r3, [pc, #88]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f9a8:	4b14      	ldr	r3, [pc, #80]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f9ae:	4b13      	ldr	r3, [pc, #76]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f9b4:	4b11      	ldr	r3, [pc, #68]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f9ba:	4b10      	ldr	r3, [pc, #64]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f9c0:	4b0e      	ldr	r3, [pc, #56]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f9c6:	480d      	ldr	r0, [pc, #52]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9c8:	f7f5 fdf2 	bl	80055b0 <HAL_PCD_Init>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d001      	beq.n	800f9d6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f9d2:	f7f1 f9f1 	bl	8000db8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f9d6:	2180      	movs	r1, #128	; 0x80
 800f9d8:	4808      	ldr	r0, [pc, #32]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9da:	f7f6 ff84 	bl	80068e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f9de:	2240      	movs	r2, #64	; 0x40
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	4806      	ldr	r0, [pc, #24]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9e4:	f7f6 ff38 	bl	8006858 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f9e8:	2280      	movs	r2, #128	; 0x80
 800f9ea:	2101      	movs	r1, #1
 800f9ec:	4803      	ldr	r0, [pc, #12]	; (800f9fc <USBD_LL_Init+0x98>)
 800f9ee:	f7f6 ff33 	bl	8006858 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3708      	adds	r7, #8
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	24001bf8 	.word	0x24001bf8
 800fa00:	40080000 	.word	0x40080000

0800fa04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa10:	2300      	movs	r3, #0
 800fa12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7f5 feec 	bl	80057f8 <HAL_PCD_Start>
 800fa20:	4603      	mov	r3, r0
 800fa22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa24:	7bfb      	ldrb	r3, [r7, #15]
 800fa26:	4618      	mov	r0, r3
 800fa28:	f000 f92a 	bl	800fc80 <USBD_Get_USB_Status>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa30:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b084      	sub	sp, #16
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	4608      	mov	r0, r1
 800fa44:	4611      	mov	r1, r2
 800fa46:	461a      	mov	r2, r3
 800fa48:	4603      	mov	r3, r0
 800fa4a:	70fb      	strb	r3, [r7, #3]
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	70bb      	strb	r3, [r7, #2]
 800fa50:	4613      	mov	r3, r2
 800fa52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa54:	2300      	movs	r3, #0
 800fa56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fa62:	78bb      	ldrb	r3, [r7, #2]
 800fa64:	883a      	ldrh	r2, [r7, #0]
 800fa66:	78f9      	ldrb	r1, [r7, #3]
 800fa68:	f7f6 fafd 	bl	8006066 <HAL_PCD_EP_Open>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa70:	7bfb      	ldrb	r3, [r7, #15]
 800fa72:	4618      	mov	r0, r3
 800fa74:	f000 f904 	bl	800fc80 <USBD_Get_USB_Status>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3710      	adds	r7, #16
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa86:	b580      	push	{r7, lr}
 800fa88:	b084      	sub	sp, #16
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	6078      	str	r0, [r7, #4]
 800fa8e:	460b      	mov	r3, r1
 800fa90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa92:	2300      	movs	r3, #0
 800fa94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa96:	2300      	movs	r3, #0
 800fa98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800faa0:	78fa      	ldrb	r2, [r7, #3]
 800faa2:	4611      	mov	r1, r2
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7f6 fb46 	bl	8006136 <HAL_PCD_EP_Close>
 800faaa:	4603      	mov	r3, r0
 800faac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faae:	7bfb      	ldrb	r3, [r7, #15]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f000 f8e5 	bl	800fc80 <USBD_Get_USB_Status>
 800fab6:	4603      	mov	r3, r0
 800fab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faba:	7bbb      	ldrb	r3, [r7, #14]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	460b      	mov	r3, r1
 800face:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fad4:	2300      	movs	r3, #0
 800fad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fade:	78fa      	ldrb	r2, [r7, #3]
 800fae0:	4611      	mov	r1, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7f6 fc1e 	bl	8006324 <HAL_PCD_EP_SetStall>
 800fae8:	4603      	mov	r3, r0
 800faea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faec:	7bfb      	ldrb	r3, [r7, #15]
 800faee:	4618      	mov	r0, r3
 800faf0:	f000 f8c6 	bl	800fc80 <USBD_Get_USB_Status>
 800faf4:	4603      	mov	r3, r0
 800faf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3710      	adds	r7, #16
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b084      	sub	sp, #16
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
 800fb0a:	460b      	mov	r3, r1
 800fb0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb1c:	78fa      	ldrb	r2, [r7, #3]
 800fb1e:	4611      	mov	r1, r2
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7f6 fc63 	bl	80063ec <HAL_PCD_EP_ClrStall>
 800fb26:	4603      	mov	r3, r0
 800fb28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb2a:	7bfb      	ldrb	r3, [r7, #15]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f000 f8a7 	bl	800fc80 <USBD_Get_USB_Status>
 800fb32:	4603      	mov	r3, r0
 800fb34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb36:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3710      	adds	r7, #16
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b085      	sub	sp, #20
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	460b      	mov	r3, r1
 800fb4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fb52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fb54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	da0b      	bge.n	800fb74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fb5c:	78fb      	ldrb	r3, [r7, #3]
 800fb5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb62:	68f9      	ldr	r1, [r7, #12]
 800fb64:	4613      	mov	r3, r2
 800fb66:	00db      	lsls	r3, r3, #3
 800fb68:	1a9b      	subs	r3, r3, r2
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	440b      	add	r3, r1
 800fb6e:	333e      	adds	r3, #62	; 0x3e
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	e00b      	b.n	800fb8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fb74:	78fb      	ldrb	r3, [r7, #3]
 800fb76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb7a:	68f9      	ldr	r1, [r7, #12]
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	00db      	lsls	r3, r3, #3
 800fb80:	1a9b      	subs	r3, r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	440b      	add	r3, r1
 800fb86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3714      	adds	r7, #20
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	460b      	mov	r3, r1
 800fba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fbb2:	78fa      	ldrb	r2, [r7, #3]
 800fbb4:	4611      	mov	r1, r2
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7f6 fa30 	bl	800601c <HAL_PCD_SetAddress>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbc0:	7bfb      	ldrb	r3, [r7, #15]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f000 f85c 	bl	800fc80 <USBD_Get_USB_Status>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}

0800fbd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fbd6:	b580      	push	{r7, lr}
 800fbd8:	b086      	sub	sp, #24
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	60f8      	str	r0, [r7, #12]
 800fbde:	607a      	str	r2, [r7, #4]
 800fbe0:	603b      	str	r3, [r7, #0]
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbea:	2300      	movs	r3, #0
 800fbec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fbf4:	7af9      	ldrb	r1, [r7, #11]
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	f7f6 fb49 	bl	8006290 <HAL_PCD_EP_Transmit>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc02:	7dfb      	ldrb	r3, [r7, #23]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f000 f83b 	bl	800fc80 <USBD_Get_USB_Status>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3718      	adds	r7, #24
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b086      	sub	sp, #24
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	60f8      	str	r0, [r7, #12]
 800fc20:	607a      	str	r2, [r7, #4]
 800fc22:	603b      	str	r3, [r7, #0]
 800fc24:	460b      	mov	r3, r1
 800fc26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc28:	2300      	movs	r3, #0
 800fc2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800fc36:	7af9      	ldrb	r1, [r7, #11]
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	f7f6 fac5 	bl	80061ca <HAL_PCD_EP_Receive>
 800fc40:	4603      	mov	r3, r0
 800fc42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc44:	7dfb      	ldrb	r3, [r7, #23]
 800fc46:	4618      	mov	r0, r3
 800fc48:	f000 f81a 	bl	800fc80 <USBD_Get_USB_Status>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc50:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3718      	adds	r7, #24
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b082      	sub	sp, #8
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	460b      	mov	r3, r1
 800fc64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fc6c:	78fa      	ldrb	r2, [r7, #3]
 800fc6e:	4611      	mov	r1, r2
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7f6 faf5 	bl	8006260 <HAL_PCD_EP_GetRxCount>
 800fc76:	4603      	mov	r3, r0
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3708      	adds	r7, #8
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b085      	sub	sp, #20
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	4603      	mov	r3, r0
 800fc88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc8e:	79fb      	ldrb	r3, [r7, #7]
 800fc90:	2b03      	cmp	r3, #3
 800fc92:	d817      	bhi.n	800fcc4 <USBD_Get_USB_Status+0x44>
 800fc94:	a201      	add	r2, pc, #4	; (adr r2, 800fc9c <USBD_Get_USB_Status+0x1c>)
 800fc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc9a:	bf00      	nop
 800fc9c:	0800fcad 	.word	0x0800fcad
 800fca0:	0800fcb3 	.word	0x0800fcb3
 800fca4:	0800fcb9 	.word	0x0800fcb9
 800fca8:	0800fcbf 	.word	0x0800fcbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fcac:	2300      	movs	r3, #0
 800fcae:	73fb      	strb	r3, [r7, #15]
    break;
 800fcb0:	e00b      	b.n	800fcca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fcb2:	2303      	movs	r3, #3
 800fcb4:	73fb      	strb	r3, [r7, #15]
    break;
 800fcb6:	e008      	b.n	800fcca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	73fb      	strb	r3, [r7, #15]
    break;
 800fcbc:	e005      	b.n	800fcca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fcbe:	2303      	movs	r3, #3
 800fcc0:	73fb      	strb	r3, [r7, #15]
    break;
 800fcc2:	e002      	b.n	800fcca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fcc4:	2303      	movs	r3, #3
 800fcc6:	73fb      	strb	r3, [r7, #15]
    break;
 800fcc8:	bf00      	nop
  }
  return usb_status;
 800fcca:	7bfb      	ldrb	r3, [r7, #15]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3714      	adds	r7, #20
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <__errno>:
 800fcd8:	4b01      	ldr	r3, [pc, #4]	; (800fce0 <__errno+0x8>)
 800fcda:	6818      	ldr	r0, [r3, #0]
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	24000184 	.word	0x24000184

0800fce4 <__libc_init_array>:
 800fce4:	b570      	push	{r4, r5, r6, lr}
 800fce6:	4d0d      	ldr	r5, [pc, #52]	; (800fd1c <__libc_init_array+0x38>)
 800fce8:	4c0d      	ldr	r4, [pc, #52]	; (800fd20 <__libc_init_array+0x3c>)
 800fcea:	1b64      	subs	r4, r4, r5
 800fcec:	10a4      	asrs	r4, r4, #2
 800fcee:	2600      	movs	r6, #0
 800fcf0:	42a6      	cmp	r6, r4
 800fcf2:	d109      	bne.n	800fd08 <__libc_init_array+0x24>
 800fcf4:	4d0b      	ldr	r5, [pc, #44]	; (800fd24 <__libc_init_array+0x40>)
 800fcf6:	4c0c      	ldr	r4, [pc, #48]	; (800fd28 <__libc_init_array+0x44>)
 800fcf8:	f002 fc98 	bl	801262c <_init>
 800fcfc:	1b64      	subs	r4, r4, r5
 800fcfe:	10a4      	asrs	r4, r4, #2
 800fd00:	2600      	movs	r6, #0
 800fd02:	42a6      	cmp	r6, r4
 800fd04:	d105      	bne.n	800fd12 <__libc_init_array+0x2e>
 800fd06:	bd70      	pop	{r4, r5, r6, pc}
 800fd08:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd0c:	4798      	blx	r3
 800fd0e:	3601      	adds	r6, #1
 800fd10:	e7ee      	b.n	800fcf0 <__libc_init_array+0xc>
 800fd12:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd16:	4798      	blx	r3
 800fd18:	3601      	adds	r6, #1
 800fd1a:	e7f2      	b.n	800fd02 <__libc_init_array+0x1e>
 800fd1c:	08012ab4 	.word	0x08012ab4
 800fd20:	08012ab4 	.word	0x08012ab4
 800fd24:	08012ab4 	.word	0x08012ab4
 800fd28:	08012ab8 	.word	0x08012ab8

0800fd2c <malloc>:
 800fd2c:	4b02      	ldr	r3, [pc, #8]	; (800fd38 <malloc+0xc>)
 800fd2e:	4601      	mov	r1, r0
 800fd30:	6818      	ldr	r0, [r3, #0]
 800fd32:	f000 b87f 	b.w	800fe34 <_malloc_r>
 800fd36:	bf00      	nop
 800fd38:	24000184 	.word	0x24000184

0800fd3c <free>:
 800fd3c:	4b02      	ldr	r3, [pc, #8]	; (800fd48 <free+0xc>)
 800fd3e:	4601      	mov	r1, r0
 800fd40:	6818      	ldr	r0, [r3, #0]
 800fd42:	f000 b80b 	b.w	800fd5c <_free_r>
 800fd46:	bf00      	nop
 800fd48:	24000184 	.word	0x24000184

0800fd4c <memset>:
 800fd4c:	4402      	add	r2, r0
 800fd4e:	4603      	mov	r3, r0
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d100      	bne.n	800fd56 <memset+0xa>
 800fd54:	4770      	bx	lr
 800fd56:	f803 1b01 	strb.w	r1, [r3], #1
 800fd5a:	e7f9      	b.n	800fd50 <memset+0x4>

0800fd5c <_free_r>:
 800fd5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd5e:	2900      	cmp	r1, #0
 800fd60:	d044      	beq.n	800fdec <_free_r+0x90>
 800fd62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd66:	9001      	str	r0, [sp, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	f1a1 0404 	sub.w	r4, r1, #4
 800fd6e:	bfb8      	it	lt
 800fd70:	18e4      	addlt	r4, r4, r3
 800fd72:	f001 fb35 	bl	80113e0 <__malloc_lock>
 800fd76:	4a1e      	ldr	r2, [pc, #120]	; (800fdf0 <_free_r+0x94>)
 800fd78:	9801      	ldr	r0, [sp, #4]
 800fd7a:	6813      	ldr	r3, [r2, #0]
 800fd7c:	b933      	cbnz	r3, 800fd8c <_free_r+0x30>
 800fd7e:	6063      	str	r3, [r4, #4]
 800fd80:	6014      	str	r4, [r2, #0]
 800fd82:	b003      	add	sp, #12
 800fd84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd88:	f001 bb30 	b.w	80113ec <__malloc_unlock>
 800fd8c:	42a3      	cmp	r3, r4
 800fd8e:	d908      	bls.n	800fda2 <_free_r+0x46>
 800fd90:	6825      	ldr	r5, [r4, #0]
 800fd92:	1961      	adds	r1, r4, r5
 800fd94:	428b      	cmp	r3, r1
 800fd96:	bf01      	itttt	eq
 800fd98:	6819      	ldreq	r1, [r3, #0]
 800fd9a:	685b      	ldreq	r3, [r3, #4]
 800fd9c:	1949      	addeq	r1, r1, r5
 800fd9e:	6021      	streq	r1, [r4, #0]
 800fda0:	e7ed      	b.n	800fd7e <_free_r+0x22>
 800fda2:	461a      	mov	r2, r3
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	b10b      	cbz	r3, 800fdac <_free_r+0x50>
 800fda8:	42a3      	cmp	r3, r4
 800fdaa:	d9fa      	bls.n	800fda2 <_free_r+0x46>
 800fdac:	6811      	ldr	r1, [r2, #0]
 800fdae:	1855      	adds	r5, r2, r1
 800fdb0:	42a5      	cmp	r5, r4
 800fdb2:	d10b      	bne.n	800fdcc <_free_r+0x70>
 800fdb4:	6824      	ldr	r4, [r4, #0]
 800fdb6:	4421      	add	r1, r4
 800fdb8:	1854      	adds	r4, r2, r1
 800fdba:	42a3      	cmp	r3, r4
 800fdbc:	6011      	str	r1, [r2, #0]
 800fdbe:	d1e0      	bne.n	800fd82 <_free_r+0x26>
 800fdc0:	681c      	ldr	r4, [r3, #0]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	6053      	str	r3, [r2, #4]
 800fdc6:	4421      	add	r1, r4
 800fdc8:	6011      	str	r1, [r2, #0]
 800fdca:	e7da      	b.n	800fd82 <_free_r+0x26>
 800fdcc:	d902      	bls.n	800fdd4 <_free_r+0x78>
 800fdce:	230c      	movs	r3, #12
 800fdd0:	6003      	str	r3, [r0, #0]
 800fdd2:	e7d6      	b.n	800fd82 <_free_r+0x26>
 800fdd4:	6825      	ldr	r5, [r4, #0]
 800fdd6:	1961      	adds	r1, r4, r5
 800fdd8:	428b      	cmp	r3, r1
 800fdda:	bf04      	itt	eq
 800fddc:	6819      	ldreq	r1, [r3, #0]
 800fdde:	685b      	ldreq	r3, [r3, #4]
 800fde0:	6063      	str	r3, [r4, #4]
 800fde2:	bf04      	itt	eq
 800fde4:	1949      	addeq	r1, r1, r5
 800fde6:	6021      	streq	r1, [r4, #0]
 800fde8:	6054      	str	r4, [r2, #4]
 800fdea:	e7ca      	b.n	800fd82 <_free_r+0x26>
 800fdec:	b003      	add	sp, #12
 800fdee:	bd30      	pop	{r4, r5, pc}
 800fdf0:	24002000 	.word	0x24002000

0800fdf4 <sbrk_aligned>:
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	4e0e      	ldr	r6, [pc, #56]	; (800fe30 <sbrk_aligned+0x3c>)
 800fdf8:	460c      	mov	r4, r1
 800fdfa:	6831      	ldr	r1, [r6, #0]
 800fdfc:	4605      	mov	r5, r0
 800fdfe:	b911      	cbnz	r1, 800fe06 <sbrk_aligned+0x12>
 800fe00:	f000 fcd0 	bl	80107a4 <_sbrk_r>
 800fe04:	6030      	str	r0, [r6, #0]
 800fe06:	4621      	mov	r1, r4
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f000 fccb 	bl	80107a4 <_sbrk_r>
 800fe0e:	1c43      	adds	r3, r0, #1
 800fe10:	d00a      	beq.n	800fe28 <sbrk_aligned+0x34>
 800fe12:	1cc4      	adds	r4, r0, #3
 800fe14:	f024 0403 	bic.w	r4, r4, #3
 800fe18:	42a0      	cmp	r0, r4
 800fe1a:	d007      	beq.n	800fe2c <sbrk_aligned+0x38>
 800fe1c:	1a21      	subs	r1, r4, r0
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f000 fcc0 	bl	80107a4 <_sbrk_r>
 800fe24:	3001      	adds	r0, #1
 800fe26:	d101      	bne.n	800fe2c <sbrk_aligned+0x38>
 800fe28:	f04f 34ff 	mov.w	r4, #4294967295
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	bd70      	pop	{r4, r5, r6, pc}
 800fe30:	24002004 	.word	0x24002004

0800fe34 <_malloc_r>:
 800fe34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe38:	1ccd      	adds	r5, r1, #3
 800fe3a:	f025 0503 	bic.w	r5, r5, #3
 800fe3e:	3508      	adds	r5, #8
 800fe40:	2d0c      	cmp	r5, #12
 800fe42:	bf38      	it	cc
 800fe44:	250c      	movcc	r5, #12
 800fe46:	2d00      	cmp	r5, #0
 800fe48:	4607      	mov	r7, r0
 800fe4a:	db01      	blt.n	800fe50 <_malloc_r+0x1c>
 800fe4c:	42a9      	cmp	r1, r5
 800fe4e:	d905      	bls.n	800fe5c <_malloc_r+0x28>
 800fe50:	230c      	movs	r3, #12
 800fe52:	603b      	str	r3, [r7, #0]
 800fe54:	2600      	movs	r6, #0
 800fe56:	4630      	mov	r0, r6
 800fe58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe5c:	4e2e      	ldr	r6, [pc, #184]	; (800ff18 <_malloc_r+0xe4>)
 800fe5e:	f001 fabf 	bl	80113e0 <__malloc_lock>
 800fe62:	6833      	ldr	r3, [r6, #0]
 800fe64:	461c      	mov	r4, r3
 800fe66:	bb34      	cbnz	r4, 800feb6 <_malloc_r+0x82>
 800fe68:	4629      	mov	r1, r5
 800fe6a:	4638      	mov	r0, r7
 800fe6c:	f7ff ffc2 	bl	800fdf4 <sbrk_aligned>
 800fe70:	1c43      	adds	r3, r0, #1
 800fe72:	4604      	mov	r4, r0
 800fe74:	d14d      	bne.n	800ff12 <_malloc_r+0xde>
 800fe76:	6834      	ldr	r4, [r6, #0]
 800fe78:	4626      	mov	r6, r4
 800fe7a:	2e00      	cmp	r6, #0
 800fe7c:	d140      	bne.n	800ff00 <_malloc_r+0xcc>
 800fe7e:	6823      	ldr	r3, [r4, #0]
 800fe80:	4631      	mov	r1, r6
 800fe82:	4638      	mov	r0, r7
 800fe84:	eb04 0803 	add.w	r8, r4, r3
 800fe88:	f000 fc8c 	bl	80107a4 <_sbrk_r>
 800fe8c:	4580      	cmp	r8, r0
 800fe8e:	d13a      	bne.n	800ff06 <_malloc_r+0xd2>
 800fe90:	6821      	ldr	r1, [r4, #0]
 800fe92:	3503      	adds	r5, #3
 800fe94:	1a6d      	subs	r5, r5, r1
 800fe96:	f025 0503 	bic.w	r5, r5, #3
 800fe9a:	3508      	adds	r5, #8
 800fe9c:	2d0c      	cmp	r5, #12
 800fe9e:	bf38      	it	cc
 800fea0:	250c      	movcc	r5, #12
 800fea2:	4629      	mov	r1, r5
 800fea4:	4638      	mov	r0, r7
 800fea6:	f7ff ffa5 	bl	800fdf4 <sbrk_aligned>
 800feaa:	3001      	adds	r0, #1
 800feac:	d02b      	beq.n	800ff06 <_malloc_r+0xd2>
 800feae:	6823      	ldr	r3, [r4, #0]
 800feb0:	442b      	add	r3, r5
 800feb2:	6023      	str	r3, [r4, #0]
 800feb4:	e00e      	b.n	800fed4 <_malloc_r+0xa0>
 800feb6:	6822      	ldr	r2, [r4, #0]
 800feb8:	1b52      	subs	r2, r2, r5
 800feba:	d41e      	bmi.n	800fefa <_malloc_r+0xc6>
 800febc:	2a0b      	cmp	r2, #11
 800febe:	d916      	bls.n	800feee <_malloc_r+0xba>
 800fec0:	1961      	adds	r1, r4, r5
 800fec2:	42a3      	cmp	r3, r4
 800fec4:	6025      	str	r5, [r4, #0]
 800fec6:	bf18      	it	ne
 800fec8:	6059      	strne	r1, [r3, #4]
 800feca:	6863      	ldr	r3, [r4, #4]
 800fecc:	bf08      	it	eq
 800fece:	6031      	streq	r1, [r6, #0]
 800fed0:	5162      	str	r2, [r4, r5]
 800fed2:	604b      	str	r3, [r1, #4]
 800fed4:	4638      	mov	r0, r7
 800fed6:	f104 060b 	add.w	r6, r4, #11
 800feda:	f001 fa87 	bl	80113ec <__malloc_unlock>
 800fede:	f026 0607 	bic.w	r6, r6, #7
 800fee2:	1d23      	adds	r3, r4, #4
 800fee4:	1af2      	subs	r2, r6, r3
 800fee6:	d0b6      	beq.n	800fe56 <_malloc_r+0x22>
 800fee8:	1b9b      	subs	r3, r3, r6
 800feea:	50a3      	str	r3, [r4, r2]
 800feec:	e7b3      	b.n	800fe56 <_malloc_r+0x22>
 800feee:	6862      	ldr	r2, [r4, #4]
 800fef0:	42a3      	cmp	r3, r4
 800fef2:	bf0c      	ite	eq
 800fef4:	6032      	streq	r2, [r6, #0]
 800fef6:	605a      	strne	r2, [r3, #4]
 800fef8:	e7ec      	b.n	800fed4 <_malloc_r+0xa0>
 800fefa:	4623      	mov	r3, r4
 800fefc:	6864      	ldr	r4, [r4, #4]
 800fefe:	e7b2      	b.n	800fe66 <_malloc_r+0x32>
 800ff00:	4634      	mov	r4, r6
 800ff02:	6876      	ldr	r6, [r6, #4]
 800ff04:	e7b9      	b.n	800fe7a <_malloc_r+0x46>
 800ff06:	230c      	movs	r3, #12
 800ff08:	603b      	str	r3, [r7, #0]
 800ff0a:	4638      	mov	r0, r7
 800ff0c:	f001 fa6e 	bl	80113ec <__malloc_unlock>
 800ff10:	e7a1      	b.n	800fe56 <_malloc_r+0x22>
 800ff12:	6025      	str	r5, [r4, #0]
 800ff14:	e7de      	b.n	800fed4 <_malloc_r+0xa0>
 800ff16:	bf00      	nop
 800ff18:	24002000 	.word	0x24002000

0800ff1c <__cvt>:
 800ff1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff1e:	ed2d 8b02 	vpush	{d8}
 800ff22:	eeb0 8b40 	vmov.f64	d8, d0
 800ff26:	b085      	sub	sp, #20
 800ff28:	4617      	mov	r7, r2
 800ff2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ff2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ff2e:	ee18 2a90 	vmov	r2, s17
 800ff32:	f025 0520 	bic.w	r5, r5, #32
 800ff36:	2a00      	cmp	r2, #0
 800ff38:	bfb6      	itet	lt
 800ff3a:	222d      	movlt	r2, #45	; 0x2d
 800ff3c:	2200      	movge	r2, #0
 800ff3e:	eeb1 8b40 	vneglt.f64	d8, d0
 800ff42:	2d46      	cmp	r5, #70	; 0x46
 800ff44:	460c      	mov	r4, r1
 800ff46:	701a      	strb	r2, [r3, #0]
 800ff48:	d004      	beq.n	800ff54 <__cvt+0x38>
 800ff4a:	2d45      	cmp	r5, #69	; 0x45
 800ff4c:	d100      	bne.n	800ff50 <__cvt+0x34>
 800ff4e:	3401      	adds	r4, #1
 800ff50:	2102      	movs	r1, #2
 800ff52:	e000      	b.n	800ff56 <__cvt+0x3a>
 800ff54:	2103      	movs	r1, #3
 800ff56:	ab03      	add	r3, sp, #12
 800ff58:	9301      	str	r3, [sp, #4]
 800ff5a:	ab02      	add	r3, sp, #8
 800ff5c:	9300      	str	r3, [sp, #0]
 800ff5e:	4622      	mov	r2, r4
 800ff60:	4633      	mov	r3, r6
 800ff62:	eeb0 0b48 	vmov.f64	d0, d8
 800ff66:	f000 fcbb 	bl	80108e0 <_dtoa_r>
 800ff6a:	2d47      	cmp	r5, #71	; 0x47
 800ff6c:	d101      	bne.n	800ff72 <__cvt+0x56>
 800ff6e:	07fb      	lsls	r3, r7, #31
 800ff70:	d51a      	bpl.n	800ffa8 <__cvt+0x8c>
 800ff72:	2d46      	cmp	r5, #70	; 0x46
 800ff74:	eb00 0204 	add.w	r2, r0, r4
 800ff78:	d10c      	bne.n	800ff94 <__cvt+0x78>
 800ff7a:	7803      	ldrb	r3, [r0, #0]
 800ff7c:	2b30      	cmp	r3, #48	; 0x30
 800ff7e:	d107      	bne.n	800ff90 <__cvt+0x74>
 800ff80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ff84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff88:	bf1c      	itt	ne
 800ff8a:	f1c4 0401 	rsbne	r4, r4, #1
 800ff8e:	6034      	strne	r4, [r6, #0]
 800ff90:	6833      	ldr	r3, [r6, #0]
 800ff92:	441a      	add	r2, r3
 800ff94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ff98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9c:	bf08      	it	eq
 800ff9e:	9203      	streq	r2, [sp, #12]
 800ffa0:	2130      	movs	r1, #48	; 0x30
 800ffa2:	9b03      	ldr	r3, [sp, #12]
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d307      	bcc.n	800ffb8 <__cvt+0x9c>
 800ffa8:	9b03      	ldr	r3, [sp, #12]
 800ffaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffac:	1a1b      	subs	r3, r3, r0
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	b005      	add	sp, #20
 800ffb2:	ecbd 8b02 	vpop	{d8}
 800ffb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffb8:	1c5c      	adds	r4, r3, #1
 800ffba:	9403      	str	r4, [sp, #12]
 800ffbc:	7019      	strb	r1, [r3, #0]
 800ffbe:	e7f0      	b.n	800ffa2 <__cvt+0x86>

0800ffc0 <__exponent>:
 800ffc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2900      	cmp	r1, #0
 800ffc6:	bfb8      	it	lt
 800ffc8:	4249      	neglt	r1, r1
 800ffca:	f803 2b02 	strb.w	r2, [r3], #2
 800ffce:	bfb4      	ite	lt
 800ffd0:	222d      	movlt	r2, #45	; 0x2d
 800ffd2:	222b      	movge	r2, #43	; 0x2b
 800ffd4:	2909      	cmp	r1, #9
 800ffd6:	7042      	strb	r2, [r0, #1]
 800ffd8:	dd2a      	ble.n	8010030 <__exponent+0x70>
 800ffda:	f10d 0407 	add.w	r4, sp, #7
 800ffde:	46a4      	mov	ip, r4
 800ffe0:	270a      	movs	r7, #10
 800ffe2:	46a6      	mov	lr, r4
 800ffe4:	460a      	mov	r2, r1
 800ffe6:	fb91 f6f7 	sdiv	r6, r1, r7
 800ffea:	fb07 1516 	mls	r5, r7, r6, r1
 800ffee:	3530      	adds	r5, #48	; 0x30
 800fff0:	2a63      	cmp	r2, #99	; 0x63
 800fff2:	f104 34ff 	add.w	r4, r4, #4294967295
 800fff6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fffa:	4631      	mov	r1, r6
 800fffc:	dcf1      	bgt.n	800ffe2 <__exponent+0x22>
 800fffe:	3130      	adds	r1, #48	; 0x30
 8010000:	f1ae 0502 	sub.w	r5, lr, #2
 8010004:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010008:	1c44      	adds	r4, r0, #1
 801000a:	4629      	mov	r1, r5
 801000c:	4561      	cmp	r1, ip
 801000e:	d30a      	bcc.n	8010026 <__exponent+0x66>
 8010010:	f10d 0209 	add.w	r2, sp, #9
 8010014:	eba2 020e 	sub.w	r2, r2, lr
 8010018:	4565      	cmp	r5, ip
 801001a:	bf88      	it	hi
 801001c:	2200      	movhi	r2, #0
 801001e:	4413      	add	r3, r2
 8010020:	1a18      	subs	r0, r3, r0
 8010022:	b003      	add	sp, #12
 8010024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010026:	f811 2b01 	ldrb.w	r2, [r1], #1
 801002a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801002e:	e7ed      	b.n	801000c <__exponent+0x4c>
 8010030:	2330      	movs	r3, #48	; 0x30
 8010032:	3130      	adds	r1, #48	; 0x30
 8010034:	7083      	strb	r3, [r0, #2]
 8010036:	70c1      	strb	r1, [r0, #3]
 8010038:	1d03      	adds	r3, r0, #4
 801003a:	e7f1      	b.n	8010020 <__exponent+0x60>
 801003c:	0000      	movs	r0, r0
	...

08010040 <_printf_float>:
 8010040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010044:	b08b      	sub	sp, #44	; 0x2c
 8010046:	460c      	mov	r4, r1
 8010048:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801004c:	4616      	mov	r6, r2
 801004e:	461f      	mov	r7, r3
 8010050:	4605      	mov	r5, r0
 8010052:	f001 f9b3 	bl	80113bc <_localeconv_r>
 8010056:	f8d0 b000 	ldr.w	fp, [r0]
 801005a:	4658      	mov	r0, fp
 801005c:	f7f0 f940 	bl	80002e0 <strlen>
 8010060:	2300      	movs	r3, #0
 8010062:	9308      	str	r3, [sp, #32]
 8010064:	f8d8 3000 	ldr.w	r3, [r8]
 8010068:	f894 9018 	ldrb.w	r9, [r4, #24]
 801006c:	6822      	ldr	r2, [r4, #0]
 801006e:	3307      	adds	r3, #7
 8010070:	f023 0307 	bic.w	r3, r3, #7
 8010074:	f103 0108 	add.w	r1, r3, #8
 8010078:	f8c8 1000 	str.w	r1, [r8]
 801007c:	4682      	mov	sl, r0
 801007e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010082:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010086:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80102e8 <_printf_float+0x2a8>
 801008a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801008e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010092:	eeb4 6b47 	vcmp.f64	d6, d7
 8010096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801009a:	dd24      	ble.n	80100e6 <_printf_float+0xa6>
 801009c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80100a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a4:	d502      	bpl.n	80100ac <_printf_float+0x6c>
 80100a6:	232d      	movs	r3, #45	; 0x2d
 80100a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100ac:	4b90      	ldr	r3, [pc, #576]	; (80102f0 <_printf_float+0x2b0>)
 80100ae:	4891      	ldr	r0, [pc, #580]	; (80102f4 <_printf_float+0x2b4>)
 80100b0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80100b4:	bf94      	ite	ls
 80100b6:	4698      	movls	r8, r3
 80100b8:	4680      	movhi	r8, r0
 80100ba:	2303      	movs	r3, #3
 80100bc:	6123      	str	r3, [r4, #16]
 80100be:	f022 0204 	bic.w	r2, r2, #4
 80100c2:	2300      	movs	r3, #0
 80100c4:	6022      	str	r2, [r4, #0]
 80100c6:	9304      	str	r3, [sp, #16]
 80100c8:	9700      	str	r7, [sp, #0]
 80100ca:	4633      	mov	r3, r6
 80100cc:	aa09      	add	r2, sp, #36	; 0x24
 80100ce:	4621      	mov	r1, r4
 80100d0:	4628      	mov	r0, r5
 80100d2:	f000 f9d3 	bl	801047c <_printf_common>
 80100d6:	3001      	adds	r0, #1
 80100d8:	f040 808a 	bne.w	80101f0 <_printf_float+0x1b0>
 80100dc:	f04f 30ff 	mov.w	r0, #4294967295
 80100e0:	b00b      	add	sp, #44	; 0x2c
 80100e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e6:	eeb4 0b40 	vcmp.f64	d0, d0
 80100ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ee:	d709      	bvc.n	8010104 <_printf_float+0xc4>
 80100f0:	ee10 3a90 	vmov	r3, s1
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	bfbc      	itt	lt
 80100f8:	232d      	movlt	r3, #45	; 0x2d
 80100fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80100fe:	487e      	ldr	r0, [pc, #504]	; (80102f8 <_printf_float+0x2b8>)
 8010100:	4b7e      	ldr	r3, [pc, #504]	; (80102fc <_printf_float+0x2bc>)
 8010102:	e7d5      	b.n	80100b0 <_printf_float+0x70>
 8010104:	6863      	ldr	r3, [r4, #4]
 8010106:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801010a:	9104      	str	r1, [sp, #16]
 801010c:	1c59      	adds	r1, r3, #1
 801010e:	d13c      	bne.n	801018a <_printf_float+0x14a>
 8010110:	2306      	movs	r3, #6
 8010112:	6063      	str	r3, [r4, #4]
 8010114:	2300      	movs	r3, #0
 8010116:	9303      	str	r3, [sp, #12]
 8010118:	ab08      	add	r3, sp, #32
 801011a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801011e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010122:	ab07      	add	r3, sp, #28
 8010124:	6861      	ldr	r1, [r4, #4]
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	6022      	str	r2, [r4, #0]
 801012a:	f10d 031b 	add.w	r3, sp, #27
 801012e:	4628      	mov	r0, r5
 8010130:	f7ff fef4 	bl	800ff1c <__cvt>
 8010134:	9b04      	ldr	r3, [sp, #16]
 8010136:	9907      	ldr	r1, [sp, #28]
 8010138:	2b47      	cmp	r3, #71	; 0x47
 801013a:	4680      	mov	r8, r0
 801013c:	d108      	bne.n	8010150 <_printf_float+0x110>
 801013e:	1cc8      	adds	r0, r1, #3
 8010140:	db02      	blt.n	8010148 <_printf_float+0x108>
 8010142:	6863      	ldr	r3, [r4, #4]
 8010144:	4299      	cmp	r1, r3
 8010146:	dd41      	ble.n	80101cc <_printf_float+0x18c>
 8010148:	f1a9 0902 	sub.w	r9, r9, #2
 801014c:	fa5f f989 	uxtb.w	r9, r9
 8010150:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010154:	d820      	bhi.n	8010198 <_printf_float+0x158>
 8010156:	3901      	subs	r1, #1
 8010158:	464a      	mov	r2, r9
 801015a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801015e:	9107      	str	r1, [sp, #28]
 8010160:	f7ff ff2e 	bl	800ffc0 <__exponent>
 8010164:	9a08      	ldr	r2, [sp, #32]
 8010166:	9004      	str	r0, [sp, #16]
 8010168:	1813      	adds	r3, r2, r0
 801016a:	2a01      	cmp	r2, #1
 801016c:	6123      	str	r3, [r4, #16]
 801016e:	dc02      	bgt.n	8010176 <_printf_float+0x136>
 8010170:	6822      	ldr	r2, [r4, #0]
 8010172:	07d2      	lsls	r2, r2, #31
 8010174:	d501      	bpl.n	801017a <_printf_float+0x13a>
 8010176:	3301      	adds	r3, #1
 8010178:	6123      	str	r3, [r4, #16]
 801017a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d0a2      	beq.n	80100c8 <_printf_float+0x88>
 8010182:	232d      	movs	r3, #45	; 0x2d
 8010184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010188:	e79e      	b.n	80100c8 <_printf_float+0x88>
 801018a:	9904      	ldr	r1, [sp, #16]
 801018c:	2947      	cmp	r1, #71	; 0x47
 801018e:	d1c1      	bne.n	8010114 <_printf_float+0xd4>
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1bf      	bne.n	8010114 <_printf_float+0xd4>
 8010194:	2301      	movs	r3, #1
 8010196:	e7bc      	b.n	8010112 <_printf_float+0xd2>
 8010198:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801019c:	d118      	bne.n	80101d0 <_printf_float+0x190>
 801019e:	2900      	cmp	r1, #0
 80101a0:	6863      	ldr	r3, [r4, #4]
 80101a2:	dd0b      	ble.n	80101bc <_printf_float+0x17c>
 80101a4:	6121      	str	r1, [r4, #16]
 80101a6:	b913      	cbnz	r3, 80101ae <_printf_float+0x16e>
 80101a8:	6822      	ldr	r2, [r4, #0]
 80101aa:	07d0      	lsls	r0, r2, #31
 80101ac:	d502      	bpl.n	80101b4 <_printf_float+0x174>
 80101ae:	3301      	adds	r3, #1
 80101b0:	440b      	add	r3, r1
 80101b2:	6123      	str	r3, [r4, #16]
 80101b4:	2300      	movs	r3, #0
 80101b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80101b8:	9304      	str	r3, [sp, #16]
 80101ba:	e7de      	b.n	801017a <_printf_float+0x13a>
 80101bc:	b913      	cbnz	r3, 80101c4 <_printf_float+0x184>
 80101be:	6822      	ldr	r2, [r4, #0]
 80101c0:	07d2      	lsls	r2, r2, #31
 80101c2:	d501      	bpl.n	80101c8 <_printf_float+0x188>
 80101c4:	3302      	adds	r3, #2
 80101c6:	e7f4      	b.n	80101b2 <_printf_float+0x172>
 80101c8:	2301      	movs	r3, #1
 80101ca:	e7f2      	b.n	80101b2 <_printf_float+0x172>
 80101cc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80101d0:	9b08      	ldr	r3, [sp, #32]
 80101d2:	4299      	cmp	r1, r3
 80101d4:	db05      	blt.n	80101e2 <_printf_float+0x1a2>
 80101d6:	6823      	ldr	r3, [r4, #0]
 80101d8:	6121      	str	r1, [r4, #16]
 80101da:	07d8      	lsls	r0, r3, #31
 80101dc:	d5ea      	bpl.n	80101b4 <_printf_float+0x174>
 80101de:	1c4b      	adds	r3, r1, #1
 80101e0:	e7e7      	b.n	80101b2 <_printf_float+0x172>
 80101e2:	2900      	cmp	r1, #0
 80101e4:	bfd4      	ite	le
 80101e6:	f1c1 0202 	rsble	r2, r1, #2
 80101ea:	2201      	movgt	r2, #1
 80101ec:	4413      	add	r3, r2
 80101ee:	e7e0      	b.n	80101b2 <_printf_float+0x172>
 80101f0:	6823      	ldr	r3, [r4, #0]
 80101f2:	055a      	lsls	r2, r3, #21
 80101f4:	d407      	bmi.n	8010206 <_printf_float+0x1c6>
 80101f6:	6923      	ldr	r3, [r4, #16]
 80101f8:	4642      	mov	r2, r8
 80101fa:	4631      	mov	r1, r6
 80101fc:	4628      	mov	r0, r5
 80101fe:	47b8      	blx	r7
 8010200:	3001      	adds	r0, #1
 8010202:	d12a      	bne.n	801025a <_printf_float+0x21a>
 8010204:	e76a      	b.n	80100dc <_printf_float+0x9c>
 8010206:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801020a:	f240 80e2 	bls.w	80103d2 <_printf_float+0x392>
 801020e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010212:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021a:	d133      	bne.n	8010284 <_printf_float+0x244>
 801021c:	4a38      	ldr	r2, [pc, #224]	; (8010300 <_printf_float+0x2c0>)
 801021e:	2301      	movs	r3, #1
 8010220:	4631      	mov	r1, r6
 8010222:	4628      	mov	r0, r5
 8010224:	47b8      	blx	r7
 8010226:	3001      	adds	r0, #1
 8010228:	f43f af58 	beq.w	80100dc <_printf_float+0x9c>
 801022c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010230:	429a      	cmp	r2, r3
 8010232:	db02      	blt.n	801023a <_printf_float+0x1fa>
 8010234:	6823      	ldr	r3, [r4, #0]
 8010236:	07d8      	lsls	r0, r3, #31
 8010238:	d50f      	bpl.n	801025a <_printf_float+0x21a>
 801023a:	4653      	mov	r3, sl
 801023c:	465a      	mov	r2, fp
 801023e:	4631      	mov	r1, r6
 8010240:	4628      	mov	r0, r5
 8010242:	47b8      	blx	r7
 8010244:	3001      	adds	r0, #1
 8010246:	f43f af49 	beq.w	80100dc <_printf_float+0x9c>
 801024a:	f04f 0800 	mov.w	r8, #0
 801024e:	f104 091a 	add.w	r9, r4, #26
 8010252:	9b08      	ldr	r3, [sp, #32]
 8010254:	3b01      	subs	r3, #1
 8010256:	4543      	cmp	r3, r8
 8010258:	dc09      	bgt.n	801026e <_printf_float+0x22e>
 801025a:	6823      	ldr	r3, [r4, #0]
 801025c:	079b      	lsls	r3, r3, #30
 801025e:	f100 8108 	bmi.w	8010472 <_printf_float+0x432>
 8010262:	68e0      	ldr	r0, [r4, #12]
 8010264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010266:	4298      	cmp	r0, r3
 8010268:	bfb8      	it	lt
 801026a:	4618      	movlt	r0, r3
 801026c:	e738      	b.n	80100e0 <_printf_float+0xa0>
 801026e:	2301      	movs	r3, #1
 8010270:	464a      	mov	r2, r9
 8010272:	4631      	mov	r1, r6
 8010274:	4628      	mov	r0, r5
 8010276:	47b8      	blx	r7
 8010278:	3001      	adds	r0, #1
 801027a:	f43f af2f 	beq.w	80100dc <_printf_float+0x9c>
 801027e:	f108 0801 	add.w	r8, r8, #1
 8010282:	e7e6      	b.n	8010252 <_printf_float+0x212>
 8010284:	9b07      	ldr	r3, [sp, #28]
 8010286:	2b00      	cmp	r3, #0
 8010288:	dc3c      	bgt.n	8010304 <_printf_float+0x2c4>
 801028a:	4a1d      	ldr	r2, [pc, #116]	; (8010300 <_printf_float+0x2c0>)
 801028c:	2301      	movs	r3, #1
 801028e:	4631      	mov	r1, r6
 8010290:	4628      	mov	r0, r5
 8010292:	47b8      	blx	r7
 8010294:	3001      	adds	r0, #1
 8010296:	f43f af21 	beq.w	80100dc <_printf_float+0x9c>
 801029a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801029e:	4313      	orrs	r3, r2
 80102a0:	d102      	bne.n	80102a8 <_printf_float+0x268>
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	07d9      	lsls	r1, r3, #31
 80102a6:	d5d8      	bpl.n	801025a <_printf_float+0x21a>
 80102a8:	4653      	mov	r3, sl
 80102aa:	465a      	mov	r2, fp
 80102ac:	4631      	mov	r1, r6
 80102ae:	4628      	mov	r0, r5
 80102b0:	47b8      	blx	r7
 80102b2:	3001      	adds	r0, #1
 80102b4:	f43f af12 	beq.w	80100dc <_printf_float+0x9c>
 80102b8:	f04f 0900 	mov.w	r9, #0
 80102bc:	f104 0a1a 	add.w	sl, r4, #26
 80102c0:	9b07      	ldr	r3, [sp, #28]
 80102c2:	425b      	negs	r3, r3
 80102c4:	454b      	cmp	r3, r9
 80102c6:	dc01      	bgt.n	80102cc <_printf_float+0x28c>
 80102c8:	9b08      	ldr	r3, [sp, #32]
 80102ca:	e795      	b.n	80101f8 <_printf_float+0x1b8>
 80102cc:	2301      	movs	r3, #1
 80102ce:	4652      	mov	r2, sl
 80102d0:	4631      	mov	r1, r6
 80102d2:	4628      	mov	r0, r5
 80102d4:	47b8      	blx	r7
 80102d6:	3001      	adds	r0, #1
 80102d8:	f43f af00 	beq.w	80100dc <_printf_float+0x9c>
 80102dc:	f109 0901 	add.w	r9, r9, #1
 80102e0:	e7ee      	b.n	80102c0 <_printf_float+0x280>
 80102e2:	bf00      	nop
 80102e4:	f3af 8000 	nop.w
 80102e8:	ffffffff 	.word	0xffffffff
 80102ec:	7fefffff 	.word	0x7fefffff
 80102f0:	080126d4 	.word	0x080126d4
 80102f4:	080126d8 	.word	0x080126d8
 80102f8:	080126e0 	.word	0x080126e0
 80102fc:	080126dc 	.word	0x080126dc
 8010300:	080126e4 	.word	0x080126e4
 8010304:	9a08      	ldr	r2, [sp, #32]
 8010306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010308:	429a      	cmp	r2, r3
 801030a:	bfa8      	it	ge
 801030c:	461a      	movge	r2, r3
 801030e:	2a00      	cmp	r2, #0
 8010310:	4691      	mov	r9, r2
 8010312:	dc38      	bgt.n	8010386 <_printf_float+0x346>
 8010314:	2300      	movs	r3, #0
 8010316:	9305      	str	r3, [sp, #20]
 8010318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801031c:	f104 021a 	add.w	r2, r4, #26
 8010320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010322:	9905      	ldr	r1, [sp, #20]
 8010324:	9304      	str	r3, [sp, #16]
 8010326:	eba3 0309 	sub.w	r3, r3, r9
 801032a:	428b      	cmp	r3, r1
 801032c:	dc33      	bgt.n	8010396 <_printf_float+0x356>
 801032e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010332:	429a      	cmp	r2, r3
 8010334:	db3c      	blt.n	80103b0 <_printf_float+0x370>
 8010336:	6823      	ldr	r3, [r4, #0]
 8010338:	07da      	lsls	r2, r3, #31
 801033a:	d439      	bmi.n	80103b0 <_printf_float+0x370>
 801033c:	9b08      	ldr	r3, [sp, #32]
 801033e:	9a04      	ldr	r2, [sp, #16]
 8010340:	9907      	ldr	r1, [sp, #28]
 8010342:	1a9a      	subs	r2, r3, r2
 8010344:	eba3 0901 	sub.w	r9, r3, r1
 8010348:	4591      	cmp	r9, r2
 801034a:	bfa8      	it	ge
 801034c:	4691      	movge	r9, r2
 801034e:	f1b9 0f00 	cmp.w	r9, #0
 8010352:	dc35      	bgt.n	80103c0 <_printf_float+0x380>
 8010354:	f04f 0800 	mov.w	r8, #0
 8010358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801035c:	f104 0a1a 	add.w	sl, r4, #26
 8010360:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010364:	1a9b      	subs	r3, r3, r2
 8010366:	eba3 0309 	sub.w	r3, r3, r9
 801036a:	4543      	cmp	r3, r8
 801036c:	f77f af75 	ble.w	801025a <_printf_float+0x21a>
 8010370:	2301      	movs	r3, #1
 8010372:	4652      	mov	r2, sl
 8010374:	4631      	mov	r1, r6
 8010376:	4628      	mov	r0, r5
 8010378:	47b8      	blx	r7
 801037a:	3001      	adds	r0, #1
 801037c:	f43f aeae 	beq.w	80100dc <_printf_float+0x9c>
 8010380:	f108 0801 	add.w	r8, r8, #1
 8010384:	e7ec      	b.n	8010360 <_printf_float+0x320>
 8010386:	4613      	mov	r3, r2
 8010388:	4631      	mov	r1, r6
 801038a:	4642      	mov	r2, r8
 801038c:	4628      	mov	r0, r5
 801038e:	47b8      	blx	r7
 8010390:	3001      	adds	r0, #1
 8010392:	d1bf      	bne.n	8010314 <_printf_float+0x2d4>
 8010394:	e6a2      	b.n	80100dc <_printf_float+0x9c>
 8010396:	2301      	movs	r3, #1
 8010398:	4631      	mov	r1, r6
 801039a:	4628      	mov	r0, r5
 801039c:	9204      	str	r2, [sp, #16]
 801039e:	47b8      	blx	r7
 80103a0:	3001      	adds	r0, #1
 80103a2:	f43f ae9b 	beq.w	80100dc <_printf_float+0x9c>
 80103a6:	9b05      	ldr	r3, [sp, #20]
 80103a8:	9a04      	ldr	r2, [sp, #16]
 80103aa:	3301      	adds	r3, #1
 80103ac:	9305      	str	r3, [sp, #20]
 80103ae:	e7b7      	b.n	8010320 <_printf_float+0x2e0>
 80103b0:	4653      	mov	r3, sl
 80103b2:	465a      	mov	r2, fp
 80103b4:	4631      	mov	r1, r6
 80103b6:	4628      	mov	r0, r5
 80103b8:	47b8      	blx	r7
 80103ba:	3001      	adds	r0, #1
 80103bc:	d1be      	bne.n	801033c <_printf_float+0x2fc>
 80103be:	e68d      	b.n	80100dc <_printf_float+0x9c>
 80103c0:	9a04      	ldr	r2, [sp, #16]
 80103c2:	464b      	mov	r3, r9
 80103c4:	4442      	add	r2, r8
 80103c6:	4631      	mov	r1, r6
 80103c8:	4628      	mov	r0, r5
 80103ca:	47b8      	blx	r7
 80103cc:	3001      	adds	r0, #1
 80103ce:	d1c1      	bne.n	8010354 <_printf_float+0x314>
 80103d0:	e684      	b.n	80100dc <_printf_float+0x9c>
 80103d2:	9a08      	ldr	r2, [sp, #32]
 80103d4:	2a01      	cmp	r2, #1
 80103d6:	dc01      	bgt.n	80103dc <_printf_float+0x39c>
 80103d8:	07db      	lsls	r3, r3, #31
 80103da:	d537      	bpl.n	801044c <_printf_float+0x40c>
 80103dc:	2301      	movs	r3, #1
 80103de:	4642      	mov	r2, r8
 80103e0:	4631      	mov	r1, r6
 80103e2:	4628      	mov	r0, r5
 80103e4:	47b8      	blx	r7
 80103e6:	3001      	adds	r0, #1
 80103e8:	f43f ae78 	beq.w	80100dc <_printf_float+0x9c>
 80103ec:	4653      	mov	r3, sl
 80103ee:	465a      	mov	r2, fp
 80103f0:	4631      	mov	r1, r6
 80103f2:	4628      	mov	r0, r5
 80103f4:	47b8      	blx	r7
 80103f6:	3001      	adds	r0, #1
 80103f8:	f43f ae70 	beq.w	80100dc <_printf_float+0x9c>
 80103fc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010400:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010408:	d01b      	beq.n	8010442 <_printf_float+0x402>
 801040a:	9b08      	ldr	r3, [sp, #32]
 801040c:	f108 0201 	add.w	r2, r8, #1
 8010410:	3b01      	subs	r3, #1
 8010412:	4631      	mov	r1, r6
 8010414:	4628      	mov	r0, r5
 8010416:	47b8      	blx	r7
 8010418:	3001      	adds	r0, #1
 801041a:	d10e      	bne.n	801043a <_printf_float+0x3fa>
 801041c:	e65e      	b.n	80100dc <_printf_float+0x9c>
 801041e:	2301      	movs	r3, #1
 8010420:	464a      	mov	r2, r9
 8010422:	4631      	mov	r1, r6
 8010424:	4628      	mov	r0, r5
 8010426:	47b8      	blx	r7
 8010428:	3001      	adds	r0, #1
 801042a:	f43f ae57 	beq.w	80100dc <_printf_float+0x9c>
 801042e:	f108 0801 	add.w	r8, r8, #1
 8010432:	9b08      	ldr	r3, [sp, #32]
 8010434:	3b01      	subs	r3, #1
 8010436:	4543      	cmp	r3, r8
 8010438:	dcf1      	bgt.n	801041e <_printf_float+0x3de>
 801043a:	9b04      	ldr	r3, [sp, #16]
 801043c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010440:	e6db      	b.n	80101fa <_printf_float+0x1ba>
 8010442:	f04f 0800 	mov.w	r8, #0
 8010446:	f104 091a 	add.w	r9, r4, #26
 801044a:	e7f2      	b.n	8010432 <_printf_float+0x3f2>
 801044c:	2301      	movs	r3, #1
 801044e:	4642      	mov	r2, r8
 8010450:	e7df      	b.n	8010412 <_printf_float+0x3d2>
 8010452:	2301      	movs	r3, #1
 8010454:	464a      	mov	r2, r9
 8010456:	4631      	mov	r1, r6
 8010458:	4628      	mov	r0, r5
 801045a:	47b8      	blx	r7
 801045c:	3001      	adds	r0, #1
 801045e:	f43f ae3d 	beq.w	80100dc <_printf_float+0x9c>
 8010462:	f108 0801 	add.w	r8, r8, #1
 8010466:	68e3      	ldr	r3, [r4, #12]
 8010468:	9909      	ldr	r1, [sp, #36]	; 0x24
 801046a:	1a5b      	subs	r3, r3, r1
 801046c:	4543      	cmp	r3, r8
 801046e:	dcf0      	bgt.n	8010452 <_printf_float+0x412>
 8010470:	e6f7      	b.n	8010262 <_printf_float+0x222>
 8010472:	f04f 0800 	mov.w	r8, #0
 8010476:	f104 0919 	add.w	r9, r4, #25
 801047a:	e7f4      	b.n	8010466 <_printf_float+0x426>

0801047c <_printf_common>:
 801047c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010480:	4616      	mov	r6, r2
 8010482:	4699      	mov	r9, r3
 8010484:	688a      	ldr	r2, [r1, #8]
 8010486:	690b      	ldr	r3, [r1, #16]
 8010488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801048c:	4293      	cmp	r3, r2
 801048e:	bfb8      	it	lt
 8010490:	4613      	movlt	r3, r2
 8010492:	6033      	str	r3, [r6, #0]
 8010494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010498:	4607      	mov	r7, r0
 801049a:	460c      	mov	r4, r1
 801049c:	b10a      	cbz	r2, 80104a2 <_printf_common+0x26>
 801049e:	3301      	adds	r3, #1
 80104a0:	6033      	str	r3, [r6, #0]
 80104a2:	6823      	ldr	r3, [r4, #0]
 80104a4:	0699      	lsls	r1, r3, #26
 80104a6:	bf42      	ittt	mi
 80104a8:	6833      	ldrmi	r3, [r6, #0]
 80104aa:	3302      	addmi	r3, #2
 80104ac:	6033      	strmi	r3, [r6, #0]
 80104ae:	6825      	ldr	r5, [r4, #0]
 80104b0:	f015 0506 	ands.w	r5, r5, #6
 80104b4:	d106      	bne.n	80104c4 <_printf_common+0x48>
 80104b6:	f104 0a19 	add.w	sl, r4, #25
 80104ba:	68e3      	ldr	r3, [r4, #12]
 80104bc:	6832      	ldr	r2, [r6, #0]
 80104be:	1a9b      	subs	r3, r3, r2
 80104c0:	42ab      	cmp	r3, r5
 80104c2:	dc26      	bgt.n	8010512 <_printf_common+0x96>
 80104c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104c8:	1e13      	subs	r3, r2, #0
 80104ca:	6822      	ldr	r2, [r4, #0]
 80104cc:	bf18      	it	ne
 80104ce:	2301      	movne	r3, #1
 80104d0:	0692      	lsls	r2, r2, #26
 80104d2:	d42b      	bmi.n	801052c <_printf_common+0xb0>
 80104d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104d8:	4649      	mov	r1, r9
 80104da:	4638      	mov	r0, r7
 80104dc:	47c0      	blx	r8
 80104de:	3001      	adds	r0, #1
 80104e0:	d01e      	beq.n	8010520 <_printf_common+0xa4>
 80104e2:	6823      	ldr	r3, [r4, #0]
 80104e4:	68e5      	ldr	r5, [r4, #12]
 80104e6:	6832      	ldr	r2, [r6, #0]
 80104e8:	f003 0306 	and.w	r3, r3, #6
 80104ec:	2b04      	cmp	r3, #4
 80104ee:	bf08      	it	eq
 80104f0:	1aad      	subeq	r5, r5, r2
 80104f2:	68a3      	ldr	r3, [r4, #8]
 80104f4:	6922      	ldr	r2, [r4, #16]
 80104f6:	bf0c      	ite	eq
 80104f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104fc:	2500      	movne	r5, #0
 80104fe:	4293      	cmp	r3, r2
 8010500:	bfc4      	itt	gt
 8010502:	1a9b      	subgt	r3, r3, r2
 8010504:	18ed      	addgt	r5, r5, r3
 8010506:	2600      	movs	r6, #0
 8010508:	341a      	adds	r4, #26
 801050a:	42b5      	cmp	r5, r6
 801050c:	d11a      	bne.n	8010544 <_printf_common+0xc8>
 801050e:	2000      	movs	r0, #0
 8010510:	e008      	b.n	8010524 <_printf_common+0xa8>
 8010512:	2301      	movs	r3, #1
 8010514:	4652      	mov	r2, sl
 8010516:	4649      	mov	r1, r9
 8010518:	4638      	mov	r0, r7
 801051a:	47c0      	blx	r8
 801051c:	3001      	adds	r0, #1
 801051e:	d103      	bne.n	8010528 <_printf_common+0xac>
 8010520:	f04f 30ff 	mov.w	r0, #4294967295
 8010524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010528:	3501      	adds	r5, #1
 801052a:	e7c6      	b.n	80104ba <_printf_common+0x3e>
 801052c:	18e1      	adds	r1, r4, r3
 801052e:	1c5a      	adds	r2, r3, #1
 8010530:	2030      	movs	r0, #48	; 0x30
 8010532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010536:	4422      	add	r2, r4
 8010538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801053c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010540:	3302      	adds	r3, #2
 8010542:	e7c7      	b.n	80104d4 <_printf_common+0x58>
 8010544:	2301      	movs	r3, #1
 8010546:	4622      	mov	r2, r4
 8010548:	4649      	mov	r1, r9
 801054a:	4638      	mov	r0, r7
 801054c:	47c0      	blx	r8
 801054e:	3001      	adds	r0, #1
 8010550:	d0e6      	beq.n	8010520 <_printf_common+0xa4>
 8010552:	3601      	adds	r6, #1
 8010554:	e7d9      	b.n	801050a <_printf_common+0x8e>
	...

08010558 <_printf_i>:
 8010558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801055c:	7e0f      	ldrb	r7, [r1, #24]
 801055e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010560:	2f78      	cmp	r7, #120	; 0x78
 8010562:	4691      	mov	r9, r2
 8010564:	4680      	mov	r8, r0
 8010566:	460c      	mov	r4, r1
 8010568:	469a      	mov	sl, r3
 801056a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801056e:	d807      	bhi.n	8010580 <_printf_i+0x28>
 8010570:	2f62      	cmp	r7, #98	; 0x62
 8010572:	d80a      	bhi.n	801058a <_printf_i+0x32>
 8010574:	2f00      	cmp	r7, #0
 8010576:	f000 80d8 	beq.w	801072a <_printf_i+0x1d2>
 801057a:	2f58      	cmp	r7, #88	; 0x58
 801057c:	f000 80a3 	beq.w	80106c6 <_printf_i+0x16e>
 8010580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010588:	e03a      	b.n	8010600 <_printf_i+0xa8>
 801058a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801058e:	2b15      	cmp	r3, #21
 8010590:	d8f6      	bhi.n	8010580 <_printf_i+0x28>
 8010592:	a101      	add	r1, pc, #4	; (adr r1, 8010598 <_printf_i+0x40>)
 8010594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010598:	080105f1 	.word	0x080105f1
 801059c:	08010605 	.word	0x08010605
 80105a0:	08010581 	.word	0x08010581
 80105a4:	08010581 	.word	0x08010581
 80105a8:	08010581 	.word	0x08010581
 80105ac:	08010581 	.word	0x08010581
 80105b0:	08010605 	.word	0x08010605
 80105b4:	08010581 	.word	0x08010581
 80105b8:	08010581 	.word	0x08010581
 80105bc:	08010581 	.word	0x08010581
 80105c0:	08010581 	.word	0x08010581
 80105c4:	08010711 	.word	0x08010711
 80105c8:	08010635 	.word	0x08010635
 80105cc:	080106f3 	.word	0x080106f3
 80105d0:	08010581 	.word	0x08010581
 80105d4:	08010581 	.word	0x08010581
 80105d8:	08010733 	.word	0x08010733
 80105dc:	08010581 	.word	0x08010581
 80105e0:	08010635 	.word	0x08010635
 80105e4:	08010581 	.word	0x08010581
 80105e8:	08010581 	.word	0x08010581
 80105ec:	080106fb 	.word	0x080106fb
 80105f0:	682b      	ldr	r3, [r5, #0]
 80105f2:	1d1a      	adds	r2, r3, #4
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	602a      	str	r2, [r5, #0]
 80105f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010600:	2301      	movs	r3, #1
 8010602:	e0a3      	b.n	801074c <_printf_i+0x1f4>
 8010604:	6820      	ldr	r0, [r4, #0]
 8010606:	6829      	ldr	r1, [r5, #0]
 8010608:	0606      	lsls	r6, r0, #24
 801060a:	f101 0304 	add.w	r3, r1, #4
 801060e:	d50a      	bpl.n	8010626 <_printf_i+0xce>
 8010610:	680e      	ldr	r6, [r1, #0]
 8010612:	602b      	str	r3, [r5, #0]
 8010614:	2e00      	cmp	r6, #0
 8010616:	da03      	bge.n	8010620 <_printf_i+0xc8>
 8010618:	232d      	movs	r3, #45	; 0x2d
 801061a:	4276      	negs	r6, r6
 801061c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010620:	485e      	ldr	r0, [pc, #376]	; (801079c <_printf_i+0x244>)
 8010622:	230a      	movs	r3, #10
 8010624:	e019      	b.n	801065a <_printf_i+0x102>
 8010626:	680e      	ldr	r6, [r1, #0]
 8010628:	602b      	str	r3, [r5, #0]
 801062a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801062e:	bf18      	it	ne
 8010630:	b236      	sxthne	r6, r6
 8010632:	e7ef      	b.n	8010614 <_printf_i+0xbc>
 8010634:	682b      	ldr	r3, [r5, #0]
 8010636:	6820      	ldr	r0, [r4, #0]
 8010638:	1d19      	adds	r1, r3, #4
 801063a:	6029      	str	r1, [r5, #0]
 801063c:	0601      	lsls	r1, r0, #24
 801063e:	d501      	bpl.n	8010644 <_printf_i+0xec>
 8010640:	681e      	ldr	r6, [r3, #0]
 8010642:	e002      	b.n	801064a <_printf_i+0xf2>
 8010644:	0646      	lsls	r6, r0, #25
 8010646:	d5fb      	bpl.n	8010640 <_printf_i+0xe8>
 8010648:	881e      	ldrh	r6, [r3, #0]
 801064a:	4854      	ldr	r0, [pc, #336]	; (801079c <_printf_i+0x244>)
 801064c:	2f6f      	cmp	r7, #111	; 0x6f
 801064e:	bf0c      	ite	eq
 8010650:	2308      	moveq	r3, #8
 8010652:	230a      	movne	r3, #10
 8010654:	2100      	movs	r1, #0
 8010656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801065a:	6865      	ldr	r5, [r4, #4]
 801065c:	60a5      	str	r5, [r4, #8]
 801065e:	2d00      	cmp	r5, #0
 8010660:	bfa2      	ittt	ge
 8010662:	6821      	ldrge	r1, [r4, #0]
 8010664:	f021 0104 	bicge.w	r1, r1, #4
 8010668:	6021      	strge	r1, [r4, #0]
 801066a:	b90e      	cbnz	r6, 8010670 <_printf_i+0x118>
 801066c:	2d00      	cmp	r5, #0
 801066e:	d04d      	beq.n	801070c <_printf_i+0x1b4>
 8010670:	4615      	mov	r5, r2
 8010672:	fbb6 f1f3 	udiv	r1, r6, r3
 8010676:	fb03 6711 	mls	r7, r3, r1, r6
 801067a:	5dc7      	ldrb	r7, [r0, r7]
 801067c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010680:	4637      	mov	r7, r6
 8010682:	42bb      	cmp	r3, r7
 8010684:	460e      	mov	r6, r1
 8010686:	d9f4      	bls.n	8010672 <_printf_i+0x11a>
 8010688:	2b08      	cmp	r3, #8
 801068a:	d10b      	bne.n	80106a4 <_printf_i+0x14c>
 801068c:	6823      	ldr	r3, [r4, #0]
 801068e:	07de      	lsls	r6, r3, #31
 8010690:	d508      	bpl.n	80106a4 <_printf_i+0x14c>
 8010692:	6923      	ldr	r3, [r4, #16]
 8010694:	6861      	ldr	r1, [r4, #4]
 8010696:	4299      	cmp	r1, r3
 8010698:	bfde      	ittt	le
 801069a:	2330      	movle	r3, #48	; 0x30
 801069c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106a4:	1b52      	subs	r2, r2, r5
 80106a6:	6122      	str	r2, [r4, #16]
 80106a8:	f8cd a000 	str.w	sl, [sp]
 80106ac:	464b      	mov	r3, r9
 80106ae:	aa03      	add	r2, sp, #12
 80106b0:	4621      	mov	r1, r4
 80106b2:	4640      	mov	r0, r8
 80106b4:	f7ff fee2 	bl	801047c <_printf_common>
 80106b8:	3001      	adds	r0, #1
 80106ba:	d14c      	bne.n	8010756 <_printf_i+0x1fe>
 80106bc:	f04f 30ff 	mov.w	r0, #4294967295
 80106c0:	b004      	add	sp, #16
 80106c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106c6:	4835      	ldr	r0, [pc, #212]	; (801079c <_printf_i+0x244>)
 80106c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80106cc:	6829      	ldr	r1, [r5, #0]
 80106ce:	6823      	ldr	r3, [r4, #0]
 80106d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80106d4:	6029      	str	r1, [r5, #0]
 80106d6:	061d      	lsls	r5, r3, #24
 80106d8:	d514      	bpl.n	8010704 <_printf_i+0x1ac>
 80106da:	07df      	lsls	r7, r3, #31
 80106dc:	bf44      	itt	mi
 80106de:	f043 0320 	orrmi.w	r3, r3, #32
 80106e2:	6023      	strmi	r3, [r4, #0]
 80106e4:	b91e      	cbnz	r6, 80106ee <_printf_i+0x196>
 80106e6:	6823      	ldr	r3, [r4, #0]
 80106e8:	f023 0320 	bic.w	r3, r3, #32
 80106ec:	6023      	str	r3, [r4, #0]
 80106ee:	2310      	movs	r3, #16
 80106f0:	e7b0      	b.n	8010654 <_printf_i+0xfc>
 80106f2:	6823      	ldr	r3, [r4, #0]
 80106f4:	f043 0320 	orr.w	r3, r3, #32
 80106f8:	6023      	str	r3, [r4, #0]
 80106fa:	2378      	movs	r3, #120	; 0x78
 80106fc:	4828      	ldr	r0, [pc, #160]	; (80107a0 <_printf_i+0x248>)
 80106fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010702:	e7e3      	b.n	80106cc <_printf_i+0x174>
 8010704:	0659      	lsls	r1, r3, #25
 8010706:	bf48      	it	mi
 8010708:	b2b6      	uxthmi	r6, r6
 801070a:	e7e6      	b.n	80106da <_printf_i+0x182>
 801070c:	4615      	mov	r5, r2
 801070e:	e7bb      	b.n	8010688 <_printf_i+0x130>
 8010710:	682b      	ldr	r3, [r5, #0]
 8010712:	6826      	ldr	r6, [r4, #0]
 8010714:	6961      	ldr	r1, [r4, #20]
 8010716:	1d18      	adds	r0, r3, #4
 8010718:	6028      	str	r0, [r5, #0]
 801071a:	0635      	lsls	r5, r6, #24
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	d501      	bpl.n	8010724 <_printf_i+0x1cc>
 8010720:	6019      	str	r1, [r3, #0]
 8010722:	e002      	b.n	801072a <_printf_i+0x1d2>
 8010724:	0670      	lsls	r0, r6, #25
 8010726:	d5fb      	bpl.n	8010720 <_printf_i+0x1c8>
 8010728:	8019      	strh	r1, [r3, #0]
 801072a:	2300      	movs	r3, #0
 801072c:	6123      	str	r3, [r4, #16]
 801072e:	4615      	mov	r5, r2
 8010730:	e7ba      	b.n	80106a8 <_printf_i+0x150>
 8010732:	682b      	ldr	r3, [r5, #0]
 8010734:	1d1a      	adds	r2, r3, #4
 8010736:	602a      	str	r2, [r5, #0]
 8010738:	681d      	ldr	r5, [r3, #0]
 801073a:	6862      	ldr	r2, [r4, #4]
 801073c:	2100      	movs	r1, #0
 801073e:	4628      	mov	r0, r5
 8010740:	f7ef fdd6 	bl	80002f0 <memchr>
 8010744:	b108      	cbz	r0, 801074a <_printf_i+0x1f2>
 8010746:	1b40      	subs	r0, r0, r5
 8010748:	6060      	str	r0, [r4, #4]
 801074a:	6863      	ldr	r3, [r4, #4]
 801074c:	6123      	str	r3, [r4, #16]
 801074e:	2300      	movs	r3, #0
 8010750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010754:	e7a8      	b.n	80106a8 <_printf_i+0x150>
 8010756:	6923      	ldr	r3, [r4, #16]
 8010758:	462a      	mov	r2, r5
 801075a:	4649      	mov	r1, r9
 801075c:	4640      	mov	r0, r8
 801075e:	47d0      	blx	sl
 8010760:	3001      	adds	r0, #1
 8010762:	d0ab      	beq.n	80106bc <_printf_i+0x164>
 8010764:	6823      	ldr	r3, [r4, #0]
 8010766:	079b      	lsls	r3, r3, #30
 8010768:	d413      	bmi.n	8010792 <_printf_i+0x23a>
 801076a:	68e0      	ldr	r0, [r4, #12]
 801076c:	9b03      	ldr	r3, [sp, #12]
 801076e:	4298      	cmp	r0, r3
 8010770:	bfb8      	it	lt
 8010772:	4618      	movlt	r0, r3
 8010774:	e7a4      	b.n	80106c0 <_printf_i+0x168>
 8010776:	2301      	movs	r3, #1
 8010778:	4632      	mov	r2, r6
 801077a:	4649      	mov	r1, r9
 801077c:	4640      	mov	r0, r8
 801077e:	47d0      	blx	sl
 8010780:	3001      	adds	r0, #1
 8010782:	d09b      	beq.n	80106bc <_printf_i+0x164>
 8010784:	3501      	adds	r5, #1
 8010786:	68e3      	ldr	r3, [r4, #12]
 8010788:	9903      	ldr	r1, [sp, #12]
 801078a:	1a5b      	subs	r3, r3, r1
 801078c:	42ab      	cmp	r3, r5
 801078e:	dcf2      	bgt.n	8010776 <_printf_i+0x21e>
 8010790:	e7eb      	b.n	801076a <_printf_i+0x212>
 8010792:	2500      	movs	r5, #0
 8010794:	f104 0619 	add.w	r6, r4, #25
 8010798:	e7f5      	b.n	8010786 <_printf_i+0x22e>
 801079a:	bf00      	nop
 801079c:	080126e6 	.word	0x080126e6
 80107a0:	080126f7 	.word	0x080126f7

080107a4 <_sbrk_r>:
 80107a4:	b538      	push	{r3, r4, r5, lr}
 80107a6:	4d06      	ldr	r5, [pc, #24]	; (80107c0 <_sbrk_r+0x1c>)
 80107a8:	2300      	movs	r3, #0
 80107aa:	4604      	mov	r4, r0
 80107ac:	4608      	mov	r0, r1
 80107ae:	602b      	str	r3, [r5, #0]
 80107b0:	f7f0 fcd8 	bl	8001164 <_sbrk>
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	d102      	bne.n	80107be <_sbrk_r+0x1a>
 80107b8:	682b      	ldr	r3, [r5, #0]
 80107ba:	b103      	cbz	r3, 80107be <_sbrk_r+0x1a>
 80107bc:	6023      	str	r3, [r4, #0]
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	24002008 	.word	0x24002008

080107c4 <quorem>:
 80107c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c8:	6903      	ldr	r3, [r0, #16]
 80107ca:	690c      	ldr	r4, [r1, #16]
 80107cc:	42a3      	cmp	r3, r4
 80107ce:	4607      	mov	r7, r0
 80107d0:	f2c0 8081 	blt.w	80108d6 <quorem+0x112>
 80107d4:	3c01      	subs	r4, #1
 80107d6:	f101 0814 	add.w	r8, r1, #20
 80107da:	f100 0514 	add.w	r5, r0, #20
 80107de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107e2:	9301      	str	r3, [sp, #4]
 80107e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107ec:	3301      	adds	r3, #1
 80107ee:	429a      	cmp	r2, r3
 80107f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80107f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80107f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80107fc:	d331      	bcc.n	8010862 <quorem+0x9e>
 80107fe:	f04f 0e00 	mov.w	lr, #0
 8010802:	4640      	mov	r0, r8
 8010804:	46ac      	mov	ip, r5
 8010806:	46f2      	mov	sl, lr
 8010808:	f850 2b04 	ldr.w	r2, [r0], #4
 801080c:	b293      	uxth	r3, r2
 801080e:	fb06 e303 	mla	r3, r6, r3, lr
 8010812:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010816:	b29b      	uxth	r3, r3
 8010818:	ebaa 0303 	sub.w	r3, sl, r3
 801081c:	f8dc a000 	ldr.w	sl, [ip]
 8010820:	0c12      	lsrs	r2, r2, #16
 8010822:	fa13 f38a 	uxtah	r3, r3, sl
 8010826:	fb06 e202 	mla	r2, r6, r2, lr
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	9b00      	ldr	r3, [sp, #0]
 801082e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010832:	b292      	uxth	r2, r2
 8010834:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010838:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801083c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010840:	4581      	cmp	r9, r0
 8010842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010846:	f84c 3b04 	str.w	r3, [ip], #4
 801084a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801084e:	d2db      	bcs.n	8010808 <quorem+0x44>
 8010850:	f855 300b 	ldr.w	r3, [r5, fp]
 8010854:	b92b      	cbnz	r3, 8010862 <quorem+0x9e>
 8010856:	9b01      	ldr	r3, [sp, #4]
 8010858:	3b04      	subs	r3, #4
 801085a:	429d      	cmp	r5, r3
 801085c:	461a      	mov	r2, r3
 801085e:	d32e      	bcc.n	80108be <quorem+0xfa>
 8010860:	613c      	str	r4, [r7, #16]
 8010862:	4638      	mov	r0, r7
 8010864:	f001 f84a 	bl	80118fc <__mcmp>
 8010868:	2800      	cmp	r0, #0
 801086a:	db24      	blt.n	80108b6 <quorem+0xf2>
 801086c:	3601      	adds	r6, #1
 801086e:	4628      	mov	r0, r5
 8010870:	f04f 0c00 	mov.w	ip, #0
 8010874:	f858 2b04 	ldr.w	r2, [r8], #4
 8010878:	f8d0 e000 	ldr.w	lr, [r0]
 801087c:	b293      	uxth	r3, r2
 801087e:	ebac 0303 	sub.w	r3, ip, r3
 8010882:	0c12      	lsrs	r2, r2, #16
 8010884:	fa13 f38e 	uxtah	r3, r3, lr
 8010888:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801088c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010890:	b29b      	uxth	r3, r3
 8010892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010896:	45c1      	cmp	r9, r8
 8010898:	f840 3b04 	str.w	r3, [r0], #4
 801089c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80108a0:	d2e8      	bcs.n	8010874 <quorem+0xb0>
 80108a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108aa:	b922      	cbnz	r2, 80108b6 <quorem+0xf2>
 80108ac:	3b04      	subs	r3, #4
 80108ae:	429d      	cmp	r5, r3
 80108b0:	461a      	mov	r2, r3
 80108b2:	d30a      	bcc.n	80108ca <quorem+0x106>
 80108b4:	613c      	str	r4, [r7, #16]
 80108b6:	4630      	mov	r0, r6
 80108b8:	b003      	add	sp, #12
 80108ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108be:	6812      	ldr	r2, [r2, #0]
 80108c0:	3b04      	subs	r3, #4
 80108c2:	2a00      	cmp	r2, #0
 80108c4:	d1cc      	bne.n	8010860 <quorem+0x9c>
 80108c6:	3c01      	subs	r4, #1
 80108c8:	e7c7      	b.n	801085a <quorem+0x96>
 80108ca:	6812      	ldr	r2, [r2, #0]
 80108cc:	3b04      	subs	r3, #4
 80108ce:	2a00      	cmp	r2, #0
 80108d0:	d1f0      	bne.n	80108b4 <quorem+0xf0>
 80108d2:	3c01      	subs	r4, #1
 80108d4:	e7eb      	b.n	80108ae <quorem+0xea>
 80108d6:	2000      	movs	r0, #0
 80108d8:	e7ee      	b.n	80108b8 <quorem+0xf4>
 80108da:	0000      	movs	r0, r0
 80108dc:	0000      	movs	r0, r0
	...

080108e0 <_dtoa_r>:
 80108e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e4:	ed2d 8b02 	vpush	{d8}
 80108e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108ea:	b091      	sub	sp, #68	; 0x44
 80108ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80108f0:	ec59 8b10 	vmov	r8, r9, d0
 80108f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80108f6:	9106      	str	r1, [sp, #24]
 80108f8:	4606      	mov	r6, r0
 80108fa:	9208      	str	r2, [sp, #32]
 80108fc:	930c      	str	r3, [sp, #48]	; 0x30
 80108fe:	b975      	cbnz	r5, 801091e <_dtoa_r+0x3e>
 8010900:	2010      	movs	r0, #16
 8010902:	f7ff fa13 	bl	800fd2c <malloc>
 8010906:	4602      	mov	r2, r0
 8010908:	6270      	str	r0, [r6, #36]	; 0x24
 801090a:	b920      	cbnz	r0, 8010916 <_dtoa_r+0x36>
 801090c:	4baa      	ldr	r3, [pc, #680]	; (8010bb8 <_dtoa_r+0x2d8>)
 801090e:	21ea      	movs	r1, #234	; 0xea
 8010910:	48aa      	ldr	r0, [pc, #680]	; (8010bbc <_dtoa_r+0x2dc>)
 8010912:	f001 f90b 	bl	8011b2c <__assert_func>
 8010916:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801091a:	6005      	str	r5, [r0, #0]
 801091c:	60c5      	str	r5, [r0, #12]
 801091e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010920:	6819      	ldr	r1, [r3, #0]
 8010922:	b151      	cbz	r1, 801093a <_dtoa_r+0x5a>
 8010924:	685a      	ldr	r2, [r3, #4]
 8010926:	604a      	str	r2, [r1, #4]
 8010928:	2301      	movs	r3, #1
 801092a:	4093      	lsls	r3, r2
 801092c:	608b      	str	r3, [r1, #8]
 801092e:	4630      	mov	r0, r6
 8010930:	f000 fda2 	bl	8011478 <_Bfree>
 8010934:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010936:	2200      	movs	r2, #0
 8010938:	601a      	str	r2, [r3, #0]
 801093a:	f1b9 0300 	subs.w	r3, r9, #0
 801093e:	bfbb      	ittet	lt
 8010940:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010944:	9303      	strlt	r3, [sp, #12]
 8010946:	2300      	movge	r3, #0
 8010948:	2201      	movlt	r2, #1
 801094a:	bfac      	ite	ge
 801094c:	6023      	strge	r3, [r4, #0]
 801094e:	6022      	strlt	r2, [r4, #0]
 8010950:	4b9b      	ldr	r3, [pc, #620]	; (8010bc0 <_dtoa_r+0x2e0>)
 8010952:	9c03      	ldr	r4, [sp, #12]
 8010954:	43a3      	bics	r3, r4
 8010956:	d11c      	bne.n	8010992 <_dtoa_r+0xb2>
 8010958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801095a:	f242 730f 	movw	r3, #9999	; 0x270f
 801095e:	6013      	str	r3, [r2, #0]
 8010960:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010964:	ea53 0308 	orrs.w	r3, r3, r8
 8010968:	f000 84fd 	beq.w	8011366 <_dtoa_r+0xa86>
 801096c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801096e:	b963      	cbnz	r3, 801098a <_dtoa_r+0xaa>
 8010970:	4b94      	ldr	r3, [pc, #592]	; (8010bc4 <_dtoa_r+0x2e4>)
 8010972:	e01f      	b.n	80109b4 <_dtoa_r+0xd4>
 8010974:	4b94      	ldr	r3, [pc, #592]	; (8010bc8 <_dtoa_r+0x2e8>)
 8010976:	9301      	str	r3, [sp, #4]
 8010978:	3308      	adds	r3, #8
 801097a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801097c:	6013      	str	r3, [r2, #0]
 801097e:	9801      	ldr	r0, [sp, #4]
 8010980:	b011      	add	sp, #68	; 0x44
 8010982:	ecbd 8b02 	vpop	{d8}
 8010986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098a:	4b8e      	ldr	r3, [pc, #568]	; (8010bc4 <_dtoa_r+0x2e4>)
 801098c:	9301      	str	r3, [sp, #4]
 801098e:	3303      	adds	r3, #3
 8010990:	e7f3      	b.n	801097a <_dtoa_r+0x9a>
 8010992:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010996:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801099a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801099e:	d10b      	bne.n	80109b8 <_dtoa_r+0xd8>
 80109a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109a2:	2301      	movs	r3, #1
 80109a4:	6013      	str	r3, [r2, #0]
 80109a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f000 84d9 	beq.w	8011360 <_dtoa_r+0xa80>
 80109ae:	4887      	ldr	r0, [pc, #540]	; (8010bcc <_dtoa_r+0x2ec>)
 80109b0:	6018      	str	r0, [r3, #0]
 80109b2:	1e43      	subs	r3, r0, #1
 80109b4:	9301      	str	r3, [sp, #4]
 80109b6:	e7e2      	b.n	801097e <_dtoa_r+0x9e>
 80109b8:	a90f      	add	r1, sp, #60	; 0x3c
 80109ba:	aa0e      	add	r2, sp, #56	; 0x38
 80109bc:	4630      	mov	r0, r6
 80109be:	eeb0 0b48 	vmov.f64	d0, d8
 80109c2:	f001 f841 	bl	8011a48 <__d2b>
 80109c6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80109ca:	4605      	mov	r5, r0
 80109cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80109ce:	2900      	cmp	r1, #0
 80109d0:	d046      	beq.n	8010a60 <_dtoa_r+0x180>
 80109d2:	ee18 4a90 	vmov	r4, s17
 80109d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80109da:	ec53 2b18 	vmov	r2, r3, d8
 80109de:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80109e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80109e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80109ea:	2400      	movs	r4, #0
 80109ec:	ec43 2b16 	vmov	d6, r2, r3
 80109f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80109f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010ba0 <_dtoa_r+0x2c0>
 80109f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80109fc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8010ba8 <_dtoa_r+0x2c8>
 8010a00:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010a04:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8010bb0 <_dtoa_r+0x2d0>
 8010a08:	ee07 1a90 	vmov	s15, r1
 8010a0c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010a10:	eeb0 7b46 	vmov.f64	d7, d6
 8010a14:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010a18:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010a1c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a24:	ee16 ba90 	vmov	fp, s13
 8010a28:	940a      	str	r4, [sp, #40]	; 0x28
 8010a2a:	d508      	bpl.n	8010a3e <_dtoa_r+0x15e>
 8010a2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010a30:	eeb4 6b47 	vcmp.f64	d6, d7
 8010a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a38:	bf18      	it	ne
 8010a3a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010a3e:	f1bb 0f16 	cmp.w	fp, #22
 8010a42:	d82f      	bhi.n	8010aa4 <_dtoa_r+0x1c4>
 8010a44:	4b62      	ldr	r3, [pc, #392]	; (8010bd0 <_dtoa_r+0x2f0>)
 8010a46:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a4a:	ed93 7b00 	vldr	d7, [r3]
 8010a4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a56:	d501      	bpl.n	8010a5c <_dtoa_r+0x17c>
 8010a58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	e022      	b.n	8010aa6 <_dtoa_r+0x1c6>
 8010a60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010a62:	4401      	add	r1, r0
 8010a64:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010a68:	2b20      	cmp	r3, #32
 8010a6a:	bfc1      	itttt	gt
 8010a6c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a70:	fa04 f303 	lslgt.w	r3, r4, r3
 8010a74:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010a78:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010a7c:	bfd6      	itet	le
 8010a7e:	f1c3 0320 	rsble	r3, r3, #32
 8010a82:	ea43 0808 	orrgt.w	r8, r3, r8
 8010a86:	fa08 f803 	lslle.w	r8, r8, r3
 8010a8a:	ee07 8a90 	vmov	s15, r8
 8010a8e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010a92:	3901      	subs	r1, #1
 8010a94:	ee17 4a90 	vmov	r4, s15
 8010a98:	ec53 2b17 	vmov	r2, r3, d7
 8010a9c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010aa0:	2401      	movs	r4, #1
 8010aa2:	e7a3      	b.n	80109ec <_dtoa_r+0x10c>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010aa8:	1a43      	subs	r3, r0, r1
 8010aaa:	1e5a      	subs	r2, r3, #1
 8010aac:	bf45      	ittet	mi
 8010aae:	f1c3 0301 	rsbmi	r3, r3, #1
 8010ab2:	9304      	strmi	r3, [sp, #16]
 8010ab4:	2300      	movpl	r3, #0
 8010ab6:	2300      	movmi	r3, #0
 8010ab8:	9205      	str	r2, [sp, #20]
 8010aba:	bf54      	ite	pl
 8010abc:	9304      	strpl	r3, [sp, #16]
 8010abe:	9305      	strmi	r3, [sp, #20]
 8010ac0:	f1bb 0f00 	cmp.w	fp, #0
 8010ac4:	db18      	blt.n	8010af8 <_dtoa_r+0x218>
 8010ac6:	9b05      	ldr	r3, [sp, #20]
 8010ac8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010acc:	445b      	add	r3, fp
 8010ace:	9305      	str	r3, [sp, #20]
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	9a06      	ldr	r2, [sp, #24]
 8010ad4:	2a09      	cmp	r2, #9
 8010ad6:	d849      	bhi.n	8010b6c <_dtoa_r+0x28c>
 8010ad8:	2a05      	cmp	r2, #5
 8010ada:	bfc4      	itt	gt
 8010adc:	3a04      	subgt	r2, #4
 8010ade:	9206      	strgt	r2, [sp, #24]
 8010ae0:	9a06      	ldr	r2, [sp, #24]
 8010ae2:	f1a2 0202 	sub.w	r2, r2, #2
 8010ae6:	bfcc      	ite	gt
 8010ae8:	2400      	movgt	r4, #0
 8010aea:	2401      	movle	r4, #1
 8010aec:	2a03      	cmp	r2, #3
 8010aee:	d848      	bhi.n	8010b82 <_dtoa_r+0x2a2>
 8010af0:	e8df f002 	tbb	[pc, r2]
 8010af4:	3a2c2e0b 	.word	0x3a2c2e0b
 8010af8:	9b04      	ldr	r3, [sp, #16]
 8010afa:	2200      	movs	r2, #0
 8010afc:	eba3 030b 	sub.w	r3, r3, fp
 8010b00:	9304      	str	r3, [sp, #16]
 8010b02:	9209      	str	r2, [sp, #36]	; 0x24
 8010b04:	f1cb 0300 	rsb	r3, fp, #0
 8010b08:	e7e3      	b.n	8010ad2 <_dtoa_r+0x1f2>
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	9207      	str	r2, [sp, #28]
 8010b0e:	9a08      	ldr	r2, [sp, #32]
 8010b10:	2a00      	cmp	r2, #0
 8010b12:	dc39      	bgt.n	8010b88 <_dtoa_r+0x2a8>
 8010b14:	f04f 0a01 	mov.w	sl, #1
 8010b18:	46d1      	mov	r9, sl
 8010b1a:	4652      	mov	r2, sl
 8010b1c:	f8cd a020 	str.w	sl, [sp, #32]
 8010b20:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010b22:	2100      	movs	r1, #0
 8010b24:	6079      	str	r1, [r7, #4]
 8010b26:	2004      	movs	r0, #4
 8010b28:	f100 0c14 	add.w	ip, r0, #20
 8010b2c:	4594      	cmp	ip, r2
 8010b2e:	6879      	ldr	r1, [r7, #4]
 8010b30:	d92f      	bls.n	8010b92 <_dtoa_r+0x2b2>
 8010b32:	4630      	mov	r0, r6
 8010b34:	930d      	str	r3, [sp, #52]	; 0x34
 8010b36:	f000 fc5f 	bl	80113f8 <_Balloc>
 8010b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b3c:	9001      	str	r0, [sp, #4]
 8010b3e:	4602      	mov	r2, r0
 8010b40:	2800      	cmp	r0, #0
 8010b42:	d149      	bne.n	8010bd8 <_dtoa_r+0x2f8>
 8010b44:	4b23      	ldr	r3, [pc, #140]	; (8010bd4 <_dtoa_r+0x2f4>)
 8010b46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b4a:	e6e1      	b.n	8010910 <_dtoa_r+0x30>
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	e7dd      	b.n	8010b0c <_dtoa_r+0x22c>
 8010b50:	2200      	movs	r2, #0
 8010b52:	9207      	str	r2, [sp, #28]
 8010b54:	9a08      	ldr	r2, [sp, #32]
 8010b56:	eb0b 0a02 	add.w	sl, fp, r2
 8010b5a:	f10a 0901 	add.w	r9, sl, #1
 8010b5e:	464a      	mov	r2, r9
 8010b60:	2a01      	cmp	r2, #1
 8010b62:	bfb8      	it	lt
 8010b64:	2201      	movlt	r2, #1
 8010b66:	e7db      	b.n	8010b20 <_dtoa_r+0x240>
 8010b68:	2201      	movs	r2, #1
 8010b6a:	e7f2      	b.n	8010b52 <_dtoa_r+0x272>
 8010b6c:	2401      	movs	r4, #1
 8010b6e:	2200      	movs	r2, #0
 8010b70:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010b74:	f04f 3aff 	mov.w	sl, #4294967295
 8010b78:	2100      	movs	r1, #0
 8010b7a:	46d1      	mov	r9, sl
 8010b7c:	2212      	movs	r2, #18
 8010b7e:	9108      	str	r1, [sp, #32]
 8010b80:	e7ce      	b.n	8010b20 <_dtoa_r+0x240>
 8010b82:	2201      	movs	r2, #1
 8010b84:	9207      	str	r2, [sp, #28]
 8010b86:	e7f5      	b.n	8010b74 <_dtoa_r+0x294>
 8010b88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010b8c:	46d1      	mov	r9, sl
 8010b8e:	4652      	mov	r2, sl
 8010b90:	e7c6      	b.n	8010b20 <_dtoa_r+0x240>
 8010b92:	3101      	adds	r1, #1
 8010b94:	6079      	str	r1, [r7, #4]
 8010b96:	0040      	lsls	r0, r0, #1
 8010b98:	e7c6      	b.n	8010b28 <_dtoa_r+0x248>
 8010b9a:	bf00      	nop
 8010b9c:	f3af 8000 	nop.w
 8010ba0:	636f4361 	.word	0x636f4361
 8010ba4:	3fd287a7 	.word	0x3fd287a7
 8010ba8:	8b60c8b3 	.word	0x8b60c8b3
 8010bac:	3fc68a28 	.word	0x3fc68a28
 8010bb0:	509f79fb 	.word	0x509f79fb
 8010bb4:	3fd34413 	.word	0x3fd34413
 8010bb8:	08012715 	.word	0x08012715
 8010bbc:	0801272c 	.word	0x0801272c
 8010bc0:	7ff00000 	.word	0x7ff00000
 8010bc4:	08012711 	.word	0x08012711
 8010bc8:	08012708 	.word	0x08012708
 8010bcc:	080126e5 	.word	0x080126e5
 8010bd0:	08012820 	.word	0x08012820
 8010bd4:	08012787 	.word	0x08012787
 8010bd8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010bda:	9901      	ldr	r1, [sp, #4]
 8010bdc:	6011      	str	r1, [r2, #0]
 8010bde:	f1b9 0f0e 	cmp.w	r9, #14
 8010be2:	d86c      	bhi.n	8010cbe <_dtoa_r+0x3de>
 8010be4:	2c00      	cmp	r4, #0
 8010be6:	d06a      	beq.n	8010cbe <_dtoa_r+0x3de>
 8010be8:	f1bb 0f00 	cmp.w	fp, #0
 8010bec:	f340 80a0 	ble.w	8010d30 <_dtoa_r+0x450>
 8010bf0:	49c1      	ldr	r1, [pc, #772]	; (8010ef8 <_dtoa_r+0x618>)
 8010bf2:	f00b 020f 	and.w	r2, fp, #15
 8010bf6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010bfa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010bfe:	ed92 7b00 	vldr	d7, [r2]
 8010c02:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010c06:	f000 8087 	beq.w	8010d18 <_dtoa_r+0x438>
 8010c0a:	4abc      	ldr	r2, [pc, #752]	; (8010efc <_dtoa_r+0x61c>)
 8010c0c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010c10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010c14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010c18:	f001 010f 	and.w	r1, r1, #15
 8010c1c:	2203      	movs	r2, #3
 8010c1e:	48b7      	ldr	r0, [pc, #732]	; (8010efc <_dtoa_r+0x61c>)
 8010c20:	2900      	cmp	r1, #0
 8010c22:	d17b      	bne.n	8010d1c <_dtoa_r+0x43c>
 8010c24:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010c2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c32:	2900      	cmp	r1, #0
 8010c34:	f000 80a2 	beq.w	8010d7c <_dtoa_r+0x49c>
 8010c38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010c3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c48:	f140 8098 	bpl.w	8010d7c <_dtoa_r+0x49c>
 8010c4c:	f1b9 0f00 	cmp.w	r9, #0
 8010c50:	f000 8094 	beq.w	8010d7c <_dtoa_r+0x49c>
 8010c54:	f1ba 0f00 	cmp.w	sl, #0
 8010c58:	dd2f      	ble.n	8010cba <_dtoa_r+0x3da>
 8010c5a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010c5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c62:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c66:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010c6a:	3201      	adds	r2, #1
 8010c6c:	4650      	mov	r0, sl
 8010c6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c72:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010c76:	ee07 2a90 	vmov	s15, r2
 8010c7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c7e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010c82:	ee15 4a90 	vmov	r4, s11
 8010c86:	ec52 1b15 	vmov	r1, r2, d5
 8010c8a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	d177      	bne.n	8010d82 <_dtoa_r+0x4a2>
 8010c92:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010c96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010c9a:	ec42 1b17 	vmov	d7, r1, r2
 8010c9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca6:	f300 8263 	bgt.w	8011170 <_dtoa_r+0x890>
 8010caa:	eeb1 7b47 	vneg.f64	d7, d7
 8010cae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cb6:	f100 8258 	bmi.w	801116a <_dtoa_r+0x88a>
 8010cba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010cbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010cc0:	2a00      	cmp	r2, #0
 8010cc2:	f2c0 811d 	blt.w	8010f00 <_dtoa_r+0x620>
 8010cc6:	f1bb 0f0e 	cmp.w	fp, #14
 8010cca:	f300 8119 	bgt.w	8010f00 <_dtoa_r+0x620>
 8010cce:	4b8a      	ldr	r3, [pc, #552]	; (8010ef8 <_dtoa_r+0x618>)
 8010cd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010cd4:	ed93 6b00 	vldr	d6, [r3]
 8010cd8:	9b08      	ldr	r3, [sp, #32]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	f280 80b7 	bge.w	8010e4e <_dtoa_r+0x56e>
 8010ce0:	f1b9 0f00 	cmp.w	r9, #0
 8010ce4:	f300 80b3 	bgt.w	8010e4e <_dtoa_r+0x56e>
 8010ce8:	f040 823f 	bne.w	801116a <_dtoa_r+0x88a>
 8010cec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010cf0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010cf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010cf8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d00:	464c      	mov	r4, r9
 8010d02:	464f      	mov	r7, r9
 8010d04:	f280 8215 	bge.w	8011132 <_dtoa_r+0x852>
 8010d08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010d0c:	2331      	movs	r3, #49	; 0x31
 8010d0e:	f808 3b01 	strb.w	r3, [r8], #1
 8010d12:	f10b 0b01 	add.w	fp, fp, #1
 8010d16:	e211      	b.n	801113c <_dtoa_r+0x85c>
 8010d18:	2202      	movs	r2, #2
 8010d1a:	e780      	b.n	8010c1e <_dtoa_r+0x33e>
 8010d1c:	07cc      	lsls	r4, r1, #31
 8010d1e:	d504      	bpl.n	8010d2a <_dtoa_r+0x44a>
 8010d20:	ed90 6b00 	vldr	d6, [r0]
 8010d24:	3201      	adds	r2, #1
 8010d26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d2a:	1049      	asrs	r1, r1, #1
 8010d2c:	3008      	adds	r0, #8
 8010d2e:	e777      	b.n	8010c20 <_dtoa_r+0x340>
 8010d30:	d022      	beq.n	8010d78 <_dtoa_r+0x498>
 8010d32:	f1cb 0100 	rsb	r1, fp, #0
 8010d36:	4a70      	ldr	r2, [pc, #448]	; (8010ef8 <_dtoa_r+0x618>)
 8010d38:	f001 000f 	and.w	r0, r1, #15
 8010d3c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d40:	ed92 7b00 	vldr	d7, [r2]
 8010d44:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010d48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d4c:	486b      	ldr	r0, [pc, #428]	; (8010efc <_dtoa_r+0x61c>)
 8010d4e:	1109      	asrs	r1, r1, #4
 8010d50:	2400      	movs	r4, #0
 8010d52:	2202      	movs	r2, #2
 8010d54:	b929      	cbnz	r1, 8010d62 <_dtoa_r+0x482>
 8010d56:	2c00      	cmp	r4, #0
 8010d58:	f43f af6a 	beq.w	8010c30 <_dtoa_r+0x350>
 8010d5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d60:	e766      	b.n	8010c30 <_dtoa_r+0x350>
 8010d62:	07cf      	lsls	r7, r1, #31
 8010d64:	d505      	bpl.n	8010d72 <_dtoa_r+0x492>
 8010d66:	ed90 6b00 	vldr	d6, [r0]
 8010d6a:	3201      	adds	r2, #1
 8010d6c:	2401      	movs	r4, #1
 8010d6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d72:	1049      	asrs	r1, r1, #1
 8010d74:	3008      	adds	r0, #8
 8010d76:	e7ed      	b.n	8010d54 <_dtoa_r+0x474>
 8010d78:	2202      	movs	r2, #2
 8010d7a:	e759      	b.n	8010c30 <_dtoa_r+0x350>
 8010d7c:	465f      	mov	r7, fp
 8010d7e:	4648      	mov	r0, r9
 8010d80:	e775      	b.n	8010c6e <_dtoa_r+0x38e>
 8010d82:	ec42 1b17 	vmov	d7, r1, r2
 8010d86:	4a5c      	ldr	r2, [pc, #368]	; (8010ef8 <_dtoa_r+0x618>)
 8010d88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d8c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010d90:	9a01      	ldr	r2, [sp, #4]
 8010d92:	1814      	adds	r4, r2, r0
 8010d94:	9a07      	ldr	r2, [sp, #28]
 8010d96:	b352      	cbz	r2, 8010dee <_dtoa_r+0x50e>
 8010d98:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010d9c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010da0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010da4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010da8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010dac:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010db0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010db4:	ee14 2a90 	vmov	r2, s9
 8010db8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010dbc:	3230      	adds	r2, #48	; 0x30
 8010dbe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010dc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dca:	f808 2b01 	strb.w	r2, [r8], #1
 8010dce:	d439      	bmi.n	8010e44 <_dtoa_r+0x564>
 8010dd0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010dd4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ddc:	d472      	bmi.n	8010ec4 <_dtoa_r+0x5e4>
 8010dde:	45a0      	cmp	r8, r4
 8010de0:	f43f af6b 	beq.w	8010cba <_dtoa_r+0x3da>
 8010de4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010de8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010dec:	e7e0      	b.n	8010db0 <_dtoa_r+0x4d0>
 8010dee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010df2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010df6:	4621      	mov	r1, r4
 8010df8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010dfc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e00:	ee14 2a90 	vmov	r2, s9
 8010e04:	3230      	adds	r2, #48	; 0x30
 8010e06:	f808 2b01 	strb.w	r2, [r8], #1
 8010e0a:	45a0      	cmp	r8, r4
 8010e0c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e10:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e14:	d118      	bne.n	8010e48 <_dtoa_r+0x568>
 8010e16:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010e1a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010e1e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e26:	dc4d      	bgt.n	8010ec4 <_dtoa_r+0x5e4>
 8010e28:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010e2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e34:	f57f af41 	bpl.w	8010cba <_dtoa_r+0x3da>
 8010e38:	4688      	mov	r8, r1
 8010e3a:	3901      	subs	r1, #1
 8010e3c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010e40:	2b30      	cmp	r3, #48	; 0x30
 8010e42:	d0f9      	beq.n	8010e38 <_dtoa_r+0x558>
 8010e44:	46bb      	mov	fp, r7
 8010e46:	e02a      	b.n	8010e9e <_dtoa_r+0x5be>
 8010e48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e4c:	e7d6      	b.n	8010dfc <_dtoa_r+0x51c>
 8010e4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e52:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010e56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010e5a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010e5e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010e62:	ee15 3a10 	vmov	r3, s10
 8010e66:	3330      	adds	r3, #48	; 0x30
 8010e68:	f808 3b01 	strb.w	r3, [r8], #1
 8010e6c:	9b01      	ldr	r3, [sp, #4]
 8010e6e:	eba8 0303 	sub.w	r3, r8, r3
 8010e72:	4599      	cmp	r9, r3
 8010e74:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010e78:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010e7c:	d133      	bne.n	8010ee6 <_dtoa_r+0x606>
 8010e7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010e82:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8a:	dc1a      	bgt.n	8010ec2 <_dtoa_r+0x5e2>
 8010e8c:	eeb4 7b46 	vcmp.f64	d7, d6
 8010e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e94:	d103      	bne.n	8010e9e <_dtoa_r+0x5be>
 8010e96:	ee15 3a10 	vmov	r3, s10
 8010e9a:	07d9      	lsls	r1, r3, #31
 8010e9c:	d411      	bmi.n	8010ec2 <_dtoa_r+0x5e2>
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	f000 fae9 	bl	8011478 <_Bfree>
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010eaa:	f888 3000 	strb.w	r3, [r8]
 8010eae:	f10b 0301 	add.w	r3, fp, #1
 8010eb2:	6013      	str	r3, [r2, #0]
 8010eb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	f43f ad61 	beq.w	801097e <_dtoa_r+0x9e>
 8010ebc:	f8c3 8000 	str.w	r8, [r3]
 8010ec0:	e55d      	b.n	801097e <_dtoa_r+0x9e>
 8010ec2:	465f      	mov	r7, fp
 8010ec4:	4643      	mov	r3, r8
 8010ec6:	4698      	mov	r8, r3
 8010ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ecc:	2a39      	cmp	r2, #57	; 0x39
 8010ece:	d106      	bne.n	8010ede <_dtoa_r+0x5fe>
 8010ed0:	9a01      	ldr	r2, [sp, #4]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d1f7      	bne.n	8010ec6 <_dtoa_r+0x5e6>
 8010ed6:	9901      	ldr	r1, [sp, #4]
 8010ed8:	2230      	movs	r2, #48	; 0x30
 8010eda:	3701      	adds	r7, #1
 8010edc:	700a      	strb	r2, [r1, #0]
 8010ede:	781a      	ldrb	r2, [r3, #0]
 8010ee0:	3201      	adds	r2, #1
 8010ee2:	701a      	strb	r2, [r3, #0]
 8010ee4:	e7ae      	b.n	8010e44 <_dtoa_r+0x564>
 8010ee6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010eea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef2:	d1b2      	bne.n	8010e5a <_dtoa_r+0x57a>
 8010ef4:	e7d3      	b.n	8010e9e <_dtoa_r+0x5be>
 8010ef6:	bf00      	nop
 8010ef8:	08012820 	.word	0x08012820
 8010efc:	080127f8 	.word	0x080127f8
 8010f00:	9907      	ldr	r1, [sp, #28]
 8010f02:	2900      	cmp	r1, #0
 8010f04:	f000 80d0 	beq.w	80110a8 <_dtoa_r+0x7c8>
 8010f08:	9906      	ldr	r1, [sp, #24]
 8010f0a:	2901      	cmp	r1, #1
 8010f0c:	f300 80b4 	bgt.w	8011078 <_dtoa_r+0x798>
 8010f10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010f12:	2900      	cmp	r1, #0
 8010f14:	f000 80ac 	beq.w	8011070 <_dtoa_r+0x790>
 8010f18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010f1c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010f20:	461c      	mov	r4, r3
 8010f22:	930a      	str	r3, [sp, #40]	; 0x28
 8010f24:	9b04      	ldr	r3, [sp, #16]
 8010f26:	4413      	add	r3, r2
 8010f28:	9304      	str	r3, [sp, #16]
 8010f2a:	9b05      	ldr	r3, [sp, #20]
 8010f2c:	2101      	movs	r1, #1
 8010f2e:	4413      	add	r3, r2
 8010f30:	4630      	mov	r0, r6
 8010f32:	9305      	str	r3, [sp, #20]
 8010f34:	f000 fb58 	bl	80115e8 <__i2b>
 8010f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f3a:	4607      	mov	r7, r0
 8010f3c:	f1b8 0f00 	cmp.w	r8, #0
 8010f40:	dd0d      	ble.n	8010f5e <_dtoa_r+0x67e>
 8010f42:	9a05      	ldr	r2, [sp, #20]
 8010f44:	2a00      	cmp	r2, #0
 8010f46:	dd0a      	ble.n	8010f5e <_dtoa_r+0x67e>
 8010f48:	4542      	cmp	r2, r8
 8010f4a:	9904      	ldr	r1, [sp, #16]
 8010f4c:	bfa8      	it	ge
 8010f4e:	4642      	movge	r2, r8
 8010f50:	1a89      	subs	r1, r1, r2
 8010f52:	9104      	str	r1, [sp, #16]
 8010f54:	9905      	ldr	r1, [sp, #20]
 8010f56:	eba8 0802 	sub.w	r8, r8, r2
 8010f5a:	1a8a      	subs	r2, r1, r2
 8010f5c:	9205      	str	r2, [sp, #20]
 8010f5e:	b303      	cbz	r3, 8010fa2 <_dtoa_r+0x6c2>
 8010f60:	9a07      	ldr	r2, [sp, #28]
 8010f62:	2a00      	cmp	r2, #0
 8010f64:	f000 80a5 	beq.w	80110b2 <_dtoa_r+0x7d2>
 8010f68:	2c00      	cmp	r4, #0
 8010f6a:	dd13      	ble.n	8010f94 <_dtoa_r+0x6b4>
 8010f6c:	4639      	mov	r1, r7
 8010f6e:	4622      	mov	r2, r4
 8010f70:	4630      	mov	r0, r6
 8010f72:	930d      	str	r3, [sp, #52]	; 0x34
 8010f74:	f000 fbf8 	bl	8011768 <__pow5mult>
 8010f78:	462a      	mov	r2, r5
 8010f7a:	4601      	mov	r1, r0
 8010f7c:	4607      	mov	r7, r0
 8010f7e:	4630      	mov	r0, r6
 8010f80:	f000 fb48 	bl	8011614 <__multiply>
 8010f84:	4629      	mov	r1, r5
 8010f86:	900a      	str	r0, [sp, #40]	; 0x28
 8010f88:	4630      	mov	r0, r6
 8010f8a:	f000 fa75 	bl	8011478 <_Bfree>
 8010f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f92:	4615      	mov	r5, r2
 8010f94:	1b1a      	subs	r2, r3, r4
 8010f96:	d004      	beq.n	8010fa2 <_dtoa_r+0x6c2>
 8010f98:	4629      	mov	r1, r5
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	f000 fbe4 	bl	8011768 <__pow5mult>
 8010fa0:	4605      	mov	r5, r0
 8010fa2:	2101      	movs	r1, #1
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	f000 fb1f 	bl	80115e8 <__i2b>
 8010faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	4604      	mov	r4, r0
 8010fb0:	f340 8081 	ble.w	80110b6 <_dtoa_r+0x7d6>
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	4601      	mov	r1, r0
 8010fb8:	4630      	mov	r0, r6
 8010fba:	f000 fbd5 	bl	8011768 <__pow5mult>
 8010fbe:	9b06      	ldr	r3, [sp, #24]
 8010fc0:	2b01      	cmp	r3, #1
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	dd7a      	ble.n	80110bc <_dtoa_r+0x7dc>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8010fca:	6922      	ldr	r2, [r4, #16]
 8010fcc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010fd0:	6910      	ldr	r0, [r2, #16]
 8010fd2:	f000 fab9 	bl	8011548 <__hi0bits>
 8010fd6:	f1c0 0020 	rsb	r0, r0, #32
 8010fda:	9b05      	ldr	r3, [sp, #20]
 8010fdc:	4418      	add	r0, r3
 8010fde:	f010 001f 	ands.w	r0, r0, #31
 8010fe2:	f000 808c 	beq.w	80110fe <_dtoa_r+0x81e>
 8010fe6:	f1c0 0220 	rsb	r2, r0, #32
 8010fea:	2a04      	cmp	r2, #4
 8010fec:	f340 8085 	ble.w	80110fa <_dtoa_r+0x81a>
 8010ff0:	f1c0 001c 	rsb	r0, r0, #28
 8010ff4:	9b04      	ldr	r3, [sp, #16]
 8010ff6:	4403      	add	r3, r0
 8010ff8:	9304      	str	r3, [sp, #16]
 8010ffa:	9b05      	ldr	r3, [sp, #20]
 8010ffc:	4403      	add	r3, r0
 8010ffe:	4480      	add	r8, r0
 8011000:	9305      	str	r3, [sp, #20]
 8011002:	9b04      	ldr	r3, [sp, #16]
 8011004:	2b00      	cmp	r3, #0
 8011006:	dd05      	ble.n	8011014 <_dtoa_r+0x734>
 8011008:	4629      	mov	r1, r5
 801100a:	461a      	mov	r2, r3
 801100c:	4630      	mov	r0, r6
 801100e:	f000 fc05 	bl	801181c <__lshift>
 8011012:	4605      	mov	r5, r0
 8011014:	9b05      	ldr	r3, [sp, #20]
 8011016:	2b00      	cmp	r3, #0
 8011018:	dd05      	ble.n	8011026 <_dtoa_r+0x746>
 801101a:	4621      	mov	r1, r4
 801101c:	461a      	mov	r2, r3
 801101e:	4630      	mov	r0, r6
 8011020:	f000 fbfc 	bl	801181c <__lshift>
 8011024:	4604      	mov	r4, r0
 8011026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011028:	2b00      	cmp	r3, #0
 801102a:	d06a      	beq.n	8011102 <_dtoa_r+0x822>
 801102c:	4621      	mov	r1, r4
 801102e:	4628      	mov	r0, r5
 8011030:	f000 fc64 	bl	80118fc <__mcmp>
 8011034:	2800      	cmp	r0, #0
 8011036:	da64      	bge.n	8011102 <_dtoa_r+0x822>
 8011038:	2300      	movs	r3, #0
 801103a:	4629      	mov	r1, r5
 801103c:	220a      	movs	r2, #10
 801103e:	4630      	mov	r0, r6
 8011040:	f000 fa3c 	bl	80114bc <__multadd>
 8011044:	9b07      	ldr	r3, [sp, #28]
 8011046:	f10b 3bff 	add.w	fp, fp, #4294967295
 801104a:	4605      	mov	r5, r0
 801104c:	2b00      	cmp	r3, #0
 801104e:	f000 8191 	beq.w	8011374 <_dtoa_r+0xa94>
 8011052:	4639      	mov	r1, r7
 8011054:	2300      	movs	r3, #0
 8011056:	220a      	movs	r2, #10
 8011058:	4630      	mov	r0, r6
 801105a:	f000 fa2f 	bl	80114bc <__multadd>
 801105e:	f1ba 0f00 	cmp.w	sl, #0
 8011062:	4607      	mov	r7, r0
 8011064:	f300 808d 	bgt.w	8011182 <_dtoa_r+0x8a2>
 8011068:	9b06      	ldr	r3, [sp, #24]
 801106a:	2b02      	cmp	r3, #2
 801106c:	dc50      	bgt.n	8011110 <_dtoa_r+0x830>
 801106e:	e088      	b.n	8011182 <_dtoa_r+0x8a2>
 8011070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011072:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011076:	e751      	b.n	8010f1c <_dtoa_r+0x63c>
 8011078:	f109 34ff 	add.w	r4, r9, #4294967295
 801107c:	42a3      	cmp	r3, r4
 801107e:	bfbf      	itttt	lt
 8011080:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8011082:	1ae3      	sublt	r3, r4, r3
 8011084:	18d2      	addlt	r2, r2, r3
 8011086:	9209      	strlt	r2, [sp, #36]	; 0x24
 8011088:	bfb6      	itet	lt
 801108a:	4623      	movlt	r3, r4
 801108c:	1b1c      	subge	r4, r3, r4
 801108e:	2400      	movlt	r4, #0
 8011090:	f1b9 0f00 	cmp.w	r9, #0
 8011094:	bfb5      	itete	lt
 8011096:	9a04      	ldrlt	r2, [sp, #16]
 8011098:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801109c:	eba2 0809 	sublt.w	r8, r2, r9
 80110a0:	464a      	movge	r2, r9
 80110a2:	bfb8      	it	lt
 80110a4:	2200      	movlt	r2, #0
 80110a6:	e73c      	b.n	8010f22 <_dtoa_r+0x642>
 80110a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80110ac:	9f07      	ldr	r7, [sp, #28]
 80110ae:	461c      	mov	r4, r3
 80110b0:	e744      	b.n	8010f3c <_dtoa_r+0x65c>
 80110b2:	461a      	mov	r2, r3
 80110b4:	e770      	b.n	8010f98 <_dtoa_r+0x6b8>
 80110b6:	9b06      	ldr	r3, [sp, #24]
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	dc18      	bgt.n	80110ee <_dtoa_r+0x80e>
 80110bc:	9b02      	ldr	r3, [sp, #8]
 80110be:	b9b3      	cbnz	r3, 80110ee <_dtoa_r+0x80e>
 80110c0:	9b03      	ldr	r3, [sp, #12]
 80110c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80110c6:	b9a2      	cbnz	r2, 80110f2 <_dtoa_r+0x812>
 80110c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80110cc:	0d12      	lsrs	r2, r2, #20
 80110ce:	0512      	lsls	r2, r2, #20
 80110d0:	b18a      	cbz	r2, 80110f6 <_dtoa_r+0x816>
 80110d2:	9b04      	ldr	r3, [sp, #16]
 80110d4:	3301      	adds	r3, #1
 80110d6:	9304      	str	r3, [sp, #16]
 80110d8:	9b05      	ldr	r3, [sp, #20]
 80110da:	3301      	adds	r3, #1
 80110dc:	9305      	str	r3, [sp, #20]
 80110de:	2301      	movs	r3, #1
 80110e0:	930a      	str	r3, [sp, #40]	; 0x28
 80110e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	f47f af70 	bne.w	8010fca <_dtoa_r+0x6ea>
 80110ea:	2001      	movs	r0, #1
 80110ec:	e775      	b.n	8010fda <_dtoa_r+0x6fa>
 80110ee:	2300      	movs	r3, #0
 80110f0:	e7f6      	b.n	80110e0 <_dtoa_r+0x800>
 80110f2:	9b02      	ldr	r3, [sp, #8]
 80110f4:	e7f4      	b.n	80110e0 <_dtoa_r+0x800>
 80110f6:	920a      	str	r2, [sp, #40]	; 0x28
 80110f8:	e7f3      	b.n	80110e2 <_dtoa_r+0x802>
 80110fa:	d082      	beq.n	8011002 <_dtoa_r+0x722>
 80110fc:	4610      	mov	r0, r2
 80110fe:	301c      	adds	r0, #28
 8011100:	e778      	b.n	8010ff4 <_dtoa_r+0x714>
 8011102:	f1b9 0f00 	cmp.w	r9, #0
 8011106:	dc37      	bgt.n	8011178 <_dtoa_r+0x898>
 8011108:	9b06      	ldr	r3, [sp, #24]
 801110a:	2b02      	cmp	r3, #2
 801110c:	dd34      	ble.n	8011178 <_dtoa_r+0x898>
 801110e:	46ca      	mov	sl, r9
 8011110:	f1ba 0f00 	cmp.w	sl, #0
 8011114:	d10d      	bne.n	8011132 <_dtoa_r+0x852>
 8011116:	4621      	mov	r1, r4
 8011118:	4653      	mov	r3, sl
 801111a:	2205      	movs	r2, #5
 801111c:	4630      	mov	r0, r6
 801111e:	f000 f9cd 	bl	80114bc <__multadd>
 8011122:	4601      	mov	r1, r0
 8011124:	4604      	mov	r4, r0
 8011126:	4628      	mov	r0, r5
 8011128:	f000 fbe8 	bl	80118fc <__mcmp>
 801112c:	2800      	cmp	r0, #0
 801112e:	f73f adeb 	bgt.w	8010d08 <_dtoa_r+0x428>
 8011132:	9b08      	ldr	r3, [sp, #32]
 8011134:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011138:	ea6f 0b03 	mvn.w	fp, r3
 801113c:	f04f 0900 	mov.w	r9, #0
 8011140:	4621      	mov	r1, r4
 8011142:	4630      	mov	r0, r6
 8011144:	f000 f998 	bl	8011478 <_Bfree>
 8011148:	2f00      	cmp	r7, #0
 801114a:	f43f aea8 	beq.w	8010e9e <_dtoa_r+0x5be>
 801114e:	f1b9 0f00 	cmp.w	r9, #0
 8011152:	d005      	beq.n	8011160 <_dtoa_r+0x880>
 8011154:	45b9      	cmp	r9, r7
 8011156:	d003      	beq.n	8011160 <_dtoa_r+0x880>
 8011158:	4649      	mov	r1, r9
 801115a:	4630      	mov	r0, r6
 801115c:	f000 f98c 	bl	8011478 <_Bfree>
 8011160:	4639      	mov	r1, r7
 8011162:	4630      	mov	r0, r6
 8011164:	f000 f988 	bl	8011478 <_Bfree>
 8011168:	e699      	b.n	8010e9e <_dtoa_r+0x5be>
 801116a:	2400      	movs	r4, #0
 801116c:	4627      	mov	r7, r4
 801116e:	e7e0      	b.n	8011132 <_dtoa_r+0x852>
 8011170:	46bb      	mov	fp, r7
 8011172:	4604      	mov	r4, r0
 8011174:	4607      	mov	r7, r0
 8011176:	e5c7      	b.n	8010d08 <_dtoa_r+0x428>
 8011178:	9b07      	ldr	r3, [sp, #28]
 801117a:	46ca      	mov	sl, r9
 801117c:	2b00      	cmp	r3, #0
 801117e:	f000 8100 	beq.w	8011382 <_dtoa_r+0xaa2>
 8011182:	f1b8 0f00 	cmp.w	r8, #0
 8011186:	dd05      	ble.n	8011194 <_dtoa_r+0x8b4>
 8011188:	4639      	mov	r1, r7
 801118a:	4642      	mov	r2, r8
 801118c:	4630      	mov	r0, r6
 801118e:	f000 fb45 	bl	801181c <__lshift>
 8011192:	4607      	mov	r7, r0
 8011194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011196:	2b00      	cmp	r3, #0
 8011198:	d05d      	beq.n	8011256 <_dtoa_r+0x976>
 801119a:	6879      	ldr	r1, [r7, #4]
 801119c:	4630      	mov	r0, r6
 801119e:	f000 f92b 	bl	80113f8 <_Balloc>
 80111a2:	4680      	mov	r8, r0
 80111a4:	b928      	cbnz	r0, 80111b2 <_dtoa_r+0x8d2>
 80111a6:	4b82      	ldr	r3, [pc, #520]	; (80113b0 <_dtoa_r+0xad0>)
 80111a8:	4602      	mov	r2, r0
 80111aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80111ae:	f7ff bbaf 	b.w	8010910 <_dtoa_r+0x30>
 80111b2:	693a      	ldr	r2, [r7, #16]
 80111b4:	3202      	adds	r2, #2
 80111b6:	0092      	lsls	r2, r2, #2
 80111b8:	f107 010c 	add.w	r1, r7, #12
 80111bc:	300c      	adds	r0, #12
 80111be:	f000 f901 	bl	80113c4 <memcpy>
 80111c2:	2201      	movs	r2, #1
 80111c4:	4641      	mov	r1, r8
 80111c6:	4630      	mov	r0, r6
 80111c8:	f000 fb28 	bl	801181c <__lshift>
 80111cc:	9b01      	ldr	r3, [sp, #4]
 80111ce:	3301      	adds	r3, #1
 80111d0:	9304      	str	r3, [sp, #16]
 80111d2:	9b01      	ldr	r3, [sp, #4]
 80111d4:	4453      	add	r3, sl
 80111d6:	9308      	str	r3, [sp, #32]
 80111d8:	9b02      	ldr	r3, [sp, #8]
 80111da:	f003 0301 	and.w	r3, r3, #1
 80111de:	46b9      	mov	r9, r7
 80111e0:	9307      	str	r3, [sp, #28]
 80111e2:	4607      	mov	r7, r0
 80111e4:	9b04      	ldr	r3, [sp, #16]
 80111e6:	4621      	mov	r1, r4
 80111e8:	3b01      	subs	r3, #1
 80111ea:	4628      	mov	r0, r5
 80111ec:	9302      	str	r3, [sp, #8]
 80111ee:	f7ff fae9 	bl	80107c4 <quorem>
 80111f2:	4603      	mov	r3, r0
 80111f4:	3330      	adds	r3, #48	; 0x30
 80111f6:	9005      	str	r0, [sp, #20]
 80111f8:	4649      	mov	r1, r9
 80111fa:	4628      	mov	r0, r5
 80111fc:	9309      	str	r3, [sp, #36]	; 0x24
 80111fe:	f000 fb7d 	bl	80118fc <__mcmp>
 8011202:	463a      	mov	r2, r7
 8011204:	4682      	mov	sl, r0
 8011206:	4621      	mov	r1, r4
 8011208:	4630      	mov	r0, r6
 801120a:	f000 fb93 	bl	8011934 <__mdiff>
 801120e:	68c2      	ldr	r2, [r0, #12]
 8011210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011212:	4680      	mov	r8, r0
 8011214:	bb0a      	cbnz	r2, 801125a <_dtoa_r+0x97a>
 8011216:	4601      	mov	r1, r0
 8011218:	4628      	mov	r0, r5
 801121a:	f000 fb6f 	bl	80118fc <__mcmp>
 801121e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011220:	4602      	mov	r2, r0
 8011222:	4641      	mov	r1, r8
 8011224:	4630      	mov	r0, r6
 8011226:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801122a:	f000 f925 	bl	8011478 <_Bfree>
 801122e:	9b06      	ldr	r3, [sp, #24]
 8011230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011232:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011236:	ea43 0102 	orr.w	r1, r3, r2
 801123a:	9b07      	ldr	r3, [sp, #28]
 801123c:	430b      	orrs	r3, r1
 801123e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011240:	d10d      	bne.n	801125e <_dtoa_r+0x97e>
 8011242:	2b39      	cmp	r3, #57	; 0x39
 8011244:	d029      	beq.n	801129a <_dtoa_r+0x9ba>
 8011246:	f1ba 0f00 	cmp.w	sl, #0
 801124a:	dd01      	ble.n	8011250 <_dtoa_r+0x970>
 801124c:	9b05      	ldr	r3, [sp, #20]
 801124e:	3331      	adds	r3, #49	; 0x31
 8011250:	9a02      	ldr	r2, [sp, #8]
 8011252:	7013      	strb	r3, [r2, #0]
 8011254:	e774      	b.n	8011140 <_dtoa_r+0x860>
 8011256:	4638      	mov	r0, r7
 8011258:	e7b8      	b.n	80111cc <_dtoa_r+0x8ec>
 801125a:	2201      	movs	r2, #1
 801125c:	e7e1      	b.n	8011222 <_dtoa_r+0x942>
 801125e:	f1ba 0f00 	cmp.w	sl, #0
 8011262:	db06      	blt.n	8011272 <_dtoa_r+0x992>
 8011264:	9906      	ldr	r1, [sp, #24]
 8011266:	ea41 0a0a 	orr.w	sl, r1, sl
 801126a:	9907      	ldr	r1, [sp, #28]
 801126c:	ea5a 0101 	orrs.w	r1, sl, r1
 8011270:	d120      	bne.n	80112b4 <_dtoa_r+0x9d4>
 8011272:	2a00      	cmp	r2, #0
 8011274:	ddec      	ble.n	8011250 <_dtoa_r+0x970>
 8011276:	4629      	mov	r1, r5
 8011278:	2201      	movs	r2, #1
 801127a:	4630      	mov	r0, r6
 801127c:	9304      	str	r3, [sp, #16]
 801127e:	f000 facd 	bl	801181c <__lshift>
 8011282:	4621      	mov	r1, r4
 8011284:	4605      	mov	r5, r0
 8011286:	f000 fb39 	bl	80118fc <__mcmp>
 801128a:	2800      	cmp	r0, #0
 801128c:	9b04      	ldr	r3, [sp, #16]
 801128e:	dc02      	bgt.n	8011296 <_dtoa_r+0x9b6>
 8011290:	d1de      	bne.n	8011250 <_dtoa_r+0x970>
 8011292:	07da      	lsls	r2, r3, #31
 8011294:	d5dc      	bpl.n	8011250 <_dtoa_r+0x970>
 8011296:	2b39      	cmp	r3, #57	; 0x39
 8011298:	d1d8      	bne.n	801124c <_dtoa_r+0x96c>
 801129a:	9a02      	ldr	r2, [sp, #8]
 801129c:	2339      	movs	r3, #57	; 0x39
 801129e:	7013      	strb	r3, [r2, #0]
 80112a0:	4643      	mov	r3, r8
 80112a2:	4698      	mov	r8, r3
 80112a4:	3b01      	subs	r3, #1
 80112a6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80112aa:	2a39      	cmp	r2, #57	; 0x39
 80112ac:	d051      	beq.n	8011352 <_dtoa_r+0xa72>
 80112ae:	3201      	adds	r2, #1
 80112b0:	701a      	strb	r2, [r3, #0]
 80112b2:	e745      	b.n	8011140 <_dtoa_r+0x860>
 80112b4:	2a00      	cmp	r2, #0
 80112b6:	dd03      	ble.n	80112c0 <_dtoa_r+0x9e0>
 80112b8:	2b39      	cmp	r3, #57	; 0x39
 80112ba:	d0ee      	beq.n	801129a <_dtoa_r+0x9ba>
 80112bc:	3301      	adds	r3, #1
 80112be:	e7c7      	b.n	8011250 <_dtoa_r+0x970>
 80112c0:	9a04      	ldr	r2, [sp, #16]
 80112c2:	9908      	ldr	r1, [sp, #32]
 80112c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80112c8:	428a      	cmp	r2, r1
 80112ca:	d02b      	beq.n	8011324 <_dtoa_r+0xa44>
 80112cc:	4629      	mov	r1, r5
 80112ce:	2300      	movs	r3, #0
 80112d0:	220a      	movs	r2, #10
 80112d2:	4630      	mov	r0, r6
 80112d4:	f000 f8f2 	bl	80114bc <__multadd>
 80112d8:	45b9      	cmp	r9, r7
 80112da:	4605      	mov	r5, r0
 80112dc:	f04f 0300 	mov.w	r3, #0
 80112e0:	f04f 020a 	mov.w	r2, #10
 80112e4:	4649      	mov	r1, r9
 80112e6:	4630      	mov	r0, r6
 80112e8:	d107      	bne.n	80112fa <_dtoa_r+0xa1a>
 80112ea:	f000 f8e7 	bl	80114bc <__multadd>
 80112ee:	4681      	mov	r9, r0
 80112f0:	4607      	mov	r7, r0
 80112f2:	9b04      	ldr	r3, [sp, #16]
 80112f4:	3301      	adds	r3, #1
 80112f6:	9304      	str	r3, [sp, #16]
 80112f8:	e774      	b.n	80111e4 <_dtoa_r+0x904>
 80112fa:	f000 f8df 	bl	80114bc <__multadd>
 80112fe:	4639      	mov	r1, r7
 8011300:	4681      	mov	r9, r0
 8011302:	2300      	movs	r3, #0
 8011304:	220a      	movs	r2, #10
 8011306:	4630      	mov	r0, r6
 8011308:	f000 f8d8 	bl	80114bc <__multadd>
 801130c:	4607      	mov	r7, r0
 801130e:	e7f0      	b.n	80112f2 <_dtoa_r+0xa12>
 8011310:	f1ba 0f00 	cmp.w	sl, #0
 8011314:	9a01      	ldr	r2, [sp, #4]
 8011316:	bfcc      	ite	gt
 8011318:	46d0      	movgt	r8, sl
 801131a:	f04f 0801 	movle.w	r8, #1
 801131e:	4490      	add	r8, r2
 8011320:	f04f 0900 	mov.w	r9, #0
 8011324:	4629      	mov	r1, r5
 8011326:	2201      	movs	r2, #1
 8011328:	4630      	mov	r0, r6
 801132a:	9302      	str	r3, [sp, #8]
 801132c:	f000 fa76 	bl	801181c <__lshift>
 8011330:	4621      	mov	r1, r4
 8011332:	4605      	mov	r5, r0
 8011334:	f000 fae2 	bl	80118fc <__mcmp>
 8011338:	2800      	cmp	r0, #0
 801133a:	dcb1      	bgt.n	80112a0 <_dtoa_r+0x9c0>
 801133c:	d102      	bne.n	8011344 <_dtoa_r+0xa64>
 801133e:	9b02      	ldr	r3, [sp, #8]
 8011340:	07db      	lsls	r3, r3, #31
 8011342:	d4ad      	bmi.n	80112a0 <_dtoa_r+0x9c0>
 8011344:	4643      	mov	r3, r8
 8011346:	4698      	mov	r8, r3
 8011348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801134c:	2a30      	cmp	r2, #48	; 0x30
 801134e:	d0fa      	beq.n	8011346 <_dtoa_r+0xa66>
 8011350:	e6f6      	b.n	8011140 <_dtoa_r+0x860>
 8011352:	9a01      	ldr	r2, [sp, #4]
 8011354:	429a      	cmp	r2, r3
 8011356:	d1a4      	bne.n	80112a2 <_dtoa_r+0x9c2>
 8011358:	f10b 0b01 	add.w	fp, fp, #1
 801135c:	2331      	movs	r3, #49	; 0x31
 801135e:	e778      	b.n	8011252 <_dtoa_r+0x972>
 8011360:	4b14      	ldr	r3, [pc, #80]	; (80113b4 <_dtoa_r+0xad4>)
 8011362:	f7ff bb27 	b.w	80109b4 <_dtoa_r+0xd4>
 8011366:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011368:	2b00      	cmp	r3, #0
 801136a:	f47f ab03 	bne.w	8010974 <_dtoa_r+0x94>
 801136e:	4b12      	ldr	r3, [pc, #72]	; (80113b8 <_dtoa_r+0xad8>)
 8011370:	f7ff bb20 	b.w	80109b4 <_dtoa_r+0xd4>
 8011374:	f1ba 0f00 	cmp.w	sl, #0
 8011378:	dc03      	bgt.n	8011382 <_dtoa_r+0xaa2>
 801137a:	9b06      	ldr	r3, [sp, #24]
 801137c:	2b02      	cmp	r3, #2
 801137e:	f73f aec7 	bgt.w	8011110 <_dtoa_r+0x830>
 8011382:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011386:	4621      	mov	r1, r4
 8011388:	4628      	mov	r0, r5
 801138a:	f7ff fa1b 	bl	80107c4 <quorem>
 801138e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011392:	f808 3b01 	strb.w	r3, [r8], #1
 8011396:	9a01      	ldr	r2, [sp, #4]
 8011398:	eba8 0202 	sub.w	r2, r8, r2
 801139c:	4592      	cmp	sl, r2
 801139e:	ddb7      	ble.n	8011310 <_dtoa_r+0xa30>
 80113a0:	4629      	mov	r1, r5
 80113a2:	2300      	movs	r3, #0
 80113a4:	220a      	movs	r2, #10
 80113a6:	4630      	mov	r0, r6
 80113a8:	f000 f888 	bl	80114bc <__multadd>
 80113ac:	4605      	mov	r5, r0
 80113ae:	e7ea      	b.n	8011386 <_dtoa_r+0xaa6>
 80113b0:	08012787 	.word	0x08012787
 80113b4:	080126e4 	.word	0x080126e4
 80113b8:	08012708 	.word	0x08012708

080113bc <_localeconv_r>:
 80113bc:	4800      	ldr	r0, [pc, #0]	; (80113c0 <_localeconv_r+0x4>)
 80113be:	4770      	bx	lr
 80113c0:	240002d8 	.word	0x240002d8

080113c4 <memcpy>:
 80113c4:	440a      	add	r2, r1
 80113c6:	4291      	cmp	r1, r2
 80113c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80113cc:	d100      	bne.n	80113d0 <memcpy+0xc>
 80113ce:	4770      	bx	lr
 80113d0:	b510      	push	{r4, lr}
 80113d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80113d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80113da:	4291      	cmp	r1, r2
 80113dc:	d1f9      	bne.n	80113d2 <memcpy+0xe>
 80113de:	bd10      	pop	{r4, pc}

080113e0 <__malloc_lock>:
 80113e0:	4801      	ldr	r0, [pc, #4]	; (80113e8 <__malloc_lock+0x8>)
 80113e2:	f000 bbd4 	b.w	8011b8e <__retarget_lock_acquire_recursive>
 80113e6:	bf00      	nop
 80113e8:	2400200c 	.word	0x2400200c

080113ec <__malloc_unlock>:
 80113ec:	4801      	ldr	r0, [pc, #4]	; (80113f4 <__malloc_unlock+0x8>)
 80113ee:	f000 bbcf 	b.w	8011b90 <__retarget_lock_release_recursive>
 80113f2:	bf00      	nop
 80113f4:	2400200c 	.word	0x2400200c

080113f8 <_Balloc>:
 80113f8:	b570      	push	{r4, r5, r6, lr}
 80113fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80113fc:	4604      	mov	r4, r0
 80113fe:	460d      	mov	r5, r1
 8011400:	b976      	cbnz	r6, 8011420 <_Balloc+0x28>
 8011402:	2010      	movs	r0, #16
 8011404:	f7fe fc92 	bl	800fd2c <malloc>
 8011408:	4602      	mov	r2, r0
 801140a:	6260      	str	r0, [r4, #36]	; 0x24
 801140c:	b920      	cbnz	r0, 8011418 <_Balloc+0x20>
 801140e:	4b18      	ldr	r3, [pc, #96]	; (8011470 <_Balloc+0x78>)
 8011410:	4818      	ldr	r0, [pc, #96]	; (8011474 <_Balloc+0x7c>)
 8011412:	2166      	movs	r1, #102	; 0x66
 8011414:	f000 fb8a 	bl	8011b2c <__assert_func>
 8011418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801141c:	6006      	str	r6, [r0, #0]
 801141e:	60c6      	str	r6, [r0, #12]
 8011420:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011422:	68f3      	ldr	r3, [r6, #12]
 8011424:	b183      	cbz	r3, 8011448 <_Balloc+0x50>
 8011426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801142e:	b9b8      	cbnz	r0, 8011460 <_Balloc+0x68>
 8011430:	2101      	movs	r1, #1
 8011432:	fa01 f605 	lsl.w	r6, r1, r5
 8011436:	1d72      	adds	r2, r6, #5
 8011438:	0092      	lsls	r2, r2, #2
 801143a:	4620      	mov	r0, r4
 801143c:	f000 fb60 	bl	8011b00 <_calloc_r>
 8011440:	b160      	cbz	r0, 801145c <_Balloc+0x64>
 8011442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011446:	e00e      	b.n	8011466 <_Balloc+0x6e>
 8011448:	2221      	movs	r2, #33	; 0x21
 801144a:	2104      	movs	r1, #4
 801144c:	4620      	mov	r0, r4
 801144e:	f000 fb57 	bl	8011b00 <_calloc_r>
 8011452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011454:	60f0      	str	r0, [r6, #12]
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d1e4      	bne.n	8011426 <_Balloc+0x2e>
 801145c:	2000      	movs	r0, #0
 801145e:	bd70      	pop	{r4, r5, r6, pc}
 8011460:	6802      	ldr	r2, [r0, #0]
 8011462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011466:	2300      	movs	r3, #0
 8011468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801146c:	e7f7      	b.n	801145e <_Balloc+0x66>
 801146e:	bf00      	nop
 8011470:	08012715 	.word	0x08012715
 8011474:	08012798 	.word	0x08012798

08011478 <_Bfree>:
 8011478:	b570      	push	{r4, r5, r6, lr}
 801147a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801147c:	4605      	mov	r5, r0
 801147e:	460c      	mov	r4, r1
 8011480:	b976      	cbnz	r6, 80114a0 <_Bfree+0x28>
 8011482:	2010      	movs	r0, #16
 8011484:	f7fe fc52 	bl	800fd2c <malloc>
 8011488:	4602      	mov	r2, r0
 801148a:	6268      	str	r0, [r5, #36]	; 0x24
 801148c:	b920      	cbnz	r0, 8011498 <_Bfree+0x20>
 801148e:	4b09      	ldr	r3, [pc, #36]	; (80114b4 <_Bfree+0x3c>)
 8011490:	4809      	ldr	r0, [pc, #36]	; (80114b8 <_Bfree+0x40>)
 8011492:	218a      	movs	r1, #138	; 0x8a
 8011494:	f000 fb4a 	bl	8011b2c <__assert_func>
 8011498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801149c:	6006      	str	r6, [r0, #0]
 801149e:	60c6      	str	r6, [r0, #12]
 80114a0:	b13c      	cbz	r4, 80114b2 <_Bfree+0x3a>
 80114a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80114a4:	6862      	ldr	r2, [r4, #4]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80114ac:	6021      	str	r1, [r4, #0]
 80114ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80114b2:	bd70      	pop	{r4, r5, r6, pc}
 80114b4:	08012715 	.word	0x08012715
 80114b8:	08012798 	.word	0x08012798

080114bc <__multadd>:
 80114bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114c0:	690d      	ldr	r5, [r1, #16]
 80114c2:	4607      	mov	r7, r0
 80114c4:	460c      	mov	r4, r1
 80114c6:	461e      	mov	r6, r3
 80114c8:	f101 0c14 	add.w	ip, r1, #20
 80114cc:	2000      	movs	r0, #0
 80114ce:	f8dc 3000 	ldr.w	r3, [ip]
 80114d2:	b299      	uxth	r1, r3
 80114d4:	fb02 6101 	mla	r1, r2, r1, r6
 80114d8:	0c1e      	lsrs	r6, r3, #16
 80114da:	0c0b      	lsrs	r3, r1, #16
 80114dc:	fb02 3306 	mla	r3, r2, r6, r3
 80114e0:	b289      	uxth	r1, r1
 80114e2:	3001      	adds	r0, #1
 80114e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80114e8:	4285      	cmp	r5, r0
 80114ea:	f84c 1b04 	str.w	r1, [ip], #4
 80114ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80114f2:	dcec      	bgt.n	80114ce <__multadd+0x12>
 80114f4:	b30e      	cbz	r6, 801153a <__multadd+0x7e>
 80114f6:	68a3      	ldr	r3, [r4, #8]
 80114f8:	42ab      	cmp	r3, r5
 80114fa:	dc19      	bgt.n	8011530 <__multadd+0x74>
 80114fc:	6861      	ldr	r1, [r4, #4]
 80114fe:	4638      	mov	r0, r7
 8011500:	3101      	adds	r1, #1
 8011502:	f7ff ff79 	bl	80113f8 <_Balloc>
 8011506:	4680      	mov	r8, r0
 8011508:	b928      	cbnz	r0, 8011516 <__multadd+0x5a>
 801150a:	4602      	mov	r2, r0
 801150c:	4b0c      	ldr	r3, [pc, #48]	; (8011540 <__multadd+0x84>)
 801150e:	480d      	ldr	r0, [pc, #52]	; (8011544 <__multadd+0x88>)
 8011510:	21b5      	movs	r1, #181	; 0xb5
 8011512:	f000 fb0b 	bl	8011b2c <__assert_func>
 8011516:	6922      	ldr	r2, [r4, #16]
 8011518:	3202      	adds	r2, #2
 801151a:	f104 010c 	add.w	r1, r4, #12
 801151e:	0092      	lsls	r2, r2, #2
 8011520:	300c      	adds	r0, #12
 8011522:	f7ff ff4f 	bl	80113c4 <memcpy>
 8011526:	4621      	mov	r1, r4
 8011528:	4638      	mov	r0, r7
 801152a:	f7ff ffa5 	bl	8011478 <_Bfree>
 801152e:	4644      	mov	r4, r8
 8011530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011534:	3501      	adds	r5, #1
 8011536:	615e      	str	r6, [r3, #20]
 8011538:	6125      	str	r5, [r4, #16]
 801153a:	4620      	mov	r0, r4
 801153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011540:	08012787 	.word	0x08012787
 8011544:	08012798 	.word	0x08012798

08011548 <__hi0bits>:
 8011548:	0c03      	lsrs	r3, r0, #16
 801154a:	041b      	lsls	r3, r3, #16
 801154c:	b9d3      	cbnz	r3, 8011584 <__hi0bits+0x3c>
 801154e:	0400      	lsls	r0, r0, #16
 8011550:	2310      	movs	r3, #16
 8011552:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011556:	bf04      	itt	eq
 8011558:	0200      	lsleq	r0, r0, #8
 801155a:	3308      	addeq	r3, #8
 801155c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011560:	bf04      	itt	eq
 8011562:	0100      	lsleq	r0, r0, #4
 8011564:	3304      	addeq	r3, #4
 8011566:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801156a:	bf04      	itt	eq
 801156c:	0080      	lsleq	r0, r0, #2
 801156e:	3302      	addeq	r3, #2
 8011570:	2800      	cmp	r0, #0
 8011572:	db05      	blt.n	8011580 <__hi0bits+0x38>
 8011574:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011578:	f103 0301 	add.w	r3, r3, #1
 801157c:	bf08      	it	eq
 801157e:	2320      	moveq	r3, #32
 8011580:	4618      	mov	r0, r3
 8011582:	4770      	bx	lr
 8011584:	2300      	movs	r3, #0
 8011586:	e7e4      	b.n	8011552 <__hi0bits+0xa>

08011588 <__lo0bits>:
 8011588:	6803      	ldr	r3, [r0, #0]
 801158a:	f013 0207 	ands.w	r2, r3, #7
 801158e:	4601      	mov	r1, r0
 8011590:	d00b      	beq.n	80115aa <__lo0bits+0x22>
 8011592:	07da      	lsls	r2, r3, #31
 8011594:	d423      	bmi.n	80115de <__lo0bits+0x56>
 8011596:	0798      	lsls	r0, r3, #30
 8011598:	bf49      	itett	mi
 801159a:	085b      	lsrmi	r3, r3, #1
 801159c:	089b      	lsrpl	r3, r3, #2
 801159e:	2001      	movmi	r0, #1
 80115a0:	600b      	strmi	r3, [r1, #0]
 80115a2:	bf5c      	itt	pl
 80115a4:	600b      	strpl	r3, [r1, #0]
 80115a6:	2002      	movpl	r0, #2
 80115a8:	4770      	bx	lr
 80115aa:	b298      	uxth	r0, r3
 80115ac:	b9a8      	cbnz	r0, 80115da <__lo0bits+0x52>
 80115ae:	0c1b      	lsrs	r3, r3, #16
 80115b0:	2010      	movs	r0, #16
 80115b2:	b2da      	uxtb	r2, r3
 80115b4:	b90a      	cbnz	r2, 80115ba <__lo0bits+0x32>
 80115b6:	3008      	adds	r0, #8
 80115b8:	0a1b      	lsrs	r3, r3, #8
 80115ba:	071a      	lsls	r2, r3, #28
 80115bc:	bf04      	itt	eq
 80115be:	091b      	lsreq	r3, r3, #4
 80115c0:	3004      	addeq	r0, #4
 80115c2:	079a      	lsls	r2, r3, #30
 80115c4:	bf04      	itt	eq
 80115c6:	089b      	lsreq	r3, r3, #2
 80115c8:	3002      	addeq	r0, #2
 80115ca:	07da      	lsls	r2, r3, #31
 80115cc:	d403      	bmi.n	80115d6 <__lo0bits+0x4e>
 80115ce:	085b      	lsrs	r3, r3, #1
 80115d0:	f100 0001 	add.w	r0, r0, #1
 80115d4:	d005      	beq.n	80115e2 <__lo0bits+0x5a>
 80115d6:	600b      	str	r3, [r1, #0]
 80115d8:	4770      	bx	lr
 80115da:	4610      	mov	r0, r2
 80115dc:	e7e9      	b.n	80115b2 <__lo0bits+0x2a>
 80115de:	2000      	movs	r0, #0
 80115e0:	4770      	bx	lr
 80115e2:	2020      	movs	r0, #32
 80115e4:	4770      	bx	lr
	...

080115e8 <__i2b>:
 80115e8:	b510      	push	{r4, lr}
 80115ea:	460c      	mov	r4, r1
 80115ec:	2101      	movs	r1, #1
 80115ee:	f7ff ff03 	bl	80113f8 <_Balloc>
 80115f2:	4602      	mov	r2, r0
 80115f4:	b928      	cbnz	r0, 8011602 <__i2b+0x1a>
 80115f6:	4b05      	ldr	r3, [pc, #20]	; (801160c <__i2b+0x24>)
 80115f8:	4805      	ldr	r0, [pc, #20]	; (8011610 <__i2b+0x28>)
 80115fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80115fe:	f000 fa95 	bl	8011b2c <__assert_func>
 8011602:	2301      	movs	r3, #1
 8011604:	6144      	str	r4, [r0, #20]
 8011606:	6103      	str	r3, [r0, #16]
 8011608:	bd10      	pop	{r4, pc}
 801160a:	bf00      	nop
 801160c:	08012787 	.word	0x08012787
 8011610:	08012798 	.word	0x08012798

08011614 <__multiply>:
 8011614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011618:	4691      	mov	r9, r2
 801161a:	690a      	ldr	r2, [r1, #16]
 801161c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011620:	429a      	cmp	r2, r3
 8011622:	bfb8      	it	lt
 8011624:	460b      	movlt	r3, r1
 8011626:	460c      	mov	r4, r1
 8011628:	bfbc      	itt	lt
 801162a:	464c      	movlt	r4, r9
 801162c:	4699      	movlt	r9, r3
 801162e:	6927      	ldr	r7, [r4, #16]
 8011630:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011634:	68a3      	ldr	r3, [r4, #8]
 8011636:	6861      	ldr	r1, [r4, #4]
 8011638:	eb07 060a 	add.w	r6, r7, sl
 801163c:	42b3      	cmp	r3, r6
 801163e:	b085      	sub	sp, #20
 8011640:	bfb8      	it	lt
 8011642:	3101      	addlt	r1, #1
 8011644:	f7ff fed8 	bl	80113f8 <_Balloc>
 8011648:	b930      	cbnz	r0, 8011658 <__multiply+0x44>
 801164a:	4602      	mov	r2, r0
 801164c:	4b44      	ldr	r3, [pc, #272]	; (8011760 <__multiply+0x14c>)
 801164e:	4845      	ldr	r0, [pc, #276]	; (8011764 <__multiply+0x150>)
 8011650:	f240 115d 	movw	r1, #349	; 0x15d
 8011654:	f000 fa6a 	bl	8011b2c <__assert_func>
 8011658:	f100 0514 	add.w	r5, r0, #20
 801165c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011660:	462b      	mov	r3, r5
 8011662:	2200      	movs	r2, #0
 8011664:	4543      	cmp	r3, r8
 8011666:	d321      	bcc.n	80116ac <__multiply+0x98>
 8011668:	f104 0314 	add.w	r3, r4, #20
 801166c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011670:	f109 0314 	add.w	r3, r9, #20
 8011674:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011678:	9202      	str	r2, [sp, #8]
 801167a:	1b3a      	subs	r2, r7, r4
 801167c:	3a15      	subs	r2, #21
 801167e:	f022 0203 	bic.w	r2, r2, #3
 8011682:	3204      	adds	r2, #4
 8011684:	f104 0115 	add.w	r1, r4, #21
 8011688:	428f      	cmp	r7, r1
 801168a:	bf38      	it	cc
 801168c:	2204      	movcc	r2, #4
 801168e:	9201      	str	r2, [sp, #4]
 8011690:	9a02      	ldr	r2, [sp, #8]
 8011692:	9303      	str	r3, [sp, #12]
 8011694:	429a      	cmp	r2, r3
 8011696:	d80c      	bhi.n	80116b2 <__multiply+0x9e>
 8011698:	2e00      	cmp	r6, #0
 801169a:	dd03      	ble.n	80116a4 <__multiply+0x90>
 801169c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d05a      	beq.n	801175a <__multiply+0x146>
 80116a4:	6106      	str	r6, [r0, #16]
 80116a6:	b005      	add	sp, #20
 80116a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ac:	f843 2b04 	str.w	r2, [r3], #4
 80116b0:	e7d8      	b.n	8011664 <__multiply+0x50>
 80116b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80116b6:	f1ba 0f00 	cmp.w	sl, #0
 80116ba:	d024      	beq.n	8011706 <__multiply+0xf2>
 80116bc:	f104 0e14 	add.w	lr, r4, #20
 80116c0:	46a9      	mov	r9, r5
 80116c2:	f04f 0c00 	mov.w	ip, #0
 80116c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80116ca:	f8d9 1000 	ldr.w	r1, [r9]
 80116ce:	fa1f fb82 	uxth.w	fp, r2
 80116d2:	b289      	uxth	r1, r1
 80116d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80116d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80116dc:	f8d9 2000 	ldr.w	r2, [r9]
 80116e0:	4461      	add	r1, ip
 80116e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80116e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80116ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80116ee:	b289      	uxth	r1, r1
 80116f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80116f4:	4577      	cmp	r7, lr
 80116f6:	f849 1b04 	str.w	r1, [r9], #4
 80116fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80116fe:	d8e2      	bhi.n	80116c6 <__multiply+0xb2>
 8011700:	9a01      	ldr	r2, [sp, #4]
 8011702:	f845 c002 	str.w	ip, [r5, r2]
 8011706:	9a03      	ldr	r2, [sp, #12]
 8011708:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801170c:	3304      	adds	r3, #4
 801170e:	f1b9 0f00 	cmp.w	r9, #0
 8011712:	d020      	beq.n	8011756 <__multiply+0x142>
 8011714:	6829      	ldr	r1, [r5, #0]
 8011716:	f104 0c14 	add.w	ip, r4, #20
 801171a:	46ae      	mov	lr, r5
 801171c:	f04f 0a00 	mov.w	sl, #0
 8011720:	f8bc b000 	ldrh.w	fp, [ip]
 8011724:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011728:	fb09 220b 	mla	r2, r9, fp, r2
 801172c:	4492      	add	sl, r2
 801172e:	b289      	uxth	r1, r1
 8011730:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011734:	f84e 1b04 	str.w	r1, [lr], #4
 8011738:	f85c 2b04 	ldr.w	r2, [ip], #4
 801173c:	f8be 1000 	ldrh.w	r1, [lr]
 8011740:	0c12      	lsrs	r2, r2, #16
 8011742:	fb09 1102 	mla	r1, r9, r2, r1
 8011746:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801174a:	4567      	cmp	r7, ip
 801174c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011750:	d8e6      	bhi.n	8011720 <__multiply+0x10c>
 8011752:	9a01      	ldr	r2, [sp, #4]
 8011754:	50a9      	str	r1, [r5, r2]
 8011756:	3504      	adds	r5, #4
 8011758:	e79a      	b.n	8011690 <__multiply+0x7c>
 801175a:	3e01      	subs	r6, #1
 801175c:	e79c      	b.n	8011698 <__multiply+0x84>
 801175e:	bf00      	nop
 8011760:	08012787 	.word	0x08012787
 8011764:	08012798 	.word	0x08012798

08011768 <__pow5mult>:
 8011768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801176c:	4615      	mov	r5, r2
 801176e:	f012 0203 	ands.w	r2, r2, #3
 8011772:	4606      	mov	r6, r0
 8011774:	460f      	mov	r7, r1
 8011776:	d007      	beq.n	8011788 <__pow5mult+0x20>
 8011778:	4c25      	ldr	r4, [pc, #148]	; (8011810 <__pow5mult+0xa8>)
 801177a:	3a01      	subs	r2, #1
 801177c:	2300      	movs	r3, #0
 801177e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011782:	f7ff fe9b 	bl	80114bc <__multadd>
 8011786:	4607      	mov	r7, r0
 8011788:	10ad      	asrs	r5, r5, #2
 801178a:	d03d      	beq.n	8011808 <__pow5mult+0xa0>
 801178c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801178e:	b97c      	cbnz	r4, 80117b0 <__pow5mult+0x48>
 8011790:	2010      	movs	r0, #16
 8011792:	f7fe facb 	bl	800fd2c <malloc>
 8011796:	4602      	mov	r2, r0
 8011798:	6270      	str	r0, [r6, #36]	; 0x24
 801179a:	b928      	cbnz	r0, 80117a8 <__pow5mult+0x40>
 801179c:	4b1d      	ldr	r3, [pc, #116]	; (8011814 <__pow5mult+0xac>)
 801179e:	481e      	ldr	r0, [pc, #120]	; (8011818 <__pow5mult+0xb0>)
 80117a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80117a4:	f000 f9c2 	bl	8011b2c <__assert_func>
 80117a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80117ac:	6004      	str	r4, [r0, #0]
 80117ae:	60c4      	str	r4, [r0, #12]
 80117b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80117b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80117b8:	b94c      	cbnz	r4, 80117ce <__pow5mult+0x66>
 80117ba:	f240 2171 	movw	r1, #625	; 0x271
 80117be:	4630      	mov	r0, r6
 80117c0:	f7ff ff12 	bl	80115e8 <__i2b>
 80117c4:	2300      	movs	r3, #0
 80117c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80117ca:	4604      	mov	r4, r0
 80117cc:	6003      	str	r3, [r0, #0]
 80117ce:	f04f 0900 	mov.w	r9, #0
 80117d2:	07eb      	lsls	r3, r5, #31
 80117d4:	d50a      	bpl.n	80117ec <__pow5mult+0x84>
 80117d6:	4639      	mov	r1, r7
 80117d8:	4622      	mov	r2, r4
 80117da:	4630      	mov	r0, r6
 80117dc:	f7ff ff1a 	bl	8011614 <__multiply>
 80117e0:	4639      	mov	r1, r7
 80117e2:	4680      	mov	r8, r0
 80117e4:	4630      	mov	r0, r6
 80117e6:	f7ff fe47 	bl	8011478 <_Bfree>
 80117ea:	4647      	mov	r7, r8
 80117ec:	106d      	asrs	r5, r5, #1
 80117ee:	d00b      	beq.n	8011808 <__pow5mult+0xa0>
 80117f0:	6820      	ldr	r0, [r4, #0]
 80117f2:	b938      	cbnz	r0, 8011804 <__pow5mult+0x9c>
 80117f4:	4622      	mov	r2, r4
 80117f6:	4621      	mov	r1, r4
 80117f8:	4630      	mov	r0, r6
 80117fa:	f7ff ff0b 	bl	8011614 <__multiply>
 80117fe:	6020      	str	r0, [r4, #0]
 8011800:	f8c0 9000 	str.w	r9, [r0]
 8011804:	4604      	mov	r4, r0
 8011806:	e7e4      	b.n	80117d2 <__pow5mult+0x6a>
 8011808:	4638      	mov	r0, r7
 801180a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801180e:	bf00      	nop
 8011810:	080128e8 	.word	0x080128e8
 8011814:	08012715 	.word	0x08012715
 8011818:	08012798 	.word	0x08012798

0801181c <__lshift>:
 801181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011820:	460c      	mov	r4, r1
 8011822:	6849      	ldr	r1, [r1, #4]
 8011824:	6923      	ldr	r3, [r4, #16]
 8011826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801182a:	68a3      	ldr	r3, [r4, #8]
 801182c:	4607      	mov	r7, r0
 801182e:	4691      	mov	r9, r2
 8011830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011834:	f108 0601 	add.w	r6, r8, #1
 8011838:	42b3      	cmp	r3, r6
 801183a:	db0b      	blt.n	8011854 <__lshift+0x38>
 801183c:	4638      	mov	r0, r7
 801183e:	f7ff fddb 	bl	80113f8 <_Balloc>
 8011842:	4605      	mov	r5, r0
 8011844:	b948      	cbnz	r0, 801185a <__lshift+0x3e>
 8011846:	4602      	mov	r2, r0
 8011848:	4b2a      	ldr	r3, [pc, #168]	; (80118f4 <__lshift+0xd8>)
 801184a:	482b      	ldr	r0, [pc, #172]	; (80118f8 <__lshift+0xdc>)
 801184c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011850:	f000 f96c 	bl	8011b2c <__assert_func>
 8011854:	3101      	adds	r1, #1
 8011856:	005b      	lsls	r3, r3, #1
 8011858:	e7ee      	b.n	8011838 <__lshift+0x1c>
 801185a:	2300      	movs	r3, #0
 801185c:	f100 0114 	add.w	r1, r0, #20
 8011860:	f100 0210 	add.w	r2, r0, #16
 8011864:	4618      	mov	r0, r3
 8011866:	4553      	cmp	r3, sl
 8011868:	db37      	blt.n	80118da <__lshift+0xbe>
 801186a:	6920      	ldr	r0, [r4, #16]
 801186c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011870:	f104 0314 	add.w	r3, r4, #20
 8011874:	f019 091f 	ands.w	r9, r9, #31
 8011878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801187c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011880:	d02f      	beq.n	80118e2 <__lshift+0xc6>
 8011882:	f1c9 0e20 	rsb	lr, r9, #32
 8011886:	468a      	mov	sl, r1
 8011888:	f04f 0c00 	mov.w	ip, #0
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	fa02 f209 	lsl.w	r2, r2, r9
 8011892:	ea42 020c 	orr.w	r2, r2, ip
 8011896:	f84a 2b04 	str.w	r2, [sl], #4
 801189a:	f853 2b04 	ldr.w	r2, [r3], #4
 801189e:	4298      	cmp	r0, r3
 80118a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80118a4:	d8f2      	bhi.n	801188c <__lshift+0x70>
 80118a6:	1b03      	subs	r3, r0, r4
 80118a8:	3b15      	subs	r3, #21
 80118aa:	f023 0303 	bic.w	r3, r3, #3
 80118ae:	3304      	adds	r3, #4
 80118b0:	f104 0215 	add.w	r2, r4, #21
 80118b4:	4290      	cmp	r0, r2
 80118b6:	bf38      	it	cc
 80118b8:	2304      	movcc	r3, #4
 80118ba:	f841 c003 	str.w	ip, [r1, r3]
 80118be:	f1bc 0f00 	cmp.w	ip, #0
 80118c2:	d001      	beq.n	80118c8 <__lshift+0xac>
 80118c4:	f108 0602 	add.w	r6, r8, #2
 80118c8:	3e01      	subs	r6, #1
 80118ca:	4638      	mov	r0, r7
 80118cc:	612e      	str	r6, [r5, #16]
 80118ce:	4621      	mov	r1, r4
 80118d0:	f7ff fdd2 	bl	8011478 <_Bfree>
 80118d4:	4628      	mov	r0, r5
 80118d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118da:	f842 0f04 	str.w	r0, [r2, #4]!
 80118de:	3301      	adds	r3, #1
 80118e0:	e7c1      	b.n	8011866 <__lshift+0x4a>
 80118e2:	3904      	subs	r1, #4
 80118e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80118e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80118ec:	4298      	cmp	r0, r3
 80118ee:	d8f9      	bhi.n	80118e4 <__lshift+0xc8>
 80118f0:	e7ea      	b.n	80118c8 <__lshift+0xac>
 80118f2:	bf00      	nop
 80118f4:	08012787 	.word	0x08012787
 80118f8:	08012798 	.word	0x08012798

080118fc <__mcmp>:
 80118fc:	b530      	push	{r4, r5, lr}
 80118fe:	6902      	ldr	r2, [r0, #16]
 8011900:	690c      	ldr	r4, [r1, #16]
 8011902:	1b12      	subs	r2, r2, r4
 8011904:	d10e      	bne.n	8011924 <__mcmp+0x28>
 8011906:	f100 0314 	add.w	r3, r0, #20
 801190a:	3114      	adds	r1, #20
 801190c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011910:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011914:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011918:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801191c:	42a5      	cmp	r5, r4
 801191e:	d003      	beq.n	8011928 <__mcmp+0x2c>
 8011920:	d305      	bcc.n	801192e <__mcmp+0x32>
 8011922:	2201      	movs	r2, #1
 8011924:	4610      	mov	r0, r2
 8011926:	bd30      	pop	{r4, r5, pc}
 8011928:	4283      	cmp	r3, r0
 801192a:	d3f3      	bcc.n	8011914 <__mcmp+0x18>
 801192c:	e7fa      	b.n	8011924 <__mcmp+0x28>
 801192e:	f04f 32ff 	mov.w	r2, #4294967295
 8011932:	e7f7      	b.n	8011924 <__mcmp+0x28>

08011934 <__mdiff>:
 8011934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011938:	460c      	mov	r4, r1
 801193a:	4606      	mov	r6, r0
 801193c:	4611      	mov	r1, r2
 801193e:	4620      	mov	r0, r4
 8011940:	4690      	mov	r8, r2
 8011942:	f7ff ffdb 	bl	80118fc <__mcmp>
 8011946:	1e05      	subs	r5, r0, #0
 8011948:	d110      	bne.n	801196c <__mdiff+0x38>
 801194a:	4629      	mov	r1, r5
 801194c:	4630      	mov	r0, r6
 801194e:	f7ff fd53 	bl	80113f8 <_Balloc>
 8011952:	b930      	cbnz	r0, 8011962 <__mdiff+0x2e>
 8011954:	4b3a      	ldr	r3, [pc, #232]	; (8011a40 <__mdiff+0x10c>)
 8011956:	4602      	mov	r2, r0
 8011958:	f240 2132 	movw	r1, #562	; 0x232
 801195c:	4839      	ldr	r0, [pc, #228]	; (8011a44 <__mdiff+0x110>)
 801195e:	f000 f8e5 	bl	8011b2c <__assert_func>
 8011962:	2301      	movs	r3, #1
 8011964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801196c:	bfa4      	itt	ge
 801196e:	4643      	movge	r3, r8
 8011970:	46a0      	movge	r8, r4
 8011972:	4630      	mov	r0, r6
 8011974:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011978:	bfa6      	itte	ge
 801197a:	461c      	movge	r4, r3
 801197c:	2500      	movge	r5, #0
 801197e:	2501      	movlt	r5, #1
 8011980:	f7ff fd3a 	bl	80113f8 <_Balloc>
 8011984:	b920      	cbnz	r0, 8011990 <__mdiff+0x5c>
 8011986:	4b2e      	ldr	r3, [pc, #184]	; (8011a40 <__mdiff+0x10c>)
 8011988:	4602      	mov	r2, r0
 801198a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801198e:	e7e5      	b.n	801195c <__mdiff+0x28>
 8011990:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011994:	6926      	ldr	r6, [r4, #16]
 8011996:	60c5      	str	r5, [r0, #12]
 8011998:	f104 0914 	add.w	r9, r4, #20
 801199c:	f108 0514 	add.w	r5, r8, #20
 80119a0:	f100 0e14 	add.w	lr, r0, #20
 80119a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80119a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80119ac:	f108 0210 	add.w	r2, r8, #16
 80119b0:	46f2      	mov	sl, lr
 80119b2:	2100      	movs	r1, #0
 80119b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80119b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80119bc:	fa1f f883 	uxth.w	r8, r3
 80119c0:	fa11 f18b 	uxtah	r1, r1, fp
 80119c4:	0c1b      	lsrs	r3, r3, #16
 80119c6:	eba1 0808 	sub.w	r8, r1, r8
 80119ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80119ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80119d2:	fa1f f888 	uxth.w	r8, r8
 80119d6:	1419      	asrs	r1, r3, #16
 80119d8:	454e      	cmp	r6, r9
 80119da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80119de:	f84a 3b04 	str.w	r3, [sl], #4
 80119e2:	d8e7      	bhi.n	80119b4 <__mdiff+0x80>
 80119e4:	1b33      	subs	r3, r6, r4
 80119e6:	3b15      	subs	r3, #21
 80119e8:	f023 0303 	bic.w	r3, r3, #3
 80119ec:	3304      	adds	r3, #4
 80119ee:	3415      	adds	r4, #21
 80119f0:	42a6      	cmp	r6, r4
 80119f2:	bf38      	it	cc
 80119f4:	2304      	movcc	r3, #4
 80119f6:	441d      	add	r5, r3
 80119f8:	4473      	add	r3, lr
 80119fa:	469e      	mov	lr, r3
 80119fc:	462e      	mov	r6, r5
 80119fe:	4566      	cmp	r6, ip
 8011a00:	d30e      	bcc.n	8011a20 <__mdiff+0xec>
 8011a02:	f10c 0203 	add.w	r2, ip, #3
 8011a06:	1b52      	subs	r2, r2, r5
 8011a08:	f022 0203 	bic.w	r2, r2, #3
 8011a0c:	3d03      	subs	r5, #3
 8011a0e:	45ac      	cmp	ip, r5
 8011a10:	bf38      	it	cc
 8011a12:	2200      	movcc	r2, #0
 8011a14:	441a      	add	r2, r3
 8011a16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011a1a:	b17b      	cbz	r3, 8011a3c <__mdiff+0x108>
 8011a1c:	6107      	str	r7, [r0, #16]
 8011a1e:	e7a3      	b.n	8011968 <__mdiff+0x34>
 8011a20:	f856 8b04 	ldr.w	r8, [r6], #4
 8011a24:	fa11 f288 	uxtah	r2, r1, r8
 8011a28:	1414      	asrs	r4, r2, #16
 8011a2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011a2e:	b292      	uxth	r2, r2
 8011a30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011a34:	f84e 2b04 	str.w	r2, [lr], #4
 8011a38:	1421      	asrs	r1, r4, #16
 8011a3a:	e7e0      	b.n	80119fe <__mdiff+0xca>
 8011a3c:	3f01      	subs	r7, #1
 8011a3e:	e7ea      	b.n	8011a16 <__mdiff+0xe2>
 8011a40:	08012787 	.word	0x08012787
 8011a44:	08012798 	.word	0x08012798

08011a48 <__d2b>:
 8011a48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a4c:	4689      	mov	r9, r1
 8011a4e:	2101      	movs	r1, #1
 8011a50:	ec57 6b10 	vmov	r6, r7, d0
 8011a54:	4690      	mov	r8, r2
 8011a56:	f7ff fccf 	bl	80113f8 <_Balloc>
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	b930      	cbnz	r0, 8011a6c <__d2b+0x24>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	4b25      	ldr	r3, [pc, #148]	; (8011af8 <__d2b+0xb0>)
 8011a62:	4826      	ldr	r0, [pc, #152]	; (8011afc <__d2b+0xb4>)
 8011a64:	f240 310a 	movw	r1, #778	; 0x30a
 8011a68:	f000 f860 	bl	8011b2c <__assert_func>
 8011a6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011a70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a74:	bb35      	cbnz	r5, 8011ac4 <__d2b+0x7c>
 8011a76:	2e00      	cmp	r6, #0
 8011a78:	9301      	str	r3, [sp, #4]
 8011a7a:	d028      	beq.n	8011ace <__d2b+0x86>
 8011a7c:	4668      	mov	r0, sp
 8011a7e:	9600      	str	r6, [sp, #0]
 8011a80:	f7ff fd82 	bl	8011588 <__lo0bits>
 8011a84:	9900      	ldr	r1, [sp, #0]
 8011a86:	b300      	cbz	r0, 8011aca <__d2b+0x82>
 8011a88:	9a01      	ldr	r2, [sp, #4]
 8011a8a:	f1c0 0320 	rsb	r3, r0, #32
 8011a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8011a92:	430b      	orrs	r3, r1
 8011a94:	40c2      	lsrs	r2, r0
 8011a96:	6163      	str	r3, [r4, #20]
 8011a98:	9201      	str	r2, [sp, #4]
 8011a9a:	9b01      	ldr	r3, [sp, #4]
 8011a9c:	61a3      	str	r3, [r4, #24]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	bf14      	ite	ne
 8011aa2:	2202      	movne	r2, #2
 8011aa4:	2201      	moveq	r2, #1
 8011aa6:	6122      	str	r2, [r4, #16]
 8011aa8:	b1d5      	cbz	r5, 8011ae0 <__d2b+0x98>
 8011aaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011aae:	4405      	add	r5, r0
 8011ab0:	f8c9 5000 	str.w	r5, [r9]
 8011ab4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ab8:	f8c8 0000 	str.w	r0, [r8]
 8011abc:	4620      	mov	r0, r4
 8011abe:	b003      	add	sp, #12
 8011ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ac8:	e7d5      	b.n	8011a76 <__d2b+0x2e>
 8011aca:	6161      	str	r1, [r4, #20]
 8011acc:	e7e5      	b.n	8011a9a <__d2b+0x52>
 8011ace:	a801      	add	r0, sp, #4
 8011ad0:	f7ff fd5a 	bl	8011588 <__lo0bits>
 8011ad4:	9b01      	ldr	r3, [sp, #4]
 8011ad6:	6163      	str	r3, [r4, #20]
 8011ad8:	2201      	movs	r2, #1
 8011ada:	6122      	str	r2, [r4, #16]
 8011adc:	3020      	adds	r0, #32
 8011ade:	e7e3      	b.n	8011aa8 <__d2b+0x60>
 8011ae0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ae4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011ae8:	f8c9 0000 	str.w	r0, [r9]
 8011aec:	6918      	ldr	r0, [r3, #16]
 8011aee:	f7ff fd2b 	bl	8011548 <__hi0bits>
 8011af2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011af6:	e7df      	b.n	8011ab8 <__d2b+0x70>
 8011af8:	08012787 	.word	0x08012787
 8011afc:	08012798 	.word	0x08012798

08011b00 <_calloc_r>:
 8011b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b02:	fba1 2402 	umull	r2, r4, r1, r2
 8011b06:	b94c      	cbnz	r4, 8011b1c <_calloc_r+0x1c>
 8011b08:	4611      	mov	r1, r2
 8011b0a:	9201      	str	r2, [sp, #4]
 8011b0c:	f7fe f992 	bl	800fe34 <_malloc_r>
 8011b10:	9a01      	ldr	r2, [sp, #4]
 8011b12:	4605      	mov	r5, r0
 8011b14:	b930      	cbnz	r0, 8011b24 <_calloc_r+0x24>
 8011b16:	4628      	mov	r0, r5
 8011b18:	b003      	add	sp, #12
 8011b1a:	bd30      	pop	{r4, r5, pc}
 8011b1c:	220c      	movs	r2, #12
 8011b1e:	6002      	str	r2, [r0, #0]
 8011b20:	2500      	movs	r5, #0
 8011b22:	e7f8      	b.n	8011b16 <_calloc_r+0x16>
 8011b24:	4621      	mov	r1, r4
 8011b26:	f7fe f911 	bl	800fd4c <memset>
 8011b2a:	e7f4      	b.n	8011b16 <_calloc_r+0x16>

08011b2c <__assert_func>:
 8011b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b2e:	4614      	mov	r4, r2
 8011b30:	461a      	mov	r2, r3
 8011b32:	4b09      	ldr	r3, [pc, #36]	; (8011b58 <__assert_func+0x2c>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	4605      	mov	r5, r0
 8011b38:	68d8      	ldr	r0, [r3, #12]
 8011b3a:	b14c      	cbz	r4, 8011b50 <__assert_func+0x24>
 8011b3c:	4b07      	ldr	r3, [pc, #28]	; (8011b5c <__assert_func+0x30>)
 8011b3e:	9100      	str	r1, [sp, #0]
 8011b40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b44:	4906      	ldr	r1, [pc, #24]	; (8011b60 <__assert_func+0x34>)
 8011b46:	462b      	mov	r3, r5
 8011b48:	f000 f80e 	bl	8011b68 <fiprintf>
 8011b4c:	f000 fa5a 	bl	8012004 <abort>
 8011b50:	4b04      	ldr	r3, [pc, #16]	; (8011b64 <__assert_func+0x38>)
 8011b52:	461c      	mov	r4, r3
 8011b54:	e7f3      	b.n	8011b3e <__assert_func+0x12>
 8011b56:	bf00      	nop
 8011b58:	24000184 	.word	0x24000184
 8011b5c:	080128f4 	.word	0x080128f4
 8011b60:	08012901 	.word	0x08012901
 8011b64:	0801292f 	.word	0x0801292f

08011b68 <fiprintf>:
 8011b68:	b40e      	push	{r1, r2, r3}
 8011b6a:	b503      	push	{r0, r1, lr}
 8011b6c:	4601      	mov	r1, r0
 8011b6e:	ab03      	add	r3, sp, #12
 8011b70:	4805      	ldr	r0, [pc, #20]	; (8011b88 <fiprintf+0x20>)
 8011b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b76:	6800      	ldr	r0, [r0, #0]
 8011b78:	9301      	str	r3, [sp, #4]
 8011b7a:	f000 f845 	bl	8011c08 <_vfiprintf_r>
 8011b7e:	b002      	add	sp, #8
 8011b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b84:	b003      	add	sp, #12
 8011b86:	4770      	bx	lr
 8011b88:	24000184 	.word	0x24000184

08011b8c <__retarget_lock_init_recursive>:
 8011b8c:	4770      	bx	lr

08011b8e <__retarget_lock_acquire_recursive>:
 8011b8e:	4770      	bx	lr

08011b90 <__retarget_lock_release_recursive>:
 8011b90:	4770      	bx	lr

08011b92 <__ascii_mbtowc>:
 8011b92:	b082      	sub	sp, #8
 8011b94:	b901      	cbnz	r1, 8011b98 <__ascii_mbtowc+0x6>
 8011b96:	a901      	add	r1, sp, #4
 8011b98:	b142      	cbz	r2, 8011bac <__ascii_mbtowc+0x1a>
 8011b9a:	b14b      	cbz	r3, 8011bb0 <__ascii_mbtowc+0x1e>
 8011b9c:	7813      	ldrb	r3, [r2, #0]
 8011b9e:	600b      	str	r3, [r1, #0]
 8011ba0:	7812      	ldrb	r2, [r2, #0]
 8011ba2:	1e10      	subs	r0, r2, #0
 8011ba4:	bf18      	it	ne
 8011ba6:	2001      	movne	r0, #1
 8011ba8:	b002      	add	sp, #8
 8011baa:	4770      	bx	lr
 8011bac:	4610      	mov	r0, r2
 8011bae:	e7fb      	b.n	8011ba8 <__ascii_mbtowc+0x16>
 8011bb0:	f06f 0001 	mvn.w	r0, #1
 8011bb4:	e7f8      	b.n	8011ba8 <__ascii_mbtowc+0x16>

08011bb6 <__sfputc_r>:
 8011bb6:	6893      	ldr	r3, [r2, #8]
 8011bb8:	3b01      	subs	r3, #1
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	b410      	push	{r4}
 8011bbe:	6093      	str	r3, [r2, #8]
 8011bc0:	da08      	bge.n	8011bd4 <__sfputc_r+0x1e>
 8011bc2:	6994      	ldr	r4, [r2, #24]
 8011bc4:	42a3      	cmp	r3, r4
 8011bc6:	db01      	blt.n	8011bcc <__sfputc_r+0x16>
 8011bc8:	290a      	cmp	r1, #10
 8011bca:	d103      	bne.n	8011bd4 <__sfputc_r+0x1e>
 8011bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bd0:	f000 b94a 	b.w	8011e68 <__swbuf_r>
 8011bd4:	6813      	ldr	r3, [r2, #0]
 8011bd6:	1c58      	adds	r0, r3, #1
 8011bd8:	6010      	str	r0, [r2, #0]
 8011bda:	7019      	strb	r1, [r3, #0]
 8011bdc:	4608      	mov	r0, r1
 8011bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011be2:	4770      	bx	lr

08011be4 <__sfputs_r>:
 8011be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be6:	4606      	mov	r6, r0
 8011be8:	460f      	mov	r7, r1
 8011bea:	4614      	mov	r4, r2
 8011bec:	18d5      	adds	r5, r2, r3
 8011bee:	42ac      	cmp	r4, r5
 8011bf0:	d101      	bne.n	8011bf6 <__sfputs_r+0x12>
 8011bf2:	2000      	movs	r0, #0
 8011bf4:	e007      	b.n	8011c06 <__sfputs_r+0x22>
 8011bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bfa:	463a      	mov	r2, r7
 8011bfc:	4630      	mov	r0, r6
 8011bfe:	f7ff ffda 	bl	8011bb6 <__sfputc_r>
 8011c02:	1c43      	adds	r3, r0, #1
 8011c04:	d1f3      	bne.n	8011bee <__sfputs_r+0xa>
 8011c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c08 <_vfiprintf_r>:
 8011c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c0c:	460d      	mov	r5, r1
 8011c0e:	b09d      	sub	sp, #116	; 0x74
 8011c10:	4614      	mov	r4, r2
 8011c12:	4698      	mov	r8, r3
 8011c14:	4606      	mov	r6, r0
 8011c16:	b118      	cbz	r0, 8011c20 <_vfiprintf_r+0x18>
 8011c18:	6983      	ldr	r3, [r0, #24]
 8011c1a:	b90b      	cbnz	r3, 8011c20 <_vfiprintf_r+0x18>
 8011c1c:	f000 fb14 	bl	8012248 <__sinit>
 8011c20:	4b89      	ldr	r3, [pc, #548]	; (8011e48 <_vfiprintf_r+0x240>)
 8011c22:	429d      	cmp	r5, r3
 8011c24:	d11b      	bne.n	8011c5e <_vfiprintf_r+0x56>
 8011c26:	6875      	ldr	r5, [r6, #4]
 8011c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c2a:	07d9      	lsls	r1, r3, #31
 8011c2c:	d405      	bmi.n	8011c3a <_vfiprintf_r+0x32>
 8011c2e:	89ab      	ldrh	r3, [r5, #12]
 8011c30:	059a      	lsls	r2, r3, #22
 8011c32:	d402      	bmi.n	8011c3a <_vfiprintf_r+0x32>
 8011c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c36:	f7ff ffaa 	bl	8011b8e <__retarget_lock_acquire_recursive>
 8011c3a:	89ab      	ldrh	r3, [r5, #12]
 8011c3c:	071b      	lsls	r3, r3, #28
 8011c3e:	d501      	bpl.n	8011c44 <_vfiprintf_r+0x3c>
 8011c40:	692b      	ldr	r3, [r5, #16]
 8011c42:	b9eb      	cbnz	r3, 8011c80 <_vfiprintf_r+0x78>
 8011c44:	4629      	mov	r1, r5
 8011c46:	4630      	mov	r0, r6
 8011c48:	f000 f96e 	bl	8011f28 <__swsetup_r>
 8011c4c:	b1c0      	cbz	r0, 8011c80 <_vfiprintf_r+0x78>
 8011c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c50:	07dc      	lsls	r4, r3, #31
 8011c52:	d50e      	bpl.n	8011c72 <_vfiprintf_r+0x6a>
 8011c54:	f04f 30ff 	mov.w	r0, #4294967295
 8011c58:	b01d      	add	sp, #116	; 0x74
 8011c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c5e:	4b7b      	ldr	r3, [pc, #492]	; (8011e4c <_vfiprintf_r+0x244>)
 8011c60:	429d      	cmp	r5, r3
 8011c62:	d101      	bne.n	8011c68 <_vfiprintf_r+0x60>
 8011c64:	68b5      	ldr	r5, [r6, #8]
 8011c66:	e7df      	b.n	8011c28 <_vfiprintf_r+0x20>
 8011c68:	4b79      	ldr	r3, [pc, #484]	; (8011e50 <_vfiprintf_r+0x248>)
 8011c6a:	429d      	cmp	r5, r3
 8011c6c:	bf08      	it	eq
 8011c6e:	68f5      	ldreq	r5, [r6, #12]
 8011c70:	e7da      	b.n	8011c28 <_vfiprintf_r+0x20>
 8011c72:	89ab      	ldrh	r3, [r5, #12]
 8011c74:	0598      	lsls	r0, r3, #22
 8011c76:	d4ed      	bmi.n	8011c54 <_vfiprintf_r+0x4c>
 8011c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c7a:	f7ff ff89 	bl	8011b90 <__retarget_lock_release_recursive>
 8011c7e:	e7e9      	b.n	8011c54 <_vfiprintf_r+0x4c>
 8011c80:	2300      	movs	r3, #0
 8011c82:	9309      	str	r3, [sp, #36]	; 0x24
 8011c84:	2320      	movs	r3, #32
 8011c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c8e:	2330      	movs	r3, #48	; 0x30
 8011c90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011e54 <_vfiprintf_r+0x24c>
 8011c94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c98:	f04f 0901 	mov.w	r9, #1
 8011c9c:	4623      	mov	r3, r4
 8011c9e:	469a      	mov	sl, r3
 8011ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ca4:	b10a      	cbz	r2, 8011caa <_vfiprintf_r+0xa2>
 8011ca6:	2a25      	cmp	r2, #37	; 0x25
 8011ca8:	d1f9      	bne.n	8011c9e <_vfiprintf_r+0x96>
 8011caa:	ebba 0b04 	subs.w	fp, sl, r4
 8011cae:	d00b      	beq.n	8011cc8 <_vfiprintf_r+0xc0>
 8011cb0:	465b      	mov	r3, fp
 8011cb2:	4622      	mov	r2, r4
 8011cb4:	4629      	mov	r1, r5
 8011cb6:	4630      	mov	r0, r6
 8011cb8:	f7ff ff94 	bl	8011be4 <__sfputs_r>
 8011cbc:	3001      	adds	r0, #1
 8011cbe:	f000 80aa 	beq.w	8011e16 <_vfiprintf_r+0x20e>
 8011cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cc4:	445a      	add	r2, fp
 8011cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8011cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	f000 80a2 	beq.w	8011e16 <_vfiprintf_r+0x20e>
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cdc:	f10a 0a01 	add.w	sl, sl, #1
 8011ce0:	9304      	str	r3, [sp, #16]
 8011ce2:	9307      	str	r3, [sp, #28]
 8011ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8011cea:	4654      	mov	r4, sl
 8011cec:	2205      	movs	r2, #5
 8011cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cf2:	4858      	ldr	r0, [pc, #352]	; (8011e54 <_vfiprintf_r+0x24c>)
 8011cf4:	f7ee fafc 	bl	80002f0 <memchr>
 8011cf8:	9a04      	ldr	r2, [sp, #16]
 8011cfa:	b9d8      	cbnz	r0, 8011d34 <_vfiprintf_r+0x12c>
 8011cfc:	06d1      	lsls	r1, r2, #27
 8011cfe:	bf44      	itt	mi
 8011d00:	2320      	movmi	r3, #32
 8011d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d06:	0713      	lsls	r3, r2, #28
 8011d08:	bf44      	itt	mi
 8011d0a:	232b      	movmi	r3, #43	; 0x2b
 8011d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d10:	f89a 3000 	ldrb.w	r3, [sl]
 8011d14:	2b2a      	cmp	r3, #42	; 0x2a
 8011d16:	d015      	beq.n	8011d44 <_vfiprintf_r+0x13c>
 8011d18:	9a07      	ldr	r2, [sp, #28]
 8011d1a:	4654      	mov	r4, sl
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	f04f 0c0a 	mov.w	ip, #10
 8011d22:	4621      	mov	r1, r4
 8011d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d28:	3b30      	subs	r3, #48	; 0x30
 8011d2a:	2b09      	cmp	r3, #9
 8011d2c:	d94e      	bls.n	8011dcc <_vfiprintf_r+0x1c4>
 8011d2e:	b1b0      	cbz	r0, 8011d5e <_vfiprintf_r+0x156>
 8011d30:	9207      	str	r2, [sp, #28]
 8011d32:	e014      	b.n	8011d5e <_vfiprintf_r+0x156>
 8011d34:	eba0 0308 	sub.w	r3, r0, r8
 8011d38:	fa09 f303 	lsl.w	r3, r9, r3
 8011d3c:	4313      	orrs	r3, r2
 8011d3e:	9304      	str	r3, [sp, #16]
 8011d40:	46a2      	mov	sl, r4
 8011d42:	e7d2      	b.n	8011cea <_vfiprintf_r+0xe2>
 8011d44:	9b03      	ldr	r3, [sp, #12]
 8011d46:	1d19      	adds	r1, r3, #4
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	9103      	str	r1, [sp, #12]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	bfbb      	ittet	lt
 8011d50:	425b      	neglt	r3, r3
 8011d52:	f042 0202 	orrlt.w	r2, r2, #2
 8011d56:	9307      	strge	r3, [sp, #28]
 8011d58:	9307      	strlt	r3, [sp, #28]
 8011d5a:	bfb8      	it	lt
 8011d5c:	9204      	strlt	r2, [sp, #16]
 8011d5e:	7823      	ldrb	r3, [r4, #0]
 8011d60:	2b2e      	cmp	r3, #46	; 0x2e
 8011d62:	d10c      	bne.n	8011d7e <_vfiprintf_r+0x176>
 8011d64:	7863      	ldrb	r3, [r4, #1]
 8011d66:	2b2a      	cmp	r3, #42	; 0x2a
 8011d68:	d135      	bne.n	8011dd6 <_vfiprintf_r+0x1ce>
 8011d6a:	9b03      	ldr	r3, [sp, #12]
 8011d6c:	1d1a      	adds	r2, r3, #4
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	9203      	str	r2, [sp, #12]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	bfb8      	it	lt
 8011d76:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d7a:	3402      	adds	r4, #2
 8011d7c:	9305      	str	r3, [sp, #20]
 8011d7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011e64 <_vfiprintf_r+0x25c>
 8011d82:	7821      	ldrb	r1, [r4, #0]
 8011d84:	2203      	movs	r2, #3
 8011d86:	4650      	mov	r0, sl
 8011d88:	f7ee fab2 	bl	80002f0 <memchr>
 8011d8c:	b140      	cbz	r0, 8011da0 <_vfiprintf_r+0x198>
 8011d8e:	2340      	movs	r3, #64	; 0x40
 8011d90:	eba0 000a 	sub.w	r0, r0, sl
 8011d94:	fa03 f000 	lsl.w	r0, r3, r0
 8011d98:	9b04      	ldr	r3, [sp, #16]
 8011d9a:	4303      	orrs	r3, r0
 8011d9c:	3401      	adds	r4, #1
 8011d9e:	9304      	str	r3, [sp, #16]
 8011da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011da4:	482c      	ldr	r0, [pc, #176]	; (8011e58 <_vfiprintf_r+0x250>)
 8011da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011daa:	2206      	movs	r2, #6
 8011dac:	f7ee faa0 	bl	80002f0 <memchr>
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d03f      	beq.n	8011e34 <_vfiprintf_r+0x22c>
 8011db4:	4b29      	ldr	r3, [pc, #164]	; (8011e5c <_vfiprintf_r+0x254>)
 8011db6:	bb1b      	cbnz	r3, 8011e00 <_vfiprintf_r+0x1f8>
 8011db8:	9b03      	ldr	r3, [sp, #12]
 8011dba:	3307      	adds	r3, #7
 8011dbc:	f023 0307 	bic.w	r3, r3, #7
 8011dc0:	3308      	adds	r3, #8
 8011dc2:	9303      	str	r3, [sp, #12]
 8011dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dc6:	443b      	add	r3, r7
 8011dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8011dca:	e767      	b.n	8011c9c <_vfiprintf_r+0x94>
 8011dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dd0:	460c      	mov	r4, r1
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	e7a5      	b.n	8011d22 <_vfiprintf_r+0x11a>
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	3401      	adds	r4, #1
 8011dda:	9305      	str	r3, [sp, #20]
 8011ddc:	4619      	mov	r1, r3
 8011dde:	f04f 0c0a 	mov.w	ip, #10
 8011de2:	4620      	mov	r0, r4
 8011de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011de8:	3a30      	subs	r2, #48	; 0x30
 8011dea:	2a09      	cmp	r2, #9
 8011dec:	d903      	bls.n	8011df6 <_vfiprintf_r+0x1ee>
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d0c5      	beq.n	8011d7e <_vfiprintf_r+0x176>
 8011df2:	9105      	str	r1, [sp, #20]
 8011df4:	e7c3      	b.n	8011d7e <_vfiprintf_r+0x176>
 8011df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	e7f0      	b.n	8011de2 <_vfiprintf_r+0x1da>
 8011e00:	ab03      	add	r3, sp, #12
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	462a      	mov	r2, r5
 8011e06:	4b16      	ldr	r3, [pc, #88]	; (8011e60 <_vfiprintf_r+0x258>)
 8011e08:	a904      	add	r1, sp, #16
 8011e0a:	4630      	mov	r0, r6
 8011e0c:	f7fe f918 	bl	8010040 <_printf_float>
 8011e10:	4607      	mov	r7, r0
 8011e12:	1c78      	adds	r0, r7, #1
 8011e14:	d1d6      	bne.n	8011dc4 <_vfiprintf_r+0x1bc>
 8011e16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e18:	07d9      	lsls	r1, r3, #31
 8011e1a:	d405      	bmi.n	8011e28 <_vfiprintf_r+0x220>
 8011e1c:	89ab      	ldrh	r3, [r5, #12]
 8011e1e:	059a      	lsls	r2, r3, #22
 8011e20:	d402      	bmi.n	8011e28 <_vfiprintf_r+0x220>
 8011e22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e24:	f7ff feb4 	bl	8011b90 <__retarget_lock_release_recursive>
 8011e28:	89ab      	ldrh	r3, [r5, #12]
 8011e2a:	065b      	lsls	r3, r3, #25
 8011e2c:	f53f af12 	bmi.w	8011c54 <_vfiprintf_r+0x4c>
 8011e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e32:	e711      	b.n	8011c58 <_vfiprintf_r+0x50>
 8011e34:	ab03      	add	r3, sp, #12
 8011e36:	9300      	str	r3, [sp, #0]
 8011e38:	462a      	mov	r2, r5
 8011e3a:	4b09      	ldr	r3, [pc, #36]	; (8011e60 <_vfiprintf_r+0x258>)
 8011e3c:	a904      	add	r1, sp, #16
 8011e3e:	4630      	mov	r0, r6
 8011e40:	f7fe fb8a 	bl	8010558 <_printf_i>
 8011e44:	e7e4      	b.n	8011e10 <_vfiprintf_r+0x208>
 8011e46:	bf00      	nop
 8011e48:	08012a6c 	.word	0x08012a6c
 8011e4c:	08012a8c 	.word	0x08012a8c
 8011e50:	08012a4c 	.word	0x08012a4c
 8011e54:	0801293a 	.word	0x0801293a
 8011e58:	08012944 	.word	0x08012944
 8011e5c:	08010041 	.word	0x08010041
 8011e60:	08011be5 	.word	0x08011be5
 8011e64:	08012940 	.word	0x08012940

08011e68 <__swbuf_r>:
 8011e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e6a:	460e      	mov	r6, r1
 8011e6c:	4614      	mov	r4, r2
 8011e6e:	4605      	mov	r5, r0
 8011e70:	b118      	cbz	r0, 8011e7a <__swbuf_r+0x12>
 8011e72:	6983      	ldr	r3, [r0, #24]
 8011e74:	b90b      	cbnz	r3, 8011e7a <__swbuf_r+0x12>
 8011e76:	f000 f9e7 	bl	8012248 <__sinit>
 8011e7a:	4b21      	ldr	r3, [pc, #132]	; (8011f00 <__swbuf_r+0x98>)
 8011e7c:	429c      	cmp	r4, r3
 8011e7e:	d12b      	bne.n	8011ed8 <__swbuf_r+0x70>
 8011e80:	686c      	ldr	r4, [r5, #4]
 8011e82:	69a3      	ldr	r3, [r4, #24]
 8011e84:	60a3      	str	r3, [r4, #8]
 8011e86:	89a3      	ldrh	r3, [r4, #12]
 8011e88:	071a      	lsls	r2, r3, #28
 8011e8a:	d52f      	bpl.n	8011eec <__swbuf_r+0x84>
 8011e8c:	6923      	ldr	r3, [r4, #16]
 8011e8e:	b36b      	cbz	r3, 8011eec <__swbuf_r+0x84>
 8011e90:	6923      	ldr	r3, [r4, #16]
 8011e92:	6820      	ldr	r0, [r4, #0]
 8011e94:	1ac0      	subs	r0, r0, r3
 8011e96:	6963      	ldr	r3, [r4, #20]
 8011e98:	b2f6      	uxtb	r6, r6
 8011e9a:	4283      	cmp	r3, r0
 8011e9c:	4637      	mov	r7, r6
 8011e9e:	dc04      	bgt.n	8011eaa <__swbuf_r+0x42>
 8011ea0:	4621      	mov	r1, r4
 8011ea2:	4628      	mov	r0, r5
 8011ea4:	f000 f93c 	bl	8012120 <_fflush_r>
 8011ea8:	bb30      	cbnz	r0, 8011ef8 <__swbuf_r+0x90>
 8011eaa:	68a3      	ldr	r3, [r4, #8]
 8011eac:	3b01      	subs	r3, #1
 8011eae:	60a3      	str	r3, [r4, #8]
 8011eb0:	6823      	ldr	r3, [r4, #0]
 8011eb2:	1c5a      	adds	r2, r3, #1
 8011eb4:	6022      	str	r2, [r4, #0]
 8011eb6:	701e      	strb	r6, [r3, #0]
 8011eb8:	6963      	ldr	r3, [r4, #20]
 8011eba:	3001      	adds	r0, #1
 8011ebc:	4283      	cmp	r3, r0
 8011ebe:	d004      	beq.n	8011eca <__swbuf_r+0x62>
 8011ec0:	89a3      	ldrh	r3, [r4, #12]
 8011ec2:	07db      	lsls	r3, r3, #31
 8011ec4:	d506      	bpl.n	8011ed4 <__swbuf_r+0x6c>
 8011ec6:	2e0a      	cmp	r6, #10
 8011ec8:	d104      	bne.n	8011ed4 <__swbuf_r+0x6c>
 8011eca:	4621      	mov	r1, r4
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f000 f927 	bl	8012120 <_fflush_r>
 8011ed2:	b988      	cbnz	r0, 8011ef8 <__swbuf_r+0x90>
 8011ed4:	4638      	mov	r0, r7
 8011ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ed8:	4b0a      	ldr	r3, [pc, #40]	; (8011f04 <__swbuf_r+0x9c>)
 8011eda:	429c      	cmp	r4, r3
 8011edc:	d101      	bne.n	8011ee2 <__swbuf_r+0x7a>
 8011ede:	68ac      	ldr	r4, [r5, #8]
 8011ee0:	e7cf      	b.n	8011e82 <__swbuf_r+0x1a>
 8011ee2:	4b09      	ldr	r3, [pc, #36]	; (8011f08 <__swbuf_r+0xa0>)
 8011ee4:	429c      	cmp	r4, r3
 8011ee6:	bf08      	it	eq
 8011ee8:	68ec      	ldreq	r4, [r5, #12]
 8011eea:	e7ca      	b.n	8011e82 <__swbuf_r+0x1a>
 8011eec:	4621      	mov	r1, r4
 8011eee:	4628      	mov	r0, r5
 8011ef0:	f000 f81a 	bl	8011f28 <__swsetup_r>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	d0cb      	beq.n	8011e90 <__swbuf_r+0x28>
 8011ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8011efc:	e7ea      	b.n	8011ed4 <__swbuf_r+0x6c>
 8011efe:	bf00      	nop
 8011f00:	08012a6c 	.word	0x08012a6c
 8011f04:	08012a8c 	.word	0x08012a8c
 8011f08:	08012a4c 	.word	0x08012a4c

08011f0c <__ascii_wctomb>:
 8011f0c:	b149      	cbz	r1, 8011f22 <__ascii_wctomb+0x16>
 8011f0e:	2aff      	cmp	r2, #255	; 0xff
 8011f10:	bf85      	ittet	hi
 8011f12:	238a      	movhi	r3, #138	; 0x8a
 8011f14:	6003      	strhi	r3, [r0, #0]
 8011f16:	700a      	strbls	r2, [r1, #0]
 8011f18:	f04f 30ff 	movhi.w	r0, #4294967295
 8011f1c:	bf98      	it	ls
 8011f1e:	2001      	movls	r0, #1
 8011f20:	4770      	bx	lr
 8011f22:	4608      	mov	r0, r1
 8011f24:	4770      	bx	lr
	...

08011f28 <__swsetup_r>:
 8011f28:	4b32      	ldr	r3, [pc, #200]	; (8011ff4 <__swsetup_r+0xcc>)
 8011f2a:	b570      	push	{r4, r5, r6, lr}
 8011f2c:	681d      	ldr	r5, [r3, #0]
 8011f2e:	4606      	mov	r6, r0
 8011f30:	460c      	mov	r4, r1
 8011f32:	b125      	cbz	r5, 8011f3e <__swsetup_r+0x16>
 8011f34:	69ab      	ldr	r3, [r5, #24]
 8011f36:	b913      	cbnz	r3, 8011f3e <__swsetup_r+0x16>
 8011f38:	4628      	mov	r0, r5
 8011f3a:	f000 f985 	bl	8012248 <__sinit>
 8011f3e:	4b2e      	ldr	r3, [pc, #184]	; (8011ff8 <__swsetup_r+0xd0>)
 8011f40:	429c      	cmp	r4, r3
 8011f42:	d10f      	bne.n	8011f64 <__swsetup_r+0x3c>
 8011f44:	686c      	ldr	r4, [r5, #4]
 8011f46:	89a3      	ldrh	r3, [r4, #12]
 8011f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011f4c:	0719      	lsls	r1, r3, #28
 8011f4e:	d42c      	bmi.n	8011faa <__swsetup_r+0x82>
 8011f50:	06dd      	lsls	r5, r3, #27
 8011f52:	d411      	bmi.n	8011f78 <__swsetup_r+0x50>
 8011f54:	2309      	movs	r3, #9
 8011f56:	6033      	str	r3, [r6, #0]
 8011f58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011f5c:	81a3      	strh	r3, [r4, #12]
 8011f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f62:	e03e      	b.n	8011fe2 <__swsetup_r+0xba>
 8011f64:	4b25      	ldr	r3, [pc, #148]	; (8011ffc <__swsetup_r+0xd4>)
 8011f66:	429c      	cmp	r4, r3
 8011f68:	d101      	bne.n	8011f6e <__swsetup_r+0x46>
 8011f6a:	68ac      	ldr	r4, [r5, #8]
 8011f6c:	e7eb      	b.n	8011f46 <__swsetup_r+0x1e>
 8011f6e:	4b24      	ldr	r3, [pc, #144]	; (8012000 <__swsetup_r+0xd8>)
 8011f70:	429c      	cmp	r4, r3
 8011f72:	bf08      	it	eq
 8011f74:	68ec      	ldreq	r4, [r5, #12]
 8011f76:	e7e6      	b.n	8011f46 <__swsetup_r+0x1e>
 8011f78:	0758      	lsls	r0, r3, #29
 8011f7a:	d512      	bpl.n	8011fa2 <__swsetup_r+0x7a>
 8011f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f7e:	b141      	cbz	r1, 8011f92 <__swsetup_r+0x6a>
 8011f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f84:	4299      	cmp	r1, r3
 8011f86:	d002      	beq.n	8011f8e <__swsetup_r+0x66>
 8011f88:	4630      	mov	r0, r6
 8011f8a:	f7fd fee7 	bl	800fd5c <_free_r>
 8011f8e:	2300      	movs	r3, #0
 8011f90:	6363      	str	r3, [r4, #52]	; 0x34
 8011f92:	89a3      	ldrh	r3, [r4, #12]
 8011f94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011f98:	81a3      	strh	r3, [r4, #12]
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	6063      	str	r3, [r4, #4]
 8011f9e:	6923      	ldr	r3, [r4, #16]
 8011fa0:	6023      	str	r3, [r4, #0]
 8011fa2:	89a3      	ldrh	r3, [r4, #12]
 8011fa4:	f043 0308 	orr.w	r3, r3, #8
 8011fa8:	81a3      	strh	r3, [r4, #12]
 8011faa:	6923      	ldr	r3, [r4, #16]
 8011fac:	b94b      	cbnz	r3, 8011fc2 <__swsetup_r+0x9a>
 8011fae:	89a3      	ldrh	r3, [r4, #12]
 8011fb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fb8:	d003      	beq.n	8011fc2 <__swsetup_r+0x9a>
 8011fba:	4621      	mov	r1, r4
 8011fbc:	4630      	mov	r0, r6
 8011fbe:	f000 fa05 	bl	80123cc <__smakebuf_r>
 8011fc2:	89a0      	ldrh	r0, [r4, #12]
 8011fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011fc8:	f010 0301 	ands.w	r3, r0, #1
 8011fcc:	d00a      	beq.n	8011fe4 <__swsetup_r+0xbc>
 8011fce:	2300      	movs	r3, #0
 8011fd0:	60a3      	str	r3, [r4, #8]
 8011fd2:	6963      	ldr	r3, [r4, #20]
 8011fd4:	425b      	negs	r3, r3
 8011fd6:	61a3      	str	r3, [r4, #24]
 8011fd8:	6923      	ldr	r3, [r4, #16]
 8011fda:	b943      	cbnz	r3, 8011fee <__swsetup_r+0xc6>
 8011fdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011fe0:	d1ba      	bne.n	8011f58 <__swsetup_r+0x30>
 8011fe2:	bd70      	pop	{r4, r5, r6, pc}
 8011fe4:	0781      	lsls	r1, r0, #30
 8011fe6:	bf58      	it	pl
 8011fe8:	6963      	ldrpl	r3, [r4, #20]
 8011fea:	60a3      	str	r3, [r4, #8]
 8011fec:	e7f4      	b.n	8011fd8 <__swsetup_r+0xb0>
 8011fee:	2000      	movs	r0, #0
 8011ff0:	e7f7      	b.n	8011fe2 <__swsetup_r+0xba>
 8011ff2:	bf00      	nop
 8011ff4:	24000184 	.word	0x24000184
 8011ff8:	08012a6c 	.word	0x08012a6c
 8011ffc:	08012a8c 	.word	0x08012a8c
 8012000:	08012a4c 	.word	0x08012a4c

08012004 <abort>:
 8012004:	b508      	push	{r3, lr}
 8012006:	2006      	movs	r0, #6
 8012008:	f000 fa48 	bl	801249c <raise>
 801200c:	2001      	movs	r0, #1
 801200e:	f7ef f831 	bl	8001074 <_exit>
	...

08012014 <__sflush_r>:
 8012014:	898a      	ldrh	r2, [r1, #12]
 8012016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801201a:	4605      	mov	r5, r0
 801201c:	0710      	lsls	r0, r2, #28
 801201e:	460c      	mov	r4, r1
 8012020:	d458      	bmi.n	80120d4 <__sflush_r+0xc0>
 8012022:	684b      	ldr	r3, [r1, #4]
 8012024:	2b00      	cmp	r3, #0
 8012026:	dc05      	bgt.n	8012034 <__sflush_r+0x20>
 8012028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801202a:	2b00      	cmp	r3, #0
 801202c:	dc02      	bgt.n	8012034 <__sflush_r+0x20>
 801202e:	2000      	movs	r0, #0
 8012030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012036:	2e00      	cmp	r6, #0
 8012038:	d0f9      	beq.n	801202e <__sflush_r+0x1a>
 801203a:	2300      	movs	r3, #0
 801203c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012040:	682f      	ldr	r7, [r5, #0]
 8012042:	602b      	str	r3, [r5, #0]
 8012044:	d032      	beq.n	80120ac <__sflush_r+0x98>
 8012046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012048:	89a3      	ldrh	r3, [r4, #12]
 801204a:	075a      	lsls	r2, r3, #29
 801204c:	d505      	bpl.n	801205a <__sflush_r+0x46>
 801204e:	6863      	ldr	r3, [r4, #4]
 8012050:	1ac0      	subs	r0, r0, r3
 8012052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012054:	b10b      	cbz	r3, 801205a <__sflush_r+0x46>
 8012056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012058:	1ac0      	subs	r0, r0, r3
 801205a:	2300      	movs	r3, #0
 801205c:	4602      	mov	r2, r0
 801205e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012060:	6a21      	ldr	r1, [r4, #32]
 8012062:	4628      	mov	r0, r5
 8012064:	47b0      	blx	r6
 8012066:	1c43      	adds	r3, r0, #1
 8012068:	89a3      	ldrh	r3, [r4, #12]
 801206a:	d106      	bne.n	801207a <__sflush_r+0x66>
 801206c:	6829      	ldr	r1, [r5, #0]
 801206e:	291d      	cmp	r1, #29
 8012070:	d82c      	bhi.n	80120cc <__sflush_r+0xb8>
 8012072:	4a2a      	ldr	r2, [pc, #168]	; (801211c <__sflush_r+0x108>)
 8012074:	40ca      	lsrs	r2, r1
 8012076:	07d6      	lsls	r6, r2, #31
 8012078:	d528      	bpl.n	80120cc <__sflush_r+0xb8>
 801207a:	2200      	movs	r2, #0
 801207c:	6062      	str	r2, [r4, #4]
 801207e:	04d9      	lsls	r1, r3, #19
 8012080:	6922      	ldr	r2, [r4, #16]
 8012082:	6022      	str	r2, [r4, #0]
 8012084:	d504      	bpl.n	8012090 <__sflush_r+0x7c>
 8012086:	1c42      	adds	r2, r0, #1
 8012088:	d101      	bne.n	801208e <__sflush_r+0x7a>
 801208a:	682b      	ldr	r3, [r5, #0]
 801208c:	b903      	cbnz	r3, 8012090 <__sflush_r+0x7c>
 801208e:	6560      	str	r0, [r4, #84]	; 0x54
 8012090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012092:	602f      	str	r7, [r5, #0]
 8012094:	2900      	cmp	r1, #0
 8012096:	d0ca      	beq.n	801202e <__sflush_r+0x1a>
 8012098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801209c:	4299      	cmp	r1, r3
 801209e:	d002      	beq.n	80120a6 <__sflush_r+0x92>
 80120a0:	4628      	mov	r0, r5
 80120a2:	f7fd fe5b 	bl	800fd5c <_free_r>
 80120a6:	2000      	movs	r0, #0
 80120a8:	6360      	str	r0, [r4, #52]	; 0x34
 80120aa:	e7c1      	b.n	8012030 <__sflush_r+0x1c>
 80120ac:	6a21      	ldr	r1, [r4, #32]
 80120ae:	2301      	movs	r3, #1
 80120b0:	4628      	mov	r0, r5
 80120b2:	47b0      	blx	r6
 80120b4:	1c41      	adds	r1, r0, #1
 80120b6:	d1c7      	bne.n	8012048 <__sflush_r+0x34>
 80120b8:	682b      	ldr	r3, [r5, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d0c4      	beq.n	8012048 <__sflush_r+0x34>
 80120be:	2b1d      	cmp	r3, #29
 80120c0:	d001      	beq.n	80120c6 <__sflush_r+0xb2>
 80120c2:	2b16      	cmp	r3, #22
 80120c4:	d101      	bne.n	80120ca <__sflush_r+0xb6>
 80120c6:	602f      	str	r7, [r5, #0]
 80120c8:	e7b1      	b.n	801202e <__sflush_r+0x1a>
 80120ca:	89a3      	ldrh	r3, [r4, #12]
 80120cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120d0:	81a3      	strh	r3, [r4, #12]
 80120d2:	e7ad      	b.n	8012030 <__sflush_r+0x1c>
 80120d4:	690f      	ldr	r7, [r1, #16]
 80120d6:	2f00      	cmp	r7, #0
 80120d8:	d0a9      	beq.n	801202e <__sflush_r+0x1a>
 80120da:	0793      	lsls	r3, r2, #30
 80120dc:	680e      	ldr	r6, [r1, #0]
 80120de:	bf08      	it	eq
 80120e0:	694b      	ldreq	r3, [r1, #20]
 80120e2:	600f      	str	r7, [r1, #0]
 80120e4:	bf18      	it	ne
 80120e6:	2300      	movne	r3, #0
 80120e8:	eba6 0807 	sub.w	r8, r6, r7
 80120ec:	608b      	str	r3, [r1, #8]
 80120ee:	f1b8 0f00 	cmp.w	r8, #0
 80120f2:	dd9c      	ble.n	801202e <__sflush_r+0x1a>
 80120f4:	6a21      	ldr	r1, [r4, #32]
 80120f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120f8:	4643      	mov	r3, r8
 80120fa:	463a      	mov	r2, r7
 80120fc:	4628      	mov	r0, r5
 80120fe:	47b0      	blx	r6
 8012100:	2800      	cmp	r0, #0
 8012102:	dc06      	bgt.n	8012112 <__sflush_r+0xfe>
 8012104:	89a3      	ldrh	r3, [r4, #12]
 8012106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801210a:	81a3      	strh	r3, [r4, #12]
 801210c:	f04f 30ff 	mov.w	r0, #4294967295
 8012110:	e78e      	b.n	8012030 <__sflush_r+0x1c>
 8012112:	4407      	add	r7, r0
 8012114:	eba8 0800 	sub.w	r8, r8, r0
 8012118:	e7e9      	b.n	80120ee <__sflush_r+0xda>
 801211a:	bf00      	nop
 801211c:	20400001 	.word	0x20400001

08012120 <_fflush_r>:
 8012120:	b538      	push	{r3, r4, r5, lr}
 8012122:	690b      	ldr	r3, [r1, #16]
 8012124:	4605      	mov	r5, r0
 8012126:	460c      	mov	r4, r1
 8012128:	b913      	cbnz	r3, 8012130 <_fflush_r+0x10>
 801212a:	2500      	movs	r5, #0
 801212c:	4628      	mov	r0, r5
 801212e:	bd38      	pop	{r3, r4, r5, pc}
 8012130:	b118      	cbz	r0, 801213a <_fflush_r+0x1a>
 8012132:	6983      	ldr	r3, [r0, #24]
 8012134:	b90b      	cbnz	r3, 801213a <_fflush_r+0x1a>
 8012136:	f000 f887 	bl	8012248 <__sinit>
 801213a:	4b14      	ldr	r3, [pc, #80]	; (801218c <_fflush_r+0x6c>)
 801213c:	429c      	cmp	r4, r3
 801213e:	d11b      	bne.n	8012178 <_fflush_r+0x58>
 8012140:	686c      	ldr	r4, [r5, #4]
 8012142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d0ef      	beq.n	801212a <_fflush_r+0xa>
 801214a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801214c:	07d0      	lsls	r0, r2, #31
 801214e:	d404      	bmi.n	801215a <_fflush_r+0x3a>
 8012150:	0599      	lsls	r1, r3, #22
 8012152:	d402      	bmi.n	801215a <_fflush_r+0x3a>
 8012154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012156:	f7ff fd1a 	bl	8011b8e <__retarget_lock_acquire_recursive>
 801215a:	4628      	mov	r0, r5
 801215c:	4621      	mov	r1, r4
 801215e:	f7ff ff59 	bl	8012014 <__sflush_r>
 8012162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012164:	07da      	lsls	r2, r3, #31
 8012166:	4605      	mov	r5, r0
 8012168:	d4e0      	bmi.n	801212c <_fflush_r+0xc>
 801216a:	89a3      	ldrh	r3, [r4, #12]
 801216c:	059b      	lsls	r3, r3, #22
 801216e:	d4dd      	bmi.n	801212c <_fflush_r+0xc>
 8012170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012172:	f7ff fd0d 	bl	8011b90 <__retarget_lock_release_recursive>
 8012176:	e7d9      	b.n	801212c <_fflush_r+0xc>
 8012178:	4b05      	ldr	r3, [pc, #20]	; (8012190 <_fflush_r+0x70>)
 801217a:	429c      	cmp	r4, r3
 801217c:	d101      	bne.n	8012182 <_fflush_r+0x62>
 801217e:	68ac      	ldr	r4, [r5, #8]
 8012180:	e7df      	b.n	8012142 <_fflush_r+0x22>
 8012182:	4b04      	ldr	r3, [pc, #16]	; (8012194 <_fflush_r+0x74>)
 8012184:	429c      	cmp	r4, r3
 8012186:	bf08      	it	eq
 8012188:	68ec      	ldreq	r4, [r5, #12]
 801218a:	e7da      	b.n	8012142 <_fflush_r+0x22>
 801218c:	08012a6c 	.word	0x08012a6c
 8012190:	08012a8c 	.word	0x08012a8c
 8012194:	08012a4c 	.word	0x08012a4c

08012198 <std>:
 8012198:	2300      	movs	r3, #0
 801219a:	b510      	push	{r4, lr}
 801219c:	4604      	mov	r4, r0
 801219e:	e9c0 3300 	strd	r3, r3, [r0]
 80121a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121a6:	6083      	str	r3, [r0, #8]
 80121a8:	8181      	strh	r1, [r0, #12]
 80121aa:	6643      	str	r3, [r0, #100]	; 0x64
 80121ac:	81c2      	strh	r2, [r0, #14]
 80121ae:	6183      	str	r3, [r0, #24]
 80121b0:	4619      	mov	r1, r3
 80121b2:	2208      	movs	r2, #8
 80121b4:	305c      	adds	r0, #92	; 0x5c
 80121b6:	f7fd fdc9 	bl	800fd4c <memset>
 80121ba:	4b05      	ldr	r3, [pc, #20]	; (80121d0 <std+0x38>)
 80121bc:	6263      	str	r3, [r4, #36]	; 0x24
 80121be:	4b05      	ldr	r3, [pc, #20]	; (80121d4 <std+0x3c>)
 80121c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80121c2:	4b05      	ldr	r3, [pc, #20]	; (80121d8 <std+0x40>)
 80121c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80121c6:	4b05      	ldr	r3, [pc, #20]	; (80121dc <std+0x44>)
 80121c8:	6224      	str	r4, [r4, #32]
 80121ca:	6323      	str	r3, [r4, #48]	; 0x30
 80121cc:	bd10      	pop	{r4, pc}
 80121ce:	bf00      	nop
 80121d0:	080124d5 	.word	0x080124d5
 80121d4:	080124f7 	.word	0x080124f7
 80121d8:	0801252f 	.word	0x0801252f
 80121dc:	08012553 	.word	0x08012553

080121e0 <_cleanup_r>:
 80121e0:	4901      	ldr	r1, [pc, #4]	; (80121e8 <_cleanup_r+0x8>)
 80121e2:	f000 b8af 	b.w	8012344 <_fwalk_reent>
 80121e6:	bf00      	nop
 80121e8:	08012121 	.word	0x08012121

080121ec <__sfmoreglue>:
 80121ec:	b570      	push	{r4, r5, r6, lr}
 80121ee:	2268      	movs	r2, #104	; 0x68
 80121f0:	1e4d      	subs	r5, r1, #1
 80121f2:	4355      	muls	r5, r2
 80121f4:	460e      	mov	r6, r1
 80121f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80121fa:	f7fd fe1b 	bl	800fe34 <_malloc_r>
 80121fe:	4604      	mov	r4, r0
 8012200:	b140      	cbz	r0, 8012214 <__sfmoreglue+0x28>
 8012202:	2100      	movs	r1, #0
 8012204:	e9c0 1600 	strd	r1, r6, [r0]
 8012208:	300c      	adds	r0, #12
 801220a:	60a0      	str	r0, [r4, #8]
 801220c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012210:	f7fd fd9c 	bl	800fd4c <memset>
 8012214:	4620      	mov	r0, r4
 8012216:	bd70      	pop	{r4, r5, r6, pc}

08012218 <__sfp_lock_acquire>:
 8012218:	4801      	ldr	r0, [pc, #4]	; (8012220 <__sfp_lock_acquire+0x8>)
 801221a:	f7ff bcb8 	b.w	8011b8e <__retarget_lock_acquire_recursive>
 801221e:	bf00      	nop
 8012220:	2400200d 	.word	0x2400200d

08012224 <__sfp_lock_release>:
 8012224:	4801      	ldr	r0, [pc, #4]	; (801222c <__sfp_lock_release+0x8>)
 8012226:	f7ff bcb3 	b.w	8011b90 <__retarget_lock_release_recursive>
 801222a:	bf00      	nop
 801222c:	2400200d 	.word	0x2400200d

08012230 <__sinit_lock_acquire>:
 8012230:	4801      	ldr	r0, [pc, #4]	; (8012238 <__sinit_lock_acquire+0x8>)
 8012232:	f7ff bcac 	b.w	8011b8e <__retarget_lock_acquire_recursive>
 8012236:	bf00      	nop
 8012238:	2400200e 	.word	0x2400200e

0801223c <__sinit_lock_release>:
 801223c:	4801      	ldr	r0, [pc, #4]	; (8012244 <__sinit_lock_release+0x8>)
 801223e:	f7ff bca7 	b.w	8011b90 <__retarget_lock_release_recursive>
 8012242:	bf00      	nop
 8012244:	2400200e 	.word	0x2400200e

08012248 <__sinit>:
 8012248:	b510      	push	{r4, lr}
 801224a:	4604      	mov	r4, r0
 801224c:	f7ff fff0 	bl	8012230 <__sinit_lock_acquire>
 8012250:	69a3      	ldr	r3, [r4, #24]
 8012252:	b11b      	cbz	r3, 801225c <__sinit+0x14>
 8012254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012258:	f7ff bff0 	b.w	801223c <__sinit_lock_release>
 801225c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012260:	6523      	str	r3, [r4, #80]	; 0x50
 8012262:	4b13      	ldr	r3, [pc, #76]	; (80122b0 <__sinit+0x68>)
 8012264:	4a13      	ldr	r2, [pc, #76]	; (80122b4 <__sinit+0x6c>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	62a2      	str	r2, [r4, #40]	; 0x28
 801226a:	42a3      	cmp	r3, r4
 801226c:	bf04      	itt	eq
 801226e:	2301      	moveq	r3, #1
 8012270:	61a3      	streq	r3, [r4, #24]
 8012272:	4620      	mov	r0, r4
 8012274:	f000 f820 	bl	80122b8 <__sfp>
 8012278:	6060      	str	r0, [r4, #4]
 801227a:	4620      	mov	r0, r4
 801227c:	f000 f81c 	bl	80122b8 <__sfp>
 8012280:	60a0      	str	r0, [r4, #8]
 8012282:	4620      	mov	r0, r4
 8012284:	f000 f818 	bl	80122b8 <__sfp>
 8012288:	2200      	movs	r2, #0
 801228a:	60e0      	str	r0, [r4, #12]
 801228c:	2104      	movs	r1, #4
 801228e:	6860      	ldr	r0, [r4, #4]
 8012290:	f7ff ff82 	bl	8012198 <std>
 8012294:	68a0      	ldr	r0, [r4, #8]
 8012296:	2201      	movs	r2, #1
 8012298:	2109      	movs	r1, #9
 801229a:	f7ff ff7d 	bl	8012198 <std>
 801229e:	68e0      	ldr	r0, [r4, #12]
 80122a0:	2202      	movs	r2, #2
 80122a2:	2112      	movs	r1, #18
 80122a4:	f7ff ff78 	bl	8012198 <std>
 80122a8:	2301      	movs	r3, #1
 80122aa:	61a3      	str	r3, [r4, #24]
 80122ac:	e7d2      	b.n	8012254 <__sinit+0xc>
 80122ae:	bf00      	nop
 80122b0:	080126d0 	.word	0x080126d0
 80122b4:	080121e1 	.word	0x080121e1

080122b8 <__sfp>:
 80122b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ba:	4607      	mov	r7, r0
 80122bc:	f7ff ffac 	bl	8012218 <__sfp_lock_acquire>
 80122c0:	4b1e      	ldr	r3, [pc, #120]	; (801233c <__sfp+0x84>)
 80122c2:	681e      	ldr	r6, [r3, #0]
 80122c4:	69b3      	ldr	r3, [r6, #24]
 80122c6:	b913      	cbnz	r3, 80122ce <__sfp+0x16>
 80122c8:	4630      	mov	r0, r6
 80122ca:	f7ff ffbd 	bl	8012248 <__sinit>
 80122ce:	3648      	adds	r6, #72	; 0x48
 80122d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80122d4:	3b01      	subs	r3, #1
 80122d6:	d503      	bpl.n	80122e0 <__sfp+0x28>
 80122d8:	6833      	ldr	r3, [r6, #0]
 80122da:	b30b      	cbz	r3, 8012320 <__sfp+0x68>
 80122dc:	6836      	ldr	r6, [r6, #0]
 80122de:	e7f7      	b.n	80122d0 <__sfp+0x18>
 80122e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80122e4:	b9d5      	cbnz	r5, 801231c <__sfp+0x64>
 80122e6:	4b16      	ldr	r3, [pc, #88]	; (8012340 <__sfp+0x88>)
 80122e8:	60e3      	str	r3, [r4, #12]
 80122ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80122ee:	6665      	str	r5, [r4, #100]	; 0x64
 80122f0:	f7ff fc4c 	bl	8011b8c <__retarget_lock_init_recursive>
 80122f4:	f7ff ff96 	bl	8012224 <__sfp_lock_release>
 80122f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80122fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012300:	6025      	str	r5, [r4, #0]
 8012302:	61a5      	str	r5, [r4, #24]
 8012304:	2208      	movs	r2, #8
 8012306:	4629      	mov	r1, r5
 8012308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801230c:	f7fd fd1e 	bl	800fd4c <memset>
 8012310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012318:	4620      	mov	r0, r4
 801231a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801231c:	3468      	adds	r4, #104	; 0x68
 801231e:	e7d9      	b.n	80122d4 <__sfp+0x1c>
 8012320:	2104      	movs	r1, #4
 8012322:	4638      	mov	r0, r7
 8012324:	f7ff ff62 	bl	80121ec <__sfmoreglue>
 8012328:	4604      	mov	r4, r0
 801232a:	6030      	str	r0, [r6, #0]
 801232c:	2800      	cmp	r0, #0
 801232e:	d1d5      	bne.n	80122dc <__sfp+0x24>
 8012330:	f7ff ff78 	bl	8012224 <__sfp_lock_release>
 8012334:	230c      	movs	r3, #12
 8012336:	603b      	str	r3, [r7, #0]
 8012338:	e7ee      	b.n	8012318 <__sfp+0x60>
 801233a:	bf00      	nop
 801233c:	080126d0 	.word	0x080126d0
 8012340:	ffff0001 	.word	0xffff0001

08012344 <_fwalk_reent>:
 8012344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012348:	4606      	mov	r6, r0
 801234a:	4688      	mov	r8, r1
 801234c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012350:	2700      	movs	r7, #0
 8012352:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012356:	f1b9 0901 	subs.w	r9, r9, #1
 801235a:	d505      	bpl.n	8012368 <_fwalk_reent+0x24>
 801235c:	6824      	ldr	r4, [r4, #0]
 801235e:	2c00      	cmp	r4, #0
 8012360:	d1f7      	bne.n	8012352 <_fwalk_reent+0xe>
 8012362:	4638      	mov	r0, r7
 8012364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012368:	89ab      	ldrh	r3, [r5, #12]
 801236a:	2b01      	cmp	r3, #1
 801236c:	d907      	bls.n	801237e <_fwalk_reent+0x3a>
 801236e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012372:	3301      	adds	r3, #1
 8012374:	d003      	beq.n	801237e <_fwalk_reent+0x3a>
 8012376:	4629      	mov	r1, r5
 8012378:	4630      	mov	r0, r6
 801237a:	47c0      	blx	r8
 801237c:	4307      	orrs	r7, r0
 801237e:	3568      	adds	r5, #104	; 0x68
 8012380:	e7e9      	b.n	8012356 <_fwalk_reent+0x12>

08012382 <__swhatbuf_r>:
 8012382:	b570      	push	{r4, r5, r6, lr}
 8012384:	460e      	mov	r6, r1
 8012386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801238a:	2900      	cmp	r1, #0
 801238c:	b096      	sub	sp, #88	; 0x58
 801238e:	4614      	mov	r4, r2
 8012390:	461d      	mov	r5, r3
 8012392:	da08      	bge.n	80123a6 <__swhatbuf_r+0x24>
 8012394:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012398:	2200      	movs	r2, #0
 801239a:	602a      	str	r2, [r5, #0]
 801239c:	061a      	lsls	r2, r3, #24
 801239e:	d410      	bmi.n	80123c2 <__swhatbuf_r+0x40>
 80123a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123a4:	e00e      	b.n	80123c4 <__swhatbuf_r+0x42>
 80123a6:	466a      	mov	r2, sp
 80123a8:	f000 f8fa 	bl	80125a0 <_fstat_r>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	dbf1      	blt.n	8012394 <__swhatbuf_r+0x12>
 80123b0:	9a01      	ldr	r2, [sp, #4]
 80123b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80123b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80123ba:	425a      	negs	r2, r3
 80123bc:	415a      	adcs	r2, r3
 80123be:	602a      	str	r2, [r5, #0]
 80123c0:	e7ee      	b.n	80123a0 <__swhatbuf_r+0x1e>
 80123c2:	2340      	movs	r3, #64	; 0x40
 80123c4:	2000      	movs	r0, #0
 80123c6:	6023      	str	r3, [r4, #0]
 80123c8:	b016      	add	sp, #88	; 0x58
 80123ca:	bd70      	pop	{r4, r5, r6, pc}

080123cc <__smakebuf_r>:
 80123cc:	898b      	ldrh	r3, [r1, #12]
 80123ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80123d0:	079d      	lsls	r5, r3, #30
 80123d2:	4606      	mov	r6, r0
 80123d4:	460c      	mov	r4, r1
 80123d6:	d507      	bpl.n	80123e8 <__smakebuf_r+0x1c>
 80123d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80123dc:	6023      	str	r3, [r4, #0]
 80123de:	6123      	str	r3, [r4, #16]
 80123e0:	2301      	movs	r3, #1
 80123e2:	6163      	str	r3, [r4, #20]
 80123e4:	b002      	add	sp, #8
 80123e6:	bd70      	pop	{r4, r5, r6, pc}
 80123e8:	ab01      	add	r3, sp, #4
 80123ea:	466a      	mov	r2, sp
 80123ec:	f7ff ffc9 	bl	8012382 <__swhatbuf_r>
 80123f0:	9900      	ldr	r1, [sp, #0]
 80123f2:	4605      	mov	r5, r0
 80123f4:	4630      	mov	r0, r6
 80123f6:	f7fd fd1d 	bl	800fe34 <_malloc_r>
 80123fa:	b948      	cbnz	r0, 8012410 <__smakebuf_r+0x44>
 80123fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012400:	059a      	lsls	r2, r3, #22
 8012402:	d4ef      	bmi.n	80123e4 <__smakebuf_r+0x18>
 8012404:	f023 0303 	bic.w	r3, r3, #3
 8012408:	f043 0302 	orr.w	r3, r3, #2
 801240c:	81a3      	strh	r3, [r4, #12]
 801240e:	e7e3      	b.n	80123d8 <__smakebuf_r+0xc>
 8012410:	4b0d      	ldr	r3, [pc, #52]	; (8012448 <__smakebuf_r+0x7c>)
 8012412:	62b3      	str	r3, [r6, #40]	; 0x28
 8012414:	89a3      	ldrh	r3, [r4, #12]
 8012416:	6020      	str	r0, [r4, #0]
 8012418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801241c:	81a3      	strh	r3, [r4, #12]
 801241e:	9b00      	ldr	r3, [sp, #0]
 8012420:	6163      	str	r3, [r4, #20]
 8012422:	9b01      	ldr	r3, [sp, #4]
 8012424:	6120      	str	r0, [r4, #16]
 8012426:	b15b      	cbz	r3, 8012440 <__smakebuf_r+0x74>
 8012428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801242c:	4630      	mov	r0, r6
 801242e:	f000 f8c9 	bl	80125c4 <_isatty_r>
 8012432:	b128      	cbz	r0, 8012440 <__smakebuf_r+0x74>
 8012434:	89a3      	ldrh	r3, [r4, #12]
 8012436:	f023 0303 	bic.w	r3, r3, #3
 801243a:	f043 0301 	orr.w	r3, r3, #1
 801243e:	81a3      	strh	r3, [r4, #12]
 8012440:	89a0      	ldrh	r0, [r4, #12]
 8012442:	4305      	orrs	r5, r0
 8012444:	81a5      	strh	r5, [r4, #12]
 8012446:	e7cd      	b.n	80123e4 <__smakebuf_r+0x18>
 8012448:	080121e1 	.word	0x080121e1

0801244c <_raise_r>:
 801244c:	291f      	cmp	r1, #31
 801244e:	b538      	push	{r3, r4, r5, lr}
 8012450:	4604      	mov	r4, r0
 8012452:	460d      	mov	r5, r1
 8012454:	d904      	bls.n	8012460 <_raise_r+0x14>
 8012456:	2316      	movs	r3, #22
 8012458:	6003      	str	r3, [r0, #0]
 801245a:	f04f 30ff 	mov.w	r0, #4294967295
 801245e:	bd38      	pop	{r3, r4, r5, pc}
 8012460:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012462:	b112      	cbz	r2, 801246a <_raise_r+0x1e>
 8012464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012468:	b94b      	cbnz	r3, 801247e <_raise_r+0x32>
 801246a:	4620      	mov	r0, r4
 801246c:	f000 f830 	bl	80124d0 <_getpid_r>
 8012470:	462a      	mov	r2, r5
 8012472:	4601      	mov	r1, r0
 8012474:	4620      	mov	r0, r4
 8012476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801247a:	f000 b817 	b.w	80124ac <_kill_r>
 801247e:	2b01      	cmp	r3, #1
 8012480:	d00a      	beq.n	8012498 <_raise_r+0x4c>
 8012482:	1c59      	adds	r1, r3, #1
 8012484:	d103      	bne.n	801248e <_raise_r+0x42>
 8012486:	2316      	movs	r3, #22
 8012488:	6003      	str	r3, [r0, #0]
 801248a:	2001      	movs	r0, #1
 801248c:	e7e7      	b.n	801245e <_raise_r+0x12>
 801248e:	2400      	movs	r4, #0
 8012490:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012494:	4628      	mov	r0, r5
 8012496:	4798      	blx	r3
 8012498:	2000      	movs	r0, #0
 801249a:	e7e0      	b.n	801245e <_raise_r+0x12>

0801249c <raise>:
 801249c:	4b02      	ldr	r3, [pc, #8]	; (80124a8 <raise+0xc>)
 801249e:	4601      	mov	r1, r0
 80124a0:	6818      	ldr	r0, [r3, #0]
 80124a2:	f7ff bfd3 	b.w	801244c <_raise_r>
 80124a6:	bf00      	nop
 80124a8:	24000184 	.word	0x24000184

080124ac <_kill_r>:
 80124ac:	b538      	push	{r3, r4, r5, lr}
 80124ae:	4d07      	ldr	r5, [pc, #28]	; (80124cc <_kill_r+0x20>)
 80124b0:	2300      	movs	r3, #0
 80124b2:	4604      	mov	r4, r0
 80124b4:	4608      	mov	r0, r1
 80124b6:	4611      	mov	r1, r2
 80124b8:	602b      	str	r3, [r5, #0]
 80124ba:	f7ee fdcb 	bl	8001054 <_kill>
 80124be:	1c43      	adds	r3, r0, #1
 80124c0:	d102      	bne.n	80124c8 <_kill_r+0x1c>
 80124c2:	682b      	ldr	r3, [r5, #0]
 80124c4:	b103      	cbz	r3, 80124c8 <_kill_r+0x1c>
 80124c6:	6023      	str	r3, [r4, #0]
 80124c8:	bd38      	pop	{r3, r4, r5, pc}
 80124ca:	bf00      	nop
 80124cc:	24002008 	.word	0x24002008

080124d0 <_getpid_r>:
 80124d0:	f7ee bdb8 	b.w	8001044 <_getpid>

080124d4 <__sread>:
 80124d4:	b510      	push	{r4, lr}
 80124d6:	460c      	mov	r4, r1
 80124d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124dc:	f000 f894 	bl	8012608 <_read_r>
 80124e0:	2800      	cmp	r0, #0
 80124e2:	bfab      	itete	ge
 80124e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80124e6:	89a3      	ldrhlt	r3, [r4, #12]
 80124e8:	181b      	addge	r3, r3, r0
 80124ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80124ee:	bfac      	ite	ge
 80124f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80124f2:	81a3      	strhlt	r3, [r4, #12]
 80124f4:	bd10      	pop	{r4, pc}

080124f6 <__swrite>:
 80124f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124fa:	461f      	mov	r7, r3
 80124fc:	898b      	ldrh	r3, [r1, #12]
 80124fe:	05db      	lsls	r3, r3, #23
 8012500:	4605      	mov	r5, r0
 8012502:	460c      	mov	r4, r1
 8012504:	4616      	mov	r6, r2
 8012506:	d505      	bpl.n	8012514 <__swrite+0x1e>
 8012508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801250c:	2302      	movs	r3, #2
 801250e:	2200      	movs	r2, #0
 8012510:	f000 f868 	bl	80125e4 <_lseek_r>
 8012514:	89a3      	ldrh	r3, [r4, #12]
 8012516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801251a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801251e:	81a3      	strh	r3, [r4, #12]
 8012520:	4632      	mov	r2, r6
 8012522:	463b      	mov	r3, r7
 8012524:	4628      	mov	r0, r5
 8012526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801252a:	f000 b817 	b.w	801255c <_write_r>

0801252e <__sseek>:
 801252e:	b510      	push	{r4, lr}
 8012530:	460c      	mov	r4, r1
 8012532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012536:	f000 f855 	bl	80125e4 <_lseek_r>
 801253a:	1c43      	adds	r3, r0, #1
 801253c:	89a3      	ldrh	r3, [r4, #12]
 801253e:	bf15      	itete	ne
 8012540:	6560      	strne	r0, [r4, #84]	; 0x54
 8012542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801254a:	81a3      	strheq	r3, [r4, #12]
 801254c:	bf18      	it	ne
 801254e:	81a3      	strhne	r3, [r4, #12]
 8012550:	bd10      	pop	{r4, pc}

08012552 <__sclose>:
 8012552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012556:	f000 b813 	b.w	8012580 <_close_r>
	...

0801255c <_write_r>:
 801255c:	b538      	push	{r3, r4, r5, lr}
 801255e:	4d07      	ldr	r5, [pc, #28]	; (801257c <_write_r+0x20>)
 8012560:	4604      	mov	r4, r0
 8012562:	4608      	mov	r0, r1
 8012564:	4611      	mov	r1, r2
 8012566:	2200      	movs	r2, #0
 8012568:	602a      	str	r2, [r5, #0]
 801256a:	461a      	mov	r2, r3
 801256c:	f7ee fda9 	bl	80010c2 <_write>
 8012570:	1c43      	adds	r3, r0, #1
 8012572:	d102      	bne.n	801257a <_write_r+0x1e>
 8012574:	682b      	ldr	r3, [r5, #0]
 8012576:	b103      	cbz	r3, 801257a <_write_r+0x1e>
 8012578:	6023      	str	r3, [r4, #0]
 801257a:	bd38      	pop	{r3, r4, r5, pc}
 801257c:	24002008 	.word	0x24002008

08012580 <_close_r>:
 8012580:	b538      	push	{r3, r4, r5, lr}
 8012582:	4d06      	ldr	r5, [pc, #24]	; (801259c <_close_r+0x1c>)
 8012584:	2300      	movs	r3, #0
 8012586:	4604      	mov	r4, r0
 8012588:	4608      	mov	r0, r1
 801258a:	602b      	str	r3, [r5, #0]
 801258c:	f7ee fdb5 	bl	80010fa <_close>
 8012590:	1c43      	adds	r3, r0, #1
 8012592:	d102      	bne.n	801259a <_close_r+0x1a>
 8012594:	682b      	ldr	r3, [r5, #0]
 8012596:	b103      	cbz	r3, 801259a <_close_r+0x1a>
 8012598:	6023      	str	r3, [r4, #0]
 801259a:	bd38      	pop	{r3, r4, r5, pc}
 801259c:	24002008 	.word	0x24002008

080125a0 <_fstat_r>:
 80125a0:	b538      	push	{r3, r4, r5, lr}
 80125a2:	4d07      	ldr	r5, [pc, #28]	; (80125c0 <_fstat_r+0x20>)
 80125a4:	2300      	movs	r3, #0
 80125a6:	4604      	mov	r4, r0
 80125a8:	4608      	mov	r0, r1
 80125aa:	4611      	mov	r1, r2
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	f7ee fdb0 	bl	8001112 <_fstat>
 80125b2:	1c43      	adds	r3, r0, #1
 80125b4:	d102      	bne.n	80125bc <_fstat_r+0x1c>
 80125b6:	682b      	ldr	r3, [r5, #0]
 80125b8:	b103      	cbz	r3, 80125bc <_fstat_r+0x1c>
 80125ba:	6023      	str	r3, [r4, #0]
 80125bc:	bd38      	pop	{r3, r4, r5, pc}
 80125be:	bf00      	nop
 80125c0:	24002008 	.word	0x24002008

080125c4 <_isatty_r>:
 80125c4:	b538      	push	{r3, r4, r5, lr}
 80125c6:	4d06      	ldr	r5, [pc, #24]	; (80125e0 <_isatty_r+0x1c>)
 80125c8:	2300      	movs	r3, #0
 80125ca:	4604      	mov	r4, r0
 80125cc:	4608      	mov	r0, r1
 80125ce:	602b      	str	r3, [r5, #0]
 80125d0:	f7ee fdaf 	bl	8001132 <_isatty>
 80125d4:	1c43      	adds	r3, r0, #1
 80125d6:	d102      	bne.n	80125de <_isatty_r+0x1a>
 80125d8:	682b      	ldr	r3, [r5, #0]
 80125da:	b103      	cbz	r3, 80125de <_isatty_r+0x1a>
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	bd38      	pop	{r3, r4, r5, pc}
 80125e0:	24002008 	.word	0x24002008

080125e4 <_lseek_r>:
 80125e4:	b538      	push	{r3, r4, r5, lr}
 80125e6:	4d07      	ldr	r5, [pc, #28]	; (8012604 <_lseek_r+0x20>)
 80125e8:	4604      	mov	r4, r0
 80125ea:	4608      	mov	r0, r1
 80125ec:	4611      	mov	r1, r2
 80125ee:	2200      	movs	r2, #0
 80125f0:	602a      	str	r2, [r5, #0]
 80125f2:	461a      	mov	r2, r3
 80125f4:	f7ee fda8 	bl	8001148 <_lseek>
 80125f8:	1c43      	adds	r3, r0, #1
 80125fa:	d102      	bne.n	8012602 <_lseek_r+0x1e>
 80125fc:	682b      	ldr	r3, [r5, #0]
 80125fe:	b103      	cbz	r3, 8012602 <_lseek_r+0x1e>
 8012600:	6023      	str	r3, [r4, #0]
 8012602:	bd38      	pop	{r3, r4, r5, pc}
 8012604:	24002008 	.word	0x24002008

08012608 <_read_r>:
 8012608:	b538      	push	{r3, r4, r5, lr}
 801260a:	4d07      	ldr	r5, [pc, #28]	; (8012628 <_read_r+0x20>)
 801260c:	4604      	mov	r4, r0
 801260e:	4608      	mov	r0, r1
 8012610:	4611      	mov	r1, r2
 8012612:	2200      	movs	r2, #0
 8012614:	602a      	str	r2, [r5, #0]
 8012616:	461a      	mov	r2, r3
 8012618:	f7ee fd36 	bl	8001088 <_read>
 801261c:	1c43      	adds	r3, r0, #1
 801261e:	d102      	bne.n	8012626 <_read_r+0x1e>
 8012620:	682b      	ldr	r3, [r5, #0]
 8012622:	b103      	cbz	r3, 8012626 <_read_r+0x1e>
 8012624:	6023      	str	r3, [r4, #0]
 8012626:	bd38      	pop	{r3, r4, r5, pc}
 8012628:	24002008 	.word	0x24002008

0801262c <_init>:
 801262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801262e:	bf00      	nop
 8012630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012632:	bc08      	pop	{r3}
 8012634:	469e      	mov	lr, r3
 8012636:	4770      	bx	lr

08012638 <_fini>:
 8012638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801263a:	bf00      	nop
 801263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801263e:	bc08      	pop	{r3}
 8012640:	469e      	mov	lr, r3
 8012642:	4770      	bx	lr
