
baremetal_2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012964  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08012c08  08012c08  00022c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801306c  0801306c  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  0801306c  0801306c  0002306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013074  08013074  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013074  08013074  00023074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013078  08013078  00023078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  24000000  0801307c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  24000354  080133d0  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002010  080133d0  00032010  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034057  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000693a  00000000  00000000  000643d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000b1d  00000000  00000000  0006ad13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002238  00000000  00000000  0006b830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002188  00000000  00000000  0006da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000439a5  00000000  00000000  0006fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031e7b  00000000  00000000  000b3595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00192f45  00000000  00000000  000e5410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00278355  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009b74  00000000  00000000  002783a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000354 	.word	0x24000354
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012bec 	.word	0x08012bec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000358 	.word	0x24000358
 80002dc:	08012bec 	.word	0x08012bec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN11CalibrationC1Ev>:
 */

#include <calibration.hpp>


Calibration::Calibration():
 8000694:	b510      	push	{r4, lr}
 8000696:	4604      	mov	r4, r0
	left_side_g(0),
	right_side_g(0),
	nose_up_g(0),
	nose_down_g(0),
	sum_filter_output(0),
	filtered_output(0)
 8000698:	f000 fe4c 	bl	8001334 <_ZN10SensorDataC1Ev>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	2000      	movs	r0, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	67a2      	str	r2, [r4, #120]	; 0x78
 80006a6:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c


class  RCFilter
{
public:
	RCFilter(float fc): cutoff_freq(fc), prev_time(0), prev_output(0)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <_ZN11CalibrationC1Ev+0x60>)
 80006ac:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80006b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80006b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80006b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80006bc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80006c0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80006c4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80006c8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 80006cc:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
	void UpdateMeasuredGValue(CalibrationPosition drone_side, int num_samples);
	void ComputeOffsets();
	bool CalibrationComplete();
	void CalibrateGyro();

	struct sensor_offset
 80006d0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80006d4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 80006d8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80006dc:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 80006e0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80006e4:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 80006e8:	e9c4 012a 	strd	r0, r1, [r4, #168]	; 0xa8
 80006ec:	e9c4 012c 	strd	r0, r1, [r4, #176]	; 0xb0
{

}
 80006f0:	4620      	mov	r0, r4
 80006f2:	bd10      	pop	{r4, pc}
 80006f4:	43cc0000 	.word	0x43cc0000

080006f8 <_ZN11Calibration21CalibrateNextPositionEv>:


CalibrationPosition Calibration::CalibrateNextPosition()
{
 80006f8:	b538      	push	{r3, r4, r5, lr}
 80006fa:	4604      	mov	r4, r0
 80006fc:	ed2d 8b02 	vpush	{d8}
		acc_error = sensor.GetAccData();
		// Acquire enough data past the threshold for each axis
		uint32_t num_samples = 0;

		// When nose up
		if(acc_error.imu_acc_x > ACCEL_THRESHOLD && !nose_up_calibrated)
 8000700:	ed9f 8a8c 	vldr	s16, [pc, #560]	; 8000934 <_ZN11Calibration21CalibrateNextPositionEv+0x23c>
				acc_error = sensor.GetAccData();
			}
		}

		// Nose Down Scenario
		else if(acc_error.imu_acc_x < -ACCEL_THRESHOLD && !nose_down_calibrated)
 8000704:	eddf 8a8c 	vldr	s17, [pc, #560]	; 8000938 <_ZN11Calibration21CalibrateNextPositionEv+0x240>
 8000708:	e037      	b.n	800077a <_ZN11Calibration21CalibrateNextPositionEv+0x82>
 800070a:	eeb4 0ae8 	vcmpe.f32	s0, s17
 800070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000712:	d503      	bpl.n	800071c <_ZN11Calibration21CalibrateNextPositionEv+0x24>
 8000714:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 8000718:	2b00      	cmp	r3, #0
 800071a:	d064      	beq.n	80007e6 <_ZN11Calibration21CalibrateNextPositionEv+0xee>
				sensor.ReadAcc();
				acc_error = sensor.GetAccData();
			}
		}
		// Right Side
		else if(acc_error.imu_acc_y  > ACCEL_THRESHOLD && !right_side_calibrated)
 800071c:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8000720:	eef4 7ac8 	vcmpe.f32	s15, s16
 8000724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000728:	dd03      	ble.n	8000732 <_ZN11Calibration21CalibrateNextPositionEv+0x3a>
 800072a:	f894 307b 	ldrb.w	r3, [r4, #123]	; 0x7b
 800072e:	2b00      	cmp	r3, #0
 8000730:	d07a      	beq.n	8000828 <_ZN11Calibration21CalibrateNextPositionEv+0x130>
			}

		}

		// Left Side
		else if(acc_error.imu_acc_y  < -ACCEL_THRESHOLD && !left_side_calibrated)
 8000732:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	d504      	bpl.n	8000746 <_ZN11Calibration21CalibrateNextPositionEv+0x4e>
 800073c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 8000740:	2b00      	cmp	r3, #0
 8000742:	f000 8092 	beq.w	800086a <_ZN11Calibration21CalibrateNextPositionEv+0x172>
			}

		}

		// Upside Up
		else if(acc_error.imu_acc_z > ACCEL_THRESHOLD && !upside_up_calibrated)
 8000746:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 800074a:	eef4 7ac8 	vcmpe.f32	s15, s16
 800074e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000752:	dd04      	ble.n	800075e <_ZN11Calibration21CalibrateNextPositionEv+0x66>
 8000754:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8000758:	2b00      	cmp	r3, #0
 800075a:	f000 80a8 	beq.w	80008ae <_ZN11Calibration21CalibrateNextPositionEv+0x1b6>
			}
		}


		// Upside Down
		else if(acc_error.imu_acc_z < - ACCEL_THRESHOLD && !upside_down_calibrated)
 800075e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000766:	d504      	bpl.n	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
 8000768:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 800076c:	2b00      	cmp	r3, #0
 800076e:	f000 80bf 	beq.w	80008f0 <_ZN11Calibration21CalibrateNextPositionEv+0x1f8>
				sensor.ReadAcc();
				acc_error = sensor.GetAccData();
			}
		}

		HAL_Delay(1000);
 8000772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000776:	f001 fc11 	bl	8001f9c <HAL_Delay>
		sensor.ReadAcc();
 800077a:	4620      	mov	r0, r4
 800077c:	f000 fdee 	bl	800135c <_ZN10SensorData7ReadAccEv>
		acc_error = sensor.GetAccData();
 8000780:	4620      	mov	r0, r4
 8000782:	f000 fe13 	bl	80013ac <_ZN10SensorData10GetAccDataEv>
		if(acc_error.imu_acc_x > ACCEL_THRESHOLD && !nose_up_calibrated)
 8000786:	eeb4 0ac8 	vcmpe.f32	s0, s16
		acc_error = sensor.GetAccData();
 800078a:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
 800078e:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
		if(acc_error.imu_acc_x > ACCEL_THRESHOLD && !nose_up_calibrated)
 8000792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		acc_error = sensor.GetAccData();
 8000796:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
		if(acc_error.imu_acc_x > ACCEL_THRESHOLD && !nose_up_calibrated)
 800079a:	ddb6      	ble.n	800070a <_ZN11Calibration21CalibrateNextPositionEv+0x12>
 800079c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1b2      	bne.n	800070a <_ZN11Calibration21CalibrateNextPositionEv+0x12>
 80007a4:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 80007a6:	200a      	movs	r0, #10
 80007a8:	f001 fbf8 	bl	8001f9c <HAL_Delay>
				sensor.ReadAcc();
 80007ac:	4620      	mov	r0, r4
 80007ae:	f000 fdd5 	bl	800135c <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 80007b2:	4620      	mov	r0, r4
 80007b4:	f000 fdfa 	bl	80013ac <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_x > ACCEL_THRESHOLD)
 80007b8:	eeb4 0ac8 	vcmpe.f32	s0, s16
				acc_error = sensor.GetAccData();
 80007bc:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
 80007c0:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_x > ACCEL_THRESHOLD)
 80007c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 80007c8:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
			while(acc_error.imu_acc_x > ACCEL_THRESHOLD)
 80007cc:	ddd1      	ble.n	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
				if(num_samples > SAMPLE_THRESHOLD)
 80007ce:	3d01      	subs	r5, #1
 80007d0:	d1e9      	bne.n	80007a6 <_ZN11Calibration21CalibrateNextPositionEv+0xae>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
}

inline void LEDDOn ()
{
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET);
 80007d2:	485a      	ldr	r0, [pc, #360]	; (800093c <_ZN11Calibration21CalibrateNextPositionEv+0x244>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007da:	f004 f98d 	bl	8004af8 <HAL_GPIO_WritePin>
					return CalibrationPosition::NOSE_UP;
 80007de:	2004      	movs	r0, #4
	}

}
 80007e0:	ecbd 8b02 	vpop	{d8}
 80007e4:	bd38      	pop	{r3, r4, r5, pc}
 80007e6:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 80007e8:	200a      	movs	r0, #10
 80007ea:	f001 fbd7 	bl	8001f9c <HAL_Delay>
				sensor.ReadAcc();
 80007ee:	4620      	mov	r0, r4
 80007f0:	f000 fdb4 	bl	800135c <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 80007f4:	4620      	mov	r0, r4
 80007f6:	f000 fdd9 	bl	80013ac <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_x < -ACCEL_THRESHOLD)
 80007fa:	eeb4 0ae8 	vcmpe.f32	s0, s17
				acc_error = sensor.GetAccData();
 80007fe:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
 8000802:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_x < -ACCEL_THRESHOLD)
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 800080a:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
			while(acc_error.imu_acc_x < -ACCEL_THRESHOLD)
 800080e:	d5b0      	bpl.n	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
				if(num_samples > SAMPLE_THRESHOLD)
 8000810:	3d01      	subs	r5, #1
 8000812:	d1e9      	bne.n	80007e8 <_ZN11Calibration21CalibrateNextPositionEv+0xf0>
}

inline void LEDDOff ()
{
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8000814:	4849      	ldr	r0, [pc, #292]	; (800093c <_ZN11Calibration21CalibrateNextPositionEv+0x244>)
 8000816:	462a      	mov	r2, r5
 8000818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081c:	f004 f96c 	bl	8004af8 <HAL_GPIO_WritePin>
					return CalibrationPosition::NOSE_DOWN;
 8000820:	2005      	movs	r0, #5
}
 8000822:	ecbd 8b02 	vpop	{d8}
 8000826:	bd38      	pop	{r3, r4, r5, pc}
 8000828:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 800082a:	200a      	movs	r0, #10
 800082c:	f001 fbb6 	bl	8001f9c <HAL_Delay>
				sensor.ReadAcc();
 8000830:	4620      	mov	r0, r4
 8000832:	f000 fd93 	bl	800135c <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 8000836:	4620      	mov	r0, r4
 8000838:	f000 fdb8 	bl	80013ac <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_y > ACCEL_THRESHOLD)
 800083c:	eef4 0ac8 	vcmpe.f32	s1, s16
				acc_error = sensor.GetAccData();
 8000840:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 8000844:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_y > ACCEL_THRESHOLD)
 8000848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 800084c:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
			while(acc_error.imu_acc_y > ACCEL_THRESHOLD)
 8000850:	dd8f      	ble.n	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
				if(num_samples > SAMPLE_THRESHOLD)
 8000852:	3d01      	subs	r5, #1
 8000854:	d1e9      	bne.n	800082a <_ZN11Calibration21CalibrateNextPositionEv+0x132>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_SET);
 8000856:	4839      	ldr	r0, [pc, #228]	; (800093c <_ZN11Calibration21CalibrateNextPositionEv+0x244>)
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085e:	f004 f94b 	bl	8004af8 <HAL_GPIO_WritePin>
					return CalibrationPosition::RIGHT_SIDE_DOWN;
 8000862:	2003      	movs	r0, #3
}
 8000864:	ecbd 8b02 	vpop	{d8}
 8000868:	bd38      	pop	{r3, r4, r5, pc}
 800086a:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 800086c:	200a      	movs	r0, #10
 800086e:	f001 fb95 	bl	8001f9c <HAL_Delay>
				sensor.ReadAcc();
 8000872:	4620      	mov	r0, r4
 8000874:	f000 fd72 	bl	800135c <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 8000878:	4620      	mov	r0, r4
 800087a:	f000 fd97 	bl	80013ac <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_y < - ACCEL_THRESHOLD)
 800087e:	eef4 0ae8 	vcmpe.f32	s1, s17
				acc_error = sensor.GetAccData();
 8000882:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 8000886:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_y < - ACCEL_THRESHOLD)
 800088a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 800088e:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
			while(acc_error.imu_acc_y < - ACCEL_THRESHOLD)
 8000892:	f57f af6e 	bpl.w	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
				if(num_samples > SAMPLE_THRESHOLD)
 8000896:	3d01      	subs	r5, #1
 8000898:	d1e8      	bne.n	800086c <_ZN11Calibration21CalibrateNextPositionEv+0x174>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
 800089a:	4828      	ldr	r0, [pc, #160]	; (800093c <_ZN11Calibration21CalibrateNextPositionEv+0x244>)
 800089c:	462a      	mov	r2, r5
 800089e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a2:	f004 f929 	bl	8004af8 <HAL_GPIO_WritePin>
					return CalibrationPosition::LEFT_SIDE_DOWN;
 80008a6:	2002      	movs	r0, #2
}
 80008a8:	ecbd 8b02 	vpop	{d8}
 80008ac:	bd38      	pop	{r3, r4, r5, pc}
 80008ae:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f001 fb73 	bl	8001f9c <HAL_Delay>
				sensor.ReadAcc();
 80008b6:	4620      	mov	r0, r4
 80008b8:	f000 fd50 	bl	800135c <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 80008bc:	4620      	mov	r0, r4
 80008be:	f000 fd75 	bl	80013ac <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_z > ACCEL_THRESHOLD)
 80008c2:	eeb4 1ac8 	vcmpe.f32	s2, s16
				acc_error = sensor.GetAccData();
 80008c6:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 80008ca:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
			while(acc_error.imu_acc_z > ACCEL_THRESHOLD)
 80008ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 80008d2:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_z > ACCEL_THRESHOLD)
 80008d6:	f77f af4c 	ble.w	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
					if(num_samples > SAMPLE_THRESHOLD)
 80008da:	3d01      	subs	r5, #1
 80008dc:	d1e8      	bne.n	80008b0 <_ZN11Calibration21CalibrateNextPositionEv+0x1b8>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 80008de:	4818      	ldr	r0, [pc, #96]	; (8000940 <_ZN11Calibration21CalibrateNextPositionEv+0x248>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	2180      	movs	r1, #128	; 0x80
 80008e4:	f004 f908 	bl	8004af8 <HAL_GPIO_WritePin>
						return CalibrationPosition::UPSIDE_UP;
 80008e8:	4628      	mov	r0, r5
}
 80008ea:	ecbd 8b02 	vpop	{d8}
 80008ee:	bd38      	pop	{r3, r4, r5, pc}
 80008f0:	25c8      	movs	r5, #200	; 0xc8
				HAL_Delay(10);
 80008f2:	200a      	movs	r0, #10
 80008f4:	f001 fb52 	bl	8001f9c <HAL_Delay>
				sensor.ReadAcc();
 80008f8:	4620      	mov	r0, r4
 80008fa:	f000 fd2f 	bl	800135c <_ZN10SensorData7ReadAccEv>
				acc_error = sensor.GetAccData();
 80008fe:	4620      	mov	r0, r4
 8000900:	f000 fd54 	bl	80013ac <_ZN10SensorData10GetAccDataEv>
			while(acc_error.imu_acc_z < - ACCEL_THRESHOLD)
 8000904:	eeb4 1ae8 	vcmpe.f32	s2, s17
				acc_error = sensor.GetAccData();
 8000908:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 800090c:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
			while(acc_error.imu_acc_z < - ACCEL_THRESHOLD)
 8000910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				acc_error = sensor.GetAccData();
 8000914:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
			while(acc_error.imu_acc_z < - ACCEL_THRESHOLD)
 8000918:	f57f af2b 	bpl.w	8000772 <_ZN11Calibration21CalibrateNextPositionEv+0x7a>
					if(num_samples > SAMPLE_THRESHOLD)
 800091c:	3d01      	subs	r5, #1
 800091e:	d1e8      	bne.n	80008f2 <_ZN11Calibration21CalibrateNextPositionEv+0x1fa>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <_ZN11Calibration21CalibrateNextPositionEv+0x248>)
 8000922:	462a      	mov	r2, r5
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	f004 f8e7 	bl	8004af8 <HAL_GPIO_WritePin>
						return CalibrationPosition::UPSIDE_DOWN;
 800092a:	2001      	movs	r0, #1
}
 800092c:	ecbd 8b02 	vpop	{d8}
 8000930:	bd38      	pop	{r3, r4, r5, pc}
 8000932:	bf00      	nop
 8000934:	3f666666 	.word	0x3f666666
 8000938:	bf666666 	.word	0xbf666666
 800093c:	58021400 	.word	0x58021400
 8000940:	58021000 	.word	0x58021000

08000944 <_ZN11Calibration9CalibrateE19CalibrationPosition>:
void Calibration::Calibrate(CalibrationPosition drone_side)
{
 8000944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000948:	4604      	mov	r4, r0
 800094a:	460d      	mov	r5, r1
	auto ms_now = HAL_GetTick();
	auto start_ms = HAL_GetTick();
	uint32_t ms_elapsed = 0;
	uint32_t ms_record = 5000; // 5 seconds

	filter.reset();
 800094c:	f104 0798 	add.w	r7, r4, #152	; 0x98

}
void Calibration::GetPositionDatapoints(CalibrationPosition drone_side)
{
	float value = 0;
	switch(drone_side)
 8000950:	f1a5 0804 	sub.w	r8, r5, #4
{
 8000954:	ed2d 8b02 	vpush	{d8}
	auto ms_now = HAL_GetTick();
 8000958:	f001 fb14 	bl	8001f84 <HAL_GetTick>
			break;
		case CalibrationPosition::RIGHT_SIDE_DOWN:
			value = acc_error.imu_acc_y;
			break;
		case CalibrationPosition::NOSE_UP:
			value = acc_error.imu_acc_x;
 800095c:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 8000a8c <_ZN11Calibration9CalibrateE19CalibrationPosition+0x148>
	auto start_ms = HAL_GetTick();
 8000960:	f001 fb10 	bl	8001f84 <HAL_GetTick>
 8000964:	4606      	mov	r6, r0
	filter.reset();
 8000966:	4638      	mov	r0, r7
 8000968:	f00d faf4 	bl	800df54 <_ZN8RCFilter5resetEv>
	filtered_output = 0;
 800096c:	2200      	movs	r2, #0
 800096e:	2300      	movs	r3, #0
 8000970:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
	while (ms_elapsed < ms_record)
 8000974:	e01b      	b.n	80009ae <_ZN11Calibration9CalibrateE19CalibrationPosition+0x6a>
	switch(drone_side)
 8000976:	2d01      	cmp	r5, #1
			value = acc_error.imu_acc_z;
 8000978:	eeb0 0a41 	vmov.f32	s0, s2
	switch(drone_side)
 800097c:	dc2b      	bgt.n	80009d6 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x92>
 800097e:	d82d      	bhi.n	80009dc <_ZN11Calibration9CalibrateE19CalibrationPosition+0x98>
			// LOGGER ("Unknwonw side);
			// TODO Catch this exception somehow;
			break;
	}

	filtered_output = filter.update(value);
 8000980:	4638      	mov	r0, r7
 8000982:	f00d faa5 	bl	800ded0 <_ZN8RCFilter6updateEf>
 8000986:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
		HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	; 0x64
	sum_filter_output += filtered_output;
 800098c:	ed94 7b2c 	vldr	d7, [r4, #176]	; 0xb0
	filtered_output = filter.update(value);
 8000990:	ed84 0b2a 	vstr	d0, [r4, #168]	; 0xa8
	sum_filter_output += filtered_output;
 8000994:	ee37 7b00 	vadd.f64	d7, d7, d0
 8000998:	ed84 7b2c 	vstr	d7, [r4, #176]	; 0xb0
		HAL_Delay(100);
 800099c:	f001 fafe 	bl	8001f9c <HAL_Delay>
		ms_elapsed = HAL_GetTick() - start_ms;
 80009a0:	f001 faf0 	bl	8001f84 <HAL_GetTick>
	while (ms_elapsed < ms_record)
 80009a4:	f241 3387 	movw	r3, #4999	; 0x1387
		ms_elapsed = HAL_GetTick() - start_ms;
 80009a8:	1b80      	subs	r0, r0, r6
	while (ms_elapsed < ms_record)
 80009aa:	4298      	cmp	r0, r3
 80009ac:	d819      	bhi.n	80009e2 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x9e>
		sensor.ReadAcc();
 80009ae:	4620      	mov	r0, r4
 80009b0:	f000 fcd4 	bl	800135c <_ZN10SensorData7ReadAccEv>
		acc_error = sensor.GetAccData();
 80009b4:	4620      	mov	r0, r4
 80009b6:	f000 fcf9 	bl	80013ac <_ZN10SensorData10GetAccDataEv>
	switch(drone_side)
 80009ba:	2d03      	cmp	r5, #3
		acc_error = sensor.GetAccData();
 80009bc:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
 80009c0:	edc4 0a19 	vstr	s1, [r4, #100]	; 0x64
 80009c4:	ed84 1a1a 	vstr	s2, [r4, #104]	; 0x68
	switch(drone_side)
 80009c8:	ddd5      	ble.n	8000976 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x32>
			value = acc_error.imu_acc_x;
 80009ca:	f1b8 0f01 	cmp.w	r8, #1
 80009ce:	bf88      	it	hi
 80009d0:	eeb0 0a48 	vmovhi.f32	s0, s16
 80009d4:	e7d4      	b.n	8000980 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x3c>
			value = acc_error.imu_acc_y;
 80009d6:	eeb0 0a60 	vmov.f32	s0, s1
			break;
 80009da:	e7d1      	b.n	8000980 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x3c>
	switch(drone_side)
 80009dc:	eeb0 0a48 	vmov.f32	s0, s16
 80009e0:	e7ce      	b.n	8000980 <_ZN11Calibration9CalibrateE19CalibrationPosition+0x3c>
}
void Calibration::UpdateMeasuredGValue(CalibrationPosition drone_side, int num_samples)
{
	double avg_filter_output = sum_filter_output / num_samples;

	switch(drone_side)
 80009e2:	2d05      	cmp	r5, #5
 80009e4:	d80d      	bhi.n	8000a02 <_ZN11Calibration9CalibrateE19CalibrationPosition+0xbe>
 80009e6:	e8df f005 	tbb	[pc, r5]
 80009ea:	1d10      	.short	0x1d10
 80009ec:	0344372a 	.word	0x0344372a
		case CalibrationPosition::NOSE_UP:
			nose_up_g = filtered_output;
			nose_up_calibrated = true;
			break;
		case CalibrationPosition::NOSE_DOWN:
			nose_down_g = filtered_output;
 80009f0:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			nose_down_calibrated = true;
 80009f4:	2301      	movs	r3, #1
			nose_down_g = filtered_output;
 80009f6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			nose_down_calibrated = true;
 80009fa:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
			nose_down_g = filtered_output;
 80009fe:	ed84 7a25 	vstr	s14, [r4, #148]	; 0x94
}
 8000a02:	ecbd 8b02 	vpop	{d8}
 8000a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			upside_up_g = filtered_output;
 8000a0a:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			upside_up_calibrated = true;
 8000a0e:	2301      	movs	r3, #1
			upside_up_g = filtered_output;
 8000a10:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			upside_up_calibrated = true;
 8000a14:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8000a18:	ecbd 8b02 	vpop	{d8}
			upside_up_g = filtered_output;
 8000a1c:	ed84 7a20 	vstr	s14, [r4, #128]	; 0x80
}
 8000a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			upside_down_g = filtered_output;
 8000a24:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			upside_down_calibrated = true;
 8000a28:	2301      	movs	r3, #1
			upside_down_g = filtered_output;
 8000a2a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			upside_down_calibrated = true;
 8000a2e:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
}
 8000a32:	ecbd 8b02 	vpop	{d8}
			upside_down_g = filtered_output;
 8000a36:	ed84 7a21 	vstr	s14, [r4, #132]	; 0x84
}
 8000a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			left_side_g = filtered_output;
 8000a3e:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			left_side_calibrated = true;
 8000a42:	2301      	movs	r3, #1
			left_side_g = filtered_output;
 8000a44:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			left_side_calibrated = true;
 8000a48:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
 8000a4c:	ecbd 8b02 	vpop	{d8}
			left_side_g = filtered_output;
 8000a50:	ed84 7a22 	vstr	s14, [r4, #136]	; 0x88
}
 8000a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			right_side_g = filtered_output;
 8000a58:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			right_side_calibrated = true;
 8000a5c:	2301      	movs	r3, #1
			right_side_g = filtered_output;
 8000a5e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			right_side_calibrated = true;
 8000a62:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
}
 8000a66:	ecbd 8b02 	vpop	{d8}
			right_side_g = filtered_output;
 8000a6a:	ed84 7a23 	vstr	s14, [r4, #140]	; 0x8c
}
 8000a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nose_up_g = filtered_output;
 8000a72:	ed94 7b2a 	vldr	d7, [r4, #168]	; 0xa8
			nose_up_calibrated = true;
 8000a76:	2301      	movs	r3, #1
			nose_up_g = filtered_output;
 8000a78:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			nose_up_calibrated = true;
 8000a7c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 8000a80:	ecbd 8b02 	vpop	{d8}
			nose_up_g = filtered_output;
 8000a84:	ed84 7a24 	vstr	s14, [r4, #144]	; 0x90
}
 8000a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a8c:	00000000 	.word	0x00000000

08000a90 <_ZN11Calibration14ComputeOffsetsEv>:
	}

}
void Calibration::ComputeOffsets()
{
	accel_offset.x_offset =  (nose_up_g + nose_down_g) / 2;
 8000a90:	edd0 6a24 	vldr	s13, [r0, #144]	; 0x90
 8000a94:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8000a98:	edd0 4a25 	vldr	s9, [r0, #148]	; 0x94
	accel_offset.y_offset =  (left_side_g + right_side_g)/2;
 8000a9c:	ed90 7a22 	vldr	s14, [r0, #136]	; 0x88
 8000aa0:	ed90 5a23 	vldr	s10, [r0, #140]	; 0x8c
	accel_offset.x_offset =  (nose_up_g + nose_down_g) / 2;
 8000aa4:	ee76 6aa4 	vadd.f32	s13, s13, s9
	accel_offset.z_offset =  (upside_up_g + upside_down_g)/2;
 8000aa8:	edd0 7a20 	vldr	s15, [r0, #128]	; 0x80
 8000aac:	edd0 5a21 	vldr	s11, [r0, #132]	; 0x84
	accel_offset.y_offset =  (left_side_g + right_side_g)/2;
 8000ab0:	ee37 7a05 	vadd.f32	s14, s14, s10
	accel_offset.x_offset =  (nose_up_g + nose_down_g) / 2;
 8000ab4:	ee66 6a86 	vmul.f32	s13, s13, s12
	accel_offset.z_offset =  (upside_up_g + upside_down_g)/2;
 8000ab8:	ee77 7aa5 	vadd.f32	s15, s15, s11
	accel_offset.y_offset =  (left_side_g + right_side_g)/2;
 8000abc:	ee27 7a06 	vmul.f32	s14, s14, s12
	accel_offset.x_offset =  (nose_up_g + nose_down_g) / 2;
 8000ac0:	edc0 6a34 	vstr	s13, [r0, #208]	; 0xd0
	accel_offset.z_offset =  (upside_up_g + upside_down_g)/2;
 8000ac4:	ee67 7a86 	vmul.f32	s15, s15, s12
	accel_offset.y_offset =  (left_side_g + right_side_g)/2;
 8000ac8:	ed80 7a35 	vstr	s14, [r0, #212]	; 0xd4
	accel_offset.z_offset =  (upside_up_g + upside_down_g)/2;
 8000acc:	edc0 7a36 	vstr	s15, [r0, #216]	; 0xd8

	// TODO Compute scaling factor

}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <_ZN11Calibration19CalibrationCompleteEv>:
bool Calibration::CalibrationComplete()
{
	return upside_down_calibrated && upside_up_calibrated &&
 8000ad4:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
		   left_side_calibrated && right_side_calibrated &&
		   nose_up_calibrated && nose_down_calibrated;
 8000ad8:	b16b      	cbz	r3, 8000af6 <_ZN11Calibration19CalibrationCompleteEv+0x22>
	return upside_down_calibrated && upside_up_calibrated &&
 8000ada:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8000ade:	b153      	cbz	r3, 8000af6 <_ZN11Calibration19CalibrationCompleteEv+0x22>
		   left_side_calibrated && right_side_calibrated &&
 8000ae0:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
	return upside_down_calibrated && upside_up_calibrated &&
 8000ae4:	b13b      	cbz	r3, 8000af6 <_ZN11Calibration19CalibrationCompleteEv+0x22>
		   left_side_calibrated && right_side_calibrated &&
 8000ae6:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8000aea:	b123      	cbz	r3, 8000af6 <_ZN11Calibration19CalibrationCompleteEv+0x22>
		   nose_up_calibrated && nose_down_calibrated;
 8000aec:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
		   left_side_calibrated && right_side_calibrated &&
 8000af0:	b10b      	cbz	r3, 8000af6 <_ZN11Calibration19CalibrationCompleteEv+0x22>
		   nose_up_calibrated && nose_down_calibrated;
 8000af2:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <_ZN11Calibration13CalibrateGyroEv>:

void Calibration::CalibrateGyro()
{
 8000afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afe:	4604      	mov	r4, r0
	auto start_ms = HAL_GetTick();
	uint32_t ms_elapsed = 0;
	uint32_t ms_record = 5000; // 5 seconds


	uint32_t num_samples = 0;
 8000b00:	2500      	movs	r5, #0
	auto ms_now = HAL_GetTick();
 8000b02:	f001 fa3f 	bl	8001f84 <HAL_GetTick>

	while (ms_elapsed < ms_record)
 8000b06:	f241 3787 	movw	r7, #4999	; 0x1387
	auto start_ms = HAL_GetTick();
 8000b0a:	f001 fa3b 	bl	8001f84 <HAL_GetTick>
 8000b0e:	4606      	mov	r6, r0
	{
		sensor.ReadGyro();
 8000b10:	4620      	mov	r0, r4
		gyro_error = sensor.GetGyroData();
		accumulate_gyro_x += gyro_error.imu_gyro_x;
		accumulate_gyro_y += gyro_error.imu_gyro_y;
		accumulate_gyro_z += gyro_error.imu_gyro_z;

		num_samples++;
 8000b12:	3501      	adds	r5, #1
		sensor.ReadGyro();
 8000b14:	f000 fc36 	bl	8001384 <_ZN10SensorData8ReadGyroEv>
		gyro_error = sensor.GetGyroData();
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f000 fc55 	bl	80013c8 <_ZN10SensorData11GetGyroDataEv>
		accumulate_gyro_x += gyro_error.imu_gyro_x;
 8000b1e:	eeb7 2ac0 	vcvt.f64.f32	d2, s0
		accumulate_gyro_y += gyro_error.imu_gyro_y;
 8000b22:	eeb7 3ae0 	vcvt.f64.f32	d3, s1

		HAL_Delay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
		accumulate_gyro_z += gyro_error.imu_gyro_z;
 8000b28:	eeb7 4ac1 	vcvt.f64.f32	d4, s2
		gyro_error = sensor.GetGyroData();
 8000b2c:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
 8000b30:	edc4 0a1c 	vstr	s1, [r4, #112]	; 0x70
 8000b34:	ed84 1a1d 	vstr	s2, [r4, #116]	; 0x74
		accumulate_gyro_x += gyro_error.imu_gyro_x;
 8000b38:	ed94 6b2e 	vldr	d6, [r4, #184]	; 0xb8
		accumulate_gyro_y += gyro_error.imu_gyro_y;
 8000b3c:	ed94 5b30 	vldr	d5, [r4, #192]	; 0xc0
		accumulate_gyro_z += gyro_error.imu_gyro_z;
 8000b40:	ed94 7b32 	vldr	d7, [r4, #200]	; 0xc8
		accumulate_gyro_x += gyro_error.imu_gyro_x;
 8000b44:	ee36 6b02 	vadd.f64	d6, d6, d2
		accumulate_gyro_y += gyro_error.imu_gyro_y;
 8000b48:	ee35 5b03 	vadd.f64	d5, d5, d3
		accumulate_gyro_z += gyro_error.imu_gyro_z;
 8000b4c:	ee37 7b04 	vadd.f64	d7, d7, d4
		accumulate_gyro_x += gyro_error.imu_gyro_x;
 8000b50:	ed84 6b2e 	vstr	d6, [r4, #184]	; 0xb8
		accumulate_gyro_y += gyro_error.imu_gyro_y;
 8000b54:	ed84 5b30 	vstr	d5, [r4, #192]	; 0xc0
		accumulate_gyro_z += gyro_error.imu_gyro_z;
 8000b58:	ed84 7b32 	vstr	d7, [r4, #200]	; 0xc8
		HAL_Delay(100);
 8000b5c:	f001 fa1e 	bl	8001f9c <HAL_Delay>
		ms_elapsed = HAL_GetTick() - start_ms;
 8000b60:	f001 fa10 	bl	8001f84 <HAL_GetTick>
 8000b64:	1b80      	subs	r0, r0, r6
	while (ms_elapsed < ms_record)
 8000b66:	42b8      	cmp	r0, r7
 8000b68:	d9d2      	bls.n	8000b10 <_ZN11Calibration13CalibrateGyroEv+0x14>
	}

	gyro_offset.x_offset = accumulate_gyro_x / num_samples;
 8000b6a:	ee07 5a90 	vmov	s15, r5
 8000b6e:	ed94 5b2e 	vldr	d5, [r4, #184]	; 0xb8
 8000b72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	gyro_offset.y_offset = accumulate_gyro_y / num_samples;
 8000b76:	ed94 6b30 	vldr	d6, [r4, #192]	; 0xc0
	gyro_offset.z_offset = accumulate_gyro_z / num_samples;
 8000b7a:	ed94 3b32 	vldr	d3, [r4, #200]	; 0xc8
	gyro_offset.x_offset = accumulate_gyro_x / num_samples;
 8000b7e:	ee85 4b07 	vdiv.f64	d4, d5, d7
	gyro_offset.y_offset = accumulate_gyro_y / num_samples;
 8000b82:	ee86 5b07 	vdiv.f64	d5, d6, d7
	gyro_offset.z_offset = accumulate_gyro_z / num_samples;
 8000b86:	ee83 6b07 	vdiv.f64	d6, d3, d7
	gyro_offset.x_offset = accumulate_gyro_x / num_samples;
 8000b8a:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
 8000b8e:	ed84 4a37 	vstr	s8, [r4, #220]	; 0xdc
	gyro_offset.y_offset = accumulate_gyro_y / num_samples;
 8000b92:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
 8000b96:	ed84 5a38 	vstr	s10, [r4, #224]	; 0xe0
	gyro_offset.z_offset = accumulate_gyro_z / num_samples;
 8000b9a:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
 8000b9e:	ed84 6a39 	vstr	s12, [r4, #228]	; 0xe4

}
 8000ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <SystemInit+0x104>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <SystemInit+0x104>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bb8:	4b3b      	ldr	r3, [pc, #236]	; (8000ca8 <SystemInit+0x104>)
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	4a3a      	ldr	r2, [pc, #232]	; (8000ca8 <SystemInit+0x104>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bc4:	4b39      	ldr	r3, [pc, #228]	; (8000cac <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 030f 	and.w	r3, r3, #15
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	d807      	bhi.n	8000be0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bd0:	4b36      	ldr	r3, [pc, #216]	; (8000cac <SystemInit+0x108>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f023 030f 	bic.w	r3, r3, #15
 8000bd8:	4a34      	ldr	r2, [pc, #208]	; (8000cac <SystemInit+0x108>)
 8000bda:	f043 0307 	orr.w	r3, r3, #7
 8000bde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <SystemInit+0x10c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a32      	ldr	r2, [pc, #200]	; (8000cb0 <SystemInit+0x10c>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bec:	4b30      	ldr	r3, [pc, #192]	; (8000cb0 <SystemInit+0x10c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <SystemInit+0x10c>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	492e      	ldr	r1, [pc, #184]	; (8000cb0 <SystemInit+0x10c>)
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <SystemInit+0x110>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <SystemInit+0x108>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f023 030f 	bic.w	r3, r3, #15
 8000c12:	4a26      	ldr	r2, [pc, #152]	; (8000cac <SystemInit+0x108>)
 8000c14:	f043 0307 	orr.w	r3, r3, #7
 8000c18:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c1a:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <SystemInit+0x10c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <SystemInit+0x10c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c2c:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <SystemInit+0x10c>)
 8000c2e:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <SystemInit+0x114>)
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <SystemInit+0x10c>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <SystemInit+0x118>)
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <SystemInit+0x10c>)
 8000c3a:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <SystemInit+0x11c>)
 8000c3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <SystemInit+0x10c>)
 8000c46:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <SystemInit+0x11c>)
 8000c48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <SystemInit+0x10c>)
 8000c52:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <SystemInit+0x11c>)
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <SystemInit+0x10c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <SystemInit+0x10c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <SystemInit+0x10c>)
 8000c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <SystemInit+0x10c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <SystemInit+0x120>)
 8000c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <SystemInit+0x120>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <SystemInit+0x124>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <SystemInit+0x128>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c86:	d202      	bcs.n	8000c8e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <SystemInit+0x12c>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <SystemInit+0x130>)
 8000c90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c94:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SystemInit+0x104>)
 8000c98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c9c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00
 8000cac:	52002000 	.word	0x52002000
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cb8:	02020200 	.word	0x02020200
 8000cbc:	01ff0000 	.word	0x01ff0000
 8000cc0:	01010280 	.word	0x01010280
 8000cc4:	580000c0 	.word	0x580000c0
 8000cc8:	5c001000 	.word	0x5c001000
 8000ccc:	ffff0000 	.word	0xffff0000
 8000cd0:	51008108 	.word	0x51008108
 8000cd4:	52004000 	.word	0x52004000

08000cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_DMA_Init+0x7c>)
 8000ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <MX_DMA_Init+0x7c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x7c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x7c>)
 8000cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <MX_DMA_Init+0x7c>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_DMA_Init+0x7c>)
 8000d0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2010      	movs	r0, #16
 8000d20:	f001 fa47 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d24:	2010      	movs	r0, #16
 8000d26:	f001 fa5e 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	2011      	movs	r0, #17
 8000d30:	f001 fa3f 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d34:	2011      	movs	r0, #17
 8000d36:	f001 fa56 	bl	80021e6 <HAL_NVIC_EnableIRQ>

  /* DMA2_Stream7 Interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	2046      	movs	r0, #70	; 0x46
 8000d40:	f001 fa37 	bl	80021b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d44:	2046      	movs	r0, #70	; 0x46
 8000d46:	f001 fa4e 	bl	80021e6 <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	58024400 	.word	0x58024400

08000d58 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5e:	4b37      	ldr	r3, [pc, #220]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d64:	4a35      	ldr	r2, [pc, #212]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6e:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d82:	4a2e      	ldr	r2, [pc, #184]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000daa:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfa:	4a10      	ldr	r2, [pc, #64]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_GPIO_Init+0xe4>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000e30:	f000 f806 	bl	8000e40 <GPIO_Port_Config>

}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	58024400 	.word	0x58024400

08000e40 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	4827      	ldr	r0, [pc, #156]	; (8000ef8 <GPIO_Port_Config+0xb8>)
 8000e5a:	f003 fe4d 	bl	8004af8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4821      	ldr	r0, [pc, #132]	; (8000ef8 <GPIO_Port_Config+0xb8>)
 8000e74:	f003 fc90 	bl	8004798 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <GPIO_Port_Config+0xb8>)
 8000e80:	f003 fe3a 	bl	8004af8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <GPIO_Port_Config+0xb8>)
 8000e9c:	f003 fc7c 	bl	8004798 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea6:	4815      	ldr	r0, [pc, #84]	; (8000efc <GPIO_Port_Config+0xbc>)
 8000ea8:	f003 fe26 	bl	8004af8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 8000eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480e      	ldr	r0, [pc, #56]	; (8000efc <GPIO_Port_Config+0xbc>)
 8000ec4:	f003 fc68 	bl	8004798 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ece:	480b      	ldr	r0, [pc, #44]	; (8000efc <GPIO_Port_Config+0xbc>)
 8000ed0:	f003 fe12 	bl	8004af8 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 8000ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <GPIO_Port_Config+0xbc>)
 8000eec:	f003 fc54 	bl	8004798 <HAL_GPIO_Init>

}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58021000 	.word	0x58021000
 8000efc:	58021400 	.word	0x58021400

08000f00 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <MX_I2C2_Init+0x78>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <MX_I2C2_Init+0x7c>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f3c:	f003 fe24 	bl	8004b88 <HAL_I2C_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f46:	f000 f9cf 	bl	80012e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f4e:	f004 fd30 	bl	80059b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000f58:	f000 f9c6 	bl	80012e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_I2C2_Init+0x74>)
 8000f60:	f004 fd72 	bl	8005a48 <HAL_I2CEx_ConfigDigitalFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f000 f9bd 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24000370 	.word	0x24000370
 8000f78:	40005800 	.word	0x40005800
 8000f7c:	307075b1 	.word	0x307075b1

08000f80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0b8      	sub	sp, #224	; 0xe0
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	22bc      	movs	r2, #188	; 0xbc
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f00f f9b3 	bl	801030c <memset>
  if(i2cHandle->Instance==I2C2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a2d      	ldr	r2, [pc, #180]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d152      	bne.n	8001056 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 ffb0 	bl	8007f24 <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000fca:	f000 f98d 	bl	80012e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <HAL_I2C_MspInit+0xe4>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a23      	ldr	r2, [pc, #140]	; (8001064 <HAL_I2C_MspInit+0xe4>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <HAL_I2C_MspInit+0xe4>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001006:	2304      	movs	r3, #4
 8001008:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001010:	4619      	mov	r1, r3
 8001012:	4815      	ldr	r0, [pc, #84]	; (8001068 <HAL_I2C_MspInit+0xe8>)
 8001014:	f003 fbc0 	bl	8004798 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_I2C_MspInit+0xe4>)
 800101a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <HAL_I2C_MspInit+0xe4>)
 8001020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001024:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_I2C_MspInit+0xe4>)
 800102a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800102e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2021      	movs	r0, #33	; 0x21
 800103c:	f001 f8b9 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001040:	2021      	movs	r0, #33	; 0x21
 8001042:	f001 f8d0 	bl	80021e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2022      	movs	r0, #34	; 0x22
 800104c:	f001 f8b1 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001050:	2022      	movs	r0, #34	; 0x22
 8001052:	f001 f8c8 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001056:	bf00      	nop
 8001058:	37e0      	adds	r7, #224	; 0xe0
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40005800 	.word	0x40005800
 8001064:	58024400 	.word	0x58024400
 8001068:	58020400 	.word	0x58020400
 800106c:	00000000 	.word	0x00000000

08001070 <_Z18SystemClock_Configv>:
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
void SystemClock_Config(void)
{
 8001070:	b510      	push	{r4, lr}
 8001072:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001074:	224c      	movs	r2, #76	; 0x4c
 8001076:	2100      	movs	r1, #0
 8001078:	a80a      	add	r0, sp, #40	; 0x28
 800107a:	f00f f947 	bl	801030c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107e:	2220      	movs	r2, #32
 8001080:	2100      	movs	r1, #0
 8001082:	a802      	add	r0, sp, #8
 8001084:	f00f f942 	bl	801030c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001088:	2002      	movs	r0, #2
 800108a:	f005 ff05 	bl	8006e98 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800108e:	4a32      	ldr	r2, [pc, #200]	; (8001158 <_Z18SystemClock_Configv+0xe8>)
 8001090:	2100      	movs	r1, #0
 8001092:	4b32      	ldr	r3, [pc, #200]	; (800115c <_Z18SystemClock_Configv+0xec>)
 8001094:	9101      	str	r1, [sp, #4]
 8001096:	6991      	ldr	r1, [r2, #24]
 8001098:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800109c:	6191      	str	r1, [r2, #24]
 800109e:	6991      	ldr	r1, [r2, #24]
 80010a0:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 80010a4:	9101      	str	r1, [sp, #4]
 80010a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010a8:	f041 0101 	orr.w	r1, r1, #1
 80010ac:	62d9      	str	r1, [r3, #44]	; 0x2c
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010b8:	6993      	ldr	r3, [r2, #24]
 80010ba:	049b      	lsls	r3, r3, #18
 80010bc:	d5fc      	bpl.n	80010b8 <_Z18SystemClock_Configv+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010be:	4a28      	ldr	r2, [pc, #160]	; (8001160 <_Z18SystemClock_Configv+0xf0>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010c0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010c2:	243c      	movs	r4, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 15;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80010c8:	f023 0303 	bic.w	r3, r3, #3
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010d4:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010d6:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010d8:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010da:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010dc:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010de:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010e0:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e2:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8001140 <_Z18SystemClock_Configv+0xd0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80010ec:	230f      	movs	r3, #15
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010f2:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 15;
 80010f6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f005 ff38 	bl	8006f6c <HAL_RCC_OscConfig>
 80010fc:	b108      	cbz	r0, 8001102 <_Z18SystemClock_Configv+0x92>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fe:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	e7fe      	b.n	8001100 <_Z18SystemClock_Configv+0x90>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8001148 <_Z18SystemClock_Configv+0xd8>
 8001106:	2200      	movs	r2, #0
 8001108:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800110a:	a802      	add	r0, sp, #8
 800110c:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001112:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8001150 <_Z18SystemClock_Configv+0xe0>
 8001116:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800111a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111e:	2340      	movs	r3, #64	; 0x40
 8001120:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001124:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001128:	f006 fb2e 	bl	8007788 <HAL_RCC_ClockConfig>
 800112c:	b108      	cbz	r0, 8001132 <_Z18SystemClock_Configv+0xc2>
 800112e:	b672      	cpsid	i
  while (1)
 8001130:	e7fe      	b.n	8001130 <_Z18SystemClock_Configv+0xc0>
  HAL_PWREx_EnableUSBVoltageDetector();
 8001132:	f005 ff0b 	bl	8006f4c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001136:	b01e      	add	sp, #120	; 0x78
 8001138:	bd10      	pop	{r4, pc}
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	00000021 	.word	0x00000021
 8001144:	00010000 	.word	0x00010000
 8001148:	0000003f 	.word	0x0000003f
 800114c:	00000003 	.word	0x00000003
 8001150:	00000040 	.word	0x00000040
 8001154:	00000040 	.word	0x00000040
 8001158:	58024800 	.word	0x58024800
 800115c:	58000400 	.word	0x58000400
 8001160:	58024400 	.word	0x58024400

08001164 <main>:
{
 8001164:	b530      	push	{r4, r5, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001166:	2400      	movs	r4, #0
{
 8001168:	b0bd      	sub	sp, #244	; 0xf4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800116a:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800116c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001170:	e9cd 4404 	strd	r4, r4, [sp, #16]
  HAL_MPU_Disable();
 8001174:	f001 f852 	bl	800221c <HAL_MPU_Disable>
    MPU_InitStruct.BaseAddress = 0x24000000;
 8001178:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800117c:	4b56      	ldr	r3, [pc, #344]	; (80012d8 <main+0x174>)
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800117e:	a802      	add	r0, sp, #8
    MPU_InitStruct.BaseAddress = 0x24000000;
 8001180:	9203      	str	r2, [sp, #12]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001182:	9304      	str	r3, [sp, #16]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001184:	f8ad 5008 	strh.w	r5, [sp, #8]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001188:	9405      	str	r4, [sp, #20]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800118a:	f001 f87f 	bl	800228c <HAL_MPU_ConfigRegion>
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800118e:	4a53      	ldr	r2, [pc, #332]	; (80012dc <main+0x178>)
 8001190:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    MPU_InitStruct.BaseAddress = 0x38000000;
 8001194:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001198:	a802      	add	r0, sp, #8
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800119a:	f88d 5009 	strb.w	r5, [sp, #9]
    MPU_InitStruct.BaseAddress = 0x38000000;
 800119e:	9103      	str	r1, [sp, #12]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80011a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011a4:	f001 f872 	bl	800228c <HAL_MPU_ConfigRegion>
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011a8:	2004      	movs	r0, #4
 80011aa:	f001 f84f 	bl	800224c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011ae:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <main+0x17c>)
 80011b0:	6953      	ldr	r3, [r2, #20]
 80011b2:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80011b6:	d111      	bne.n	80011dc <main+0x78>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011bc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011c0:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011c8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011cc:	6953      	ldr	r3, [r2, #20]
 80011ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011d8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80011dc:	4840      	ldr	r0, [pc, #256]	; (80012e0 <main+0x17c>)
 80011de:	6943      	ldr	r3, [r0, #20]
 80011e0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80011e4:	d126      	bne.n	8001234 <main+0xd0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80011e6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011ee:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011f2:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011f6:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011fa:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 80011fe:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001202:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001206:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001208:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800120c:	3b01      	subs	r3, #1
 800120e:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001210:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8001214:	d1f8      	bne.n	8001208 <main+0xa4>
    } while(sets-- != 0U);
 8001216:	f1ac 0c20 	sub.w	ip, ip, #32
 800121a:	f11c 0f20 	cmn.w	ip, #32
 800121e:	d1f0      	bne.n	8001202 <main+0x9e>
 8001220:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001224:	6943      	ldr	r3, [r0, #20]
 8001226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122a:	6143      	str	r3, [r0, #20]
 800122c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001230:	f3bf 8f6f 	isb	sy
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 8001234:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <main+0x180>)
 8001236:	6813      	ldr	r3, [r2, #0]
 8001238:	0418      	lsls	r0, r3, #16
 800123a:	d503      	bpl.n	8001244 <main+0xe0>
    asm("NOP");
 800123c:	bf00      	nop
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 800123e:	6813      	ldr	r3, [r2, #0]
 8001240:	0419      	lsls	r1, r3, #16
 8001242:	d4fb      	bmi.n	800123c <main+0xd8>
  __HAL_RCC_HSEM_CLK_ENABLE();
 8001244:	4c27      	ldr	r4, [pc, #156]	; (80012e4 <main+0x180>)
  HAL_Init();
 8001246:	f000 fe17 	bl	8001e78 <HAL_Init>
  SystemClock_Config();
 800124a:	f7ff ff11 	bl	8001070 <_Z18SystemClock_Configv>
HAL_HSEM_FastTake(HSEM_ID_0);
 800124e:	2000      	movs	r0, #0
  __HAL_RCC_HSEM_CLK_ENABLE();
 8001250:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001258:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800125c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001268:	f003 fc60 	bl	8004b2c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800126c:	2100      	movs	r1, #0
 800126e:	4608      	mov	r0, r1
 8001270:	f003 fc76 	bl	8004b60 <HAL_HSEM_Release>
 8001274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001278:	e001      	b.n	800127e <main+0x11a>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800127a:	3b01      	subs	r3, #1
 800127c:	d02a      	beq.n	80012d4 <main+0x170>
 800127e:	6822      	ldr	r2, [r4, #0]
 8001280:	0412      	lsls	r2, r2, #16
 8001282:	d5fa      	bpl.n	800127a <main+0x116>
  MX_GPIO_Init();
 8001284:	f7ff fd68 	bl	8000d58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001288:	f7ff fd26 	bl	8000cd8 <MX_DMA_Init>
  MX_UART4_Init();
 800128c:	f000 fbe0 	bl	8001a50 <MX_UART4_Init>
  MX_I2C2_Init();
 8001290:	f7ff fe36 	bl	8000f00 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001294:	f000 fa34 	bl	8001700 <MX_TIM1_Init>
  MX_UART7_Init();
 8001298:	f000 fc22 	bl	8001ae0 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 800129c:	f00e fa8c 	bl	800f7b8 <MX_USB_DEVICE_Init>
  DWT_Init();
 80012a0:	f000 f824 	bl	80012ec <_Z8DWT_Initv>
  Calibration imu_calib;
 80012a4:	a802      	add	r0, sp, #8
 80012a6:	f7ff f9f5 	bl	8000694 <_ZN11CalibrationC1Ev>
 80012aa:	e005      	b.n	80012b8 <main+0x154>
	  auto side = imu_calib.CalibrateNextPosition();
 80012ac:	f7ff fa24 	bl	80006f8 <_ZN11Calibration21CalibrateNextPositionEv>
 80012b0:	4601      	mov	r1, r0
	  imu_calib.Calibrate(side);
 80012b2:	a802      	add	r0, sp, #8
 80012b4:	f7ff fb46 	bl	8000944 <_ZN11Calibration9CalibrateE19CalibrationPosition>
  while(!imu_calib.CalibrationComplete())
 80012b8:	a802      	add	r0, sp, #8
 80012ba:	f7ff fc0b 	bl	8000ad4 <_ZN11Calibration19CalibrationCompleteEv>
 80012be:	4603      	mov	r3, r0
	  auto side = imu_calib.CalibrateNextPosition();
 80012c0:	a802      	add	r0, sp, #8
  while(!imu_calib.CalibrationComplete())
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f2      	beq.n	80012ac <main+0x148>
  imu_calib.ComputeOffsets();
 80012c6:	a802      	add	r0, sp, #8
 80012c8:	f7ff fbe2 	bl	8000a90 <_ZN11Calibration14ComputeOffsetsEv>
  imu_calib.CalibrateGyro();
 80012cc:	a802      	add	r0, sp, #8
 80012ce:	f7ff fc15 	bl	8000afc <_ZN11Calibration13CalibrateGyroEv>
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <main+0x16e>
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <main+0x172>
 80012d8:	03000012 	.word	0x03000012
 80012dc:	0301000f 	.word	0x0301000f
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	58024400 	.word	0x58024400

080012e8 <Error_Handler>:
 80012e8:	b672      	cpsid	i
 80012ea:	e7fe      	b.n	80012ea <Error_Handler+0x2>

080012ec <_Z8DWT_Initv>:



void DWT_Init(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80012ec:	4906      	ldr	r1, [pc, #24]	; (8001308 <_Z8DWT_Initv+0x1c>)
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <_Z8DWT_Initv+0x20>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80012f0:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 80012f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f8:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012fc:	6813      	ldr	r3, [r2, #0]
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	e0001000 	.word	0xe0001000

08001310 <_Z6microsv>:
  DWT->CYCCNT = 0U;
  while(DWT->CYCCNT < us_count_tic);
}

 uint32_t micros(void){
  return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <_Z6microsv+0x18>)
 8001312:	4a06      	ldr	r2, [pc, #24]	; (800132c <_Z6microsv+0x1c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4906      	ldr	r1, [pc, #24]	; (8001330 <_Z6microsv+0x20>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	6848      	ldr	r0, [r1, #4]
 800131e:	0c9b      	lsrs	r3, r3, #18
}
 8001320:	fbb0 f0f3 	udiv	r0, r0, r3
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	24000000 	.word	0x24000000
 800132c:	431bde83 	.word	0x431bde83
 8001330:	e0001000 	.word	0xe0001000

08001334 <_ZN10SensorDataC1Ev>:
#include <sensors.hpp>


SensorData::SensorData()
 8001334:	4906      	ldr	r1, [pc, #24]	; (8001350 <_ZN10SensorDataC1Ev+0x1c>)
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <_ZN10SensorDataC1Ev+0x20>)
 8001338:	b410      	push	{r4}
 800133a:	e9c0 1200 	strd	r1, r2, [r0]
 800133e:	4c06      	ldr	r4, [pc, #24]	; (8001358 <_ZN10SensorDataC1Ev+0x24>)
 8001340:	3160      	adds	r1, #96	; 0x60
 8001342:	3260      	adds	r2, #96	; 0x60
 8001344:	e9c0 4102 	strd	r4, r1, [r0, #8]
 8001348:	6102      	str	r2, [r0, #16]
{

}
 800134a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	38001000 	.word	0x38001000
 8001354:	38001020 	.word	0x38001020
 8001358:	38001040 	.word	0x38001040

0800135c <_ZN10SensorData7ReadAccEv>:
	  HAL_HSEM_Release(HSEM_ID_0,0);

}

void SensorData::ReadAcc()
{
 800135c:	b510      	push	{r4, lr}
 800135e:	4604      	mov	r4, r0
	if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8001360:	2000      	movs	r0, #0
 8001362:	f003 fbe3 	bl	8004b2c <HAL_HSEM_FastTake>
 8001366:	b930      	cbnz	r0, 8001376 <_ZN10SensorData7ReadAccEv+0x1a>
	  {
	      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	6819      	ldr	r1, [r3, #0]
	      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 800136c:	685a      	ldr	r2, [r3, #4]
	      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 800136e:	689b      	ldr	r3, [r3, #8]
	      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8001370:	6361      	str	r1, [r4, #52]	; 0x34
	      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8001372:	63a2      	str	r2, [r4, #56]	; 0x38
	      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8001374:	63e3      	str	r3, [r4, #60]	; 0x3c
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
 8001376:	2100      	movs	r1, #0
}
 8001378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_HSEM_Release(HSEM_ID_0,0);
 800137c:	4608      	mov	r0, r1
 800137e:	f003 bbef 	b.w	8004b60 <HAL_HSEM_Release>
 8001382:	bf00      	nop

08001384 <_ZN10SensorData8ReadGyroEv>:
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
}

void SensorData::ReadGyro()
{
 8001384:	b510      	push	{r4, lr}
 8001386:	4604      	mov	r4, r0
	  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8001388:	2000      	movs	r0, #0
 800138a:	f003 fbcf 	bl	8004b2c <HAL_HSEM_FastTake>
 800138e:	b930      	cbnz	r0, 800139e <_ZN10SensorData8ReadGyroEv+0x1a>
	  {
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8001390:	6863      	ldr	r3, [r4, #4]
 8001392:	6819      	ldr	r1, [r3, #0]
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8001394:	685a      	ldr	r2, [r3, #4]
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 8001396:	689b      	ldr	r3, [r3, #8]
	     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8001398:	6421      	str	r1, [r4, #64]	; 0x40
	     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 800139a:	6462      	str	r2, [r4, #68]	; 0x44
	     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 800139c:	64a3      	str	r3, [r4, #72]	; 0x48
	  }
	  HAL_HSEM_Release(HSEM_ID_0,0);
 800139e:	2100      	movs	r1, #0
}
 80013a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_HSEM_Release(HSEM_ID_0,0);
 80013a4:	4608      	mov	r0, r1
 80013a6:	f003 bbdb 	b.w	8004b60 <HAL_HSEM_Release>
 80013aa:	bf00      	nop

080013ac <_ZN10SensorData10GetAccDataEv>:

acc_data SensorData::GetAccData()
{
 80013ac:	b088      	sub	sp, #32
	return acc_values;
 80013ae:	3034      	adds	r0, #52	; 0x34
 80013b0:	ab08      	add	r3, sp, #32
 80013b2:	c807      	ldmia	r0, {r0, r1, r2}
 80013b4:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80013b8:	eddd 0a06 	vldr	s1, [sp, #24]
 80013bc:	ed9d 1a07 	vldr	s2, [sp, #28]
 80013c0:	ed9d 0a05 	vldr	s0, [sp, #20]
 80013c4:	b008      	add	sp, #32
 80013c6:	4770      	bx	lr

080013c8 <_ZN10SensorData11GetGyroDataEv>:
gyro_data SensorData::GetGyroData()
{
 80013c8:	b088      	sub	sp, #32
	return gyro_values;
 80013ca:	3040      	adds	r0, #64	; 0x40
 80013cc:	ab08      	add	r3, sp, #32
 80013ce:	c807      	ldmia	r0, {r0, r1, r2}
 80013d0:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80013d4:	eddd 0a06 	vldr	s1, [sp, #24]
 80013d8:	ed9d 1a07 	vldr	s2, [sp, #28]
 80013dc:	ed9d 0a05 	vldr	s0, [sp, #20]
 80013e0:	b008      	add	sp, #32
 80013e2:	4770      	bx	lr

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_MspInit+0x30>)
 80013ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x30>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x30>)
 80013fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	58024400 	.word	0x58024400

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 fd7a 	bl	8001f5c <HAL_IncTick>

  HAL_SYSTICK_IRQHandler();
 8001468:	f000 ff54 	bl	8002314 <HAL_SYSTICK_IRQHandler>

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <DMA2_Stream7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

void DMA2_Stream7_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA2_Stream7_IRQHandler+0x10>)
 8001476:	f002 f81b 	bl	80034b0 <HAL_DMA_IRQHandler>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000698 	.word	0x24000698

08001484 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <DMA1_Stream5_IRQHandler+0x10>)
 800148a:	f002 f811 	bl	80034b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	240005a8 	.word	0x240005a8

08001498 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <DMA1_Stream6_IRQHandler+0x10>)
 800149e:	f002 f807 	bl	80034b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	24000620 	.word	0x24000620

080014ac <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM1_BRK_IRQHandler+0x10>)
 80014b2:	f008 fbd1 	bl	8009c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2400043c 	.word	0x2400043c

080014c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <TIM1_UP_IRQHandler+0x10>)
 80014c6:	f008 fbc7 	bl	8009c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2400043c 	.word	0x2400043c

080014d4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80014da:	f008 fbbd 	bl	8009c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2400043c 	.word	0x2400043c

080014e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <TIM1_CC_IRQHandler+0x10>)
 80014ee:	f008 fbb3 	bl	8009c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2400043c 	.word	0x2400043c

080014fc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <I2C2_EV_IRQHandler+0x10>)
 8001502:	f003 fbd1 	bl	8004ca8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000370 	.word	0x24000370

08001510 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <I2C2_ER_IRQHandler+0x10>)
 8001516:	f003 fbe1 	bl	8004cdc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	24000370 	.word	0x24000370

08001524 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <SDMMC1_IRQHandler+0x10>)
 800152a:	f008 f863 	bl	80095f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	240003bc 	.word	0x240003bc

08001538 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
//  {
//    HAL_UART_Receive_DMA(&huart4, sbus_buffer, SBUS_PACKET_LEN);
//    __HAL_UART_DISABLE_IT(&huart4, UART_IT_IDLE);
//  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <UART4_IRQHandler+0x10>)
 800153e:	f009 fc5b 	bl	800adf8 <HAL_UART_IRQHandler>

  /* USER CODE END UART4_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	24000488 	.word	0x24000488

0800154c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <UART7_IRQHandler+0x10>)
 8001552:	f009 fc51 	bl	800adf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	24000518 	.word	0x24000518

08001560 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <OTG_FS_IRQHandler+0x10>)
 8001566:	f004 fc12 	bl	8005d8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	24001bf8 	.word	0x24001bf8

08001574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
	return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_kill>:

int _kill(int pid, int sig)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800158e:	f00e fe83 	bl	8010298 <__errno>
 8001592:	4603      	mov	r3, r0
 8001594:	2216      	movs	r2, #22
 8001596:	601a      	str	r2, [r3, #0]
	return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_exit>:

void _exit (int status)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ffe7 	bl	8001584 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015b6:	e7fe      	b.n	80015b6 <_exit+0x12>

080015b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e00a      	b.n	80015e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015ca:	f3af 8000 	nop.w
 80015ce:	4601      	mov	r1, r0
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	b2ca      	uxtb	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf0      	blt.n	80015ca <_read+0x12>
	}

return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e009      	b.n	8001618 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf1      	blt.n	8001604 <_write+0x12>
	}
	return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_close>:

int _close(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001652:	605a      	str	r2, [r3, #4]
	return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_isatty>:

int _isatty(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
	return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c4:	f00e fde8 	bl	8010298 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e009      	b.n	80016e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <_sbrk+0x64>)
 80016e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	24080000 	.word	0x24080000
 80016f4:	00000400 	.word	0x00000400
 80016f8:	24000438 	.word	0x24000438
 80016fc:	24002010 	.word	0x24002010

08001700 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0a4      	sub	sp, #144	; 0x90
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	222c      	movs	r2, #44	; 0x2c
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f00e fde5 	bl	801030c <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2220      	movs	r2, #32
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00e fddf 	bl	801030c <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800175e:	463a      	mov	r2, r7
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f006 fb9b 	bl	8007ea0 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d104      	bne.n	800177a <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 8001770:	f006 fb6a 	bl	8007e48 <HAL_RCC_GetPCLK1Freq>
 8001774:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001778:	e005      	b.n	8001786 <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 800177a:	f006 fb65 	bl	8007e48 <HAL_RCC_GetPCLK1Freq>
 800177e:	4603      	mov	r3, r0
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 8001786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800178a:	4a5f      	ldr	r2, [pc, #380]	; (8001908 <MX_TIM1_Init+0x208>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	3301      	adds	r3, #1
 8001794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 8001798:	4b5c      	ldr	r3, [pc, #368]	; (800190c <MX_TIM1_Init+0x20c>)
 800179a:	4a5d      	ldr	r2, [pc, #372]	; (8001910 <MX_TIM1_Init+0x210>)
 800179c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 800179e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017a2:	3b01      	subs	r3, #1
 80017a4:	4a59      	ldr	r2, [pc, #356]	; (800190c <MX_TIM1_Init+0x20c>)
 80017a6:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b58      	ldr	r3, [pc, #352]	; (800190c <MX_TIM1_Init+0x20c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 80017ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a51      	ldr	r2, [pc, #324]	; (800190c <MX_TIM1_Init+0x20c>)
 80017c6:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <MX_TIM1_Init+0x20c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ce:	4b4f      	ldr	r3, [pc, #316]	; (800190c <MX_TIM1_Init+0x20c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <MX_TIM1_Init+0x20c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017da:	484c      	ldr	r0, [pc, #304]	; (800190c <MX_TIM1_Init+0x20c>)
 80017dc:	f008 f984 	bl	8009ae8 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 80017e6:	f7ff fd7f 	bl	80012e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017f4:	4619      	mov	r1, r3
 80017f6:	4845      	ldr	r0, [pc, #276]	; (800190c <MX_TIM1_Init+0x20c>)
 80017f8:	f008 fc5e 	bl	800a0b8 <HAL_TIM_ConfigClockSource>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001802:	f7ff fd71 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001806:	4841      	ldr	r0, [pc, #260]	; (800190c <MX_TIM1_Init+0x20c>)
 8001808:	f008 f9c5 	bl	8009b96 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001812:	f7ff fd69 	bl	80012e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001822:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001826:	4619      	mov	r1, r3
 8001828:	4838      	ldr	r0, [pc, #224]	; (800190c <MX_TIM1_Init+0x20c>)
 800182a:	f009 f971 	bl	800ab10 <HAL_TIMEx_MasterConfigSynchronization>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001834:	f7ff fd58 	bl	80012e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001838:	2360      	movs	r3, #96	; 0x60
 800183a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 800183c:	2332      	movs	r3, #50	; 0x32
 800183e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001840:	2300      	movs	r3, #0
 8001842:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001854:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001858:	2200      	movs	r2, #0
 800185a:	4619      	mov	r1, r3
 800185c:	482b      	ldr	r0, [pc, #172]	; (800190c <MX_TIM1_Init+0x20c>)
 800185e:	f008 fb1b 	bl	8009e98 <HAL_TIM_PWM_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8001868:	f7ff fd3e 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800186c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001870:	2204      	movs	r2, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4825      	ldr	r0, [pc, #148]	; (800190c <MX_TIM1_Init+0x20c>)
 8001876:	f008 fb0f 	bl	8009e98 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001880:	f7ff fd32 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001884:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001888:	2208      	movs	r2, #8
 800188a:	4619      	mov	r1, r3
 800188c:	481f      	ldr	r0, [pc, #124]	; (800190c <MX_TIM1_Init+0x20c>)
 800188e:	f008 fb03 	bl	8009e98 <HAL_TIM_PWM_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 8001898:	f7ff fd26 	bl	80012e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800189c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018a0:	220c      	movs	r2, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	4819      	ldr	r0, [pc, #100]	; (800190c <MX_TIM1_Init+0x20c>)
 80018a6:	f008 faf7 	bl	8009e98 <HAL_TIM_PWM_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 80018b0:	f7ff fd1a 	bl	80012e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <MX_TIM1_Init+0x20c>)
 80018ec:	f009 f998 	bl	800ac20 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 80018f6:	f7ff fcf7 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_TIM1_Init+0x20c>)
 80018fc:	f000 f84a 	bl	8001994 <HAL_TIM_MspPostInit>

}
 8001900:	bf00      	nop
 8001902:	3790      	adds	r7, #144	; 0x90
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	66673335 	.word	0x66673335
 800190c:	2400043c 	.word	0x2400043c
 8001910:	40010000 	.word	0x40010000

08001914 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a1a      	ldr	r2, [pc, #104]	; (800198c <HAL_TIM_Base_MspInit+0x78>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d12e      	bne.n	8001984 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_TIM_Base_MspInit+0x7c>)
 8001928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_TIM_Base_MspInit+0x7c>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_TIM_Base_MspInit+0x7c>)
 8001938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2018      	movs	r0, #24
 800194a:	f000 fc32 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800194e:	2018      	movs	r0, #24
 8001950:	f000 fc49 	bl	80021e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2019      	movs	r0, #25
 800195a:	f000 fc2a 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800195e:	2019      	movs	r0, #25
 8001960:	f000 fc41 	bl	80021e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	201a      	movs	r0, #26
 800196a:	f000 fc22 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800196e:	201a      	movs	r0, #26
 8001970:	f000 fc39 	bl	80021e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	201b      	movs	r0, #27
 800197a:	f000 fc1a 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800197e:	201b      	movs	r0, #27
 8001980:	f000 fc31 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40010000 	.word	0x40010000
 8001990:	58024400 	.word	0x58024400

08001994 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <HAL_TIM_MspPostInit+0xac>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d13f      	bne.n	8001a36 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b6:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019bc:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 80019d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019da:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_TIM_MspPostInit+0xb0>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80019f2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <HAL_TIM_MspPostInit+0xb4>)
 8001a10:	f002 fec2 	bl	8004798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4806      	ldr	r0, [pc, #24]	; (8001a4c <HAL_TIM_MspPostInit+0xb8>)
 8001a32:	f002 feb1 	bl	8004798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40010000 	.word	0x40010000
 8001a44:	58024400 	.word	0x58024400
 8001a48:	58021000 	.word	0x58021000
 8001a4c:	58020000 	.word	0x58020000

08001a50 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;
DMA_HandleTypeDef hdma_uart4_rx;
/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a56:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <MX_UART4_Init+0x88>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <MX_UART4_Init+0x8c>)
 8001a5e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a6e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV4;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a92:	2202      	movs	r2, #2
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001a9e:	f009 f95b 	bl	800ad58 <HAL_UART_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001aa8:	f7ff fc1e 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aac:	2100      	movs	r1, #0
 8001aae:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001ab0:	f00a fc4b 	bl	800c34a <HAL_UARTEx_SetRxFifoThreshold>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f7ff fc15 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_UART4_Init+0x84>)
 8001ac0:	f00a fbcc 	bl	800c25c <HAL_UARTEx_DisableFifoMode>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8001aca:	f7ff fc0d 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	24000488 	.word	0x24000488
 8001ad8:	40004c00 	.word	0x40004c00
 8001adc:	000186a0 	.word	0x000186a0

08001ae0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_UART7_Init+0x90>)
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <MX_UART7_Init+0x94>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_UART7_Init+0x90>)
 8001aec:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001af0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_UART7_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_UART7_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b28:	4811      	ldr	r0, [pc, #68]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b2a:	f009 f915 	bl	800ad58 <HAL_UART_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001b34:	f7ff fbd8 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b38:	2100      	movs	r1, #0
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b3c:	f00a fbc7 	bl	800c2ce <HAL_UARTEx_SetTxFifoThreshold>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001b46:	f7ff fbcf 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4808      	ldr	r0, [pc, #32]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b4e:	f00a fbfc 	bl	800c34a <HAL_UARTEx_SetRxFifoThreshold>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001b58:	f7ff fbc6 	bl	80012e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_UART7_Init+0x90>)
 8001b5e:	f00a fb7d 	bl	800c25c <HAL_UARTEx_DisableFifoMode>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001b68:	f7ff fbbe 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	24000518 	.word	0x24000518
 8001b74:	40007800 	.word	0x40007800

08001b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0ba      	sub	sp, #232	; 0xe8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b90:	f107 0318 	add.w	r3, r7, #24
 8001b94:	22bc      	movs	r2, #188	; 0xbc
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f00e fbb7 	bl	801030c <memset>
  if(uartHandle->Instance==UART4)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a95      	ldr	r2, [pc, #596]	; (8001df8 <HAL_UART_MspInit+0x280>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d179      	bne.n	8001c9c <HAL_UART_MspInit+0x124>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb2:	f107 0318 	add.w	r3, r7, #24
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f006 f9b4 	bl	8007f24 <HAL_RCCEx_PeriphCLKConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bc2:	f7ff fb91 	bl	80012e8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bc6:	4b8d      	ldr	r3, [pc, #564]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bcc:	4a8b      	ldr	r2, [pc, #556]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bd6:	4b89      	ldr	r3, [pc, #548]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b85      	ldr	r3, [pc, #532]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	4a84      	ldr	r2, [pc, #528]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf4:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c02:	2303      	movs	r3, #3
 8001c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4876      	ldr	r0, [pc, #472]	; (8001e00 <HAL_UART_MspInit+0x288>)
 8001c28:	f002 fdb6 	bl	8004798 <HAL_GPIO_Init>

    /*UART4 RX Init
     *
     */

    hdma_uart4_rx.Instance = DMA2_Stream7;
 8001c2c:	4b75      	ldr	r3, [pc, #468]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c2e:	4a76      	ldr	r2, [pc, #472]	; (8001e08 <HAL_UART_MspInit+0x290>)
 8001c30:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001c32:	4b74      	ldr	r3, [pc, #464]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c34:	223f      	movs	r2, #63	; 0x3f
 8001c36:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c38:	4b72      	ldr	r3, [pc, #456]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3e:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c44:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c4a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4c:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c52:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001c58:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c5e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c60:	4b68      	ldr	r3, [pc, #416]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c66:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c68:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001c6e:	4865      	ldr	r0, [pc, #404]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c70:	f000 fb5e 	bl	8002330 <HAL_DMA_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001c7a:	f7ff fb35 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a60      	ldr	r2, [pc, #384]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c82:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c84:	4a5f      	ldr	r2, [pc, #380]	; (8001e04 <HAL_UART_MspInit+0x28c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6393      	str	r3, [r2, #56]	; 0x38
    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2034      	movs	r0, #52	; 0x34
 8001c90:	f000 fa8f 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c94:	2034      	movs	r0, #52	; 0x34
 8001c96:	f000 faa6 	bl	80021e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001c9a:	e0a9      	b.n	8001df0 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==UART7)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a5a      	ldr	r2, [pc, #360]	; (8001e0c <HAL_UART_MspInit+0x294>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f040 80a4 	bne.w	8001df0 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f006 f934 	bl	8007f24 <HAL_RCCEx_PeriphCLKConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001cc2:	f7ff fb11 	bl	80012e8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001cc6:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ccc:	4a4b      	ldr	r2, [pc, #300]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001cce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cd6:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce4:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cea:	4a44      	ldr	r2, [pc, #272]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf4:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <HAL_UART_MspInit+0x284>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d02:	23c0      	movs	r3, #192	; 0xc0
 8001d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d24:	4619      	mov	r1, r3
 8001d26:	483a      	ldr	r0, [pc, #232]	; (8001e10 <HAL_UART_MspInit+0x298>)
 8001d28:	f002 fd36 	bl	8004798 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d2e:	4a3a      	ldr	r2, [pc, #232]	; (8001e18 <HAL_UART_MspInit+0x2a0>)
 8001d30:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d34:	224f      	movs	r2, #79	; 0x4f
 8001d36:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3e:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d44:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d4a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d52:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001d6a:	482a      	ldr	r0, [pc, #168]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d6c:	f000 fae0 	bl	8002330 <HAL_DMA_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001d76:	f7ff fab7 	bl	80012e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d7e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_UART_MspInit+0x29c>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001d86:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001d88:	4a25      	ldr	r2, [pc, #148]	; (8001e20 <HAL_UART_MspInit+0x2a8>)
 8001d8a:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8001d8c:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001d8e:	2250      	movs	r2, #80	; 0x50
 8001d90:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d92:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d98:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da4:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001dc4:	4815      	ldr	r0, [pc, #84]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001dc6:	f000 fab3 	bl	8002330 <HAL_DMA_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001dd0:	f7ff fa8a 	bl	80012e8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001dd8:	679a      	str	r2, [r3, #120]	; 0x78
 8001dda:	4a10      	ldr	r2, [pc, #64]	; (8001e1c <HAL_UART_MspInit+0x2a4>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2052      	movs	r0, #82	; 0x52
 8001de6:	f000 f9e4 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001dea:	2052      	movs	r0, #82	; 0x52
 8001dec:	f000 f9fb 	bl	80021e6 <HAL_NVIC_EnableIRQ>
}
 8001df0:	bf00      	nop
 8001df2:	37e8      	adds	r7, #232	; 0xe8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40004c00 	.word	0x40004c00
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	58020000 	.word	0x58020000
 8001e04:	24000698 	.word	0x24000698
 8001e08:	400204b8 	.word	0x400204b8
 8001e0c:	40007800 	.word	0x40007800
 8001e10:	58021400 	.word	0x58021400
 8001e14:	240005a8 	.word	0x240005a8
 8001e18:	40020088 	.word	0x40020088
 8001e1c:	24000620 	.word	0x24000620
 8001e20:	400200a0 	.word	0x400200a0

08001e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e28:	f7fe febc 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e52:	f00e fa27 	bl	80102a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e56:	f7ff f985 	bl	8001164 <main>
  bx  lr
 8001e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e64:	24000354 	.word	0x24000354
  ldr r2, =_sidata
 8001e68:	0801307c 	.word	0x0801307c
  ldr r2, =_sbss
 8001e6c:	24000354 	.word	0x24000354
  ldr r4, =_ebss
 8001e70:	24002010 	.word	0x24002010

08001e74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC3_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7e:	2003      	movs	r0, #3
 8001e80:	f000 f98c 	bl	800219c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e84:	f005 fe36 	bl	8007af4 <HAL_RCC_GetSysClockFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_Init+0x68>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	0a1b      	lsrs	r3, r3, #8
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	4913      	ldr	r1, [pc, #76]	; (8001ee4 <HAL_Init+0x6c>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_Init+0x68>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_Init+0x6c>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <HAL_Init+0x70>)
 8001eba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <HAL_Init+0x74>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 f814 	bl	8001ef0 <HAL_InitTick>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e002      	b.n	8001ed8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed2:	f7ff fa87 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	08012c50 	.word	0x08012c50
 8001ee8:	24000004 	.word	0x24000004
 8001eec:	24000000 	.word	0x24000000

08001ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ef8:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_InitTick+0x60>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e021      	b.n	8001f48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_InitTick+0x64>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_InitTick+0x60>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f971 	bl	8002202 <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 f93b 	bl	80021b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_InitTick+0x68>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2400000c 	.word	0x2400000c
 8001f54:	24000000 	.word	0x24000000
 8001f58:	24000008 	.word	0x24000008

08001f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_IncTick+0x20>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x24>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_IncTick+0x24>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	2400000c 	.word	0x2400000c
 8001f80:	24000710 	.word	0x24000710

08001f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return uwTick;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_GetTick+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	24000710 	.word	0x24000710

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff ffee 	bl	8001f84 <HAL_GetTick>
 8001fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d005      	beq.n	8001fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_Delay+0x44>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc2:	bf00      	nop
 8001fc4:	f7ff ffde 	bl	8001f84 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d8f7      	bhi.n	8001fc4 <HAL_Delay+0x28>
  {
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2400000c 	.word	0x2400000c

08001fe4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetREVID+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0c1b      	lsrs	r3, r3, #16
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	5c001000 	.word	0x5c001000

08001ffc <__NVIC_SetPriorityGrouping>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <__NVIC_SetPriorityGrouping+0x40>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	4313      	orrs	r3, r2
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x40>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00
 8002040:	05fa0000 	.word	0x05fa0000

08002044 <__NVIC_GetPriorityGrouping>:
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4907      	ldr	r1, [pc, #28]	; (8002098 <__NVIC_EnableIRQ+0x38>)
 800207a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000e100 	.word	0xe000e100

0800209c <__NVIC_SetPriority>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	; (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	; (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002168:	d301      	bcc.n	800216e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216a:	2301      	movs	r3, #1
 800216c:	e00f      	b.n	800218e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <SysTick_Config+0x40>)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002176:	210f      	movs	r1, #15
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f7ff ff8e 	bl	800209c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <SysTick_Config+0x40>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <SysTick_Config+0x40>)
 8002188:	2207      	movs	r2, #7
 800218a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010

0800219c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff29 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff40 	bl	8002044 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff90 	bl	80020f0 <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5f 	bl	800209c <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff33 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffa4 	bl	8002158 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002220:	f3bf 8f5f 	dmb	sy
}
 8002224:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_MPU_Disable+0x28>)
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	4a06      	ldr	r2, [pc, #24]	; (8002244 <HAL_MPU_Disable+0x28>)
 800222c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002230:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_MPU_Disable+0x2c>)
 8002234:	2200      	movs	r2, #0
 8002236:	605a      	str	r2, [r3, #4]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00
 8002248:	e000ed90 	.word	0xe000ed90

0800224c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002254:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_MPU_Enable+0x38>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_MPU_Enable+0x3c>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_MPU_Enable+0x3c>)
 8002264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002268:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800226a:	f3bf 8f4f 	dsb	sy
}
 800226e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002270:	f3bf 8f6f 	isb	sy
}
 8002274:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed90 	.word	0xe000ed90
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	785a      	ldrb	r2, [r3, #1]
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_MPU_ConfigRegion+0x84>)
 800229a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d029      	beq.n	80022f8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80022a4:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <HAL_MPU_ConfigRegion+0x84>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7b1b      	ldrb	r3, [r3, #12]
 80022b0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7adb      	ldrb	r3, [r3, #11]
 80022b6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7a9b      	ldrb	r3, [r3, #10]
 80022be:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7b5b      	ldrb	r3, [r3, #13]
 80022c6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7b9b      	ldrb	r3, [r3, #14]
 80022ce:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7bdb      	ldrb	r3, [r3, #15]
 80022d6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	7a5b      	ldrb	r3, [r3, #9]
 80022de:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7a1b      	ldrb	r3, [r3, #8]
 80022e6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022e8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022f0:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022f2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022f4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80022f6:	e005      	b.n	8002304 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_MPU_ConfigRegion+0x84>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_MPU_ConfigRegion+0x84>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed90 	.word	0xe000ed90

08002314 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002318:	f000 f802 	bl	8002320 <HAL_SYSTICK_Callback>
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7ff fe24 	bl	8001f84 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e316      	b.n	8002976 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a66      	ldr	r2, [pc, #408]	; (80024e8 <HAL_DMA_Init+0x1b8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d04a      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a65      	ldr	r2, [pc, #404]	; (80024ec <HAL_DMA_Init+0x1bc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d045      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a63      	ldr	r2, [pc, #396]	; (80024f0 <HAL_DMA_Init+0x1c0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d040      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a62      	ldr	r2, [pc, #392]	; (80024f4 <HAL_DMA_Init+0x1c4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d03b      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a60      	ldr	r2, [pc, #384]	; (80024f8 <HAL_DMA_Init+0x1c8>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d036      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a5f      	ldr	r2, [pc, #380]	; (80024fc <HAL_DMA_Init+0x1cc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d031      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a5d      	ldr	r2, [pc, #372]	; (8002500 <HAL_DMA_Init+0x1d0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d02c      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a5c      	ldr	r2, [pc, #368]	; (8002504 <HAL_DMA_Init+0x1d4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d027      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a5a      	ldr	r2, [pc, #360]	; (8002508 <HAL_DMA_Init+0x1d8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d022      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a59      	ldr	r2, [pc, #356]	; (800250c <HAL_DMA_Init+0x1dc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d01d      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a57      	ldr	r2, [pc, #348]	; (8002510 <HAL_DMA_Init+0x1e0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d018      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a56      	ldr	r2, [pc, #344]	; (8002514 <HAL_DMA_Init+0x1e4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_DMA_Init+0x1e8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00e      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a53      	ldr	r2, [pc, #332]	; (800251c <HAL_DMA_Init+0x1ec>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a51      	ldr	r2, [pc, #324]	; (8002520 <HAL_DMA_Init+0x1f0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_DMA_Init+0xb8>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a50      	ldr	r2, [pc, #320]	; (8002524 <HAL_DMA_Init+0x1f4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_DMA_Init+0xbc>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_DMA_Init+0xbe>
 80023ec:	2300      	movs	r3, #0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 813b 	beq.w	800266a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a37      	ldr	r2, [pc, #220]	; (80024e8 <HAL_DMA_Init+0x1b8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d04a      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a36      	ldr	r2, [pc, #216]	; (80024ec <HAL_DMA_Init+0x1bc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d045      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a34      	ldr	r2, [pc, #208]	; (80024f0 <HAL_DMA_Init+0x1c0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d040      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a33      	ldr	r2, [pc, #204]	; (80024f4 <HAL_DMA_Init+0x1c4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d03b      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <HAL_DMA_Init+0x1c8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d036      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a30      	ldr	r2, [pc, #192]	; (80024fc <HAL_DMA_Init+0x1cc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d031      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2e      	ldr	r2, [pc, #184]	; (8002500 <HAL_DMA_Init+0x1d0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d02c      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a2d      	ldr	r2, [pc, #180]	; (8002504 <HAL_DMA_Init+0x1d4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d027      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2b      	ldr	r2, [pc, #172]	; (8002508 <HAL_DMA_Init+0x1d8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d022      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2a      	ldr	r2, [pc, #168]	; (800250c <HAL_DMA_Init+0x1dc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d01d      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a28      	ldr	r2, [pc, #160]	; (8002510 <HAL_DMA_Init+0x1e0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d018      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a27      	ldr	r2, [pc, #156]	; (8002514 <HAL_DMA_Init+0x1e4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d013      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a25      	ldr	r2, [pc, #148]	; (8002518 <HAL_DMA_Init+0x1e8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00e      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a24      	ldr	r2, [pc, #144]	; (800251c <HAL_DMA_Init+0x1ec>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a22      	ldr	r2, [pc, #136]	; (8002520 <HAL_DMA_Init+0x1f0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <HAL_DMA_Init+0x174>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a21      	ldr	r2, [pc, #132]	; (8002524 <HAL_DMA_Init+0x1f4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d108      	bne.n	80024b6 <HAL_DMA_Init+0x186>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e007      	b.n	80024c6 <HAL_DMA_Init+0x196>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024c6:	e02f      	b.n	8002528 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c8:	f7ff fd5c 	bl	8001f84 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d928      	bls.n	8002528 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2203      	movs	r2, #3
 80024e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e246      	b.n	8002976 <HAL_DMA_Init+0x646>
 80024e8:	40020010 	.word	0x40020010
 80024ec:	40020028 	.word	0x40020028
 80024f0:	40020040 	.word	0x40020040
 80024f4:	40020058 	.word	0x40020058
 80024f8:	40020070 	.word	0x40020070
 80024fc:	40020088 	.word	0x40020088
 8002500:	400200a0 	.word	0x400200a0
 8002504:	400200b8 	.word	0x400200b8
 8002508:	40020410 	.word	0x40020410
 800250c:	40020428 	.word	0x40020428
 8002510:	40020440 	.word	0x40020440
 8002514:	40020458 	.word	0x40020458
 8002518:	40020470 	.word	0x40020470
 800251c:	40020488 	.word	0x40020488
 8002520:	400204a0 	.word	0x400204a0
 8002524:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1c8      	bne.n	80024c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4b83      	ldr	r3, [pc, #524]	; (8002750 <HAL_DMA_Init+0x420>)
 8002542:	4013      	ands	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800254e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	2b04      	cmp	r3, #4
 800257a:	d107      	bne.n	800258c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	4313      	orrs	r3, r2
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800258c:	4b71      	ldr	r3, [pc, #452]	; (8002754 <HAL_DMA_Init+0x424>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b71      	ldr	r3, [pc, #452]	; (8002758 <HAL_DMA_Init+0x428>)
 8002592:	4013      	ands	r3, r2
 8002594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002598:	d328      	bcc.n	80025ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b28      	cmp	r3, #40	; 0x28
 80025a0:	d903      	bls.n	80025aa <HAL_DMA_Init+0x27a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b2e      	cmp	r3, #46	; 0x2e
 80025a8:	d917      	bls.n	80025da <HAL_DMA_Init+0x2aa>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b3e      	cmp	r3, #62	; 0x3e
 80025b0:	d903      	bls.n	80025ba <HAL_DMA_Init+0x28a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b42      	cmp	r3, #66	; 0x42
 80025b8:	d90f      	bls.n	80025da <HAL_DMA_Init+0x2aa>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b46      	cmp	r3, #70	; 0x46
 80025c0:	d903      	bls.n	80025ca <HAL_DMA_Init+0x29a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b48      	cmp	r3, #72	; 0x48
 80025c8:	d907      	bls.n	80025da <HAL_DMA_Init+0x2aa>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b4e      	cmp	r3, #78	; 0x4e
 80025d0:	d905      	bls.n	80025de <HAL_DMA_Init+0x2ae>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b52      	cmp	r3, #82	; 0x52
 80025d8:	d801      	bhi.n	80025de <HAL_DMA_Init+0x2ae>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_DMA_Init+0x2b0>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f023 0307 	bic.w	r3, r3, #7
 8002602:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	2b04      	cmp	r3, #4
 8002614:	d117      	bne.n	8002646 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00e      	beq.n	8002646 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f001 ff2b 	bl	8004484 <DMA_CheckFifoParam>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2240      	movs	r2, #64	; 0x40
 8002638:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e197      	b.n	8002976 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f001 fe66 	bl	8004320 <DMA_CalcBaseAndBitshift>
 8002654:	4603      	mov	r3, r0
 8002656:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	223f      	movs	r2, #63	; 0x3f
 8002662:	409a      	lsls	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	e0cd      	b.n	8002806 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a3b      	ldr	r2, [pc, #236]	; (800275c <HAL_DMA_Init+0x42c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d022      	beq.n	80026ba <HAL_DMA_Init+0x38a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a39      	ldr	r2, [pc, #228]	; (8002760 <HAL_DMA_Init+0x430>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01d      	beq.n	80026ba <HAL_DMA_Init+0x38a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a38      	ldr	r2, [pc, #224]	; (8002764 <HAL_DMA_Init+0x434>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d018      	beq.n	80026ba <HAL_DMA_Init+0x38a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a36      	ldr	r2, [pc, #216]	; (8002768 <HAL_DMA_Init+0x438>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_DMA_Init+0x38a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a35      	ldr	r2, [pc, #212]	; (800276c <HAL_DMA_Init+0x43c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00e      	beq.n	80026ba <HAL_DMA_Init+0x38a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a33      	ldr	r2, [pc, #204]	; (8002770 <HAL_DMA_Init+0x440>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d009      	beq.n	80026ba <HAL_DMA_Init+0x38a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a32      	ldr	r2, [pc, #200]	; (8002774 <HAL_DMA_Init+0x444>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d004      	beq.n	80026ba <HAL_DMA_Init+0x38a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a30      	ldr	r2, [pc, #192]	; (8002778 <HAL_DMA_Init+0x448>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d101      	bne.n	80026be <HAL_DMA_Init+0x38e>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_DMA_Init+0x390>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8097 	beq.w	80027f4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a24      	ldr	r2, [pc, #144]	; (800275c <HAL_DMA_Init+0x42c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d021      	beq.n	8002714 <HAL_DMA_Init+0x3e4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a22      	ldr	r2, [pc, #136]	; (8002760 <HAL_DMA_Init+0x430>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01c      	beq.n	8002714 <HAL_DMA_Init+0x3e4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a21      	ldr	r2, [pc, #132]	; (8002764 <HAL_DMA_Init+0x434>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d017      	beq.n	8002714 <HAL_DMA_Init+0x3e4>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <HAL_DMA_Init+0x438>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d012      	beq.n	8002714 <HAL_DMA_Init+0x3e4>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a1e      	ldr	r2, [pc, #120]	; (800276c <HAL_DMA_Init+0x43c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00d      	beq.n	8002714 <HAL_DMA_Init+0x3e4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <HAL_DMA_Init+0x440>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d008      	beq.n	8002714 <HAL_DMA_Init+0x3e4>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <HAL_DMA_Init+0x444>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d003      	beq.n	8002714 <HAL_DMA_Init+0x3e4>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <HAL_DMA_Init+0x448>)
 8002712:	4293      	cmp	r3, r2
 8002714:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_DMA_Init+0x44c>)
 8002732:	4013      	ands	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b40      	cmp	r3, #64	; 0x40
 800273c:	d020      	beq.n	8002780 <HAL_DMA_Init+0x450>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b80      	cmp	r3, #128	; 0x80
 8002744:	d102      	bne.n	800274c <HAL_DMA_Init+0x41c>
 8002746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800274a:	e01a      	b.n	8002782 <HAL_DMA_Init+0x452>
 800274c:	2300      	movs	r3, #0
 800274e:	e018      	b.n	8002782 <HAL_DMA_Init+0x452>
 8002750:	fe10803f 	.word	0xfe10803f
 8002754:	5c001000 	.word	0x5c001000
 8002758:	ffff0000 	.word	0xffff0000
 800275c:	58025408 	.word	0x58025408
 8002760:	5802541c 	.word	0x5802541c
 8002764:	58025430 	.word	0x58025430
 8002768:	58025444 	.word	0x58025444
 800276c:	58025458 	.word	0x58025458
 8002770:	5802546c 	.word	0x5802546c
 8002774:	58025480 	.word	0x58025480
 8002778:	58025494 	.word	0x58025494
 800277c:	fffe000f 	.word	0xfffe000f
 8002780:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80027a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80027a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80027b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b6e      	ldr	r3, [pc, #440]	; (8002980 <HAL_DMA_Init+0x650>)
 80027c8:	4413      	add	r3, r2
 80027ca:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <HAL_DMA_Init+0x654>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	009a      	lsls	r2, r3, #2
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f001 fda1 	bl	8004320 <DMA_CalcBaseAndBitshift>
 80027de:	4603      	mov	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2201      	movs	r2, #1
 80027ec:	409a      	lsls	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	e008      	b.n	8002806 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2240      	movs	r2, #64	; 0x40
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2203      	movs	r2, #3
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0b7      	b.n	8002976 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a5f      	ldr	r2, [pc, #380]	; (8002988 <HAL_DMA_Init+0x658>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d072      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a5d      	ldr	r2, [pc, #372]	; (800298c <HAL_DMA_Init+0x65c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d06d      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a5c      	ldr	r2, [pc, #368]	; (8002990 <HAL_DMA_Init+0x660>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d068      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_DMA_Init+0x664>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d063      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a59      	ldr	r2, [pc, #356]	; (8002998 <HAL_DMA_Init+0x668>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d05e      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a57      	ldr	r2, [pc, #348]	; (800299c <HAL_DMA_Init+0x66c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d059      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a56      	ldr	r2, [pc, #344]	; (80029a0 <HAL_DMA_Init+0x670>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d054      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a54      	ldr	r2, [pc, #336]	; (80029a4 <HAL_DMA_Init+0x674>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d04f      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a53      	ldr	r2, [pc, #332]	; (80029a8 <HAL_DMA_Init+0x678>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d04a      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_DMA_Init+0x67c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d045      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <HAL_DMA_Init+0x680>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d040      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a4e      	ldr	r2, [pc, #312]	; (80029b4 <HAL_DMA_Init+0x684>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d03b      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a4d      	ldr	r2, [pc, #308]	; (80029b8 <HAL_DMA_Init+0x688>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d036      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_DMA_Init+0x68c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d031      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_DMA_Init+0x690>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d02c      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a48      	ldr	r2, [pc, #288]	; (80029c4 <HAL_DMA_Init+0x694>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d027      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a47      	ldr	r2, [pc, #284]	; (80029c8 <HAL_DMA_Init+0x698>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d022      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a45      	ldr	r2, [pc, #276]	; (80029cc <HAL_DMA_Init+0x69c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01d      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a44      	ldr	r2, [pc, #272]	; (80029d0 <HAL_DMA_Init+0x6a0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d018      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a42      	ldr	r2, [pc, #264]	; (80029d4 <HAL_DMA_Init+0x6a4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a41      	ldr	r2, [pc, #260]	; (80029d8 <HAL_DMA_Init+0x6a8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00e      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3f      	ldr	r2, [pc, #252]	; (80029dc <HAL_DMA_Init+0x6ac>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d009      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a3e      	ldr	r2, [pc, #248]	; (80029e0 <HAL_DMA_Init+0x6b0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d004      	beq.n	80028f6 <HAL_DMA_Init+0x5c6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a3c      	ldr	r2, [pc, #240]	; (80029e4 <HAL_DMA_Init+0x6b4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_DMA_Init+0x5ca>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_DMA_Init+0x5cc>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d032      	beq.n	8002966 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f001 fe3b 	bl	800457c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b80      	cmp	r3, #128	; 0x80
 800290c:	d102      	bne.n	8002914 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002928:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d010      	beq.n	8002954 <HAL_DMA_Init+0x624>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b08      	cmp	r3, #8
 8002938:	d80c      	bhi.n	8002954 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f001 feb8 	bl	80046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	e008      	b.n	8002966 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	a7fdabf8 	.word	0xa7fdabf8
 8002984:	cccccccd 	.word	0xcccccccd
 8002988:	40020010 	.word	0x40020010
 800298c:	40020028 	.word	0x40020028
 8002990:	40020040 	.word	0x40020040
 8002994:	40020058 	.word	0x40020058
 8002998:	40020070 	.word	0x40020070
 800299c:	40020088 	.word	0x40020088
 80029a0:	400200a0 	.word	0x400200a0
 80029a4:	400200b8 	.word	0x400200b8
 80029a8:	40020410 	.word	0x40020410
 80029ac:	40020428 	.word	0x40020428
 80029b0:	40020440 	.word	0x40020440
 80029b4:	40020458 	.word	0x40020458
 80029b8:	40020470 	.word	0x40020470
 80029bc:	40020488 	.word	0x40020488
 80029c0:	400204a0 	.word	0x400204a0
 80029c4:	400204b8 	.word	0x400204b8
 80029c8:	58025408 	.word	0x58025408
 80029cc:	5802541c 	.word	0x5802541c
 80029d0:	58025430 	.word	0x58025430
 80029d4:	58025444 	.word	0x58025444
 80029d8:	58025458 	.word	0x58025458
 80029dc:	5802546c 	.word	0x5802546c
 80029e0:	58025480 	.word	0x58025480
 80029e4:	58025494 	.word	0x58025494

080029e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff fac8 	bl	8001f84 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e2dc      	b.n	8002fba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d008      	beq.n	8002a1e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e2cd      	b.n	8002fba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a76      	ldr	r2, [pc, #472]	; (8002bfc <HAL_DMA_Abort+0x214>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d04a      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a74      	ldr	r2, [pc, #464]	; (8002c00 <HAL_DMA_Abort+0x218>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d045      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a73      	ldr	r2, [pc, #460]	; (8002c04 <HAL_DMA_Abort+0x21c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d040      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a71      	ldr	r2, [pc, #452]	; (8002c08 <HAL_DMA_Abort+0x220>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d03b      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a70      	ldr	r2, [pc, #448]	; (8002c0c <HAL_DMA_Abort+0x224>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d036      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6e      	ldr	r2, [pc, #440]	; (8002c10 <HAL_DMA_Abort+0x228>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d031      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6d      	ldr	r2, [pc, #436]	; (8002c14 <HAL_DMA_Abort+0x22c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d02c      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6b      	ldr	r2, [pc, #428]	; (8002c18 <HAL_DMA_Abort+0x230>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d027      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6a      	ldr	r2, [pc, #424]	; (8002c1c <HAL_DMA_Abort+0x234>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a68      	ldr	r2, [pc, #416]	; (8002c20 <HAL_DMA_Abort+0x238>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01d      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a67      	ldr	r2, [pc, #412]	; (8002c24 <HAL_DMA_Abort+0x23c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a65      	ldr	r2, [pc, #404]	; (8002c28 <HAL_DMA_Abort+0x240>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a64      	ldr	r2, [pc, #400]	; (8002c2c <HAL_DMA_Abort+0x244>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a62      	ldr	r2, [pc, #392]	; (8002c30 <HAL_DMA_Abort+0x248>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a61      	ldr	r2, [pc, #388]	; (8002c34 <HAL_DMA_Abort+0x24c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_DMA_Abort+0xd6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5f      	ldr	r2, [pc, #380]	; (8002c38 <HAL_DMA_Abort+0x250>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Abort+0xda>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_DMA_Abort+0xdc>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d013      	beq.n	8002af0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 021e 	bic.w	r2, r2, #30
 8002ad6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	e00a      	b.n	8002b06 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020e 	bic.w	r2, r2, #14
 8002afe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a3c      	ldr	r2, [pc, #240]	; (8002bfc <HAL_DMA_Abort+0x214>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d072      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a3a      	ldr	r2, [pc, #232]	; (8002c00 <HAL_DMA_Abort+0x218>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d06d      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a39      	ldr	r2, [pc, #228]	; (8002c04 <HAL_DMA_Abort+0x21c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d068      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a37      	ldr	r2, [pc, #220]	; (8002c08 <HAL_DMA_Abort+0x220>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d063      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <HAL_DMA_Abort+0x224>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d05e      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a34      	ldr	r2, [pc, #208]	; (8002c10 <HAL_DMA_Abort+0x228>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d059      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a33      	ldr	r2, [pc, #204]	; (8002c14 <HAL_DMA_Abort+0x22c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d054      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <HAL_DMA_Abort+0x230>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d04f      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <HAL_DMA_Abort+0x234>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d04a      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2e      	ldr	r2, [pc, #184]	; (8002c20 <HAL_DMA_Abort+0x238>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d045      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <HAL_DMA_Abort+0x23c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d040      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2b      	ldr	r2, [pc, #172]	; (8002c28 <HAL_DMA_Abort+0x240>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d03b      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <HAL_DMA_Abort+0x244>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d036      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <HAL_DMA_Abort+0x248>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d031      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <HAL_DMA_Abort+0x24c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a25      	ldr	r2, [pc, #148]	; (8002c38 <HAL_DMA_Abort+0x250>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d027      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a24      	ldr	r2, [pc, #144]	; (8002c3c <HAL_DMA_Abort+0x254>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <HAL_DMA_Abort+0x258>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a21      	ldr	r2, [pc, #132]	; (8002c44 <HAL_DMA_Abort+0x25c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_DMA_Abort+0x260>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <HAL_DMA_Abort+0x264>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_DMA_Abort+0x268>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1b      	ldr	r2, [pc, #108]	; (8002c54 <HAL_DMA_Abort+0x26c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_DMA_Abort+0x20e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_DMA_Abort+0x270>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d132      	bne.n	8002c5c <HAL_DMA_Abort+0x274>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e031      	b.n	8002c5e <HAL_DMA_Abort+0x276>
 8002bfa:	bf00      	nop
 8002bfc:	40020010 	.word	0x40020010
 8002c00:	40020028 	.word	0x40020028
 8002c04:	40020040 	.word	0x40020040
 8002c08:	40020058 	.word	0x40020058
 8002c0c:	40020070 	.word	0x40020070
 8002c10:	40020088 	.word	0x40020088
 8002c14:	400200a0 	.word	0x400200a0
 8002c18:	400200b8 	.word	0x400200b8
 8002c1c:	40020410 	.word	0x40020410
 8002c20:	40020428 	.word	0x40020428
 8002c24:	40020440 	.word	0x40020440
 8002c28:	40020458 	.word	0x40020458
 8002c2c:	40020470 	.word	0x40020470
 8002c30:	40020488 	.word	0x40020488
 8002c34:	400204a0 	.word	0x400204a0
 8002c38:	400204b8 	.word	0x400204b8
 8002c3c:	58025408 	.word	0x58025408
 8002c40:	5802541c 	.word	0x5802541c
 8002c44:	58025430 	.word	0x58025430
 8002c48:	58025444 	.word	0x58025444
 8002c4c:	58025458 	.word	0x58025458
 8002c50:	5802546c 	.word	0x5802546c
 8002c54:	58025480 	.word	0x58025480
 8002c58:	58025494 	.word	0x58025494
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a6d      	ldr	r2, [pc, #436]	; (8002e2c <HAL_DMA_Abort+0x444>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d04a      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6b      	ldr	r2, [pc, #428]	; (8002e30 <HAL_DMA_Abort+0x448>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d045      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a6a      	ldr	r2, [pc, #424]	; (8002e34 <HAL_DMA_Abort+0x44c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d040      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a68      	ldr	r2, [pc, #416]	; (8002e38 <HAL_DMA_Abort+0x450>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d03b      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a67      	ldr	r2, [pc, #412]	; (8002e3c <HAL_DMA_Abort+0x454>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d036      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <HAL_DMA_Abort+0x458>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d031      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a64      	ldr	r2, [pc, #400]	; (8002e44 <HAL_DMA_Abort+0x45c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d02c      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a62      	ldr	r2, [pc, #392]	; (8002e48 <HAL_DMA_Abort+0x460>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d027      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a61      	ldr	r2, [pc, #388]	; (8002e4c <HAL_DMA_Abort+0x464>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d022      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a5f      	ldr	r2, [pc, #380]	; (8002e50 <HAL_DMA_Abort+0x468>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01d      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a5e      	ldr	r2, [pc, #376]	; (8002e54 <HAL_DMA_Abort+0x46c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a5c      	ldr	r2, [pc, #368]	; (8002e58 <HAL_DMA_Abort+0x470>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a5b      	ldr	r2, [pc, #364]	; (8002e5c <HAL_DMA_Abort+0x474>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a59      	ldr	r2, [pc, #356]	; (8002e60 <HAL_DMA_Abort+0x478>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_DMA_Abort+0x47c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_DMA_Abort+0x32a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a56      	ldr	r2, [pc, #344]	; (8002e68 <HAL_DMA_Abort+0x480>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d108      	bne.n	8002d24 <HAL_DMA_Abort+0x33c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e007      	b.n	8002d34 <HAL_DMA_Abort+0x34c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d34:	e013      	b.n	8002d5e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d36:	f7ff f925 	bl	8001f84 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d90c      	bls.n	8002d5e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2203      	movs	r2, #3
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e12d      	b.n	8002fba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e5      	bne.n	8002d36 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <HAL_DMA_Abort+0x444>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d04a      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2d      	ldr	r2, [pc, #180]	; (8002e30 <HAL_DMA_Abort+0x448>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d045      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <HAL_DMA_Abort+0x44c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d040      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <HAL_DMA_Abort+0x450>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d03b      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_DMA_Abort+0x454>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d036      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <HAL_DMA_Abort+0x458>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d031      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <HAL_DMA_Abort+0x45c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d02c      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <HAL_DMA_Abort+0x460>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d027      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a23      	ldr	r2, [pc, #140]	; (8002e4c <HAL_DMA_Abort+0x464>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <HAL_DMA_Abort+0x468>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <HAL_DMA_Abort+0x46c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d018      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_DMA_Abort+0x470>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <HAL_DMA_Abort+0x474>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a1b      	ldr	r2, [pc, #108]	; (8002e60 <HAL_DMA_Abort+0x478>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d009      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	; (8002e64 <HAL_DMA_Abort+0x47c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_DMA_Abort+0x422>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_DMA_Abort+0x480>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_DMA_Abort+0x426>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_DMA_Abort+0x428>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d02b      	beq.n	8002e6c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	223f      	movs	r2, #63	; 0x3f
 8002e24:	409a      	lsls	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	e02a      	b.n	8002e82 <HAL_DMA_Abort+0x49a>
 8002e2c:	40020010 	.word	0x40020010
 8002e30:	40020028 	.word	0x40020028
 8002e34:	40020040 	.word	0x40020040
 8002e38:	40020058 	.word	0x40020058
 8002e3c:	40020070 	.word	0x40020070
 8002e40:	40020088 	.word	0x40020088
 8002e44:	400200a0 	.word	0x400200a0
 8002e48:	400200b8 	.word	0x400200b8
 8002e4c:	40020410 	.word	0x40020410
 8002e50:	40020428 	.word	0x40020428
 8002e54:	40020440 	.word	0x40020440
 8002e58:	40020458 	.word	0x40020458
 8002e5c:	40020470 	.word	0x40020470
 8002e60:	40020488 	.word	0x40020488
 8002e64:	400204a0 	.word	0x400204a0
 8002e68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4f      	ldr	r2, [pc, #316]	; (8002fc4 <HAL_DMA_Abort+0x5dc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d072      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4d      	ldr	r2, [pc, #308]	; (8002fc8 <HAL_DMA_Abort+0x5e0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d06d      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a4c      	ldr	r2, [pc, #304]	; (8002fcc <HAL_DMA_Abort+0x5e4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d068      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	; (8002fd0 <HAL_DMA_Abort+0x5e8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d063      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a49      	ldr	r2, [pc, #292]	; (8002fd4 <HAL_DMA_Abort+0x5ec>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d05e      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a47      	ldr	r2, [pc, #284]	; (8002fd8 <HAL_DMA_Abort+0x5f0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d059      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a46      	ldr	r2, [pc, #280]	; (8002fdc <HAL_DMA_Abort+0x5f4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d054      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a44      	ldr	r2, [pc, #272]	; (8002fe0 <HAL_DMA_Abort+0x5f8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d04f      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a43      	ldr	r2, [pc, #268]	; (8002fe4 <HAL_DMA_Abort+0x5fc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04a      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a41      	ldr	r2, [pc, #260]	; (8002fe8 <HAL_DMA_Abort+0x600>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d045      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a40      	ldr	r2, [pc, #256]	; (8002fec <HAL_DMA_Abort+0x604>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d040      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3e      	ldr	r2, [pc, #248]	; (8002ff0 <HAL_DMA_Abort+0x608>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03b      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3d      	ldr	r2, [pc, #244]	; (8002ff4 <HAL_DMA_Abort+0x60c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d036      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a3b      	ldr	r2, [pc, #236]	; (8002ff8 <HAL_DMA_Abort+0x610>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a3a      	ldr	r2, [pc, #232]	; (8002ffc <HAL_DMA_Abort+0x614>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d02c      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a38      	ldr	r2, [pc, #224]	; (8003000 <HAL_DMA_Abort+0x618>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a37      	ldr	r2, [pc, #220]	; (8003004 <HAL_DMA_Abort+0x61c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a35      	ldr	r2, [pc, #212]	; (8003008 <HAL_DMA_Abort+0x620>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a34      	ldr	r2, [pc, #208]	; (800300c <HAL_DMA_Abort+0x624>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a32      	ldr	r2, [pc, #200]	; (8003010 <HAL_DMA_Abort+0x628>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a31      	ldr	r2, [pc, #196]	; (8003014 <HAL_DMA_Abort+0x62c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a2f      	ldr	r2, [pc, #188]	; (8003018 <HAL_DMA_Abort+0x630>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2e      	ldr	r2, [pc, #184]	; (800301c <HAL_DMA_Abort+0x634>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Abort+0x58a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2c      	ldr	r2, [pc, #176]	; (8003020 <HAL_DMA_Abort+0x638>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_DMA_Abort+0x58e>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_DMA_Abort+0x590>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d015      	beq.n	8002fa8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f84:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00c      	beq.n	8002fa8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fa6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40020010 	.word	0x40020010
 8002fc8:	40020028 	.word	0x40020028
 8002fcc:	40020040 	.word	0x40020040
 8002fd0:	40020058 	.word	0x40020058
 8002fd4:	40020070 	.word	0x40020070
 8002fd8:	40020088 	.word	0x40020088
 8002fdc:	400200a0 	.word	0x400200a0
 8002fe0:	400200b8 	.word	0x400200b8
 8002fe4:	40020410 	.word	0x40020410
 8002fe8:	40020428 	.word	0x40020428
 8002fec:	40020440 	.word	0x40020440
 8002ff0:	40020458 	.word	0x40020458
 8002ff4:	40020470 	.word	0x40020470
 8002ff8:	40020488 	.word	0x40020488
 8002ffc:	400204a0 	.word	0x400204a0
 8003000:	400204b8 	.word	0x400204b8
 8003004:	58025408 	.word	0x58025408
 8003008:	5802541c 	.word	0x5802541c
 800300c:	58025430 	.word	0x58025430
 8003010:	58025444 	.word	0x58025444
 8003014:	58025458 	.word	0x58025458
 8003018:	5802546c 	.word	0x5802546c
 800301c:	58025480 	.word	0x58025480
 8003020:	58025494 	.word	0x58025494

08003024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e237      	b.n	80034a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d004      	beq.n	800304c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e22c      	b.n	80034a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a5c      	ldr	r2, [pc, #368]	; (80031c4 <HAL_DMA_Abort_IT+0x1a0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d04a      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a5b      	ldr	r2, [pc, #364]	; (80031c8 <HAL_DMA_Abort_IT+0x1a4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d045      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a59      	ldr	r2, [pc, #356]	; (80031cc <HAL_DMA_Abort_IT+0x1a8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d040      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <HAL_DMA_Abort_IT+0x1ac>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d03b      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a56      	ldr	r2, [pc, #344]	; (80031d4 <HAL_DMA_Abort_IT+0x1b0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d036      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a55      	ldr	r2, [pc, #340]	; (80031d8 <HAL_DMA_Abort_IT+0x1b4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d031      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a53      	ldr	r2, [pc, #332]	; (80031dc <HAL_DMA_Abort_IT+0x1b8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d02c      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a52      	ldr	r2, [pc, #328]	; (80031e0 <HAL_DMA_Abort_IT+0x1bc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d027      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a50      	ldr	r2, [pc, #320]	; (80031e4 <HAL_DMA_Abort_IT+0x1c0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d022      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4f      	ldr	r2, [pc, #316]	; (80031e8 <HAL_DMA_Abort_IT+0x1c4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d01d      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a4d      	ldr	r2, [pc, #308]	; (80031ec <HAL_DMA_Abort_IT+0x1c8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d018      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <HAL_DMA_Abort_IT+0x1cc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d013      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a4a      	ldr	r2, [pc, #296]	; (80031f4 <HAL_DMA_Abort_IT+0x1d0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00e      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a49      	ldr	r2, [pc, #292]	; (80031f8 <HAL_DMA_Abort_IT+0x1d4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a47      	ldr	r2, [pc, #284]	; (80031fc <HAL_DMA_Abort_IT+0x1d8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_DMA_Abort_IT+0xc8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a46      	ldr	r2, [pc, #280]	; (8003200 <HAL_DMA_Abort_IT+0x1dc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_DMA_Abort_IT+0xcc>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_DMA_Abort_IT+0xce>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8086 	beq.w	8003204 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2204      	movs	r2, #4
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2f      	ldr	r2, [pc, #188]	; (80031c4 <HAL_DMA_Abort_IT+0x1a0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d04a      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <HAL_DMA_Abort_IT+0x1a4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d045      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a2c      	ldr	r2, [pc, #176]	; (80031cc <HAL_DMA_Abort_IT+0x1a8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d040      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2b      	ldr	r2, [pc, #172]	; (80031d0 <HAL_DMA_Abort_IT+0x1ac>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d03b      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <HAL_DMA_Abort_IT+0x1b0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d036      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a28      	ldr	r2, [pc, #160]	; (80031d8 <HAL_DMA_Abort_IT+0x1b4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d031      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_DMA_Abort_IT+0x1b8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02c      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <HAL_DMA_Abort_IT+0x1bc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d027      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_DMA_Abort_IT+0x1c0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_DMA_Abort_IT+0x1c4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d01d      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <HAL_DMA_Abort_IT+0x1c8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d018      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1f      	ldr	r2, [pc, #124]	; (80031f0 <HAL_DMA_Abort_IT+0x1cc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_DMA_Abort_IT+0x1d0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00e      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_DMA_Abort_IT+0x1d4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_DMA_Abort_IT+0x1d8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x17c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_DMA_Abort_IT+0x1dc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d108      	bne.n	80031b2 <HAL_DMA_Abort_IT+0x18e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e178      	b.n	80034a4 <HAL_DMA_Abort_IT+0x480>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e16f      	b.n	80034a4 <HAL_DMA_Abort_IT+0x480>
 80031c4:	40020010 	.word	0x40020010
 80031c8:	40020028 	.word	0x40020028
 80031cc:	40020040 	.word	0x40020040
 80031d0:	40020058 	.word	0x40020058
 80031d4:	40020070 	.word	0x40020070
 80031d8:	40020088 	.word	0x40020088
 80031dc:	400200a0 	.word	0x400200a0
 80031e0:	400200b8 	.word	0x400200b8
 80031e4:	40020410 	.word	0x40020410
 80031e8:	40020428 	.word	0x40020428
 80031ec:	40020440 	.word	0x40020440
 80031f0:	40020458 	.word	0x40020458
 80031f4:	40020470 	.word	0x40020470
 80031f8:	40020488 	.word	0x40020488
 80031fc:	400204a0 	.word	0x400204a0
 8003200:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 020e 	bic.w	r2, r2, #14
 8003212:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6c      	ldr	r2, [pc, #432]	; (80033cc <HAL_DMA_Abort_IT+0x3a8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d04a      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6b      	ldr	r2, [pc, #428]	; (80033d0 <HAL_DMA_Abort_IT+0x3ac>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d045      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a69      	ldr	r2, [pc, #420]	; (80033d4 <HAL_DMA_Abort_IT+0x3b0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d040      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a68      	ldr	r2, [pc, #416]	; (80033d8 <HAL_DMA_Abort_IT+0x3b4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d03b      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a66      	ldr	r2, [pc, #408]	; (80033dc <HAL_DMA_Abort_IT+0x3b8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d036      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a65      	ldr	r2, [pc, #404]	; (80033e0 <HAL_DMA_Abort_IT+0x3bc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d031      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a63      	ldr	r2, [pc, #396]	; (80033e4 <HAL_DMA_Abort_IT+0x3c0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d02c      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a62      	ldr	r2, [pc, #392]	; (80033e8 <HAL_DMA_Abort_IT+0x3c4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d027      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a60      	ldr	r2, [pc, #384]	; (80033ec <HAL_DMA_Abort_IT+0x3c8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d022      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a5f      	ldr	r2, [pc, #380]	; (80033f0 <HAL_DMA_Abort_IT+0x3cc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d01d      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a5d      	ldr	r2, [pc, #372]	; (80033f4 <HAL_DMA_Abort_IT+0x3d0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d018      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a5c      	ldr	r2, [pc, #368]	; (80033f8 <HAL_DMA_Abort_IT+0x3d4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a5a      	ldr	r2, [pc, #360]	; (80033fc <HAL_DMA_Abort_IT+0x3d8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a59      	ldr	r2, [pc, #356]	; (8003400 <HAL_DMA_Abort_IT+0x3dc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d009      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a57      	ldr	r2, [pc, #348]	; (8003404 <HAL_DMA_Abort_IT+0x3e0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x290>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a56      	ldr	r2, [pc, #344]	; (8003408 <HAL_DMA_Abort_IT+0x3e4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d108      	bne.n	80032c6 <HAL_DMA_Abort_IT+0x2a2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	e007      	b.n	80032d6 <HAL_DMA_Abort_IT+0x2b2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 0201 	bic.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a3c      	ldr	r2, [pc, #240]	; (80033cc <HAL_DMA_Abort_IT+0x3a8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d072      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3a      	ldr	r2, [pc, #232]	; (80033d0 <HAL_DMA_Abort_IT+0x3ac>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d06d      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a39      	ldr	r2, [pc, #228]	; (80033d4 <HAL_DMA_Abort_IT+0x3b0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d068      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a37      	ldr	r2, [pc, #220]	; (80033d8 <HAL_DMA_Abort_IT+0x3b4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d063      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a36      	ldr	r2, [pc, #216]	; (80033dc <HAL_DMA_Abort_IT+0x3b8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d05e      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <HAL_DMA_Abort_IT+0x3bc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d059      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a33      	ldr	r2, [pc, #204]	; (80033e4 <HAL_DMA_Abort_IT+0x3c0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d054      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a31      	ldr	r2, [pc, #196]	; (80033e8 <HAL_DMA_Abort_IT+0x3c4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d04f      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a30      	ldr	r2, [pc, #192]	; (80033ec <HAL_DMA_Abort_IT+0x3c8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d04a      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2e      	ldr	r2, [pc, #184]	; (80033f0 <HAL_DMA_Abort_IT+0x3cc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d045      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2d      	ldr	r2, [pc, #180]	; (80033f4 <HAL_DMA_Abort_IT+0x3d0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d040      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2b      	ldr	r2, [pc, #172]	; (80033f8 <HAL_DMA_Abort_IT+0x3d4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d03b      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <HAL_DMA_Abort_IT+0x3d8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d036      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a28      	ldr	r2, [pc, #160]	; (8003400 <HAL_DMA_Abort_IT+0x3dc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d031      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a27      	ldr	r2, [pc, #156]	; (8003404 <HAL_DMA_Abort_IT+0x3e0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d02c      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a25      	ldr	r2, [pc, #148]	; (8003408 <HAL_DMA_Abort_IT+0x3e4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d027      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a24      	ldr	r2, [pc, #144]	; (800340c <HAL_DMA_Abort_IT+0x3e8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d022      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a22      	ldr	r2, [pc, #136]	; (8003410 <HAL_DMA_Abort_IT+0x3ec>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01d      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a21      	ldr	r2, [pc, #132]	; (8003414 <HAL_DMA_Abort_IT+0x3f0>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d018      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <HAL_DMA_Abort_IT+0x3f4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d013      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1e      	ldr	r2, [pc, #120]	; (800341c <HAL_DMA_Abort_IT+0x3f8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <HAL_DMA_Abort_IT+0x3fc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <HAL_DMA_Abort_IT+0x400>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_DMA_Abort_IT+0x3a2>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_DMA_Abort_IT+0x404>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d132      	bne.n	800342c <HAL_DMA_Abort_IT+0x408>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e031      	b.n	800342e <HAL_DMA_Abort_IT+0x40a>
 80033ca:	bf00      	nop
 80033cc:	40020010 	.word	0x40020010
 80033d0:	40020028 	.word	0x40020028
 80033d4:	40020040 	.word	0x40020040
 80033d8:	40020058 	.word	0x40020058
 80033dc:	40020070 	.word	0x40020070
 80033e0:	40020088 	.word	0x40020088
 80033e4:	400200a0 	.word	0x400200a0
 80033e8:	400200b8 	.word	0x400200b8
 80033ec:	40020410 	.word	0x40020410
 80033f0:	40020428 	.word	0x40020428
 80033f4:	40020440 	.word	0x40020440
 80033f8:	40020458 	.word	0x40020458
 80033fc:	40020470 	.word	0x40020470
 8003400:	40020488 	.word	0x40020488
 8003404:	400204a0 	.word	0x400204a0
 8003408:	400204b8 	.word	0x400204b8
 800340c:	58025408 	.word	0x58025408
 8003410:	5802541c 	.word	0x5802541c
 8003414:	58025430 	.word	0x58025430
 8003418:	58025444 	.word	0x58025444
 800341c:	58025458 	.word	0x58025458
 8003420:	5802546c 	.word	0x5802546c
 8003424:	58025480 	.word	0x58025480
 8003428:	58025494 	.word	0x58025494
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d028      	beq.n	8003484 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003440:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2201      	movs	r2, #1
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003460:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00c      	beq.n	8003484 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003478:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003482:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop

080034b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034bc:	4b67      	ldr	r3, [pc, #412]	; (800365c <HAL_DMA_IRQHandler+0x1ac>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a67      	ldr	r2, [pc, #412]	; (8003660 <HAL_DMA_IRQHandler+0x1b0>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0a9b      	lsrs	r3, r3, #10
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a5f      	ldr	r2, [pc, #380]	; (8003664 <HAL_DMA_IRQHandler+0x1b4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d04a      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a5d      	ldr	r2, [pc, #372]	; (8003668 <HAL_DMA_IRQHandler+0x1b8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d045      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a5c      	ldr	r2, [pc, #368]	; (800366c <HAL_DMA_IRQHandler+0x1bc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d040      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a5a      	ldr	r2, [pc, #360]	; (8003670 <HAL_DMA_IRQHandler+0x1c0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d03b      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a59      	ldr	r2, [pc, #356]	; (8003674 <HAL_DMA_IRQHandler+0x1c4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d036      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a57      	ldr	r2, [pc, #348]	; (8003678 <HAL_DMA_IRQHandler+0x1c8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a56      	ldr	r2, [pc, #344]	; (800367c <HAL_DMA_IRQHandler+0x1cc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d02c      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a54      	ldr	r2, [pc, #336]	; (8003680 <HAL_DMA_IRQHandler+0x1d0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d027      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a53      	ldr	r2, [pc, #332]	; (8003684 <HAL_DMA_IRQHandler+0x1d4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a51      	ldr	r2, [pc, #324]	; (8003688 <HAL_DMA_IRQHandler+0x1d8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01d      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a50      	ldr	r2, [pc, #320]	; (800368c <HAL_DMA_IRQHandler+0x1dc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a4e      	ldr	r2, [pc, #312]	; (8003690 <HAL_DMA_IRQHandler+0x1e0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a4d      	ldr	r2, [pc, #308]	; (8003694 <HAL_DMA_IRQHandler+0x1e4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a4b      	ldr	r2, [pc, #300]	; (8003698 <HAL_DMA_IRQHandler+0x1e8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a4a      	ldr	r2, [pc, #296]	; (800369c <HAL_DMA_IRQHandler+0x1ec>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_IRQHandler+0xd2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a48      	ldr	r2, [pc, #288]	; (80036a0 <HAL_DMA_IRQHandler+0x1f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_DMA_IRQHandler+0xd6>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_DMA_IRQHandler+0xd8>
 8003586:	2300      	movs	r3, #0
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 842b 	beq.w	8003de4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2208      	movs	r2, #8
 8003598:	409a      	lsls	r2, r3
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80a2 	beq.w	80036e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2e      	ldr	r2, [pc, #184]	; (8003664 <HAL_DMA_IRQHandler+0x1b4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d04a      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2d      	ldr	r2, [pc, #180]	; (8003668 <HAL_DMA_IRQHandler+0x1b8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d045      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2b      	ldr	r2, [pc, #172]	; (800366c <HAL_DMA_IRQHandler+0x1bc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d040      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a2a      	ldr	r2, [pc, #168]	; (8003670 <HAL_DMA_IRQHandler+0x1c0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d03b      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a28      	ldr	r2, [pc, #160]	; (8003674 <HAL_DMA_IRQHandler+0x1c4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d036      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a27      	ldr	r2, [pc, #156]	; (8003678 <HAL_DMA_IRQHandler+0x1c8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d031      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <HAL_DMA_IRQHandler+0x1cc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02c      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a24      	ldr	r2, [pc, #144]	; (8003680 <HAL_DMA_IRQHandler+0x1d0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d027      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a22      	ldr	r2, [pc, #136]	; (8003684 <HAL_DMA_IRQHandler+0x1d4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d022      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a21      	ldr	r2, [pc, #132]	; (8003688 <HAL_DMA_IRQHandler+0x1d8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d01d      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1f      	ldr	r2, [pc, #124]	; (800368c <HAL_DMA_IRQHandler+0x1dc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <HAL_DMA_IRQHandler+0x1e0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <HAL_DMA_IRQHandler+0x1e4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1b      	ldr	r2, [pc, #108]	; (8003698 <HAL_DMA_IRQHandler+0x1e8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a19      	ldr	r2, [pc, #100]	; (800369c <HAL_DMA_IRQHandler+0x1ec>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_DMA_IRQHandler+0x194>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <HAL_DMA_IRQHandler+0x1f0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d12f      	bne.n	80036a4 <HAL_DMA_IRQHandler+0x1f4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e02e      	b.n	80036b8 <HAL_DMA_IRQHandler+0x208>
 800365a:	bf00      	nop
 800365c:	24000000 	.word	0x24000000
 8003660:	1b4e81b5 	.word	0x1b4e81b5
 8003664:	40020010 	.word	0x40020010
 8003668:	40020028 	.word	0x40020028
 800366c:	40020040 	.word	0x40020040
 8003670:	40020058 	.word	0x40020058
 8003674:	40020070 	.word	0x40020070
 8003678:	40020088 	.word	0x40020088
 800367c:	400200a0 	.word	0x400200a0
 8003680:	400200b8 	.word	0x400200b8
 8003684:	40020410 	.word	0x40020410
 8003688:	40020428 	.word	0x40020428
 800368c:	40020440 	.word	0x40020440
 8003690:	40020458 	.word	0x40020458
 8003694:	40020470 	.word	0x40020470
 8003698:	40020488 	.word	0x40020488
 800369c:	400204a0 	.word	0x400204a0
 80036a0:	400204b8 	.word	0x400204b8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bf14      	ite	ne
 80036b2:	2301      	movne	r3, #1
 80036b4:	2300      	moveq	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2208      	movs	r2, #8
 80036d6:	409a      	lsls	r2, r3
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	fa22 f303 	lsr.w	r3, r2, r3
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d06e      	beq.n	80037dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a69      	ldr	r2, [pc, #420]	; (80038a8 <HAL_DMA_IRQHandler+0x3f8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d04a      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a67      	ldr	r2, [pc, #412]	; (80038ac <HAL_DMA_IRQHandler+0x3fc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d045      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a66      	ldr	r2, [pc, #408]	; (80038b0 <HAL_DMA_IRQHandler+0x400>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d040      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a64      	ldr	r2, [pc, #400]	; (80038b4 <HAL_DMA_IRQHandler+0x404>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d03b      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a63      	ldr	r2, [pc, #396]	; (80038b8 <HAL_DMA_IRQHandler+0x408>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d036      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a61      	ldr	r2, [pc, #388]	; (80038bc <HAL_DMA_IRQHandler+0x40c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d031      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a60      	ldr	r2, [pc, #384]	; (80038c0 <HAL_DMA_IRQHandler+0x410>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d02c      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5e      	ldr	r2, [pc, #376]	; (80038c4 <HAL_DMA_IRQHandler+0x414>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d027      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a5d      	ldr	r2, [pc, #372]	; (80038c8 <HAL_DMA_IRQHandler+0x418>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d022      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a5b      	ldr	r2, [pc, #364]	; (80038cc <HAL_DMA_IRQHandler+0x41c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01d      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a5a      	ldr	r2, [pc, #360]	; (80038d0 <HAL_DMA_IRQHandler+0x420>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d018      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a58      	ldr	r2, [pc, #352]	; (80038d4 <HAL_DMA_IRQHandler+0x424>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a57      	ldr	r2, [pc, #348]	; (80038d8 <HAL_DMA_IRQHandler+0x428>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a55      	ldr	r2, [pc, #340]	; (80038dc <HAL_DMA_IRQHandler+0x42c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a54      	ldr	r2, [pc, #336]	; (80038e0 <HAL_DMA_IRQHandler+0x430>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_DMA_IRQHandler+0x2ee>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a52      	ldr	r2, [pc, #328]	; (80038e4 <HAL_DMA_IRQHandler+0x434>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10a      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x304>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e003      	b.n	80037bc <HAL_DMA_IRQHandler+0x30c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00d      	beq.n	80037dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	2201      	movs	r2, #1
 80037ca:	409a      	lsls	r2, r3
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f043 0202 	orr.w	r2, r3, #2
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2204      	movs	r2, #4
 80037e6:	409a      	lsls	r2, r3
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 808f 	beq.w	8003910 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <HAL_DMA_IRQHandler+0x3f8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d04a      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2a      	ldr	r2, [pc, #168]	; (80038ac <HAL_DMA_IRQHandler+0x3fc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d045      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a29      	ldr	r2, [pc, #164]	; (80038b0 <HAL_DMA_IRQHandler+0x400>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d040      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <HAL_DMA_IRQHandler+0x404>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d03b      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_DMA_IRQHandler+0x408>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d036      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a24      	ldr	r2, [pc, #144]	; (80038bc <HAL_DMA_IRQHandler+0x40c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d031      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <HAL_DMA_IRQHandler+0x410>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d02c      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_DMA_IRQHandler+0x414>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d027      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <HAL_DMA_IRQHandler+0x418>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d022      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_DMA_IRQHandler+0x41c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01d      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <HAL_DMA_IRQHandler+0x420>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d018      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <HAL_DMA_IRQHandler+0x424>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1a      	ldr	r2, [pc, #104]	; (80038d8 <HAL_DMA_IRQHandler+0x428>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a18      	ldr	r2, [pc, #96]	; (80038dc <HAL_DMA_IRQHandler+0x42c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <HAL_DMA_IRQHandler+0x430>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_DMA_IRQHandler+0x3e2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <HAL_DMA_IRQHandler+0x434>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d12a      	bne.n	80038e8 <HAL_DMA_IRQHandler+0x438>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e023      	b.n	80038f0 <HAL_DMA_IRQHandler+0x440>
 80038a8:	40020010 	.word	0x40020010
 80038ac:	40020028 	.word	0x40020028
 80038b0:	40020040 	.word	0x40020040
 80038b4:	40020058 	.word	0x40020058
 80038b8:	40020070 	.word	0x40020070
 80038bc:	40020088 	.word	0x40020088
 80038c0:	400200a0 	.word	0x400200a0
 80038c4:	400200b8 	.word	0x400200b8
 80038c8:	40020410 	.word	0x40020410
 80038cc:	40020428 	.word	0x40020428
 80038d0:	40020440 	.word	0x40020440
 80038d4:	40020458 	.word	0x40020458
 80038d8:	40020470 	.word	0x40020470
 80038dc:	40020488 	.word	0x40020488
 80038e0:	400204a0 	.word	0x400204a0
 80038e4:	400204b8 	.word	0x400204b8
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2300      	movs	r3, #0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2204      	movs	r2, #4
 80038fe:	409a      	lsls	r2, r3
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	2210      	movs	r2, #16
 800391a:	409a      	lsls	r2, r3
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a6 	beq.w	8003a72 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a85      	ldr	r2, [pc, #532]	; (8003b40 <HAL_DMA_IRQHandler+0x690>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d04a      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a83      	ldr	r2, [pc, #524]	; (8003b44 <HAL_DMA_IRQHandler+0x694>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d045      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a82      	ldr	r2, [pc, #520]	; (8003b48 <HAL_DMA_IRQHandler+0x698>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d040      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a80      	ldr	r2, [pc, #512]	; (8003b4c <HAL_DMA_IRQHandler+0x69c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d03b      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7f      	ldr	r2, [pc, #508]	; (8003b50 <HAL_DMA_IRQHandler+0x6a0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d036      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a7d      	ldr	r2, [pc, #500]	; (8003b54 <HAL_DMA_IRQHandler+0x6a4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d031      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a7c      	ldr	r2, [pc, #496]	; (8003b58 <HAL_DMA_IRQHandler+0x6a8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d02c      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a7a      	ldr	r2, [pc, #488]	; (8003b5c <HAL_DMA_IRQHandler+0x6ac>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d027      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a79      	ldr	r2, [pc, #484]	; (8003b60 <HAL_DMA_IRQHandler+0x6b0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d022      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a77      	ldr	r2, [pc, #476]	; (8003b64 <HAL_DMA_IRQHandler+0x6b4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01d      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a76      	ldr	r2, [pc, #472]	; (8003b68 <HAL_DMA_IRQHandler+0x6b8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d018      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a74      	ldr	r2, [pc, #464]	; (8003b6c <HAL_DMA_IRQHandler+0x6bc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a73      	ldr	r2, [pc, #460]	; (8003b70 <HAL_DMA_IRQHandler+0x6c0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00e      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a71      	ldr	r2, [pc, #452]	; (8003b74 <HAL_DMA_IRQHandler+0x6c4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a70      	ldr	r2, [pc, #448]	; (8003b78 <HAL_DMA_IRQHandler+0x6c8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x516>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a6e      	ldr	r2, [pc, #440]	; (8003b7c <HAL_DMA_IRQHandler+0x6cc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10a      	bne.n	80039dc <HAL_DMA_IRQHandler+0x52c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e009      	b.n	80039f0 <HAL_DMA_IRQHandler+0x540>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d03e      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	2210      	movs	r2, #16
 80039fe:	409a      	lsls	r2, r3
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d018      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d108      	bne.n	8003a32 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d024      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
 8003a30:	e01f      	b.n	8003a72 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d01b      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
 8003a42:	e016      	b.n	8003a72 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d107      	bne.n	8003a62 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0208 	bic.w	r2, r2, #8
 8003a60:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8110 	beq.w	8003ca8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a2c      	ldr	r2, [pc, #176]	; (8003b40 <HAL_DMA_IRQHandler+0x690>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d04a      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a2b      	ldr	r2, [pc, #172]	; (8003b44 <HAL_DMA_IRQHandler+0x694>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d045      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <HAL_DMA_IRQHandler+0x698>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d040      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a28      	ldr	r2, [pc, #160]	; (8003b4c <HAL_DMA_IRQHandler+0x69c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d03b      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a26      	ldr	r2, [pc, #152]	; (8003b50 <HAL_DMA_IRQHandler+0x6a0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d036      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <HAL_DMA_IRQHandler+0x6a4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d031      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <HAL_DMA_IRQHandler+0x6a8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d02c      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a22      	ldr	r2, [pc, #136]	; (8003b5c <HAL_DMA_IRQHandler+0x6ac>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d027      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <HAL_DMA_IRQHandler+0x6b0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d022      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <HAL_DMA_IRQHandler+0x6b4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d01d      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_DMA_IRQHandler+0x6b8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d018      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <HAL_DMA_IRQHandler+0x6bc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <HAL_DMA_IRQHandler+0x6c0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_DMA_IRQHandler+0x6c4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HAL_DMA_IRQHandler+0x6c8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x678>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a16      	ldr	r2, [pc, #88]	; (8003b7c <HAL_DMA_IRQHandler+0x6cc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d12b      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x6d0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf14      	ite	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	2300      	moveq	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	e02a      	b.n	8003b94 <HAL_DMA_IRQHandler+0x6e4>
 8003b3e:	bf00      	nop
 8003b40:	40020010 	.word	0x40020010
 8003b44:	40020028 	.word	0x40020028
 8003b48:	40020040 	.word	0x40020040
 8003b4c:	40020058 	.word	0x40020058
 8003b50:	40020070 	.word	0x40020070
 8003b54:	40020088 	.word	0x40020088
 8003b58:	400200a0 	.word	0x400200a0
 8003b5c:	400200b8 	.word	0x400200b8
 8003b60:	40020410 	.word	0x40020410
 8003b64:	40020428 	.word	0x40020428
 8003b68:	40020440 	.word	0x40020440
 8003b6c:	40020458 	.word	0x40020458
 8003b70:	40020470 	.word	0x40020470
 8003b74:	40020488 	.word	0x40020488
 8003b78:	400204a0 	.word	0x400204a0
 8003b7c:	400204b8 	.word	0x400204b8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf14      	ite	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	2300      	moveq	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8087 	beq.w	8003ca8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d139      	bne.n	8003c2a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0216 	bic.w	r2, r2, #22
 8003bc4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bd4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x736>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0208 	bic.w	r2, r2, #8
 8003bf4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	223f      	movs	r2, #63	; 0x3f
 8003c00:	409a      	lsls	r2, r3
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 834a 	beq.w	80042b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
          }
          return;
 8003c28:	e344      	b.n	80042b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02c      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
 8003c56:	e027      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d023      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
 8003c68:	e01e      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10f      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0210 	bic.w	r2, r2, #16
 8003c86:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8306 	beq.w	80042be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 8088 	beq.w	8003dd0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a7a      	ldr	r2, [pc, #488]	; (8003eb8 <HAL_DMA_IRQHandler+0xa08>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a79      	ldr	r2, [pc, #484]	; (8003ebc <HAL_DMA_IRQHandler+0xa0c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d045      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a77      	ldr	r2, [pc, #476]	; (8003ec0 <HAL_DMA_IRQHandler+0xa10>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d040      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a76      	ldr	r2, [pc, #472]	; (8003ec4 <HAL_DMA_IRQHandler+0xa14>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d03b      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a74      	ldr	r2, [pc, #464]	; (8003ec8 <HAL_DMA_IRQHandler+0xa18>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d036      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a73      	ldr	r2, [pc, #460]	; (8003ecc <HAL_DMA_IRQHandler+0xa1c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d031      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a71      	ldr	r2, [pc, #452]	; (8003ed0 <HAL_DMA_IRQHandler+0xa20>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02c      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a70      	ldr	r2, [pc, #448]	; (8003ed4 <HAL_DMA_IRQHandler+0xa24>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d027      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a6e      	ldr	r2, [pc, #440]	; (8003ed8 <HAL_DMA_IRQHandler+0xa28>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d022      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a6d      	ldr	r2, [pc, #436]	; (8003edc <HAL_DMA_IRQHandler+0xa2c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01d      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6b      	ldr	r2, [pc, #428]	; (8003ee0 <HAL_DMA_IRQHandler+0xa30>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d018      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a6a      	ldr	r2, [pc, #424]	; (8003ee4 <HAL_DMA_IRQHandler+0xa34>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a68      	ldr	r2, [pc, #416]	; (8003ee8 <HAL_DMA_IRQHandler+0xa38>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00e      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a67      	ldr	r2, [pc, #412]	; (8003eec <HAL_DMA_IRQHandler+0xa3c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a65      	ldr	r2, [pc, #404]	; (8003ef0 <HAL_DMA_IRQHandler+0xa40>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x8b8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a64      	ldr	r2, [pc, #400]	; (8003ef4 <HAL_DMA_IRQHandler+0xa44>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d108      	bne.n	8003d7a <HAL_DMA_IRQHandler+0x8ca>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e007      	b.n	8003d8a <HAL_DMA_IRQHandler+0x8da>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d307      	bcc.n	8003da6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f2      	bne.n	8003d8a <HAL_DMA_IRQHandler+0x8da>
 8003da4:	e000      	b.n	8003da8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003da6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003dc6:	e003      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8272 	beq.w	80042be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4798      	blx	r3
 8003de2:	e26c      	b.n	80042be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a43      	ldr	r2, [pc, #268]	; (8003ef8 <HAL_DMA_IRQHandler+0xa48>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d022      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x984>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a42      	ldr	r2, [pc, #264]	; (8003efc <HAL_DMA_IRQHandler+0xa4c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d01d      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x984>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a40      	ldr	r2, [pc, #256]	; (8003f00 <HAL_DMA_IRQHandler+0xa50>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d018      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x984>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a3f      	ldr	r2, [pc, #252]	; (8003f04 <HAL_DMA_IRQHandler+0xa54>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x984>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3d      	ldr	r2, [pc, #244]	; (8003f08 <HAL_DMA_IRQHandler+0xa58>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x984>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a3c      	ldr	r2, [pc, #240]	; (8003f0c <HAL_DMA_IRQHandler+0xa5c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x984>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a3a      	ldr	r2, [pc, #232]	; (8003f10 <HAL_DMA_IRQHandler+0xa60>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x984>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a39      	ldr	r2, [pc, #228]	; (8003f14 <HAL_DMA_IRQHandler+0xa64>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_DMA_IRQHandler+0x988>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_DMA_IRQHandler+0x98a>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 823f 	beq.w	80042be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2204      	movs	r2, #4
 8003e52:	409a      	lsls	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80cd 	beq.w	8003ff8 <HAL_DMA_IRQHandler+0xb48>
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80c7 	beq.w	8003ff8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2204      	movs	r2, #4
 8003e74:	409a      	lsls	r2, r3
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d049      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8210 	beq.w	80042b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea0:	e20a      	b.n	80042b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8206 	beq.w	80042b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eb4:	e200      	b.n	80042b8 <HAL_DMA_IRQHandler+0xe08>
 8003eb6:	bf00      	nop
 8003eb8:	40020010 	.word	0x40020010
 8003ebc:	40020028 	.word	0x40020028
 8003ec0:	40020040 	.word	0x40020040
 8003ec4:	40020058 	.word	0x40020058
 8003ec8:	40020070 	.word	0x40020070
 8003ecc:	40020088 	.word	0x40020088
 8003ed0:	400200a0 	.word	0x400200a0
 8003ed4:	400200b8 	.word	0x400200b8
 8003ed8:	40020410 	.word	0x40020410
 8003edc:	40020428 	.word	0x40020428
 8003ee0:	40020440 	.word	0x40020440
 8003ee4:	40020458 	.word	0x40020458
 8003ee8:	40020470 	.word	0x40020470
 8003eec:	40020488 	.word	0x40020488
 8003ef0:	400204a0 	.word	0x400204a0
 8003ef4:	400204b8 	.word	0x400204b8
 8003ef8:	58025408 	.word	0x58025408
 8003efc:	5802541c 	.word	0x5802541c
 8003f00:	58025430 	.word	0x58025430
 8003f04:	58025444 	.word	0x58025444
 8003f08:	58025458 	.word	0x58025458
 8003f0c:	5802546c 	.word	0x5802546c
 8003f10:	58025480 	.word	0x58025480
 8003f14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d160      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7f      	ldr	r2, [pc, #508]	; (8004124 <HAL_DMA_IRQHandler+0xc74>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d04a      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a7d      	ldr	r2, [pc, #500]	; (8004128 <HAL_DMA_IRQHandler+0xc78>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d045      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7c      	ldr	r2, [pc, #496]	; (800412c <HAL_DMA_IRQHandler+0xc7c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d040      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a7a      	ldr	r2, [pc, #488]	; (8004130 <HAL_DMA_IRQHandler+0xc80>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d03b      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a79      	ldr	r2, [pc, #484]	; (8004134 <HAL_DMA_IRQHandler+0xc84>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d036      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a77      	ldr	r2, [pc, #476]	; (8004138 <HAL_DMA_IRQHandler+0xc88>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d031      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a76      	ldr	r2, [pc, #472]	; (800413c <HAL_DMA_IRQHandler+0xc8c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d02c      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a74      	ldr	r2, [pc, #464]	; (8004140 <HAL_DMA_IRQHandler+0xc90>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d027      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a73      	ldr	r2, [pc, #460]	; (8004144 <HAL_DMA_IRQHandler+0xc94>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d022      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a71      	ldr	r2, [pc, #452]	; (8004148 <HAL_DMA_IRQHandler+0xc98>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01d      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a70      	ldr	r2, [pc, #448]	; (800414c <HAL_DMA_IRQHandler+0xc9c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d018      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a6e      	ldr	r2, [pc, #440]	; (8004150 <HAL_DMA_IRQHandler+0xca0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a6d      	ldr	r2, [pc, #436]	; (8004154 <HAL_DMA_IRQHandler+0xca4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6b      	ldr	r2, [pc, #428]	; (8004158 <HAL_DMA_IRQHandler+0xca8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d009      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6a      	ldr	r2, [pc, #424]	; (800415c <HAL_DMA_IRQHandler+0xcac>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xb12>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a68      	ldr	r2, [pc, #416]	; (8004160 <HAL_DMA_IRQHandler+0xcb0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <HAL_DMA_IRQHandler+0xb24>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0208 	bic.w	r2, r2, #8
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e007      	b.n	8003fe4 <HAL_DMA_IRQHandler+0xb34>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0204 	bic.w	r2, r2, #4
 8003fe2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8165 	beq.w	80042b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ff6:	e15f      	b.n	80042b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	2202      	movs	r2, #2
 8004002:	409a      	lsls	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80c5 	beq.w	8004198 <HAL_DMA_IRQHandler+0xce8>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80bf 	beq.w	8004198 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2202      	movs	r2, #2
 8004024:	409a      	lsls	r2, r3
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d018      	beq.n	8004066 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 813a 	beq.w	80042bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004050:	e134      	b.n	80042bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8130 	beq.w	80042bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004064:	e12a      	b.n	80042bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	f040 8089 	bne.w	8004184 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2b      	ldr	r2, [pc, #172]	; (8004124 <HAL_DMA_IRQHandler+0xc74>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d04a      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a29      	ldr	r2, [pc, #164]	; (8004128 <HAL_DMA_IRQHandler+0xc78>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d045      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a28      	ldr	r2, [pc, #160]	; (800412c <HAL_DMA_IRQHandler+0xc7c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d040      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a26      	ldr	r2, [pc, #152]	; (8004130 <HAL_DMA_IRQHandler+0xc80>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d03b      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a25      	ldr	r2, [pc, #148]	; (8004134 <HAL_DMA_IRQHandler+0xc84>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d036      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <HAL_DMA_IRQHandler+0xc88>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d031      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a22      	ldr	r2, [pc, #136]	; (800413c <HAL_DMA_IRQHandler+0xc8c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d02c      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a20      	ldr	r2, [pc, #128]	; (8004140 <HAL_DMA_IRQHandler+0xc90>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d027      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <HAL_DMA_IRQHandler+0xc94>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d022      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1d      	ldr	r2, [pc, #116]	; (8004148 <HAL_DMA_IRQHandler+0xc98>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d01d      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1c      	ldr	r2, [pc, #112]	; (800414c <HAL_DMA_IRQHandler+0xc9c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d018      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1a      	ldr	r2, [pc, #104]	; (8004150 <HAL_DMA_IRQHandler+0xca0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_DMA_IRQHandler+0xca4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_DMA_IRQHandler+0xca8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_DMA_IRQHandler+0xcac>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_DMA_IRQHandler+0xc62>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a14      	ldr	r2, [pc, #80]	; (8004160 <HAL_DMA_IRQHandler+0xcb0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d128      	bne.n	8004164 <HAL_DMA_IRQHandler+0xcb4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0214 	bic.w	r2, r2, #20
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e027      	b.n	8004174 <HAL_DMA_IRQHandler+0xcc4>
 8004124:	40020010 	.word	0x40020010
 8004128:	40020028 	.word	0x40020028
 800412c:	40020040 	.word	0x40020040
 8004130:	40020058 	.word	0x40020058
 8004134:	40020070 	.word	0x40020070
 8004138:	40020088 	.word	0x40020088
 800413c:	400200a0 	.word	0x400200a0
 8004140:	400200b8 	.word	0x400200b8
 8004144:	40020410 	.word	0x40020410
 8004148:	40020428 	.word	0x40020428
 800414c:	40020440 	.word	0x40020440
 8004150:	40020458 	.word	0x40020458
 8004154:	40020470 	.word	0x40020470
 8004158:	40020488 	.word	0x40020488
 800415c:	400204a0 	.word	0x400204a0
 8004160:	400204b8 	.word	0x400204b8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 020a 	bic.w	r2, r2, #10
 8004172:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8097 	beq.w	80042bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004196:	e091      	b.n	80042bc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2208      	movs	r2, #8
 80041a2:	409a      	lsls	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8088 	beq.w	80042be <HAL_DMA_IRQHandler+0xe0e>
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8082 	beq.w	80042be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a41      	ldr	r2, [pc, #260]	; (80042c4 <HAL_DMA_IRQHandler+0xe14>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04a      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a3f      	ldr	r2, [pc, #252]	; (80042c8 <HAL_DMA_IRQHandler+0xe18>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d045      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a3e      	ldr	r2, [pc, #248]	; (80042cc <HAL_DMA_IRQHandler+0xe1c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d040      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3c      	ldr	r2, [pc, #240]	; (80042d0 <HAL_DMA_IRQHandler+0xe20>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d03b      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a3b      	ldr	r2, [pc, #236]	; (80042d4 <HAL_DMA_IRQHandler+0xe24>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d036      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a39      	ldr	r2, [pc, #228]	; (80042d8 <HAL_DMA_IRQHandler+0xe28>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d031      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a38      	ldr	r2, [pc, #224]	; (80042dc <HAL_DMA_IRQHandler+0xe2c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d02c      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a36      	ldr	r2, [pc, #216]	; (80042e0 <HAL_DMA_IRQHandler+0xe30>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d027      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a35      	ldr	r2, [pc, #212]	; (80042e4 <HAL_DMA_IRQHandler+0xe34>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a33      	ldr	r2, [pc, #204]	; (80042e8 <HAL_DMA_IRQHandler+0xe38>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01d      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a32      	ldr	r2, [pc, #200]	; (80042ec <HAL_DMA_IRQHandler+0xe3c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a30      	ldr	r2, [pc, #192]	; (80042f0 <HAL_DMA_IRQHandler+0xe40>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2f      	ldr	r2, [pc, #188]	; (80042f4 <HAL_DMA_IRQHandler+0xe44>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <HAL_DMA_IRQHandler+0xe48>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2c      	ldr	r2, [pc, #176]	; (80042fc <HAL_DMA_IRQHandler+0xe4c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_DMA_IRQHandler+0xdaa>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <HAL_DMA_IRQHandler+0xe50>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d108      	bne.n	800426c <HAL_DMA_IRQHandler+0xdbc>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 021c 	bic.w	r2, r2, #28
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e007      	b.n	800427c <HAL_DMA_IRQHandler+0xdcc>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 020e 	bic.w	r2, r2, #14
 800427a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2201      	movs	r2, #1
 8004286:	409a      	lsls	r2, r3
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4798      	blx	r3
 80042b2:	e004      	b.n	80042be <HAL_DMA_IRQHandler+0xe0e>
          return;
 80042b4:	bf00      	nop
 80042b6:	e002      	b.n	80042be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042b8:	bf00      	nop
 80042ba:	e000      	b.n	80042be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80042be:	3728      	adds	r7, #40	; 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40020010 	.word	0x40020010
 80042c8:	40020028 	.word	0x40020028
 80042cc:	40020040 	.word	0x40020040
 80042d0:	40020058 	.word	0x40020058
 80042d4:	40020070 	.word	0x40020070
 80042d8:	40020088 	.word	0x40020088
 80042dc:	400200a0 	.word	0x400200a0
 80042e0:	400200b8 	.word	0x400200b8
 80042e4:	40020410 	.word	0x40020410
 80042e8:	40020428 	.word	0x40020428
 80042ec:	40020440 	.word	0x40020440
 80042f0:	40020458 	.word	0x40020458
 80042f4:	40020470 	.word	0x40020470
 80042f8:	40020488 	.word	0x40020488
 80042fc:	400204a0 	.word	0x400204a0
 8004300:	400204b8 	.word	0x400204b8

08004304 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004312:	b2db      	uxtb	r3, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a42      	ldr	r2, [pc, #264]	; (8004438 <DMA_CalcBaseAndBitshift+0x118>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d04a      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a41      	ldr	r2, [pc, #260]	; (800443c <DMA_CalcBaseAndBitshift+0x11c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d045      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a3f      	ldr	r2, [pc, #252]	; (8004440 <DMA_CalcBaseAndBitshift+0x120>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d040      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a3e      	ldr	r2, [pc, #248]	; (8004444 <DMA_CalcBaseAndBitshift+0x124>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d03b      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a3c      	ldr	r2, [pc, #240]	; (8004448 <DMA_CalcBaseAndBitshift+0x128>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d036      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3b      	ldr	r2, [pc, #236]	; (800444c <DMA_CalcBaseAndBitshift+0x12c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d031      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a39      	ldr	r2, [pc, #228]	; (8004450 <DMA_CalcBaseAndBitshift+0x130>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02c      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a38      	ldr	r2, [pc, #224]	; (8004454 <DMA_CalcBaseAndBitshift+0x134>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d027      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a36      	ldr	r2, [pc, #216]	; (8004458 <DMA_CalcBaseAndBitshift+0x138>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a35      	ldr	r2, [pc, #212]	; (800445c <DMA_CalcBaseAndBitshift+0x13c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a33      	ldr	r2, [pc, #204]	; (8004460 <DMA_CalcBaseAndBitshift+0x140>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a32      	ldr	r2, [pc, #200]	; (8004464 <DMA_CalcBaseAndBitshift+0x144>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a30      	ldr	r2, [pc, #192]	; (8004468 <DMA_CalcBaseAndBitshift+0x148>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2f      	ldr	r2, [pc, #188]	; (800446c <DMA_CalcBaseAndBitshift+0x14c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a2d      	ldr	r2, [pc, #180]	; (8004470 <DMA_CalcBaseAndBitshift+0x150>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <DMA_CalcBaseAndBitshift+0xa8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <DMA_CalcBaseAndBitshift+0x154>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <DMA_CalcBaseAndBitshift+0xac>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <DMA_CalcBaseAndBitshift+0xae>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d024      	beq.n	800441c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3b10      	subs	r3, #16
 80043da:	4a27      	ldr	r2, [pc, #156]	; (8004478 <DMA_CalcBaseAndBitshift+0x158>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	4a24      	ldr	r2, [pc, #144]	; (800447c <DMA_CalcBaseAndBitshift+0x15c>)
 80043ec:	5cd3      	ldrb	r3, [r2, r3]
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d908      	bls.n	800440c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	4b1f      	ldr	r3, [pc, #124]	; (8004480 <DMA_CalcBaseAndBitshift+0x160>)
 8004402:	4013      	ands	r3, r2
 8004404:	1d1a      	adds	r2, r3, #4
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	659a      	str	r2, [r3, #88]	; 0x58
 800440a:	e00d      	b.n	8004428 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <DMA_CalcBaseAndBitshift+0x160>)
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6593      	str	r3, [r2, #88]	; 0x58
 800441a:	e005      	b.n	8004428 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40020010 	.word	0x40020010
 800443c:	40020028 	.word	0x40020028
 8004440:	40020040 	.word	0x40020040
 8004444:	40020058 	.word	0x40020058
 8004448:	40020070 	.word	0x40020070
 800444c:	40020088 	.word	0x40020088
 8004450:	400200a0 	.word	0x400200a0
 8004454:	400200b8 	.word	0x400200b8
 8004458:	40020410 	.word	0x40020410
 800445c:	40020428 	.word	0x40020428
 8004460:	40020440 	.word	0x40020440
 8004464:	40020458 	.word	0x40020458
 8004468:	40020470 	.word	0x40020470
 800446c:	40020488 	.word	0x40020488
 8004470:	400204a0 	.word	0x400204a0
 8004474:	400204b8 	.word	0x400204b8
 8004478:	aaaaaaab 	.word	0xaaaaaaab
 800447c:	08012c60 	.word	0x08012c60
 8004480:	fffffc00 	.word	0xfffffc00

08004484 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d120      	bne.n	80044da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	2b03      	cmp	r3, #3
 800449e:	d858      	bhi.n	8004552 <DMA_CheckFifoParam+0xce>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <DMA_CheckFifoParam+0x24>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044cb 	.word	0x080044cb
 80044b0:	080044b9 	.word	0x080044b9
 80044b4:	08004553 	.word	0x08004553
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d048      	beq.n	8004556 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044c8:	e045      	b.n	8004556 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044d2:	d142      	bne.n	800455a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044d8:	e03f      	b.n	800455a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e2:	d123      	bne.n	800452c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d838      	bhi.n	800455e <DMA_CheckFifoParam+0xda>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <DMA_CheckFifoParam+0x70>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004505 	.word	0x08004505
 80044f8:	0800450b 	.word	0x0800450b
 80044fc:	08004505 	.word	0x08004505
 8004500:	0800451d 	.word	0x0800451d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
        break;
 8004508:	e030      	b.n	800456c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d025      	beq.n	8004562 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800451a:	e022      	b.n	8004562 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004524:	d11f      	bne.n	8004566 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800452a:	e01c      	b.n	8004566 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	2b02      	cmp	r3, #2
 8004532:	d902      	bls.n	800453a <DMA_CheckFifoParam+0xb6>
 8004534:	2b03      	cmp	r3, #3
 8004536:	d003      	beq.n	8004540 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004538:	e018      	b.n	800456c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
        break;
 800453e:	e015      	b.n	800456c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00e      	beq.n	800456a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
    break;
 8004550:	e00b      	b.n	800456a <DMA_CheckFifoParam+0xe6>
        break;
 8004552:	bf00      	nop
 8004554:	e00a      	b.n	800456c <DMA_CheckFifoParam+0xe8>
        break;
 8004556:	bf00      	nop
 8004558:	e008      	b.n	800456c <DMA_CheckFifoParam+0xe8>
        break;
 800455a:	bf00      	nop
 800455c:	e006      	b.n	800456c <DMA_CheckFifoParam+0xe8>
        break;
 800455e:	bf00      	nop
 8004560:	e004      	b.n	800456c <DMA_CheckFifoParam+0xe8>
        break;
 8004562:	bf00      	nop
 8004564:	e002      	b.n	800456c <DMA_CheckFifoParam+0xe8>
        break;
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <DMA_CheckFifoParam+0xe8>
    break;
 800456a:	bf00      	nop
    }
  }

  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop

0800457c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a38      	ldr	r2, [pc, #224]	; (8004670 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a36      	ldr	r2, [pc, #216]	; (8004674 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01d      	beq.n	80045da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a35      	ldr	r2, [pc, #212]	; (8004678 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a33      	ldr	r2, [pc, #204]	; (800467c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a32      	ldr	r2, [pc, #200]	; (8004680 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a30      	ldr	r2, [pc, #192]	; (8004684 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2d      	ldr	r2, [pc, #180]	; (800468c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d101      	bne.n	80045de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01a      	beq.n	800461a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	3b08      	subs	r3, #8
 80045ec:	4a28      	ldr	r2, [pc, #160]	; (8004690 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4b26      	ldr	r3, [pc, #152]	; (8004694 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	461a      	mov	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a24      	ldr	r2, [pc, #144]	; (8004698 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004608:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004618:	e024      	b.n	8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	3b10      	subs	r3, #16
 8004622:	4a1e      	ldr	r2, [pc, #120]	; (800469c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4a1c      	ldr	r2, [pc, #112]	; (80046a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d806      	bhi.n	8004642 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4a1b      	ldr	r2, [pc, #108]	; (80046a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d902      	bls.n	8004642 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3308      	adds	r3, #8
 8004640:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4b18      	ldr	r3, [pc, #96]	; (80046a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	461a      	mov	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a16      	ldr	r2, [pc, #88]	; (80046ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004654:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	58025408 	.word	0x58025408
 8004674:	5802541c 	.word	0x5802541c
 8004678:	58025430 	.word	0x58025430
 800467c:	58025444 	.word	0x58025444
 8004680:	58025458 	.word	0x58025458
 8004684:	5802546c 	.word	0x5802546c
 8004688:	58025480 	.word	0x58025480
 800468c:	58025494 	.word	0x58025494
 8004690:	cccccccd 	.word	0xcccccccd
 8004694:	16009600 	.word	0x16009600
 8004698:	58025880 	.word	0x58025880
 800469c:	aaaaaaab 	.word	0xaaaaaaab
 80046a0:	400204b8 	.word	0x400204b8
 80046a4:	4002040f 	.word	0x4002040f
 80046a8:	10008200 	.word	0x10008200
 80046ac:	40020880 	.word	0x40020880

080046b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d04a      	beq.n	800475c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d847      	bhi.n	800475c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a25      	ldr	r2, [pc, #148]	; (8004768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d022      	beq.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a24      	ldr	r2, [pc, #144]	; (800476c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d01d      	beq.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a22      	ldr	r2, [pc, #136]	; (8004770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d018      	beq.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a21      	ldr	r2, [pc, #132]	; (8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00e      	beq.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1e      	ldr	r2, [pc, #120]	; (800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d009      	beq.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1b      	ldr	r2, [pc, #108]	; (8004784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004720:	2300      	movs	r3, #0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4b17      	ldr	r3, [pc, #92]	; (8004788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	461a      	mov	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a15      	ldr	r2, [pc, #84]	; (800478c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004738:	671a      	str	r2, [r3, #112]	; 0x70
 800473a:	e009      	b.n	8004750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4b14      	ldr	r3, [pc, #80]	; (8004790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	461a      	mov	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a11      	ldr	r2, [pc, #68]	; (8004794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800474e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	2201      	movs	r2, #1
 8004756:	409a      	lsls	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	58025408 	.word	0x58025408
 800476c:	5802541c 	.word	0x5802541c
 8004770:	58025430 	.word	0x58025430
 8004774:	58025444 	.word	0x58025444
 8004778:	58025458 	.word	0x58025458
 800477c:	5802546c 	.word	0x5802546c
 8004780:	58025480 	.word	0x58025480
 8004784:	58025494 	.word	0x58025494
 8004788:	1600963f 	.word	0x1600963f
 800478c:	58025940 	.word	0x58025940
 8004790:	1000823f 	.word	0x1000823f
 8004794:	40020940 	.word	0x40020940

08004798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	; 0x24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047a6:	4b89      	ldr	r3, [pc, #548]	; (80049cc <HAL_GPIO_Init+0x234>)
 80047a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047aa:	e194      	b.n	8004ad6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	2101      	movs	r1, #1
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8186 	beq.w	8004ad0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d00b      	beq.n	80047e4 <HAL_GPIO_Init+0x4c>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d007      	beq.n	80047e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047d8:	2b11      	cmp	r3, #17
 80047da:	d003      	beq.n	80047e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b12      	cmp	r3, #18
 80047e2:	d130      	bne.n	8004846 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	2203      	movs	r2, #3
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800481a:	2201      	movs	r2, #1
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 0201 	and.w	r2, r3, #1
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2203      	movs	r2, #3
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0xee>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b12      	cmp	r3, #18
 8004884:	d123      	bne.n	80048ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	08da      	lsrs	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3208      	adds	r2, #8
 800488e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	220f      	movs	r2, #15
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43db      	mvns	r3, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4013      	ands	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	08da      	lsrs	r2, r3, #3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3208      	adds	r2, #8
 80048c8:	69b9      	ldr	r1, [r7, #24]
 80048ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	2203      	movs	r2, #3
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0203 	and.w	r2, r3, #3
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 80e0 	beq.w	8004ad0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004910:	4b2f      	ldr	r3, [pc, #188]	; (80049d0 <HAL_GPIO_Init+0x238>)
 8004912:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004916:	4a2e      	ldr	r2, [pc, #184]	; (80049d0 <HAL_GPIO_Init+0x238>)
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004920:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <HAL_GPIO_Init+0x238>)
 8004922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800492e:	4a29      	ldr	r2, [pc, #164]	; (80049d4 <HAL_GPIO_Init+0x23c>)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	089b      	lsrs	r3, r3, #2
 8004934:	3302      	adds	r3, #2
 8004936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f003 0303 	and.w	r3, r3, #3
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	220f      	movs	r2, #15
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <HAL_GPIO_Init+0x240>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d052      	beq.n	8004a00 <HAL_GPIO_Init+0x268>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <HAL_GPIO_Init+0x244>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d031      	beq.n	80049c6 <HAL_GPIO_Init+0x22e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a1e      	ldr	r2, [pc, #120]	; (80049e0 <HAL_GPIO_Init+0x248>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d02b      	beq.n	80049c2 <HAL_GPIO_Init+0x22a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <HAL_GPIO_Init+0x24c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d025      	beq.n	80049be <HAL_GPIO_Init+0x226>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <HAL_GPIO_Init+0x250>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01f      	beq.n	80049ba <HAL_GPIO_Init+0x222>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <HAL_GPIO_Init+0x254>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d019      	beq.n	80049b6 <HAL_GPIO_Init+0x21e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1a      	ldr	r2, [pc, #104]	; (80049f0 <HAL_GPIO_Init+0x258>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d013      	beq.n	80049b2 <HAL_GPIO_Init+0x21a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a19      	ldr	r2, [pc, #100]	; (80049f4 <HAL_GPIO_Init+0x25c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00d      	beq.n	80049ae <HAL_GPIO_Init+0x216>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <HAL_GPIO_Init+0x260>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d007      	beq.n	80049aa <HAL_GPIO_Init+0x212>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a17      	ldr	r2, [pc, #92]	; (80049fc <HAL_GPIO_Init+0x264>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d101      	bne.n	80049a6 <HAL_GPIO_Init+0x20e>
 80049a2:	2309      	movs	r3, #9
 80049a4:	e02d      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049a6:	230a      	movs	r3, #10
 80049a8:	e02b      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049aa:	2308      	movs	r3, #8
 80049ac:	e029      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049ae:	2307      	movs	r3, #7
 80049b0:	e027      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049b2:	2306      	movs	r3, #6
 80049b4:	e025      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049b6:	2305      	movs	r3, #5
 80049b8:	e023      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049ba:	2304      	movs	r3, #4
 80049bc:	e021      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049be:	2303      	movs	r3, #3
 80049c0:	e01f      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e01d      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e01b      	b.n	8004a02 <HAL_GPIO_Init+0x26a>
 80049ca:	bf00      	nop
 80049cc:	58000080 	.word	0x58000080
 80049d0:	58024400 	.word	0x58024400
 80049d4:	58000400 	.word	0x58000400
 80049d8:	58020000 	.word	0x58020000
 80049dc:	58020400 	.word	0x58020400
 80049e0:	58020800 	.word	0x58020800
 80049e4:	58020c00 	.word	0x58020c00
 80049e8:	58021000 	.word	0x58021000
 80049ec:	58021400 	.word	0x58021400
 80049f0:	58021800 	.word	0x58021800
 80049f4:	58021c00 	.word	0x58021c00
 80049f8:	58022000 	.word	0x58022000
 80049fc:	58022400 	.word	0x58022400
 8004a00:	2300      	movs	r3, #0
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	f002 0203 	and.w	r2, r2, #3
 8004a08:	0092      	lsls	r2, r2, #2
 8004a0a:	4093      	lsls	r3, r2
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a12:	4938      	ldr	r1, [pc, #224]	; (8004af4 <HAL_GPIO_Init+0x35c>)
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	089b      	lsrs	r3, r3, #2
 8004a18:	3302      	adds	r3, #2
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4013      	ands	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f47f ae63 	bne.w	80047ac <HAL_GPIO_Init+0x14>
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	3724      	adds	r7, #36	; 0x24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	58000400 	.word	0x58000400

08004af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
 8004b04:	4613      	mov	r3, r2
 8004b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b08:	787b      	ldrb	r3, [r7, #1]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b0e:	887a      	ldrh	r2, [r7, #2]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b14:	e003      	b.n	8004b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	041a      	lsls	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	619a      	str	r2, [r3, #24]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004b34:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <HAL_HSEM_FastTake+0x2c>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3320      	adds	r3, #32
 8004b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3e:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <HAL_HSEM_FastTake+0x30>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e000      	b.n	8004b4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	58026400 	.word	0x58026400
 8004b5c:	80000300 	.word	0x80000300

08004b60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004b6a:	4906      	ldr	r1, [pc, #24]	; (8004b84 <HAL_HSEM_Release+0x24>)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	58026400 	.word	0x58026400

08004b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e07f      	b.n	8004c9a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fc f9e6 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2224      	movs	r2, #36	; 0x24
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004be8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d107      	bne.n	8004c02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	e006      	b.n	8004c10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d104      	bne.n	8004c22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <HAL_I2C_Init+0x11c>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	ea42 0103 	orr.w	r1, r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	021a      	lsls	r2, r3, #8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1a      	ldr	r2, [r3, #32]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	02008000 	.word	0x02008000

08004ca8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d010      	beq.n	8004d22 <HAL_I2C_ER_IRQHandler+0x46>
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	09db      	lsrs	r3, r3, #7
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d10:	f043 0201 	orr.w	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d20:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	0a9b      	lsrs	r3, r3, #10
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d010      	beq.n	8004d50 <HAL_I2C_ER_IRQHandler+0x74>
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	09db      	lsrs	r3, r3, #7
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f043 0208 	orr.w	r2, r3, #8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	0a5b      	lsrs	r3, r3, #9
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d010      	beq.n	8004d7e <HAL_I2C_ER_IRQHandler+0xa2>
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	09db      	lsrs	r3, r3, #7
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6c:	f043 0202 	orr.w	r2, r3, #2
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 030b 	and.w	r3, r3, #11
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fc77 	bl	8005684 <I2C_ITError>
  }
}
 8004d96:	bf00      	nop
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	70fb      	strb	r3, [r7, #3]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b086      	sub	sp, #24
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	60f8      	str	r0, [r7, #12]
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <I2C_Slave_ISR_IT+0x24>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e0ec      	b.n	800501c <I2C_Slave_ISR_IT+0x1fe>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <I2C_Slave_ISR_IT+0x4c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004e62:	6939      	ldr	r1, [r7, #16]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 f9bf 	bl	80051e8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d04d      	beq.n	8004f12 <I2C_Slave_ISR_IT+0xf4>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d047      	beq.n	8004f12 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d128      	bne.n	8004ede <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b28      	cmp	r3, #40	; 0x28
 8004e96:	d108      	bne.n	8004eaa <I2C_Slave_ISR_IT+0x8c>
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e9e:	d104      	bne.n	8004eaa <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ea0:	6939      	ldr	r1, [r7, #16]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fb98 	bl	80055d8 <I2C_ITListenCplt>
 8004ea8:	e032      	b.n	8004f10 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b29      	cmp	r3, #41	; 0x29
 8004eb4:	d10e      	bne.n	8004ed4 <I2C_Slave_ISR_IT+0xb6>
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ebc:	d00a      	beq.n	8004ed4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2210      	movs	r2, #16
 8004ec4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fcd3 	bl	8005872 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f92d 	bl	800512c <I2C_ITSlaveSeqCplt>
 8004ed2:	e01d      	b.n	8004f10 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004edc:	e096      	b.n	800500c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2210      	movs	r2, #16
 8004ee4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eea:	f043 0204 	orr.w	r2, r3, #4
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <I2C_Slave_ISR_IT+0xe4>
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004efe:	f040 8085 	bne.w	800500c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	4619      	mov	r1, r3
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 fbbb 	bl	8005684 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004f0e:	e07d      	b.n	800500c <I2C_Slave_ISR_IT+0x1ee>
 8004f10:	e07c      	b.n	800500c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d030      	beq.n	8004f80 <I2C_Slave_ISR_IT+0x162>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	089b      	lsrs	r3, r3, #2
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d02a      	beq.n	8004f80 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d018      	beq.n	8004f66 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d14f      	bne.n	8005010 <I2C_Slave_ISR_IT+0x1f2>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f76:	d04b      	beq.n	8005010 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f8d7 	bl	800512c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004f7e:	e047      	b.n	8005010 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	08db      	lsrs	r3, r3, #3
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	08db      	lsrs	r3, r3, #3
 8004f90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004f98:	6939      	ldr	r1, [r7, #16]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f842 	bl	8005024 <I2C_ITAddrCplt>
 8004fa0:	e037      	b.n	8005012 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d031      	beq.n	8005012 <I2C_Slave_ISR_IT+0x1f4>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d02b      	beq.n	8005012 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d018      	beq.n	8004ff6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	781a      	ldrb	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ff4:	e00d      	b.n	8005012 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ffc:	d002      	beq.n	8005004 <I2C_Slave_ISR_IT+0x1e6>
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f891 	bl	800512c <I2C_ITSlaveSeqCplt>
 800500a:	e002      	b.n	8005012 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800500c:	bf00      	nop
 800500e:	e000      	b.n	8005012 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005010:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800503a:	2b28      	cmp	r3, #40	; 0x28
 800503c:	d16a      	bne.n	8005114 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	b29b      	uxth	r3, r3
 8005058:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800505c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800506a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005078:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d138      	bne.n	80050f4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8005082:	897b      	ldrh	r3, [r7, #10]
 8005084:	09db      	lsrs	r3, r3, #7
 8005086:	b29a      	uxth	r2, r3
 8005088:	89bb      	ldrh	r3, [r7, #12]
 800508a:	4053      	eors	r3, r2
 800508c:	b29b      	uxth	r3, r3
 800508e:	f003 0306 	and.w	r3, r3, #6
 8005092:	2b00      	cmp	r3, #0
 8005094:	d11c      	bne.n	80050d0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005096:	897b      	ldrh	r3, [r7, #10]
 8005098:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d13b      	bne.n	8005124 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2208      	movs	r2, #8
 80050b8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050c2:	89ba      	ldrh	r2, [r7, #12]
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fe7c 	bl	8004dc6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80050ce:	e029      	b.n	8005124 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80050d0:	893b      	ldrh	r3, [r7, #8]
 80050d2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80050d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fc0c 	bl	80058f6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80050e6:	89ba      	ldrh	r2, [r7, #12]
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fe6a 	bl	8004dc6 <HAL_I2C_AddrCallback>
}
 80050f2:	e017      	b.n	8005124 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80050f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fbfc 	bl	80058f6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005106:	89ba      	ldrh	r2, [r7, #12]
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff fe5a 	bl	8004dc6 <HAL_I2C_AddrCallback>
}
 8005112:	e007      	b.n	8005124 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2208      	movs	r2, #8
 800511a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005124:	bf00      	nop
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	0b9b      	lsrs	r3, r3, #14
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e00d      	b.n	800517e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	0bdb      	lsrs	r3, r3, #15
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800517c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b29      	cmp	r3, #41	; 0x29
 8005188:	d112      	bne.n	80051b0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2228      	movs	r2, #40	; 0x28
 800518e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2221      	movs	r2, #33	; 0x21
 8005196:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005198:	2101      	movs	r1, #1
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fbab 	bl	80058f6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff fdf8 	bl	8004d9e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80051ae:	e017      	b.n	80051e0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b2a      	cmp	r3, #42	; 0x2a
 80051ba:	d111      	bne.n	80051e0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2228      	movs	r2, #40	; 0x28
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2222      	movs	r2, #34	; 0x22
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80051ca:	2102      	movs	r1, #2
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fb92 	bl	80058f6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fde9 	bl	8004db2 <HAL_I2C_SlaveRxCpltCallback>
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005204:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2220      	movs	r2, #32
 800520c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b21      	cmp	r3, #33	; 0x21
 8005212:	d002      	beq.n	800521a <I2C_ITSlaveCplt+0x32>
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b29      	cmp	r3, #41	; 0x29
 8005218:	d108      	bne.n	800522c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800521a:	f248 0101 	movw	r1, #32769	; 0x8001
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fb69 	bl	80058f6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2221      	movs	r2, #33	; 0x21
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
 800522a:	e00d      	b.n	8005248 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	2b22      	cmp	r3, #34	; 0x22
 8005230:	d002      	beq.n	8005238 <I2C_ITSlaveCplt+0x50>
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b2a      	cmp	r3, #42	; 0x2a
 8005236:	d107      	bne.n	8005248 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005238:	f248 0102 	movw	r1, #32770	; 0x8002
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fb5a 	bl	80058f6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2222      	movs	r2, #34	; 0x22
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005256:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6859      	ldr	r1, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b80      	ldr	r3, [pc, #512]	; (8005464 <I2C_ITSlaveCplt+0x27c>)
 8005264:	400b      	ands	r3, r1
 8005266:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fb02 	bl	8005872 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	0b9b      	lsrs	r3, r3, #14
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d07a      	beq.n	8005370 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005288:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8111 	beq.w	80054b6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a73      	ldr	r2, [pc, #460]	; (8005468 <I2C_ITSlaveCplt+0x280>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d059      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a71      	ldr	r2, [pc, #452]	; (800546c <I2C_ITSlaveCplt+0x284>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d053      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a6f      	ldr	r2, [pc, #444]	; (8005470 <I2C_ITSlaveCplt+0x288>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d04d      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a6d      	ldr	r2, [pc, #436]	; (8005474 <I2C_ITSlaveCplt+0x28c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d047      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a6b      	ldr	r2, [pc, #428]	; (8005478 <I2C_ITSlaveCplt+0x290>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d041      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a69      	ldr	r2, [pc, #420]	; (800547c <I2C_ITSlaveCplt+0x294>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d03b      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a67      	ldr	r2, [pc, #412]	; (8005480 <I2C_ITSlaveCplt+0x298>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d035      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a65      	ldr	r2, [pc, #404]	; (8005484 <I2C_ITSlaveCplt+0x29c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d02f      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a63      	ldr	r2, [pc, #396]	; (8005488 <I2C_ITSlaveCplt+0x2a0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d029      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a61      	ldr	r2, [pc, #388]	; (800548c <I2C_ITSlaveCplt+0x2a4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d023      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a5f      	ldr	r2, [pc, #380]	; (8005490 <I2C_ITSlaveCplt+0x2a8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d01d      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a5d      	ldr	r2, [pc, #372]	; (8005494 <I2C_ITSlaveCplt+0x2ac>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d017      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a5b      	ldr	r2, [pc, #364]	; (8005498 <I2C_ITSlaveCplt+0x2b0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d011      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a59      	ldr	r2, [pc, #356]	; (800549c <I2C_ITSlaveCplt+0x2b4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a57      	ldr	r2, [pc, #348]	; (80054a0 <I2C_ITSlaveCplt+0x2b8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d005      	beq.n	8005354 <I2C_ITSlaveCplt+0x16c>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a55      	ldr	r2, [pc, #340]	; (80054a4 <I2C_ITSlaveCplt+0x2bc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d105      	bne.n	8005360 <I2C_ITSlaveCplt+0x178>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	b29b      	uxth	r3, r3
 800535e:	e004      	b.n	800536a <I2C_ITSlaveCplt+0x182>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	b29b      	uxth	r3, r3
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	8553      	strh	r3, [r2, #42]	; 0x2a
 800536e:	e0a2      	b.n	80054b6 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	0bdb      	lsrs	r3, r3, #15
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 809c 	beq.w	80054b6 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800538c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 808f 	beq.w	80054b6 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a32      	ldr	r2, [pc, #200]	; (8005468 <I2C_ITSlaveCplt+0x280>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d059      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a30      	ldr	r2, [pc, #192]	; (800546c <I2C_ITSlaveCplt+0x284>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d053      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2e      	ldr	r2, [pc, #184]	; (8005470 <I2C_ITSlaveCplt+0x288>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d04d      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <I2C_ITSlaveCplt+0x28c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d047      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a2a      	ldr	r2, [pc, #168]	; (8005478 <I2C_ITSlaveCplt+0x290>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d041      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a28      	ldr	r2, [pc, #160]	; (800547c <I2C_ITSlaveCplt+0x294>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d03b      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a26      	ldr	r2, [pc, #152]	; (8005480 <I2C_ITSlaveCplt+0x298>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d035      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a24      	ldr	r2, [pc, #144]	; (8005484 <I2C_ITSlaveCplt+0x29c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d02f      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a22      	ldr	r2, [pc, #136]	; (8005488 <I2C_ITSlaveCplt+0x2a0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d029      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a20      	ldr	r2, [pc, #128]	; (800548c <I2C_ITSlaveCplt+0x2a4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d023      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <I2C_ITSlaveCplt+0x2a8>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d01d      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <I2C_ITSlaveCplt+0x2ac>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d017      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1a      	ldr	r2, [pc, #104]	; (8005498 <I2C_ITSlaveCplt+0x2b0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d011      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a18      	ldr	r2, [pc, #96]	; (800549c <I2C_ITSlaveCplt+0x2b4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00b      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a16      	ldr	r2, [pc, #88]	; (80054a0 <I2C_ITSlaveCplt+0x2b8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d005      	beq.n	8005458 <I2C_ITSlaveCplt+0x270>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a14      	ldr	r2, [pc, #80]	; (80054a4 <I2C_ITSlaveCplt+0x2bc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d127      	bne.n	80054a8 <I2C_ITSlaveCplt+0x2c0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	b29b      	uxth	r3, r3
 8005462:	e026      	b.n	80054b2 <I2C_ITSlaveCplt+0x2ca>
 8005464:	fe00e800 	.word	0xfe00e800
 8005468:	40020010 	.word	0x40020010
 800546c:	40020028 	.word	0x40020028
 8005470:	40020040 	.word	0x40020040
 8005474:	40020058 	.word	0x40020058
 8005478:	40020070 	.word	0x40020070
 800547c:	40020088 	.word	0x40020088
 8005480:	400200a0 	.word	0x400200a0
 8005484:	400200b8 	.word	0x400200b8
 8005488:	40020410 	.word	0x40020410
 800548c:	40020428 	.word	0x40020428
 8005490:	40020440 	.word	0x40020440
 8005494:	40020458 	.word	0x40020458
 8005498:	40020470 	.word	0x40020470
 800549c:	40020488 	.word	0x40020488
 80054a0:	400204a0 	.word	0x400204a0
 80054a4:	400204b8 	.word	0x400204b8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	089b      	lsrs	r3, r3, #2
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d020      	beq.n	8005504 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0304 	bic.w	r3, r3, #4
 80054c8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00c      	beq.n	8005504 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005512:	f043 0204 	orr.w	r2, r3, #4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552c:	2b00      	cmp	r3, #0
 800552e:	d010      	beq.n	8005552 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f8a4 	bl	8005684 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b28      	cmp	r3, #40	; 0x28
 8005546:	d141      	bne.n	80055cc <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f844 	bl	80055d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005550:	e03c      	b.n	80055cc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800555a:	d014      	beq.n	8005586 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fde5 	bl	800512c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1b      	ldr	r2, [pc, #108]	; (80055d4 <I2C_ITSlaveCplt+0x3ec>)
 8005566:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff fc2f 	bl	8004de2 <HAL_I2C_ListenCpltCallback>
}
 8005584:	e022      	b.n	80055cc <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b22      	cmp	r3, #34	; 0x22
 8005590:	d10e      	bne.n	80055b0 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff fc02 	bl	8004db2 <HAL_I2C_SlaveRxCpltCallback>
}
 80055ae:	e00d      	b.n	80055cc <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff fbe9 	bl	8004d9e <HAL_I2C_SlaveTxCpltCallback>
}
 80055cc:	bf00      	nop
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	ffff0000 	.word	0xffff0000

080055d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a26      	ldr	r2, [pc, #152]	; (8005680 <I2C_ITListenCplt+0xa8>)
 80055e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	089b      	lsrs	r3, r3, #2
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d022      	beq.n	8005656 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562c:	2b00      	cmp	r3, #0
 800562e:	d012      	beq.n	8005656 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	f043 0204 	orr.w	r2, r3, #4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005656:	f248 0103 	movw	r1, #32771	; 0x8003
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f94b 	bl	80058f6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2210      	movs	r2, #16
 8005666:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff fbb6 	bl	8004de2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	ffff0000 	.word	0xffff0000

08005684 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a5d      	ldr	r2, [pc, #372]	; (8005818 <I2C_ITError+0x194>)
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b28      	cmp	r3, #40	; 0x28
 80056ba:	d005      	beq.n	80056c8 <I2C_ITError+0x44>
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b29      	cmp	r3, #41	; 0x29
 80056c0:	d002      	beq.n	80056c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	2b2a      	cmp	r3, #42	; 0x2a
 80056c6:	d10b      	bne.n	80056e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056c8:	2103      	movs	r1, #3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f913 	bl	80058f6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2228      	movs	r2, #40	; 0x28
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a50      	ldr	r2, [pc, #320]	; (800581c <I2C_ITError+0x198>)
 80056dc:	635a      	str	r2, [r3, #52]	; 0x34
 80056de:	e011      	b.n	8005704 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f906 	bl	80058f6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b60      	cmp	r3, #96	; 0x60
 80056f4:	d003      	beq.n	80056fe <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	2b00      	cmp	r3, #0
 8005710:	d039      	beq.n	8005786 <I2C_ITError+0x102>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b11      	cmp	r3, #17
 8005716:	d002      	beq.n	800571e <I2C_ITError+0x9a>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b21      	cmp	r3, #33	; 0x21
 800571c:	d133      	bne.n	8005786 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800572c:	d107      	bne.n	800573e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800573c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fdde 	bl	8004304 <HAL_DMA_GetState>
 8005748:	4603      	mov	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d017      	beq.n	800577e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	4a33      	ldr	r2, [pc, #204]	; (8005820 <I2C_ITError+0x19c>)
 8005754:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	4618      	mov	r0, r3
 8005764:	f7fd fc5e 	bl	8003024 <HAL_DMA_Abort_IT>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d04d      	beq.n	800580a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005778:	4610      	mov	r0, r2
 800577a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800577c:	e045      	b.n	800580a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f850 	bl	8005824 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005784:	e041      	b.n	800580a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d039      	beq.n	8005802 <I2C_ITError+0x17e>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b12      	cmp	r3, #18
 8005792:	d002      	beq.n	800579a <I2C_ITError+0x116>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b22      	cmp	r3, #34	; 0x22
 8005798:	d133      	bne.n	8005802 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a8:	d107      	bne.n	80057ba <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057b8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fda0 	bl	8004304 <HAL_DMA_GetState>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d017      	beq.n	80057fa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	4a14      	ldr	r2, [pc, #80]	; (8005820 <I2C_ITError+0x19c>)
 80057d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fd fc20 	bl	8003024 <HAL_DMA_Abort_IT>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d011      	beq.n	800580e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057f4:	4610      	mov	r0, r2
 80057f6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057f8:	e009      	b.n	800580e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f812 	bl	8005824 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005800:	e005      	b.n	800580e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f80e 	bl	8005824 <I2C_TreatErrorCallback>
  }
}
 8005808:	e002      	b.n	8005810 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800580e:	bf00      	nop
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	ffff0000 	.word	0xffff0000
 800581c:	08004e1f 	.word	0x08004e1f
 8005820:	080058bb 	.word	0x080058bb

08005824 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b60      	cmp	r3, #96	; 0x60
 8005836:	d10e      	bne.n	8005856 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fadb 	bl	8004e0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005854:	e009      	b.n	800586a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff fac6 	bl	8004df6 <HAL_I2C_ErrorCallback>
}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b02      	cmp	r3, #2
 8005886:	d103      	bne.n	8005890 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2200      	movs	r2, #0
 800588e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b01      	cmp	r3, #1
 800589c:	d007      	beq.n	80058ae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	619a      	str	r2, [r3, #24]
  }
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	2200      	movs	r2, #0
 80058d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e4:	2200      	movs	r2, #0
 80058e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff ff9b 	bl	8005824 <I2C_TreatErrorCallback>
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b085      	sub	sp, #20
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005906:	887b      	ldrh	r3, [r7, #2]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00f      	beq.n	8005930 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005916:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005924:	2b28      	cmp	r3, #40	; 0x28
 8005926:	d003      	beq.n	8005930 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800592e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005930:	887b      	ldrh	r3, [r7, #2]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00f      	beq.n	800595a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005940:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800594e:	2b28      	cmp	r3, #40	; 0x28
 8005950:	d003      	beq.n	800595a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005958:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800595a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800595e:	2b00      	cmp	r3, #0
 8005960:	da03      	bge.n	800596a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005968:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800596a:	887b      	ldrh	r3, [r7, #2]
 800596c:	2b10      	cmp	r3, #16
 800596e:	d103      	bne.n	8005978 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005976:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005978:	887b      	ldrh	r3, [r7, #2]
 800597a:	2b20      	cmp	r3, #32
 800597c:	d103      	bne.n	8005986 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f043 0320 	orr.w	r3, r3, #32
 8005984:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005986:	887b      	ldrh	r3, [r7, #2]
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d103      	bne.n	8005994 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005992:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6819      	ldr	r1, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	43da      	mvns	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	400a      	ands	r2, r1
 80059a4:	601a      	str	r2, [r3, #0]
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d138      	bne.n	8005a3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e032      	b.n	8005a3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2224      	movs	r2, #36	; 0x24
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6819      	ldr	r1, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e000      	b.n	8005a3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
  }
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d139      	bne.n	8005ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e033      	b.n	8005ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2224      	movs	r2, #36	; 0x24
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0201 	bic.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0201 	orr.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e000      	b.n	8005ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ae2:	b08f      	sub	sp, #60	; 0x3c
 8005ae4:	af0a      	add	r7, sp, #40	; 0x28
 8005ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e116      	b.n	8005d20 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f00a f8a7 	bl	800fc60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2203      	movs	r2, #3
 8005b16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f006 ff4e 	bl	800c9d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	687e      	ldr	r6, [r7, #4]
 8005b3e:	466d      	mov	r5, sp
 8005b40:	f106 0410 	add.w	r4, r6, #16
 8005b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b50:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b54:	1d33      	adds	r3, r6, #4
 8005b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b58:	6838      	ldr	r0, [r7, #0]
 8005b5a:	f006 fe19 	bl	800c790 <USB_CoreInit>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0d7      	b.n	8005d20 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f006 ff3c 	bl	800c9f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	73fb      	strb	r3, [r7, #15]
 8005b80:	e04a      	b.n	8005c18 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b82:	7bfa      	ldrb	r2, [r7, #15]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	333d      	adds	r3, #61	; 0x3d
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b96:	7bfa      	ldrb	r2, [r7, #15]
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	1a9b      	subs	r3, r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	333c      	adds	r3, #60	; 0x3c
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005baa:	7bfa      	ldrb	r2, [r7, #15]
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	b298      	uxth	r0, r3
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	3342      	adds	r3, #66	; 0x42
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bc2:	7bfa      	ldrb	r2, [r7, #15]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	333f      	adds	r3, #63	; 0x3f
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bd6:	7bfa      	ldrb	r2, [r7, #15]
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	1a9b      	subs	r3, r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	3344      	adds	r3, #68	; 0x44
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bea:	7bfa      	ldrb	r2, [r7, #15]
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	3348      	adds	r3, #72	; 0x48
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bfe:	7bfa      	ldrb	r2, [r7, #15]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3350      	adds	r3, #80	; 0x50
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	3301      	adds	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
 8005c18:	7bfa      	ldrb	r2, [r7, #15]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d3af      	bcc.n	8005b82 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]
 8005c26:	e044      	b.n	8005cb2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c28:	7bfa      	ldrb	r2, [r7, #15]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c3e:	7bfa      	ldrb	r2, [r7, #15]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005c50:	7bfa      	ldrb	r2, [r7, #15]
 8005c52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c54:	7bfa      	ldrb	r2, [r7, #15]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c6a:	7bfa      	ldrb	r2, [r7, #15]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c80:	7bfa      	ldrb	r2, [r7, #15]
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	1a9b      	subs	r3, r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c96:	7bfa      	ldrb	r2, [r7, #15]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	7bfa      	ldrb	r2, [r7, #15]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d3b5      	bcc.n	8005c28 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	687e      	ldr	r6, [r7, #4]
 8005cc4:	466d      	mov	r5, sp
 8005cc6:	f106 0410 	add.w	r4, r6, #16
 8005cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cda:	1d33      	adds	r3, r6, #4
 8005cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cde:	6838      	ldr	r0, [r7, #0]
 8005ce0:	f006 feb2 	bl	800ca48 <USB_DevInit>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e014      	b.n	8005d20 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d102      	bne.n	8005d14 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f001 f892 	bl	8006e38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f007 ff32 	bl	800db82 <USB_DevDisconnect>

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_PCD_Start+0x1c>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e020      	b.n	8005d86 <HAL_PCD_Start+0x5e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d109      	bne.n	8005d68 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d005      	beq.n	8005d68 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f006 fe1f 	bl	800c9b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f007 fee2 	bl	800db40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d8e:	b590      	push	{r4, r7, lr}
 8005d90:	b08d      	sub	sp, #52	; 0x34
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f007 ffa0 	bl	800dcea <USB_GetMode>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f040 83ca 	bne.w	8006546 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f007 ff04 	bl	800dbc4 <USB_ReadInterrupts>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 83c0 	beq.w	8006544 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f007 fefb 	bl	800dbc4 <USB_ReadInterrupts>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d107      	bne.n	8005de8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f002 0202 	and.w	r2, r2, #2
 8005de6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f007 fee9 	bl	800dbc4 <USB_ReadInterrupts>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d161      	bne.n	8005ec0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0210 	bic.w	r2, r2, #16
 8005e0a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f003 020f 	and.w	r2, r3, #15
 8005e18:	4613      	mov	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	3304      	adds	r3, #4
 8005e2a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	0c5b      	lsrs	r3, r3, #17
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d124      	bne.n	8005e82 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d035      	beq.n	8005eb0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	6a38      	ldr	r0, [r7, #32]
 8005e58:	f007 fd20 	bl	800d89c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	091b      	lsrs	r3, r3, #4
 8005e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e68:	441a      	add	r2, r3
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e7a:	441a      	add	r2, r3
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	619a      	str	r2, [r3, #24]
 8005e80:	e016      	b.n	8005eb0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	0c5b      	lsrs	r3, r3, #17
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	2b06      	cmp	r3, #6
 8005e8c:	d110      	bne.n	8005eb0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e94:	2208      	movs	r2, #8
 8005e96:	4619      	mov	r1, r3
 8005e98:	6a38      	ldr	r0, [r7, #32]
 8005e9a:	f007 fcff 	bl	800d89c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	091b      	lsrs	r3, r3, #4
 8005ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eaa:	441a      	add	r2, r3
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0210 	orr.w	r2, r2, #16
 8005ebe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f007 fe7d 	bl	800dbc4 <USB_ReadInterrupts>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ed0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ed4:	d16e      	bne.n	8005fb4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f007 fe83 	bl	800dbea <USB_ReadDevAllOutEpInterrupt>
 8005ee4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005ee6:	e062      	b.n	8005fae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d057      	beq.n	8005fa2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	4611      	mov	r1, r2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f007 fea8 	bl	800dc52 <USB_ReadDevOutEPInterrupt>
 8005f02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fdde 	bl	8006ae4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00c      	beq.n	8005f4c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2308      	movs	r3, #8
 8005f42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fed8 	bl	8006cfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	461a      	mov	r2, r3
 8005f64:	2310      	movs	r3, #16
 8005f66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2320      	movs	r3, #32
 8005f82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fa0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d199      	bne.n	8005ee8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f007 fe03 	bl	800dbc4 <USB_ReadInterrupts>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fc8:	f040 80c0 	bne.w	800614c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f007 fe24 	bl	800dc1e <USB_ReadDevAllInEpInterrupt>
 8005fd6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005fdc:	e0b2      	b.n	8006144 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80a7 	beq.w	8006138 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	4611      	mov	r1, r2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f007 fe4a 	bl	800dc8e <USB_ReadDevInEPInterrupt>
 8005ffa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d057      	beq.n	80060b6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	2201      	movs	r2, #1
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	43db      	mvns	r3, r3
 8006020:	69f9      	ldr	r1, [r7, #28]
 8006022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006026:	4013      	ands	r3, r2
 8006028:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006036:	461a      	mov	r2, r3
 8006038:	2301      	movs	r3, #1
 800603a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d132      	bne.n	80060aa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	3348      	adds	r3, #72	; 0x48
 8006054:	6819      	ldr	r1, [r3, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605a:	4613      	mov	r3, r2
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4403      	add	r3, r0
 8006064:	3344      	adds	r3, #68	; 0x44
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4419      	add	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606e:	4613      	mov	r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4403      	add	r3, r0
 8006078:	3348      	adds	r3, #72	; 0x48
 800607a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	2b00      	cmp	r3, #0
 8006080:	d113      	bne.n	80060aa <HAL_PCD_IRQHandler+0x31c>
 8006082:	6879      	ldr	r1, [r7, #4]
 8006084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006086:	4613      	mov	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	3350      	adds	r3, #80	; 0x50
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d108      	bne.n	80060aa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80060a2:	461a      	mov	r2, r3
 80060a4:	2101      	movs	r1, #1
 80060a6:	f007 fe53 	bl	800dd50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f009 fe72 	bl	800fd9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	461a      	mov	r2, r3
 80060ce:	2308      	movs	r3, #8
 80060d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	461a      	mov	r2, r3
 80060ea:	2310      	movs	r3, #16
 80060ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	461a      	mov	r2, r3
 8006106:	2340      	movs	r3, #64	; 0x40
 8006108:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d008      	beq.n	8006126 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	461a      	mov	r2, r3
 8006122:	2302      	movs	r3, #2
 8006124:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006130:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fc48 	bl	80069c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	3301      	adds	r3, #1
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	f47f af49 	bne.w	8005fde <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f007 fd37 	bl	800dbc4 <USB_ReadInterrupts>
 8006156:	4603      	mov	r3, r0
 8006158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800615c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006160:	d122      	bne.n	80061a8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006170:	f023 0301 	bic.w	r3, r3, #1
 8006174:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800617c:	2b01      	cmp	r3, #1
 800617e:	d108      	bne.n	8006192 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006188:	2100      	movs	r1, #0
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fe78 	bl	8006e80 <HAL_PCDEx_LPM_Callback>
 8006190:	e002      	b.n	8006198 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f009 fe78 	bl	800fe88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80061a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f007 fd09 	bl	800dbc4 <USB_ReadInterrupts>
 80061b2:	4603      	mov	r3, r0
 80061b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061bc:	d112      	bne.n	80061e4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d102      	bne.n	80061d4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f009 fe34 	bl	800fe3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80061e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f007 fceb 	bl	800dbc4 <USB_ReadInterrupts>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f8:	d121      	bne.n	800623e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006208:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d111      	bne.n	8006238 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800622e:	2101      	movs	r1, #1
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fe25 	bl	8006e80 <HAL_PCDEx_LPM_Callback>
 8006236:	e002      	b.n	800623e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f009 fdff 	bl	800fe3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f007 fcbe 	bl	800dbc4 <USB_ReadInterrupts>
 8006248:	4603      	mov	r3, r0
 800624a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006252:	f040 80c7 	bne.w	80063e4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006264:	f023 0301 	bic.w	r3, r3, #1
 8006268:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2110      	movs	r1, #16
 8006270:	4618      	mov	r0, r3
 8006272:	f006 fd47 	bl	800cd04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006276:	2300      	movs	r3, #0
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627a:	e056      	b.n	800632a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006288:	461a      	mov	r2, r3
 800628a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800628e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062ae:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	461a      	mov	r2, r3
 80062de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006302:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006322:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	3301      	adds	r3, #1
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006330:	429a      	cmp	r2, r3
 8006332:	d3a3      	bcc.n	800627c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006342:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006346:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	2b00      	cmp	r3, #0
 800634e:	d016      	beq.n	800637e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006360:	f043 030b 	orr.w	r3, r3, #11
 8006364:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006376:	f043 030b 	orr.w	r3, r3, #11
 800637a:	6453      	str	r3, [r2, #68]	; 0x44
 800637c:	e015      	b.n	80063aa <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638c:	4619      	mov	r1, r3
 800638e:	f242 032b 	movw	r3, #8235	; 0x202b
 8006392:	4313      	orrs	r3, r2
 8006394:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a4:	f043 030b 	orr.w	r3, r3, #11
 80063a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80063ce:	461a      	mov	r2, r3
 80063d0:	f007 fcbe 	bl	800dd50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695a      	ldr	r2, [r3, #20]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80063e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f007 fbeb 	bl	800dbc4 <USB_ReadInterrupts>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f8:	d124      	bne.n	8006444 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f007 fc82 	bl	800dd08 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4618      	mov	r0, r3
 800640a:	f006 fcdc 	bl	800cdc6 <USB_GetDevSpeed>
 800640e:	4603      	mov	r3, r0
 8006410:	461a      	mov	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681c      	ldr	r4, [r3, #0]
 800641a:	f001 fce5 	bl	8007de8 <HAL_RCC_GetHCLKFreq>
 800641e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
 8006428:	4620      	mov	r0, r4
 800642a:	f006 fa1f 	bl	800c86c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f009 fcdb 	bl	800fdea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006442:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f007 fbbb 	bl	800dbc4 <USB_ReadInterrupts>
 800644e:	4603      	mov	r3, r0
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b08      	cmp	r3, #8
 8006456:	d10a      	bne.n	800646e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f009 fcb8 	bl	800fdce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f002 0208 	and.w	r2, r2, #8
 800646c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f007 fba6 	bl	800dbc4 <USB_ReadInterrupts>
 8006478:	4603      	mov	r3, r0
 800647a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800647e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006482:	d10f      	bne.n	80064a4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	b2db      	uxtb	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f009 fd1a 	bl	800fec8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80064a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f007 fb8b 	bl	800dbc4 <USB_ReadInterrupts>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064b8:	d10f      	bne.n	80064da <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f009 fced 	bl	800fea4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695a      	ldr	r2, [r3, #20]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80064d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f007 fb70 	bl	800dbc4 <USB_ReadInterrupts>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ee:	d10a      	bne.n	8006506 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f009 fcfb 	bl	800feec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695a      	ldr	r2, [r3, #20]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f007 fb5a 	bl	800dbc4 <USB_ReadInterrupts>
 8006510:	4603      	mov	r3, r0
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b04      	cmp	r3, #4
 8006518:	d115      	bne.n	8006546 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f009 fceb 	bl	800ff08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6859      	ldr	r1, [r3, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	e000      	b.n	8006546 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006544:	bf00      	nop
    }
  }
}
 8006546:	3734      	adds	r7, #52	; 0x34
 8006548:	46bd      	mov	sp, r7
 800654a:	bd90      	pop	{r4, r7, pc}

0800654c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_PCD_SetAddress+0x1a>
 8006562:	2302      	movs	r3, #2
 8006564:	e013      	b.n	800658e <HAL_PCD_SetAddress+0x42>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	78fa      	ldrb	r2, [r7, #3]
 8006572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f007 fab8 	bl	800daf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	4608      	mov	r0, r1
 80065a0:	4611      	mov	r1, r2
 80065a2:	461a      	mov	r2, r3
 80065a4:	4603      	mov	r3, r0
 80065a6:	70fb      	strb	r3, [r7, #3]
 80065a8:	460b      	mov	r3, r1
 80065aa:	803b      	strh	r3, [r7, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	da0f      	bge.n	80065dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	f003 020f 	and.w	r2, r3, #15
 80065c2:	4613      	mov	r3, r2
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	3338      	adds	r3, #56	; 0x38
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4413      	add	r3, r2
 80065d0:	3304      	adds	r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	705a      	strb	r2, [r3, #1]
 80065da:	e00f      	b.n	80065fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065dc:	78fb      	ldrb	r3, [r7, #3]
 80065de:	f003 020f 	and.w	r2, r3, #15
 80065e2:	4613      	mov	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	4413      	add	r3, r2
 80065f2:	3304      	adds	r3, #4
 80065f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	b2da      	uxtb	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006608:	883a      	ldrh	r2, [r7, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	78ba      	ldrb	r2, [r7, #2]
 8006612:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006626:	78bb      	ldrb	r3, [r7, #2]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d102      	bne.n	8006632 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_PCD_EP_Open+0xaa>
 800663c:	2302      	movs	r3, #2
 800663e:	e00e      	b.n	800665e <HAL_PCD_EP_Open+0xc8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68f9      	ldr	r1, [r7, #12]
 800664e:	4618      	mov	r0, r3
 8006650:	f006 fbde 	bl	800ce10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800665c:	7afb      	ldrb	r3, [r7, #11]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	460b      	mov	r3, r1
 8006670:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da0f      	bge.n	800669a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800667a:	78fb      	ldrb	r3, [r7, #3]
 800667c:	f003 020f 	and.w	r2, r3, #15
 8006680:	4613      	mov	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	3338      	adds	r3, #56	; 0x38
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4413      	add	r3, r2
 800668e:	3304      	adds	r3, #4
 8006690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	705a      	strb	r2, [r3, #1]
 8006698:	e00f      	b.n	80066ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	f003 020f 	and.w	r2, r3, #15
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	4413      	add	r3, r2
 80066b0:	3304      	adds	r3, #4
 80066b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_PCD_EP_Close+0x6e>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e00e      	b.n	80066f2 <HAL_PCD_EP_Close+0x8c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68f9      	ldr	r1, [r7, #12]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f006 fc1c 	bl	800cf20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	460b      	mov	r3, r1
 8006708:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	f003 020f 	and.w	r2, r3, #15
 8006710:	4613      	mov	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	1a9b      	subs	r3, r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	3304      	adds	r3, #4
 8006722:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2200      	movs	r2, #0
 8006734:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2200      	movs	r2, #0
 800673a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800673c:	7afb      	ldrb	r3, [r7, #11]
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	b2da      	uxtb	r2, r3
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d102      	bne.n	8006756 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006756:	7afb      	ldrb	r3, [r7, #11]
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	6979      	ldr	r1, [r7, #20]
 800676e:	f006 feff 	bl	800d570 <USB_EP0StartXfer>
 8006772:	e008      	b.n	8006786 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	6979      	ldr	r1, [r7, #20]
 8006782:	f006 fca9 	bl	800d0d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	f003 020f 	and.w	r2, r3, #15
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80067b2:	681b      	ldr	r3, [r3, #0]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	460b      	mov	r3, r1
 80067ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067d0:	7afb      	ldrb	r3, [r7, #11]
 80067d2:	f003 020f 	and.w	r2, r3, #15
 80067d6:	4613      	mov	r3, r2
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	3338      	adds	r3, #56	; 0x38
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	3304      	adds	r3, #4
 80067e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2200      	movs	r2, #0
 80067f8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2201      	movs	r2, #1
 80067fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006800:	7afb      	ldrb	r3, [r7, #11]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	b2da      	uxtb	r2, r3
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d102      	bne.n	800681a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800681a:	7afb      	ldrb	r3, [r7, #11]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	2b00      	cmp	r3, #0
 8006822:	d109      	bne.n	8006838 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	461a      	mov	r2, r3
 8006830:	6979      	ldr	r1, [r7, #20]
 8006832:	f006 fe9d 	bl	800d570 <USB_EP0StartXfer>
 8006836:	e008      	b.n	800684a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	6979      	ldr	r1, [r7, #20]
 8006846:	f006 fc47 	bl	800d0d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	429a      	cmp	r2, r3
 800686c:	d901      	bls.n	8006872 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e050      	b.n	8006914 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006876:	2b00      	cmp	r3, #0
 8006878:	da0f      	bge.n	800689a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	f003 020f 	and.w	r2, r3, #15
 8006880:	4613      	mov	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	3338      	adds	r3, #56	; 0x38
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	4413      	add	r3, r2
 800688e:	3304      	adds	r3, #4
 8006890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	705a      	strb	r2, [r3, #1]
 8006898:	e00d      	b.n	80068b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	4613      	mov	r3, r2
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	1a9b      	subs	r3, r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	4413      	add	r3, r2
 80068ac:	3304      	adds	r3, #4
 80068ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d101      	bne.n	80068d6 <HAL_PCD_EP_SetStall+0x82>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e01e      	b.n	8006914 <HAL_PCD_EP_SetStall+0xc0>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f007 f831 	bl	800d94c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	b2d9      	uxtb	r1, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006904:	461a      	mov	r2, r3
 8006906:	f007 fa23 	bl	800dd50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	f003 020f 	and.w	r2, r3, #15
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d901      	bls.n	800693a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e042      	b.n	80069c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800693a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800693e:	2b00      	cmp	r3, #0
 8006940:	da0f      	bge.n	8006962 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	f003 020f 	and.w	r2, r3, #15
 8006948:	4613      	mov	r3, r2
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	3338      	adds	r3, #56	; 0x38
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4413      	add	r3, r2
 8006956:	3304      	adds	r3, #4
 8006958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	705a      	strb	r2, [r3, #1]
 8006960:	e00f      	b.n	8006982 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	f003 020f 	and.w	r2, r3, #15
 8006968:	4613      	mov	r3, r2
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	1a9b      	subs	r3, r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	4413      	add	r3, r2
 8006978:	3304      	adds	r3, #4
 800697a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	b2da      	uxtb	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_PCD_EP_ClrStall+0x86>
 800699e:	2302      	movs	r3, #2
 80069a0:	e00e      	b.n	80069c0 <HAL_PCD_EP_ClrStall+0xa4>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f007 f839 	bl	800da28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80069dc:	683a      	ldr	r2, [r7, #0]
 80069de:	4613      	mov	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	1a9b      	subs	r3, r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	3338      	adds	r3, #56	; 0x38
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	4413      	add	r3, r2
 80069ec:	3304      	adds	r3, #4
 80069ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	699a      	ldr	r2, [r3, #24]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d901      	bls.n	8006a00 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e06c      	b.n	8006ada <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	695a      	ldr	r2, [r3, #20]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d902      	bls.n	8006a1c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	3303      	adds	r3, #3
 8006a20:	089b      	lsrs	r3, r3, #2
 8006a22:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a24:	e02b      	b.n	8006a7e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	695a      	ldr	r2, [r3, #20]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d902      	bls.n	8006a42 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	3303      	adds	r3, #3
 8006a46:	089b      	lsrs	r3, r3, #2
 8006a48:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	68d9      	ldr	r1, [r3, #12]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	4603      	mov	r3, r0
 8006a60:	6978      	ldr	r0, [r7, #20]
 8006a62:	f006 fedd 	bl	800d820 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	441a      	add	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	441a      	add	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d809      	bhi.n	8006aa8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	699a      	ldr	r2, [r3, #24]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d203      	bcs.n	8006aa8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1be      	bne.n	8006a26 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	695a      	ldr	r2, [r3, #20]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d811      	bhi.n	8006ad8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	2201      	movs	r2, #1
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	43db      	mvns	r3, r3
 8006ace:	6939      	ldr	r1, [r7, #16]
 8006ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	333c      	adds	r3, #60	; 0x3c
 8006afc:	3304      	adds	r3, #4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	f040 80a0 	bne.w	8006c5c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d015      	beq.n	8006b52 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4a72      	ldr	r2, [pc, #456]	; (8006cf4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	f240 80dd 	bls.w	8006cea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80d7 	beq.w	8006cea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4e:	6093      	str	r3, [r2, #8]
 8006b50:	e0cb      	b.n	8006cea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f003 0320 	and.w	r3, r3, #32
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b68:	461a      	mov	r2, r3
 8006b6a:	2320      	movs	r3, #32
 8006b6c:	6093      	str	r3, [r2, #8]
 8006b6e:	e0bc      	b.n	8006cea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 80b7 	bne.w	8006cea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4a5d      	ldr	r2, [pc, #372]	; (8006cf4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d90f      	bls.n	8006ba4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba0:	6093      	str	r3, [r2, #8]
 8006ba2:	e0a2      	b.n	8006cea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006bb6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	0159      	lsls	r1, r3, #5
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	440b      	add	r3, r1
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006bca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4403      	add	r3, r0
 8006bda:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006bde:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	4613      	mov	r3, r2
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	1a9b      	subs	r3, r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bf2:	6819      	ldr	r1, [r3, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	1a9b      	subs	r3, r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4403      	add	r3, r0
 8006c02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4419      	add	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4403      	add	r3, r0
 8006c18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c1c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d114      	bne.n	8006c4e <PCD_EP_OutXfrComplete_int+0x16a>
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d108      	bne.n	8006c4e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c46:	461a      	mov	r2, r3
 8006c48:	2101      	movs	r1, #1
 8006c4a:	f007 f881 	bl	800dd50 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f009 f885 	bl	800fd64 <HAL_PCD_DataOutStageCallback>
 8006c5a:	e046      	b.n	8006cea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4a26      	ldr	r2, [pc, #152]	; (8006cf8 <PCD_EP_OutXfrComplete_int+0x214>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d124      	bne.n	8006cae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c80:	6093      	str	r3, [r2, #8]
 8006c82:	e032      	b.n	8006cea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f009 f85c 	bl	800fd64 <HAL_PCD_DataOutStageCallback>
 8006cac:	e01d      	b.n	8006cea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d114      	bne.n	8006cde <PCD_EP_OutXfrComplete_int+0x1fa>
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d108      	bne.n	8006cde <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2100      	movs	r1, #0
 8006cda:	f007 f839 	bl	800dd50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f009 f83d 	bl	800fd64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	4f54300a 	.word	0x4f54300a
 8006cf8:	4f54310a 	.word	0x4f54310a

08006cfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	333c      	adds	r3, #60	; 0x3c
 8006d14:	3304      	adds	r3, #4
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a15      	ldr	r2, [pc, #84]	; (8006d84 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d90e      	bls.n	8006d50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f008 fff5 	bl	800fd40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4a0a      	ldr	r2, [pc, #40]	; (8006d84 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d90c      	bls.n	8006d78 <PCD_EP_OutSetupPacket_int+0x7c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d108      	bne.n	8006d78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d70:	461a      	mov	r2, r3
 8006d72:	2101      	movs	r1, #1
 8006d74:	f006 ffec 	bl	800dd50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	4f54300a 	.word	0x4f54300a

08006d88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
 8006d94:	4613      	mov	r3, r2
 8006d96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d107      	bne.n	8006db6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006da6:	883b      	ldrh	r3, [r7, #0]
 8006da8:	0419      	lsls	r1, r3, #16
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	629a      	str	r2, [r3, #40]	; 0x28
 8006db4:	e028      	b.n	8006e08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	0c1b      	lsrs	r3, r3, #16
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	e00d      	b.n	8006de6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
 8006dd0:	3340      	adds	r3, #64	; 0x40
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	0c1b      	lsrs	r3, r3, #16
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	4413      	add	r3, r2
 8006dde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	3301      	adds	r3, #1
 8006de4:	73fb      	strb	r3, [r7, #15]
 8006de6:	7bfa      	ldrb	r2, [r7, #15]
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d3ec      	bcc.n	8006dca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006df0:	883b      	ldrh	r3, [r7, #0]
 8006df2:	0418      	lsls	r0, r3, #16
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6819      	ldr	r1, [r3, #0]
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	4302      	orrs	r2, r0
 8006e00:	3340      	adds	r3, #64	; 0x40
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	460b      	mov	r3, r1
 8006e20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	887a      	ldrh	r2, [r7, #2]
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <HAL_PCDEx_ActivateLPM+0x44>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	10000003 	.word	0x10000003

08006e80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006ea0:	4b29      	ldr	r3, [pc, #164]	; (8006f48 <HAL_PWREx_ConfigSupply+0xb0>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	2b06      	cmp	r3, #6
 8006eaa:	d00a      	beq.n	8006ec2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006eac:	4b26      	ldr	r3, [pc, #152]	; (8006f48 <HAL_PWREx_ConfigSupply+0xb0>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d001      	beq.n	8006ebe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e040      	b.n	8006f40 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e03e      	b.n	8006f40 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006ec2:	4b21      	ldr	r3, [pc, #132]	; (8006f48 <HAL_PWREx_ConfigSupply+0xb0>)
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006eca:	491f      	ldr	r1, [pc, #124]	; (8006f48 <HAL_PWREx_ConfigSupply+0xb0>)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ed2:	f7fb f857 	bl	8001f84 <HAL_GetTick>
 8006ed6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ed8:	e009      	b.n	8006eee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006eda:	f7fb f853 	bl	8001f84 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ee8:	d901      	bls.n	8006eee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e028      	b.n	8006f40 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006eee:	4b16      	ldr	r3, [pc, #88]	; (8006f48 <HAL_PWREx_ConfigSupply+0xb0>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efa:	d1ee      	bne.n	8006eda <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b1e      	cmp	r3, #30
 8006f00:	d008      	beq.n	8006f14 <HAL_PWREx_ConfigSupply+0x7c>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b2e      	cmp	r3, #46	; 0x2e
 8006f06:	d005      	beq.n	8006f14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b1d      	cmp	r3, #29
 8006f0c:	d002      	beq.n	8006f14 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b2d      	cmp	r3, #45	; 0x2d
 8006f12:	d114      	bne.n	8006f3e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006f14:	f7fb f836 	bl	8001f84 <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006f1a:	e009      	b.n	8006f30 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006f1c:	f7fb f832 	bl	8001f84 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f2a:	d901      	bls.n	8006f30 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e007      	b.n	8006f40 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <HAL_PWREx_ConfigSupply+0xb0>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3c:	d1ee      	bne.n	8006f1c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	58024800 	.word	0x58024800

08006f4c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f5a:	60d3      	str	r3, [r2, #12]
}
 8006f5c:	bf00      	nop
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	58024800 	.word	0x58024800

08006f6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08c      	sub	sp, #48	; 0x30
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e3fd      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 8087 	beq.w	800709a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f8c:	4b99      	ldr	r3, [pc, #612]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f96:	4b97      	ldr	r3, [pc, #604]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	2b10      	cmp	r3, #16
 8006fa0:	d007      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x46>
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	2b18      	cmp	r3, #24
 8006fa6:	d110      	bne.n	8006fca <HAL_RCC_OscConfig+0x5e>
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d10b      	bne.n	8006fca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fb2:	4b90      	ldr	r3, [pc, #576]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d06c      	beq.n	8007098 <HAL_RCC_OscConfig+0x12c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d168      	bne.n	8007098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e3d7      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd2:	d106      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x76>
 8006fd4:	4b87      	ldr	r3, [pc, #540]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a86      	ldr	r2, [pc, #536]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8006fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	e02e      	b.n	8007040 <HAL_RCC_OscConfig+0xd4>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10c      	bne.n	8007004 <HAL_RCC_OscConfig+0x98>
 8006fea:	4b82      	ldr	r3, [pc, #520]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a81      	ldr	r2, [pc, #516]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8006ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	4b7f      	ldr	r3, [pc, #508]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a7e      	ldr	r2, [pc, #504]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8006ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	e01d      	b.n	8007040 <HAL_RCC_OscConfig+0xd4>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800700c:	d10c      	bne.n	8007028 <HAL_RCC_OscConfig+0xbc>
 800700e:	4b79      	ldr	r3, [pc, #484]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a78      	ldr	r2, [pc, #480]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	4b76      	ldr	r3, [pc, #472]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a75      	ldr	r2, [pc, #468]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	e00b      	b.n	8007040 <HAL_RCC_OscConfig+0xd4>
 8007028:	4b72      	ldr	r3, [pc, #456]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a71      	ldr	r2, [pc, #452]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 800702e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	4b6f      	ldr	r3, [pc, #444]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a6e      	ldr	r2, [pc, #440]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 800703a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800703e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d013      	beq.n	8007070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007048:	f7fa ff9c 	bl	8001f84 <HAL_GetTick>
 800704c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800704e:	e008      	b.n	8007062 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007050:	f7fa ff98 	bl	8001f84 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b64      	cmp	r3, #100	; 0x64
 800705c:	d901      	bls.n	8007062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e38b      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007062:	4b64      	ldr	r3, [pc, #400]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d0f0      	beq.n	8007050 <HAL_RCC_OscConfig+0xe4>
 800706e:	e014      	b.n	800709a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007070:	f7fa ff88 	bl	8001f84 <HAL_GetTick>
 8007074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007078:	f7fa ff84 	bl	8001f84 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b64      	cmp	r3, #100	; 0x64
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e377      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800708a:	4b5a      	ldr	r3, [pc, #360]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f0      	bne.n	8007078 <HAL_RCC_OscConfig+0x10c>
 8007096:	e000      	b.n	800709a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 80ae 	beq.w	8007204 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070a8:	4b52      	ldr	r3, [pc, #328]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070b2:	4b50      	ldr	r3, [pc, #320]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <HAL_RCC_OscConfig+0x162>
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	2b18      	cmp	r3, #24
 80070c2:	d13a      	bne.n	800713a <HAL_RCC_OscConfig+0x1ce>
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d135      	bne.n	800713a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ce:	4b49      	ldr	r3, [pc, #292]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_RCC_OscConfig+0x17a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e349      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e6:	f7fa ff7d 	bl	8001fe4 <HAL_GetREVID>
 80070ea:	4603      	mov	r3, r0
 80070ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d817      	bhi.n	8007124 <HAL_RCC_OscConfig+0x1b8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	2b40      	cmp	r3, #64	; 0x40
 80070fa:	d108      	bne.n	800710e <HAL_RCC_OscConfig+0x1a2>
 80070fc:	4b3d      	ldr	r3, [pc, #244]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007104:	4a3b      	ldr	r2, [pc, #236]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800710a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800710c:	e07a      	b.n	8007204 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800710e:	4b39      	ldr	r3, [pc, #228]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	031b      	lsls	r3, r3, #12
 800711c:	4935      	ldr	r1, [pc, #212]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 800711e:	4313      	orrs	r3, r2
 8007120:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007122:	e06f      	b.n	8007204 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007124:	4b33      	ldr	r3, [pc, #204]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	061b      	lsls	r3, r3, #24
 8007132:	4930      	ldr	r1, [pc, #192]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007134:	4313      	orrs	r3, r2
 8007136:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007138:	e064      	b.n	8007204 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d045      	beq.n	80071ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007142:	4b2c      	ldr	r3, [pc, #176]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f023 0219 	bic.w	r2, r3, #25
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	4929      	ldr	r1, [pc, #164]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007150:	4313      	orrs	r3, r2
 8007152:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007154:	f7fa ff16 	bl	8001f84 <HAL_GetTick>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800715c:	f7fa ff12 	bl	8001f84 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e305      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800716e:	4b21      	ldr	r3, [pc, #132]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800717a:	f7fa ff33 	bl	8001fe4 <HAL_GetREVID>
 800717e:	4603      	mov	r3, r0
 8007180:	f241 0203 	movw	r2, #4099	; 0x1003
 8007184:	4293      	cmp	r3, r2
 8007186:	d817      	bhi.n	80071b8 <HAL_RCC_OscConfig+0x24c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d108      	bne.n	80071a2 <HAL_RCC_OscConfig+0x236>
 8007190:	4b18      	ldr	r3, [pc, #96]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007198:	4a16      	ldr	r2, [pc, #88]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 800719a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800719e:	6053      	str	r3, [r2, #4]
 80071a0:	e030      	b.n	8007204 <HAL_RCC_OscConfig+0x298>
 80071a2:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	031b      	lsls	r3, r3, #12
 80071b0:	4910      	ldr	r1, [pc, #64]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	604b      	str	r3, [r1, #4]
 80071b6:	e025      	b.n	8007204 <HAL_RCC_OscConfig+0x298>
 80071b8:	4b0e      	ldr	r3, [pc, #56]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	061b      	lsls	r3, r3, #24
 80071c6:	490b      	ldr	r1, [pc, #44]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	604b      	str	r3, [r1, #4]
 80071cc:	e01a      	b.n	8007204 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a08      	ldr	r2, [pc, #32]	; (80071f4 <HAL_RCC_OscConfig+0x288>)
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071da:	f7fa fed3 	bl	8001f84 <HAL_GetTick>
 80071de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071e0:	e00a      	b.n	80071f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071e2:	f7fa fecf 	bl	8001f84 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d903      	bls.n	80071f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e2c2      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
 80071f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071f8:	4b94      	ldr	r3, [pc, #592]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0304 	and.w	r3, r3, #4
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1ee      	bne.n	80071e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 80a9 	beq.w	8007364 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007212:	4b8e      	ldr	r3, [pc, #568]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800721a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800721c:	4b8b      	ldr	r3, [pc, #556]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b08      	cmp	r3, #8
 8007226:	d007      	beq.n	8007238 <HAL_RCC_OscConfig+0x2cc>
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b18      	cmp	r3, #24
 800722c:	d13a      	bne.n	80072a4 <HAL_RCC_OscConfig+0x338>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f003 0303 	and.w	r3, r3, #3
 8007234:	2b01      	cmp	r3, #1
 8007236:	d135      	bne.n	80072a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007238:	4b84      	ldr	r3, [pc, #528]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <HAL_RCC_OscConfig+0x2e4>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	2b80      	cmp	r3, #128	; 0x80
 800724a:	d001      	beq.n	8007250 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e294      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007250:	f7fa fec8 	bl	8001fe4 <HAL_GetREVID>
 8007254:	4603      	mov	r3, r0
 8007256:	f241 0203 	movw	r2, #4099	; 0x1003
 800725a:	4293      	cmp	r3, r2
 800725c:	d817      	bhi.n	800728e <HAL_RCC_OscConfig+0x322>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	2b20      	cmp	r3, #32
 8007264:	d108      	bne.n	8007278 <HAL_RCC_OscConfig+0x30c>
 8007266:	4b79      	ldr	r3, [pc, #484]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800726e:	4a77      	ldr	r2, [pc, #476]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007270:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007274:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007276:	e075      	b.n	8007364 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007278:	4b74      	ldr	r3, [pc, #464]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	069b      	lsls	r3, r3, #26
 8007286:	4971      	ldr	r1, [pc, #452]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007288:	4313      	orrs	r3, r2
 800728a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800728c:	e06a      	b.n	8007364 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800728e:	4b6f      	ldr	r3, [pc, #444]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	061b      	lsls	r3, r3, #24
 800729c:	496b      	ldr	r1, [pc, #428]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80072a2:	e05f      	b.n	8007364 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d042      	beq.n	8007332 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80072ac:	4b67      	ldr	r3, [pc, #412]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a66      	ldr	r2, [pc, #408]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80072b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b8:	f7fa fe64 	bl	8001f84 <HAL_GetTick>
 80072bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80072c0:	f7fa fe60 	bl	8001f84 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e253      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072d2:	4b5e      	ldr	r3, [pc, #376]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0f0      	beq.n	80072c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072de:	f7fa fe81 	bl	8001fe4 <HAL_GetREVID>
 80072e2:	4603      	mov	r3, r0
 80072e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d817      	bhi.n	800731c <HAL_RCC_OscConfig+0x3b0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d108      	bne.n	8007306 <HAL_RCC_OscConfig+0x39a>
 80072f4:	4b55      	ldr	r3, [pc, #340]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80072fc:	4a53      	ldr	r2, [pc, #332]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80072fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007302:	6053      	str	r3, [r2, #4]
 8007304:	e02e      	b.n	8007364 <HAL_RCC_OscConfig+0x3f8>
 8007306:	4b51      	ldr	r3, [pc, #324]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	069b      	lsls	r3, r3, #26
 8007314:	494d      	ldr	r1, [pc, #308]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007316:	4313      	orrs	r3, r2
 8007318:	604b      	str	r3, [r1, #4]
 800731a:	e023      	b.n	8007364 <HAL_RCC_OscConfig+0x3f8>
 800731c:	4b4b      	ldr	r3, [pc, #300]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	061b      	lsls	r3, r3, #24
 800732a:	4948      	ldr	r1, [pc, #288]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800732c:	4313      	orrs	r3, r2
 800732e:	60cb      	str	r3, [r1, #12]
 8007330:	e018      	b.n	8007364 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007332:	4b46      	ldr	r3, [pc, #280]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a45      	ldr	r2, [pc, #276]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800733c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733e:	f7fa fe21 	bl	8001f84 <HAL_GetTick>
 8007342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007344:	e008      	b.n	8007358 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007346:	f7fa fe1d 	bl	8001f84 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e210      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007358:	4b3c      	ldr	r3, [pc, #240]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1f0      	bne.n	8007346 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b00      	cmp	r3, #0
 800736e:	d036      	beq.n	80073de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d019      	beq.n	80073ac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007378:	4b34      	ldr	r3, [pc, #208]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800737a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800737c:	4a33      	ldr	r2, [pc, #204]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007384:	f7fa fdfe 	bl	8001f84 <HAL_GetTick>
 8007388:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800738c:	f7fa fdfa 	bl	8001f84 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e1ed      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800739e:	4b2b      	ldr	r3, [pc, #172]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80073a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a2:	f003 0302 	and.w	r3, r3, #2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0f0      	beq.n	800738c <HAL_RCC_OscConfig+0x420>
 80073aa:	e018      	b.n	80073de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073ac:	4b27      	ldr	r3, [pc, #156]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80073ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b0:	4a26      	ldr	r2, [pc, #152]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073b8:	f7fa fde4 	bl	8001f84 <HAL_GetTick>
 80073bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073c0:	f7fa fde0 	bl	8001f84 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e1d3      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80073d2:	4b1e      	ldr	r3, [pc, #120]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80073d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f0      	bne.n	80073c0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d038      	beq.n	800745c <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d019      	beq.n	8007426 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073f2:	4b16      	ldr	r3, [pc, #88]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a15      	ldr	r2, [pc, #84]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 80073f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073fe:	f7fa fdc1 	bl	8001f84 <HAL_GetTick>
 8007402:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007404:	e008      	b.n	8007418 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007406:	f7fa fdbd 	bl	8001f84 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e1b0      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007418:	4b0c      	ldr	r3, [pc, #48]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0f0      	beq.n	8007406 <HAL_RCC_OscConfig+0x49a>
 8007424:	e01a      	b.n	800745c <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007426:	4b09      	ldr	r3, [pc, #36]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a08      	ldr	r2, [pc, #32]	; (800744c <HAL_RCC_OscConfig+0x4e0>)
 800742c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007430:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007432:	f7fa fda7 	bl	8001f84 <HAL_GetTick>
 8007436:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007438:	e00a      	b.n	8007450 <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800743a:	f7fa fda3 	bl	8001f84 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d903      	bls.n	8007450 <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e196      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
 800744c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007450:	4b99      	ldr	r3, [pc, #612]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1ee      	bne.n	800743a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8081 	beq.w	800756c <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800746a:	4b94      	ldr	r3, [pc, #592]	; (80076bc <HAL_RCC_OscConfig+0x750>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a93      	ldr	r2, [pc, #588]	; (80076bc <HAL_RCC_OscConfig+0x750>)
 8007470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007474:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007476:	f7fa fd85 	bl	8001f84 <HAL_GetTick>
 800747a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800747e:	f7fa fd81 	bl	8001f84 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b64      	cmp	r3, #100	; 0x64
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e174      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007490:	4b8a      	ldr	r3, [pc, #552]	; (80076bc <HAL_RCC_OscConfig+0x750>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007498:	2b00      	cmp	r3, #0
 800749a:	d0f0      	beq.n	800747e <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d106      	bne.n	80074b2 <HAL_RCC_OscConfig+0x546>
 80074a4:	4b84      	ldr	r3, [pc, #528]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a8:	4a83      	ldr	r2, [pc, #524]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074aa:	f043 0301 	orr.w	r3, r3, #1
 80074ae:	6713      	str	r3, [r2, #112]	; 0x70
 80074b0:	e02d      	b.n	800750e <HAL_RCC_OscConfig+0x5a2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10c      	bne.n	80074d4 <HAL_RCC_OscConfig+0x568>
 80074ba:	4b7f      	ldr	r3, [pc, #508]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	4a7e      	ldr	r2, [pc, #504]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	6713      	str	r3, [r2, #112]	; 0x70
 80074c6:	4b7c      	ldr	r3, [pc, #496]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ca:	4a7b      	ldr	r2, [pc, #492]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074cc:	f023 0304 	bic.w	r3, r3, #4
 80074d0:	6713      	str	r3, [r2, #112]	; 0x70
 80074d2:	e01c      	b.n	800750e <HAL_RCC_OscConfig+0x5a2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b05      	cmp	r3, #5
 80074da:	d10c      	bne.n	80074f6 <HAL_RCC_OscConfig+0x58a>
 80074dc:	4b76      	ldr	r3, [pc, #472]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e0:	4a75      	ldr	r2, [pc, #468]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074e2:	f043 0304 	orr.w	r3, r3, #4
 80074e6:	6713      	str	r3, [r2, #112]	; 0x70
 80074e8:	4b73      	ldr	r3, [pc, #460]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ec:	4a72      	ldr	r2, [pc, #456]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074ee:	f043 0301 	orr.w	r3, r3, #1
 80074f2:	6713      	str	r3, [r2, #112]	; 0x70
 80074f4:	e00b      	b.n	800750e <HAL_RCC_OscConfig+0x5a2>
 80074f6:	4b70      	ldr	r3, [pc, #448]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fa:	4a6f      	ldr	r2, [pc, #444]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	6713      	str	r3, [r2, #112]	; 0x70
 8007502:	4b6d      	ldr	r3, [pc, #436]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007506:	4a6c      	ldr	r2, [pc, #432]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007508:	f023 0304 	bic.w	r3, r3, #4
 800750c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d015      	beq.n	8007542 <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007516:	f7fa fd35 	bl	8001f84 <HAL_GetTick>
 800751a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800751c:	e00a      	b.n	8007534 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800751e:	f7fa fd31 	bl	8001f84 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	f241 3288 	movw	r2, #5000	; 0x1388
 800752c:	4293      	cmp	r3, r2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e122      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007534:	4b60      	ldr	r3, [pc, #384]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0ee      	beq.n	800751e <HAL_RCC_OscConfig+0x5b2>
 8007540:	e014      	b.n	800756c <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007542:	f7fa fd1f 	bl	8001f84 <HAL_GetTick>
 8007546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007548:	e00a      	b.n	8007560 <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800754a:	f7fa fd1b 	bl	8001f84 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	f241 3288 	movw	r2, #5000	; 0x1388
 8007558:	4293      	cmp	r3, r2
 800755a:	d901      	bls.n	8007560 <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e10c      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007560:	4b55      	ldr	r3, [pc, #340]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1ee      	bne.n	800754a <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8101 	beq.w	8007778 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007576:	4b50      	ldr	r3, [pc, #320]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800757e:	2b18      	cmp	r3, #24
 8007580:	f000 80bc 	beq.w	80076fc <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b02      	cmp	r3, #2
 800758a:	f040 809d 	bne.w	80076c8 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800758e:	4b4a      	ldr	r3, [pc, #296]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a49      	ldr	r2, [pc, #292]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759a:	f7fa fcf3 	bl	8001f84 <HAL_GetTick>
 800759e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075a0:	e008      	b.n	80075b4 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075a2:	f7fa fcef 	bl	8001f84 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e0e2      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075b4:	4b40      	ldr	r3, [pc, #256]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1f0      	bne.n	80075a2 <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80075c0:	4b3d      	ldr	r3, [pc, #244]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80075c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075c4:	4b3e      	ldr	r3, [pc, #248]	; (80076c0 <HAL_RCC_OscConfig+0x754>)
 80075c6:	4013      	ands	r3, r2
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075d0:	0112      	lsls	r2, r2, #4
 80075d2:	430a      	orrs	r2, r1
 80075d4:	4938      	ldr	r1, [pc, #224]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	628b      	str	r3, [r1, #40]	; 0x28
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	3b01      	subs	r3, #1
 80075e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e8:	3b01      	subs	r3, #1
 80075ea:	025b      	lsls	r3, r3, #9
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	3b01      	subs	r3, #1
 80075f6:	041b      	lsls	r3, r3, #16
 80075f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007602:	3b01      	subs	r3, #1
 8007604:	061b      	lsls	r3, r3, #24
 8007606:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800760a:	492b      	ldr	r1, [pc, #172]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 800760c:	4313      	orrs	r3, r2
 800760e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007610:	4b29      	ldr	r3, [pc, #164]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	4a28      	ldr	r2, [pc, #160]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800761c:	4b26      	ldr	r3, [pc, #152]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 800761e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007620:	4b28      	ldr	r3, [pc, #160]	; (80076c4 <HAL_RCC_OscConfig+0x758>)
 8007622:	4013      	ands	r3, r2
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007628:	00d2      	lsls	r2, r2, #3
 800762a:	4923      	ldr	r1, [pc, #140]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 800762c:	4313      	orrs	r3, r2
 800762e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007630:	4b21      	ldr	r3, [pc, #132]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	f023 020c 	bic.w	r2, r3, #12
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	491e      	ldr	r1, [pc, #120]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 800763e:	4313      	orrs	r3, r2
 8007640:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007642:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	f023 0202 	bic.w	r2, r3, #2
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764e:	491a      	ldr	r1, [pc, #104]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007654:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 800765a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800765e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007660:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800766a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800766c:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 800766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007670:	4a11      	ldr	r2, [pc, #68]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007676:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4a0e      	ldr	r2, [pc, #56]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 800767e:	f043 0301 	orr.w	r3, r3, #1
 8007682:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007684:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a0b      	ldr	r2, [pc, #44]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 800768a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800768e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fa fc78 	bl	8001f84 <HAL_GetTick>
 8007694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007698:	f7fa fc74 	bl	8001f84 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e067      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076aa:	4b03      	ldr	r3, [pc, #12]	; (80076b8 <HAL_RCC_OscConfig+0x74c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0f0      	beq.n	8007698 <HAL_RCC_OscConfig+0x72c>
 80076b6:	e05f      	b.n	8007778 <HAL_RCC_OscConfig+0x80c>
 80076b8:	58024400 	.word	0x58024400
 80076bc:	58024800 	.word	0x58024800
 80076c0:	fffffc0c 	.word	0xfffffc0c
 80076c4:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076c8:	4b2e      	ldr	r3, [pc, #184]	; (8007784 <HAL_RCC_OscConfig+0x818>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a2d      	ldr	r2, [pc, #180]	; (8007784 <HAL_RCC_OscConfig+0x818>)
 80076ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d4:	f7fa fc56 	bl	8001f84 <HAL_GetTick>
 80076d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076dc:	f7fa fc52 	bl	8001f84 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e045      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076ee:	4b25      	ldr	r3, [pc, #148]	; (8007784 <HAL_RCC_OscConfig+0x818>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1f0      	bne.n	80076dc <HAL_RCC_OscConfig+0x770>
 80076fa:	e03d      	b.n	8007778 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80076fc:	4b21      	ldr	r3, [pc, #132]	; (8007784 <HAL_RCC_OscConfig+0x818>)
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007702:	4b20      	ldr	r3, [pc, #128]	; (8007784 <HAL_RCC_OscConfig+0x818>)
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	2b01      	cmp	r3, #1
 800770e:	d031      	beq.n	8007774 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f003 0203 	and.w	r2, r3, #3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800771a:	429a      	cmp	r2, r3
 800771c:	d12a      	bne.n	8007774 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	091b      	lsrs	r3, r3, #4
 8007722:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800772a:	429a      	cmp	r2, r3
 800772c:	d122      	bne.n	8007774 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800773a:	429a      	cmp	r2, r3
 800773c:	d11a      	bne.n	8007774 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	0a5b      	lsrs	r3, r3, #9
 8007742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800774c:	429a      	cmp	r2, r3
 800774e:	d111      	bne.n	8007774 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	0c1b      	lsrs	r3, r3, #16
 8007754:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800775e:	429a      	cmp	r2, r3
 8007760:	d108      	bne.n	8007774 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	0e1b      	lsrs	r3, r3, #24
 8007766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007770:	429a      	cmp	r2, r3
 8007772:	d001      	beq.n	8007778 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3730      	adds	r7, #48	; 0x30
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	58024400 	.word	0x58024400

08007788 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e19c      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800779c:	4b8a      	ldr	r3, [pc, #552]	; (80079c8 <HAL_RCC_ClockConfig+0x240>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d910      	bls.n	80077cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077aa:	4b87      	ldr	r3, [pc, #540]	; (80079c8 <HAL_RCC_ClockConfig+0x240>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f023 020f 	bic.w	r2, r3, #15
 80077b2:	4985      	ldr	r1, [pc, #532]	; (80079c8 <HAL_RCC_ClockConfig+0x240>)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ba:	4b83      	ldr	r3, [pc, #524]	; (80079c8 <HAL_RCC_ClockConfig+0x240>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d001      	beq.n	80077cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e184      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d010      	beq.n	80077fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	4b7b      	ldr	r3, [pc, #492]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d908      	bls.n	80077fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077e8:	4b78      	ldr	r3, [pc, #480]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	4975      	ldr	r1, [pc, #468]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0308 	and.w	r3, r3, #8
 8007802:	2b00      	cmp	r3, #0
 8007804:	d010      	beq.n	8007828 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	695a      	ldr	r2, [r3, #20]
 800780a:	4b70      	ldr	r3, [pc, #448]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007812:	429a      	cmp	r2, r3
 8007814:	d908      	bls.n	8007828 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007816:	4b6d      	ldr	r3, [pc, #436]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	496a      	ldr	r1, [pc, #424]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007824:	4313      	orrs	r3, r2
 8007826:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	2b00      	cmp	r3, #0
 8007832:	d010      	beq.n	8007856 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699a      	ldr	r2, [r3, #24]
 8007838:	4b64      	ldr	r3, [pc, #400]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007840:	429a      	cmp	r2, r3
 8007842:	d908      	bls.n	8007856 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007844:	4b61      	ldr	r3, [pc, #388]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	495e      	ldr	r1, [pc, #376]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007852:	4313      	orrs	r3, r2
 8007854:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0320 	and.w	r3, r3, #32
 800785e:	2b00      	cmp	r3, #0
 8007860:	d010      	beq.n	8007884 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	69da      	ldr	r2, [r3, #28]
 8007866:	4b59      	ldr	r3, [pc, #356]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800786e:	429a      	cmp	r2, r3
 8007870:	d908      	bls.n	8007884 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007872:	4b56      	ldr	r3, [pc, #344]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	4953      	ldr	r1, [pc, #332]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007880:	4313      	orrs	r3, r2
 8007882:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d010      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	4b4d      	ldr	r3, [pc, #308]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	429a      	cmp	r2, r3
 800789e:	d908      	bls.n	80078b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078a0:	4b4a      	ldr	r3, [pc, #296]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f023 020f 	bic.w	r2, r3, #15
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	4947      	ldr	r1, [pc, #284]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d055      	beq.n	800796a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078be:	4b43      	ldr	r3, [pc, #268]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	4940      	ldr	r1, [pc, #256]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d107      	bne.n	80078e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078d8:	4b3c      	ldr	r3, [pc, #240]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d121      	bne.n	8007928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e0f6      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d107      	bne.n	8007900 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078f0:	4b36      	ldr	r3, [pc, #216]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d115      	bne.n	8007928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0ea      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d107      	bne.n	8007918 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007908:	4b30      	ldr	r3, [pc, #192]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0de      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007918:	4b2c      	ldr	r3, [pc, #176]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0d6      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007928:	4b28      	ldr	r3, [pc, #160]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f023 0207 	bic.w	r2, r3, #7
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	4925      	ldr	r1, [pc, #148]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007936:	4313      	orrs	r3, r2
 8007938:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800793a:	f7fa fb23 	bl	8001f84 <HAL_GetTick>
 800793e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007940:	e00a      	b.n	8007958 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007942:	f7fa fb1f 	bl	8001f84 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	4293      	cmp	r3, r2
 8007952:	d901      	bls.n	8007958 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e0be      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007958:	4b1c      	ldr	r3, [pc, #112]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	429a      	cmp	r2, r3
 8007968:	d1eb      	bne.n	8007942 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d010      	beq.n	8007998 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	4b14      	ldr	r3, [pc, #80]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	f003 030f 	and.w	r3, r3, #15
 8007982:	429a      	cmp	r2, r3
 8007984:	d208      	bcs.n	8007998 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007986:	4b11      	ldr	r3, [pc, #68]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f023 020f 	bic.w	r2, r3, #15
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	490e      	ldr	r1, [pc, #56]	; (80079cc <HAL_RCC_ClockConfig+0x244>)
 8007994:	4313      	orrs	r3, r2
 8007996:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007998:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <HAL_RCC_ClockConfig+0x240>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d214      	bcs.n	80079d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a6:	4b08      	ldr	r3, [pc, #32]	; (80079c8 <HAL_RCC_ClockConfig+0x240>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f023 020f 	bic.w	r2, r3, #15
 80079ae:	4906      	ldr	r1, [pc, #24]	; (80079c8 <HAL_RCC_ClockConfig+0x240>)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b6:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <HAL_RCC_ClockConfig+0x240>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d005      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e086      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x34e>
 80079c8:	52002000 	.word	0x52002000
 80079cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d010      	beq.n	80079fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691a      	ldr	r2, [r3, #16]
 80079e0:	4b3f      	ldr	r3, [pc, #252]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d208      	bcs.n	80079fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079ec:	4b3c      	ldr	r3, [pc, #240]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	4939      	ldr	r1, [pc, #228]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d010      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695a      	ldr	r2, [r3, #20]
 8007a0e:	4b34      	ldr	r3, [pc, #208]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d208      	bcs.n	8007a2c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a1a:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	492e      	ldr	r1, [pc, #184]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d010      	beq.n	8007a5a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699a      	ldr	r2, [r3, #24]
 8007a3c:	4b28      	ldr	r3, [pc, #160]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d208      	bcs.n	8007a5a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a48:	4b25      	ldr	r3, [pc, #148]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	4922      	ldr	r1, [pc, #136]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d010      	beq.n	8007a88 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	69da      	ldr	r2, [r3, #28]
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d208      	bcs.n	8007a88 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007a76:	4b1a      	ldr	r3, [pc, #104]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	4917      	ldr	r1, [pc, #92]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a88:	f000 f834 	bl	8007af4 <HAL_RCC_GetSysClockFreq>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	0a1b      	lsrs	r3, r3, #8
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	4912      	ldr	r1, [pc, #72]	; (8007ae4 <HAL_RCC_ClockConfig+0x35c>)
 8007a9a:	5ccb      	ldrb	r3, [r1, r3]
 8007a9c:	f003 031f 	and.w	r3, r3, #31
 8007aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007aa6:	4b0e      	ldr	r3, [pc, #56]	; (8007ae0 <HAL_RCC_ClockConfig+0x358>)
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	4a0d      	ldr	r2, [pc, #52]	; (8007ae4 <HAL_RCC_ClockConfig+0x35c>)
 8007ab0:	5cd3      	ldrb	r3, [r2, r3]
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8007abc:	4a0a      	ldr	r2, [pc, #40]	; (8007ae8 <HAL_RCC_ClockConfig+0x360>)
 8007abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <HAL_RCC_ClockConfig+0x364>)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007ac6:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <HAL_RCC_ClockConfig+0x368>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fa fa10 	bl	8001ef0 <HAL_InitTick>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	58024400 	.word	0x58024400
 8007ae4:	08012c50 	.word	0x08012c50
 8007ae8:	24000004 	.word	0x24000004
 8007aec:	24000000 	.word	0x24000000
 8007af0:	24000008 	.word	0x24000008

08007af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b089      	sub	sp, #36	; 0x24
 8007af8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007afa:	4bb3      	ldr	r3, [pc, #716]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b02:	2b18      	cmp	r3, #24
 8007b04:	f200 8155 	bhi.w	8007db2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b75 	.word	0x08007b75
 8007b14:	08007db3 	.word	0x08007db3
 8007b18:	08007db3 	.word	0x08007db3
 8007b1c:	08007db3 	.word	0x08007db3
 8007b20:	08007db3 	.word	0x08007db3
 8007b24:	08007db3 	.word	0x08007db3
 8007b28:	08007db3 	.word	0x08007db3
 8007b2c:	08007db3 	.word	0x08007db3
 8007b30:	08007b9b 	.word	0x08007b9b
 8007b34:	08007db3 	.word	0x08007db3
 8007b38:	08007db3 	.word	0x08007db3
 8007b3c:	08007db3 	.word	0x08007db3
 8007b40:	08007db3 	.word	0x08007db3
 8007b44:	08007db3 	.word	0x08007db3
 8007b48:	08007db3 	.word	0x08007db3
 8007b4c:	08007db3 	.word	0x08007db3
 8007b50:	08007ba1 	.word	0x08007ba1
 8007b54:	08007db3 	.word	0x08007db3
 8007b58:	08007db3 	.word	0x08007db3
 8007b5c:	08007db3 	.word	0x08007db3
 8007b60:	08007db3 	.word	0x08007db3
 8007b64:	08007db3 	.word	0x08007db3
 8007b68:	08007db3 	.word	0x08007db3
 8007b6c:	08007db3 	.word	0x08007db3
 8007b70:	08007ba7 	.word	0x08007ba7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b74:	4b94      	ldr	r3, [pc, #592]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0320 	and.w	r3, r3, #32
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d009      	beq.n	8007b94 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b80:	4b91      	ldr	r3, [pc, #580]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	08db      	lsrs	r3, r3, #3
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	4a90      	ldr	r2, [pc, #576]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b90:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007b92:	e111      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b94:	4b8d      	ldr	r3, [pc, #564]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b96:	61bb      	str	r3, [r7, #24]
    break;
 8007b98:	e10e      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007b9a:	4b8d      	ldr	r3, [pc, #564]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b9c:	61bb      	str	r3, [r7, #24]
    break;
 8007b9e:	e10b      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007ba0:	4b8c      	ldr	r3, [pc, #560]	; (8007dd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007ba2:	61bb      	str	r3, [r7, #24]
    break;
 8007ba4:	e108      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ba6:	4b88      	ldr	r3, [pc, #544]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007bb0:	4b85      	ldr	r3, [pc, #532]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb4:	091b      	lsrs	r3, r3, #4
 8007bb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bbc:	4b82      	ldr	r3, [pc, #520]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007bc6:	4b80      	ldr	r3, [pc, #512]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	08db      	lsrs	r3, r3, #3
 8007bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	fb02 f303 	mul.w	r3, r2, r3
 8007bd6:	ee07 3a90 	vmov	s15, r3
 8007bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bde:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80e1 	beq.w	8007dac <HAL_RCC_GetSysClockFreq+0x2b8>
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	f000 8083 	beq.w	8007cf8 <HAL_RCC_GetSysClockFreq+0x204>
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	f200 80a1 	bhi.w	8007d3c <HAL_RCC_GetSysClockFreq+0x248>
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d003      	beq.n	8007c08 <HAL_RCC_GetSysClockFreq+0x114>
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d056      	beq.n	8007cb4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c06:	e099      	b.n	8007d3c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c08:	4b6f      	ldr	r3, [pc, #444]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d02d      	beq.n	8007c70 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c14:	4b6c      	ldr	r3, [pc, #432]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	08db      	lsrs	r3, r3, #3
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	4a6b      	ldr	r2, [pc, #428]	; (8007dcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c20:	fa22 f303 	lsr.w	r3, r2, r3
 8007c24:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	ee07 3a90 	vmov	s15, r3
 8007c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3e:	4b62      	ldr	r3, [pc, #392]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c52:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007c6e:	e087      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007ddc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c82:	4b51      	ldr	r3, [pc, #324]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c96:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb2:	e065      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007de0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc6:	4b40      	ldr	r3, [pc, #256]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cda:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cf6:	e043      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d02:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007de4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d0a:	4b2f      	ldr	r3, [pc, #188]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d1e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d3a:	e021      	b.n	8007d80 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007de0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d4e:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d56:	ee07 3a90 	vmov	s15, r3
 8007d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d62:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007dd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d7e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007d80:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	0a5b      	lsrs	r3, r3, #9
 8007d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	ee07 3a90 	vmov	s15, r3
 8007d94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da4:	ee17 3a90 	vmov	r3, s15
 8007da8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007daa:	e005      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61bb      	str	r3, [r7, #24]
    break;
 8007db0:	e002      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007db2:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007db4:	61bb      	str	r3, [r7, #24]
    break;
 8007db6:	bf00      	nop
  }

  return sysclockfreq;
 8007db8:	69bb      	ldr	r3, [r7, #24]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3724      	adds	r7, #36	; 0x24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	58024400 	.word	0x58024400
 8007dcc:	03d09000 	.word	0x03d09000
 8007dd0:	003d0900 	.word	0x003d0900
 8007dd4:	00f42400 	.word	0x00f42400
 8007dd8:	46000000 	.word	0x46000000
 8007ddc:	4c742400 	.word	0x4c742400
 8007de0:	4a742400 	.word	0x4a742400
 8007de4:	4b742400 	.word	0x4b742400

08007de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007dee:	f7ff fe81 	bl	8007af4 <HAL_RCC_GetSysClockFreq>
 8007df2:	4602      	mov	r2, r0
 8007df4:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <HAL_RCC_GetHCLKFreq+0x50>)
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	0a1b      	lsrs	r3, r3, #8
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	490f      	ldr	r1, [pc, #60]	; (8007e3c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e00:	5ccb      	ldrb	r3, [r1, r3]
 8007e02:	f003 031f 	and.w	r3, r3, #31
 8007e06:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	f003 030f 	and.w	r3, r3, #15
 8007e14:	4a09      	ldr	r2, [pc, #36]	; (8007e3c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e16:	5cd3      	ldrb	r3, [r2, r3]
 8007e18:	f003 031f 	and.w	r3, r3, #31
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e22:	4a07      	ldr	r2, [pc, #28]	; (8007e40 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e26:	4a07      	ldr	r2, [pc, #28]	; (8007e44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	58024400 	.word	0x58024400
 8007e3c:	08012c50 	.word	0x08012c50
 8007e40:	24000004 	.word	0x24000004
 8007e44:	24000000 	.word	0x24000000

08007e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e4c:	f7ff ffcc 	bl	8007de8 <HAL_RCC_GetHCLKFreq>
 8007e50:	4602      	mov	r2, r0
 8007e52:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	091b      	lsrs	r3, r3, #4
 8007e58:	f003 0307 	and.w	r3, r3, #7
 8007e5c:	4904      	ldr	r1, [pc, #16]	; (8007e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e5e:	5ccb      	ldrb	r3, [r1, r3]
 8007e60:	f003 031f 	and.w	r3, r3, #31
 8007e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	58024400 	.word	0x58024400
 8007e70:	08012c50 	.word	0x08012c50

08007e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e78:	f7ff ffb6 	bl	8007de8 <HAL_RCC_GetHCLKFreq>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	0a1b      	lsrs	r3, r3, #8
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	4904      	ldr	r1, [pc, #16]	; (8007e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e8a:	5ccb      	ldrb	r3, [r1, r3]
 8007e8c:	f003 031f 	and.w	r3, r3, #31
 8007e90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	08012c50 	.word	0x08012c50

08007ea0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	223f      	movs	r2, #63	; 0x3f
 8007eae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <HAL_RCC_GetClockConfig+0x7c>)
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f003 0207 	and.w	r2, r3, #7
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007ebc:	4b17      	ldr	r3, [pc, #92]	; (8007f1c <HAL_RCC_GetClockConfig+0x7c>)
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007ec8:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <HAL_RCC_GetClockConfig+0x7c>)
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	f003 020f 	and.w	r2, r3, #15
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ed4:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <HAL_RCC_GetClockConfig+0x7c>)
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ee0:	4b0e      	ldr	r3, [pc, #56]	; (8007f1c <HAL_RCC_GetClockConfig+0x7c>)
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007eec:	4b0b      	ldr	r3, [pc, #44]	; (8007f1c <HAL_RCC_GetClockConfig+0x7c>)
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007ef8:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <HAL_RCC_GetClockConfig+0x7c>)
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f04:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <HAL_RCC_GetClockConfig+0x80>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 020f 	and.w	r2, r3, #15
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	601a      	str	r2, [r3, #0]
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	58024400 	.word	0x58024400
 8007f20:	52002000 	.word	0x52002000

08007f24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f30:	2300      	movs	r3, #0
 8007f32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d03f      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f48:	d02a      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007f4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f4e:	d824      	bhi.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f54:	d018      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f5a:	d81e      	bhi.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f64:	d007      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007f66:	e018      	b.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f68:	4ba3      	ldr	r3, [pc, #652]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6c:	4aa2      	ldr	r2, [pc, #648]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f74:	e015      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	2102      	movs	r1, #2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f9d5 	bl	800932c <RCCEx_PLL2_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f86:	e00c      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	3324      	adds	r3, #36	; 0x24
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f001 fa7e 	bl	8009490 <RCCEx_PLL3_Config>
 8007f94:	4603      	mov	r3, r0
 8007f96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007f98:	e003      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9e:	e000      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d109      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fa8:	4b93      	ldr	r3, [pc, #588]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb4:	4990      	ldr	r1, [pc, #576]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	650b      	str	r3, [r1, #80]	; 0x50
 8007fba:	e001      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d03d      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d826      	bhi.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007fd4:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fda:	bf00      	nop
 8007fdc:	08007ff1 	.word	0x08007ff1
 8007fe0:	08007fff 	.word	0x08007fff
 8007fe4:	08008011 	.word	0x08008011
 8007fe8:	08008029 	.word	0x08008029
 8007fec:	08008029 	.word	0x08008029
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff0:	4b81      	ldr	r3, [pc, #516]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	4a80      	ldr	r2, [pc, #512]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ffc:	e015      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3304      	adds	r3, #4
 8008002:	2100      	movs	r1, #0
 8008004:	4618      	mov	r0, r3
 8008006:	f001 f991 	bl	800932c <RCCEx_PLL2_Config>
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800800e:	e00c      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3324      	adds	r3, #36	; 0x24
 8008014:	2100      	movs	r1, #0
 8008016:	4618      	mov	r0, r3
 8008018:	f001 fa3a 	bl	8009490 <RCCEx_PLL3_Config>
 800801c:	4603      	mov	r3, r0
 800801e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008020:	e003      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]
      break;
 8008026:	e000      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008030:	4b71      	ldr	r3, [pc, #452]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008034:	f023 0207 	bic.w	r2, r3, #7
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803c:	496e      	ldr	r1, [pc, #440]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800803e:	4313      	orrs	r3, r2
 8008040:	650b      	str	r3, [r1, #80]	; 0x50
 8008042:	e001      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008050:	2b00      	cmp	r3, #0
 8008052:	d042      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800805c:	d02b      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800805e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008062:	d825      	bhi.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008064:	2bc0      	cmp	r3, #192	; 0xc0
 8008066:	d028      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008068:	2bc0      	cmp	r3, #192	; 0xc0
 800806a:	d821      	bhi.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800806c:	2b80      	cmp	r3, #128	; 0x80
 800806e:	d016      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008070:	2b80      	cmp	r3, #128	; 0x80
 8008072:	d81d      	bhi.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d007      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800807c:	e018      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800807e:	4b5e      	ldr	r3, [pc, #376]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	4a5d      	ldr	r2, [pc, #372]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008088:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800808a:	e017      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3304      	adds	r3, #4
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f001 f94a 	bl	800932c <RCCEx_PLL2_Config>
 8008098:	4603      	mov	r3, r0
 800809a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800809c:	e00e      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3324      	adds	r3, #36	; 0x24
 80080a2:	2100      	movs	r1, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 f9f3 	bl	8009490 <RCCEx_PLL3_Config>
 80080aa:	4603      	mov	r3, r0
 80080ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80080ae:	e005      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	75fb      	strb	r3, [r7, #23]
      break;
 80080b4:	e002      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80080ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80080c2:	4b4d      	ldr	r3, [pc, #308]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ce:	494a      	ldr	r1, [pc, #296]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	650b      	str	r3, [r1, #80]	; 0x50
 80080d4:	e001      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d049      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080f0:	d030      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80080f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080f6:	d82a      	bhi.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080fc:	d02c      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80080fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008102:	d824      	bhi.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008108:	d018      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800810a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800810e:	d81e      	bhi.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008118:	d007      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800811a:	e018      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811c:	4b36      	ldr	r3, [pc, #216]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	4a35      	ldr	r2, [pc, #212]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008126:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008128:	e017      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	3304      	adds	r3, #4
 800812e:	2100      	movs	r1, #0
 8008130:	4618      	mov	r0, r3
 8008132:	f001 f8fb 	bl	800932c <RCCEx_PLL2_Config>
 8008136:	4603      	mov	r3, r0
 8008138:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800813a:	e00e      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3324      	adds	r3, #36	; 0x24
 8008140:	2100      	movs	r1, #0
 8008142:	4618      	mov	r0, r3
 8008144:	f001 f9a4 	bl	8009490 <RCCEx_PLL3_Config>
 8008148:	4603      	mov	r3, r0
 800814a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800814c:	e005      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
      break;
 8008152:	e002      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008154:	bf00      	nop
 8008156:	e000      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008158:	bf00      	nop
    }

    if(ret == HAL_OK)
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10a      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008160:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008164:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800816e:	4922      	ldr	r1, [pc, #136]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008170:	4313      	orrs	r3, r2
 8008172:	658b      	str	r3, [r1, #88]	; 0x58
 8008174:	e001      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008182:	2b00      	cmp	r3, #0
 8008184:	d04b      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800818c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008190:	d030      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008196:	d82a      	bhi.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008198:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800819c:	d02e      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800819e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081a2:	d824      	bhi.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80081a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081a8:	d018      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80081aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ae:	d81e      	bhi.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80081b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081b8:	d007      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80081ba:	e018      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081bc:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80081be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c0:	4a0d      	ldr	r2, [pc, #52]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80081c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081c8:	e019      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3304      	adds	r3, #4
 80081ce:	2100      	movs	r1, #0
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 f8ab 	bl	800932c <RCCEx_PLL2_Config>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80081da:	e010      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3324      	adds	r3, #36	; 0x24
 80081e0:	2100      	movs	r1, #0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f001 f954 	bl	8009490 <RCCEx_PLL3_Config>
 80081e8:	4603      	mov	r3, r0
 80081ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081ec:	e007      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	75fb      	strb	r3, [r7, #23]
      break;
 80081f2:	e004      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80081f4:	bf00      	nop
 80081f6:	e002      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80081f8:	58024400 	.word	0x58024400
      break;
 80081fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008204:	4b99      	ldr	r3, [pc, #612]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008208:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008212:	4996      	ldr	r1, [pc, #600]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008214:	4313      	orrs	r3, r2
 8008216:	658b      	str	r3, [r1, #88]	; 0x58
 8008218:	e001      	b.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d032      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822e:	2b30      	cmp	r3, #48	; 0x30
 8008230:	d01c      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008232:	2b30      	cmp	r3, #48	; 0x30
 8008234:	d817      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008236:	2b20      	cmp	r3, #32
 8008238:	d00c      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800823a:	2b20      	cmp	r3, #32
 800823c:	d813      	bhi.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d016      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008242:	2b10      	cmp	r3, #16
 8008244:	d10f      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008246:	4b89      	ldr	r3, [pc, #548]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	4a88      	ldr	r2, [pc, #544]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800824c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008250:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008252:	e00e      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3304      	adds	r3, #4
 8008258:	2102      	movs	r1, #2
 800825a:	4618      	mov	r0, r3
 800825c:	f001 f866 	bl	800932c <RCCEx_PLL2_Config>
 8008260:	4603      	mov	r3, r0
 8008262:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008264:	e005      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	75fb      	strb	r3, [r7, #23]
      break;
 800826a:	e002      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800826c:	bf00      	nop
 800826e:	e000      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d109      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008278:	4b7c      	ldr	r3, [pc, #496]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800827a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008284:	4979      	ldr	r1, [pc, #484]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008286:	4313      	orrs	r3, r2
 8008288:	64cb      	str	r3, [r1, #76]	; 0x4c
 800828a:	e001      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d047      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082a4:	d030      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80082a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082aa:	d82a      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80082ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082b0:	d02c      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80082b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082b6:	d824      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80082b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082bc:	d018      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80082be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c2:	d81e      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80082c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082cc:	d007      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80082ce:	e018      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d0:	4b66      	ldr	r3, [pc, #408]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	4a65      	ldr	r2, [pc, #404]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80082d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082dc:	e017      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3304      	adds	r3, #4
 80082e2:	2100      	movs	r1, #0
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 f821 	bl	800932c <RCCEx_PLL2_Config>
 80082ea:	4603      	mov	r3, r0
 80082ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082ee:	e00e      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3324      	adds	r3, #36	; 0x24
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 f8ca 	bl	8009490 <RCCEx_PLL3_Config>
 80082fc:	4603      	mov	r3, r0
 80082fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008300:	e005      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	75fb      	strb	r3, [r7, #23]
      break;
 8008306:	e002      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008308:	bf00      	nop
 800830a:	e000      	b.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800830c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d109      	bne.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008314:	4b55      	ldr	r3, [pc, #340]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008318:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008320:	4952      	ldr	r1, [pc, #328]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008322:	4313      	orrs	r3, r2
 8008324:	650b      	str	r3, [r1, #80]	; 0x50
 8008326:	e001      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008334:	2b00      	cmp	r3, #0
 8008336:	d049      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008340:	d02e      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008342:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008346:	d828      	bhi.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008348:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800834c:	d02a      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800834e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008352:	d822      	bhi.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008354:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008358:	d026      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800835a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800835e:	d81c      	bhi.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008364:	d010      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800836a:	d816      	bhi.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01d      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008374:	d111      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3304      	adds	r3, #4
 800837a:	2101      	movs	r1, #1
 800837c:	4618      	mov	r0, r3
 800837e:	f000 ffd5 	bl	800932c <RCCEx_PLL2_Config>
 8008382:	4603      	mov	r3, r0
 8008384:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008386:	e012      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3324      	adds	r3, #36	; 0x24
 800838c:	2101      	movs	r1, #1
 800838e:	4618      	mov	r0, r3
 8008390:	f001 f87e 	bl	8009490 <RCCEx_PLL3_Config>
 8008394:	4603      	mov	r3, r0
 8008396:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008398:	e009      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	75fb      	strb	r3, [r7, #23]
      break;
 800839e:	e006      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80083a0:	bf00      	nop
 80083a2:	e004      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80083a4:	bf00      	nop
 80083a6:	e002      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80083a8:	bf00      	nop
 80083aa:	e000      	b.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80083ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d109      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80083b4:	4b2d      	ldr	r3, [pc, #180]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80083b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c0:	492a      	ldr	r1, [pc, #168]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	650b      	str	r3, [r1, #80]	; 0x50
 80083c6:	e001      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d04d      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083e2:	d02e      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80083e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083e8:	d828      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80083ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ee:	d02a      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80083f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f4:	d822      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80083f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083fa:	d026      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80083fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008400:	d81c      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008406:	d010      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800840c:	d816      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01d      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008416:	d111      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3304      	adds	r3, #4
 800841c:	2101      	movs	r1, #1
 800841e:	4618      	mov	r0, r3
 8008420:	f000 ff84 	bl	800932c <RCCEx_PLL2_Config>
 8008424:	4603      	mov	r3, r0
 8008426:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008428:	e012      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3324      	adds	r3, #36	; 0x24
 800842e:	2101      	movs	r1, #1
 8008430:	4618      	mov	r0, r3
 8008432:	f001 f82d 	bl	8009490 <RCCEx_PLL3_Config>
 8008436:	4603      	mov	r3, r0
 8008438:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800843a:	e009      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	75fb      	strb	r3, [r7, #23]
      break;
 8008440:	e006      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008442:	bf00      	nop
 8008444:	e004      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008446:	bf00      	nop
 8008448:	e002      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800844a:	bf00      	nop
 800844c:	e000      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800844e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10c      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008456:	4b05      	ldr	r3, [pc, #20]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800845a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008464:	4901      	ldr	r1, [pc, #4]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008466:	4313      	orrs	r3, r2
 8008468:	658b      	str	r3, [r1, #88]	; 0x58
 800846a:	e003      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800846c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d02f      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008488:	d00e      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800848a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800848e:	d814      	bhi.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008490:	2b00      	cmp	r3, #0
 8008492:	d015      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008498:	d10f      	bne.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849a:	4baf      	ldr	r3, [pc, #700]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	4aae      	ldr	r2, [pc, #696]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80084a6:	e00c      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3304      	adds	r3, #4
 80084ac:	2101      	movs	r1, #1
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 ff3c 	bl	800932c <RCCEx_PLL2_Config>
 80084b4:	4603      	mov	r3, r0
 80084b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80084b8:	e003      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	75fb      	strb	r3, [r7, #23]
      break;
 80084be:	e000      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80084c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d109      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084c8:	4ba3      	ldr	r3, [pc, #652]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d4:	49a0      	ldr	r1, [pc, #640]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	650b      	str	r3, [r1, #80]	; 0x50
 80084da:	e001      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d032      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d81b      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80084f4:	a201      	add	r2, pc, #4	; (adr r2, 80084fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80084f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fa:	bf00      	nop
 80084fc:	08008533 	.word	0x08008533
 8008500:	0800850d 	.word	0x0800850d
 8008504:	0800851b 	.word	0x0800851b
 8008508:	08008533 	.word	0x08008533
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800850c:	4b92      	ldr	r3, [pc, #584]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	4a91      	ldr	r2, [pc, #580]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008518:	e00c      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3304      	adds	r3, #4
 800851e:	2102      	movs	r1, #2
 8008520:	4618      	mov	r0, r3
 8008522:	f000 ff03 	bl	800932c <RCCEx_PLL2_Config>
 8008526:	4603      	mov	r3, r0
 8008528:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800852a:	e003      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
      break;
 8008530:	e000      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800853a:	4b87      	ldr	r3, [pc, #540]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800853c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853e:	f023 0203 	bic.w	r2, r3, #3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008546:	4984      	ldr	r1, [pc, #528]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008548:	4313      	orrs	r3, r2
 800854a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800854c:	e001      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854e:	7dfb      	ldrb	r3, [r7, #23]
 8008550:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 8086 	beq.w	800866c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008560:	4b7e      	ldr	r3, [pc, #504]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a7d      	ldr	r2, [pc, #500]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800856a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800856c:	f7f9 fd0a 	bl	8001f84 <HAL_GetTick>
 8008570:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008572:	e009      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008574:	f7f9 fd06 	bl	8001f84 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b64      	cmp	r3, #100	; 0x64
 8008580:	d902      	bls.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	75fb      	strb	r3, [r7, #23]
        break;
 8008586:	e005      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008588:	4b74      	ldr	r3, [pc, #464]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008590:	2b00      	cmp	r3, #0
 8008592:	d0ef      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008594:	7dfb      	ldrb	r3, [r7, #23]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d166      	bne.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800859a:	4b6f      	ldr	r3, [pc, #444]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800859c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085a4:	4053      	eors	r3, r2
 80085a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d013      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085ae:	4b6a      	ldr	r3, [pc, #424]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085b8:	4b67      	ldr	r3, [pc, #412]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085bc:	4a66      	ldr	r2, [pc, #408]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085c4:	4b64      	ldr	r3, [pc, #400]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c8:	4a63      	ldr	r2, [pc, #396]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80085d0:	4a61      	ldr	r2, [pc, #388]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80085dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e0:	d115      	bne.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e2:	f7f9 fccf 	bl	8001f84 <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085e8:	e00b      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ea:	f7f9 fccb 	bl	8001f84 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d902      	bls.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	75fb      	strb	r3, [r7, #23]
            break;
 8008600:	e005      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008602:	4b55      	ldr	r3, [pc, #340]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0ed      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d126      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800861a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800861e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008622:	d10d      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008624:	4b4c      	ldr	r3, [pc, #304]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008632:	0919      	lsrs	r1, r3, #4
 8008634:	4b4a      	ldr	r3, [pc, #296]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008636:	400b      	ands	r3, r1
 8008638:	4947      	ldr	r1, [pc, #284]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800863a:	4313      	orrs	r3, r2
 800863c:	610b      	str	r3, [r1, #16]
 800863e:	e005      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008640:	4b45      	ldr	r3, [pc, #276]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	4a44      	ldr	r2, [pc, #272]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008646:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800864a:	6113      	str	r3, [r2, #16]
 800864c:	4b42      	ldr	r3, [pc, #264]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800864e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800865a:	493f      	ldr	r1, [pc, #252]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800865c:	4313      	orrs	r3, r2
 800865e:	670b      	str	r3, [r1, #112]	; 0x70
 8008660:	e004      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	75bb      	strb	r3, [r7, #22]
 8008666:	e001      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 8085 	beq.w	8008784 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800867e:	2b28      	cmp	r3, #40	; 0x28
 8008680:	d866      	bhi.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	08008765 	.word	0x08008765
 800868c:	08008751 	.word	0x08008751
 8008690:	08008751 	.word	0x08008751
 8008694:	08008751 	.word	0x08008751
 8008698:	08008751 	.word	0x08008751
 800869c:	08008751 	.word	0x08008751
 80086a0:	08008751 	.word	0x08008751
 80086a4:	08008751 	.word	0x08008751
 80086a8:	0800872d 	.word	0x0800872d
 80086ac:	08008751 	.word	0x08008751
 80086b0:	08008751 	.word	0x08008751
 80086b4:	08008751 	.word	0x08008751
 80086b8:	08008751 	.word	0x08008751
 80086bc:	08008751 	.word	0x08008751
 80086c0:	08008751 	.word	0x08008751
 80086c4:	08008751 	.word	0x08008751
 80086c8:	0800873f 	.word	0x0800873f
 80086cc:	08008751 	.word	0x08008751
 80086d0:	08008751 	.word	0x08008751
 80086d4:	08008751 	.word	0x08008751
 80086d8:	08008751 	.word	0x08008751
 80086dc:	08008751 	.word	0x08008751
 80086e0:	08008751 	.word	0x08008751
 80086e4:	08008751 	.word	0x08008751
 80086e8:	08008765 	.word	0x08008765
 80086ec:	08008751 	.word	0x08008751
 80086f0:	08008751 	.word	0x08008751
 80086f4:	08008751 	.word	0x08008751
 80086f8:	08008751 	.word	0x08008751
 80086fc:	08008751 	.word	0x08008751
 8008700:	08008751 	.word	0x08008751
 8008704:	08008751 	.word	0x08008751
 8008708:	08008765 	.word	0x08008765
 800870c:	08008751 	.word	0x08008751
 8008710:	08008751 	.word	0x08008751
 8008714:	08008751 	.word	0x08008751
 8008718:	08008751 	.word	0x08008751
 800871c:	08008751 	.word	0x08008751
 8008720:	08008751 	.word	0x08008751
 8008724:	08008751 	.word	0x08008751
 8008728:	08008765 	.word	0x08008765
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3304      	adds	r3, #4
 8008730:	2101      	movs	r1, #1
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fdfa 	bl	800932c <RCCEx_PLL2_Config>
 8008738:	4603      	mov	r3, r0
 800873a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800873c:	e013      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3324      	adds	r3, #36	; 0x24
 8008742:	2101      	movs	r1, #1
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fea3 	bl	8009490 <RCCEx_PLL3_Config>
 800874a:	4603      	mov	r3, r0
 800874c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800874e:	e00a      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	75fb      	strb	r3, [r7, #23]
      break;
 8008754:	e007      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008756:	bf00      	nop
 8008758:	58024400 	.word	0x58024400
 800875c:	58024800 	.word	0x58024800
 8008760:	00ffffcf 	.word	0x00ffffcf
      break;
 8008764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d109      	bne.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800876c:	4b96      	ldr	r3, [pc, #600]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800876e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008770:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008778:	4993      	ldr	r1, [pc, #588]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800877a:	4313      	orrs	r3, r2
 800877c:	654b      	str	r3, [r1, #84]	; 0x54
 800877e:	e001      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d038      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008794:	2b05      	cmp	r3, #5
 8008796:	d821      	bhi.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	080087e3 	.word	0x080087e3
 80087a4:	080087b9 	.word	0x080087b9
 80087a8:	080087cb 	.word	0x080087cb
 80087ac:	080087e3 	.word	0x080087e3
 80087b0:	080087e3 	.word	0x080087e3
 80087b4:	080087e3 	.word	0x080087e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3304      	adds	r3, #4
 80087bc:	2101      	movs	r1, #1
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fdb4 	bl	800932c <RCCEx_PLL2_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80087c8:	e00c      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3324      	adds	r3, #36	; 0x24
 80087ce:	2101      	movs	r1, #1
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fe5d 	bl	8009490 <RCCEx_PLL3_Config>
 80087d6:	4603      	mov	r3, r0
 80087d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80087da:	e003      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	75fb      	strb	r3, [r7, #23]
      break;
 80087e0:	e000      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80087e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d109      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80087ea:	4b77      	ldr	r3, [pc, #476]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	f023 0207 	bic.w	r2, r3, #7
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f6:	4974      	ldr	r1, [pc, #464]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	654b      	str	r3, [r1, #84]	; 0x54
 80087fc:	e001      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	2b00      	cmp	r3, #0
 800880c:	d03a      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008814:	2b05      	cmp	r3, #5
 8008816:	d821      	bhi.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008818:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800881a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881e:	bf00      	nop
 8008820:	08008863 	.word	0x08008863
 8008824:	08008839 	.word	0x08008839
 8008828:	0800884b 	.word	0x0800884b
 800882c:	08008863 	.word	0x08008863
 8008830:	08008863 	.word	0x08008863
 8008834:	08008863 	.word	0x08008863
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	3304      	adds	r3, #4
 800883c:	2101      	movs	r1, #1
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fd74 	bl	800932c <RCCEx_PLL2_Config>
 8008844:	4603      	mov	r3, r0
 8008846:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008848:	e00c      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3324      	adds	r3, #36	; 0x24
 800884e:	2101      	movs	r1, #1
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fe1d 	bl	8009490 <RCCEx_PLL3_Config>
 8008856:	4603      	mov	r3, r0
 8008858:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800885a:	e003      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	75fb      	strb	r3, [r7, #23]
      break;
 8008860:	e000      	b.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10a      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800886a:	4b57      	ldr	r3, [pc, #348]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800886c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800886e:	f023 0207 	bic.w	r2, r3, #7
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008878:	4953      	ldr	r1, [pc, #332]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800887a:	4313      	orrs	r3, r2
 800887c:	658b      	str	r3, [r1, #88]	; 0x58
 800887e:	e001      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0320 	and.w	r3, r3, #32
 800888c:	2b00      	cmp	r3, #0
 800888e:	d04b      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800889a:	d02e      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800889c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088a0:	d828      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80088a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088a6:	d02a      	beq.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80088a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ac:	d822      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80088ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088b2:	d026      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80088b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088b8:	d81c      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80088ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088be:	d010      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80088c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088c4:	d816      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d01d      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80088ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088ce:	d111      	bne.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3304      	adds	r3, #4
 80088d4:	2100      	movs	r1, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fd28 	bl	800932c <RCCEx_PLL2_Config>
 80088dc:	4603      	mov	r3, r0
 80088de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80088e0:	e012      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3324      	adds	r3, #36	; 0x24
 80088e6:	2102      	movs	r1, #2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 fdd1 	bl	8009490 <RCCEx_PLL3_Config>
 80088ee:	4603      	mov	r3, r0
 80088f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80088f2:	e009      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	75fb      	strb	r3, [r7, #23]
      break;
 80088f8:	e006      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80088fa:	bf00      	nop
 80088fc:	e004      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80088fe:	bf00      	nop
 8008900:	e002      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008902:	bf00      	nop
 8008904:	e000      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800890e:	4b2e      	ldr	r3, [pc, #184]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008912:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800891c:	492a      	ldr	r1, [pc, #168]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800891e:	4313      	orrs	r3, r2
 8008920:	654b      	str	r3, [r1, #84]	; 0x54
 8008922:	e001      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008930:	2b00      	cmp	r3, #0
 8008932:	d04d      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800893a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800893e:	d02e      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008940:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008944:	d828      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800894a:	d02a      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800894c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008950:	d822      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008956:	d026      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008958:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800895c:	d81c      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800895e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008962:	d010      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008968:	d816      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d01d      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800896e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008972:	d111      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3304      	adds	r3, #4
 8008978:	2100      	movs	r1, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fcd6 	bl	800932c <RCCEx_PLL2_Config>
 8008980:	4603      	mov	r3, r0
 8008982:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008984:	e012      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3324      	adds	r3, #36	; 0x24
 800898a:	2102      	movs	r1, #2
 800898c:	4618      	mov	r0, r3
 800898e:	f000 fd7f 	bl	8009490 <RCCEx_PLL3_Config>
 8008992:	4603      	mov	r3, r0
 8008994:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008996:	e009      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	75fb      	strb	r3, [r7, #23]
      break;
 800899c:	e006      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800899e:	bf00      	nop
 80089a0:	e004      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80089a2:	bf00      	nop
 80089a4:	e002      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80089a6:	bf00      	nop
 80089a8:	e000      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80089aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10c      	bne.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089b2:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80089b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089c0:	4901      	ldr	r1, [pc, #4]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	658b      	str	r3, [r1, #88]	; 0x58
 80089c6:	e003      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80089c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d04b      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089e6:	d02e      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80089e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089ec:	d828      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80089ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f2:	d02a      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80089f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089f8:	d822      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80089fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089fe:	d026      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8008a00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a04:	d81c      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a0a:	d010      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a10:	d816      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d01d      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a1a:	d111      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3304      	adds	r3, #4
 8008a20:	2100      	movs	r1, #0
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fc82 	bl	800932c <RCCEx_PLL2_Config>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a2c:	e012      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3324      	adds	r3, #36	; 0x24
 8008a32:	2102      	movs	r1, #2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fd2b 	bl	8009490 <RCCEx_PLL3_Config>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a3e:	e009      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	75fb      	strb	r3, [r7, #23]
      break;
 8008a44:	e006      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008a46:	bf00      	nop
 8008a48:	e004      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008a4a:	bf00      	nop
 8008a4c:	e002      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008a4e:	bf00      	nop
 8008a50:	e000      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10a      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a5a:	4b9d      	ldr	r3, [pc, #628]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a68:	4999      	ldr	r1, [pc, #612]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	658b      	str	r3, [r1, #88]	; 0x58
 8008a6e:	e001      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01a      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8a:	d10a      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3324      	adds	r3, #36	; 0x24
 8008a90:	2102      	movs	r1, #2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 fcfc 	bl	8009490 <RCCEx_PLL3_Config>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008aa2:	4b8b      	ldr	r3, [pc, #556]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ab0:	4987      	ldr	r1, [pc, #540]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01a      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008acc:	d10a      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	3324      	adds	r3, #36	; 0x24
 8008ad2:	2102      	movs	r1, #2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 fcdb 	bl	8009490 <RCCEx_PLL3_Config>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ae4:	4b7a      	ldr	r3, [pc, #488]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008af2:	4977      	ldr	r1, [pc, #476]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d034      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b0e:	d01d      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b14:	d817      	bhi.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b1e:	d009      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008b20:	e011      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3304      	adds	r3, #4
 8008b26:	2100      	movs	r1, #0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fbff 	bl	800932c <RCCEx_PLL2_Config>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b32:	e00c      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3324      	adds	r3, #36	; 0x24
 8008b38:	2102      	movs	r1, #2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fca8 	bl	8009490 <RCCEx_PLL3_Config>
 8008b40:	4603      	mov	r3, r0
 8008b42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b44:	e003      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	75fb      	strb	r3, [r7, #23]
      break;
 8008b4a:	e000      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b54:	4b5e      	ldr	r3, [pc, #376]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b62:	495b      	ldr	r1, [pc, #364]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	658b      	str	r3, [r1, #88]	; 0x58
 8008b68:	e001      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d033      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b84:	d01c      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008b86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b8a:	d816      	bhi.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008b8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b90:	d003      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008b92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b96:	d007      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8008b98:	e00f      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b9a:	4b4d      	ldr	r3, [pc, #308]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	4a4c      	ldr	r2, [pc, #304]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008ba6:	e00c      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3324      	adds	r3, #36	; 0x24
 8008bac:	2101      	movs	r1, #1
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fc6e 	bl	8009490 <RCCEx_PLL3_Config>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008bb8:	e003      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8008bbe:	e000      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8008bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bc8:	4b41      	ldr	r3, [pc, #260]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bd6:	493e      	ldr	r1, [pc, #248]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	654b      	str	r3, [r1, #84]	; 0x54
 8008bdc:	e001      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d029      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bfa:	d007      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008bfc:	e00f      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bfe:	4b34      	ldr	r3, [pc, #208]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	4a33      	ldr	r2, [pc, #204]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c0a:	e00b      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	2102      	movs	r1, #2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fb8a 	bl	800932c <RCCEx_PLL2_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c1c:	e002      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	75fb      	strb	r3, [r7, #23]
      break;
 8008c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d109      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c2a:	4b29      	ldr	r3, [pc, #164]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c36:	4926      	ldr	r1, [pc, #152]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c3c:	e001      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00a      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3324      	adds	r3, #36	; 0x24
 8008c52:	2102      	movs	r1, #2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 fc1b 	bl	8009490 <RCCEx_PLL3_Config>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d033      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c78:	d017      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c7e:	d811      	bhi.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c84:	d013      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c8a:	d80b      	bhi.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d010      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c94:	d106      	bne.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c96:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9a:	4a0d      	ldr	r2, [pc, #52]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008ca2:	e007      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca8:	e004      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008caa:	bf00      	nop
 8008cac:	e002      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008cae:	bf00      	nop
 8008cb0:	e000      	b.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10c      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cba:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cc6:	4902      	ldr	r1, [pc, #8]	; (8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	654b      	str	r3, [r1, #84]	; 0x54
 8008ccc:	e004      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8008cce:	bf00      	nop
 8008cd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d008      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ce4:	4b31      	ldr	r3, [pc, #196]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf0:	492e      	ldr	r1, [pc, #184]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d009      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008d02:	4b2a      	ldr	r3, [pc, #168]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008d10:	4926      	ldr	r1, [pc, #152]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d008      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d22:	4b22      	ldr	r3, [pc, #136]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d2e:	491f      	ldr	r1, [pc, #124]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00d      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d40:	4b1a      	ldr	r3, [pc, #104]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	4a19      	ldr	r2, [pc, #100]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d4a:	6113      	str	r3, [r2, #16]
 8008d4c:	4b17      	ldr	r3, [pc, #92]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d4e:	691a      	ldr	r2, [r3, #16]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008d56:	4915      	ldr	r1, [pc, #84]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da08      	bge.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d64:	4b11      	ldr	r3, [pc, #68]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d70:	490e      	ldr	r1, [pc, #56]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d009      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d82:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d90:	4906      	ldr	r1, [pc, #24]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008d96:	7dbb      	ldrb	r3, [r7, #22]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e000      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	58024400 	.word	0x58024400

08008db0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008db4:	f7ff f818 	bl	8007de8 <HAL_RCC_GetHCLKFreq>
 8008db8:	4602      	mov	r2, r0
 8008dba:	4b06      	ldr	r3, [pc, #24]	; (8008dd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	091b      	lsrs	r3, r3, #4
 8008dc0:	f003 0307 	and.w	r3, r3, #7
 8008dc4:	4904      	ldr	r1, [pc, #16]	; (8008dd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008dc6:	5ccb      	ldrb	r3, [r1, r3]
 8008dc8:	f003 031f 	and.w	r3, r3, #31
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	58024400 	.word	0x58024400
 8008dd8:	08012c50 	.word	0x08012c50

08008ddc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b089      	sub	sp, #36	; 0x24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008de4:	4ba1      	ldr	r3, [pc, #644]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de8:	f003 0303 	and.w	r3, r3, #3
 8008dec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008dee:	4b9f      	ldr	r3, [pc, #636]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df2:	0b1b      	lsrs	r3, r3, #12
 8008df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008df8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008dfa:	4b9c      	ldr	r3, [pc, #624]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfe:	091b      	lsrs	r3, r3, #4
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008e06:	4b99      	ldr	r3, [pc, #612]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	08db      	lsrs	r3, r3, #3
 8008e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	fb02 f303 	mul.w	r3, r2, r3
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f000 8111 	beq.w	800904c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	f000 8083 	beq.w	8008f38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	f200 80a1 	bhi.w	8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d056      	beq.n	8008ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e46:	e099      	b.n	8008f7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e48:	4b88      	ldr	r3, [pc, #544]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d02d      	beq.n	8008eb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e54:	4b85      	ldr	r3, [pc, #532]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	08db      	lsrs	r3, r3, #3
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	4a84      	ldr	r2, [pc, #528]	; (8009070 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e60:	fa22 f303 	lsr.w	r3, r2, r3
 8008e64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	ee07 3a90 	vmov	s15, r3
 8008e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e7e:	4b7b      	ldr	r3, [pc, #492]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008eae:	e087      	b.n	8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009078 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec2:	4b6a      	ldr	r3, [pc, #424]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ed6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ef2:	e065      	b.n	8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008efe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800907c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f06:	4b59      	ldr	r3, [pc, #356]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f36:	e043      	b.n	8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4a:	4b48      	ldr	r3, [pc, #288]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f7a:	e021      	b.n	8008fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800907c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f8e:	4b37      	ldr	r3, [pc, #220]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fa2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009074 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008fc0:	4b2a      	ldr	r3, [pc, #168]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc4:	0a5b      	lsrs	r3, r3, #9
 8008fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fca:	ee07 3a90 	vmov	s15, r3
 8008fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe6:	ee17 2a90 	vmov	r2, s15
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008fee:	4b1f      	ldr	r3, [pc, #124]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff2:	0c1b      	lsrs	r3, r3, #16
 8008ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009004:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009008:	edd7 6a07 	vldr	s13, [r7, #28]
 800900c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009014:	ee17 2a90 	vmov	r2, s15
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800901c:	4b13      	ldr	r3, [pc, #76]	; (800906c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800901e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009020:	0e1b      	lsrs	r3, r3, #24
 8009022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009026:	ee07 3a90 	vmov	s15, r3
 800902a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009032:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009036:	edd7 6a07 	vldr	s13, [r7, #28]
 800903a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800903e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009042:	ee17 2a90 	vmov	r2, s15
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800904a:	e008      	b.n	800905e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	609a      	str	r2, [r3, #8]
}
 800905e:	bf00      	nop
 8009060:	3724      	adds	r7, #36	; 0x24
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	58024400 	.word	0x58024400
 8009070:	03d09000 	.word	0x03d09000
 8009074:	46000000 	.word	0x46000000
 8009078:	4c742400 	.word	0x4c742400
 800907c:	4a742400 	.word	0x4a742400
 8009080:	4b742400 	.word	0x4b742400

08009084 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009084:	b480      	push	{r7}
 8009086:	b089      	sub	sp, #36	; 0x24
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800908c:	4ba1      	ldr	r3, [pc, #644]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009090:	f003 0303 	and.w	r3, r3, #3
 8009094:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009096:	4b9f      	ldr	r3, [pc, #636]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909a:	0d1b      	lsrs	r3, r3, #20
 800909c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80090a2:	4b9c      	ldr	r3, [pc, #624]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	0a1b      	lsrs	r3, r3, #8
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80090ae:	4b99      	ldr	r3, [pc, #612]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b2:	08db      	lsrs	r3, r3, #3
 80090b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 8111 	beq.w	80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	f000 8083 	beq.w	80091e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	f200 80a1 	bhi.w	8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d003      	beq.n	80090f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d056      	beq.n	800919c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80090ee:	e099      	b.n	8009224 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090f0:	4b88      	ldr	r3, [pc, #544]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0320 	and.w	r3, r3, #32
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d02d      	beq.n	8009158 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090fc:	4b85      	ldr	r3, [pc, #532]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	08db      	lsrs	r3, r3, #3
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	4a84      	ldr	r2, [pc, #528]	; (8009318 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009108:	fa22 f303 	lsr.w	r3, r2, r3
 800910c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	ee07 3a90 	vmov	s15, r3
 8009114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009126:	4b7b      	ldr	r3, [pc, #492]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009136:	ed97 6a03 	vldr	s12, [r7, #12]
 800913a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800931c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800913e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800914a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800914e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009152:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009156:	e087      	b.n	8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009320 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916a:	4b6a      	ldr	r3, [pc, #424]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917a:	ed97 6a03 	vldr	s12, [r7, #12]
 800917e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800931c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800918e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800919a:	e065      	b.n	8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	ee07 3a90 	vmov	s15, r3
 80091a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009324 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80091aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ae:	4b59      	ldr	r3, [pc, #356]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091be:	ed97 6a03 	vldr	s12, [r7, #12]
 80091c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800931c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091de:	e043      	b.n	8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009328 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80091ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091f2:	4b48      	ldr	r3, [pc, #288]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fa:	ee07 3a90 	vmov	s15, r3
 80091fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009202:	ed97 6a03 	vldr	s12, [r7, #12]
 8009206:	eddf 5a45 	vldr	s11, [pc, #276]	; 800931c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800920a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800921a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009222:	e021      	b.n	8009268 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009324 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009236:	4b37      	ldr	r3, [pc, #220]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009246:	ed97 6a03 	vldr	s12, [r7, #12]
 800924a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800931c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800924e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800925a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009266:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009268:	4b2a      	ldr	r3, [pc, #168]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800926a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926c:	0a5b      	lsrs	r3, r3, #9
 800926e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009272:	ee07 3a90 	vmov	s15, r3
 8009276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800927e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009282:	edd7 6a07 	vldr	s13, [r7, #28]
 8009286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800928a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800928e:	ee17 2a90 	vmov	r2, s15
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009296:	4b1f      	ldr	r3, [pc, #124]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929a:	0c1b      	lsrs	r3, r3, #16
 800929c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092bc:	ee17 2a90 	vmov	r2, s15
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80092c4:	4b13      	ldr	r3, [pc, #76]	; (8009314 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	0e1b      	lsrs	r3, r3, #24
 80092ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ce:	ee07 3a90 	vmov	s15, r3
 80092d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092de:	edd7 6a07 	vldr	s13, [r7, #28]
 80092e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ea:	ee17 2a90 	vmov	r2, s15
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80092f2:	e008      	b.n	8009306 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	609a      	str	r2, [r3, #8]
}
 8009306:	bf00      	nop
 8009308:	3724      	adds	r7, #36	; 0x24
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	58024400 	.word	0x58024400
 8009318:	03d09000 	.word	0x03d09000
 800931c:	46000000 	.word	0x46000000
 8009320:	4c742400 	.word	0x4c742400
 8009324:	4a742400 	.word	0x4a742400
 8009328:	4b742400 	.word	0x4b742400

0800932c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800933a:	4b53      	ldr	r3, [pc, #332]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800933c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933e:	f003 0303 	and.w	r3, r3, #3
 8009342:	2b03      	cmp	r3, #3
 8009344:	d101      	bne.n	800934a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e099      	b.n	800947e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800934a:	4b4f      	ldr	r3, [pc, #316]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a4e      	ldr	r2, [pc, #312]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009350:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009356:	f7f8 fe15 	bl	8001f84 <HAL_GetTick>
 800935a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800935c:	e008      	b.n	8009370 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800935e:	f7f8 fe11 	bl	8001f84 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	2b02      	cmp	r3, #2
 800936a:	d901      	bls.n	8009370 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800936c:	2303      	movs	r3, #3
 800936e:	e086      	b.n	800947e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009370:	4b45      	ldr	r3, [pc, #276]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1f0      	bne.n	800935e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800937c:	4b42      	ldr	r3, [pc, #264]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	031b      	lsls	r3, r3, #12
 800938a:	493f      	ldr	r1, [pc, #252]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800938c:	4313      	orrs	r3, r2
 800938e:	628b      	str	r3, [r1, #40]	; 0x28
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	3b01      	subs	r3, #1
 8009396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	3b01      	subs	r3, #1
 80093a0:	025b      	lsls	r3, r3, #9
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	431a      	orrs	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	041b      	lsls	r3, r3, #16
 80093ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	061b      	lsls	r3, r3, #24
 80093bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093c0:	4931      	ldr	r1, [pc, #196]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80093c6:	4b30      	ldr	r3, [pc, #192]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	492d      	ldr	r1, [pc, #180]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80093d8:	4b2b      	ldr	r3, [pc, #172]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	f023 0220 	bic.w	r2, r3, #32
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	4928      	ldr	r1, [pc, #160]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80093ea:	4b27      	ldr	r3, [pc, #156]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	4a26      	ldr	r2, [pc, #152]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093f0:	f023 0310 	bic.w	r3, r3, #16
 80093f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80093f6:	4b24      	ldr	r3, [pc, #144]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 80093f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093fa:	4b24      	ldr	r3, [pc, #144]	; (800948c <RCCEx_PLL2_Config+0x160>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	69d2      	ldr	r2, [r2, #28]
 8009402:	00d2      	lsls	r2, r2, #3
 8009404:	4920      	ldr	r1, [pc, #128]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009406:	4313      	orrs	r3, r2
 8009408:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800940a:	4b1f      	ldr	r3, [pc, #124]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	4a1e      	ldr	r2, [pc, #120]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009410:	f043 0310 	orr.w	r3, r3, #16
 8009414:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800941c:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	4a19      	ldr	r2, [pc, #100]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009426:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009428:	e00f      	b.n	800944a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d106      	bne.n	800943e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009430:	4b15      	ldr	r3, [pc, #84]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	4a14      	ldr	r2, [pc, #80]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800943a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800943c:	e005      	b.n	800944a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800943e:	4b12      	ldr	r3, [pc, #72]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	4a11      	ldr	r2, [pc, #68]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009448:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800944a:	4b0f      	ldr	r3, [pc, #60]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a0e      	ldr	r2, [pc, #56]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009456:	f7f8 fd95 	bl	8001f84 <HAL_GetTick>
 800945a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800945c:	e008      	b.n	8009470 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800945e:	f7f8 fd91 	bl	8001f84 <HAL_GetTick>
 8009462:	4602      	mov	r2, r0
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	2b02      	cmp	r3, #2
 800946a:	d901      	bls.n	8009470 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e006      	b.n	800947e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009470:	4b05      	ldr	r3, [pc, #20]	; (8009488 <RCCEx_PLL2_Config+0x15c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0f0      	beq.n	800945e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	58024400 	.word	0x58024400
 800948c:	ffff0007 	.word	0xffff0007

08009490 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800949e:	4b53      	ldr	r3, [pc, #332]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a2:	f003 0303 	and.w	r3, r3, #3
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d101      	bne.n	80094ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e099      	b.n	80095e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80094ae:	4b4f      	ldr	r3, [pc, #316]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a4e      	ldr	r2, [pc, #312]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094ba:	f7f8 fd63 	bl	8001f84 <HAL_GetTick>
 80094be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094c0:	e008      	b.n	80094d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094c2:	f7f8 fd5f 	bl	8001f84 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d901      	bls.n	80094d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e086      	b.n	80095e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094d4:	4b45      	ldr	r3, [pc, #276]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1f0      	bne.n	80094c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80094e0:	4b42      	ldr	r3, [pc, #264]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	051b      	lsls	r3, r3, #20
 80094ee:	493f      	ldr	r1, [pc, #252]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	628b      	str	r3, [r1, #40]	; 0x28
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	3b01      	subs	r3, #1
 80094fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	3b01      	subs	r3, #1
 8009504:	025b      	lsls	r3, r3, #9
 8009506:	b29b      	uxth	r3, r3
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	3b01      	subs	r3, #1
 8009510:	041b      	lsls	r3, r3, #16
 8009512:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009516:	431a      	orrs	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	3b01      	subs	r3, #1
 800951e:	061b      	lsls	r3, r3, #24
 8009520:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009524:	4931      	ldr	r1, [pc, #196]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009526:	4313      	orrs	r3, r2
 8009528:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800952a:	4b30      	ldr	r3, [pc, #192]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	492d      	ldr	r1, [pc, #180]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009538:	4313      	orrs	r3, r2
 800953a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800953c:	4b2b      	ldr	r3, [pc, #172]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	4928      	ldr	r1, [pc, #160]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800954a:	4313      	orrs	r3, r2
 800954c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800954e:	4b27      	ldr	r3, [pc, #156]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009552:	4a26      	ldr	r2, [pc, #152]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009558:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800955a:	4b24      	ldr	r3, [pc, #144]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800955c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800955e:	4b24      	ldr	r3, [pc, #144]	; (80095f0 <RCCEx_PLL3_Config+0x160>)
 8009560:	4013      	ands	r3, r2
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	69d2      	ldr	r2, [r2, #28]
 8009566:	00d2      	lsls	r2, r2, #3
 8009568:	4920      	ldr	r1, [pc, #128]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800956a:	4313      	orrs	r3, r2
 800956c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800956e:	4b1f      	ldr	r3, [pc, #124]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	4a1e      	ldr	r2, [pc, #120]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009578:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d106      	bne.n	800958e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009580:	4b1a      	ldr	r3, [pc, #104]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	4a19      	ldr	r2, [pc, #100]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009586:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800958a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800958c:	e00f      	b.n	80095ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d106      	bne.n	80095a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009594:	4b15      	ldr	r3, [pc, #84]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	4a14      	ldr	r2, [pc, #80]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 800959a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800959e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095a0:	e005      	b.n	80095ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80095a2:	4b12      	ldr	r3, [pc, #72]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a6:	4a11      	ldr	r2, [pc, #68]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80095ae:	4b0f      	ldr	r3, [pc, #60]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a0e      	ldr	r2, [pc, #56]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095ba:	f7f8 fce3 	bl	8001f84 <HAL_GetTick>
 80095be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095c0:	e008      	b.n	80095d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80095c2:	f7f8 fcdf 	bl	8001f84 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e006      	b.n	80095e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <RCCEx_PLL3_Config+0x15c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0f0      	beq.n	80095c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	58024400 	.word	0x58024400
 80095f0:	ffff0007 	.word	0xffff0007

080095f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d008      	beq.n	8009622 <HAL_SD_IRQHandler+0x2e>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f003 0308 	and.w	r3, r3, #8
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f9ac 	bl	8009978 <SD_Read_IT>
 8009620:	e19a      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80ac 	beq.w	800978a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800963a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	4b59      	ldr	r3, [pc, #356]	; (80097ac <HAL_SD_IRQHandler+0x1b8>)
 8009648:	400b      	ands	r3, r1
 800964a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800965a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800966a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f003 0308 	and.w	r3, r3, #8
 8009672:	2b00      	cmp	r3, #0
 8009674:	d038      	beq.n	80096e8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d104      	bne.n	800968a <HAL_SD_IRQHandler+0x96>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b00      	cmp	r3, #0
 8009688:	d011      	beq.n	80096ae <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f002 ff50 	bl	800c534 <SDMMC_CmdStopTransfer>
 8009694:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d008      	beq.n	80096ae <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f95b 	bl	8009964 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a3f      	ldr	r2, [pc, #252]	; (80097b0 <HAL_SD_IRQHandler+0x1bc>)
 80096b4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d104      	bne.n	80096d8 <HAL_SD_IRQHandler+0xe4>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f004 fbd5 	bl	800de88 <HAL_SD_RxCpltCallback>
 80096de:	e13b      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f004 fbc7 	bl	800de74 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80096e6:	e137      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8132 	beq.w	8009958 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2200      	movs	r2, #0
 80096fa:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2200      	movs	r2, #0
 8009702:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2200      	movs	r2, #0
 800970a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d104      	bne.n	8009720 <HAL_SD_IRQHandler+0x12c>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b00      	cmp	r3, #0
 800971e:	d011      	beq.n	8009744 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4618      	mov	r0, r3
 8009726:	f002 ff05 	bl	800c534 <SDMMC_CmdStopTransfer>
 800972a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d008      	beq.n	8009744 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	431a      	orrs	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f910 	bl	8009964 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f003 0310 	and.w	r3, r3, #16
 8009758:	2b00      	cmp	r3, #0
 800975a:	d104      	bne.n	8009766 <HAL_SD_IRQHandler+0x172>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f004 fb84 	bl	800de74 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b00      	cmp	r3, #0
 8009774:	d105      	bne.n	8009782 <HAL_SD_IRQHandler+0x18e>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 80eb 	beq.w	8009958 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f004 fb80 	bl	800de88 <HAL_SD_RxCpltCallback>
}
 8009788:	e0e6      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00d      	beq.n	80097b4 <HAL_SD_IRQHandler+0x1c0>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f003 0308 	and.w	r3, r3, #8
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d008      	beq.n	80097b4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f92e 	bl	8009a04 <SD_Write_IT>
 80097a8:	e0d6      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
 80097aa:	bf00      	nop
 80097ac:	ffff3ec5 	.word	0xffff3ec5
 80097b0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ba:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 809d 	beq.w	80098fe <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d6:	f043 0202 	orr.w	r2, r3, #2
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e4:	f003 0308 	and.w	r3, r3, #8
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d005      	beq.n	80097f8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f0:	f043 0208 	orr.w	r2, r3, #8
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b00      	cmp	r3, #0
 8009804:	d005      	beq.n	8009812 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	f043 0220 	orr.w	r2, r3, #32
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009818:	f003 0310 	and.w	r3, r3, #16
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009824:	f043 0210 	orr.w	r2, r3, #16
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a4b      	ldr	r2, [pc, #300]	; (8009960 <HAL_SD_IRQHandler+0x36c>)
 8009832:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009842:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68da      	ldr	r2, [r3, #12]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009852:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009862:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009872:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4618      	mov	r0, r3
 800987a:	f002 fe5b 	bl	800c534 <SDMMC_CmdStopTransfer>
 800987e:	4602      	mov	r2, r0
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009884:	431a      	orrs	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68da      	ldr	r2, [r3, #12]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009898:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f003 0308 	and.w	r3, r3, #8
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f851 	bl	8009964 <HAL_SD_ErrorCallback>
}
 80098c2:	e049      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d044      	beq.n	8009958 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d040      	beq.n	8009958 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80098e4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f834 	bl	8009964 <HAL_SD_ErrorCallback>
}
 80098fc:	e02c      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d025      	beq.n	8009958 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800991c:	f003 0304 	and.w	r3, r3, #4
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10c      	bne.n	800993e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f003 0320 	and.w	r3, r3, #32
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f8d0 	bl	8009ad4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009934:	e010      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f8b8 	bl	8009aac <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800993c:	e00c      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f003 0320 	and.w	r3, r3, #32
 8009944:	2b00      	cmp	r3, #0
 8009946:	d003      	beq.n	8009950 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f8b9 	bl	8009ac0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800994e:	e003      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f8a1 	bl	8009a98 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009956:	e7ff      	b.n	8009958 <HAL_SD_IRQHandler+0x364>
 8009958:	bf00      	nop
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	18000f3a 	.word	0x18000f3a

08009964 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998a:	2b1f      	cmp	r3, #31
 800998c:	d936      	bls.n	80099fc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	e027      	b.n	80099e4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f002 fd63 	bl	800c464 <SDMMC_ReadFIFO>
 800999e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	3301      	adds	r3, #1
 80099ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	0a1b      	lsrs	r3, r3, #8
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	3301      	adds	r3, #1
 80099bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	0c1b      	lsrs	r3, r3, #16
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	3301      	adds	r3, #1
 80099cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	0e1b      	lsrs	r3, r3, #24
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3301      	adds	r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	3301      	adds	r3, #1
 80099e2:	617b      	str	r3, [r7, #20]
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b07      	cmp	r3, #7
 80099e8:	d9d4      	bls.n	8009994 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f4:	f1a3 0220 	sub.w	r2, r3, #32
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80099fc:	bf00      	nop
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	2b1f      	cmp	r3, #31
 8009a18:	d93a      	bls.n	8009a90 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	617b      	str	r3, [r7, #20]
 8009a1e:	e02b      	b.n	8009a78 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	021a      	lsls	r2, r3, #8
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	041a      	lsls	r2, r3, #16
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	061a      	lsls	r2, r3, #24
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f107 020c 	add.w	r2, r7, #12
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f002 fd06 	bl	800c47e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	3301      	adds	r3, #1
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2b07      	cmp	r3, #7
 8009a7c:	d9d0      	bls.n	8009a20 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	693a      	ldr	r2, [r7, #16]
 8009a82:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	f1a3 0220 	sub.w	r2, r3, #32
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	621a      	str	r2, [r3, #32]
  }
}
 8009a90:	bf00      	nop
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b083      	sub	sp, #12
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009ac8:	bf00      	nop
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e049      	b.n	8009b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7f7 ff00 	bl	8001914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f000 fbec 	bl	800a304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e049      	b.n	8009c3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d106      	bne.n	8009bc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f841 	bl	8009c44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f000 fb95 	bl	800a304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	f003 0302 	and.w	r3, r3, #2
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d122      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d11b      	bne.n	8009cb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f06f 0202 	mvn.w	r2, #2
 8009c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fb14 	bl	800a2c8 <HAL_TIM_IC_CaptureCallback>
 8009ca0:	e005      	b.n	8009cae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fb06 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fb17 	bl	800a2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	f003 0304 	and.w	r3, r3, #4
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	d122      	bne.n	8009d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b04      	cmp	r3, #4
 8009cce:	d11b      	bne.n	8009d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f06f 0204 	mvn.w	r2, #4
 8009cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 faea 	bl	800a2c8 <HAL_TIM_IC_CaptureCallback>
 8009cf4:	e005      	b.n	8009d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fadc 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 faed 	bl	800a2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	f003 0308 	and.w	r3, r3, #8
 8009d12:	2b08      	cmp	r3, #8
 8009d14:	d122      	bne.n	8009d5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	f003 0308 	and.w	r3, r3, #8
 8009d20:	2b08      	cmp	r3, #8
 8009d22:	d11b      	bne.n	8009d5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f06f 0208 	mvn.w	r2, #8
 8009d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2204      	movs	r2, #4
 8009d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fac0 	bl	800a2c8 <HAL_TIM_IC_CaptureCallback>
 8009d48:	e005      	b.n	8009d56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fab2 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fac3 	bl	800a2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	f003 0310 	and.w	r3, r3, #16
 8009d66:	2b10      	cmp	r3, #16
 8009d68:	d122      	bne.n	8009db0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	f003 0310 	and.w	r3, r3, #16
 8009d74:	2b10      	cmp	r3, #16
 8009d76:	d11b      	bne.n	8009db0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f06f 0210 	mvn.w	r2, #16
 8009d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2208      	movs	r2, #8
 8009d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fa96 	bl	800a2c8 <HAL_TIM_IC_CaptureCallback>
 8009d9c:	e005      	b.n	8009daa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa88 	bl	800a2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fa99 	bl	800a2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d10e      	bne.n	8009ddc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d107      	bne.n	8009ddc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f06f 0201 	mvn.w	r2, #1
 8009dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fa62 	bl	800a2a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de6:	2b80      	cmp	r3, #128	; 0x80
 8009de8:	d10e      	bne.n	8009e08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df4:	2b80      	cmp	r3, #128	; 0x80
 8009df6:	d107      	bne.n	8009e08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 ff94 	bl	800ad30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e16:	d10e      	bne.n	8009e36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b80      	cmp	r3, #128	; 0x80
 8009e24:	d107      	bne.n	8009e36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 ff87 	bl	800ad44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e40:	2b40      	cmp	r3, #64	; 0x40
 8009e42:	d10e      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4e:	2b40      	cmp	r3, #64	; 0x40
 8009e50:	d107      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fa47 	bl	800a2f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f003 0320 	and.w	r3, r3, #32
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	d10e      	bne.n	8009e8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	2b20      	cmp	r3, #32
 8009e7c:	d107      	bne.n	8009e8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f06f 0220 	mvn.w	r2, #32
 8009e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 ff47 	bl	800ad1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e0fd      	b.n	800a0ae <HAL_TIM_PWM_ConfigChannel+0x216>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b14      	cmp	r3, #20
 8009ebe:	f200 80f0 	bhi.w	800a0a2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009ec2:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec8:	08009f1d 	.word	0x08009f1d
 8009ecc:	0800a0a3 	.word	0x0800a0a3
 8009ed0:	0800a0a3 	.word	0x0800a0a3
 8009ed4:	0800a0a3 	.word	0x0800a0a3
 8009ed8:	08009f5d 	.word	0x08009f5d
 8009edc:	0800a0a3 	.word	0x0800a0a3
 8009ee0:	0800a0a3 	.word	0x0800a0a3
 8009ee4:	0800a0a3 	.word	0x0800a0a3
 8009ee8:	08009f9f 	.word	0x08009f9f
 8009eec:	0800a0a3 	.word	0x0800a0a3
 8009ef0:	0800a0a3 	.word	0x0800a0a3
 8009ef4:	0800a0a3 	.word	0x0800a0a3
 8009ef8:	08009fdf 	.word	0x08009fdf
 8009efc:	0800a0a3 	.word	0x0800a0a3
 8009f00:	0800a0a3 	.word	0x0800a0a3
 8009f04:	0800a0a3 	.word	0x0800a0a3
 8009f08:	0800a021 	.word	0x0800a021
 8009f0c:	0800a0a3 	.word	0x0800a0a3
 8009f10:	0800a0a3 	.word	0x0800a0a3
 8009f14:	0800a0a3 	.word	0x0800a0a3
 8009f18:	0800a061 	.word	0x0800a061
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68b9      	ldr	r1, [r7, #8]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 fa88 	bl	800a438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	699a      	ldr	r2, [r3, #24]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0208 	orr.w	r2, r2, #8
 8009f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	699a      	ldr	r2, [r3, #24]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f022 0204 	bic.w	r2, r2, #4
 8009f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6999      	ldr	r1, [r3, #24]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	691a      	ldr	r2, [r3, #16]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	619a      	str	r2, [r3, #24]
      break;
 8009f5a:	e0a3      	b.n	800a0a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68b9      	ldr	r1, [r7, #8]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 faf8 	bl	800a558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	699a      	ldr	r2, [r3, #24]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	699a      	ldr	r2, [r3, #24]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6999      	ldr	r1, [r3, #24]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	021a      	lsls	r2, r3, #8
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	619a      	str	r2, [r3, #24]
      break;
 8009f9c:	e082      	b.n	800a0a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68b9      	ldr	r1, [r7, #8]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 fb61 	bl	800a66c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	69da      	ldr	r2, [r3, #28]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0208 	orr.w	r2, r2, #8
 8009fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	69da      	ldr	r2, [r3, #28]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0204 	bic.w	r2, r2, #4
 8009fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69d9      	ldr	r1, [r3, #28]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	691a      	ldr	r2, [r3, #16]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	61da      	str	r2, [r3, #28]
      break;
 8009fdc:	e062      	b.n	800a0a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fbc7 	bl	800a778 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	69da      	ldr	r2, [r3, #28]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	69da      	ldr	r2, [r3, #28]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69d9      	ldr	r1, [r3, #28]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	021a      	lsls	r2, r3, #8
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	430a      	orrs	r2, r1
 800a01c:	61da      	str	r2, [r3, #28]
      break;
 800a01e:	e041      	b.n	800a0a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68b9      	ldr	r1, [r7, #8]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 fc0e 	bl	800a848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f042 0208 	orr.w	r2, r2, #8
 800a03a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0204 	bic.w	r2, r2, #4
 800a04a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	691a      	ldr	r2, [r3, #16]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	430a      	orrs	r2, r1
 800a05c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a05e:	e021      	b.n	800a0a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	4618      	mov	r0, r3
 800a068:	f000 fc50 	bl	800a90c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a07a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a08a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	021a      	lsls	r2, r3, #8
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	430a      	orrs	r2, r1
 800a09e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a0a0:	e000      	b.n	800a0a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a0a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop

0800a0b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d101      	bne.n	800a0d0 <HAL_TIM_ConfigClockSource+0x18>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e0db      	b.n	800a288 <HAL_TIM_ConfigClockSource+0x1d0>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	4b69      	ldr	r3, [pc, #420]	; (800a290 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a63      	ldr	r2, [pc, #396]	; (800a294 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a106:	4293      	cmp	r3, r2
 800a108:	f000 80a9 	beq.w	800a25e <HAL_TIM_ConfigClockSource+0x1a6>
 800a10c:	4a61      	ldr	r2, [pc, #388]	; (800a294 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	f200 80ae 	bhi.w	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a114:	4a60      	ldr	r2, [pc, #384]	; (800a298 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a116:	4293      	cmp	r3, r2
 800a118:	f000 80a1 	beq.w	800a25e <HAL_TIM_ConfigClockSource+0x1a6>
 800a11c:	4a5e      	ldr	r2, [pc, #376]	; (800a298 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	f200 80a6 	bhi.w	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a124:	4a5d      	ldr	r2, [pc, #372]	; (800a29c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	f000 8099 	beq.w	800a25e <HAL_TIM_ConfigClockSource+0x1a6>
 800a12c:	4a5b      	ldr	r2, [pc, #364]	; (800a29c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	f200 809e 	bhi.w	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a134:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a138:	f000 8091 	beq.w	800a25e <HAL_TIM_ConfigClockSource+0x1a6>
 800a13c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a140:	f200 8096 	bhi.w	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a148:	f000 8089 	beq.w	800a25e <HAL_TIM_ConfigClockSource+0x1a6>
 800a14c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a150:	f200 808e 	bhi.w	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a158:	d03e      	beq.n	800a1d8 <HAL_TIM_ConfigClockSource+0x120>
 800a15a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a15e:	f200 8087 	bhi.w	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a166:	f000 8085 	beq.w	800a274 <HAL_TIM_ConfigClockSource+0x1bc>
 800a16a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a16e:	d87f      	bhi.n	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a170:	2b70      	cmp	r3, #112	; 0x70
 800a172:	d01a      	beq.n	800a1aa <HAL_TIM_ConfigClockSource+0xf2>
 800a174:	2b70      	cmp	r3, #112	; 0x70
 800a176:	d87b      	bhi.n	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a178:	2b60      	cmp	r3, #96	; 0x60
 800a17a:	d050      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0x166>
 800a17c:	2b60      	cmp	r3, #96	; 0x60
 800a17e:	d877      	bhi.n	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a180:	2b50      	cmp	r3, #80	; 0x50
 800a182:	d03c      	beq.n	800a1fe <HAL_TIM_ConfigClockSource+0x146>
 800a184:	2b50      	cmp	r3, #80	; 0x50
 800a186:	d873      	bhi.n	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a188:	2b40      	cmp	r3, #64	; 0x40
 800a18a:	d058      	beq.n	800a23e <HAL_TIM_ConfigClockSource+0x186>
 800a18c:	2b40      	cmp	r3, #64	; 0x40
 800a18e:	d86f      	bhi.n	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a190:	2b30      	cmp	r3, #48	; 0x30
 800a192:	d064      	beq.n	800a25e <HAL_TIM_ConfigClockSource+0x1a6>
 800a194:	2b30      	cmp	r3, #48	; 0x30
 800a196:	d86b      	bhi.n	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a198:	2b20      	cmp	r3, #32
 800a19a:	d060      	beq.n	800a25e <HAL_TIM_ConfigClockSource+0x1a6>
 800a19c:	2b20      	cmp	r3, #32
 800a19e:	d867      	bhi.n	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d05c      	beq.n	800a25e <HAL_TIM_ConfigClockSource+0x1a6>
 800a1a4:	2b10      	cmp	r3, #16
 800a1a6:	d05a      	beq.n	800a25e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a1a8:	e062      	b.n	800a270 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6818      	ldr	r0, [r3, #0]
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	6899      	ldr	r1, [r3, #8]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	f000 fc89 	bl	800aad0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	609a      	str	r2, [r3, #8]
      break;
 800a1d6:	e04e      	b.n	800a276 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6818      	ldr	r0, [r3, #0]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	6899      	ldr	r1, [r3, #8]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	685a      	ldr	r2, [r3, #4]
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f000 fc72 	bl	800aad0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689a      	ldr	r2, [r3, #8]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1fa:	609a      	str	r2, [r3, #8]
      break;
 800a1fc:	e03b      	b.n	800a276 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	6859      	ldr	r1, [r3, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	461a      	mov	r2, r3
 800a20c:	f000 fbe2 	bl	800a9d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2150      	movs	r1, #80	; 0x50
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fc3c 	bl	800aa94 <TIM_ITRx_SetConfig>
      break;
 800a21c:	e02b      	b.n	800a276 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6818      	ldr	r0, [r3, #0]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	6859      	ldr	r1, [r3, #4]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	461a      	mov	r2, r3
 800a22c:	f000 fc01 	bl	800aa32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2160      	movs	r1, #96	; 0x60
 800a236:	4618      	mov	r0, r3
 800a238:	f000 fc2c 	bl	800aa94 <TIM_ITRx_SetConfig>
      break;
 800a23c:	e01b      	b.n	800a276 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6818      	ldr	r0, [r3, #0]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	6859      	ldr	r1, [r3, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	461a      	mov	r2, r3
 800a24c:	f000 fbc2 	bl	800a9d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2140      	movs	r1, #64	; 0x40
 800a256:	4618      	mov	r0, r3
 800a258:	f000 fc1c 	bl	800aa94 <TIM_ITRx_SetConfig>
      break;
 800a25c:	e00b      	b.n	800a276 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4619      	mov	r1, r3
 800a268:	4610      	mov	r0, r2
 800a26a:	f000 fc13 	bl	800aa94 <TIM_ITRx_SetConfig>
        break;
 800a26e:	e002      	b.n	800a276 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a270:	bf00      	nop
 800a272:	e000      	b.n	800a276 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a274:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	ffceff88 	.word	0xffceff88
 800a294:	00100040 	.word	0x00100040
 800a298:	00100030 	.word	0x00100030
 800a29c:	00100020 	.word	0x00100020

0800a2a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a40      	ldr	r2, [pc, #256]	; (800a418 <TIM_Base_SetConfig+0x114>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d013      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a322:	d00f      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a3d      	ldr	r2, [pc, #244]	; (800a41c <TIM_Base_SetConfig+0x118>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d00b      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a3c      	ldr	r2, [pc, #240]	; (800a420 <TIM_Base_SetConfig+0x11c>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d007      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a3b      	ldr	r2, [pc, #236]	; (800a424 <TIM_Base_SetConfig+0x120>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d003      	beq.n	800a344 <TIM_Base_SetConfig+0x40>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a3a      	ldr	r2, [pc, #232]	; (800a428 <TIM_Base_SetConfig+0x124>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d108      	bne.n	800a356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a34a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	4313      	orrs	r3, r2
 800a354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a2f      	ldr	r2, [pc, #188]	; (800a418 <TIM_Base_SetConfig+0x114>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d01f      	beq.n	800a39e <TIM_Base_SetConfig+0x9a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a364:	d01b      	beq.n	800a39e <TIM_Base_SetConfig+0x9a>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a2c      	ldr	r2, [pc, #176]	; (800a41c <TIM_Base_SetConfig+0x118>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d017      	beq.n	800a39e <TIM_Base_SetConfig+0x9a>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a2b      	ldr	r2, [pc, #172]	; (800a420 <TIM_Base_SetConfig+0x11c>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d013      	beq.n	800a39e <TIM_Base_SetConfig+0x9a>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a2a      	ldr	r2, [pc, #168]	; (800a424 <TIM_Base_SetConfig+0x120>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d00f      	beq.n	800a39e <TIM_Base_SetConfig+0x9a>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a29      	ldr	r2, [pc, #164]	; (800a428 <TIM_Base_SetConfig+0x124>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d00b      	beq.n	800a39e <TIM_Base_SetConfig+0x9a>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a28      	ldr	r2, [pc, #160]	; (800a42c <TIM_Base_SetConfig+0x128>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d007      	beq.n	800a39e <TIM_Base_SetConfig+0x9a>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a27      	ldr	r2, [pc, #156]	; (800a430 <TIM_Base_SetConfig+0x12c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d003      	beq.n	800a39e <TIM_Base_SetConfig+0x9a>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a26      	ldr	r2, [pc, #152]	; (800a434 <TIM_Base_SetConfig+0x130>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d108      	bne.n	800a3b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	689a      	ldr	r2, [r3, #8]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a10      	ldr	r2, [pc, #64]	; (800a418 <TIM_Base_SetConfig+0x114>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d00f      	beq.n	800a3fc <TIM_Base_SetConfig+0xf8>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a12      	ldr	r2, [pc, #72]	; (800a428 <TIM_Base_SetConfig+0x124>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00b      	beq.n	800a3fc <TIM_Base_SetConfig+0xf8>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a11      	ldr	r2, [pc, #68]	; (800a42c <TIM_Base_SetConfig+0x128>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d007      	beq.n	800a3fc <TIM_Base_SetConfig+0xf8>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a10      	ldr	r2, [pc, #64]	; (800a430 <TIM_Base_SetConfig+0x12c>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d003      	beq.n	800a3fc <TIM_Base_SetConfig+0xf8>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a0f      	ldr	r2, [pc, #60]	; (800a434 <TIM_Base_SetConfig+0x130>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d103      	bne.n	800a404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	691a      	ldr	r2, [r3, #16]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	615a      	str	r2, [r3, #20]
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	40010000 	.word	0x40010000
 800a41c:	40000400 	.word	0x40000400
 800a420:	40000800 	.word	0x40000800
 800a424:	40000c00 	.word	0x40000c00
 800a428:	40010400 	.word	0x40010400
 800a42c:	40014000 	.word	0x40014000
 800a430:	40014400 	.word	0x40014400
 800a434:	40014800 	.word	0x40014800

0800a438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a1b      	ldr	r3, [r3, #32]
 800a446:	f023 0201 	bic.w	r2, r3, #1
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	4b37      	ldr	r3, [pc, #220]	; (800a540 <TIM_OC1_SetConfig+0x108>)
 800a464:	4013      	ands	r3, r2
 800a466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f023 0303 	bic.w	r3, r3, #3
 800a46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f023 0302 	bic.w	r3, r3, #2
 800a480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	4313      	orrs	r3, r2
 800a48a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a2d      	ldr	r2, [pc, #180]	; (800a544 <TIM_OC1_SetConfig+0x10c>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d00f      	beq.n	800a4b4 <TIM_OC1_SetConfig+0x7c>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a2c      	ldr	r2, [pc, #176]	; (800a548 <TIM_OC1_SetConfig+0x110>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00b      	beq.n	800a4b4 <TIM_OC1_SetConfig+0x7c>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a2b      	ldr	r2, [pc, #172]	; (800a54c <TIM_OC1_SetConfig+0x114>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d007      	beq.n	800a4b4 <TIM_OC1_SetConfig+0x7c>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a2a      	ldr	r2, [pc, #168]	; (800a550 <TIM_OC1_SetConfig+0x118>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d003      	beq.n	800a4b4 <TIM_OC1_SetConfig+0x7c>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a29      	ldr	r2, [pc, #164]	; (800a554 <TIM_OC1_SetConfig+0x11c>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d10c      	bne.n	800a4ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f023 0308 	bic.w	r3, r3, #8
 800a4ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f023 0304 	bic.w	r3, r3, #4
 800a4cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a1c      	ldr	r2, [pc, #112]	; (800a544 <TIM_OC1_SetConfig+0x10c>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d00f      	beq.n	800a4f6 <TIM_OC1_SetConfig+0xbe>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a1b      	ldr	r2, [pc, #108]	; (800a548 <TIM_OC1_SetConfig+0x110>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d00b      	beq.n	800a4f6 <TIM_OC1_SetConfig+0xbe>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a1a      	ldr	r2, [pc, #104]	; (800a54c <TIM_OC1_SetConfig+0x114>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d007      	beq.n	800a4f6 <TIM_OC1_SetConfig+0xbe>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a19      	ldr	r2, [pc, #100]	; (800a550 <TIM_OC1_SetConfig+0x118>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d003      	beq.n	800a4f6 <TIM_OC1_SetConfig+0xbe>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a18      	ldr	r2, [pc, #96]	; (800a554 <TIM_OC1_SetConfig+0x11c>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d111      	bne.n	800a51a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	4313      	orrs	r3, r2
 800a518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	685a      	ldr	r2, [r3, #4]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	621a      	str	r2, [r3, #32]
}
 800a534:	bf00      	nop
 800a536:	371c      	adds	r7, #28
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	fffeff8f 	.word	0xfffeff8f
 800a544:	40010000 	.word	0x40010000
 800a548:	40010400 	.word	0x40010400
 800a54c:	40014000 	.word	0x40014000
 800a550:	40014400 	.word	0x40014400
 800a554:	40014800 	.word	0x40014800

0800a558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a558:	b480      	push	{r7}
 800a55a:	b087      	sub	sp, #28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	f023 0210 	bic.w	r2, r3, #16
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	4b34      	ldr	r3, [pc, #208]	; (800a654 <TIM_OC2_SetConfig+0xfc>)
 800a584:	4013      	ands	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	021b      	lsls	r3, r3, #8
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	4313      	orrs	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	f023 0320 	bic.w	r3, r3, #32
 800a5a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	011b      	lsls	r3, r3, #4
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	4a29      	ldr	r2, [pc, #164]	; (800a658 <TIM_OC2_SetConfig+0x100>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d003      	beq.n	800a5c0 <TIM_OC2_SetConfig+0x68>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a28      	ldr	r2, [pc, #160]	; (800a65c <TIM_OC2_SetConfig+0x104>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d10d      	bne.n	800a5dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	011b      	lsls	r3, r3, #4
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a1e      	ldr	r2, [pc, #120]	; (800a658 <TIM_OC2_SetConfig+0x100>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00f      	beq.n	800a604 <TIM_OC2_SetConfig+0xac>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a1d      	ldr	r2, [pc, #116]	; (800a65c <TIM_OC2_SetConfig+0x104>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d00b      	beq.n	800a604 <TIM_OC2_SetConfig+0xac>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a1c      	ldr	r2, [pc, #112]	; (800a660 <TIM_OC2_SetConfig+0x108>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d007      	beq.n	800a604 <TIM_OC2_SetConfig+0xac>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a1b      	ldr	r2, [pc, #108]	; (800a664 <TIM_OC2_SetConfig+0x10c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d003      	beq.n	800a604 <TIM_OC2_SetConfig+0xac>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a1a      	ldr	r2, [pc, #104]	; (800a668 <TIM_OC2_SetConfig+0x110>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d113      	bne.n	800a62c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a60a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	4313      	orrs	r3, r2
 800a62a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	621a      	str	r2, [r3, #32]
}
 800a646:	bf00      	nop
 800a648:	371c      	adds	r7, #28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	feff8fff 	.word	0xfeff8fff
 800a658:	40010000 	.word	0x40010000
 800a65c:	40010400 	.word	0x40010400
 800a660:	40014000 	.word	0x40014000
 800a664:	40014400 	.word	0x40014400
 800a668:	40014800 	.word	0x40014800

0800a66c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f023 0303 	bic.w	r3, r3, #3
 800a6a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	021b      	lsls	r3, r3, #8
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a27      	ldr	r2, [pc, #156]	; (800a764 <TIM_OC3_SetConfig+0xf8>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d003      	beq.n	800a6d2 <TIM_OC3_SetConfig+0x66>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a26      	ldr	r2, [pc, #152]	; (800a768 <TIM_OC3_SetConfig+0xfc>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d10d      	bne.n	800a6ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	021b      	lsls	r3, r3, #8
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a1c      	ldr	r2, [pc, #112]	; (800a764 <TIM_OC3_SetConfig+0xf8>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d00f      	beq.n	800a716 <TIM_OC3_SetConfig+0xaa>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a1b      	ldr	r2, [pc, #108]	; (800a768 <TIM_OC3_SetConfig+0xfc>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d00b      	beq.n	800a716 <TIM_OC3_SetConfig+0xaa>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a1a      	ldr	r2, [pc, #104]	; (800a76c <TIM_OC3_SetConfig+0x100>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d007      	beq.n	800a716 <TIM_OC3_SetConfig+0xaa>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a19      	ldr	r2, [pc, #100]	; (800a770 <TIM_OC3_SetConfig+0x104>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d003      	beq.n	800a716 <TIM_OC3_SetConfig+0xaa>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a18      	ldr	r2, [pc, #96]	; (800a774 <TIM_OC3_SetConfig+0x108>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d113      	bne.n	800a73e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a71c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	011b      	lsls	r3, r3, #4
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	621a      	str	r2, [r3, #32]
}
 800a758:	bf00      	nop
 800a75a:	371c      	adds	r7, #28
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	40010000 	.word	0x40010000
 800a768:	40010400 	.word	0x40010400
 800a76c:	40014000 	.word	0x40014000
 800a770:	40014400 	.word	0x40014400
 800a774:	40014800 	.word	0x40014800

0800a778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	031b      	lsls	r3, r3, #12
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a18      	ldr	r2, [pc, #96]	; (800a834 <TIM_OC4_SetConfig+0xbc>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00f      	beq.n	800a7f8 <TIM_OC4_SetConfig+0x80>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a17      	ldr	r2, [pc, #92]	; (800a838 <TIM_OC4_SetConfig+0xc0>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d00b      	beq.n	800a7f8 <TIM_OC4_SetConfig+0x80>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a16      	ldr	r2, [pc, #88]	; (800a83c <TIM_OC4_SetConfig+0xc4>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d007      	beq.n	800a7f8 <TIM_OC4_SetConfig+0x80>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a15      	ldr	r2, [pc, #84]	; (800a840 <TIM_OC4_SetConfig+0xc8>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d003      	beq.n	800a7f8 <TIM_OC4_SetConfig+0x80>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a14      	ldr	r2, [pc, #80]	; (800a844 <TIM_OC4_SetConfig+0xcc>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d109      	bne.n	800a80c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	019b      	lsls	r3, r3, #6
 800a806:	697a      	ldr	r2, [r7, #20]
 800a808:	4313      	orrs	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	621a      	str	r2, [r3, #32]
}
 800a826:	bf00      	nop
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	40010000 	.word	0x40010000
 800a838:	40010400 	.word	0x40010400
 800a83c:	40014000 	.word	0x40014000
 800a840:	40014400 	.word	0x40014400
 800a844:	40014800 	.word	0x40014800

0800a848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a1b      	ldr	r3, [r3, #32]
 800a856:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	4313      	orrs	r3, r2
 800a880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a888:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	041b      	lsls	r3, r3, #16
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	4313      	orrs	r3, r2
 800a894:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a17      	ldr	r2, [pc, #92]	; (800a8f8 <TIM_OC5_SetConfig+0xb0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d00f      	beq.n	800a8be <TIM_OC5_SetConfig+0x76>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a16      	ldr	r2, [pc, #88]	; (800a8fc <TIM_OC5_SetConfig+0xb4>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d00b      	beq.n	800a8be <TIM_OC5_SetConfig+0x76>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a15      	ldr	r2, [pc, #84]	; (800a900 <TIM_OC5_SetConfig+0xb8>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d007      	beq.n	800a8be <TIM_OC5_SetConfig+0x76>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a14      	ldr	r2, [pc, #80]	; (800a904 <TIM_OC5_SetConfig+0xbc>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d003      	beq.n	800a8be <TIM_OC5_SetConfig+0x76>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a13      	ldr	r2, [pc, #76]	; (800a908 <TIM_OC5_SetConfig+0xc0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d109      	bne.n	800a8d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	021b      	lsls	r3, r3, #8
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	697a      	ldr	r2, [r7, #20]
 800a8d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	685a      	ldr	r2, [r3, #4]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	621a      	str	r2, [r3, #32]
}
 800a8ec:	bf00      	nop
 800a8ee:	371c      	adds	r7, #28
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40010400 	.word	0x40010400
 800a900:	40014000 	.word	0x40014000
 800a904:	40014400 	.word	0x40014400
 800a908:	40014800 	.word	0x40014800

0800a90c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b087      	sub	sp, #28
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a93a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	021b      	lsls	r3, r3, #8
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	4313      	orrs	r3, r2
 800a946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a94e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	051b      	lsls	r3, r3, #20
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	4313      	orrs	r3, r2
 800a95a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a18      	ldr	r2, [pc, #96]	; (800a9c0 <TIM_OC6_SetConfig+0xb4>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d00f      	beq.n	800a984 <TIM_OC6_SetConfig+0x78>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a17      	ldr	r2, [pc, #92]	; (800a9c4 <TIM_OC6_SetConfig+0xb8>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d00b      	beq.n	800a984 <TIM_OC6_SetConfig+0x78>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a16      	ldr	r2, [pc, #88]	; (800a9c8 <TIM_OC6_SetConfig+0xbc>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d007      	beq.n	800a984 <TIM_OC6_SetConfig+0x78>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a15      	ldr	r2, [pc, #84]	; (800a9cc <TIM_OC6_SetConfig+0xc0>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d003      	beq.n	800a984 <TIM_OC6_SetConfig+0x78>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a14      	ldr	r2, [pc, #80]	; (800a9d0 <TIM_OC6_SetConfig+0xc4>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d109      	bne.n	800a998 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a98a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	029b      	lsls	r3, r3, #10
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	4313      	orrs	r3, r2
 800a996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	621a      	str	r2, [r3, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	40010000 	.word	0x40010000
 800a9c4:	40010400 	.word	0x40010400
 800a9c8:	40014000 	.word	0x40014000
 800a9cc:	40014400 	.word	0x40014400
 800a9d0:	40014800 	.word	0x40014800

0800a9d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6a1b      	ldr	r3, [r3, #32]
 800a9e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	f023 0201 	bic.w	r2, r3, #1
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	011b      	lsls	r3, r3, #4
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f023 030a 	bic.w	r3, r3, #10
 800aa10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	621a      	str	r2, [r3, #32]
}
 800aa26:	bf00      	nop
 800aa28:	371c      	adds	r7, #28
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b087      	sub	sp, #28
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	f023 0210 	bic.w	r2, r3, #16
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	699b      	ldr	r3, [r3, #24]
 800aa4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	031b      	lsls	r3, r3, #12
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	011b      	lsls	r3, r3, #4
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	621a      	str	r2, [r3, #32]
}
 800aa86:	bf00      	nop
 800aa88:	371c      	adds	r7, #28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
	...

0800aa94 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4b09      	ldr	r3, [pc, #36]	; (800aacc <TIM_ITRx_SetConfig+0x38>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	f043 0307 	orr.w	r3, r3, #7
 800aab6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	609a      	str	r2, [r3, #8]
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	ffcfff8f 	.word	0xffcfff8f

0800aad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	021a      	lsls	r2, r3, #8
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	609a      	str	r2, [r3, #8]
}
 800ab04:	bf00      	nop
 800ab06:	371c      	adds	r7, #28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d101      	bne.n	800ab28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab24:	2302      	movs	r3, #2
 800ab26:	e068      	b.n	800abfa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2202      	movs	r2, #2
 800ab34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a2e      	ldr	r2, [pc, #184]	; (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d004      	beq.n	800ab5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a2d      	ldr	r2, [pc, #180]	; (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d108      	bne.n	800ab6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a1e      	ldr	r2, [pc, #120]	; (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d01d      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab9a:	d018      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a1b      	ldr	r2, [pc, #108]	; (800ac10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d013      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a1a      	ldr	r2, [pc, #104]	; (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d00e      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a18      	ldr	r2, [pc, #96]	; (800ac18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d009      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a13      	ldr	r2, [pc, #76]	; (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d004      	beq.n	800abce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a14      	ldr	r2, [pc, #80]	; (800ac1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d10c      	bne.n	800abe8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	4313      	orrs	r3, r2
 800abde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40010000 	.word	0x40010000
 800ac0c:	40010400 	.word	0x40010400
 800ac10:	40000400 	.word	0x40000400
 800ac14:	40000800 	.word	0x40000800
 800ac18:	40000c00 	.word	0x40000c00
 800ac1c:	40001800 	.word	0x40001800

0800ac20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d101      	bne.n	800ac3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac38:	2302      	movs	r3, #2
 800ac3a:	e065      	b.n	800ad08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	041b      	lsls	r3, r3, #16
 800acb2:	4313      	orrs	r3, r2
 800acb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a16      	ldr	r2, [pc, #88]	; (800ad14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d004      	beq.n	800acca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a14      	ldr	r2, [pc, #80]	; (800ad18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d115      	bne.n	800acf6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd4:	051b      	lsls	r3, r3, #20
 800acd6:	4313      	orrs	r3, r2
 800acd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	40010000 	.word	0x40010000
 800ad18:	40010400 	.word	0x40010400

0800ad1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e042      	b.n	800adf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7f6 fefb 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2224      	movs	r2, #36	; 0x24
 800ad86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f022 0201 	bic.w	r2, r2, #1
 800ad98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fb06 	bl	800b3ac <UART_SetConfig>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d101      	bne.n	800adaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e022      	b.n	800adf0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f001 f864 	bl	800be80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	685a      	ldr	r2, [r3, #4]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689a      	ldr	r2, [r3, #8]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800add6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f042 0201 	orr.w	r2, r2, #1
 800ade6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 f8eb 	bl	800bfc4 <UART_CheckIdleState>
 800adee:	4603      	mov	r3, r0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	69db      	ldr	r3, [r3, #28]
 800ae06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae18:	69fa      	ldr	r2, [r7, #28]
 800ae1a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ae1e:	4013      	ands	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d118      	bne.n	800ae5a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d013      	beq.n	800ae5a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	f003 0320 	and.w	r3, r3, #32
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d009      	beq.n	800ae5a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 8282 	beq.w	800b354 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	4798      	blx	r3
      }
      return;
 800ae58:	e27c      	b.n	800b354 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 80ef 	beq.w	800b040 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	4b73      	ldr	r3, [pc, #460]	; (800b034 <HAL_UART_IRQHandler+0x23c>)
 800ae66:	4013      	ands	r3, r2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d105      	bne.n	800ae78 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ae6c:	69ba      	ldr	r2, [r7, #24]
 800ae6e:	4b72      	ldr	r3, [pc, #456]	; (800b038 <HAL_UART_IRQHandler+0x240>)
 800ae70:	4013      	ands	r3, r2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 80e4 	beq.w	800b040 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d010      	beq.n	800aea4 <HAL_UART_IRQHandler+0xac>
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00b      	beq.n	800aea4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2201      	movs	r2, #1
 800ae92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae9a:	f043 0201 	orr.w	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d010      	beq.n	800aed0 <HAL_UART_IRQHandler+0xd8>
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00b      	beq.n	800aed0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2202      	movs	r2, #2
 800aebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec6:	f043 0204 	orr.w	r2, r3, #4
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	f003 0304 	and.w	r3, r3, #4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d010      	beq.n	800aefc <HAL_UART_IRQHandler+0x104>
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f003 0301 	and.w	r3, r3, #1
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00b      	beq.n	800aefc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2204      	movs	r2, #4
 800aeea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aef2:	f043 0202 	orr.w	r2, r3, #2
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	f003 0308 	and.w	r3, r3, #8
 800af02:	2b00      	cmp	r3, #0
 800af04:	d015      	beq.n	800af32 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	f003 0320 	and.w	r3, r3, #32
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d104      	bne.n	800af1a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	4b48      	ldr	r3, [pc, #288]	; (800b034 <HAL_UART_IRQHandler+0x23c>)
 800af14:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00b      	beq.n	800af32 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2208      	movs	r2, #8
 800af20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af28:	f043 0208 	orr.w	r2, r3, #8
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d011      	beq.n	800af60 <HAL_UART_IRQHandler+0x168>
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00c      	beq.n	800af60 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af56:	f043 0220 	orr.w	r2, r3, #32
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 81f6 	beq.w	800b358 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	f003 0320 	and.w	r3, r3, #32
 800af72:	2b00      	cmp	r3, #0
 800af74:	d011      	beq.n	800af9a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	f003 0320 	and.w	r3, r3, #32
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d104      	bne.n	800af8a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d007      	beq.n	800af9a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afa0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afac:	2b40      	cmp	r3, #64	; 0x40
 800afae:	d004      	beq.n	800afba <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d031      	beq.n	800b01e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f001 f8ce 	bl	800c15c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afca:	2b40      	cmp	r3, #64	; 0x40
 800afcc:	d123      	bne.n	800b016 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afdc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d013      	beq.n	800b00e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afea:	4a14      	ldr	r2, [pc, #80]	; (800b03c <HAL_UART_IRQHandler+0x244>)
 800afec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7f8 f816 	bl	8003024 <HAL_DMA_Abort_IT>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d017      	beq.n	800b02e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b008:	4610      	mov	r0, r2
 800b00a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b00c:	e00f      	b.n	800b02e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f9b6 	bl	800b380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b014:	e00b      	b.n	800b02e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f9b2 	bl	800b380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b01c:	e007      	b.n	800b02e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f9ae 	bl	800b380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b02c:	e194      	b.n	800b358 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b02e:	bf00      	nop
    return;
 800b030:	e192      	b.n	800b358 <HAL_UART_IRQHandler+0x560>
 800b032:	bf00      	nop
 800b034:	10000001 	.word	0x10000001
 800b038:	04000120 	.word	0x04000120
 800b03c:	0800c1c1 	.word	0x0800c1c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b044:	2b01      	cmp	r3, #1
 800b046:	f040 810f 	bne.w	800b268 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	f003 0310 	and.w	r3, r3, #16
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 8109 	beq.w	800b268 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	f003 0310 	and.w	r3, r3, #16
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 8103 	beq.w	800b268 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2210      	movs	r2, #16
 800b068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b074:	2b40      	cmp	r3, #64	; 0x40
 800b076:	f040 80bb 	bne.w	800b1f0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a8f      	ldr	r2, [pc, #572]	; (800b2c0 <HAL_UART_IRQHandler+0x4c8>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d059      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a8d      	ldr	r2, [pc, #564]	; (800b2c4 <HAL_UART_IRQHandler+0x4cc>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d053      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a8b      	ldr	r2, [pc, #556]	; (800b2c8 <HAL_UART_IRQHandler+0x4d0>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d04d      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a89      	ldr	r2, [pc, #548]	; (800b2cc <HAL_UART_IRQHandler+0x4d4>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d047      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a87      	ldr	r2, [pc, #540]	; (800b2d0 <HAL_UART_IRQHandler+0x4d8>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d041      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a85      	ldr	r2, [pc, #532]	; (800b2d4 <HAL_UART_IRQHandler+0x4dc>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d03b      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a83      	ldr	r2, [pc, #524]	; (800b2d8 <HAL_UART_IRQHandler+0x4e0>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d035      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a81      	ldr	r2, [pc, #516]	; (800b2dc <HAL_UART_IRQHandler+0x4e4>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d02f      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a7f      	ldr	r2, [pc, #508]	; (800b2e0 <HAL_UART_IRQHandler+0x4e8>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d029      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a7d      	ldr	r2, [pc, #500]	; (800b2e4 <HAL_UART_IRQHandler+0x4ec>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d023      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a7b      	ldr	r2, [pc, #492]	; (800b2e8 <HAL_UART_IRQHandler+0x4f0>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d01d      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a79      	ldr	r2, [pc, #484]	; (800b2ec <HAL_UART_IRQHandler+0x4f4>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d017      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a77      	ldr	r2, [pc, #476]	; (800b2f0 <HAL_UART_IRQHandler+0x4f8>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d011      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a75      	ldr	r2, [pc, #468]	; (800b2f4 <HAL_UART_IRQHandler+0x4fc>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d00b      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a73      	ldr	r2, [pc, #460]	; (800b2f8 <HAL_UART_IRQHandler+0x500>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d005      	beq.n	800b13a <HAL_UART_IRQHandler+0x342>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a71      	ldr	r2, [pc, #452]	; (800b2fc <HAL_UART_IRQHandler+0x504>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d105      	bne.n	800b146 <HAL_UART_IRQHandler+0x34e>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	b29b      	uxth	r3, r3
 800b144:	e004      	b.n	800b150 <HAL_UART_IRQHandler+0x358>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	b29b      	uxth	r3, r3
 800b150:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b152:	893b      	ldrh	r3, [r7, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 8101 	beq.w	800b35c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b160:	893a      	ldrh	r2, [r7, #8]
 800b162:	429a      	cmp	r2, r3
 800b164:	f080 80fa 	bcs.w	800b35c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	893a      	ldrh	r2, [r7, #8]
 800b16c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b174:	69db      	ldr	r3, [r3, #28]
 800b176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b17a:	d02b      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b18a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	689a      	ldr	r2, [r3, #8]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f022 0201 	bic.w	r2, r2, #1
 800b19a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	689a      	ldr	r2, [r3, #8]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1aa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f022 0210 	bic.w	r2, r2, #16
 800b1c8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7f7 fc0a 	bl	80029e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f8d3 	bl	800b394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1ee:	e0b5      	b.n	800b35c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b208:	b29b      	uxth	r3, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 80a8 	beq.w	800b360 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b210:	897b      	ldrh	r3, [r7, #10]
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 80a4 	beq.w	800b360 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b226:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6899      	ldr	r1, [r3, #8]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	4b33      	ldr	r3, [pc, #204]	; (800b300 <HAL_UART_IRQHandler+0x508>)
 800b234:	400b      	ands	r3, r1
 800b236:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2220      	movs	r2, #32
 800b23c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f022 0210 	bic.w	r2, r2, #16
 800b25a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b25c:	897b      	ldrh	r3, [r7, #10]
 800b25e:	4619      	mov	r1, r3
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f897 	bl	800b394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b266:	e07b      	b.n	800b360 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d00d      	beq.n	800b28e <HAL_UART_IRQHandler+0x496>
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d008      	beq.n	800b28e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b284:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 ffca 	bl	800c220 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b28c:	e06b      	b.n	800b366 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b294:	2b00      	cmp	r3, #0
 800b296:	d035      	beq.n	800b304 <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d104      	bne.n	800b2ac <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d02b      	beq.n	800b304 <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d057      	beq.n	800b364 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	4798      	blx	r3
    }
    return;
 800b2bc:	e052      	b.n	800b364 <HAL_UART_IRQHandler+0x56c>
 800b2be:	bf00      	nop
 800b2c0:	40020010 	.word	0x40020010
 800b2c4:	40020028 	.word	0x40020028
 800b2c8:	40020040 	.word	0x40020040
 800b2cc:	40020058 	.word	0x40020058
 800b2d0:	40020070 	.word	0x40020070
 800b2d4:	40020088 	.word	0x40020088
 800b2d8:	400200a0 	.word	0x400200a0
 800b2dc:	400200b8 	.word	0x400200b8
 800b2e0:	40020410 	.word	0x40020410
 800b2e4:	40020428 	.word	0x40020428
 800b2e8:	40020440 	.word	0x40020440
 800b2ec:	40020458 	.word	0x40020458
 800b2f0:	40020470 	.word	0x40020470
 800b2f4:	40020488 	.word	0x40020488
 800b2f8:	400204a0 	.word	0x400204a0
 800b2fc:	400204b8 	.word	0x400204b8
 800b300:	effffffe 	.word	0xeffffffe
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d008      	beq.n	800b320 <HAL_UART_IRQHandler+0x528>
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b314:	2b00      	cmp	r3, #0
 800b316:	d003      	beq.n	800b320 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 ff67 	bl	800c1ec <UART_EndTransmit_IT>
    return;
 800b31e:	e022      	b.n	800b366 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d008      	beq.n	800b33c <HAL_UART_IRQHandler+0x544>
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d003      	beq.n	800b33c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 ff87 	bl	800c248 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b33a:	e014      	b.n	800b366 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00f      	beq.n	800b366 <HAL_UART_IRQHandler+0x56e>
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	da0c      	bge.n	800b366 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 ff71 	bl	800c234 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b352:	e008      	b.n	800b366 <HAL_UART_IRQHandler+0x56e>
      return;
 800b354:	bf00      	nop
 800b356:	e006      	b.n	800b366 <HAL_UART_IRQHandler+0x56e>
    return;
 800b358:	bf00      	nop
 800b35a:	e004      	b.n	800b366 <HAL_UART_IRQHandler+0x56e>
      return;
 800b35c:	bf00      	nop
 800b35e:	e002      	b.n	800b366 <HAL_UART_IRQHandler+0x56e>
      return;
 800b360:	bf00      	nop
 800b362:	e000      	b.n	800b366 <HAL_UART_IRQHandler+0x56e>
    return;
 800b364:	bf00      	nop
  }
}
 800b366:	3720      	adds	r7, #32
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3b0:	b092      	sub	sp, #72	; 0x48
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	689a      	ldr	r2, [r3, #8]
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	4bbe      	ldr	r3, [pc, #760]	; (800b6d4 <UART_SetConfig+0x328>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	6812      	ldr	r2, [r2, #0]
 800b3e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	68da      	ldr	r2, [r3, #12]
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4ab3      	ldr	r2, [pc, #716]	; (800b6d8 <UART_SetConfig+0x32c>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d004      	beq.n	800b418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b414:	4313      	orrs	r3, r2
 800b416:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	689a      	ldr	r2, [r3, #8]
 800b41e:	4baf      	ldr	r3, [pc, #700]	; (800b6dc <UART_SetConfig+0x330>)
 800b420:	4013      	ands	r3, r2
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	6812      	ldr	r2, [r2, #0]
 800b426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b428:	430b      	orrs	r3, r1
 800b42a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b432:	f023 010f 	bic.w	r1, r3, #15
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	430a      	orrs	r2, r1
 800b440:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4aa6      	ldr	r2, [pc, #664]	; (800b6e0 <UART_SetConfig+0x334>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d177      	bne.n	800b53c <UART_SetConfig+0x190>
 800b44c:	4ba5      	ldr	r3, [pc, #660]	; (800b6e4 <UART_SetConfig+0x338>)
 800b44e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b454:	2b28      	cmp	r3, #40	; 0x28
 800b456:	d86d      	bhi.n	800b534 <UART_SetConfig+0x188>
 800b458:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <UART_SetConfig+0xb4>)
 800b45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45e:	bf00      	nop
 800b460:	0800b505 	.word	0x0800b505
 800b464:	0800b535 	.word	0x0800b535
 800b468:	0800b535 	.word	0x0800b535
 800b46c:	0800b535 	.word	0x0800b535
 800b470:	0800b535 	.word	0x0800b535
 800b474:	0800b535 	.word	0x0800b535
 800b478:	0800b535 	.word	0x0800b535
 800b47c:	0800b535 	.word	0x0800b535
 800b480:	0800b50d 	.word	0x0800b50d
 800b484:	0800b535 	.word	0x0800b535
 800b488:	0800b535 	.word	0x0800b535
 800b48c:	0800b535 	.word	0x0800b535
 800b490:	0800b535 	.word	0x0800b535
 800b494:	0800b535 	.word	0x0800b535
 800b498:	0800b535 	.word	0x0800b535
 800b49c:	0800b535 	.word	0x0800b535
 800b4a0:	0800b515 	.word	0x0800b515
 800b4a4:	0800b535 	.word	0x0800b535
 800b4a8:	0800b535 	.word	0x0800b535
 800b4ac:	0800b535 	.word	0x0800b535
 800b4b0:	0800b535 	.word	0x0800b535
 800b4b4:	0800b535 	.word	0x0800b535
 800b4b8:	0800b535 	.word	0x0800b535
 800b4bc:	0800b535 	.word	0x0800b535
 800b4c0:	0800b51d 	.word	0x0800b51d
 800b4c4:	0800b535 	.word	0x0800b535
 800b4c8:	0800b535 	.word	0x0800b535
 800b4cc:	0800b535 	.word	0x0800b535
 800b4d0:	0800b535 	.word	0x0800b535
 800b4d4:	0800b535 	.word	0x0800b535
 800b4d8:	0800b535 	.word	0x0800b535
 800b4dc:	0800b535 	.word	0x0800b535
 800b4e0:	0800b525 	.word	0x0800b525
 800b4e4:	0800b535 	.word	0x0800b535
 800b4e8:	0800b535 	.word	0x0800b535
 800b4ec:	0800b535 	.word	0x0800b535
 800b4f0:	0800b535 	.word	0x0800b535
 800b4f4:	0800b535 	.word	0x0800b535
 800b4f8:	0800b535 	.word	0x0800b535
 800b4fc:	0800b535 	.word	0x0800b535
 800b500:	0800b52d 	.word	0x0800b52d
 800b504:	2301      	movs	r3, #1
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50a:	e222      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b50c:	2304      	movs	r3, #4
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b512:	e21e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b514:	2308      	movs	r3, #8
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51a:	e21a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b51c:	2310      	movs	r3, #16
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b522:	e216      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b524:	2320      	movs	r3, #32
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52a:	e212      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b52c:	2340      	movs	r3, #64	; 0x40
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b532:	e20e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b534:	2380      	movs	r3, #128	; 0x80
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53a:	e20a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a69      	ldr	r2, [pc, #420]	; (800b6e8 <UART_SetConfig+0x33c>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d130      	bne.n	800b5a8 <UART_SetConfig+0x1fc>
 800b546:	4b67      	ldr	r3, [pc, #412]	; (800b6e4 <UART_SetConfig+0x338>)
 800b548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54a:	f003 0307 	and.w	r3, r3, #7
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d826      	bhi.n	800b5a0 <UART_SetConfig+0x1f4>
 800b552:	a201      	add	r2, pc, #4	; (adr r2, 800b558 <UART_SetConfig+0x1ac>)
 800b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b558:	0800b571 	.word	0x0800b571
 800b55c:	0800b579 	.word	0x0800b579
 800b560:	0800b581 	.word	0x0800b581
 800b564:	0800b589 	.word	0x0800b589
 800b568:	0800b591 	.word	0x0800b591
 800b56c:	0800b599 	.word	0x0800b599
 800b570:	2300      	movs	r3, #0
 800b572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b576:	e1ec      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b578:	2304      	movs	r3, #4
 800b57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b57e:	e1e8      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b580:	2308      	movs	r3, #8
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b586:	e1e4      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b588:	2310      	movs	r3, #16
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b58e:	e1e0      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b590:	2320      	movs	r3, #32
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b596:	e1dc      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b598:	2340      	movs	r3, #64	; 0x40
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59e:	e1d8      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5a0:	2380      	movs	r3, #128	; 0x80
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a6:	e1d4      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a4f      	ldr	r2, [pc, #316]	; (800b6ec <UART_SetConfig+0x340>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d130      	bne.n	800b614 <UART_SetConfig+0x268>
 800b5b2:	4b4c      	ldr	r3, [pc, #304]	; (800b6e4 <UART_SetConfig+0x338>)
 800b5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b05      	cmp	r3, #5
 800b5bc:	d826      	bhi.n	800b60c <UART_SetConfig+0x260>
 800b5be:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <UART_SetConfig+0x218>)
 800b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c4:	0800b5dd 	.word	0x0800b5dd
 800b5c8:	0800b5e5 	.word	0x0800b5e5
 800b5cc:	0800b5ed 	.word	0x0800b5ed
 800b5d0:	0800b5f5 	.word	0x0800b5f5
 800b5d4:	0800b5fd 	.word	0x0800b5fd
 800b5d8:	0800b605 	.word	0x0800b605
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5e2:	e1b6      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ea:	e1b2      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5ec:	2308      	movs	r3, #8
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5f2:	e1ae      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5fa:	e1aa      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5fc:	2320      	movs	r3, #32
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b602:	e1a6      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b604:	2340      	movs	r3, #64	; 0x40
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60a:	e1a2      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b60c:	2380      	movs	r3, #128	; 0x80
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b612:	e19e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a35      	ldr	r2, [pc, #212]	; (800b6f0 <UART_SetConfig+0x344>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d130      	bne.n	800b680 <UART_SetConfig+0x2d4>
 800b61e:	4b31      	ldr	r3, [pc, #196]	; (800b6e4 <UART_SetConfig+0x338>)
 800b620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b622:	f003 0307 	and.w	r3, r3, #7
 800b626:	2b05      	cmp	r3, #5
 800b628:	d826      	bhi.n	800b678 <UART_SetConfig+0x2cc>
 800b62a:	a201      	add	r2, pc, #4	; (adr r2, 800b630 <UART_SetConfig+0x284>)
 800b62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b630:	0800b649 	.word	0x0800b649
 800b634:	0800b651 	.word	0x0800b651
 800b638:	0800b659 	.word	0x0800b659
 800b63c:	0800b661 	.word	0x0800b661
 800b640:	0800b669 	.word	0x0800b669
 800b644:	0800b671 	.word	0x0800b671
 800b648:	2300      	movs	r3, #0
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b64e:	e180      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b650:	2304      	movs	r3, #4
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b656:	e17c      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b658:	2308      	movs	r3, #8
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65e:	e178      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b660:	2310      	movs	r3, #16
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b666:	e174      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b668:	2320      	movs	r3, #32
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b66e:	e170      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b670:	2340      	movs	r3, #64	; 0x40
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b676:	e16c      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b678:	2380      	movs	r3, #128	; 0x80
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b67e:	e168      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a1b      	ldr	r2, [pc, #108]	; (800b6f4 <UART_SetConfig+0x348>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d142      	bne.n	800b710 <UART_SetConfig+0x364>
 800b68a:	4b16      	ldr	r3, [pc, #88]	; (800b6e4 <UART_SetConfig+0x338>)
 800b68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68e:	f003 0307 	and.w	r3, r3, #7
 800b692:	2b05      	cmp	r3, #5
 800b694:	d838      	bhi.n	800b708 <UART_SetConfig+0x35c>
 800b696:	a201      	add	r2, pc, #4	; (adr r2, 800b69c <UART_SetConfig+0x2f0>)
 800b698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69c:	0800b6b5 	.word	0x0800b6b5
 800b6a0:	0800b6bd 	.word	0x0800b6bd
 800b6a4:	0800b6c5 	.word	0x0800b6c5
 800b6a8:	0800b6cd 	.word	0x0800b6cd
 800b6ac:	0800b6f9 	.word	0x0800b6f9
 800b6b0:	0800b701 	.word	0x0800b701
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ba:	e14a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b6bc:	2304      	movs	r3, #4
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6c2:	e146      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b6c4:	2308      	movs	r3, #8
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ca:	e142      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b6cc:	2310      	movs	r3, #16
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6d2:	e13e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b6d4:	cfff69f3 	.word	0xcfff69f3
 800b6d8:	58000c00 	.word	0x58000c00
 800b6dc:	11fff4ff 	.word	0x11fff4ff
 800b6e0:	40011000 	.word	0x40011000
 800b6e4:	58024400 	.word	0x58024400
 800b6e8:	40004400 	.word	0x40004400
 800b6ec:	40004800 	.word	0x40004800
 800b6f0:	40004c00 	.word	0x40004c00
 800b6f4:	40005000 	.word	0x40005000
 800b6f8:	2320      	movs	r3, #32
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6fe:	e128      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b700:	2340      	movs	r3, #64	; 0x40
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b706:	e124      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b708:	2380      	movs	r3, #128	; 0x80
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b70e:	e120      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4acb      	ldr	r2, [pc, #812]	; (800ba44 <UART_SetConfig+0x698>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d176      	bne.n	800b808 <UART_SetConfig+0x45c>
 800b71a:	4bcb      	ldr	r3, [pc, #812]	; (800ba48 <UART_SetConfig+0x69c>)
 800b71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b71e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b722:	2b28      	cmp	r3, #40	; 0x28
 800b724:	d86c      	bhi.n	800b800 <UART_SetConfig+0x454>
 800b726:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <UART_SetConfig+0x380>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b7d1 	.word	0x0800b7d1
 800b730:	0800b801 	.word	0x0800b801
 800b734:	0800b801 	.word	0x0800b801
 800b738:	0800b801 	.word	0x0800b801
 800b73c:	0800b801 	.word	0x0800b801
 800b740:	0800b801 	.word	0x0800b801
 800b744:	0800b801 	.word	0x0800b801
 800b748:	0800b801 	.word	0x0800b801
 800b74c:	0800b7d9 	.word	0x0800b7d9
 800b750:	0800b801 	.word	0x0800b801
 800b754:	0800b801 	.word	0x0800b801
 800b758:	0800b801 	.word	0x0800b801
 800b75c:	0800b801 	.word	0x0800b801
 800b760:	0800b801 	.word	0x0800b801
 800b764:	0800b801 	.word	0x0800b801
 800b768:	0800b801 	.word	0x0800b801
 800b76c:	0800b7e1 	.word	0x0800b7e1
 800b770:	0800b801 	.word	0x0800b801
 800b774:	0800b801 	.word	0x0800b801
 800b778:	0800b801 	.word	0x0800b801
 800b77c:	0800b801 	.word	0x0800b801
 800b780:	0800b801 	.word	0x0800b801
 800b784:	0800b801 	.word	0x0800b801
 800b788:	0800b801 	.word	0x0800b801
 800b78c:	0800b7e9 	.word	0x0800b7e9
 800b790:	0800b801 	.word	0x0800b801
 800b794:	0800b801 	.word	0x0800b801
 800b798:	0800b801 	.word	0x0800b801
 800b79c:	0800b801 	.word	0x0800b801
 800b7a0:	0800b801 	.word	0x0800b801
 800b7a4:	0800b801 	.word	0x0800b801
 800b7a8:	0800b801 	.word	0x0800b801
 800b7ac:	0800b7f1 	.word	0x0800b7f1
 800b7b0:	0800b801 	.word	0x0800b801
 800b7b4:	0800b801 	.word	0x0800b801
 800b7b8:	0800b801 	.word	0x0800b801
 800b7bc:	0800b801 	.word	0x0800b801
 800b7c0:	0800b801 	.word	0x0800b801
 800b7c4:	0800b801 	.word	0x0800b801
 800b7c8:	0800b801 	.word	0x0800b801
 800b7cc:	0800b7f9 	.word	0x0800b7f9
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7d6:	e0bc      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7d8:	2304      	movs	r3, #4
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7de:	e0b8      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7e0:	2308      	movs	r3, #8
 800b7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7e6:	e0b4      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7e8:	2310      	movs	r3, #16
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ee:	e0b0      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7f0:	2320      	movs	r3, #32
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7f6:	e0ac      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7f8:	2340      	movs	r3, #64	; 0x40
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7fe:	e0a8      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b800:	2380      	movs	r3, #128	; 0x80
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b806:	e0a4      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a8f      	ldr	r2, [pc, #572]	; (800ba4c <UART_SetConfig+0x6a0>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d130      	bne.n	800b874 <UART_SetConfig+0x4c8>
 800b812:	4b8d      	ldr	r3, [pc, #564]	; (800ba48 <UART_SetConfig+0x69c>)
 800b814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b05      	cmp	r3, #5
 800b81c:	d826      	bhi.n	800b86c <UART_SetConfig+0x4c0>
 800b81e:	a201      	add	r2, pc, #4	; (adr r2, 800b824 <UART_SetConfig+0x478>)
 800b820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b824:	0800b83d 	.word	0x0800b83d
 800b828:	0800b845 	.word	0x0800b845
 800b82c:	0800b84d 	.word	0x0800b84d
 800b830:	0800b855 	.word	0x0800b855
 800b834:	0800b85d 	.word	0x0800b85d
 800b838:	0800b865 	.word	0x0800b865
 800b83c:	2300      	movs	r3, #0
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b842:	e086      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b844:	2304      	movs	r3, #4
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b84a:	e082      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b84c:	2308      	movs	r3, #8
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b852:	e07e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b854:	2310      	movs	r3, #16
 800b856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b85a:	e07a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b85c:	2320      	movs	r3, #32
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b862:	e076      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b864:	2340      	movs	r3, #64	; 0x40
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b86a:	e072      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b86c:	2380      	movs	r3, #128	; 0x80
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b872:	e06e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a75      	ldr	r2, [pc, #468]	; (800ba50 <UART_SetConfig+0x6a4>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d130      	bne.n	800b8e0 <UART_SetConfig+0x534>
 800b87e:	4b72      	ldr	r3, [pc, #456]	; (800ba48 <UART_SetConfig+0x69c>)
 800b880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	2b05      	cmp	r3, #5
 800b888:	d826      	bhi.n	800b8d8 <UART_SetConfig+0x52c>
 800b88a:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <UART_SetConfig+0x4e4>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b8a9 	.word	0x0800b8a9
 800b894:	0800b8b1 	.word	0x0800b8b1
 800b898:	0800b8b9 	.word	0x0800b8b9
 800b89c:	0800b8c1 	.word	0x0800b8c1
 800b8a0:	0800b8c9 	.word	0x0800b8c9
 800b8a4:	0800b8d1 	.word	0x0800b8d1
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ae:	e050      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8b0:	2304      	movs	r3, #4
 800b8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8b6:	e04c      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8b8:	2308      	movs	r3, #8
 800b8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8be:	e048      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8c0:	2310      	movs	r3, #16
 800b8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8c6:	e044      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8c8:	2320      	movs	r3, #32
 800b8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ce:	e040      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8d0:	2340      	movs	r3, #64	; 0x40
 800b8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8d6:	e03c      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8d8:	2380      	movs	r3, #128	; 0x80
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8de:	e038      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a5b      	ldr	r2, [pc, #364]	; (800ba54 <UART_SetConfig+0x6a8>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d130      	bne.n	800b94c <UART_SetConfig+0x5a0>
 800b8ea:	4b57      	ldr	r3, [pc, #348]	; (800ba48 <UART_SetConfig+0x69c>)
 800b8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ee:	f003 0307 	and.w	r3, r3, #7
 800b8f2:	2b05      	cmp	r3, #5
 800b8f4:	d826      	bhi.n	800b944 <UART_SetConfig+0x598>
 800b8f6:	a201      	add	r2, pc, #4	; (adr r2, 800b8fc <UART_SetConfig+0x550>)
 800b8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fc:	0800b915 	.word	0x0800b915
 800b900:	0800b91d 	.word	0x0800b91d
 800b904:	0800b925 	.word	0x0800b925
 800b908:	0800b92d 	.word	0x0800b92d
 800b90c:	0800b935 	.word	0x0800b935
 800b910:	0800b93d 	.word	0x0800b93d
 800b914:	2302      	movs	r3, #2
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b91a:	e01a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b91c:	2304      	movs	r3, #4
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b922:	e016      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b924:	2308      	movs	r3, #8
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92a:	e012      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b92c:	2310      	movs	r3, #16
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b932:	e00e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b934:	2320      	movs	r3, #32
 800b936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b93a:	e00a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b93c:	2340      	movs	r3, #64	; 0x40
 800b93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b942:	e006      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b944:	2380      	movs	r3, #128	; 0x80
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b94a:	e002      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b94c:	2380      	movs	r3, #128	; 0x80
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a3f      	ldr	r2, [pc, #252]	; (800ba54 <UART_SetConfig+0x6a8>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	f040 80f8 	bne.w	800bb4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b95e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b962:	2b20      	cmp	r3, #32
 800b964:	dc46      	bgt.n	800b9f4 <UART_SetConfig+0x648>
 800b966:	2b02      	cmp	r3, #2
 800b968:	f2c0 8082 	blt.w	800ba70 <UART_SetConfig+0x6c4>
 800b96c:	3b02      	subs	r3, #2
 800b96e:	2b1e      	cmp	r3, #30
 800b970:	d87e      	bhi.n	800ba70 <UART_SetConfig+0x6c4>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <UART_SetConfig+0x5cc>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b9fb 	.word	0x0800b9fb
 800b97c:	0800ba71 	.word	0x0800ba71
 800b980:	0800ba03 	.word	0x0800ba03
 800b984:	0800ba71 	.word	0x0800ba71
 800b988:	0800ba71 	.word	0x0800ba71
 800b98c:	0800ba71 	.word	0x0800ba71
 800b990:	0800ba13 	.word	0x0800ba13
 800b994:	0800ba71 	.word	0x0800ba71
 800b998:	0800ba71 	.word	0x0800ba71
 800b99c:	0800ba71 	.word	0x0800ba71
 800b9a0:	0800ba71 	.word	0x0800ba71
 800b9a4:	0800ba71 	.word	0x0800ba71
 800b9a8:	0800ba71 	.word	0x0800ba71
 800b9ac:	0800ba71 	.word	0x0800ba71
 800b9b0:	0800ba23 	.word	0x0800ba23
 800b9b4:	0800ba71 	.word	0x0800ba71
 800b9b8:	0800ba71 	.word	0x0800ba71
 800b9bc:	0800ba71 	.word	0x0800ba71
 800b9c0:	0800ba71 	.word	0x0800ba71
 800b9c4:	0800ba71 	.word	0x0800ba71
 800b9c8:	0800ba71 	.word	0x0800ba71
 800b9cc:	0800ba71 	.word	0x0800ba71
 800b9d0:	0800ba71 	.word	0x0800ba71
 800b9d4:	0800ba71 	.word	0x0800ba71
 800b9d8:	0800ba71 	.word	0x0800ba71
 800b9dc:	0800ba71 	.word	0x0800ba71
 800b9e0:	0800ba71 	.word	0x0800ba71
 800b9e4:	0800ba71 	.word	0x0800ba71
 800b9e8:	0800ba71 	.word	0x0800ba71
 800b9ec:	0800ba71 	.word	0x0800ba71
 800b9f0:	0800ba63 	.word	0x0800ba63
 800b9f4:	2b40      	cmp	r3, #64	; 0x40
 800b9f6:	d037      	beq.n	800ba68 <UART_SetConfig+0x6bc>
 800b9f8:	e03a      	b.n	800ba70 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b9fa:	f7fd f9d9 	bl	8008db0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b9fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba00:	e03c      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fd f9e8 	bl	8008ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba10:	e034      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba12:	f107 0318 	add.w	r3, r7, #24
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fd fb34 	bl	8009084 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba20:	e02c      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba22:	4b09      	ldr	r3, [pc, #36]	; (800ba48 <UART_SetConfig+0x69c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d016      	beq.n	800ba5c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba2e:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <UART_SetConfig+0x69c>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	08db      	lsrs	r3, r3, #3
 800ba34:	f003 0303 	and.w	r3, r3, #3
 800ba38:	4a07      	ldr	r2, [pc, #28]	; (800ba58 <UART_SetConfig+0x6ac>)
 800ba3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba40:	e01c      	b.n	800ba7c <UART_SetConfig+0x6d0>
 800ba42:	bf00      	nop
 800ba44:	40011400 	.word	0x40011400
 800ba48:	58024400 	.word	0x58024400
 800ba4c:	40007800 	.word	0x40007800
 800ba50:	40007c00 	.word	0x40007c00
 800ba54:	58000c00 	.word	0x58000c00
 800ba58:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ba5c:	4b9e      	ldr	r3, [pc, #632]	; (800bcd8 <UART_SetConfig+0x92c>)
 800ba5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba60:	e00c      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba62:	4b9e      	ldr	r3, [pc, #632]	; (800bcdc <UART_SetConfig+0x930>)
 800ba64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba66:	e009      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba6e:	e005      	b.n	800ba7c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ba70:	2300      	movs	r3, #0
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ba7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 81e0 	beq.w	800be44 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	4a95      	ldr	r2, [pc, #596]	; (800bce0 <UART_SetConfig+0x934>)
 800ba8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba96:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	4413      	add	r3, r2
 800baa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d305      	bcc.n	800bab4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800baae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d903      	bls.n	800babc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800baba:	e1c3      	b.n	800be44 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800babc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800babe:	2200      	movs	r2, #0
 800bac0:	60bb      	str	r3, [r7, #8]
 800bac2:	60fa      	str	r2, [r7, #12]
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	4a85      	ldr	r2, [pc, #532]	; (800bce0 <UART_SetConfig+0x934>)
 800baca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bace:	b29b      	uxth	r3, r3
 800bad0:	2200      	movs	r2, #0
 800bad2:	603b      	str	r3, [r7, #0]
 800bad4:	607a      	str	r2, [r7, #4]
 800bad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bade:	f7f4 fc57 	bl	8000390 <__aeabi_uldivmod>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4610      	mov	r0, r2
 800bae8:	4619      	mov	r1, r3
 800baea:	f04f 0200 	mov.w	r2, #0
 800baee:	f04f 0300 	mov.w	r3, #0
 800baf2:	020b      	lsls	r3, r1, #8
 800baf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800baf8:	0202      	lsls	r2, r0, #8
 800bafa:	6979      	ldr	r1, [r7, #20]
 800bafc:	6849      	ldr	r1, [r1, #4]
 800bafe:	0849      	lsrs	r1, r1, #1
 800bb00:	2000      	movs	r0, #0
 800bb02:	460c      	mov	r4, r1
 800bb04:	4605      	mov	r5, r0
 800bb06:	eb12 0804 	adds.w	r8, r2, r4
 800bb0a:	eb43 0905 	adc.w	r9, r3, r5
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	469a      	mov	sl, r3
 800bb16:	4693      	mov	fp, r2
 800bb18:	4652      	mov	r2, sl
 800bb1a:	465b      	mov	r3, fp
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 fc36 	bl	8000390 <__aeabi_uldivmod>
 800bb24:	4602      	mov	r2, r0
 800bb26:	460b      	mov	r3, r1
 800bb28:	4613      	mov	r3, r2
 800bb2a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb32:	d308      	bcc.n	800bb46 <UART_SetConfig+0x79a>
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb3a:	d204      	bcs.n	800bb46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb42:	60da      	str	r2, [r3, #12]
 800bb44:	e17e      	b.n	800be44 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bb4c:	e17a      	b.n	800be44 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb56:	f040 80c7 	bne.w	800bce8 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 800bb5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb5e:	2b20      	cmp	r3, #32
 800bb60:	dc48      	bgt.n	800bbf4 <UART_SetConfig+0x848>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	db7b      	blt.n	800bc5e <UART_SetConfig+0x8b2>
 800bb66:	2b20      	cmp	r3, #32
 800bb68:	d879      	bhi.n	800bc5e <UART_SetConfig+0x8b2>
 800bb6a:	a201      	add	r2, pc, #4	; (adr r2, 800bb70 <UART_SetConfig+0x7c4>)
 800bb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb70:	0800bbfb 	.word	0x0800bbfb
 800bb74:	0800bc03 	.word	0x0800bc03
 800bb78:	0800bc5f 	.word	0x0800bc5f
 800bb7c:	0800bc5f 	.word	0x0800bc5f
 800bb80:	0800bc0b 	.word	0x0800bc0b
 800bb84:	0800bc5f 	.word	0x0800bc5f
 800bb88:	0800bc5f 	.word	0x0800bc5f
 800bb8c:	0800bc5f 	.word	0x0800bc5f
 800bb90:	0800bc1b 	.word	0x0800bc1b
 800bb94:	0800bc5f 	.word	0x0800bc5f
 800bb98:	0800bc5f 	.word	0x0800bc5f
 800bb9c:	0800bc5f 	.word	0x0800bc5f
 800bba0:	0800bc5f 	.word	0x0800bc5f
 800bba4:	0800bc5f 	.word	0x0800bc5f
 800bba8:	0800bc5f 	.word	0x0800bc5f
 800bbac:	0800bc5f 	.word	0x0800bc5f
 800bbb0:	0800bc2b 	.word	0x0800bc2b
 800bbb4:	0800bc5f 	.word	0x0800bc5f
 800bbb8:	0800bc5f 	.word	0x0800bc5f
 800bbbc:	0800bc5f 	.word	0x0800bc5f
 800bbc0:	0800bc5f 	.word	0x0800bc5f
 800bbc4:	0800bc5f 	.word	0x0800bc5f
 800bbc8:	0800bc5f 	.word	0x0800bc5f
 800bbcc:	0800bc5f 	.word	0x0800bc5f
 800bbd0:	0800bc5f 	.word	0x0800bc5f
 800bbd4:	0800bc5f 	.word	0x0800bc5f
 800bbd8:	0800bc5f 	.word	0x0800bc5f
 800bbdc:	0800bc5f 	.word	0x0800bc5f
 800bbe0:	0800bc5f 	.word	0x0800bc5f
 800bbe4:	0800bc5f 	.word	0x0800bc5f
 800bbe8:	0800bc5f 	.word	0x0800bc5f
 800bbec:	0800bc5f 	.word	0x0800bc5f
 800bbf0:	0800bc51 	.word	0x0800bc51
 800bbf4:	2b40      	cmp	r3, #64	; 0x40
 800bbf6:	d02e      	beq.n	800bc56 <UART_SetConfig+0x8aa>
 800bbf8:	e031      	b.n	800bc5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbfa:	f7fc f925 	bl	8007e48 <HAL_RCC_GetPCLK1Freq>
 800bbfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc00:	e033      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc02:	f7fc f937 	bl	8007e74 <HAL_RCC_GetPCLK2Freq>
 800bc06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc08:	e02f      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fd f8e4 	bl	8008ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc18:	e027      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc1a:	f107 0318 	add.w	r3, r7, #24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fd fa30 	bl	8009084 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc28:	e01f      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc2a:	4b2e      	ldr	r3, [pc, #184]	; (800bce4 <UART_SetConfig+0x938>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 0320 	and.w	r3, r3, #32
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d009      	beq.n	800bc4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc36:	4b2b      	ldr	r3, [pc, #172]	; (800bce4 <UART_SetConfig+0x938>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	08db      	lsrs	r3, r3, #3
 800bc3c:	f003 0303 	and.w	r3, r3, #3
 800bc40:	4a25      	ldr	r2, [pc, #148]	; (800bcd8 <UART_SetConfig+0x92c>)
 800bc42:	fa22 f303 	lsr.w	r3, r2, r3
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc48:	e00f      	b.n	800bc6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bc4a:	4b23      	ldr	r3, [pc, #140]	; (800bcd8 <UART_SetConfig+0x92c>)
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc4e:	e00c      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc50:	4b22      	ldr	r3, [pc, #136]	; (800bcdc <UART_SetConfig+0x930>)
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc54:	e009      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc5c:	e005      	b.n	800bc6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bc68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 80e9 	beq.w	800be44 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	4a1a      	ldr	r2, [pc, #104]	; (800bce0 <UART_SetConfig+0x934>)
 800bc78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc80:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc84:	005a      	lsls	r2, r3, #1
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	085b      	lsrs	r3, r3, #1
 800bc8c:	441a      	add	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9c:	2b0f      	cmp	r3, #15
 800bc9e:	d916      	bls.n	800bcce <UART_SetConfig+0x922>
 800bca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca6:	d212      	bcs.n	800bcce <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	f023 030f 	bic.w	r3, r3, #15
 800bcb0:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb4:	085b      	lsrs	r3, r3, #1
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	f003 0307 	and.w	r3, r3, #7
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bcca:	60da      	str	r2, [r3, #12]
 800bccc:	e0ba      	b.n	800be44 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bcd4:	e0b6      	b.n	800be44 <UART_SetConfig+0xa98>
 800bcd6:	bf00      	nop
 800bcd8:	03d09000 	.word	0x03d09000
 800bcdc:	003d0900 	.word	0x003d0900
 800bce0:	08012c68 	.word	0x08012c68
 800bce4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bce8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bcec:	2b20      	cmp	r3, #32
 800bcee:	dc49      	bgt.n	800bd84 <UART_SetConfig+0x9d8>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	db7c      	blt.n	800bdee <UART_SetConfig+0xa42>
 800bcf4:	2b20      	cmp	r3, #32
 800bcf6:	d87a      	bhi.n	800bdee <UART_SetConfig+0xa42>
 800bcf8:	a201      	add	r2, pc, #4	; (adr r2, 800bd00 <UART_SetConfig+0x954>)
 800bcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfe:	bf00      	nop
 800bd00:	0800bd8b 	.word	0x0800bd8b
 800bd04:	0800bd93 	.word	0x0800bd93
 800bd08:	0800bdef 	.word	0x0800bdef
 800bd0c:	0800bdef 	.word	0x0800bdef
 800bd10:	0800bd9b 	.word	0x0800bd9b
 800bd14:	0800bdef 	.word	0x0800bdef
 800bd18:	0800bdef 	.word	0x0800bdef
 800bd1c:	0800bdef 	.word	0x0800bdef
 800bd20:	0800bdab 	.word	0x0800bdab
 800bd24:	0800bdef 	.word	0x0800bdef
 800bd28:	0800bdef 	.word	0x0800bdef
 800bd2c:	0800bdef 	.word	0x0800bdef
 800bd30:	0800bdef 	.word	0x0800bdef
 800bd34:	0800bdef 	.word	0x0800bdef
 800bd38:	0800bdef 	.word	0x0800bdef
 800bd3c:	0800bdef 	.word	0x0800bdef
 800bd40:	0800bdbb 	.word	0x0800bdbb
 800bd44:	0800bdef 	.word	0x0800bdef
 800bd48:	0800bdef 	.word	0x0800bdef
 800bd4c:	0800bdef 	.word	0x0800bdef
 800bd50:	0800bdef 	.word	0x0800bdef
 800bd54:	0800bdef 	.word	0x0800bdef
 800bd58:	0800bdef 	.word	0x0800bdef
 800bd5c:	0800bdef 	.word	0x0800bdef
 800bd60:	0800bdef 	.word	0x0800bdef
 800bd64:	0800bdef 	.word	0x0800bdef
 800bd68:	0800bdef 	.word	0x0800bdef
 800bd6c:	0800bdef 	.word	0x0800bdef
 800bd70:	0800bdef 	.word	0x0800bdef
 800bd74:	0800bdef 	.word	0x0800bdef
 800bd78:	0800bdef 	.word	0x0800bdef
 800bd7c:	0800bdef 	.word	0x0800bdef
 800bd80:	0800bde1 	.word	0x0800bde1
 800bd84:	2b40      	cmp	r3, #64	; 0x40
 800bd86:	d02e      	beq.n	800bde6 <UART_SetConfig+0xa3a>
 800bd88:	e031      	b.n	800bdee <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd8a:	f7fc f85d 	bl	8007e48 <HAL_RCC_GetPCLK1Freq>
 800bd8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd90:	e033      	b.n	800bdfa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd92:	f7fc f86f 	bl	8007e74 <HAL_RCC_GetPCLK2Freq>
 800bd96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd98:	e02f      	b.n	800bdfa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fd f81c 	bl	8008ddc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bda8:	e027      	b.n	800bdfa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdaa:	f107 0318 	add.w	r3, r7, #24
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fd f968 	bl	8009084 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdb8:	e01f      	b.n	800bdfa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdba:	4b2d      	ldr	r3, [pc, #180]	; (800be70 <UART_SetConfig+0xac4>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 0320 	and.w	r3, r3, #32
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d009      	beq.n	800bdda <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdc6:	4b2a      	ldr	r3, [pc, #168]	; (800be70 <UART_SetConfig+0xac4>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	08db      	lsrs	r3, r3, #3
 800bdcc:	f003 0303 	and.w	r3, r3, #3
 800bdd0:	4a28      	ldr	r2, [pc, #160]	; (800be74 <UART_SetConfig+0xac8>)
 800bdd2:	fa22 f303 	lsr.w	r3, r2, r3
 800bdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdd8:	e00f      	b.n	800bdfa <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 800bdda:	4b26      	ldr	r3, [pc, #152]	; (800be74 <UART_SetConfig+0xac8>)
 800bddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdde:	e00c      	b.n	800bdfa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bde0:	4b25      	ldr	r3, [pc, #148]	; (800be78 <UART_SetConfig+0xacc>)
 800bde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde4:	e009      	b.n	800bdfa <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bde6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdec:	e005      	b.n	800bdfa <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bdf8:	bf00      	nop
    }

    if (pclk != 0U)
 800bdfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d021      	beq.n	800be44 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	4a1d      	ldr	r2, [pc, #116]	; (800be7c <UART_SetConfig+0xad0>)
 800be06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be0a:	461a      	mov	r2, r3
 800be0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	085b      	lsrs	r3, r3, #1
 800be18:	441a      	add	r2, r3
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be22:	b29b      	uxth	r3, r3
 800be24:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be28:	2b0f      	cmp	r3, #15
 800be2a:	d908      	bls.n	800be3e <UART_SetConfig+0xa92>
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be32:	d204      	bcs.n	800be3e <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be3a:	60da      	str	r2, [r3, #12]
 800be3c:	e002      	b.n	800be44 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	2201      	movs	r2, #1
 800be48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	2201      	movs	r2, #1
 800be50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2200      	movs	r2, #0
 800be58:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	2200      	movs	r2, #0
 800be5e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800be60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800be64:	4618      	mov	r0, r3
 800be66:	3748      	adds	r7, #72	; 0x48
 800be68:	46bd      	mov	sp, r7
 800be6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be6e:	bf00      	nop
 800be70:	58024400 	.word	0x58024400
 800be74:	03d09000 	.word	0x03d09000
 800be78:	003d0900 	.word	0x003d0900
 800be7c:	08012c68 	.word	0x08012c68

0800be80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8c:	f003 0301 	and.w	r3, r3, #1
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00a      	beq.n	800beaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	430a      	orrs	r2, r1
 800bea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beae:	f003 0302 	and.w	r3, r3, #2
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	430a      	orrs	r2, r1
 800beca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00a      	beq.n	800beee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	430a      	orrs	r2, r1
 800beec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef2:	f003 0308 	and.w	r3, r3, #8
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00a      	beq.n	800bf10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	430a      	orrs	r2, r1
 800bf0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf14:	f003 0310 	and.w	r3, r3, #16
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00a      	beq.n	800bf32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	430a      	orrs	r2, r1
 800bf30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf36:	f003 0320 	and.w	r3, r3, #32
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00a      	beq.n	800bf54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	430a      	orrs	r2, r1
 800bf52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d01a      	beq.n	800bf96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	430a      	orrs	r2, r1
 800bf74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf7e:	d10a      	bne.n	800bf96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	430a      	orrs	r2, r1
 800bf94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00a      	beq.n	800bfb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	605a      	str	r2, [r3, #4]
  }
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b086      	sub	sp, #24
 800bfc8:	af02      	add	r7, sp, #8
 800bfca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfd4:	f7f5 ffd6 	bl	8001f84 <HAL_GetTick>
 800bfd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f003 0308 	and.w	r3, r3, #8
 800bfe4:	2b08      	cmp	r3, #8
 800bfe6:	d10e      	bne.n	800c006 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f82f 	bl	800c05a <UART_WaitOnFlagUntilTimeout>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c002:	2303      	movs	r3, #3
 800c004:	e025      	b.n	800c052 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0304 	and.w	r3, r3, #4
 800c010:	2b04      	cmp	r3, #4
 800c012:	d10e      	bne.n	800c032 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 f819 	bl	800c05a <UART_WaitOnFlagUntilTimeout>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c02e:	2303      	movs	r3, #3
 800c030:	e00f      	b.n	800c052 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2220      	movs	r2, #32
 800c036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b084      	sub	sp, #16
 800c05e:	af00      	add	r7, sp, #0
 800c060:	60f8      	str	r0, [r7, #12]
 800c062:	60b9      	str	r1, [r7, #8]
 800c064:	603b      	str	r3, [r7, #0]
 800c066:	4613      	mov	r3, r2
 800c068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c06a:	e062      	b.n	800c132 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c072:	d05e      	beq.n	800c132 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c074:	f7f5 ff86 	bl	8001f84 <HAL_GetTick>
 800c078:	4602      	mov	r2, r0
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	69ba      	ldr	r2, [r7, #24]
 800c080:	429a      	cmp	r2, r3
 800c082:	d302      	bcc.n	800c08a <UART_WaitOnFlagUntilTimeout+0x30>
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d11d      	bne.n	800c0c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c098:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	689a      	ldr	r2, [r3, #8]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f022 0201 	bic.w	r2, r2, #1
 800c0a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2220      	movs	r2, #32
 800c0ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	e045      	b.n	800c152 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 0304 	and.w	r3, r3, #4
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d02e      	beq.n	800c132 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	69db      	ldr	r3, [r3, #28]
 800c0da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0e2:	d126      	bne.n	800c132 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c0fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	689a      	ldr	r2, [r3, #8]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f022 0201 	bic.w	r2, r2, #1
 800c10c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2220      	movs	r2, #32
 800c112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2220      	movs	r2, #32
 800c11a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2220      	movs	r2, #32
 800c122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e00f      	b.n	800c152 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	69da      	ldr	r2, [r3, #28]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	4013      	ands	r3, r2
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	429a      	cmp	r2, r3
 800c140:	bf0c      	ite	eq
 800c142:	2301      	moveq	r3, #1
 800c144:	2300      	movne	r3, #0
 800c146:	b2db      	uxtb	r3, r3
 800c148:	461a      	mov	r2, r3
 800c14a:	79fb      	ldrb	r3, [r7, #7]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d08d      	beq.n	800c06c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c172:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	6899      	ldr	r1, [r3, #8]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	4b0f      	ldr	r3, [pc, #60]	; (800c1bc <UART_EndRxTransfer+0x60>)
 800c180:	400b      	ands	r3, r1
 800c182:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d107      	bne.n	800c19c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f022 0210 	bic.w	r2, r2, #16
 800c19a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2220      	movs	r2, #32
 800c1a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	effffffe 	.word	0xeffffffe

0800c1c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f7ff f8ce 	bl	800b380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1e4:	bf00      	nop
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c202:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2220      	movs	r2, #32
 800c208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff f8aa 	bl	800b36c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c218:	bf00      	nop
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d101      	bne.n	800c272 <HAL_UARTEx_DisableFifoMode+0x16>
 800c26e:	2302      	movs	r3, #2
 800c270:	e027      	b.n	800c2c2 <HAL_UARTEx_DisableFifoMode+0x66>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2224      	movs	r2, #36	; 0x24
 800c27e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f022 0201 	bic.w	r2, r2, #1
 800c298:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c2a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2220      	movs	r2, #32
 800c2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d101      	bne.n	800c2e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	e02d      	b.n	800c342 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2224      	movs	r2, #36	; 0x24
 800c2f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f022 0201 	bic.w	r2, r2, #1
 800c30c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	683a      	ldr	r2, [r7, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f850 	bl	800c3c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2220      	movs	r2, #32
 800c334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d101      	bne.n	800c362 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c35e:	2302      	movs	r3, #2
 800c360:	e02d      	b.n	800c3be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2201      	movs	r2, #1
 800c366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2224      	movs	r2, #36	; 0x24
 800c36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f022 0201 	bic.w	r2, r2, #1
 800c388:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	683a      	ldr	r2, [r7, #0]
 800c39a:	430a      	orrs	r2, r1
 800c39c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f812 	bl	800c3c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2220      	movs	r2, #32
 800c3b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d108      	bne.n	800c3ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3e8:	e031      	b.n	800c44e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3ea:	2310      	movs	r3, #16
 800c3ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3ee:	2310      	movs	r3, #16
 800c3f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	0e5b      	lsrs	r3, r3, #25
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	f003 0307 	and.w	r3, r3, #7
 800c400:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	0f5b      	lsrs	r3, r3, #29
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	f003 0307 	and.w	r3, r3, #7
 800c410:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c412:	7bbb      	ldrb	r3, [r7, #14]
 800c414:	7b3a      	ldrb	r2, [r7, #12]
 800c416:	4911      	ldr	r1, [pc, #68]	; (800c45c <UARTEx_SetNbDataToProcess+0x94>)
 800c418:	5c8a      	ldrb	r2, [r1, r2]
 800c41a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c41e:	7b3a      	ldrb	r2, [r7, #12]
 800c420:	490f      	ldr	r1, [pc, #60]	; (800c460 <UARTEx_SetNbDataToProcess+0x98>)
 800c422:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c424:	fb93 f3f2 	sdiv	r3, r3, r2
 800c428:	b29a      	uxth	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c430:	7bfb      	ldrb	r3, [r7, #15]
 800c432:	7b7a      	ldrb	r2, [r7, #13]
 800c434:	4909      	ldr	r1, [pc, #36]	; (800c45c <UARTEx_SetNbDataToProcess+0x94>)
 800c436:	5c8a      	ldrb	r2, [r1, r2]
 800c438:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c43c:	7b7a      	ldrb	r2, [r7, #13]
 800c43e:	4908      	ldr	r1, [pc, #32]	; (800c460 <UARTEx_SetNbDataToProcess+0x98>)
 800c440:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c442:	fb93 f3f2 	sdiv	r3, r3, r2
 800c446:	b29a      	uxth	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c44e:	bf00      	nop
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	08012c80 	.word	0x08012c80
 800c460:	08012c88 	.word	0x08012c88

0800c464 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c472:	4618      	mov	r0, r3
 800c474:	370c      	adds	r7, #12
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr

0800c47e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c47e:	b480      	push	{r7}
 800c480:	b083      	sub	sp, #12
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c4be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c4c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c4ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	4b06      	ldr	r3, [pc, #24]	; (800c4f0 <SDMMC_SendCommand+0x50>)
 800c4d8:	4013      	ands	r3, r2
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	431a      	orrs	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3714      	adds	r7, #20
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr
 800c4f0:	fffee0c0 	.word	0xfffee0c0

0800c4f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	b2db      	uxtb	r3, r3
}
 800c502:	4618      	mov	r0, r3
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c50e:	b480      	push	{r7}
 800c510:	b085      	sub	sp, #20
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	3314      	adds	r3, #20
 800c51c:	461a      	mov	r2, r3
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	4413      	add	r3, r2
 800c522:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b088      	sub	sp, #32
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c53c:	2300      	movs	r3, #0
 800c53e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c540:	230c      	movs	r3, #12
 800c542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c544:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c54a:	2300      	movs	r3, #0
 800c54c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c54e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c552:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c56c:	f107 0308 	add.w	r3, r7, #8
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff ff94 	bl	800c4a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c578:	4a0b      	ldr	r2, [pc, #44]	; (800c5a8 <SDMMC_CmdStopTransfer+0x74>)
 800c57a:	210c      	movs	r1, #12
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f815 	bl	800c5ac <SDMMC_GetCmdResp1>
 800c582:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c596:	d101      	bne.n	800c59c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c598:	2300      	movs	r3, #0
 800c59a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c59c:	69fb      	ldr	r3, [r7, #28]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3720      	adds	r7, #32
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	05f5e100 	.word	0x05f5e100

0800c5ac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b088      	sub	sp, #32
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c5ba:	4b70      	ldr	r3, [pc, #448]	; (800c77c <SDMMC_GetCmdResp1+0x1d0>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a70      	ldr	r2, [pc, #448]	; (800c780 <SDMMC_GetCmdResp1+0x1d4>)
 800c5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c4:	0a5a      	lsrs	r2, r3, #9
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	fb02 f303 	mul.w	r3, r2, r3
 800c5cc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	1e5a      	subs	r2, r3, #1
 800c5d2:	61fa      	str	r2, [r7, #28]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d102      	bne.n	800c5de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5dc:	e0c9      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5e2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	4b67      	ldr	r3, [pc, #412]	; (800c784 <SDMMC_GetCmdResp1+0x1d8>)
 800c5e8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d0ef      	beq.n	800c5ce <SDMMC_GetCmdResp1+0x22>
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1ea      	bne.n	800c5ce <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fc:	f003 0304 	and.w	r3, r3, #4
 800c600:	2b00      	cmp	r3, #0
 800c602:	d004      	beq.n	800c60e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2204      	movs	r2, #4
 800c608:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c60a:	2304      	movs	r3, #4
 800c60c:	e0b1      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c612:	f003 0301 	and.w	r3, r3, #1
 800c616:	2b00      	cmp	r3, #0
 800c618:	d004      	beq.n	800c624 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2201      	movs	r2, #1
 800c61e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c620:	2301      	movs	r3, #1
 800c622:	e0a6      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	4a58      	ldr	r2, [pc, #352]	; (800c788 <SDMMC_GetCmdResp1+0x1dc>)
 800c628:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7ff ff62 	bl	800c4f4 <SDMMC_GetCommandResponse>
 800c630:	4603      	mov	r3, r0
 800c632:	461a      	mov	r2, r3
 800c634:	7afb      	ldrb	r3, [r7, #11]
 800c636:	4293      	cmp	r3, r2
 800c638:	d001      	beq.n	800c63e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c63a:	2301      	movs	r3, #1
 800c63c:	e099      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c63e:	2100      	movs	r1, #0
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f7ff ff64 	bl	800c50e <SDMMC_GetResponse>
 800c646:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	4b50      	ldr	r3, [pc, #320]	; (800c78c <SDMMC_GetCmdResp1+0x1e0>)
 800c64c:	4013      	ands	r3, r2
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c652:	2300      	movs	r3, #0
 800c654:	e08d      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	da02      	bge.n	800c662 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c65c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c660:	e087      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c66c:	2340      	movs	r3, #64	; 0x40
 800c66e:	e080      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c67a:	2380      	movs	r3, #128	; 0x80
 800c67c:	e079      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c68c:	e071      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c698:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c69c:	e069      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d002      	beq.n	800c6ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c6a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ac:	e061      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d002      	beq.n	800c6be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c6b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6bc:	e059      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6cc:	e051      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c6dc:	e049      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d002      	beq.n	800c6ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c6e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c6ec:	e041      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c6f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6fc:	e039      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c708:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c70c:	e031      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d002      	beq.n	800c71e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c718:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c71c:	e029      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c728:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c72c:	e021      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c738:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c73c:	e019      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c744:	2b00      	cmp	r3, #0
 800c746:	d002      	beq.n	800c74e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c748:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c74c:	e011      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c758:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c75c:	e009      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	f003 0308 	and.w	r3, r3, #8
 800c764:	2b00      	cmp	r3, #0
 800c766:	d002      	beq.n	800c76e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c768:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c76c:	e001      	b.n	800c772 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c76e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c772:	4618      	mov	r0, r3
 800c774:	3720      	adds	r7, #32
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	24000000 	.word	0x24000000
 800c780:	10624dd3 	.word	0x10624dd3
 800c784:	00200045 	.word	0x00200045
 800c788:	002000c5 	.word	0x002000c5
 800c78c:	fdffe008 	.word	0xfdffe008

0800c790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c790:	b084      	sub	sp, #16
 800c792:	b580      	push	{r7, lr}
 800c794:	b084      	sub	sp, #16
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	f107 001c 	add.w	r0, r7, #28
 800c79e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d120      	bne.n	800c7ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	68da      	ldr	r2, [r3, #12]
 800c7b8:	4b2a      	ldr	r3, [pc, #168]	; (800c864 <USB_CoreInit+0xd4>)
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d105      	bne.n	800c7de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f001 fb14 	bl	800de0c <USB_CoreReset>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	73fb      	strb	r3, [r7, #15]
 800c7e8:	e01a      	b.n	800c820 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	68db      	ldr	r3, [r3, #12]
 800c7ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f001 fb08 	bl	800de0c <USB_CoreReset>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c802:	2b00      	cmp	r3, #0
 800c804:	d106      	bne.n	800c814 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	639a      	str	r2, [r3, #56]	; 0x38
 800c812:	e005      	b.n	800c820 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c818:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	2b01      	cmp	r3, #1
 800c824:	d116      	bne.n	800c854 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c834:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <USB_CoreInit+0xd8>)
 800c836:	4313      	orrs	r3, r2
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	f043 0206 	orr.w	r2, r3, #6
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	f043 0220 	orr.w	r2, r3, #32
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c854:	7bfb      	ldrb	r3, [r7, #15]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c860:	b004      	add	sp, #16
 800c862:	4770      	bx	lr
 800c864:	ffbdffbf 	.word	0xffbdffbf
 800c868:	03ee0000 	.word	0x03ee0000

0800c86c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	4613      	mov	r3, r2
 800c878:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d165      	bne.n	800c94c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	4a41      	ldr	r2, [pc, #260]	; (800c988 <USB_SetTurnaroundTime+0x11c>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d906      	bls.n	800c896 <USB_SetTurnaroundTime+0x2a>
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	4a40      	ldr	r2, [pc, #256]	; (800c98c <USB_SetTurnaroundTime+0x120>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d202      	bcs.n	800c896 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c890:	230f      	movs	r3, #15
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	e062      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	4a3c      	ldr	r2, [pc, #240]	; (800c98c <USB_SetTurnaroundTime+0x120>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d306      	bcc.n	800c8ac <USB_SetTurnaroundTime+0x40>
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	4a3b      	ldr	r2, [pc, #236]	; (800c990 <USB_SetTurnaroundTime+0x124>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d202      	bcs.n	800c8ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c8a6:	230e      	movs	r3, #14
 800c8a8:	617b      	str	r3, [r7, #20]
 800c8aa:	e057      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4a38      	ldr	r2, [pc, #224]	; (800c990 <USB_SetTurnaroundTime+0x124>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d306      	bcc.n	800c8c2 <USB_SetTurnaroundTime+0x56>
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	4a37      	ldr	r2, [pc, #220]	; (800c994 <USB_SetTurnaroundTime+0x128>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d202      	bcs.n	800c8c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c8bc:	230d      	movs	r3, #13
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	e04c      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	4a33      	ldr	r2, [pc, #204]	; (800c994 <USB_SetTurnaroundTime+0x128>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d306      	bcc.n	800c8d8 <USB_SetTurnaroundTime+0x6c>
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	4a32      	ldr	r2, [pc, #200]	; (800c998 <USB_SetTurnaroundTime+0x12c>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d802      	bhi.n	800c8d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c8d2:	230c      	movs	r3, #12
 800c8d4:	617b      	str	r3, [r7, #20]
 800c8d6:	e041      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	4a2f      	ldr	r2, [pc, #188]	; (800c998 <USB_SetTurnaroundTime+0x12c>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d906      	bls.n	800c8ee <USB_SetTurnaroundTime+0x82>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	4a2e      	ldr	r2, [pc, #184]	; (800c99c <USB_SetTurnaroundTime+0x130>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d802      	bhi.n	800c8ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c8e8:	230b      	movs	r3, #11
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	e036      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	4a2a      	ldr	r2, [pc, #168]	; (800c99c <USB_SetTurnaroundTime+0x130>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d906      	bls.n	800c904 <USB_SetTurnaroundTime+0x98>
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	4a29      	ldr	r2, [pc, #164]	; (800c9a0 <USB_SetTurnaroundTime+0x134>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d802      	bhi.n	800c904 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c8fe:	230a      	movs	r3, #10
 800c900:	617b      	str	r3, [r7, #20]
 800c902:	e02b      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	4a26      	ldr	r2, [pc, #152]	; (800c9a0 <USB_SetTurnaroundTime+0x134>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d906      	bls.n	800c91a <USB_SetTurnaroundTime+0xae>
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	4a25      	ldr	r2, [pc, #148]	; (800c9a4 <USB_SetTurnaroundTime+0x138>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d202      	bcs.n	800c91a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c914:	2309      	movs	r3, #9
 800c916:	617b      	str	r3, [r7, #20]
 800c918:	e020      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	4a21      	ldr	r2, [pc, #132]	; (800c9a4 <USB_SetTurnaroundTime+0x138>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d306      	bcc.n	800c930 <USB_SetTurnaroundTime+0xc4>
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	4a20      	ldr	r2, [pc, #128]	; (800c9a8 <USB_SetTurnaroundTime+0x13c>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d802      	bhi.n	800c930 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c92a:	2308      	movs	r3, #8
 800c92c:	617b      	str	r3, [r7, #20]
 800c92e:	e015      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	4a1d      	ldr	r2, [pc, #116]	; (800c9a8 <USB_SetTurnaroundTime+0x13c>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d906      	bls.n	800c946 <USB_SetTurnaroundTime+0xda>
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	4a1c      	ldr	r2, [pc, #112]	; (800c9ac <USB_SetTurnaroundTime+0x140>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d202      	bcs.n	800c946 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c940:	2307      	movs	r3, #7
 800c942:	617b      	str	r3, [r7, #20]
 800c944:	e00a      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c946:	2306      	movs	r3, #6
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	e007      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c94c:	79fb      	ldrb	r3, [r7, #7]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d102      	bne.n	800c958 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c952:	2309      	movs	r3, #9
 800c954:	617b      	str	r3, [r7, #20]
 800c956:	e001      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c958:	2309      	movs	r3, #9
 800c95a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	68da      	ldr	r2, [r3, #12]
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	029b      	lsls	r3, r3, #10
 800c970:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c974:	431a      	orrs	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	371c      	adds	r7, #28
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	00d8acbf 	.word	0x00d8acbf
 800c98c:	00e4e1c0 	.word	0x00e4e1c0
 800c990:	00f42400 	.word	0x00f42400
 800c994:	01067380 	.word	0x01067380
 800c998:	011a499f 	.word	0x011a499f
 800c99c:	01312cff 	.word	0x01312cff
 800c9a0:	014ca43f 	.word	0x014ca43f
 800c9a4:	016e3600 	.word	0x016e3600
 800c9a8:	01a6ab1f 	.word	0x01a6ab1f
 800c9ac:	01e84800 	.word	0x01e84800

0800c9b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	f043 0201 	orr.w	r2, r3, #1
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	f023 0201 	bic.w	r2, r3, #1
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca0c:	78fb      	ldrb	r3, [r7, #3]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d106      	bne.n	800ca20 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	60da      	str	r2, [r3, #12]
 800ca1e:	e00b      	b.n	800ca38 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca20:	78fb      	ldrb	r3, [r7, #3]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d106      	bne.n	800ca34 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	60da      	str	r2, [r3, #12]
 800ca32:	e001      	b.n	800ca38 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	e003      	b.n	800ca40 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ca38:	2032      	movs	r0, #50	; 0x32
 800ca3a:	f7f5 faaf 	bl	8001f9c <HAL_Delay>

  return HAL_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca48:	b084      	sub	sp, #16
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b086      	sub	sp, #24
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ca56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca62:	2300      	movs	r3, #0
 800ca64:	613b      	str	r3, [r7, #16]
 800ca66:	e009      	b.n	800ca7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	3340      	adds	r3, #64	; 0x40
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	2200      	movs	r2, #0
 800ca74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	613b      	str	r3, [r7, #16]
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	2b0e      	cmp	r3, #14
 800ca80:	d9f2      	bls.n	800ca68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d11c      	bne.n	800cac2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca96:	f043 0302 	orr.w	r3, r3, #2
 800ca9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	e005      	b.n	800cace <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cad4:	461a      	mov	r2, r3
 800cad6:	2300      	movs	r3, #0
 800cad8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae0:	4619      	mov	r1, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae8:	461a      	mov	r2, r3
 800caea:	680b      	ldr	r3, [r1, #0]
 800caec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800caee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d10c      	bne.n	800cb0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d104      	bne.n	800cb04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cafa:	2100      	movs	r1, #0
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f949 	bl	800cd94 <USB_SetDevSpeed>
 800cb02:	e008      	b.n	800cb16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cb04:	2101      	movs	r1, #1
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f944 	bl	800cd94 <USB_SetDevSpeed>
 800cb0c:	e003      	b.n	800cb16 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb0e:	2103      	movs	r1, #3
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 f93f 	bl	800cd94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb16:	2110      	movs	r1, #16
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f8f3 	bl	800cd04 <USB_FlushTxFifo>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cb24:	2301      	movs	r3, #1
 800cb26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f911 	bl	800cd50 <USB_FlushRxFifo>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d001      	beq.n	800cb38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3e:	461a      	mov	r2, r3
 800cb40:	2300      	movs	r3, #0
 800cb42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb56:	461a      	mov	r2, r3
 800cb58:	2300      	movs	r3, #0
 800cb5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	613b      	str	r3, [r7, #16]
 800cb60:	e043      	b.n	800cbea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	015a      	lsls	r2, r3, #5
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	4413      	add	r3, r2
 800cb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb78:	d118      	bne.n	800cbac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d10a      	bne.n	800cb96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cb92:	6013      	str	r3, [r2, #0]
 800cb94:	e013      	b.n	800cbbe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	015a      	lsls	r2, r3, #5
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cba2:	461a      	mov	r2, r3
 800cba4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cba8:	6013      	str	r3, [r2, #0]
 800cbaa:	e008      	b.n	800cbbe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	015a      	lsls	r2, r3, #5
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb8:	461a      	mov	r2, r3
 800cbba:	2300      	movs	r3, #0
 800cbbc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	015a      	lsls	r2, r3, #5
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbca:	461a      	mov	r2, r3
 800cbcc:	2300      	movs	r3, #0
 800cbce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	015a      	lsls	r2, r3, #5
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbdc:	461a      	mov	r2, r3
 800cbde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cbe2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	613b      	str	r3, [r7, #16]
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d3b7      	bcc.n	800cb62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	613b      	str	r3, [r7, #16]
 800cbf6:	e043      	b.n	800cc80 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	015a      	lsls	r2, r3, #5
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	4413      	add	r3, r2
 800cc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc0e:	d118      	bne.n	800cc42 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10a      	bne.n	800cc2c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	015a      	lsls	r2, r3, #5
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc22:	461a      	mov	r2, r3
 800cc24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	e013      	b.n	800cc54 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	015a      	lsls	r2, r3, #5
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc38:	461a      	mov	r2, r3
 800cc3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cc3e:	6013      	str	r3, [r2, #0]
 800cc40:	e008      	b.n	800cc54 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	015a      	lsls	r2, r3, #5
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	4413      	add	r3, r2
 800cc4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc4e:	461a      	mov	r2, r3
 800cc50:	2300      	movs	r3, #0
 800cc52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	015a      	lsls	r2, r3, #5
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc60:	461a      	mov	r2, r3
 800cc62:	2300      	movs	r3, #0
 800cc64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	015a      	lsls	r2, r3, #5
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc72:	461a      	mov	r2, r3
 800cc74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cc78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	613b      	str	r3, [r7, #16]
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d3b7      	bcc.n	800cbf8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cca8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d105      	bne.n	800ccbc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	699b      	ldr	r3, [r3, #24]
 800ccb4:	f043 0210 	orr.w	r2, r3, #16
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	699a      	ldr	r2, [r3, #24]
 800ccc0:	4b0e      	ldr	r3, [pc, #56]	; (800ccfc <USB_DevInit+0x2b4>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ccc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d005      	beq.n	800ccda <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	f043 0208 	orr.w	r2, r3, #8
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ccda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d105      	bne.n	800ccec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	699a      	ldr	r2, [r3, #24]
 800cce4:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <USB_DevInit+0x2b8>)
 800cce6:	4313      	orrs	r3, r2
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ccf8:	b004      	add	sp, #16
 800ccfa:	4770      	bx	lr
 800ccfc:	803c3800 	.word	0x803c3800
 800cd00:	40000004 	.word	0x40000004

0800cd04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	019b      	lsls	r3, r3, #6
 800cd16:	f043 0220 	orr.w	r2, r3, #32
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3301      	adds	r3, #1
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4a09      	ldr	r2, [pc, #36]	; (800cd4c <USB_FlushTxFifo+0x48>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d901      	bls.n	800cd30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	e006      	b.n	800cd3e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	f003 0320 	and.w	r3, r3, #32
 800cd38:	2b20      	cmp	r3, #32
 800cd3a:	d0f0      	beq.n	800cd1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	00030d40 	.word	0x00030d40

0800cd50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2210      	movs	r2, #16
 800cd60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3301      	adds	r3, #1
 800cd66:	60fb      	str	r3, [r7, #12]
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <USB_FlushRxFifo+0x40>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d901      	bls.n	800cd74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	e006      	b.n	800cd82 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	691b      	ldr	r3, [r3, #16]
 800cd78:	f003 0310 	and.w	r3, r3, #16
 800cd7c:	2b10      	cmp	r3, #16
 800cd7e:	d0f0      	beq.n	800cd62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	00030d40 	.word	0x00030d40

0800cd94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b085      	sub	sp, #20
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	78fb      	ldrb	r3, [r7, #3]
 800cdae:	68f9      	ldr	r1, [r7, #12]
 800cdb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3714      	adds	r7, #20
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b087      	sub	sp, #28
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	f003 0306 	and.w	r3, r3, #6
 800cdde:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d102      	bne.n	800cdec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cde6:	2300      	movs	r3, #0
 800cde8:	75fb      	strb	r3, [r7, #23]
 800cdea:	e00a      	b.n	800ce02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d002      	beq.n	800cdf8 <USB_GetDevSpeed+0x32>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b06      	cmp	r3, #6
 800cdf6:	d102      	bne.n	800cdfe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	75fb      	strb	r3, [r7, #23]
 800cdfc:	e001      	b.n	800ce02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cdfe:	230f      	movs	r3, #15
 800ce00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	371c      	adds	r7, #28
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr

0800ce10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	785b      	ldrb	r3, [r3, #1]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d139      	bne.n	800cea0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce32:	69da      	ldr	r2, [r3, #28]
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	f003 030f 	and.w	r3, r3, #15
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	68f9      	ldr	r1, [r7, #12]
 800ce46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	015a      	lsls	r2, r3, #5
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	4413      	add	r3, r2
 800ce56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d153      	bne.n	800cf0c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	015a      	lsls	r2, r3, #5
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	78db      	ldrb	r3, [r3, #3]
 800ce7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ce80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	059b      	lsls	r3, r3, #22
 800ce86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ce88:	431a      	orrs	r2, r3
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	0159      	lsls	r1, r3, #5
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	440b      	add	r3, r1
 800ce92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce96:	4619      	mov	r1, r3
 800ce98:	4b20      	ldr	r3, [pc, #128]	; (800cf1c <USB_ActivateEndpoint+0x10c>)
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	600b      	str	r3, [r1, #0]
 800ce9e:	e035      	b.n	800cf0c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cea6:	69da      	ldr	r2, [r3, #28]
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	f003 030f 	and.w	r3, r3, #15
 800ceb0:	2101      	movs	r1, #1
 800ceb2:	fa01 f303 	lsl.w	r3, r1, r3
 800ceb6:	041b      	lsls	r3, r3, #16
 800ceb8:	68f9      	ldr	r1, [r7, #12]
 800ceba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cebe:	4313      	orrs	r3, r2
 800cec0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	015a      	lsls	r2, r3, #5
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	4413      	add	r3, r2
 800ceca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d119      	bne.n	800cf0c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	015a      	lsls	r2, r3, #5
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	4413      	add	r3, r2
 800cee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	78db      	ldrb	r3, [r3, #3]
 800cef2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cef4:	430b      	orrs	r3, r1
 800cef6:	431a      	orrs	r2, r3
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	0159      	lsls	r1, r3, #5
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	440b      	add	r3, r1
 800cf00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf04:	4619      	mov	r1, r3
 800cf06:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <USB_ActivateEndpoint+0x10c>)
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3714      	adds	r7, #20
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	10008000 	.word	0x10008000

0800cf20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	785b      	ldrb	r3, [r3, #1]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d161      	bne.n	800d000 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	015a      	lsls	r2, r3, #5
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	4413      	add	r3, r2
 800cf44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf52:	d11f      	bne.n	800cf94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	015a      	lsls	r2, r3, #5
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	0151      	lsls	r1, r2, #5
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	440a      	add	r2, r1
 800cf6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cf72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	015a      	lsls	r2, r3, #5
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	68ba      	ldr	r2, [r7, #8]
 800cf84:	0151      	lsls	r1, r2, #5
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	440a      	add	r2, r1
 800cf8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	f003 030f 	and.w	r3, r3, #15
 800cfa4:	2101      	movs	r1, #1
 800cfa6:	fa01 f303 	lsl.w	r3, r1, r3
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	43db      	mvns	r3, r3
 800cfae:	68f9      	ldr	r1, [r7, #12]
 800cfb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfbe:	69da      	ldr	r2, [r3, #28]
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	f003 030f 	and.w	r3, r3, #15
 800cfc8:	2101      	movs	r1, #1
 800cfca:	fa01 f303 	lsl.w	r3, r1, r3
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	43db      	mvns	r3, r3
 800cfd2:	68f9      	ldr	r1, [r7, #12]
 800cfd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfd8:	4013      	ands	r3, r2
 800cfda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	015a      	lsls	r2, r3, #5
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	0159      	lsls	r1, r3, #5
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	440b      	add	r3, r1
 800cff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff6:	4619      	mov	r1, r3
 800cff8:	4b35      	ldr	r3, [pc, #212]	; (800d0d0 <USB_DeactivateEndpoint+0x1b0>)
 800cffa:	4013      	ands	r3, r2
 800cffc:	600b      	str	r3, [r1, #0]
 800cffe:	e060      	b.n	800d0c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	015a      	lsls	r2, r3, #5
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4413      	add	r3, r2
 800d008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d016:	d11f      	bne.n	800d058 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	015a      	lsls	r2, r3, #5
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	4413      	add	r3, r2
 800d020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68ba      	ldr	r2, [r7, #8]
 800d028:	0151      	lsls	r1, r2, #5
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	440a      	add	r2, r1
 800d02e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d032:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d036:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	015a      	lsls	r2, r3, #5
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4413      	add	r3, r2
 800d040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	0151      	lsls	r1, r2, #5
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	440a      	add	r2, r1
 800d04e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d056:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d05e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	f003 030f 	and.w	r3, r3, #15
 800d068:	2101      	movs	r1, #1
 800d06a:	fa01 f303 	lsl.w	r3, r1, r3
 800d06e:	041b      	lsls	r3, r3, #16
 800d070:	43db      	mvns	r3, r3
 800d072:	68f9      	ldr	r1, [r7, #12]
 800d074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d078:	4013      	ands	r3, r2
 800d07a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d082:	69da      	ldr	r2, [r3, #28]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	f003 030f 	and.w	r3, r3, #15
 800d08c:	2101      	movs	r1, #1
 800d08e:	fa01 f303 	lsl.w	r3, r1, r3
 800d092:	041b      	lsls	r3, r3, #16
 800d094:	43db      	mvns	r3, r3
 800d096:	68f9      	ldr	r1, [r7, #12]
 800d098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d09c:	4013      	ands	r3, r2
 800d09e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	015a      	lsls	r2, r3, #5
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	0159      	lsls	r1, r3, #5
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	440b      	add	r3, r1
 800d0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	4b05      	ldr	r3, [pc, #20]	; (800d0d4 <USB_DeactivateEndpoint+0x1b4>)
 800d0be:	4013      	ands	r3, r2
 800d0c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d0c2:	2300      	movs	r3, #0
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3714      	adds	r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	ec337800 	.word	0xec337800
 800d0d4:	eff37800 	.word	0xeff37800

0800d0d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08a      	sub	sp, #40	; 0x28
 800d0dc:	af02      	add	r7, sp, #8
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	785b      	ldrb	r3, [r3, #1]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	f040 8163 	bne.w	800d3c0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	695b      	ldr	r3, [r3, #20]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d132      	bne.n	800d168 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	015a      	lsls	r2, r3, #5
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	4413      	add	r3, r2
 800d10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d10e:	691a      	ldr	r2, [r3, #16]
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	0159      	lsls	r1, r3, #5
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	440b      	add	r3, r1
 800d118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d11c:	4619      	mov	r1, r3
 800d11e:	4ba5      	ldr	r3, [pc, #660]	; (800d3b4 <USB_EPStartXfer+0x2dc>)
 800d120:	4013      	ands	r3, r2
 800d122:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	015a      	lsls	r2, r3, #5
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	4413      	add	r3, r2
 800d12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	69ba      	ldr	r2, [r7, #24]
 800d134:	0151      	lsls	r1, r2, #5
 800d136:	69fa      	ldr	r2, [r7, #28]
 800d138:	440a      	add	r2, r1
 800d13a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d13e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d142:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d144:	69bb      	ldr	r3, [r7, #24]
 800d146:	015a      	lsls	r2, r3, #5
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	4413      	add	r3, r2
 800d14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d150:	691a      	ldr	r2, [r3, #16]
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	0159      	lsls	r1, r3, #5
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	440b      	add	r3, r1
 800d15a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d15e:	4619      	mov	r1, r3
 800d160:	4b95      	ldr	r3, [pc, #596]	; (800d3b8 <USB_EPStartXfer+0x2e0>)
 800d162:	4013      	ands	r3, r2
 800d164:	610b      	str	r3, [r1, #16]
 800d166:	e074      	b.n	800d252 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	015a      	lsls	r2, r3, #5
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	4413      	add	r3, r2
 800d170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d174:	691a      	ldr	r2, [r3, #16]
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	0159      	lsls	r1, r3, #5
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	440b      	add	r3, r1
 800d17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d182:	4619      	mov	r1, r3
 800d184:	4b8c      	ldr	r3, [pc, #560]	; (800d3b8 <USB_EPStartXfer+0x2e0>)
 800d186:	4013      	ands	r3, r2
 800d188:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	015a      	lsls	r2, r3, #5
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	4413      	add	r3, r2
 800d192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d196:	691a      	ldr	r2, [r3, #16]
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	0159      	lsls	r1, r3, #5
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	440b      	add	r3, r1
 800d1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4b83      	ldr	r3, [pc, #524]	; (800d3b4 <USB_EPStartXfer+0x2dc>)
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	015a      	lsls	r2, r3, #5
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b8:	691a      	ldr	r2, [r3, #16]
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	6959      	ldr	r1, [r3, #20]
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	440b      	add	r3, r1
 800d1c4:	1e59      	subs	r1, r3, #1
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	fbb1 f3f3 	udiv	r3, r1, r3
 800d1ce:	04d9      	lsls	r1, r3, #19
 800d1d0:	4b7a      	ldr	r3, [pc, #488]	; (800d3bc <USB_EPStartXfer+0x2e4>)
 800d1d2:	400b      	ands	r3, r1
 800d1d4:	69b9      	ldr	r1, [r7, #24]
 800d1d6:	0148      	lsls	r0, r1, #5
 800d1d8:	69f9      	ldr	r1, [r7, #28]
 800d1da:	4401      	add	r1, r0
 800d1dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	015a      	lsls	r2, r3, #5
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1f0:	691a      	ldr	r2, [r3, #16]
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d1fa:	69b9      	ldr	r1, [r7, #24]
 800d1fc:	0148      	lsls	r0, r1, #5
 800d1fe:	69f9      	ldr	r1, [r7, #28]
 800d200:	4401      	add	r1, r0
 800d202:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d206:	4313      	orrs	r3, r2
 800d208:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	78db      	ldrb	r3, [r3, #3]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d11f      	bne.n	800d252 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	015a      	lsls	r2, r3, #5
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	4413      	add	r3, r2
 800d21a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	69ba      	ldr	r2, [r7, #24]
 800d222:	0151      	lsls	r1, r2, #5
 800d224:	69fa      	ldr	r2, [r7, #28]
 800d226:	440a      	add	r2, r1
 800d228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d22c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d230:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	015a      	lsls	r2, r3, #5
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	4413      	add	r3, r2
 800d23a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	69ba      	ldr	r2, [r7, #24]
 800d242:	0151      	lsls	r1, r2, #5
 800d244:	69fa      	ldr	r2, [r7, #28]
 800d246:	440a      	add	r2, r1
 800d248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d24c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d250:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d252:	79fb      	ldrb	r3, [r7, #7]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d14b      	bne.n	800d2f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d009      	beq.n	800d274 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	015a      	lsls	r2, r3, #5
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	4413      	add	r3, r2
 800d268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d26c:	461a      	mov	r2, r3
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	78db      	ldrb	r3, [r3, #3]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d128      	bne.n	800d2ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d110      	bne.n	800d2ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	015a      	lsls	r2, r3, #5
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	4413      	add	r3, r2
 800d294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	69ba      	ldr	r2, [r7, #24]
 800d29c:	0151      	lsls	r1, r2, #5
 800d29e:	69fa      	ldr	r2, [r7, #28]
 800d2a0:	440a      	add	r2, r1
 800d2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d2aa:	6013      	str	r3, [r2, #0]
 800d2ac:	e00f      	b.n	800d2ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	015a      	lsls	r2, r3, #5
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	69ba      	ldr	r2, [r7, #24]
 800d2be:	0151      	lsls	r1, r2, #5
 800d2c0:	69fa      	ldr	r2, [r7, #28]
 800d2c2:	440a      	add	r2, r1
 800d2c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	015a      	lsls	r2, r3, #5
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	0151      	lsls	r1, r2, #5
 800d2e0:	69fa      	ldr	r2, [r7, #28]
 800d2e2:	440a      	add	r2, r1
 800d2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d2ec:	6013      	str	r3, [r2, #0]
 800d2ee:	e133      	b.n	800d558 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	015a      	lsls	r2, r3, #5
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	69ba      	ldr	r2, [r7, #24]
 800d300:	0151      	lsls	r1, r2, #5
 800d302:	69fa      	ldr	r2, [r7, #28]
 800d304:	440a      	add	r2, r1
 800d306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d30a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d30e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	78db      	ldrb	r3, [r3, #3]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d015      	beq.n	800d344 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	695b      	ldr	r3, [r3, #20]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 811b 	beq.w	800d558 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	f003 030f 	and.w	r3, r3, #15
 800d332:	2101      	movs	r1, #1
 800d334:	fa01 f303 	lsl.w	r3, r1, r3
 800d338:	69f9      	ldr	r1, [r7, #28]
 800d33a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d33e:	4313      	orrs	r3, r2
 800d340:	634b      	str	r3, [r1, #52]	; 0x34
 800d342:	e109      	b.n	800d558 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d350:	2b00      	cmp	r3, #0
 800d352:	d110      	bne.n	800d376 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	015a      	lsls	r2, r3, #5
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	4413      	add	r3, r2
 800d35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	69ba      	ldr	r2, [r7, #24]
 800d364:	0151      	lsls	r1, r2, #5
 800d366:	69fa      	ldr	r2, [r7, #28]
 800d368:	440a      	add	r2, r1
 800d36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d36e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d372:	6013      	str	r3, [r2, #0]
 800d374:	e00f      	b.n	800d396 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	015a      	lsls	r2, r3, #5
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	4413      	add	r3, r2
 800d37e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	69ba      	ldr	r2, [r7, #24]
 800d386:	0151      	lsls	r1, r2, #5
 800d388:	69fa      	ldr	r2, [r7, #28]
 800d38a:	440a      	add	r2, r1
 800d38c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d394:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	68d9      	ldr	r1, [r3, #12]
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	781a      	ldrb	r2, [r3, #0]
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	695b      	ldr	r3, [r3, #20]
 800d3a2:	b298      	uxth	r0, r3
 800d3a4:	79fb      	ldrb	r3, [r7, #7]
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f000 fa38 	bl	800d820 <USB_WritePacket>
 800d3b0:	e0d2      	b.n	800d558 <USB_EPStartXfer+0x480>
 800d3b2:	bf00      	nop
 800d3b4:	e007ffff 	.word	0xe007ffff
 800d3b8:	fff80000 	.word	0xfff80000
 800d3bc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	015a      	lsls	r2, r3, #5
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3cc:	691a      	ldr	r2, [r3, #16]
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	0159      	lsls	r1, r3, #5
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	440b      	add	r3, r1
 800d3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4b61      	ldr	r3, [pc, #388]	; (800d564 <USB_EPStartXfer+0x48c>)
 800d3de:	4013      	ands	r3, r2
 800d3e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	015a      	lsls	r2, r3, #5
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3ee:	691a      	ldr	r2, [r3, #16]
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	0159      	lsls	r1, r3, #5
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	440b      	add	r3, r1
 800d3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	4b5a      	ldr	r3, [pc, #360]	; (800d568 <USB_EPStartXfer+0x490>)
 800d400:	4013      	ands	r3, r2
 800d402:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	695b      	ldr	r3, [r3, #20]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d123      	bne.n	800d454 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	015a      	lsls	r2, r3, #5
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	4413      	add	r3, r2
 800d414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d418:	691a      	ldr	r2, [r3, #16]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d422:	69b9      	ldr	r1, [r7, #24]
 800d424:	0148      	lsls	r0, r1, #5
 800d426:	69f9      	ldr	r1, [r7, #28]
 800d428:	4401      	add	r1, r0
 800d42a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d42e:	4313      	orrs	r3, r2
 800d430:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	015a      	lsls	r2, r3, #5
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	4413      	add	r3, r2
 800d43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	69ba      	ldr	r2, [r7, #24]
 800d442:	0151      	lsls	r1, r2, #5
 800d444:	69fa      	ldr	r2, [r7, #28]
 800d446:	440a      	add	r2, r1
 800d448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d44c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d450:	6113      	str	r3, [r2, #16]
 800d452:	e033      	b.n	800d4bc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	695a      	ldr	r2, [r3, #20]
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	4413      	add	r3, r2
 800d45e:	1e5a      	subs	r2, r3, #1
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	fbb2 f3f3 	udiv	r3, r2, r3
 800d468:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	015a      	lsls	r2, r3, #5
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	4413      	add	r3, r2
 800d472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d476:	691a      	ldr	r2, [r3, #16]
 800d478:	8afb      	ldrh	r3, [r7, #22]
 800d47a:	04d9      	lsls	r1, r3, #19
 800d47c:	4b3b      	ldr	r3, [pc, #236]	; (800d56c <USB_EPStartXfer+0x494>)
 800d47e:	400b      	ands	r3, r1
 800d480:	69b9      	ldr	r1, [r7, #24]
 800d482:	0148      	lsls	r0, r1, #5
 800d484:	69f9      	ldr	r1, [r7, #28]
 800d486:	4401      	add	r1, r0
 800d488:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d48c:	4313      	orrs	r3, r2
 800d48e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	4413      	add	r3, r2
 800d498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d49c:	691a      	ldr	r2, [r3, #16]
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	8af9      	ldrh	r1, [r7, #22]
 800d4a4:	fb01 f303 	mul.w	r3, r1, r3
 800d4a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4ac:	69b9      	ldr	r1, [r7, #24]
 800d4ae:	0148      	lsls	r0, r1, #5
 800d4b0:	69f9      	ldr	r1, [r7, #28]
 800d4b2:	4401      	add	r1, r0
 800d4b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d4bc:	79fb      	ldrb	r3, [r7, #7]
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d10d      	bne.n	800d4de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d009      	beq.n	800d4de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	68d9      	ldr	r1, [r3, #12]
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	015a      	lsls	r2, r3, #5
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4da:	460a      	mov	r2, r1
 800d4dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	78db      	ldrb	r3, [r3, #3]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d128      	bne.n	800d538 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d110      	bne.n	800d518 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	015a      	lsls	r2, r3, #5
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	69ba      	ldr	r2, [r7, #24]
 800d506:	0151      	lsls	r1, r2, #5
 800d508:	69fa      	ldr	r2, [r7, #28]
 800d50a:	440a      	add	r2, r1
 800d50c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d514:	6013      	str	r3, [r2, #0]
 800d516:	e00f      	b.n	800d538 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	015a      	lsls	r2, r3, #5
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	4413      	add	r3, r2
 800d520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	69ba      	ldr	r2, [r7, #24]
 800d528:	0151      	lsls	r1, r2, #5
 800d52a:	69fa      	ldr	r2, [r7, #28]
 800d52c:	440a      	add	r2, r1
 800d52e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d536:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	015a      	lsls	r2, r3, #5
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	4413      	add	r3, r2
 800d540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	69ba      	ldr	r2, [r7, #24]
 800d548:	0151      	lsls	r1, r2, #5
 800d54a:	69fa      	ldr	r2, [r7, #28]
 800d54c:	440a      	add	r2, r1
 800d54e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d556:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	fff80000 	.word	0xfff80000
 800d568:	e007ffff 	.word	0xe007ffff
 800d56c:	1ff80000 	.word	0x1ff80000

0800d570 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d570:	b480      	push	{r7}
 800d572:	b087      	sub	sp, #28
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	4613      	mov	r3, r2
 800d57c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	785b      	ldrb	r3, [r3, #1]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	f040 80cd 	bne.w	800d72c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d132      	bne.n	800d600 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	015a      	lsls	r2, r3, #5
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a6:	691a      	ldr	r2, [r3, #16]
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	0159      	lsls	r1, r3, #5
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	440b      	add	r3, r1
 800d5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4b98      	ldr	r3, [pc, #608]	; (800d818 <USB_EP0StartXfer+0x2a8>)
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	015a      	lsls	r2, r3, #5
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c8:	691b      	ldr	r3, [r3, #16]
 800d5ca:	693a      	ldr	r2, [r7, #16]
 800d5cc:	0151      	lsls	r1, r2, #5
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	440a      	add	r2, r1
 800d5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	015a      	lsls	r2, r3, #5
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5e8:	691a      	ldr	r2, [r3, #16]
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	0159      	lsls	r1, r3, #5
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	440b      	add	r3, r1
 800d5f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4b88      	ldr	r3, [pc, #544]	; (800d81c <USB_EP0StartXfer+0x2ac>)
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	610b      	str	r3, [r1, #16]
 800d5fe:	e04e      	b.n	800d69e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	015a      	lsls	r2, r3, #5
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	4413      	add	r3, r2
 800d608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d60c:	691a      	ldr	r2, [r3, #16]
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	0159      	lsls	r1, r3, #5
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	440b      	add	r3, r1
 800d616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d61a:	4619      	mov	r1, r3
 800d61c:	4b7f      	ldr	r3, [pc, #508]	; (800d81c <USB_EP0StartXfer+0x2ac>)
 800d61e:	4013      	ands	r3, r2
 800d620:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	015a      	lsls	r2, r3, #5
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	4413      	add	r3, r2
 800d62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d62e:	691a      	ldr	r2, [r3, #16]
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	0159      	lsls	r1, r3, #5
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	440b      	add	r3, r1
 800d638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d63c:	4619      	mov	r1, r3
 800d63e:	4b76      	ldr	r3, [pc, #472]	; (800d818 <USB_EP0StartXfer+0x2a8>)
 800d640:	4013      	ands	r3, r2
 800d642:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	695a      	ldr	r2, [r3, #20]
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d903      	bls.n	800d658 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	689a      	ldr	r2, [r3, #8]
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	015a      	lsls	r2, r3, #5
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	4413      	add	r3, r2
 800d660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d664:	691b      	ldr	r3, [r3, #16]
 800d666:	693a      	ldr	r2, [r7, #16]
 800d668:	0151      	lsls	r1, r2, #5
 800d66a:	697a      	ldr	r2, [r7, #20]
 800d66c:	440a      	add	r2, r1
 800d66e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d676:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	015a      	lsls	r2, r3, #5
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	4413      	add	r3, r2
 800d680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d684:	691a      	ldr	r2, [r3, #16]
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	695b      	ldr	r3, [r3, #20]
 800d68a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d68e:	6939      	ldr	r1, [r7, #16]
 800d690:	0148      	lsls	r0, r1, #5
 800d692:	6979      	ldr	r1, [r7, #20]
 800d694:	4401      	add	r1, r0
 800d696:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d69a:	4313      	orrs	r3, r2
 800d69c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d69e:	79fb      	ldrb	r3, [r7, #7]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d11e      	bne.n	800d6e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d009      	beq.n	800d6c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	015a      	lsls	r2, r3, #5
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	691b      	ldr	r3, [r3, #16]
 800d6be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	015a      	lsls	r2, r3, #5
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	4413      	add	r3, r2
 800d6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	693a      	ldr	r2, [r7, #16]
 800d6d0:	0151      	lsls	r1, r2, #5
 800d6d2:	697a      	ldr	r2, [r7, #20]
 800d6d4:	440a      	add	r2, r1
 800d6d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	e092      	b.n	800d808 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	015a      	lsls	r2, r3, #5
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	693a      	ldr	r2, [r7, #16]
 800d6f2:	0151      	lsls	r1, r2, #5
 800d6f4:	697a      	ldr	r2, [r7, #20]
 800d6f6:	440a      	add	r2, r1
 800d6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d700:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	695b      	ldr	r3, [r3, #20]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d07e      	beq.n	800d808 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	f003 030f 	and.w	r3, r3, #15
 800d71a:	2101      	movs	r1, #1
 800d71c:	fa01 f303 	lsl.w	r3, r1, r3
 800d720:	6979      	ldr	r1, [r7, #20]
 800d722:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d726:	4313      	orrs	r3, r2
 800d728:	634b      	str	r3, [r1, #52]	; 0x34
 800d72a:	e06d      	b.n	800d808 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d738:	691a      	ldr	r2, [r3, #16]
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	0159      	lsls	r1, r3, #5
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	440b      	add	r3, r1
 800d742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d746:	4619      	mov	r1, r3
 800d748:	4b34      	ldr	r3, [pc, #208]	; (800d81c <USB_EP0StartXfer+0x2ac>)
 800d74a:	4013      	ands	r3, r2
 800d74c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	015a      	lsls	r2, r3, #5
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	4413      	add	r3, r2
 800d756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d75a:	691a      	ldr	r2, [r3, #16]
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	0159      	lsls	r1, r3, #5
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	440b      	add	r3, r1
 800d764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d768:	4619      	mov	r1, r3
 800d76a:	4b2b      	ldr	r3, [pc, #172]	; (800d818 <USB_EP0StartXfer+0x2a8>)
 800d76c:	4013      	ands	r3, r2
 800d76e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	695b      	ldr	r3, [r3, #20]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d003      	beq.n	800d780 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	689a      	ldr	r2, [r3, #8]
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	015a      	lsls	r2, r3, #5
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	4413      	add	r3, r2
 800d788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d78c:	691b      	ldr	r3, [r3, #16]
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	0151      	lsls	r1, r2, #5
 800d792:	697a      	ldr	r2, [r7, #20]
 800d794:	440a      	add	r2, r1
 800d796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d79a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d79e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	015a      	lsls	r2, r3, #5
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7ac:	691a      	ldr	r2, [r3, #16]
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7b6:	6939      	ldr	r1, [r7, #16]
 800d7b8:	0148      	lsls	r0, r1, #5
 800d7ba:	6979      	ldr	r1, [r7, #20]
 800d7bc:	4401      	add	r1, r0
 800d7be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d7c6:	79fb      	ldrb	r3, [r7, #7]
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d10d      	bne.n	800d7e8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d009      	beq.n	800d7e8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	68d9      	ldr	r1, [r3, #12]
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7e4:	460a      	mov	r2, r1
 800d7e6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	015a      	lsls	r2, r3, #5
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	0151      	lsls	r1, r2, #5
 800d7fa:	697a      	ldr	r2, [r7, #20]
 800d7fc:	440a      	add	r2, r1
 800d7fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d802:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d806:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	371c      	adds	r7, #28
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	e007ffff 	.word	0xe007ffff
 800d81c:	fff80000 	.word	0xfff80000

0800d820 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d820:	b480      	push	{r7}
 800d822:	b089      	sub	sp, #36	; 0x24
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	4611      	mov	r1, r2
 800d82c:	461a      	mov	r2, r3
 800d82e:	460b      	mov	r3, r1
 800d830:	71fb      	strb	r3, [r7, #7]
 800d832:	4613      	mov	r3, r2
 800d834:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d83e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d842:	2b00      	cmp	r3, #0
 800d844:	d123      	bne.n	800d88e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d846:	88bb      	ldrh	r3, [r7, #4]
 800d848:	3303      	adds	r3, #3
 800d84a:	089b      	lsrs	r3, r3, #2
 800d84c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d84e:	2300      	movs	r3, #0
 800d850:	61bb      	str	r3, [r7, #24]
 800d852:	e018      	b.n	800d886 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d854:	79fb      	ldrb	r3, [r7, #7]
 800d856:	031a      	lsls	r2, r3, #12
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	4413      	add	r3, r2
 800d85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d860:	461a      	mov	r2, r3
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	3301      	adds	r3, #1
 800d86c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	3301      	adds	r3, #1
 800d872:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	3301      	adds	r3, #1
 800d878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	3301      	adds	r3, #1
 800d87e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	3301      	adds	r3, #1
 800d884:	61bb      	str	r3, [r7, #24]
 800d886:	69ba      	ldr	r2, [r7, #24]
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d3e2      	bcc.n	800d854 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3724      	adds	r7, #36	; 0x24
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b08b      	sub	sp, #44	; 0x2c
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	4613      	mov	r3, r2
 800d8a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d8b2:	88fb      	ldrh	r3, [r7, #6]
 800d8b4:	089b      	lsrs	r3, r3, #2
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d8ba:	88fb      	ldrh	r3, [r7, #6]
 800d8bc:	f003 0303 	and.w	r3, r3, #3
 800d8c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	623b      	str	r3, [r7, #32]
 800d8c6:	e014      	b.n	800d8f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	3301      	adds	r3, #1
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d8ec:	6a3b      	ldr	r3, [r7, #32]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	623b      	str	r3, [r7, #32]
 800d8f2:	6a3a      	ldr	r2, [r7, #32]
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d3e6      	bcc.n	800d8c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d8fa:	8bfb      	ldrh	r3, [r7, #30]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d01e      	beq.n	800d93e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d900:	2300      	movs	r3, #0
 800d902:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d90a:	461a      	mov	r2, r3
 800d90c:	f107 0310 	add.w	r3, r7, #16
 800d910:	6812      	ldr	r2, [r2, #0]
 800d912:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	6a3b      	ldr	r3, [r7, #32]
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	00db      	lsls	r3, r3, #3
 800d91c:	fa22 f303 	lsr.w	r3, r2, r3
 800d920:	b2da      	uxtb	r2, r3
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	701a      	strb	r2, [r3, #0]
      i++;
 800d926:	6a3b      	ldr	r3, [r7, #32]
 800d928:	3301      	adds	r3, #1
 800d92a:	623b      	str	r3, [r7, #32]
      pDest++;
 800d92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92e:	3301      	adds	r3, #1
 800d930:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d932:	8bfb      	ldrh	r3, [r7, #30]
 800d934:	3b01      	subs	r3, #1
 800d936:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d938:	8bfb      	ldrh	r3, [r7, #30]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1ea      	bne.n	800d914 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d940:	4618      	mov	r0, r3
 800d942:	372c      	adds	r7, #44	; 0x2c
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	785b      	ldrb	r3, [r3, #1]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d12c      	bne.n	800d9c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	015a      	lsls	r2, r3, #5
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	4413      	add	r3, r2
 800d970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	db12      	blt.n	800d9a0 <USB_EPSetStall+0x54>
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00f      	beq.n	800d9a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	015a      	lsls	r2, r3, #5
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	4413      	add	r3, r2
 800d988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68ba      	ldr	r2, [r7, #8]
 800d990:	0151      	lsls	r1, r2, #5
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	440a      	add	r2, r1
 800d996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d99a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d99e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	015a      	lsls	r2, r3, #5
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	0151      	lsls	r1, r2, #5
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	440a      	add	r2, r1
 800d9b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	e02b      	b.n	800da1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	015a      	lsls	r2, r3, #5
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	db12      	blt.n	800d9fa <USB_EPSetStall+0xae>
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00f      	beq.n	800d9fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	015a      	lsls	r2, r3, #5
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	0151      	lsls	r1, r2, #5
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	440a      	add	r2, r1
 800d9f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d9f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	4413      	add	r3, r2
 800da02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	0151      	lsls	r1, r2, #5
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	440a      	add	r2, r1
 800da10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	785b      	ldrb	r3, [r3, #1]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d128      	bne.n	800da96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	015a      	lsls	r2, r3, #5
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	4413      	add	r3, r2
 800da4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	0151      	lsls	r1, r2, #5
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	440a      	add	r2, r1
 800da5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800da62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	78db      	ldrb	r3, [r3, #3]
 800da68:	2b03      	cmp	r3, #3
 800da6a:	d003      	beq.n	800da74 <USB_EPClearStall+0x4c>
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	78db      	ldrb	r3, [r3, #3]
 800da70:	2b02      	cmp	r3, #2
 800da72:	d138      	bne.n	800dae6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	015a      	lsls	r2, r3, #5
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	4413      	add	r3, r2
 800da7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68ba      	ldr	r2, [r7, #8]
 800da84:	0151      	lsls	r1, r2, #5
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	440a      	add	r2, r1
 800da8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da92:	6013      	str	r3, [r2, #0]
 800da94:	e027      	b.n	800dae6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	015a      	lsls	r2, r3, #5
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	4413      	add	r3, r2
 800da9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	0151      	lsls	r1, r2, #5
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	440a      	add	r2, r1
 800daac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dab0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dab4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	78db      	ldrb	r3, [r3, #3]
 800daba:	2b03      	cmp	r3, #3
 800dabc:	d003      	beq.n	800dac6 <USB_EPClearStall+0x9e>
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	78db      	ldrb	r3, [r3, #3]
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	d10f      	bne.n	800dae6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	015a      	lsls	r2, r3, #5
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	4413      	add	r3, r2
 800dace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	0151      	lsls	r1, r2, #5
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	440a      	add	r2, r1
 800dadc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dae4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	460b      	mov	r3, r1
 800dafe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800db16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	78fb      	ldrb	r3, [r7, #3]
 800db22:	011b      	lsls	r3, r3, #4
 800db24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800db28:	68f9      	ldr	r1, [r7, #12]
 800db2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db2e:	4313      	orrs	r3, r2
 800db30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800db32:	2300      	movs	r3, #0
}
 800db34:	4618      	mov	r0, r3
 800db36:	3714      	adds	r7, #20
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr

0800db40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db40:	b480      	push	{r7}
 800db42:	b085      	sub	sp, #20
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68fa      	ldr	r2, [r7, #12]
 800db56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db5a:	f023 0303 	bic.w	r3, r3, #3
 800db5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db6e:	f023 0302 	bic.w	r3, r3, #2
 800db72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr

0800db82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800db82:	b480      	push	{r7}
 800db84:	b085      	sub	sp, #20
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800db9c:	f023 0303 	bic.w	r3, r3, #3
 800dba0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbb0:	f043 0302 	orr.w	r3, r3, #2
 800dbb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3714      	adds	r7, #20
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	695b      	ldr	r3, [r3, #20]
 800dbd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	699b      	ldr	r3, [r3, #24]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	4013      	ands	r3, r2
 800dbda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3714      	adds	r7, #20
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr

0800dbea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbea:	b480      	push	{r7}
 800dbec:	b085      	sub	sp, #20
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc06:	69db      	ldr	r3, [r3, #28]
 800dc08:	68ba      	ldr	r2, [r7, #8]
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	0c1b      	lsrs	r3, r3, #16
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3714      	adds	r7, #20
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr

0800dc1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc1e:	b480      	push	{r7}
 800dc20:	b085      	sub	sp, #20
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc30:	699b      	ldr	r3, [r3, #24]
 800dc32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc3a:	69db      	ldr	r3, [r3, #28]
 800dc3c:	68ba      	ldr	r2, [r7, #8]
 800dc3e:	4013      	ands	r3, r2
 800dc40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	b29b      	uxth	r3, r3
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3714      	adds	r7, #20
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc52:	b480      	push	{r7}
 800dc54:	b085      	sub	sp, #20
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dc62:	78fb      	ldrb	r3, [r7, #3]
 800dc64:	015a      	lsls	r2, r3, #5
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	4413      	add	r3, r2
 800dc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc78:	695b      	ldr	r3, [r3, #20]
 800dc7a:	68ba      	ldr	r2, [r7, #8]
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc80:	68bb      	ldr	r3, [r7, #8]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3714      	adds	r7, #20
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b087      	sub	sp, #28
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
 800dc96:	460b      	mov	r3, r1
 800dc98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dca4:	691b      	ldr	r3, [r3, #16]
 800dca6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dcb2:	78fb      	ldrb	r3, [r7, #3]
 800dcb4:	f003 030f 	and.w	r3, r3, #15
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	fa22 f303 	lsr.w	r3, r2, r3
 800dcbe:	01db      	lsls	r3, r3, #7
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dcc8:	78fb      	ldrb	r3, [r7, #3]
 800dcca:	015a      	lsls	r2, r3, #5
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	4413      	add	r3, r2
 800dcd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	693a      	ldr	r2, [r7, #16]
 800dcd8:	4013      	ands	r3, r2
 800dcda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dcdc:	68bb      	ldr	r3, [r7, #8]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	371c      	adds	r7, #28
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dcea:	b480      	push	{r7}
 800dcec:	b083      	sub	sp, #12
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	695b      	ldr	r3, [r3, #20]
 800dcf6:	f003 0301 	and.w	r3, r3, #1
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	370c      	adds	r7, #12
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr
	...

0800dd08 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd22:	4619      	mov	r1, r3
 800dd24:	4b09      	ldr	r3, [pc, #36]	; (800dd4c <USB_ActivateSetup+0x44>)
 800dd26:	4013      	ands	r3, r2
 800dd28:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	68fa      	ldr	r2, [r7, #12]
 800dd34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3714      	adds	r7, #20
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr
 800dd4c:	fffff800 	.word	0xfffff800

0800dd50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b087      	sub	sp, #28
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	607a      	str	r2, [r7, #4]
 800dd5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	333c      	adds	r3, #60	; 0x3c
 800dd66:	3304      	adds	r3, #4
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	4a26      	ldr	r2, [pc, #152]	; (800de08 <USB_EP0_OutStart+0xb8>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d90a      	bls.n	800dd8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd84:	d101      	bne.n	800dd8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	e037      	b.n	800ddfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd90:	461a      	mov	r2, r3
 800dd92:	2300      	movs	r3, #0
 800dd94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dda4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dda8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddb8:	f043 0318 	orr.w	r3, r3, #24
 800ddbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddcc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ddd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ddd2:	7afb      	ldrb	r3, [r7, #11]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d10f      	bne.n	800ddf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddde:	461a      	mov	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddf2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ddf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	371c      	adds	r7, #28
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	4f54300a 	.word	0x4f54300a

0800de0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800de14:	2300      	movs	r3, #0
 800de16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	3301      	adds	r3, #1
 800de1c:	60fb      	str	r3, [r7, #12]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	4a13      	ldr	r2, [pc, #76]	; (800de70 <USB_CoreReset+0x64>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d901      	bls.n	800de2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800de26:	2303      	movs	r3, #3
 800de28:	e01b      	b.n	800de62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	691b      	ldr	r3, [r3, #16]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	daf2      	bge.n	800de18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800de32:	2300      	movs	r3, #0
 800de34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	691b      	ldr	r3, [r3, #16]
 800de3a:	f043 0201 	orr.w	r2, r3, #1
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	3301      	adds	r3, #1
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	4a09      	ldr	r2, [pc, #36]	; (800de70 <USB_CoreReset+0x64>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d901      	bls.n	800de54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800de50:	2303      	movs	r3, #3
 800de52:	e006      	b.n	800de62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	f003 0301 	and.w	r3, r3, #1
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d0f0      	beq.n	800de42 <USB_CoreReset+0x36>

  return HAL_OK;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	00030d40 	.word	0x00030d40

0800de74 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800de7c:	f000 f80e 	bl	800de9c <BSP_SD_WriteCpltCallback>
}
 800de80:	bf00      	nop
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800de90:	f000 f810 	bl	800deb4 <BSP_SD_ReadCpltCallback>
}
 800de94:	bf00      	nop
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800de9c:	b480      	push	{r7}
 800de9e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800dea0:	4b03      	ldr	r3, [pc, #12]	; (800deb0 <BSP_SD_WriteCpltCallback+0x14>)
 800dea2:	2201      	movs	r2, #1
 800dea4:	601a      	str	r2, [r3, #0]
}
 800dea6:	bf00      	nop
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	24000714 	.word	0x24000714

0800deb4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800deb4:	b480      	push	{r7}
 800deb6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800deb8:	4b03      	ldr	r3, [pc, #12]	; (800dec8 <BSP_SD_ReadCpltCallback+0x14>)
 800deba:	2201      	movs	r2, #1
 800debc:	601a      	str	r2, [r3, #0]
}
 800debe:	bf00      	nop
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr
 800dec8:	24000718 	.word	0x24000718
 800decc:	00000000 	.word	0x00000000

0800ded0 <_ZN8RCFilter6updateEf>:
#include <helpers.hpp>
#include <micros.hpp>


float RCFilter::update(float input)
{
 800ded0:	b510      	push	{r4, lr}
 800ded2:	ed2d 8b02 	vpush	{d8}
 800ded6:	4604      	mov	r4, r0
 800ded8:	eeb0 8a40 	vmov.f32	s16, s0
	uint32_t now = micros();
 800dedc:	f7f3 fa18 	bl	8001310 <_Z6microsv>
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800dee0:	ee07 0a90 	vmov	s15, r0
 800dee4:	ed94 6a01 	vldr	s12, [r4, #4]
	prev_time = now;

	// Compute equivalent RC constant from fc.
	float RC = 1.0/ (mathformulas::pi * 2 * cutoff_freq);
 800dee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800deec:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float RC = 1.0/ (mathformulas::pi * 2 * cutoff_freq);
 800def0:	eddf 6a17 	vldr	s13, [pc, #92]	; 800df50 <_ZN8RCFilter6updateEf+0x80>
 800def4:	edd4 5a02 	vldr	s11, [r4, #8]

	 // Precompute filter coefficients for first order low-pass filter
	float alpha = dt / (dt + RC);
	float beta = RC / (dt + RC);

	float output = alpha * input + beta * prev_output;
 800def8:	ed94 0a00 	vldr	s0, [r4]
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800defc:	ee37 6ac6 	vsub.f32	s12, s15, s12
	prev_time = now;
 800df00:	edc4 7a01 	vstr	s15, [r4, #4]
	float RC = 1.0/ (mathformulas::pi * 2 * cutoff_freq);
 800df04:	ee65 5aa6 	vmul.f32	s11, s11, s13
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800df08:	ed9f 3b0f 	vldr	d3, [pc, #60]	; 800df48 <_ZN8RCFilter6updateEf+0x78>
 800df0c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
	float RC = 1.0/ (mathformulas::pi * 2 * cutoff_freq);
 800df10:	eec7 7a25 	vdiv.f32	s15, s14, s11
	double dt = (now - prev_time) / MICROS_PER_SEC;
 800df14:	ee86 4b03 	vdiv.f64	d4, d6, d3
	float alpha = dt / (dt + RC);
 800df18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800df1c:	ee36 5b04 	vadd.f64	d5, d6, d4
	float beta = RC / (dt + RC);
 800df20:	ee86 7b05 	vdiv.f64	d7, d6, d5
	float alpha = dt / (dt + RC);
 800df24:	ee84 6b05 	vdiv.f64	d6, d4, d5
	float beta = RC / (dt + RC);
 800df28:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
	float output = alpha * input + beta * prev_output;
 800df2c:	ee27 7a00 	vmul.f32	s14, s14, s0
	float alpha = dt / (dt + RC);
 800df30:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	float output = alpha * input + beta * prev_output;
 800df34:	eea6 7a08 	vfma.f32	s14, s12, s16

	prev_output = output;

	return output;
}
 800df38:	ecbd 8b02 	vpop	{d8}
	float output = alpha * input + beta * prev_output;
 800df3c:	eeb0 0a47 	vmov.f32	s0, s14
	prev_output = output;
 800df40:	ed84 7a00 	vstr	s14, [r4]
}
 800df44:	bd10      	pop	{r4, pc}
 800df46:	bf00      	nop
 800df48:	00000000 	.word	0x00000000
 800df4c:	412e8480 	.word	0x412e8480
 800df50:	40c90fdb 	.word	0x40c90fdb

0800df54 <_ZN8RCFilter5resetEv>:

void RCFilter::reset()
{
	prev_output = 0;
 800df54:	2300      	movs	r3, #0
 800df56:	6003      	str	r3, [r0, #0]
}
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop

0800df5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	460b      	mov	r3, r1
 800df66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800df68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800df6c:	f002 f9be 	bl	80102ec <malloc>
 800df70:	4603      	mov	r3, r0
 800df72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d105      	bne.n	800df86 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800df82:	2302      	movs	r3, #2
 800df84:	e066      	b.n	800e054 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	7c1b      	ldrb	r3, [r3, #16]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d119      	bne.n	800dfca <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800df96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df9a:	2202      	movs	r2, #2
 800df9c:	2181      	movs	r1, #129	; 0x81
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f002 f82b 	bl	800fffa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dfaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfae:	2202      	movs	r2, #2
 800dfb0:	2101      	movs	r1, #1
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f002 f821 	bl	800fffa <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2210      	movs	r2, #16
 800dfc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800dfc8:	e016      	b.n	800dff8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dfca:	2340      	movs	r3, #64	; 0x40
 800dfcc:	2202      	movs	r2, #2
 800dfce:	2181      	movs	r1, #129	; 0x81
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f002 f812 	bl	800fffa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dfdc:	2340      	movs	r3, #64	; 0x40
 800dfde:	2202      	movs	r2, #2
 800dfe0:	2101      	movs	r1, #1
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f002 f809 	bl	800fffa <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2201      	movs	r2, #1
 800dfec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2210      	movs	r2, #16
 800dff4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dff8:	2308      	movs	r3, #8
 800dffa:	2203      	movs	r2, #3
 800dffc:	2182      	movs	r1, #130	; 0x82
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f001 fffb 	bl	800fffa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2200      	movs	r2, #0
 800e01a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2200      	movs	r2, #0
 800e022:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	7c1b      	ldrb	r3, [r3, #16]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d109      	bne.n	800e042 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e034:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e038:	2101      	movs	r1, #1
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f002 f8cc 	bl	80101d8 <USBD_LL_PrepareReceive>
 800e040:	e007      	b.n	800e052 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e048:	2340      	movs	r3, #64	; 0x40
 800e04a:	2101      	movs	r1, #1
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f002 f8c3 	bl	80101d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800e068:	2300      	movs	r3, #0
 800e06a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e06c:	2181      	movs	r1, #129	; 0x81
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f001 ffe9 	bl	8010046 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e07a:	2101      	movs	r1, #1
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f001 ffe2 	bl	8010046 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e08a:	2182      	movs	r1, #130	; 0x82
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f001 ffda 	bl	8010046 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00e      	beq.n	800e0ca <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f002 f91d 	bl	80102fc <free>
    pdev->pClassData = NULL;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d03a      	beq.n	800e174 <USBD_CDC_Setup+0xa0>
 800e0fe:	2b20      	cmp	r3, #32
 800e100:	f040 809a 	bne.w	800e238 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	88db      	ldrh	r3, [r3, #6]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d029      	beq.n	800e160 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	b25b      	sxtb	r3, r3
 800e112:	2b00      	cmp	r3, #0
 800e114:	da11      	bge.n	800e13a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e122:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e124:	683a      	ldr	r2, [r7, #0]
 800e126:	88d2      	ldrh	r2, [r2, #6]
 800e128:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e12a:	6939      	ldr	r1, [r7, #16]
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	88db      	ldrh	r3, [r3, #6]
 800e130:	461a      	mov	r2, r3
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f001 fabf 	bl	800f6b6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e138:	e085      	b.n	800e246 <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	785a      	ldrb	r2, [r3, #1]
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	88db      	ldrh	r3, [r3, #6]
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e150:	6939      	ldr	r1, [r7, #16]
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	88db      	ldrh	r3, [r3, #6]
 800e156:	461a      	mov	r2, r3
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f001 fad8 	bl	800f70e <USBD_CtlPrepareRx>
    break;
 800e15e:	e072      	b.n	800e246 <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	683a      	ldr	r2, [r7, #0]
 800e16a:	7850      	ldrb	r0, [r2, #1]
 800e16c:	2200      	movs	r2, #0
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	4798      	blx	r3
    break;
 800e172:	e068      	b.n	800e246 <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	785b      	ldrb	r3, [r3, #1]
 800e178:	2b0b      	cmp	r3, #11
 800e17a:	d852      	bhi.n	800e222 <USBD_CDC_Setup+0x14e>
 800e17c:	a201      	add	r2, pc, #4	; (adr r2, 800e184 <USBD_CDC_Setup+0xb0>)
 800e17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e182:	bf00      	nop
 800e184:	0800e1b5 	.word	0x0800e1b5
 800e188:	0800e231 	.word	0x0800e231
 800e18c:	0800e223 	.word	0x0800e223
 800e190:	0800e223 	.word	0x0800e223
 800e194:	0800e223 	.word	0x0800e223
 800e198:	0800e223 	.word	0x0800e223
 800e19c:	0800e223 	.word	0x0800e223
 800e1a0:	0800e223 	.word	0x0800e223
 800e1a4:	0800e223 	.word	0x0800e223
 800e1a8:	0800e223 	.word	0x0800e223
 800e1ac:	0800e1df 	.word	0x0800e1df
 800e1b0:	0800e209 	.word	0x0800e209
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	2b03      	cmp	r3, #3
 800e1be:	d107      	bne.n	800e1d0 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e1c0:	f107 030c 	add.w	r3, r7, #12
 800e1c4:	2202      	movs	r2, #2
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f001 fa74 	bl	800f6b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e1ce:	e032      	b.n	800e236 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800e1d0:	6839      	ldr	r1, [r7, #0]
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f001 f9fe 	bl	800f5d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800e1d8:	2303      	movs	r3, #3
 800e1da:	75fb      	strb	r3, [r7, #23]
      break;
 800e1dc:	e02b      	b.n	800e236 <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	2b03      	cmp	r3, #3
 800e1e8:	d107      	bne.n	800e1fa <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e1ea:	f107 030f 	add.w	r3, r7, #15
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f001 fa5f 	bl	800f6b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e1f8:	e01d      	b.n	800e236 <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f001 f9e9 	bl	800f5d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800e202:	2303      	movs	r3, #3
 800e204:	75fb      	strb	r3, [r7, #23]
      break;
 800e206:	e016      	b.n	800e236 <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	2b03      	cmp	r3, #3
 800e212:	d00f      	beq.n	800e234 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f001 f9dc 	bl	800f5d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800e21c:	2303      	movs	r3, #3
 800e21e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e220:	e008      	b.n	800e234 <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e222:	6839      	ldr	r1, [r7, #0]
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f001 f9d5 	bl	800f5d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800e22a:	2303      	movs	r3, #3
 800e22c:	75fb      	strb	r3, [r7, #23]
      break;
 800e22e:	e002      	b.n	800e236 <USBD_CDC_Setup+0x162>
      break;
 800e230:	bf00      	nop
 800e232:	e008      	b.n	800e246 <USBD_CDC_Setup+0x172>
      break;
 800e234:	bf00      	nop
    }
    break;
 800e236:	e006      	b.n	800e246 <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 800e238:	6839      	ldr	r1, [r7, #0]
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f001 f9ca 	bl	800f5d4 <USBD_CtlError>
    ret = USBD_FAIL;
 800e240:	2303      	movs	r3, #3
 800e242:	75fb      	strb	r3, [r7, #23]
    break;
 800e244:	bf00      	nop
  }

  return (uint8_t)ret;
 800e246:	7dfb      	ldrb	r3, [r7, #23]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3718      	adds	r7, #24
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	460b      	mov	r3, r1
 800e25a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e262:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d101      	bne.n	800e272 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e26e:	2303      	movs	r3, #3
 800e270:	e049      	b.n	800e306 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e278:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e27a:	78fa      	ldrb	r2, [r7, #3]
 800e27c:	6879      	ldr	r1, [r7, #4]
 800e27e:	4613      	mov	r3, r2
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4413      	add	r3, r2
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	440b      	add	r3, r1
 800e288:	3318      	adds	r3, #24
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d029      	beq.n	800e2e4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e290:	78fa      	ldrb	r2, [r7, #3]
 800e292:	6879      	ldr	r1, [r7, #4]
 800e294:	4613      	mov	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4413      	add	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	440b      	add	r3, r1
 800e29e:	3318      	adds	r3, #24
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	78f9      	ldrb	r1, [r7, #3]
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	00db      	lsls	r3, r3, #3
 800e2aa:	1a5b      	subs	r3, r3, r1
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	4403      	add	r3, r0
 800e2b0:	3344      	adds	r3, #68	; 0x44
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e2b8:	fb01 f303 	mul.w	r3, r1, r3
 800e2bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d110      	bne.n	800e2e4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e2c2:	78fa      	ldrb	r2, [r7, #3]
 800e2c4:	6879      	ldr	r1, [r7, #4]
 800e2c6:	4613      	mov	r3, r2
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	4413      	add	r3, r2
 800e2cc:	009b      	lsls	r3, r3, #2
 800e2ce:	440b      	add	r3, r1
 800e2d0:	3318      	adds	r3, #24
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e2d6:	78f9      	ldrb	r1, [r7, #3]
 800e2d8:	2300      	movs	r3, #0
 800e2da:	2200      	movs	r2, #0
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f001 ff5a 	bl	8010196 <USBD_LL_Transmit>
 800e2e2:	e00f      	b.n	800e304 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2f2:	691b      	ldr	r3, [r3, #16]
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e2fa:	68ba      	ldr	r2, [r7, #8]
 800e2fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e300:	78fa      	ldrb	r2, [r7, #3]
 800e302:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b084      	sub	sp, #16
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	460b      	mov	r3, r1
 800e318:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e320:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d101      	bne.n	800e330 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e32c:	2303      	movs	r3, #3
 800e32e:	e015      	b.n	800e35c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e330:	78fb      	ldrb	r3, [r7, #3]
 800e332:	4619      	mov	r1, r3
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f001 ff70 	bl	801021a <USBD_LL_GetRxDataSize>
 800e33a:	4602      	mov	r2, r0
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e356:	4611      	mov	r1, r2
 800e358:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e372:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d015      	beq.n	800e3aa <USBD_CDC_EP0_RxReady+0x46>
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e384:	2bff      	cmp	r3, #255	; 0xff
 800e386:	d010      	beq.n	800e3aa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	68fa      	ldr	r2, [r7, #12]
 800e392:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e396:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e398:	68fa      	ldr	r2, [r7, #12]
 800e39a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e39e:	b292      	uxth	r2, r2
 800e3a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	22ff      	movs	r2, #255	; 0xff
 800e3a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2243      	movs	r2, #67	; 0x43
 800e3c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e3c2:	4b03      	ldr	r3, [pc, #12]	; (800e3d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr
 800e3d0:	24000098 	.word	0x24000098

0800e3d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2243      	movs	r2, #67	; 0x43
 800e3e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e3e2:	4b03      	ldr	r3, [pc, #12]	; (800e3f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	24000054 	.word	0x24000054

0800e3f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2243      	movs	r2, #67	; 0x43
 800e400:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e402:	4b03      	ldr	r3, [pc, #12]	; (800e410 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e404:	4618      	mov	r0, r3
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	240000dc 	.word	0x240000dc

0800e414 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	220a      	movs	r2, #10
 800e420:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e422:	4b03      	ldr	r3, [pc, #12]	; (800e430 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e424:	4618      	mov	r0, r3
 800e426:	370c      	adds	r7, #12
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr
 800e430:	24000010 	.word	0x24000010

0800e434 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e444:	2303      	movs	r3, #3
 800e446:	e004      	b.n	800e452 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr

0800e45e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e45e:	b480      	push	{r7}
 800e460:	b087      	sub	sp, #28
 800e462:	af00      	add	r7, sp, #0
 800e464:	60f8      	str	r0, [r7, #12]
 800e466:	60b9      	str	r1, [r7, #8]
 800e468:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e470:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	371c      	adds	r7, #28
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e490:	b480      	push	{r7}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4a0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e4aa:	2300      	movs	r3, #0
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3714      	adds	r7, #20
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4c6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d101      	bne.n	800e4da <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e4d6:	2303      	movs	r3, #3
 800e4d8:	e01a      	b.n	800e510 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d114      	bne.n	800e50e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e4e4:	68bb      	ldr	r3, [r7, #8]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e502:	2181      	movs	r1, #129	; 0x81
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f001 fe46 	bl	8010196 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e526:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d101      	bne.n	800e536 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e532:	2303      	movs	r3, #3
 800e534:	e016      	b.n	800e564 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7c1b      	ldrb	r3, [r3, #16]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d109      	bne.n	800e552 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e544:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e548:	2101      	movs	r1, #1
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f001 fe44 	bl	80101d8 <USBD_LL_PrepareReceive>
 800e550:	e007      	b.n	800e562 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e558:	2340      	movs	r3, #64	; 0x40
 800e55a:	2101      	movs	r1, #1
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f001 fe3b 	bl	80101d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e562:	2300      	movs	r3, #0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	4613      	mov	r3, r2
 800e578:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d101      	bne.n	800e584 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e580:	2303      	movs	r3, #3
 800e582:	e025      	b.n	800e5d0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d003      	beq.n	800e596 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2200      	movs	r2, #0
 800e592:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d003      	beq.n	800e5a8 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d003      	beq.n	800e5b6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	79fa      	ldrb	r2, [r7, #7]
 800e5c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f001 fcad 	bl	800ff24 <USBD_LL_Init>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3718      	adds	r7, #24
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d101      	bne.n	800e5f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	e010      	b.n	800e612 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	683a      	ldr	r2, [r7, #0]
 800e5f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e600:	f107 020e 	add.w	r2, r7, #14
 800e604:	4610      	mov	r0, r2
 800e606:	4798      	blx	r3
 800e608:	4602      	mov	r2, r0
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b082      	sub	sp, #8
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f001 fcce 	bl	800ffc4 <USBD_LL_Start>
 800e628:	4603      	mov	r3, r0
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}

0800e632 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e632:	b480      	push	{r7}
 800e634:	b083      	sub	sp, #12
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	460b      	mov	r3, r1
 800e652:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e654:	2303      	movs	r3, #3
 800e656:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d009      	beq.n	800e676 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	78fa      	ldrb	r2, [r7, #3]
 800e66c:	4611      	mov	r1, r2
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	4798      	blx	r3
 800e672:	4603      	mov	r3, r0
 800e674:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e676:	7bfb      	ldrb	r3, [r7, #15]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e692:	2b00      	cmp	r3, #0
 800e694:	d007      	beq.n	800e6a6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	78fa      	ldrb	r2, [r7, #3]
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	4798      	blx	r3
  }

  return USBD_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f000 ff4c 	bl	800f560 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e6e4:	f003 031f 	and.w	r3, r3, #31
 800e6e8:	2b02      	cmp	r3, #2
 800e6ea:	d01a      	beq.n	800e722 <USBD_LL_SetupStage+0x72>
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d822      	bhi.n	800e736 <USBD_LL_SetupStage+0x86>
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <USBD_LL_SetupStage+0x4a>
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d00a      	beq.n	800e70e <USBD_LL_SetupStage+0x5e>
 800e6f8:	e01d      	b.n	800e736 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e700:	4619      	mov	r1, r3
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f000 fa20 	bl	800eb48 <USBD_StdDevReq>
 800e708:	4603      	mov	r3, r0
 800e70a:	73fb      	strb	r3, [r7, #15]
      break;
 800e70c:	e020      	b.n	800e750 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e714:	4619      	mov	r1, r3
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 fa84 	bl	800ec24 <USBD_StdItfReq>
 800e71c:	4603      	mov	r3, r0
 800e71e:	73fb      	strb	r3, [r7, #15]
      break;
 800e720:	e016      	b.n	800e750 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e728:	4619      	mov	r1, r3
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 fac3 	bl	800ecb6 <USBD_StdEPReq>
 800e730:	4603      	mov	r3, r0
 800e732:	73fb      	strb	r3, [r7, #15]
      break;
 800e734:	e00c      	b.n	800e750 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e73c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e740:	b2db      	uxtb	r3, r3
 800e742:	4619      	mov	r1, r3
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f001 fc9d 	bl	8010084 <USBD_LL_StallEP>
 800e74a:	4603      	mov	r3, r0
 800e74c:	73fb      	strb	r3, [r7, #15]
      break;
 800e74e:	bf00      	nop
  }

  return ret;
 800e750:	7bfb      	ldrb	r3, [r7, #15]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b086      	sub	sp, #24
 800e75e:	af00      	add	r7, sp, #0
 800e760:	60f8      	str	r0, [r7, #12]
 800e762:	460b      	mov	r3, r1
 800e764:	607a      	str	r2, [r7, #4]
 800e766:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e768:	7afb      	ldrb	r3, [r7, #11]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d138      	bne.n	800e7e0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e774:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e77c:	2b03      	cmp	r3, #3
 800e77e:	d14c      	bne.n	800e81a <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	689a      	ldr	r2, [r3, #8]
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d913      	bls.n	800e7b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	689a      	ldr	r2, [r3, #8]
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	1ad2      	subs	r2, r2, r3
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	68da      	ldr	r2, [r3, #12]
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	bf28      	it	cs
 800e7a6:	4613      	movcs	r3, r2
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	6879      	ldr	r1, [r7, #4]
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	f000 ffcb 	bl	800f748 <USBD_CtlContinueRx>
 800e7b2:	e032      	b.n	800e81a <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00b      	beq.n	800e7d8 <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7c6:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e7c8:	2b03      	cmp	r3, #3
 800e7ca:	d105      	bne.n	800e7d8 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f000 ffc6 	bl	800f76a <USBD_CtlSendStatus>
 800e7de:	e01c      	b.n	800e81a <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e6:	699b      	ldr	r3, [r3, #24]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d014      	beq.n	800e816 <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7f2:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 800e7f4:	2b03      	cmp	r3, #3
 800e7f6:	d10e      	bne.n	800e816 <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7fe:	699b      	ldr	r3, [r3, #24]
 800e800:	7afa      	ldrb	r2, [r7, #11]
 800e802:	4611      	mov	r1, r2
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	4798      	blx	r3
 800e808:	4603      	mov	r3, r0
 800e80a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d003      	beq.n	800e81a <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	e002      	b.n	800e81c <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e816:	2303      	movs	r3, #3
 800e818:	e000      	b.n	800e81c <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 800e81a:	2300      	movs	r3, #0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3718      	adds	r7, #24
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b086      	sub	sp, #24
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	460b      	mov	r3, r1
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e832:	7afb      	ldrb	r3, [r7, #11]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d16b      	bne.n	800e910 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	3314      	adds	r3, #20
 800e83c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e844:	2b02      	cmp	r3, #2
 800e846:	d156      	bne.n	800e8f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	689a      	ldr	r2, [r3, #8]
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	429a      	cmp	r2, r3
 800e852:	d914      	bls.n	800e87e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	689a      	ldr	r2, [r3, #8]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	1ad2      	subs	r2, r2, r3
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	461a      	mov	r2, r3
 800e868:	6879      	ldr	r1, [r7, #4]
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f000 ff3e 	bl	800f6ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e870:	2300      	movs	r3, #0
 800e872:	2200      	movs	r2, #0
 800e874:	2100      	movs	r1, #0
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	f001 fcae 	bl	80101d8 <USBD_LL_PrepareReceive>
 800e87c:	e03b      	b.n	800e8f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	68da      	ldr	r2, [r3, #12]
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	429a      	cmp	r2, r3
 800e888:	d11c      	bne.n	800e8c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	685a      	ldr	r2, [r3, #4]
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e892:	429a      	cmp	r2, r3
 800e894:	d316      	bcc.n	800e8c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	685a      	ldr	r2, [r3, #4]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d20f      	bcs.n	800e8c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	68f8      	ldr	r0, [r7, #12]
 800e8aa:	f000 ff1f 	bl	800f6ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f001 fc8b 	bl	80101d8 <USBD_LL_PrepareReceive>
 800e8c2:	e018      	b.n	800e8f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00b      	beq.n	800e8e8 <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8d6:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e8d8:	2b03      	cmp	r3, #3
 800e8da:	d105      	bne.n	800e8e8 <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8e8:	2180      	movs	r1, #128	; 0x80
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f001 fbca 	bl	8010084 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f000 ff4d 	bl	800f790 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d124      	bne.n	800e94a <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7ff fe96 	bl	800e632 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e90e:	e01c      	b.n	800e94a <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d014      	beq.n	800e946 <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e922:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 800e924:	2b03      	cmp	r3, #3
 800e926:	d10e      	bne.n	800e946 <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e92e:	695b      	ldr	r3, [r3, #20]
 800e930:	7afa      	ldrb	r2, [r7, #11]
 800e932:	4611      	mov	r1, r2
 800e934:	68f8      	ldr	r0, [r7, #12]
 800e936:	4798      	blx	r3
 800e938:	4603      	mov	r3, r0
 800e93a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e93c:	7dfb      	ldrb	r3, [r7, #23]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d003      	beq.n	800e94a <USBD_LL_DataInStage+0x126>
    {
      return ret;
 800e942:	7dfb      	ldrb	r3, [r7, #23]
 800e944:	e002      	b.n	800e94c <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e946:	2303      	movs	r3, #3
 800e948:	e000      	b.n	800e94c <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3718      	adds	r7, #24
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2200      	movs	r2, #0
 800e970:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e980:	2b00      	cmp	r3, #0
 800e982:	d009      	beq.n	800e998 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	6852      	ldr	r2, [r2, #4]
 800e990:	b2d2      	uxtb	r2, r2
 800e992:	4611      	mov	r1, r2
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e998:	2340      	movs	r3, #64	; 0x40
 800e99a:	2200      	movs	r2, #0
 800e99c:	2100      	movs	r1, #0
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f001 fb2b 	bl	800fffa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2240      	movs	r2, #64	; 0x40
 800e9b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e9b4:	2340      	movs	r3, #64	; 0x40
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	2180      	movs	r1, #128	; 0x80
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f001 fb1d 	bl	800fffa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2240      	movs	r2, #64	; 0x40
 800e9ca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3708      	adds	r7, #8
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e9d6:	b480      	push	{r7}
 800e9d8:	b083      	sub	sp, #12
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
 800e9de:	460b      	mov	r3, r1
 800e9e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	78fa      	ldrb	r2, [r7, #3]
 800e9e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	370c      	adds	r7, #12
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr

0800e9f6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e9f6:	b480      	push	{r7}
 800e9f8:	b083      	sub	sp, #12
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea04:	b2da      	uxtb	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2204      	movs	r2, #4
 800ea10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	370c      	adds	r7, #12
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr

0800ea22 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea22:	b480      	push	{r7}
 800ea24:	b083      	sub	sp, #12
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	2b04      	cmp	r3, #4
 800ea34:	d106      	bne.n	800ea44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ea3c:	b2da      	uxtb	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b082      	sub	sp, #8
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	2b03      	cmp	r3, #3
 800ea64:	d10b      	bne.n	800ea7e <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea6c:	69db      	ldr	r3, [r3, #28]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d005      	beq.n	800ea7e <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea78:	69db      	ldr	r3, [r3, #28]
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	460b      	mov	r3, r1
 800ea92:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b083      	sub	sp, #12
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	460b      	mov	r3, r1
 800eaac:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eaae:	2300      	movs	r3, #0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	370c      	adds	r7, #12
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr

0800eabc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	370c      	adds	r7, #12
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr

0800ead2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b082      	sub	sp, #8
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2201      	movs	r2, #1
 800eade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d009      	beq.n	800eb00 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	6852      	ldr	r2, [r2, #4]
 800eaf8:	b2d2      	uxtb	r2, r2
 800eafa:	4611      	mov	r1, r2
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	4798      	blx	r3
  }

  return USBD_OK;
 800eb00:	2300      	movs	r3, #0
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eb0a:	b480      	push	{r7}
 800eb0c:	b087      	sub	sp, #28
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	781b      	ldrb	r3, [r3, #0]
 800eb1a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eb28:	8a3b      	ldrh	r3, [r7, #16]
 800eb2a:	021b      	lsls	r3, r3, #8
 800eb2c:	b21a      	sxth	r2, r3
 800eb2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	b21b      	sxth	r3, r3
 800eb36:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eb38:	89fb      	ldrh	r3, [r7, #14]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	371c      	adds	r7, #28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr
	...

0800eb48 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb52:	2300      	movs	r3, #0
 800eb54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	781b      	ldrb	r3, [r3, #0]
 800eb5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb5e:	2b40      	cmp	r3, #64	; 0x40
 800eb60:	d005      	beq.n	800eb6e <USBD_StdDevReq+0x26>
 800eb62:	2b40      	cmp	r3, #64	; 0x40
 800eb64:	d853      	bhi.n	800ec0e <USBD_StdDevReq+0xc6>
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00b      	beq.n	800eb82 <USBD_StdDevReq+0x3a>
 800eb6a:	2b20      	cmp	r3, #32
 800eb6c:	d14f      	bne.n	800ec0e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	6839      	ldr	r1, [r7, #0]
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	4798      	blx	r3
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800eb80:	e04a      	b.n	800ec18 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	785b      	ldrb	r3, [r3, #1]
 800eb86:	2b09      	cmp	r3, #9
 800eb88:	d83b      	bhi.n	800ec02 <USBD_StdDevReq+0xba>
 800eb8a:	a201      	add	r2, pc, #4	; (adr r2, 800eb90 <USBD_StdDevReq+0x48>)
 800eb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb90:	0800ebe5 	.word	0x0800ebe5
 800eb94:	0800ebf9 	.word	0x0800ebf9
 800eb98:	0800ec03 	.word	0x0800ec03
 800eb9c:	0800ebef 	.word	0x0800ebef
 800eba0:	0800ec03 	.word	0x0800ec03
 800eba4:	0800ebc3 	.word	0x0800ebc3
 800eba8:	0800ebb9 	.word	0x0800ebb9
 800ebac:	0800ec03 	.word	0x0800ec03
 800ebb0:	0800ebdb 	.word	0x0800ebdb
 800ebb4:	0800ebcd 	.word	0x0800ebcd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ebb8:	6839      	ldr	r1, [r7, #0]
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 f9dc 	bl	800ef78 <USBD_GetDescriptor>
      break;
 800ebc0:	e024      	b.n	800ec0c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ebc2:	6839      	ldr	r1, [r7, #0]
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 fb41 	bl	800f24c <USBD_SetAddress>
      break;
 800ebca:	e01f      	b.n	800ec0c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ebcc:	6839      	ldr	r1, [r7, #0]
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 fb80 	bl	800f2d4 <USBD_SetConfig>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebd8:	e018      	b.n	800ec0c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ebda:	6839      	ldr	r1, [r7, #0]
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 fc1f 	bl	800f420 <USBD_GetConfig>
      break;
 800ebe2:	e013      	b.n	800ec0c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 fc50 	bl	800f48c <USBD_GetStatus>
      break;
 800ebec:	e00e      	b.n	800ec0c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ebee:	6839      	ldr	r1, [r7, #0]
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 fc7f 	bl	800f4f4 <USBD_SetFeature>
      break;
 800ebf6:	e009      	b.n	800ec0c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ebf8:	6839      	ldr	r1, [r7, #0]
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fc8e 	bl	800f51c <USBD_ClrFeature>
      break;
 800ec00:	e004      	b.n	800ec0c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ec02:	6839      	ldr	r1, [r7, #0]
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 fce5 	bl	800f5d4 <USBD_CtlError>
      break;
 800ec0a:	bf00      	nop
    }
    break;
 800ec0c:	e004      	b.n	800ec18 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ec0e:	6839      	ldr	r1, [r7, #0]
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 fcdf 	bl	800f5d4 <USBD_CtlError>
    break;
 800ec16:	bf00      	nop
  }

  return ret;
 800ec18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop

0800ec24 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec3a:	2b40      	cmp	r3, #64	; 0x40
 800ec3c:	d005      	beq.n	800ec4a <USBD_StdItfReq+0x26>
 800ec3e:	2b40      	cmp	r3, #64	; 0x40
 800ec40:	d82f      	bhi.n	800eca2 <USBD_StdItfReq+0x7e>
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d001      	beq.n	800ec4a <USBD_StdItfReq+0x26>
 800ec46:	2b20      	cmp	r3, #32
 800ec48:	d12b      	bne.n	800eca2 <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	3b01      	subs	r3, #1
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d81d      	bhi.n	800ec94 <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	889b      	ldrh	r3, [r3, #4]
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d813      	bhi.n	800ec8a <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	6839      	ldr	r1, [r7, #0]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	4798      	blx	r3
 800ec70:	4603      	mov	r3, r0
 800ec72:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	88db      	ldrh	r3, [r3, #6]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d110      	bne.n	800ec9e <USBD_StdItfReq+0x7a>
 800ec7c:	7bfb      	ldrb	r3, [r7, #15]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d10d      	bne.n	800ec9e <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 fd71 	bl	800f76a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ec88:	e009      	b.n	800ec9e <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 800ec8a:	6839      	ldr	r1, [r7, #0]
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 fca1 	bl	800f5d4 <USBD_CtlError>
      break;
 800ec92:	e004      	b.n	800ec9e <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 800ec94:	6839      	ldr	r1, [r7, #0]
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fc9c 	bl	800f5d4 <USBD_CtlError>
      break;
 800ec9c:	e000      	b.n	800eca0 <USBD_StdItfReq+0x7c>
      break;
 800ec9e:	bf00      	nop
    }
    break;
 800eca0:	e004      	b.n	800ecac <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 800eca2:	6839      	ldr	r1, [r7, #0]
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f000 fc95 	bl	800f5d4 <USBD_CtlError>
    break;
 800ecaa:	bf00      	nop
  }

  return ret;
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b084      	sub	sp, #16
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	889b      	ldrh	r3, [r3, #4]
 800ecc8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecd2:	2b40      	cmp	r3, #64	; 0x40
 800ecd4:	d007      	beq.n	800ece6 <USBD_StdEPReq+0x30>
 800ecd6:	2b40      	cmp	r3, #64	; 0x40
 800ecd8:	f200 8143 	bhi.w	800ef62 <USBD_StdEPReq+0x2ac>
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d00c      	beq.n	800ecfa <USBD_StdEPReq+0x44>
 800ece0:	2b20      	cmp	r3, #32
 800ece2:	f040 813e 	bne.w	800ef62 <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecec:	689b      	ldr	r3, [r3, #8]
 800ecee:	6839      	ldr	r1, [r7, #0]
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	4798      	blx	r3
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf8:	e138      	b.n	800ef6c <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	785b      	ldrb	r3, [r3, #1]
 800ecfe:	2b03      	cmp	r3, #3
 800ed00:	d007      	beq.n	800ed12 <USBD_StdEPReq+0x5c>
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	f300 8127 	bgt.w	800ef56 <USBD_StdEPReq+0x2a0>
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d07d      	beq.n	800ee08 <USBD_StdEPReq+0x152>
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d03c      	beq.n	800ed8a <USBD_StdEPReq+0xd4>
 800ed10:	e121      	b.n	800ef56 <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	2b02      	cmp	r3, #2
 800ed1c:	d002      	beq.n	800ed24 <USBD_StdEPReq+0x6e>
 800ed1e:	2b03      	cmp	r3, #3
 800ed20:	d016      	beq.n	800ed50 <USBD_StdEPReq+0x9a>
 800ed22:	e02c      	b.n	800ed7e <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed24:	7bbb      	ldrb	r3, [r7, #14]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00d      	beq.n	800ed46 <USBD_StdEPReq+0x90>
 800ed2a:	7bbb      	ldrb	r3, [r7, #14]
 800ed2c:	2b80      	cmp	r3, #128	; 0x80
 800ed2e:	d00a      	beq.n	800ed46 <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed30:	7bbb      	ldrb	r3, [r7, #14]
 800ed32:	4619      	mov	r1, r3
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f001 f9a5 	bl	8010084 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed3a:	2180      	movs	r1, #128	; 0x80
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f001 f9a1 	bl	8010084 <USBD_LL_StallEP>
 800ed42:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ed44:	e020      	b.n	800ed88 <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 800ed46:	6839      	ldr	r1, [r7, #0]
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f000 fc43 	bl	800f5d4 <USBD_CtlError>
        break;
 800ed4e:	e01b      	b.n	800ed88 <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	885b      	ldrh	r3, [r3, #2]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d10e      	bne.n	800ed76 <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00b      	beq.n	800ed76 <USBD_StdEPReq+0xc0>
 800ed5e:	7bbb      	ldrb	r3, [r7, #14]
 800ed60:	2b80      	cmp	r3, #128	; 0x80
 800ed62:	d008      	beq.n	800ed76 <USBD_StdEPReq+0xc0>
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	88db      	ldrh	r3, [r3, #6]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d104      	bne.n	800ed76 <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed6c:	7bbb      	ldrb	r3, [r7, #14]
 800ed6e:	4619      	mov	r1, r3
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f001 f987 	bl	8010084 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fcf7 	bl	800f76a <USBD_CtlSendStatus>

        break;
 800ed7c:	e004      	b.n	800ed88 <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 800ed7e:	6839      	ldr	r1, [r7, #0]
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f000 fc27 	bl	800f5d4 <USBD_CtlError>
        break;
 800ed86:	bf00      	nop
      }
      break;
 800ed88:	e0ea      	b.n	800ef60 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed90:	b2db      	uxtb	r3, r3
 800ed92:	2b02      	cmp	r3, #2
 800ed94:	d002      	beq.n	800ed9c <USBD_StdEPReq+0xe6>
 800ed96:	2b03      	cmp	r3, #3
 800ed98:	d016      	beq.n	800edc8 <USBD_StdEPReq+0x112>
 800ed9a:	e02e      	b.n	800edfa <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed9c:	7bbb      	ldrb	r3, [r7, #14]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d00d      	beq.n	800edbe <USBD_StdEPReq+0x108>
 800eda2:	7bbb      	ldrb	r3, [r7, #14]
 800eda4:	2b80      	cmp	r3, #128	; 0x80
 800eda6:	d00a      	beq.n	800edbe <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800eda8:	7bbb      	ldrb	r3, [r7, #14]
 800edaa:	4619      	mov	r1, r3
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f001 f969 	bl	8010084 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800edb2:	2180      	movs	r1, #128	; 0x80
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f001 f965 	bl	8010084 <USBD_LL_StallEP>
 800edba:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800edbc:	e023      	b.n	800ee06 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800edbe:	6839      	ldr	r1, [r7, #0]
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 fc07 	bl	800f5d4 <USBD_CtlError>
        break;
 800edc6:	e01e      	b.n	800ee06 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	885b      	ldrh	r3, [r3, #2]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d119      	bne.n	800ee04 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800edd0:	7bbb      	ldrb	r3, [r7, #14]
 800edd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d004      	beq.n	800ede4 <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800edda:	7bbb      	ldrb	r3, [r7, #14]
 800eddc:	4619      	mov	r1, r3
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f001 f96f 	bl	80100c2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 fcc0 	bl	800f76a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	6839      	ldr	r1, [r7, #0]
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	4798      	blx	r3
        }
        break;
 800edf8:	e004      	b.n	800ee04 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800edfa:	6839      	ldr	r1, [r7, #0]
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 fbe9 	bl	800f5d4 <USBD_CtlError>
        break;
 800ee02:	e000      	b.n	800ee06 <USBD_StdEPReq+0x150>
        break;
 800ee04:	bf00      	nop
      }
      break;
 800ee06:	e0ab      	b.n	800ef60 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	2b02      	cmp	r3, #2
 800ee12:	d002      	beq.n	800ee1a <USBD_StdEPReq+0x164>
 800ee14:	2b03      	cmp	r3, #3
 800ee16:	d032      	beq.n	800ee7e <USBD_StdEPReq+0x1c8>
 800ee18:	e097      	b.n	800ef4a <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee1a:	7bbb      	ldrb	r3, [r7, #14]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d007      	beq.n	800ee30 <USBD_StdEPReq+0x17a>
 800ee20:	7bbb      	ldrb	r3, [r7, #14]
 800ee22:	2b80      	cmp	r3, #128	; 0x80
 800ee24:	d004      	beq.n	800ee30 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 800ee26:	6839      	ldr	r1, [r7, #0]
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f000 fbd3 	bl	800f5d4 <USBD_CtlError>
          break;
 800ee2e:	e091      	b.n	800ef54 <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	da0b      	bge.n	800ee50 <USBD_StdEPReq+0x19a>
 800ee38:	7bbb      	ldrb	r3, [r7, #14]
 800ee3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee3e:	4613      	mov	r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	3310      	adds	r3, #16
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	e00b      	b.n	800ee68 <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ee50:	7bbb      	ldrb	r3, [r7, #14]
 800ee52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee56:	4613      	mov	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4413      	add	r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	4413      	add	r3, r2
 800ee66:	3304      	adds	r3, #4
 800ee68:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	2202      	movs	r2, #2
 800ee74:	4619      	mov	r1, r3
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 fc1d 	bl	800f6b6 <USBD_CtlSendData>
        break;
 800ee7c:	e06a      	b.n	800ef54 <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ee7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	da11      	bge.n	800eeaa <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ee86:	7bbb      	ldrb	r3, [r7, #14]
 800ee88:	f003 020f 	and.w	r2, r3, #15
 800ee8c:	6879      	ldr	r1, [r7, #4]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	4413      	add	r3, r2
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	440b      	add	r3, r1
 800ee98:	3324      	adds	r3, #36	; 0x24
 800ee9a:	881b      	ldrh	r3, [r3, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d117      	bne.n	800eed0 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800eea0:	6839      	ldr	r1, [r7, #0]
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 fb96 	bl	800f5d4 <USBD_CtlError>
            break;
 800eea8:	e054      	b.n	800ef54 <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eeaa:	7bbb      	ldrb	r3, [r7, #14]
 800eeac:	f003 020f 	and.w	r2, r3, #15
 800eeb0:	6879      	ldr	r1, [r7, #4]
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4413      	add	r3, r2
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	440b      	add	r3, r1
 800eebc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d104      	bne.n	800eed0 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 800eec6:	6839      	ldr	r1, [r7, #0]
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 fb83 	bl	800f5d4 <USBD_CtlError>
            break;
 800eece:	e041      	b.n	800ef54 <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	da0b      	bge.n	800eef0 <USBD_StdEPReq+0x23a>
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
 800eeda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eede:	4613      	mov	r3, r2
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	4413      	add	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	3310      	adds	r3, #16
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	4413      	add	r3, r2
 800eeec:	3304      	adds	r3, #4
 800eeee:	e00b      	b.n	800ef08 <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 800eef0:	7bbb      	ldrb	r3, [r7, #14]
 800eef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eef6:	4613      	mov	r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4413      	add	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	4413      	add	r3, r2
 800ef06:	3304      	adds	r3, #4
 800ef08:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ef0a:	7bbb      	ldrb	r3, [r7, #14]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <USBD_StdEPReq+0x260>
 800ef10:	7bbb      	ldrb	r3, [r7, #14]
 800ef12:	2b80      	cmp	r3, #128	; 0x80
 800ef14:	d103      	bne.n	800ef1e <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	601a      	str	r2, [r3, #0]
 800ef1c:	e00e      	b.n	800ef3c <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ef1e:	7bbb      	ldrb	r3, [r7, #14]
 800ef20:	4619      	mov	r1, r3
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f001 f8ec 	bl	8010100 <USBD_LL_IsStallEP>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d003      	beq.n	800ef36 <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	2201      	movs	r2, #1
 800ef32:	601a      	str	r2, [r3, #0]
 800ef34:	e002      	b.n	800ef3c <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	2202      	movs	r2, #2
 800ef40:	4619      	mov	r1, r3
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 fbb7 	bl	800f6b6 <USBD_CtlSendData>
          break;
 800ef48:	e004      	b.n	800ef54 <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 800ef4a:	6839      	ldr	r1, [r7, #0]
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 fb41 	bl	800f5d4 <USBD_CtlError>
        break;
 800ef52:	bf00      	nop
      }
      break;
 800ef54:	e004      	b.n	800ef60 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 800ef56:	6839      	ldr	r1, [r7, #0]
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f000 fb3b 	bl	800f5d4 <USBD_CtlError>
      break;
 800ef5e:	bf00      	nop
    }
    break;
 800ef60:	e004      	b.n	800ef6c <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 800ef62:	6839      	ldr	r1, [r7, #0]
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 fb35 	bl	800f5d4 <USBD_CtlError>
    break;
 800ef6a:	bf00      	nop
  }

  return ret;
 800ef6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
	...

0800ef78 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ef82:	2300      	movs	r3, #0
 800ef84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	885b      	ldrh	r3, [r3, #2]
 800ef92:	0a1b      	lsrs	r3, r3, #8
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	3b01      	subs	r3, #1
 800ef98:	2b06      	cmp	r3, #6
 800ef9a:	f200 8128 	bhi.w	800f1ee <USBD_GetDescriptor+0x276>
 800ef9e:	a201      	add	r2, pc, #4	; (adr r2, 800efa4 <USBD_GetDescriptor+0x2c>)
 800efa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efa4:	0800efc1 	.word	0x0800efc1
 800efa8:	0800efd9 	.word	0x0800efd9
 800efac:	0800f019 	.word	0x0800f019
 800efb0:	0800f1ef 	.word	0x0800f1ef
 800efb4:	0800f1ef 	.word	0x0800f1ef
 800efb8:	0800f18f 	.word	0x0800f18f
 800efbc:	0800f1bb 	.word	0x0800f1bb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	7c12      	ldrb	r2, [r2, #16]
 800efcc:	f107 0108 	add.w	r1, r7, #8
 800efd0:	4610      	mov	r0, r2
 800efd2:	4798      	blx	r3
 800efd4:	60f8      	str	r0, [r7, #12]
    break;
 800efd6:	e112      	b.n	800f1fe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	7c1b      	ldrb	r3, [r3, #16]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10d      	bne.n	800effc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe8:	f107 0208 	add.w	r2, r7, #8
 800efec:	4610      	mov	r0, r2
 800efee:	4798      	blx	r3
 800eff0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	3301      	adds	r3, #1
 800eff6:	2202      	movs	r2, #2
 800eff8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800effa:	e100      	b.n	800f1fe <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f004:	f107 0208 	add.w	r2, r7, #8
 800f008:	4610      	mov	r0, r2
 800f00a:	4798      	blx	r3
 800f00c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	3301      	adds	r3, #1
 800f012:	2202      	movs	r2, #2
 800f014:	701a      	strb	r2, [r3, #0]
    break;
 800f016:	e0f2      	b.n	800f1fe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	885b      	ldrh	r3, [r3, #2]
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	2b05      	cmp	r3, #5
 800f020:	f200 80ac 	bhi.w	800f17c <USBD_GetDescriptor+0x204>
 800f024:	a201      	add	r2, pc, #4	; (adr r2, 800f02c <USBD_GetDescriptor+0xb4>)
 800f026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f02a:	bf00      	nop
 800f02c:	0800f045 	.word	0x0800f045
 800f030:	0800f079 	.word	0x0800f079
 800f034:	0800f0ad 	.word	0x0800f0ad
 800f038:	0800f0e1 	.word	0x0800f0e1
 800f03c:	0800f115 	.word	0x0800f115
 800f040:	0800f149 	.word	0x0800f149
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00b      	beq.n	800f068 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	7c12      	ldrb	r2, [r2, #16]
 800f05c:	f107 0108 	add.w	r1, r7, #8
 800f060:	4610      	mov	r0, r2
 800f062:	4798      	blx	r3
 800f064:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f066:	e091      	b.n	800f18c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f068:	6839      	ldr	r1, [r7, #0]
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 fab2 	bl	800f5d4 <USBD_CtlError>
        err++;
 800f070:	7afb      	ldrb	r3, [r7, #11]
 800f072:	3301      	adds	r3, #1
 800f074:	72fb      	strb	r3, [r7, #11]
      break;
 800f076:	e089      	b.n	800f18c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00b      	beq.n	800f09c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	7c12      	ldrb	r2, [r2, #16]
 800f090:	f107 0108 	add.w	r1, r7, #8
 800f094:	4610      	mov	r0, r2
 800f096:	4798      	blx	r3
 800f098:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f09a:	e077      	b.n	800f18c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f09c:	6839      	ldr	r1, [r7, #0]
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 fa98 	bl	800f5d4 <USBD_CtlError>
        err++;
 800f0a4:	7afb      	ldrb	r3, [r7, #11]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	72fb      	strb	r3, [r7, #11]
      break;
 800f0aa:	e06f      	b.n	800f18c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00b      	beq.n	800f0d0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	7c12      	ldrb	r2, [r2, #16]
 800f0c4:	f107 0108 	add.w	r1, r7, #8
 800f0c8:	4610      	mov	r0, r2
 800f0ca:	4798      	blx	r3
 800f0cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0ce:	e05d      	b.n	800f18c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f0d0:	6839      	ldr	r1, [r7, #0]
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 fa7e 	bl	800f5d4 <USBD_CtlError>
        err++;
 800f0d8:	7afb      	ldrb	r3, [r7, #11]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	72fb      	strb	r3, [r7, #11]
      break;
 800f0de:	e055      	b.n	800f18c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00b      	beq.n	800f104 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	7c12      	ldrb	r2, [r2, #16]
 800f0f8:	f107 0108 	add.w	r1, r7, #8
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	4798      	blx	r3
 800f100:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f102:	e043      	b.n	800f18c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f104:	6839      	ldr	r1, [r7, #0]
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fa64 	bl	800f5d4 <USBD_CtlError>
        err++;
 800f10c:	7afb      	ldrb	r3, [r7, #11]
 800f10e:	3301      	adds	r3, #1
 800f110:	72fb      	strb	r3, [r7, #11]
      break;
 800f112:	e03b      	b.n	800f18c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00b      	beq.n	800f138 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f126:	695b      	ldr	r3, [r3, #20]
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	7c12      	ldrb	r2, [r2, #16]
 800f12c:	f107 0108 	add.w	r1, r7, #8
 800f130:	4610      	mov	r0, r2
 800f132:	4798      	blx	r3
 800f134:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f136:	e029      	b.n	800f18c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f138:	6839      	ldr	r1, [r7, #0]
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 fa4a 	bl	800f5d4 <USBD_CtlError>
        err++;
 800f140:	7afb      	ldrb	r3, [r7, #11]
 800f142:	3301      	adds	r3, #1
 800f144:	72fb      	strb	r3, [r7, #11]
      break;
 800f146:	e021      	b.n	800f18c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f14e:	699b      	ldr	r3, [r3, #24]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00b      	beq.n	800f16c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f15a:	699b      	ldr	r3, [r3, #24]
 800f15c:	687a      	ldr	r2, [r7, #4]
 800f15e:	7c12      	ldrb	r2, [r2, #16]
 800f160:	f107 0108 	add.w	r1, r7, #8
 800f164:	4610      	mov	r0, r2
 800f166:	4798      	blx	r3
 800f168:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f16a:	e00f      	b.n	800f18c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 fa30 	bl	800f5d4 <USBD_CtlError>
        err++;
 800f174:	7afb      	ldrb	r3, [r7, #11]
 800f176:	3301      	adds	r3, #1
 800f178:	72fb      	strb	r3, [r7, #11]
      break;
 800f17a:	e007      	b.n	800f18c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f17c:	6839      	ldr	r1, [r7, #0]
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 fa28 	bl	800f5d4 <USBD_CtlError>
      err++;
 800f184:	7afb      	ldrb	r3, [r7, #11]
 800f186:	3301      	adds	r3, #1
 800f188:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f18a:	bf00      	nop
    }
    break;
 800f18c:	e037      	b.n	800f1fe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	7c1b      	ldrb	r3, [r3, #16]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d109      	bne.n	800f1aa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f19e:	f107 0208 	add.w	r2, r7, #8
 800f1a2:	4610      	mov	r0, r2
 800f1a4:	4798      	blx	r3
 800f1a6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f1a8:	e029      	b.n	800f1fe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f1aa:	6839      	ldr	r1, [r7, #0]
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fa11 	bl	800f5d4 <USBD_CtlError>
      err++;
 800f1b2:	7afb      	ldrb	r3, [r7, #11]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	72fb      	strb	r3, [r7, #11]
    break;
 800f1b8:	e021      	b.n	800f1fe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	7c1b      	ldrb	r3, [r3, #16]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10d      	bne.n	800f1de <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ca:	f107 0208 	add.w	r2, r7, #8
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	4798      	blx	r3
 800f1d2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	2207      	movs	r2, #7
 800f1da:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f1dc:	e00f      	b.n	800f1fe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f1de:	6839      	ldr	r1, [r7, #0]
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 f9f7 	bl	800f5d4 <USBD_CtlError>
      err++;
 800f1e6:	7afb      	ldrb	r3, [r7, #11]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	72fb      	strb	r3, [r7, #11]
    break;
 800f1ec:	e007      	b.n	800f1fe <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f1ee:	6839      	ldr	r1, [r7, #0]
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 f9ef 	bl	800f5d4 <USBD_CtlError>
    err++;
 800f1f6:	7afb      	ldrb	r3, [r7, #11]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	72fb      	strb	r3, [r7, #11]
    break;
 800f1fc:	bf00      	nop
  }

  if (err != 0U)
 800f1fe:	7afb      	ldrb	r3, [r7, #11]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d11e      	bne.n	800f242 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	88db      	ldrh	r3, [r3, #6]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d016      	beq.n	800f23a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f20c:	893b      	ldrh	r3, [r7, #8]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00e      	beq.n	800f230 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	88da      	ldrh	r2, [r3, #6]
 800f216:	893b      	ldrh	r3, [r7, #8]
 800f218:	4293      	cmp	r3, r2
 800f21a:	bf28      	it	cs
 800f21c:	4613      	movcs	r3, r2
 800f21e:	b29b      	uxth	r3, r3
 800f220:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f222:	893b      	ldrh	r3, [r7, #8]
 800f224:	461a      	mov	r2, r3
 800f226:	68f9      	ldr	r1, [r7, #12]
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 fa44 	bl	800f6b6 <USBD_CtlSendData>
 800f22e:	e009      	b.n	800f244 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f9ce 	bl	800f5d4 <USBD_CtlError>
 800f238:	e004      	b.n	800f244 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fa95 	bl	800f76a <USBD_CtlSendStatus>
 800f240:	e000      	b.n	800f244 <USBD_GetDescriptor+0x2cc>
    return;
 800f242:	bf00      	nop
    }
  }
}
 800f244:	3710      	adds	r7, #16
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop

0800f24c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	889b      	ldrh	r3, [r3, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d131      	bne.n	800f2c2 <USBD_SetAddress+0x76>
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	88db      	ldrh	r3, [r3, #6]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d12d      	bne.n	800f2c2 <USBD_SetAddress+0x76>
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	885b      	ldrh	r3, [r3, #2]
 800f26a:	2b7f      	cmp	r3, #127	; 0x7f
 800f26c:	d829      	bhi.n	800f2c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	885b      	ldrh	r3, [r3, #2]
 800f272:	b2db      	uxtb	r3, r3
 800f274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f278:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f280:	b2db      	uxtb	r3, r3
 800f282:	2b03      	cmp	r3, #3
 800f284:	d104      	bne.n	800f290 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f286:	6839      	ldr	r1, [r7, #0]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 f9a3 	bl	800f5d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f28e:	e01d      	b.n	800f2cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	7bfa      	ldrb	r2, [r7, #15]
 800f294:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f298:	7bfb      	ldrb	r3, [r7, #15]
 800f29a:	4619      	mov	r1, r3
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 ff5b 	bl	8010158 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f000 fa61 	bl	800f76a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f2a8:	7bfb      	ldrb	r3, [r7, #15]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d004      	beq.n	800f2b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2202      	movs	r2, #2
 800f2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2b6:	e009      	b.n	800f2cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2c0:	e004      	b.n	800f2cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f2c2:	6839      	ldr	r1, [r7, #0]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 f985 	bl	800f5d4 <USBD_CtlError>
  }
}
 800f2ca:	bf00      	nop
 800f2cc:	bf00      	nop
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	885b      	ldrh	r3, [r3, #2]
 800f2e6:	b2da      	uxtb	r2, r3
 800f2e8:	4b4c      	ldr	r3, [pc, #304]	; (800f41c <USBD_SetConfig+0x148>)
 800f2ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f2ec:	4b4b      	ldr	r3, [pc, #300]	; (800f41c <USBD_SetConfig+0x148>)
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d905      	bls.n	800f300 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f2f4:	6839      	ldr	r1, [r7, #0]
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f000 f96c 	bl	800f5d4 <USBD_CtlError>
    return USBD_FAIL;
 800f2fc:	2303      	movs	r3, #3
 800f2fe:	e088      	b.n	800f412 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b02      	cmp	r3, #2
 800f30a:	d002      	beq.n	800f312 <USBD_SetConfig+0x3e>
 800f30c:	2b03      	cmp	r3, #3
 800f30e:	d025      	beq.n	800f35c <USBD_SetConfig+0x88>
 800f310:	e071      	b.n	800f3f6 <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f312:	4b42      	ldr	r3, [pc, #264]	; (800f41c <USBD_SetConfig+0x148>)
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d01c      	beq.n	800f354 <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 800f31a:	4b40      	ldr	r3, [pc, #256]	; (800f41c <USBD_SetConfig+0x148>)
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f324:	4b3d      	ldr	r3, [pc, #244]	; (800f41c <USBD_SetConfig+0x148>)
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	4619      	mov	r1, r3
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7ff f98c 	bl	800e648 <USBD_SetClassConfig>
 800f330:	4603      	mov	r3, r0
 800f332:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f334:	7bfb      	ldrb	r3, [r7, #15]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d004      	beq.n	800f344 <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 800f33a:	6839      	ldr	r1, [r7, #0]
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 f949 	bl	800f5d4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f342:	e065      	b.n	800f410 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 fa10 	bl	800f76a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2203      	movs	r2, #3
 800f34e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f352:	e05d      	b.n	800f410 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fa08 	bl	800f76a <USBD_CtlSendStatus>
    break;
 800f35a:	e059      	b.n	800f410 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f35c:	4b2f      	ldr	r3, [pc, #188]	; (800f41c <USBD_SetConfig+0x148>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d112      	bne.n	800f38a <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2202      	movs	r2, #2
 800f368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f36c:	4b2b      	ldr	r3, [pc, #172]	; (800f41c <USBD_SetConfig+0x148>)
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	461a      	mov	r2, r3
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f376:	4b29      	ldr	r3, [pc, #164]	; (800f41c <USBD_SetConfig+0x148>)
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	4619      	mov	r1, r3
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7ff f97f 	bl	800e680 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 f9f1 	bl	800f76a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f388:	e042      	b.n	800f410 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 800f38a:	4b24      	ldr	r3, [pc, #144]	; (800f41c <USBD_SetConfig+0x148>)
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	461a      	mov	r2, r3
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	429a      	cmp	r2, r3
 800f396:	d02a      	beq.n	800f3ee <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7ff f96d 	bl	800e680 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f3a6:	4b1d      	ldr	r3, [pc, #116]	; (800f41c <USBD_SetConfig+0x148>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f3b0:	4b1a      	ldr	r3, [pc, #104]	; (800f41c <USBD_SetConfig+0x148>)
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	4619      	mov	r1, r3
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f7ff f946 	bl	800e648 <USBD_SetClassConfig>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f3c0:	7bfb      	ldrb	r3, [r7, #15]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00f      	beq.n	800f3e6 <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 800f3c6:	6839      	ldr	r1, [r7, #0]
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 f903 	bl	800f5d4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	b2db      	uxtb	r3, r3
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff f952 	bl	800e680 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2202      	movs	r2, #2
 800f3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f3e4:	e014      	b.n	800f410 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 f9bf 	bl	800f76a <USBD_CtlSendStatus>
    break;
 800f3ec:	e010      	b.n	800f410 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 f9bb 	bl	800f76a <USBD_CtlSendStatus>
    break;
 800f3f4:	e00c      	b.n	800f410 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 800f3f6:	6839      	ldr	r1, [r7, #0]
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f8eb 	bl	800f5d4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3fe:	4b07      	ldr	r3, [pc, #28]	; (800f41c <USBD_SetConfig+0x148>)
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	4619      	mov	r1, r3
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7ff f93b 	bl	800e680 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f40a:	2303      	movs	r3, #3
 800f40c:	73fb      	strb	r3, [r7, #15]
    break;
 800f40e:	bf00      	nop
  }

  return ret;
 800f410:	7bfb      	ldrb	r3, [r7, #15]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	2400071c 	.word	0x2400071c

0800f420 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	88db      	ldrh	r3, [r3, #6]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d004      	beq.n	800f43c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f432:	6839      	ldr	r1, [r7, #0]
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f8cd 	bl	800f5d4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f43a:	e023      	b.n	800f484 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f442:	b2db      	uxtb	r3, r3
 800f444:	2b02      	cmp	r3, #2
 800f446:	dc02      	bgt.n	800f44e <USBD_GetConfig+0x2e>
 800f448:	2b00      	cmp	r3, #0
 800f44a:	dc03      	bgt.n	800f454 <USBD_GetConfig+0x34>
 800f44c:	e015      	b.n	800f47a <USBD_GetConfig+0x5a>
 800f44e:	2b03      	cmp	r3, #3
 800f450:	d00b      	beq.n	800f46a <USBD_GetConfig+0x4a>
 800f452:	e012      	b.n	800f47a <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2200      	movs	r2, #0
 800f458:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	3308      	adds	r3, #8
 800f45e:	2201      	movs	r2, #1
 800f460:	4619      	mov	r1, r3
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 f927 	bl	800f6b6 <USBD_CtlSendData>
      break;
 800f468:	e00c      	b.n	800f484 <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	3304      	adds	r3, #4
 800f46e:	2201      	movs	r2, #1
 800f470:	4619      	mov	r1, r3
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 f91f 	bl	800f6b6 <USBD_CtlSendData>
      break;
 800f478:	e004      	b.n	800f484 <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 800f47a:	6839      	ldr	r1, [r7, #0]
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 f8a9 	bl	800f5d4 <USBD_CtlError>
      break;
 800f482:	bf00      	nop
}
 800f484:	bf00      	nop
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f49c:	b2db      	uxtb	r3, r3
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d81e      	bhi.n	800f4e2 <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	88db      	ldrh	r3, [r3, #6]
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d004      	beq.n	800f4b6 <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 800f4ac:	6839      	ldr	r1, [r7, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 f890 	bl	800f5d4 <USBD_CtlError>
      break;
 800f4b4:	e01a      	b.n	800f4ec <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d005      	beq.n	800f4d2 <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	f043 0202 	orr.w	r2, r3, #2
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	330c      	adds	r3, #12
 800f4d6:	2202      	movs	r2, #2
 800f4d8:	4619      	mov	r1, r3
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 f8eb 	bl	800f6b6 <USBD_CtlSendData>
    break;
 800f4e0:	e004      	b.n	800f4ec <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 f875 	bl	800f5d4 <USBD_CtlError>
    break;
 800f4ea:	bf00      	nop
  }
}
 800f4ec:	bf00      	nop
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	885b      	ldrh	r3, [r3, #2]
 800f502:	2b01      	cmp	r3, #1
 800f504:	d106      	bne.n	800f514 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2201      	movs	r2, #1
 800f50a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 f92b 	bl	800f76a <USBD_CtlSendStatus>
  }
}
 800f514:	bf00      	nop
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	3b01      	subs	r3, #1
 800f530:	2b02      	cmp	r3, #2
 800f532:	d80b      	bhi.n	800f54c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	885b      	ldrh	r3, [r3, #2]
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d10c      	bne.n	800f556 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f000 f910 	bl	800f76a <USBD_CtlSendStatus>
      }
      break;
 800f54a:	e004      	b.n	800f556 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f54c:	6839      	ldr	r1, [r7, #0]
 800f54e:	6878      	ldr	r0, [r7, #4]
 800f550:	f000 f840 	bl	800f5d4 <USBD_CtlError>
      break;
 800f554:	e000      	b.n	800f558 <USBD_ClrFeature+0x3c>
      break;
 800f556:	bf00      	nop
  }
}
 800f558:	bf00      	nop
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	781a      	ldrb	r2, [r3, #0]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	3301      	adds	r3, #1
 800f57a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	781a      	ldrb	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	3301      	adds	r3, #1
 800f588:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f7ff fabd 	bl	800eb0a <SWAPBYTE>
 800f590:	4603      	mov	r3, r0
 800f592:	461a      	mov	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	3301      	adds	r3, #1
 800f59c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f5a4:	68f8      	ldr	r0, [r7, #12]
 800f5a6:	f7ff fab0 	bl	800eb0a <SWAPBYTE>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f5be:	68f8      	ldr	r0, [r7, #12]
 800f5c0:	f7ff faa3 	bl	800eb0a <SWAPBYTE>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	80da      	strh	r2, [r3, #6]
}
 800f5cc:	bf00      	nop
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5de:	2180      	movs	r1, #128	; 0x80
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 fd4f 	bl	8010084 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 fd4b 	bl	8010084 <USBD_LL_StallEP>
}
 800f5ee:	bf00      	nop
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b086      	sub	sp, #24
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	60f8      	str	r0, [r7, #12]
 800f5fe:	60b9      	str	r1, [r7, #8]
 800f600:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f602:	2300      	movs	r3, #0
 800f604:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d036      	beq.n	800f67a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f610:	6938      	ldr	r0, [r7, #16]
 800f612:	f000 f836 	bl	800f682 <USBD_GetLen>
 800f616:	4603      	mov	r3, r0
 800f618:	3301      	adds	r3, #1
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	005b      	lsls	r3, r3, #1
 800f61e:	b29a      	uxth	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f624:	7dfb      	ldrb	r3, [r7, #23]
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	4413      	add	r3, r2
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	7812      	ldrb	r2, [r2, #0]
 800f62e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f630:	7dfb      	ldrb	r3, [r7, #23]
 800f632:	3301      	adds	r3, #1
 800f634:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f636:	7dfb      	ldrb	r3, [r7, #23]
 800f638:	68ba      	ldr	r2, [r7, #8]
 800f63a:	4413      	add	r3, r2
 800f63c:	2203      	movs	r2, #3
 800f63e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f640:	7dfb      	ldrb	r3, [r7, #23]
 800f642:	3301      	adds	r3, #1
 800f644:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f646:	e013      	b.n	800f670 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f648:	7dfb      	ldrb	r3, [r7, #23]
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	4413      	add	r3, r2
 800f64e:	693a      	ldr	r2, [r7, #16]
 800f650:	7812      	ldrb	r2, [r2, #0]
 800f652:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	3301      	adds	r3, #1
 800f658:	613b      	str	r3, [r7, #16]
    idx++;
 800f65a:	7dfb      	ldrb	r3, [r7, #23]
 800f65c:	3301      	adds	r3, #1
 800f65e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f660:	7dfb      	ldrb	r3, [r7, #23]
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	4413      	add	r3, r2
 800f666:	2200      	movs	r2, #0
 800f668:	701a      	strb	r2, [r3, #0]
    idx++;
 800f66a:	7dfb      	ldrb	r3, [r7, #23]
 800f66c:	3301      	adds	r3, #1
 800f66e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1e7      	bne.n	800f648 <USBD_GetString+0x52>
 800f678:	e000      	b.n	800f67c <USBD_GetString+0x86>
    return;
 800f67a:	bf00      	nop
  }
}
 800f67c:	3718      	adds	r7, #24
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f682:	b480      	push	{r7}
 800f684:	b085      	sub	sp, #20
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f68a:	2300      	movs	r3, #0
 800f68c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f692:	e005      	b.n	800f6a0 <USBD_GetLen+0x1e>
  {
    len++;
 800f694:	7bfb      	ldrb	r3, [r7, #15]
 800f696:	3301      	adds	r3, #1
 800f698:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	3301      	adds	r3, #1
 800f69e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1f5      	bne.n	800f694 <USBD_GetLen+0x12>
  }

  return len;
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3714      	adds	r7, #20
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b084      	sub	sp, #16
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	60f8      	str	r0, [r7, #12]
 800f6be:	60b9      	str	r1, [r7, #8]
 800f6c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2202      	movs	r2, #2
 800f6c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	68ba      	ldr	r2, [r7, #8]
 800f6da:	2100      	movs	r1, #0
 800f6dc:	68f8      	ldr	r0, [r7, #12]
 800f6de:	f000 fd5a 	bl	8010196 <USBD_LL_Transmit>

  return USBD_OK;
 800f6e2:	2300      	movs	r3, #0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	68ba      	ldr	r2, [r7, #8]
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f000 fd49 	bl	8010196 <USBD_LL_Transmit>

  return USBD_OK;
 800f704:	2300      	movs	r3, #0
}
 800f706:	4618      	mov	r0, r3
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b084      	sub	sp, #16
 800f712:	af00      	add	r7, sp, #0
 800f714:	60f8      	str	r0, [r7, #12]
 800f716:	60b9      	str	r1, [r7, #8]
 800f718:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2203      	movs	r2, #3
 800f71e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	2100      	movs	r1, #0
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f000 fd4d 	bl	80101d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	4618      	mov	r0, r3
 800f742:	3710      	adds	r7, #16
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	2100      	movs	r1, #0
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f000 fd3c 	bl	80101d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f760:	2300      	movs	r3, #0
}
 800f762:	4618      	mov	r0, r3
 800f764:	3710      	adds	r7, #16
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b082      	sub	sp, #8
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2204      	movs	r2, #4
 800f776:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f77a:	2300      	movs	r3, #0
 800f77c:	2200      	movs	r2, #0
 800f77e:	2100      	movs	r1, #0
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 fd08 	bl	8010196 <USBD_LL_Transmit>

  return USBD_OK;
 800f786:	2300      	movs	r3, #0
}
 800f788:	4618      	mov	r0, r3
 800f78a:	3708      	adds	r7, #8
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2205      	movs	r2, #5
 800f79c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 fd16 	bl	80101d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7ac:	2300      	movs	r3, #0
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
	...

0800f7b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	4913      	ldr	r1, [pc, #76]	; (800f80c <MX_USB_DEVICE_Init+0x54>)
 800f7c0:	4813      	ldr	r0, [pc, #76]	; (800f810 <MX_USB_DEVICE_Init+0x58>)
 800f7c2:	f7fe fed3 	bl	800e56c <USBD_Init>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d001      	beq.n	800f7d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f7cc:	f7f1 fd8c 	bl	80012e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f7d0:	4910      	ldr	r1, [pc, #64]	; (800f814 <MX_USB_DEVICE_Init+0x5c>)
 800f7d2:	480f      	ldr	r0, [pc, #60]	; (800f810 <MX_USB_DEVICE_Init+0x58>)
 800f7d4:	f7fe ff00 	bl	800e5d8 <USBD_RegisterClass>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d001      	beq.n	800f7e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f7de:	f7f1 fd83 	bl	80012e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f7e2:	490d      	ldr	r1, [pc, #52]	; (800f818 <MX_USB_DEVICE_Init+0x60>)
 800f7e4:	480a      	ldr	r0, [pc, #40]	; (800f810 <MX_USB_DEVICE_Init+0x58>)
 800f7e6:	f7fe fe25 	bl	800e434 <USBD_CDC_RegisterInterface>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f7f0:	f7f1 fd7a 	bl	80012e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f7f4:	4806      	ldr	r0, [pc, #24]	; (800f810 <MX_USB_DEVICE_Init+0x58>)
 800f7f6:	f7fe ff10 	bl	800e61a <USBD_Start>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d001      	beq.n	800f804 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f800:	f7f1 fd72 	bl	80012e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f804:	f7f7 fba2 	bl	8006f4c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f808:	bf00      	nop
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	24000134 	.word	0x24000134
 800f810:	24000720 	.word	0x24000720
 800f814:	2400001c 	.word	0x2400001c
 800f818:	24000120 	.word	0x24000120

0800f81c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f820:	2200      	movs	r2, #0
 800f822:	4905      	ldr	r1, [pc, #20]	; (800f838 <CDC_Init_FS+0x1c>)
 800f824:	4805      	ldr	r0, [pc, #20]	; (800f83c <CDC_Init_FS+0x20>)
 800f826:	f7fe fe1a 	bl	800e45e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f82a:	4905      	ldr	r1, [pc, #20]	; (800f840 <CDC_Init_FS+0x24>)
 800f82c:	4803      	ldr	r0, [pc, #12]	; (800f83c <CDC_Init_FS+0x20>)
 800f82e:	f7fe fe2f 	bl	800e490 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f832:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f834:	4618      	mov	r0, r3
 800f836:	bd80      	pop	{r7, pc}
 800f838:	240011f0 	.word	0x240011f0
 800f83c:	24000720 	.word	0x24000720
 800f840:	240009f0 	.word	0x240009f0

0800f844 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f844:	b480      	push	{r7}
 800f846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f848:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	4603      	mov	r3, r0
 800f85c:	6039      	str	r1, [r7, #0]
 800f85e:	71fb      	strb	r3, [r7, #7]
 800f860:	4613      	mov	r3, r2
 800f862:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f864:	79fb      	ldrb	r3, [r7, #7]
 800f866:	2b23      	cmp	r3, #35	; 0x23
 800f868:	f200 808c 	bhi.w	800f984 <CDC_Control_FS+0x130>
 800f86c:	a201      	add	r2, pc, #4	; (adr r2, 800f874 <CDC_Control_FS+0x20>)
 800f86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f872:	bf00      	nop
 800f874:	0800f985 	.word	0x0800f985
 800f878:	0800f985 	.word	0x0800f985
 800f87c:	0800f985 	.word	0x0800f985
 800f880:	0800f985 	.word	0x0800f985
 800f884:	0800f985 	.word	0x0800f985
 800f888:	0800f985 	.word	0x0800f985
 800f88c:	0800f985 	.word	0x0800f985
 800f890:	0800f985 	.word	0x0800f985
 800f894:	0800f985 	.word	0x0800f985
 800f898:	0800f985 	.word	0x0800f985
 800f89c:	0800f985 	.word	0x0800f985
 800f8a0:	0800f985 	.word	0x0800f985
 800f8a4:	0800f985 	.word	0x0800f985
 800f8a8:	0800f985 	.word	0x0800f985
 800f8ac:	0800f985 	.word	0x0800f985
 800f8b0:	0800f985 	.word	0x0800f985
 800f8b4:	0800f985 	.word	0x0800f985
 800f8b8:	0800f985 	.word	0x0800f985
 800f8bc:	0800f985 	.word	0x0800f985
 800f8c0:	0800f985 	.word	0x0800f985
 800f8c4:	0800f985 	.word	0x0800f985
 800f8c8:	0800f985 	.word	0x0800f985
 800f8cc:	0800f985 	.word	0x0800f985
 800f8d0:	0800f985 	.word	0x0800f985
 800f8d4:	0800f985 	.word	0x0800f985
 800f8d8:	0800f985 	.word	0x0800f985
 800f8dc:	0800f985 	.word	0x0800f985
 800f8e0:	0800f985 	.word	0x0800f985
 800f8e4:	0800f985 	.word	0x0800f985
 800f8e8:	0800f985 	.word	0x0800f985
 800f8ec:	0800f985 	.word	0x0800f985
 800f8f0:	0800f985 	.word	0x0800f985
 800f8f4:	0800f905 	.word	0x0800f905
 800f8f8:	0800f93f 	.word	0x0800f93f
 800f8fc:	0800f985 	.word	0x0800f985
 800f900:	0800f985 	.word	0x0800f985
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	781a      	ldrb	r2, [r3, #0]
 800f908:	4b22      	ldr	r3, [pc, #136]	; (800f994 <CDC_Control_FS+0x140>)
 800f90a:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	785a      	ldrb	r2, [r3, #1]
 800f910:	4b20      	ldr	r3, [pc, #128]	; (800f994 <CDC_Control_FS+0x140>)
 800f912:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	789a      	ldrb	r2, [r3, #2]
 800f918:	4b1e      	ldr	r3, [pc, #120]	; (800f994 <CDC_Control_FS+0x140>)
 800f91a:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	78da      	ldrb	r2, [r3, #3]
 800f920:	4b1c      	ldr	r3, [pc, #112]	; (800f994 <CDC_Control_FS+0x140>)
 800f922:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	791a      	ldrb	r2, [r3, #4]
 800f928:	4b1a      	ldr	r3, [pc, #104]	; (800f994 <CDC_Control_FS+0x140>)
 800f92a:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	795a      	ldrb	r2, [r3, #5]
 800f930:	4b18      	ldr	r3, [pc, #96]	; (800f994 <CDC_Control_FS+0x140>)
 800f932:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	799a      	ldrb	r2, [r3, #6]
 800f938:	4b16      	ldr	r3, [pc, #88]	; (800f994 <CDC_Control_FS+0x140>)
 800f93a:	719a      	strb	r2, [r3, #6]

    break;
 800f93c:	e023      	b.n	800f986 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 800f93e:	4b15      	ldr	r3, [pc, #84]	; (800f994 <CDC_Control_FS+0x140>)
 800f940:	781a      	ldrb	r2, [r3, #0]
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	3301      	adds	r3, #1
 800f94a:	4a12      	ldr	r2, [pc, #72]	; (800f994 <CDC_Control_FS+0x140>)
 800f94c:	7852      	ldrb	r2, [r2, #1]
 800f94e:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	3302      	adds	r3, #2
 800f954:	4a0f      	ldr	r2, [pc, #60]	; (800f994 <CDC_Control_FS+0x140>)
 800f956:	7892      	ldrb	r2, [r2, #2]
 800f958:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	3303      	adds	r3, #3
 800f95e:	4a0d      	ldr	r2, [pc, #52]	; (800f994 <CDC_Control_FS+0x140>)
 800f960:	78d2      	ldrb	r2, [r2, #3]
 800f962:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	3304      	adds	r3, #4
 800f968:	4a0a      	ldr	r2, [pc, #40]	; (800f994 <CDC_Control_FS+0x140>)
 800f96a:	7912      	ldrb	r2, [r2, #4]
 800f96c:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	3305      	adds	r3, #5
 800f972:	4a08      	ldr	r2, [pc, #32]	; (800f994 <CDC_Control_FS+0x140>)
 800f974:	7952      	ldrb	r2, [r2, #5]
 800f976:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	3306      	adds	r3, #6
 800f97c:	4a05      	ldr	r2, [pc, #20]	; (800f994 <CDC_Control_FS+0x140>)
 800f97e:	7992      	ldrb	r2, [r2, #6]
 800f980:	701a      	strb	r2, [r3, #0]

    break;
 800f982:	e000      	b.n	800f986 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f984:	bf00      	nop
  }

  return (USBD_OK);
 800f986:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f988:	4618      	mov	r0, r3
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	240019f0 	.word	0x240019f0

0800f998 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f9a2:	6879      	ldr	r1, [r7, #4]
 800f9a4:	4809      	ldr	r0, [pc, #36]	; (800f9cc <CDC_Receive_FS+0x34>)
 800f9a6:	f7fe fd73 	bl	800e490 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f9aa:	4808      	ldr	r0, [pc, #32]	; (800f9cc <CDC_Receive_FS+0x34>)
 800f9ac:	f7fe fdb4 	bl	800e518 <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 800f9b6:	89fb      	ldrh	r3, [r7, #14]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 f808 	bl	800f9d0 <CDC_Transmit_FS>
  return (USBD_OK);
 800f9c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	24000720 	.word	0x24000720

0800f9d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b084      	sub	sp, #16
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f9e0:	4b0d      	ldr	r3, [pc, #52]	; (800fa18 <CDC_Transmit_FS+0x48>)
 800f9e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	e00b      	b.n	800fa0e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f9f6:	887b      	ldrh	r3, [r7, #2]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	6879      	ldr	r1, [r7, #4]
 800f9fc:	4806      	ldr	r0, [pc, #24]	; (800fa18 <CDC_Transmit_FS+0x48>)
 800f9fe:	f7fe fd2e 	bl	800e45e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fa02:	4805      	ldr	r0, [pc, #20]	; (800fa18 <CDC_Transmit_FS+0x48>)
 800fa04:	f7fe fd58 	bl	800e4b8 <USBD_CDC_TransmitPacket>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	24000720 	.word	0x24000720

0800fa1c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b087      	sub	sp, #28
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	4613      	mov	r3, r2
 800fa28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fa2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	371c      	adds	r7, #28
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr
	...

0800fa40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	4603      	mov	r3, r0
 800fa48:	6039      	str	r1, [r7, #0]
 800fa4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	2212      	movs	r2, #18
 800fa50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fa52:	4b03      	ldr	r3, [pc, #12]	; (800fa60 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr
 800fa60:	24000150 	.word	0x24000150

0800fa64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	6039      	str	r1, [r7, #0]
 800fa6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	2204      	movs	r2, #4
 800fa74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fa76:	4b03      	ldr	r3, [pc, #12]	; (800fa84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr
 800fa84:	24000164 	.word	0x24000164

0800fa88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	6039      	str	r1, [r7, #0]
 800fa92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa94:	79fb      	ldrb	r3, [r7, #7]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d105      	bne.n	800faa6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fa9a:	683a      	ldr	r2, [r7, #0]
 800fa9c:	4907      	ldr	r1, [pc, #28]	; (800fabc <USBD_FS_ProductStrDescriptor+0x34>)
 800fa9e:	4808      	ldr	r0, [pc, #32]	; (800fac0 <USBD_FS_ProductStrDescriptor+0x38>)
 800faa0:	f7ff fda9 	bl	800f5f6 <USBD_GetString>
 800faa4:	e004      	b.n	800fab0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800faa6:	683a      	ldr	r2, [r7, #0]
 800faa8:	4904      	ldr	r1, [pc, #16]	; (800fabc <USBD_FS_ProductStrDescriptor+0x34>)
 800faaa:	4805      	ldr	r0, [pc, #20]	; (800fac0 <USBD_FS_ProductStrDescriptor+0x38>)
 800faac:	f7ff fda3 	bl	800f5f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fab0:	4b02      	ldr	r3, [pc, #8]	; (800fabc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3708      	adds	r7, #8
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	240019f8 	.word	0x240019f8
 800fac0:	08012c08 	.word	0x08012c08

0800fac4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	4603      	mov	r3, r0
 800facc:	6039      	str	r1, [r7, #0]
 800face:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fad0:	683a      	ldr	r2, [r7, #0]
 800fad2:	4904      	ldr	r1, [pc, #16]	; (800fae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fad4:	4804      	ldr	r0, [pc, #16]	; (800fae8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fad6:	f7ff fd8e 	bl	800f5f6 <USBD_GetString>
  return USBD_StrDesc;
 800fada:	4b02      	ldr	r3, [pc, #8]	; (800fae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	240019f8 	.word	0x240019f8
 800fae8:	08012c20 	.word	0x08012c20

0800faec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	4603      	mov	r3, r0
 800faf4:	6039      	str	r1, [r7, #0]
 800faf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	221a      	movs	r2, #26
 800fafc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fafe:	f000 f843 	bl	800fb88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb02:	4b02      	ldr	r3, [pc, #8]	; (800fb0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	24000168 	.word	0x24000168

0800fb10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	4603      	mov	r3, r0
 800fb18:	6039      	str	r1, [r7, #0]
 800fb1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb1c:	79fb      	ldrb	r3, [r7, #7]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d105      	bne.n	800fb2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb22:	683a      	ldr	r2, [r7, #0]
 800fb24:	4907      	ldr	r1, [pc, #28]	; (800fb44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb26:	4808      	ldr	r0, [pc, #32]	; (800fb48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb28:	f7ff fd65 	bl	800f5f6 <USBD_GetString>
 800fb2c:	e004      	b.n	800fb38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	4904      	ldr	r1, [pc, #16]	; (800fb44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb32:	4805      	ldr	r0, [pc, #20]	; (800fb48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb34:	f7ff fd5f 	bl	800f5f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb38:	4b02      	ldr	r3, [pc, #8]	; (800fb44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3708      	adds	r7, #8
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}
 800fb42:	bf00      	nop
 800fb44:	240019f8 	.word	0x240019f8
 800fb48:	08012c34 	.word	0x08012c34

0800fb4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	4603      	mov	r3, r0
 800fb54:	6039      	str	r1, [r7, #0]
 800fb56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fb58:	79fb      	ldrb	r3, [r7, #7]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d105      	bne.n	800fb6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb5e:	683a      	ldr	r2, [r7, #0]
 800fb60:	4907      	ldr	r1, [pc, #28]	; (800fb80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb62:	4808      	ldr	r0, [pc, #32]	; (800fb84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb64:	f7ff fd47 	bl	800f5f6 <USBD_GetString>
 800fb68:	e004      	b.n	800fb74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fb6a:	683a      	ldr	r2, [r7, #0]
 800fb6c:	4904      	ldr	r1, [pc, #16]	; (800fb80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fb6e:	4805      	ldr	r0, [pc, #20]	; (800fb84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fb70:	f7ff fd41 	bl	800f5f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb74:	4b02      	ldr	r3, [pc, #8]	; (800fb80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3708      	adds	r7, #8
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	240019f8 	.word	0x240019f8
 800fb84:	08012c40 	.word	0x08012c40

0800fb88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fb8e:	4b0f      	ldr	r3, [pc, #60]	; (800fbcc <Get_SerialNum+0x44>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fb94:	4b0e      	ldr	r3, [pc, #56]	; (800fbd0 <Get_SerialNum+0x48>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fb9a:	4b0e      	ldr	r3, [pc, #56]	; (800fbd4 <Get_SerialNum+0x4c>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4413      	add	r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d009      	beq.n	800fbc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fbae:	2208      	movs	r2, #8
 800fbb0:	4909      	ldr	r1, [pc, #36]	; (800fbd8 <Get_SerialNum+0x50>)
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	f000 f814 	bl	800fbe0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fbb8:	2204      	movs	r2, #4
 800fbba:	4908      	ldr	r1, [pc, #32]	; (800fbdc <Get_SerialNum+0x54>)
 800fbbc:	68b8      	ldr	r0, [r7, #8]
 800fbbe:	f000 f80f 	bl	800fbe0 <IntToUnicode>
  }
}
 800fbc2:	bf00      	nop
 800fbc4:	3710      	adds	r7, #16
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	1ff1e800 	.word	0x1ff1e800
 800fbd0:	1ff1e804 	.word	0x1ff1e804
 800fbd4:	1ff1e808 	.word	0x1ff1e808
 800fbd8:	2400016a 	.word	0x2400016a
 800fbdc:	2400017a 	.word	0x2400017a

0800fbe0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b087      	sub	sp, #28
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	4613      	mov	r3, r2
 800fbec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	75fb      	strb	r3, [r7, #23]
 800fbf6:	e027      	b.n	800fc48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	0f1b      	lsrs	r3, r3, #28
 800fbfc:	2b09      	cmp	r3, #9
 800fbfe:	d80b      	bhi.n	800fc18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	0f1b      	lsrs	r3, r3, #28
 800fc04:	b2da      	uxtb	r2, r3
 800fc06:	7dfb      	ldrb	r3, [r7, #23]
 800fc08:	005b      	lsls	r3, r3, #1
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	440b      	add	r3, r1
 800fc10:	3230      	adds	r2, #48	; 0x30
 800fc12:	b2d2      	uxtb	r2, r2
 800fc14:	701a      	strb	r2, [r3, #0]
 800fc16:	e00a      	b.n	800fc2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	0f1b      	lsrs	r3, r3, #28
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	7dfb      	ldrb	r3, [r7, #23]
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	4619      	mov	r1, r3
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	440b      	add	r3, r1
 800fc28:	3237      	adds	r2, #55	; 0x37
 800fc2a:	b2d2      	uxtb	r2, r2
 800fc2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	011b      	lsls	r3, r3, #4
 800fc32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc34:	7dfb      	ldrb	r3, [r7, #23]
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	3301      	adds	r3, #1
 800fc3a:	68ba      	ldr	r2, [r7, #8]
 800fc3c:	4413      	add	r3, r2
 800fc3e:	2200      	movs	r2, #0
 800fc40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fc42:	7dfb      	ldrb	r3, [r7, #23]
 800fc44:	3301      	adds	r3, #1
 800fc46:	75fb      	strb	r3, [r7, #23]
 800fc48:	7dfa      	ldrb	r2, [r7, #23]
 800fc4a:	79fb      	ldrb	r3, [r7, #7]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d3d3      	bcc.n	800fbf8 <IntToUnicode+0x18>
  }
}
 800fc50:	bf00      	nop
 800fc52:	bf00      	nop
 800fc54:	371c      	adds	r7, #28
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
	...

0800fc60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b0b8      	sub	sp, #224	; 0xe0
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	601a      	str	r2, [r3, #0]
 800fc70:	605a      	str	r2, [r3, #4]
 800fc72:	609a      	str	r2, [r3, #8]
 800fc74:	60da      	str	r2, [r3, #12]
 800fc76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800fc78:	f107 0310 	add.w	r3, r7, #16
 800fc7c:	22bc      	movs	r2, #188	; 0xbc
 800fc7e:	2100      	movs	r1, #0
 800fc80:	4618      	mov	r0, r3
 800fc82:	f000 fb43 	bl	801030c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4a2a      	ldr	r2, [pc, #168]	; (800fd34 <HAL_PCD_MspInit+0xd4>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d14c      	bne.n	800fd2a <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800fc90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fc94:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800fc96:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800fc9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800fc9e:	f107 0310 	add.w	r3, r7, #16
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7f8 f93e 	bl	8007f24 <HAL_RCCEx_PeriphCLKConfig>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d001      	beq.n	800fcb2 <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 800fcae:	f7f1 fb1b 	bl	80012e8 <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcb2:	4b21      	ldr	r3, [pc, #132]	; (800fd38 <HAL_PCD_MspInit+0xd8>)
 800fcb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcb8:	4a1f      	ldr	r2, [pc, #124]	; (800fd38 <HAL_PCD_MspInit+0xd8>)
 800fcba:	f043 0301 	orr.w	r3, r3, #1
 800fcbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fcc2:	4b1d      	ldr	r3, [pc, #116]	; (800fd38 <HAL_PCD_MspInit+0xd8>)
 800fcc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcc8:	f003 0301 	and.w	r3, r3, #1
 800fccc:	60fb      	str	r3, [r7, #12]
 800fcce:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fcd0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fcd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fcd8:	2302      	movs	r3, #2
 800fcda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcde:	2300      	movs	r3, #0
 800fce0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fce4:	2300      	movs	r3, #0
 800fce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fcea:	230a      	movs	r3, #10
 800fcec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fcf0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	4811      	ldr	r0, [pc, #68]	; (800fd3c <HAL_PCD_MspInit+0xdc>)
 800fcf8:	f7f4 fd4e 	bl	8004798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fcfc:	4b0e      	ldr	r3, [pc, #56]	; (800fd38 <HAL_PCD_MspInit+0xd8>)
 800fcfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fd02:	4a0d      	ldr	r2, [pc, #52]	; (800fd38 <HAL_PCD_MspInit+0xd8>)
 800fd04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd08:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fd0c:	4b0a      	ldr	r3, [pc, #40]	; (800fd38 <HAL_PCD_MspInit+0xd8>)
 800fd0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fd12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fd16:	60bb      	str	r3, [r7, #8]
 800fd18:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	2065      	movs	r0, #101	; 0x65
 800fd20:	f7f2 fa47 	bl	80021b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd24:	2065      	movs	r0, #101	; 0x65
 800fd26:	f7f2 fa5e 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fd2a:	bf00      	nop
 800fd2c:	37e0      	adds	r7, #224	; 0xe0
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	40080000 	.word	0x40080000
 800fd38:	58024400 	.word	0x58024400
 800fd3c:	58020000 	.word	0x58020000

0800fd40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b082      	sub	sp, #8
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fd54:	4619      	mov	r1, r3
 800fd56:	4610      	mov	r0, r2
 800fd58:	f7fe fcaa 	bl	800e6b0 <USBD_LL_SetupStage>
}
 800fd5c:	bf00      	nop
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fd76:	78fa      	ldrb	r2, [r7, #3]
 800fd78:	6879      	ldr	r1, [r7, #4]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	00db      	lsls	r3, r3, #3
 800fd7e:	1a9b      	subs	r3, r3, r2
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	440b      	add	r3, r1
 800fd84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	78fb      	ldrb	r3, [r7, #3]
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	f7fe fce4 	bl	800e75a <USBD_LL_DataOutStage>
}
 800fd92:	bf00      	nop
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b082      	sub	sp, #8
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
 800fda2:	460b      	mov	r3, r1
 800fda4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fdac:	78fa      	ldrb	r2, [r7, #3]
 800fdae:	6879      	ldr	r1, [r7, #4]
 800fdb0:	4613      	mov	r3, r2
 800fdb2:	00db      	lsls	r3, r3, #3
 800fdb4:	1a9b      	subs	r3, r3, r2
 800fdb6:	009b      	lsls	r3, r3, #2
 800fdb8:	440b      	add	r3, r1
 800fdba:	3348      	adds	r3, #72	; 0x48
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	78fb      	ldrb	r3, [r7, #3]
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	f7fe fd2f 	bl	800e824 <USBD_LL_DataInStage>
}
 800fdc6:	bf00      	nop
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b082      	sub	sp, #8
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fe fe38 	bl	800ea52 <USBD_LL_SOF>
}
 800fde2:	bf00      	nop
 800fde4:	3708      	adds	r7, #8
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b084      	sub	sp, #16
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d102      	bne.n	800fe04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	73fb      	strb	r3, [r7, #15]
 800fe02:	e008      	b.n	800fe16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d102      	bne.n	800fe12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	73fb      	strb	r3, [r7, #15]
 800fe10:	e001      	b.n	800fe16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fe12:	f7f1 fa69 	bl	80012e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe1c:	7bfa      	ldrb	r2, [r7, #15]
 800fe1e:	4611      	mov	r1, r2
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7fe fdd8 	bl	800e9d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fe fd91 	bl	800e954 <USBD_LL_Reset>
}
 800fe32:	bf00      	nop
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
	...

0800fe3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fe fdd3 	bl	800e9f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	687a      	ldr	r2, [r7, #4]
 800fe5c:	6812      	ldr	r2, [r2, #0]
 800fe5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe62:	f043 0301 	orr.w	r3, r3, #1
 800fe66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a1b      	ldr	r3, [r3, #32]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d005      	beq.n	800fe7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe70:	4b04      	ldr	r3, [pc, #16]	; (800fe84 <HAL_PCD_SuspendCallback+0x48>)
 800fe72:	691b      	ldr	r3, [r3, #16]
 800fe74:	4a03      	ldr	r2, [pc, #12]	; (800fe84 <HAL_PCD_SuspendCallback+0x48>)
 800fe76:	f043 0306 	orr.w	r3, r3, #6
 800fe7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fe7c:	bf00      	nop
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	e000ed00 	.word	0xe000ed00

0800fe88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fe fdc3 	bl	800ea22 <USBD_LL_Resume>
}
 800fe9c:	bf00      	nop
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	460b      	mov	r3, r1
 800feae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800feb6:	78fa      	ldrb	r2, [r7, #3]
 800feb8:	4611      	mov	r1, r2
 800feba:	4618      	mov	r0, r3
 800febc:	f7fe fdf1 	bl	800eaa2 <USBD_LL_IsoOUTIncomplete>
}
 800fec0:	bf00      	nop
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	460b      	mov	r3, r1
 800fed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800feda:	78fa      	ldrb	r2, [r7, #3]
 800fedc:	4611      	mov	r1, r2
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fdd2 	bl	800ea88 <USBD_LL_IsoINIncomplete>
}
 800fee4:	bf00      	nop
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe fdde 	bl	800eabc <USBD_LL_DevConnected>
}
 800ff00:	bf00      	nop
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fe fddb 	bl	800ead2 <USBD_LL_DevDisconnected>
}
 800ff1c:	bf00      	nop
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d13e      	bne.n	800ffb2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ff34:	4a21      	ldr	r2, [pc, #132]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4a1f      	ldr	r2, [pc, #124]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff44:	4b1d      	ldr	r3, [pc, #116]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff46:	4a1e      	ldr	r2, [pc, #120]	; (800ffc0 <USBD_LL_Init+0x9c>)
 800ff48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800ff4a:	4b1c      	ldr	r3, [pc, #112]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff4c:	2209      	movs	r2, #9
 800ff4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ff50:	4b1a      	ldr	r3, [pc, #104]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff52:	2202      	movs	r2, #2
 800ff54:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff56:	4b19      	ldr	r3, [pc, #100]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff58:	2200      	movs	r2, #0
 800ff5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ff5c:	4b17      	ldr	r3, [pc, #92]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff5e:	2202      	movs	r2, #2
 800ff60:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff62:	4b16      	ldr	r3, [pc, #88]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff64:	2200      	movs	r2, #0
 800ff66:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ff68:	4b14      	ldr	r3, [pc, #80]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ff6e:	4b13      	ldr	r3, [pc, #76]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff70:	2200      	movs	r2, #0
 800ff72:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ff74:	4b11      	ldr	r3, [pc, #68]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff76:	2200      	movs	r2, #0
 800ff78:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff7a:	4b10      	ldr	r3, [pc, #64]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ff80:	4b0e      	ldr	r3, [pc, #56]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff82:	2200      	movs	r2, #0
 800ff84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ff86:	480d      	ldr	r0, [pc, #52]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff88:	f7f5 fdaa 	bl	8005ae0 <HAL_PCD_Init>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d001      	beq.n	800ff96 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ff92:	f7f1 f9a9 	bl	80012e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ff96:	2180      	movs	r1, #128	; 0x80
 800ff98:	4808      	ldr	r0, [pc, #32]	; (800ffbc <USBD_LL_Init+0x98>)
 800ff9a:	f7f6 ff3c 	bl	8006e16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ff9e:	2240      	movs	r2, #64	; 0x40
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	4806      	ldr	r0, [pc, #24]	; (800ffbc <USBD_LL_Init+0x98>)
 800ffa4:	f7f6 fef0 	bl	8006d88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ffa8:	2280      	movs	r2, #128	; 0x80
 800ffaa:	2101      	movs	r1, #1
 800ffac:	4803      	ldr	r0, [pc, #12]	; (800ffbc <USBD_LL_Init+0x98>)
 800ffae:	f7f6 feeb 	bl	8006d88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	24001bf8 	.word	0x24001bf8
 800ffc0:	40080000 	.word	0x40080000

0800ffc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7f5 fea4 	bl	8005d28 <HAL_PCD_Start>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffe4:	7bfb      	ldrb	r3, [r7, #15]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f000 f92a 	bl	8010240 <USBD_Get_USB_Status>
 800ffec:	4603      	mov	r3, r0
 800ffee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fff0:	7bbb      	ldrb	r3, [r7, #14]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b084      	sub	sp, #16
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
 8010002:	4608      	mov	r0, r1
 8010004:	4611      	mov	r1, r2
 8010006:	461a      	mov	r2, r3
 8010008:	4603      	mov	r3, r0
 801000a:	70fb      	strb	r3, [r7, #3]
 801000c:	460b      	mov	r3, r1
 801000e:	70bb      	strb	r3, [r7, #2]
 8010010:	4613      	mov	r3, r2
 8010012:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010014:	2300      	movs	r3, #0
 8010016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010022:	78bb      	ldrb	r3, [r7, #2]
 8010024:	883a      	ldrh	r2, [r7, #0]
 8010026:	78f9      	ldrb	r1, [r7, #3]
 8010028:	f7f6 fab5 	bl	8006596 <HAL_PCD_EP_Open>
 801002c:	4603      	mov	r3, r0
 801002e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010030:	7bfb      	ldrb	r3, [r7, #15]
 8010032:	4618      	mov	r0, r3
 8010034:	f000 f904 	bl	8010240 <USBD_Get_USB_Status>
 8010038:	4603      	mov	r3, r0
 801003a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801003c:	7bbb      	ldrb	r3, [r7, #14]
}
 801003e:	4618      	mov	r0, r3
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b084      	sub	sp, #16
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
 801004e:	460b      	mov	r3, r1
 8010050:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010052:	2300      	movs	r3, #0
 8010054:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010056:	2300      	movs	r3, #0
 8010058:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010060:	78fa      	ldrb	r2, [r7, #3]
 8010062:	4611      	mov	r1, r2
 8010064:	4618      	mov	r0, r3
 8010066:	f7f6 fafe 	bl	8006666 <HAL_PCD_EP_Close>
 801006a:	4603      	mov	r3, r0
 801006c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801006e:	7bfb      	ldrb	r3, [r7, #15]
 8010070:	4618      	mov	r0, r3
 8010072:	f000 f8e5 	bl	8010240 <USBD_Get_USB_Status>
 8010076:	4603      	mov	r3, r0
 8010078:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801007a:	7bbb      	ldrb	r3, [r7, #14]
}
 801007c:	4618      	mov	r0, r3
 801007e:	3710      	adds	r7, #16
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	460b      	mov	r3, r1
 801008e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010090:	2300      	movs	r3, #0
 8010092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010094:	2300      	movs	r3, #0
 8010096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801009e:	78fa      	ldrb	r2, [r7, #3]
 80100a0:	4611      	mov	r1, r2
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7f6 fbd6 	bl	8006854 <HAL_PCD_EP_SetStall>
 80100a8:	4603      	mov	r3, r0
 80100aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100ac:	7bfb      	ldrb	r3, [r7, #15]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 f8c6 	bl	8010240 <USBD_Get_USB_Status>
 80100b4:	4603      	mov	r3, r0
 80100b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3710      	adds	r7, #16
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b084      	sub	sp, #16
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
 80100ca:	460b      	mov	r3, r1
 80100cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ce:	2300      	movs	r3, #0
 80100d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100d2:	2300      	movs	r3, #0
 80100d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100dc:	78fa      	ldrb	r2, [r7, #3]
 80100de:	4611      	mov	r1, r2
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7f6 fc1b 	bl	800691c <HAL_PCD_EP_ClrStall>
 80100e6:	4603      	mov	r3, r0
 80100e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100ea:	7bfb      	ldrb	r3, [r7, #15]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 f8a7 	bl	8010240 <USBD_Get_USB_Status>
 80100f2:	4603      	mov	r3, r0
 80100f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3710      	adds	r7, #16
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010100:	b480      	push	{r7}
 8010102:	b085      	sub	sp, #20
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	460b      	mov	r3, r1
 801010a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010112:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010118:	2b00      	cmp	r3, #0
 801011a:	da0b      	bge.n	8010134 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801011c:	78fb      	ldrb	r3, [r7, #3]
 801011e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010122:	68f9      	ldr	r1, [r7, #12]
 8010124:	4613      	mov	r3, r2
 8010126:	00db      	lsls	r3, r3, #3
 8010128:	1a9b      	subs	r3, r3, r2
 801012a:	009b      	lsls	r3, r3, #2
 801012c:	440b      	add	r3, r1
 801012e:	333e      	adds	r3, #62	; 0x3e
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	e00b      	b.n	801014c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010134:	78fb      	ldrb	r3, [r7, #3]
 8010136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801013a:	68f9      	ldr	r1, [r7, #12]
 801013c:	4613      	mov	r3, r2
 801013e:	00db      	lsls	r3, r3, #3
 8010140:	1a9b      	subs	r3, r3, r2
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	440b      	add	r3, r1
 8010146:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801014a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801014c:	4618      	mov	r0, r3
 801014e:	3714      	adds	r7, #20
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	460b      	mov	r3, r1
 8010162:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010164:	2300      	movs	r3, #0
 8010166:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010168:	2300      	movs	r3, #0
 801016a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010172:	78fa      	ldrb	r2, [r7, #3]
 8010174:	4611      	mov	r1, r2
 8010176:	4618      	mov	r0, r3
 8010178:	f7f6 f9e8 	bl	800654c <HAL_PCD_SetAddress>
 801017c:	4603      	mov	r3, r0
 801017e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010180:	7bfb      	ldrb	r3, [r7, #15]
 8010182:	4618      	mov	r0, r3
 8010184:	f000 f85c 	bl	8010240 <USBD_Get_USB_Status>
 8010188:	4603      	mov	r3, r0
 801018a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801018c:	7bbb      	ldrb	r3, [r7, #14]
}
 801018e:	4618      	mov	r0, r3
 8010190:	3710      	adds	r7, #16
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010196:	b580      	push	{r7, lr}
 8010198:	b086      	sub	sp, #24
 801019a:	af00      	add	r7, sp, #0
 801019c:	60f8      	str	r0, [r7, #12]
 801019e:	607a      	str	r2, [r7, #4]
 80101a0:	603b      	str	r3, [r7, #0]
 80101a2:	460b      	mov	r3, r1
 80101a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101a6:	2300      	movs	r3, #0
 80101a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101aa:	2300      	movs	r3, #0
 80101ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80101b4:	7af9      	ldrb	r1, [r7, #11]
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	f7f6 fb01 	bl	80067c0 <HAL_PCD_EP_Transmit>
 80101be:	4603      	mov	r3, r0
 80101c0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101c2:	7dfb      	ldrb	r3, [r7, #23]
 80101c4:	4618      	mov	r0, r3
 80101c6:	f000 f83b 	bl	8010240 <USBD_Get_USB_Status>
 80101ca:	4603      	mov	r3, r0
 80101cc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3718      	adds	r7, #24
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b086      	sub	sp, #24
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	607a      	str	r2, [r7, #4]
 80101e2:	603b      	str	r3, [r7, #0]
 80101e4:	460b      	mov	r3, r1
 80101e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101e8:	2300      	movs	r3, #0
 80101ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101ec:	2300      	movs	r3, #0
 80101ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80101f6:	7af9      	ldrb	r1, [r7, #11]
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	f7f6 fa7d 	bl	80066fa <HAL_PCD_EP_Receive>
 8010200:	4603      	mov	r3, r0
 8010202:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010204:	7dfb      	ldrb	r3, [r7, #23]
 8010206:	4618      	mov	r0, r3
 8010208:	f000 f81a 	bl	8010240 <USBD_Get_USB_Status>
 801020c:	4603      	mov	r3, r0
 801020e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010210:	7dbb      	ldrb	r3, [r7, #22]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3718      	adds	r7, #24
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801021a:	b580      	push	{r7, lr}
 801021c:	b082      	sub	sp, #8
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
 8010222:	460b      	mov	r3, r1
 8010224:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801022c:	78fa      	ldrb	r2, [r7, #3]
 801022e:	4611      	mov	r1, r2
 8010230:	4618      	mov	r0, r3
 8010232:	f7f6 faad 	bl	8006790 <HAL_PCD_EP_GetRxCount>
 8010236:	4603      	mov	r3, r0
}
 8010238:	4618      	mov	r0, r3
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010240:	b480      	push	{r7}
 8010242:	b085      	sub	sp, #20
 8010244:	af00      	add	r7, sp, #0
 8010246:	4603      	mov	r3, r0
 8010248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801024e:	79fb      	ldrb	r3, [r7, #7]
 8010250:	2b03      	cmp	r3, #3
 8010252:	d817      	bhi.n	8010284 <USBD_Get_USB_Status+0x44>
 8010254:	a201      	add	r2, pc, #4	; (adr r2, 801025c <USBD_Get_USB_Status+0x1c>)
 8010256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801025a:	bf00      	nop
 801025c:	0801026d 	.word	0x0801026d
 8010260:	08010273 	.word	0x08010273
 8010264:	08010279 	.word	0x08010279
 8010268:	0801027f 	.word	0x0801027f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801026c:	2300      	movs	r3, #0
 801026e:	73fb      	strb	r3, [r7, #15]
    break;
 8010270:	e00b      	b.n	801028a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010272:	2303      	movs	r3, #3
 8010274:	73fb      	strb	r3, [r7, #15]
    break;
 8010276:	e008      	b.n	801028a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010278:	2301      	movs	r3, #1
 801027a:	73fb      	strb	r3, [r7, #15]
    break;
 801027c:	e005      	b.n	801028a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801027e:	2303      	movs	r3, #3
 8010280:	73fb      	strb	r3, [r7, #15]
    break;
 8010282:	e002      	b.n	801028a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010284:	2303      	movs	r3, #3
 8010286:	73fb      	strb	r3, [r7, #15]
    break;
 8010288:	bf00      	nop
  }
  return usb_status;
 801028a:	7bfb      	ldrb	r3, [r7, #15]
}
 801028c:	4618      	mov	r0, r3
 801028e:	3714      	adds	r7, #20
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <__errno>:
 8010298:	4b01      	ldr	r3, [pc, #4]	; (80102a0 <__errno+0x8>)
 801029a:	6818      	ldr	r0, [r3, #0]
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop
 80102a0:	24000184 	.word	0x24000184

080102a4 <__libc_init_array>:
 80102a4:	b570      	push	{r4, r5, r6, lr}
 80102a6:	4d0d      	ldr	r5, [pc, #52]	; (80102dc <__libc_init_array+0x38>)
 80102a8:	4c0d      	ldr	r4, [pc, #52]	; (80102e0 <__libc_init_array+0x3c>)
 80102aa:	1b64      	subs	r4, r4, r5
 80102ac:	10a4      	asrs	r4, r4, #2
 80102ae:	2600      	movs	r6, #0
 80102b0:	42a6      	cmp	r6, r4
 80102b2:	d109      	bne.n	80102c8 <__libc_init_array+0x24>
 80102b4:	4d0b      	ldr	r5, [pc, #44]	; (80102e4 <__libc_init_array+0x40>)
 80102b6:	4c0c      	ldr	r4, [pc, #48]	; (80102e8 <__libc_init_array+0x44>)
 80102b8:	f002 fc98 	bl	8012bec <_init>
 80102bc:	1b64      	subs	r4, r4, r5
 80102be:	10a4      	asrs	r4, r4, #2
 80102c0:	2600      	movs	r6, #0
 80102c2:	42a6      	cmp	r6, r4
 80102c4:	d105      	bne.n	80102d2 <__libc_init_array+0x2e>
 80102c6:	bd70      	pop	{r4, r5, r6, pc}
 80102c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80102cc:	4798      	blx	r3
 80102ce:	3601      	adds	r6, #1
 80102d0:	e7ee      	b.n	80102b0 <__libc_init_array+0xc>
 80102d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102d6:	4798      	blx	r3
 80102d8:	3601      	adds	r6, #1
 80102da:	e7f2      	b.n	80102c2 <__libc_init_array+0x1e>
 80102dc:	08013074 	.word	0x08013074
 80102e0:	08013074 	.word	0x08013074
 80102e4:	08013074 	.word	0x08013074
 80102e8:	08013078 	.word	0x08013078

080102ec <malloc>:
 80102ec:	4b02      	ldr	r3, [pc, #8]	; (80102f8 <malloc+0xc>)
 80102ee:	4601      	mov	r1, r0
 80102f0:	6818      	ldr	r0, [r3, #0]
 80102f2:	f000 b87f 	b.w	80103f4 <_malloc_r>
 80102f6:	bf00      	nop
 80102f8:	24000184 	.word	0x24000184

080102fc <free>:
 80102fc:	4b02      	ldr	r3, [pc, #8]	; (8010308 <free+0xc>)
 80102fe:	4601      	mov	r1, r0
 8010300:	6818      	ldr	r0, [r3, #0]
 8010302:	f000 b80b 	b.w	801031c <_free_r>
 8010306:	bf00      	nop
 8010308:	24000184 	.word	0x24000184

0801030c <memset>:
 801030c:	4402      	add	r2, r0
 801030e:	4603      	mov	r3, r0
 8010310:	4293      	cmp	r3, r2
 8010312:	d100      	bne.n	8010316 <memset+0xa>
 8010314:	4770      	bx	lr
 8010316:	f803 1b01 	strb.w	r1, [r3], #1
 801031a:	e7f9      	b.n	8010310 <memset+0x4>

0801031c <_free_r>:
 801031c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801031e:	2900      	cmp	r1, #0
 8010320:	d044      	beq.n	80103ac <_free_r+0x90>
 8010322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010326:	9001      	str	r0, [sp, #4]
 8010328:	2b00      	cmp	r3, #0
 801032a:	f1a1 0404 	sub.w	r4, r1, #4
 801032e:	bfb8      	it	lt
 8010330:	18e4      	addlt	r4, r4, r3
 8010332:	f001 fb35 	bl	80119a0 <__malloc_lock>
 8010336:	4a1e      	ldr	r2, [pc, #120]	; (80103b0 <_free_r+0x94>)
 8010338:	9801      	ldr	r0, [sp, #4]
 801033a:	6813      	ldr	r3, [r2, #0]
 801033c:	b933      	cbnz	r3, 801034c <_free_r+0x30>
 801033e:	6063      	str	r3, [r4, #4]
 8010340:	6014      	str	r4, [r2, #0]
 8010342:	b003      	add	sp, #12
 8010344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010348:	f001 bb30 	b.w	80119ac <__malloc_unlock>
 801034c:	42a3      	cmp	r3, r4
 801034e:	d908      	bls.n	8010362 <_free_r+0x46>
 8010350:	6825      	ldr	r5, [r4, #0]
 8010352:	1961      	adds	r1, r4, r5
 8010354:	428b      	cmp	r3, r1
 8010356:	bf01      	itttt	eq
 8010358:	6819      	ldreq	r1, [r3, #0]
 801035a:	685b      	ldreq	r3, [r3, #4]
 801035c:	1949      	addeq	r1, r1, r5
 801035e:	6021      	streq	r1, [r4, #0]
 8010360:	e7ed      	b.n	801033e <_free_r+0x22>
 8010362:	461a      	mov	r2, r3
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	b10b      	cbz	r3, 801036c <_free_r+0x50>
 8010368:	42a3      	cmp	r3, r4
 801036a:	d9fa      	bls.n	8010362 <_free_r+0x46>
 801036c:	6811      	ldr	r1, [r2, #0]
 801036e:	1855      	adds	r5, r2, r1
 8010370:	42a5      	cmp	r5, r4
 8010372:	d10b      	bne.n	801038c <_free_r+0x70>
 8010374:	6824      	ldr	r4, [r4, #0]
 8010376:	4421      	add	r1, r4
 8010378:	1854      	adds	r4, r2, r1
 801037a:	42a3      	cmp	r3, r4
 801037c:	6011      	str	r1, [r2, #0]
 801037e:	d1e0      	bne.n	8010342 <_free_r+0x26>
 8010380:	681c      	ldr	r4, [r3, #0]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	6053      	str	r3, [r2, #4]
 8010386:	4421      	add	r1, r4
 8010388:	6011      	str	r1, [r2, #0]
 801038a:	e7da      	b.n	8010342 <_free_r+0x26>
 801038c:	d902      	bls.n	8010394 <_free_r+0x78>
 801038e:	230c      	movs	r3, #12
 8010390:	6003      	str	r3, [r0, #0]
 8010392:	e7d6      	b.n	8010342 <_free_r+0x26>
 8010394:	6825      	ldr	r5, [r4, #0]
 8010396:	1961      	adds	r1, r4, r5
 8010398:	428b      	cmp	r3, r1
 801039a:	bf04      	itt	eq
 801039c:	6819      	ldreq	r1, [r3, #0]
 801039e:	685b      	ldreq	r3, [r3, #4]
 80103a0:	6063      	str	r3, [r4, #4]
 80103a2:	bf04      	itt	eq
 80103a4:	1949      	addeq	r1, r1, r5
 80103a6:	6021      	streq	r1, [r4, #0]
 80103a8:	6054      	str	r4, [r2, #4]
 80103aa:	e7ca      	b.n	8010342 <_free_r+0x26>
 80103ac:	b003      	add	sp, #12
 80103ae:	bd30      	pop	{r4, r5, pc}
 80103b0:	24002000 	.word	0x24002000

080103b4 <sbrk_aligned>:
 80103b4:	b570      	push	{r4, r5, r6, lr}
 80103b6:	4e0e      	ldr	r6, [pc, #56]	; (80103f0 <sbrk_aligned+0x3c>)
 80103b8:	460c      	mov	r4, r1
 80103ba:	6831      	ldr	r1, [r6, #0]
 80103bc:	4605      	mov	r5, r0
 80103be:	b911      	cbnz	r1, 80103c6 <sbrk_aligned+0x12>
 80103c0:	f000 fcd0 	bl	8010d64 <_sbrk_r>
 80103c4:	6030      	str	r0, [r6, #0]
 80103c6:	4621      	mov	r1, r4
 80103c8:	4628      	mov	r0, r5
 80103ca:	f000 fccb 	bl	8010d64 <_sbrk_r>
 80103ce:	1c43      	adds	r3, r0, #1
 80103d0:	d00a      	beq.n	80103e8 <sbrk_aligned+0x34>
 80103d2:	1cc4      	adds	r4, r0, #3
 80103d4:	f024 0403 	bic.w	r4, r4, #3
 80103d8:	42a0      	cmp	r0, r4
 80103da:	d007      	beq.n	80103ec <sbrk_aligned+0x38>
 80103dc:	1a21      	subs	r1, r4, r0
 80103de:	4628      	mov	r0, r5
 80103e0:	f000 fcc0 	bl	8010d64 <_sbrk_r>
 80103e4:	3001      	adds	r0, #1
 80103e6:	d101      	bne.n	80103ec <sbrk_aligned+0x38>
 80103e8:	f04f 34ff 	mov.w	r4, #4294967295
 80103ec:	4620      	mov	r0, r4
 80103ee:	bd70      	pop	{r4, r5, r6, pc}
 80103f0:	24002004 	.word	0x24002004

080103f4 <_malloc_r>:
 80103f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f8:	1ccd      	adds	r5, r1, #3
 80103fa:	f025 0503 	bic.w	r5, r5, #3
 80103fe:	3508      	adds	r5, #8
 8010400:	2d0c      	cmp	r5, #12
 8010402:	bf38      	it	cc
 8010404:	250c      	movcc	r5, #12
 8010406:	2d00      	cmp	r5, #0
 8010408:	4607      	mov	r7, r0
 801040a:	db01      	blt.n	8010410 <_malloc_r+0x1c>
 801040c:	42a9      	cmp	r1, r5
 801040e:	d905      	bls.n	801041c <_malloc_r+0x28>
 8010410:	230c      	movs	r3, #12
 8010412:	603b      	str	r3, [r7, #0]
 8010414:	2600      	movs	r6, #0
 8010416:	4630      	mov	r0, r6
 8010418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801041c:	4e2e      	ldr	r6, [pc, #184]	; (80104d8 <_malloc_r+0xe4>)
 801041e:	f001 fabf 	bl	80119a0 <__malloc_lock>
 8010422:	6833      	ldr	r3, [r6, #0]
 8010424:	461c      	mov	r4, r3
 8010426:	bb34      	cbnz	r4, 8010476 <_malloc_r+0x82>
 8010428:	4629      	mov	r1, r5
 801042a:	4638      	mov	r0, r7
 801042c:	f7ff ffc2 	bl	80103b4 <sbrk_aligned>
 8010430:	1c43      	adds	r3, r0, #1
 8010432:	4604      	mov	r4, r0
 8010434:	d14d      	bne.n	80104d2 <_malloc_r+0xde>
 8010436:	6834      	ldr	r4, [r6, #0]
 8010438:	4626      	mov	r6, r4
 801043a:	2e00      	cmp	r6, #0
 801043c:	d140      	bne.n	80104c0 <_malloc_r+0xcc>
 801043e:	6823      	ldr	r3, [r4, #0]
 8010440:	4631      	mov	r1, r6
 8010442:	4638      	mov	r0, r7
 8010444:	eb04 0803 	add.w	r8, r4, r3
 8010448:	f000 fc8c 	bl	8010d64 <_sbrk_r>
 801044c:	4580      	cmp	r8, r0
 801044e:	d13a      	bne.n	80104c6 <_malloc_r+0xd2>
 8010450:	6821      	ldr	r1, [r4, #0]
 8010452:	3503      	adds	r5, #3
 8010454:	1a6d      	subs	r5, r5, r1
 8010456:	f025 0503 	bic.w	r5, r5, #3
 801045a:	3508      	adds	r5, #8
 801045c:	2d0c      	cmp	r5, #12
 801045e:	bf38      	it	cc
 8010460:	250c      	movcc	r5, #12
 8010462:	4629      	mov	r1, r5
 8010464:	4638      	mov	r0, r7
 8010466:	f7ff ffa5 	bl	80103b4 <sbrk_aligned>
 801046a:	3001      	adds	r0, #1
 801046c:	d02b      	beq.n	80104c6 <_malloc_r+0xd2>
 801046e:	6823      	ldr	r3, [r4, #0]
 8010470:	442b      	add	r3, r5
 8010472:	6023      	str	r3, [r4, #0]
 8010474:	e00e      	b.n	8010494 <_malloc_r+0xa0>
 8010476:	6822      	ldr	r2, [r4, #0]
 8010478:	1b52      	subs	r2, r2, r5
 801047a:	d41e      	bmi.n	80104ba <_malloc_r+0xc6>
 801047c:	2a0b      	cmp	r2, #11
 801047e:	d916      	bls.n	80104ae <_malloc_r+0xba>
 8010480:	1961      	adds	r1, r4, r5
 8010482:	42a3      	cmp	r3, r4
 8010484:	6025      	str	r5, [r4, #0]
 8010486:	bf18      	it	ne
 8010488:	6059      	strne	r1, [r3, #4]
 801048a:	6863      	ldr	r3, [r4, #4]
 801048c:	bf08      	it	eq
 801048e:	6031      	streq	r1, [r6, #0]
 8010490:	5162      	str	r2, [r4, r5]
 8010492:	604b      	str	r3, [r1, #4]
 8010494:	4638      	mov	r0, r7
 8010496:	f104 060b 	add.w	r6, r4, #11
 801049a:	f001 fa87 	bl	80119ac <__malloc_unlock>
 801049e:	f026 0607 	bic.w	r6, r6, #7
 80104a2:	1d23      	adds	r3, r4, #4
 80104a4:	1af2      	subs	r2, r6, r3
 80104a6:	d0b6      	beq.n	8010416 <_malloc_r+0x22>
 80104a8:	1b9b      	subs	r3, r3, r6
 80104aa:	50a3      	str	r3, [r4, r2]
 80104ac:	e7b3      	b.n	8010416 <_malloc_r+0x22>
 80104ae:	6862      	ldr	r2, [r4, #4]
 80104b0:	42a3      	cmp	r3, r4
 80104b2:	bf0c      	ite	eq
 80104b4:	6032      	streq	r2, [r6, #0]
 80104b6:	605a      	strne	r2, [r3, #4]
 80104b8:	e7ec      	b.n	8010494 <_malloc_r+0xa0>
 80104ba:	4623      	mov	r3, r4
 80104bc:	6864      	ldr	r4, [r4, #4]
 80104be:	e7b2      	b.n	8010426 <_malloc_r+0x32>
 80104c0:	4634      	mov	r4, r6
 80104c2:	6876      	ldr	r6, [r6, #4]
 80104c4:	e7b9      	b.n	801043a <_malloc_r+0x46>
 80104c6:	230c      	movs	r3, #12
 80104c8:	603b      	str	r3, [r7, #0]
 80104ca:	4638      	mov	r0, r7
 80104cc:	f001 fa6e 	bl	80119ac <__malloc_unlock>
 80104d0:	e7a1      	b.n	8010416 <_malloc_r+0x22>
 80104d2:	6025      	str	r5, [r4, #0]
 80104d4:	e7de      	b.n	8010494 <_malloc_r+0xa0>
 80104d6:	bf00      	nop
 80104d8:	24002000 	.word	0x24002000

080104dc <__cvt>:
 80104dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104de:	ed2d 8b02 	vpush	{d8}
 80104e2:	eeb0 8b40 	vmov.f64	d8, d0
 80104e6:	b085      	sub	sp, #20
 80104e8:	4617      	mov	r7, r2
 80104ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80104ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80104ee:	ee18 2a90 	vmov	r2, s17
 80104f2:	f025 0520 	bic.w	r5, r5, #32
 80104f6:	2a00      	cmp	r2, #0
 80104f8:	bfb6      	itet	lt
 80104fa:	222d      	movlt	r2, #45	; 0x2d
 80104fc:	2200      	movge	r2, #0
 80104fe:	eeb1 8b40 	vneglt.f64	d8, d0
 8010502:	2d46      	cmp	r5, #70	; 0x46
 8010504:	460c      	mov	r4, r1
 8010506:	701a      	strb	r2, [r3, #0]
 8010508:	d004      	beq.n	8010514 <__cvt+0x38>
 801050a:	2d45      	cmp	r5, #69	; 0x45
 801050c:	d100      	bne.n	8010510 <__cvt+0x34>
 801050e:	3401      	adds	r4, #1
 8010510:	2102      	movs	r1, #2
 8010512:	e000      	b.n	8010516 <__cvt+0x3a>
 8010514:	2103      	movs	r1, #3
 8010516:	ab03      	add	r3, sp, #12
 8010518:	9301      	str	r3, [sp, #4]
 801051a:	ab02      	add	r3, sp, #8
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	4622      	mov	r2, r4
 8010520:	4633      	mov	r3, r6
 8010522:	eeb0 0b48 	vmov.f64	d0, d8
 8010526:	f000 fcbb 	bl	8010ea0 <_dtoa_r>
 801052a:	2d47      	cmp	r5, #71	; 0x47
 801052c:	d101      	bne.n	8010532 <__cvt+0x56>
 801052e:	07fb      	lsls	r3, r7, #31
 8010530:	d51a      	bpl.n	8010568 <__cvt+0x8c>
 8010532:	2d46      	cmp	r5, #70	; 0x46
 8010534:	eb00 0204 	add.w	r2, r0, r4
 8010538:	d10c      	bne.n	8010554 <__cvt+0x78>
 801053a:	7803      	ldrb	r3, [r0, #0]
 801053c:	2b30      	cmp	r3, #48	; 0x30
 801053e:	d107      	bne.n	8010550 <__cvt+0x74>
 8010540:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010548:	bf1c      	itt	ne
 801054a:	f1c4 0401 	rsbne	r4, r4, #1
 801054e:	6034      	strne	r4, [r6, #0]
 8010550:	6833      	ldr	r3, [r6, #0]
 8010552:	441a      	add	r2, r3
 8010554:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055c:	bf08      	it	eq
 801055e:	9203      	streq	r2, [sp, #12]
 8010560:	2130      	movs	r1, #48	; 0x30
 8010562:	9b03      	ldr	r3, [sp, #12]
 8010564:	4293      	cmp	r3, r2
 8010566:	d307      	bcc.n	8010578 <__cvt+0x9c>
 8010568:	9b03      	ldr	r3, [sp, #12]
 801056a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801056c:	1a1b      	subs	r3, r3, r0
 801056e:	6013      	str	r3, [r2, #0]
 8010570:	b005      	add	sp, #20
 8010572:	ecbd 8b02 	vpop	{d8}
 8010576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010578:	1c5c      	adds	r4, r3, #1
 801057a:	9403      	str	r4, [sp, #12]
 801057c:	7019      	strb	r1, [r3, #0]
 801057e:	e7f0      	b.n	8010562 <__cvt+0x86>

08010580 <__exponent>:
 8010580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010582:	4603      	mov	r3, r0
 8010584:	2900      	cmp	r1, #0
 8010586:	bfb8      	it	lt
 8010588:	4249      	neglt	r1, r1
 801058a:	f803 2b02 	strb.w	r2, [r3], #2
 801058e:	bfb4      	ite	lt
 8010590:	222d      	movlt	r2, #45	; 0x2d
 8010592:	222b      	movge	r2, #43	; 0x2b
 8010594:	2909      	cmp	r1, #9
 8010596:	7042      	strb	r2, [r0, #1]
 8010598:	dd2a      	ble.n	80105f0 <__exponent+0x70>
 801059a:	f10d 0407 	add.w	r4, sp, #7
 801059e:	46a4      	mov	ip, r4
 80105a0:	270a      	movs	r7, #10
 80105a2:	46a6      	mov	lr, r4
 80105a4:	460a      	mov	r2, r1
 80105a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80105aa:	fb07 1516 	mls	r5, r7, r6, r1
 80105ae:	3530      	adds	r5, #48	; 0x30
 80105b0:	2a63      	cmp	r2, #99	; 0x63
 80105b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80105b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80105ba:	4631      	mov	r1, r6
 80105bc:	dcf1      	bgt.n	80105a2 <__exponent+0x22>
 80105be:	3130      	adds	r1, #48	; 0x30
 80105c0:	f1ae 0502 	sub.w	r5, lr, #2
 80105c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80105c8:	1c44      	adds	r4, r0, #1
 80105ca:	4629      	mov	r1, r5
 80105cc:	4561      	cmp	r1, ip
 80105ce:	d30a      	bcc.n	80105e6 <__exponent+0x66>
 80105d0:	f10d 0209 	add.w	r2, sp, #9
 80105d4:	eba2 020e 	sub.w	r2, r2, lr
 80105d8:	4565      	cmp	r5, ip
 80105da:	bf88      	it	hi
 80105dc:	2200      	movhi	r2, #0
 80105de:	4413      	add	r3, r2
 80105e0:	1a18      	subs	r0, r3, r0
 80105e2:	b003      	add	sp, #12
 80105e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80105ee:	e7ed      	b.n	80105cc <__exponent+0x4c>
 80105f0:	2330      	movs	r3, #48	; 0x30
 80105f2:	3130      	adds	r1, #48	; 0x30
 80105f4:	7083      	strb	r3, [r0, #2]
 80105f6:	70c1      	strb	r1, [r0, #3]
 80105f8:	1d03      	adds	r3, r0, #4
 80105fa:	e7f1      	b.n	80105e0 <__exponent+0x60>
 80105fc:	0000      	movs	r0, r0
	...

08010600 <_printf_float>:
 8010600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010604:	b08b      	sub	sp, #44	; 0x2c
 8010606:	460c      	mov	r4, r1
 8010608:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801060c:	4616      	mov	r6, r2
 801060e:	461f      	mov	r7, r3
 8010610:	4605      	mov	r5, r0
 8010612:	f001 f9b3 	bl	801197c <_localeconv_r>
 8010616:	f8d0 b000 	ldr.w	fp, [r0]
 801061a:	4658      	mov	r0, fp
 801061c:	f7ef fe60 	bl	80002e0 <strlen>
 8010620:	2300      	movs	r3, #0
 8010622:	9308      	str	r3, [sp, #32]
 8010624:	f8d8 3000 	ldr.w	r3, [r8]
 8010628:	f894 9018 	ldrb.w	r9, [r4, #24]
 801062c:	6822      	ldr	r2, [r4, #0]
 801062e:	3307      	adds	r3, #7
 8010630:	f023 0307 	bic.w	r3, r3, #7
 8010634:	f103 0108 	add.w	r1, r3, #8
 8010638:	f8c8 1000 	str.w	r1, [r8]
 801063c:	4682      	mov	sl, r0
 801063e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010642:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010646:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80108a8 <_printf_float+0x2a8>
 801064a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801064e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010652:	eeb4 6b47 	vcmp.f64	d6, d7
 8010656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801065a:	dd24      	ble.n	80106a6 <_printf_float+0xa6>
 801065c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010664:	d502      	bpl.n	801066c <_printf_float+0x6c>
 8010666:	232d      	movs	r3, #45	; 0x2d
 8010668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801066c:	4b90      	ldr	r3, [pc, #576]	; (80108b0 <_printf_float+0x2b0>)
 801066e:	4891      	ldr	r0, [pc, #580]	; (80108b4 <_printf_float+0x2b4>)
 8010670:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010674:	bf94      	ite	ls
 8010676:	4698      	movls	r8, r3
 8010678:	4680      	movhi	r8, r0
 801067a:	2303      	movs	r3, #3
 801067c:	6123      	str	r3, [r4, #16]
 801067e:	f022 0204 	bic.w	r2, r2, #4
 8010682:	2300      	movs	r3, #0
 8010684:	6022      	str	r2, [r4, #0]
 8010686:	9304      	str	r3, [sp, #16]
 8010688:	9700      	str	r7, [sp, #0]
 801068a:	4633      	mov	r3, r6
 801068c:	aa09      	add	r2, sp, #36	; 0x24
 801068e:	4621      	mov	r1, r4
 8010690:	4628      	mov	r0, r5
 8010692:	f000 f9d3 	bl	8010a3c <_printf_common>
 8010696:	3001      	adds	r0, #1
 8010698:	f040 808a 	bne.w	80107b0 <_printf_float+0x1b0>
 801069c:	f04f 30ff 	mov.w	r0, #4294967295
 80106a0:	b00b      	add	sp, #44	; 0x2c
 80106a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a6:	eeb4 0b40 	vcmp.f64	d0, d0
 80106aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ae:	d709      	bvc.n	80106c4 <_printf_float+0xc4>
 80106b0:	ee10 3a90 	vmov	r3, s1
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	bfbc      	itt	lt
 80106b8:	232d      	movlt	r3, #45	; 0x2d
 80106ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80106be:	487e      	ldr	r0, [pc, #504]	; (80108b8 <_printf_float+0x2b8>)
 80106c0:	4b7e      	ldr	r3, [pc, #504]	; (80108bc <_printf_float+0x2bc>)
 80106c2:	e7d5      	b.n	8010670 <_printf_float+0x70>
 80106c4:	6863      	ldr	r3, [r4, #4]
 80106c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80106ca:	9104      	str	r1, [sp, #16]
 80106cc:	1c59      	adds	r1, r3, #1
 80106ce:	d13c      	bne.n	801074a <_printf_float+0x14a>
 80106d0:	2306      	movs	r3, #6
 80106d2:	6063      	str	r3, [r4, #4]
 80106d4:	2300      	movs	r3, #0
 80106d6:	9303      	str	r3, [sp, #12]
 80106d8:	ab08      	add	r3, sp, #32
 80106da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80106de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80106e2:	ab07      	add	r3, sp, #28
 80106e4:	6861      	ldr	r1, [r4, #4]
 80106e6:	9300      	str	r3, [sp, #0]
 80106e8:	6022      	str	r2, [r4, #0]
 80106ea:	f10d 031b 	add.w	r3, sp, #27
 80106ee:	4628      	mov	r0, r5
 80106f0:	f7ff fef4 	bl	80104dc <__cvt>
 80106f4:	9b04      	ldr	r3, [sp, #16]
 80106f6:	9907      	ldr	r1, [sp, #28]
 80106f8:	2b47      	cmp	r3, #71	; 0x47
 80106fa:	4680      	mov	r8, r0
 80106fc:	d108      	bne.n	8010710 <_printf_float+0x110>
 80106fe:	1cc8      	adds	r0, r1, #3
 8010700:	db02      	blt.n	8010708 <_printf_float+0x108>
 8010702:	6863      	ldr	r3, [r4, #4]
 8010704:	4299      	cmp	r1, r3
 8010706:	dd41      	ble.n	801078c <_printf_float+0x18c>
 8010708:	f1a9 0902 	sub.w	r9, r9, #2
 801070c:	fa5f f989 	uxtb.w	r9, r9
 8010710:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010714:	d820      	bhi.n	8010758 <_printf_float+0x158>
 8010716:	3901      	subs	r1, #1
 8010718:	464a      	mov	r2, r9
 801071a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801071e:	9107      	str	r1, [sp, #28]
 8010720:	f7ff ff2e 	bl	8010580 <__exponent>
 8010724:	9a08      	ldr	r2, [sp, #32]
 8010726:	9004      	str	r0, [sp, #16]
 8010728:	1813      	adds	r3, r2, r0
 801072a:	2a01      	cmp	r2, #1
 801072c:	6123      	str	r3, [r4, #16]
 801072e:	dc02      	bgt.n	8010736 <_printf_float+0x136>
 8010730:	6822      	ldr	r2, [r4, #0]
 8010732:	07d2      	lsls	r2, r2, #31
 8010734:	d501      	bpl.n	801073a <_printf_float+0x13a>
 8010736:	3301      	adds	r3, #1
 8010738:	6123      	str	r3, [r4, #16]
 801073a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d0a2      	beq.n	8010688 <_printf_float+0x88>
 8010742:	232d      	movs	r3, #45	; 0x2d
 8010744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010748:	e79e      	b.n	8010688 <_printf_float+0x88>
 801074a:	9904      	ldr	r1, [sp, #16]
 801074c:	2947      	cmp	r1, #71	; 0x47
 801074e:	d1c1      	bne.n	80106d4 <_printf_float+0xd4>
 8010750:	2b00      	cmp	r3, #0
 8010752:	d1bf      	bne.n	80106d4 <_printf_float+0xd4>
 8010754:	2301      	movs	r3, #1
 8010756:	e7bc      	b.n	80106d2 <_printf_float+0xd2>
 8010758:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801075c:	d118      	bne.n	8010790 <_printf_float+0x190>
 801075e:	2900      	cmp	r1, #0
 8010760:	6863      	ldr	r3, [r4, #4]
 8010762:	dd0b      	ble.n	801077c <_printf_float+0x17c>
 8010764:	6121      	str	r1, [r4, #16]
 8010766:	b913      	cbnz	r3, 801076e <_printf_float+0x16e>
 8010768:	6822      	ldr	r2, [r4, #0]
 801076a:	07d0      	lsls	r0, r2, #31
 801076c:	d502      	bpl.n	8010774 <_printf_float+0x174>
 801076e:	3301      	adds	r3, #1
 8010770:	440b      	add	r3, r1
 8010772:	6123      	str	r3, [r4, #16]
 8010774:	2300      	movs	r3, #0
 8010776:	65a1      	str	r1, [r4, #88]	; 0x58
 8010778:	9304      	str	r3, [sp, #16]
 801077a:	e7de      	b.n	801073a <_printf_float+0x13a>
 801077c:	b913      	cbnz	r3, 8010784 <_printf_float+0x184>
 801077e:	6822      	ldr	r2, [r4, #0]
 8010780:	07d2      	lsls	r2, r2, #31
 8010782:	d501      	bpl.n	8010788 <_printf_float+0x188>
 8010784:	3302      	adds	r3, #2
 8010786:	e7f4      	b.n	8010772 <_printf_float+0x172>
 8010788:	2301      	movs	r3, #1
 801078a:	e7f2      	b.n	8010772 <_printf_float+0x172>
 801078c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010790:	9b08      	ldr	r3, [sp, #32]
 8010792:	4299      	cmp	r1, r3
 8010794:	db05      	blt.n	80107a2 <_printf_float+0x1a2>
 8010796:	6823      	ldr	r3, [r4, #0]
 8010798:	6121      	str	r1, [r4, #16]
 801079a:	07d8      	lsls	r0, r3, #31
 801079c:	d5ea      	bpl.n	8010774 <_printf_float+0x174>
 801079e:	1c4b      	adds	r3, r1, #1
 80107a0:	e7e7      	b.n	8010772 <_printf_float+0x172>
 80107a2:	2900      	cmp	r1, #0
 80107a4:	bfd4      	ite	le
 80107a6:	f1c1 0202 	rsble	r2, r1, #2
 80107aa:	2201      	movgt	r2, #1
 80107ac:	4413      	add	r3, r2
 80107ae:	e7e0      	b.n	8010772 <_printf_float+0x172>
 80107b0:	6823      	ldr	r3, [r4, #0]
 80107b2:	055a      	lsls	r2, r3, #21
 80107b4:	d407      	bmi.n	80107c6 <_printf_float+0x1c6>
 80107b6:	6923      	ldr	r3, [r4, #16]
 80107b8:	4642      	mov	r2, r8
 80107ba:	4631      	mov	r1, r6
 80107bc:	4628      	mov	r0, r5
 80107be:	47b8      	blx	r7
 80107c0:	3001      	adds	r0, #1
 80107c2:	d12a      	bne.n	801081a <_printf_float+0x21a>
 80107c4:	e76a      	b.n	801069c <_printf_float+0x9c>
 80107c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80107ca:	f240 80e2 	bls.w	8010992 <_printf_float+0x392>
 80107ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80107d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107da:	d133      	bne.n	8010844 <_printf_float+0x244>
 80107dc:	4a38      	ldr	r2, [pc, #224]	; (80108c0 <_printf_float+0x2c0>)
 80107de:	2301      	movs	r3, #1
 80107e0:	4631      	mov	r1, r6
 80107e2:	4628      	mov	r0, r5
 80107e4:	47b8      	blx	r7
 80107e6:	3001      	adds	r0, #1
 80107e8:	f43f af58 	beq.w	801069c <_printf_float+0x9c>
 80107ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	db02      	blt.n	80107fa <_printf_float+0x1fa>
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	07d8      	lsls	r0, r3, #31
 80107f8:	d50f      	bpl.n	801081a <_printf_float+0x21a>
 80107fa:	4653      	mov	r3, sl
 80107fc:	465a      	mov	r2, fp
 80107fe:	4631      	mov	r1, r6
 8010800:	4628      	mov	r0, r5
 8010802:	47b8      	blx	r7
 8010804:	3001      	adds	r0, #1
 8010806:	f43f af49 	beq.w	801069c <_printf_float+0x9c>
 801080a:	f04f 0800 	mov.w	r8, #0
 801080e:	f104 091a 	add.w	r9, r4, #26
 8010812:	9b08      	ldr	r3, [sp, #32]
 8010814:	3b01      	subs	r3, #1
 8010816:	4543      	cmp	r3, r8
 8010818:	dc09      	bgt.n	801082e <_printf_float+0x22e>
 801081a:	6823      	ldr	r3, [r4, #0]
 801081c:	079b      	lsls	r3, r3, #30
 801081e:	f100 8108 	bmi.w	8010a32 <_printf_float+0x432>
 8010822:	68e0      	ldr	r0, [r4, #12]
 8010824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010826:	4298      	cmp	r0, r3
 8010828:	bfb8      	it	lt
 801082a:	4618      	movlt	r0, r3
 801082c:	e738      	b.n	80106a0 <_printf_float+0xa0>
 801082e:	2301      	movs	r3, #1
 8010830:	464a      	mov	r2, r9
 8010832:	4631      	mov	r1, r6
 8010834:	4628      	mov	r0, r5
 8010836:	47b8      	blx	r7
 8010838:	3001      	adds	r0, #1
 801083a:	f43f af2f 	beq.w	801069c <_printf_float+0x9c>
 801083e:	f108 0801 	add.w	r8, r8, #1
 8010842:	e7e6      	b.n	8010812 <_printf_float+0x212>
 8010844:	9b07      	ldr	r3, [sp, #28]
 8010846:	2b00      	cmp	r3, #0
 8010848:	dc3c      	bgt.n	80108c4 <_printf_float+0x2c4>
 801084a:	4a1d      	ldr	r2, [pc, #116]	; (80108c0 <_printf_float+0x2c0>)
 801084c:	2301      	movs	r3, #1
 801084e:	4631      	mov	r1, r6
 8010850:	4628      	mov	r0, r5
 8010852:	47b8      	blx	r7
 8010854:	3001      	adds	r0, #1
 8010856:	f43f af21 	beq.w	801069c <_printf_float+0x9c>
 801085a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801085e:	4313      	orrs	r3, r2
 8010860:	d102      	bne.n	8010868 <_printf_float+0x268>
 8010862:	6823      	ldr	r3, [r4, #0]
 8010864:	07d9      	lsls	r1, r3, #31
 8010866:	d5d8      	bpl.n	801081a <_printf_float+0x21a>
 8010868:	4653      	mov	r3, sl
 801086a:	465a      	mov	r2, fp
 801086c:	4631      	mov	r1, r6
 801086e:	4628      	mov	r0, r5
 8010870:	47b8      	blx	r7
 8010872:	3001      	adds	r0, #1
 8010874:	f43f af12 	beq.w	801069c <_printf_float+0x9c>
 8010878:	f04f 0900 	mov.w	r9, #0
 801087c:	f104 0a1a 	add.w	sl, r4, #26
 8010880:	9b07      	ldr	r3, [sp, #28]
 8010882:	425b      	negs	r3, r3
 8010884:	454b      	cmp	r3, r9
 8010886:	dc01      	bgt.n	801088c <_printf_float+0x28c>
 8010888:	9b08      	ldr	r3, [sp, #32]
 801088a:	e795      	b.n	80107b8 <_printf_float+0x1b8>
 801088c:	2301      	movs	r3, #1
 801088e:	4652      	mov	r2, sl
 8010890:	4631      	mov	r1, r6
 8010892:	4628      	mov	r0, r5
 8010894:	47b8      	blx	r7
 8010896:	3001      	adds	r0, #1
 8010898:	f43f af00 	beq.w	801069c <_printf_float+0x9c>
 801089c:	f109 0901 	add.w	r9, r9, #1
 80108a0:	e7ee      	b.n	8010880 <_printf_float+0x280>
 80108a2:	bf00      	nop
 80108a4:	f3af 8000 	nop.w
 80108a8:	ffffffff 	.word	0xffffffff
 80108ac:	7fefffff 	.word	0x7fefffff
 80108b0:	08012c94 	.word	0x08012c94
 80108b4:	08012c98 	.word	0x08012c98
 80108b8:	08012ca0 	.word	0x08012ca0
 80108bc:	08012c9c 	.word	0x08012c9c
 80108c0:	08012ca4 	.word	0x08012ca4
 80108c4:	9a08      	ldr	r2, [sp, #32]
 80108c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80108c8:	429a      	cmp	r2, r3
 80108ca:	bfa8      	it	ge
 80108cc:	461a      	movge	r2, r3
 80108ce:	2a00      	cmp	r2, #0
 80108d0:	4691      	mov	r9, r2
 80108d2:	dc38      	bgt.n	8010946 <_printf_float+0x346>
 80108d4:	2300      	movs	r3, #0
 80108d6:	9305      	str	r3, [sp, #20]
 80108d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80108dc:	f104 021a 	add.w	r2, r4, #26
 80108e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80108e2:	9905      	ldr	r1, [sp, #20]
 80108e4:	9304      	str	r3, [sp, #16]
 80108e6:	eba3 0309 	sub.w	r3, r3, r9
 80108ea:	428b      	cmp	r3, r1
 80108ec:	dc33      	bgt.n	8010956 <_printf_float+0x356>
 80108ee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	db3c      	blt.n	8010970 <_printf_float+0x370>
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	07da      	lsls	r2, r3, #31
 80108fa:	d439      	bmi.n	8010970 <_printf_float+0x370>
 80108fc:	9b08      	ldr	r3, [sp, #32]
 80108fe:	9a04      	ldr	r2, [sp, #16]
 8010900:	9907      	ldr	r1, [sp, #28]
 8010902:	1a9a      	subs	r2, r3, r2
 8010904:	eba3 0901 	sub.w	r9, r3, r1
 8010908:	4591      	cmp	r9, r2
 801090a:	bfa8      	it	ge
 801090c:	4691      	movge	r9, r2
 801090e:	f1b9 0f00 	cmp.w	r9, #0
 8010912:	dc35      	bgt.n	8010980 <_printf_float+0x380>
 8010914:	f04f 0800 	mov.w	r8, #0
 8010918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801091c:	f104 0a1a 	add.w	sl, r4, #26
 8010920:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010924:	1a9b      	subs	r3, r3, r2
 8010926:	eba3 0309 	sub.w	r3, r3, r9
 801092a:	4543      	cmp	r3, r8
 801092c:	f77f af75 	ble.w	801081a <_printf_float+0x21a>
 8010930:	2301      	movs	r3, #1
 8010932:	4652      	mov	r2, sl
 8010934:	4631      	mov	r1, r6
 8010936:	4628      	mov	r0, r5
 8010938:	47b8      	blx	r7
 801093a:	3001      	adds	r0, #1
 801093c:	f43f aeae 	beq.w	801069c <_printf_float+0x9c>
 8010940:	f108 0801 	add.w	r8, r8, #1
 8010944:	e7ec      	b.n	8010920 <_printf_float+0x320>
 8010946:	4613      	mov	r3, r2
 8010948:	4631      	mov	r1, r6
 801094a:	4642      	mov	r2, r8
 801094c:	4628      	mov	r0, r5
 801094e:	47b8      	blx	r7
 8010950:	3001      	adds	r0, #1
 8010952:	d1bf      	bne.n	80108d4 <_printf_float+0x2d4>
 8010954:	e6a2      	b.n	801069c <_printf_float+0x9c>
 8010956:	2301      	movs	r3, #1
 8010958:	4631      	mov	r1, r6
 801095a:	4628      	mov	r0, r5
 801095c:	9204      	str	r2, [sp, #16]
 801095e:	47b8      	blx	r7
 8010960:	3001      	adds	r0, #1
 8010962:	f43f ae9b 	beq.w	801069c <_printf_float+0x9c>
 8010966:	9b05      	ldr	r3, [sp, #20]
 8010968:	9a04      	ldr	r2, [sp, #16]
 801096a:	3301      	adds	r3, #1
 801096c:	9305      	str	r3, [sp, #20]
 801096e:	e7b7      	b.n	80108e0 <_printf_float+0x2e0>
 8010970:	4653      	mov	r3, sl
 8010972:	465a      	mov	r2, fp
 8010974:	4631      	mov	r1, r6
 8010976:	4628      	mov	r0, r5
 8010978:	47b8      	blx	r7
 801097a:	3001      	adds	r0, #1
 801097c:	d1be      	bne.n	80108fc <_printf_float+0x2fc>
 801097e:	e68d      	b.n	801069c <_printf_float+0x9c>
 8010980:	9a04      	ldr	r2, [sp, #16]
 8010982:	464b      	mov	r3, r9
 8010984:	4442      	add	r2, r8
 8010986:	4631      	mov	r1, r6
 8010988:	4628      	mov	r0, r5
 801098a:	47b8      	blx	r7
 801098c:	3001      	adds	r0, #1
 801098e:	d1c1      	bne.n	8010914 <_printf_float+0x314>
 8010990:	e684      	b.n	801069c <_printf_float+0x9c>
 8010992:	9a08      	ldr	r2, [sp, #32]
 8010994:	2a01      	cmp	r2, #1
 8010996:	dc01      	bgt.n	801099c <_printf_float+0x39c>
 8010998:	07db      	lsls	r3, r3, #31
 801099a:	d537      	bpl.n	8010a0c <_printf_float+0x40c>
 801099c:	2301      	movs	r3, #1
 801099e:	4642      	mov	r2, r8
 80109a0:	4631      	mov	r1, r6
 80109a2:	4628      	mov	r0, r5
 80109a4:	47b8      	blx	r7
 80109a6:	3001      	adds	r0, #1
 80109a8:	f43f ae78 	beq.w	801069c <_printf_float+0x9c>
 80109ac:	4653      	mov	r3, sl
 80109ae:	465a      	mov	r2, fp
 80109b0:	4631      	mov	r1, r6
 80109b2:	4628      	mov	r0, r5
 80109b4:	47b8      	blx	r7
 80109b6:	3001      	adds	r0, #1
 80109b8:	f43f ae70 	beq.w	801069c <_printf_float+0x9c>
 80109bc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80109c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c8:	d01b      	beq.n	8010a02 <_printf_float+0x402>
 80109ca:	9b08      	ldr	r3, [sp, #32]
 80109cc:	f108 0201 	add.w	r2, r8, #1
 80109d0:	3b01      	subs	r3, #1
 80109d2:	4631      	mov	r1, r6
 80109d4:	4628      	mov	r0, r5
 80109d6:	47b8      	blx	r7
 80109d8:	3001      	adds	r0, #1
 80109da:	d10e      	bne.n	80109fa <_printf_float+0x3fa>
 80109dc:	e65e      	b.n	801069c <_printf_float+0x9c>
 80109de:	2301      	movs	r3, #1
 80109e0:	464a      	mov	r2, r9
 80109e2:	4631      	mov	r1, r6
 80109e4:	4628      	mov	r0, r5
 80109e6:	47b8      	blx	r7
 80109e8:	3001      	adds	r0, #1
 80109ea:	f43f ae57 	beq.w	801069c <_printf_float+0x9c>
 80109ee:	f108 0801 	add.w	r8, r8, #1
 80109f2:	9b08      	ldr	r3, [sp, #32]
 80109f4:	3b01      	subs	r3, #1
 80109f6:	4543      	cmp	r3, r8
 80109f8:	dcf1      	bgt.n	80109de <_printf_float+0x3de>
 80109fa:	9b04      	ldr	r3, [sp, #16]
 80109fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010a00:	e6db      	b.n	80107ba <_printf_float+0x1ba>
 8010a02:	f04f 0800 	mov.w	r8, #0
 8010a06:	f104 091a 	add.w	r9, r4, #26
 8010a0a:	e7f2      	b.n	80109f2 <_printf_float+0x3f2>
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	4642      	mov	r2, r8
 8010a10:	e7df      	b.n	80109d2 <_printf_float+0x3d2>
 8010a12:	2301      	movs	r3, #1
 8010a14:	464a      	mov	r2, r9
 8010a16:	4631      	mov	r1, r6
 8010a18:	4628      	mov	r0, r5
 8010a1a:	47b8      	blx	r7
 8010a1c:	3001      	adds	r0, #1
 8010a1e:	f43f ae3d 	beq.w	801069c <_printf_float+0x9c>
 8010a22:	f108 0801 	add.w	r8, r8, #1
 8010a26:	68e3      	ldr	r3, [r4, #12]
 8010a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a2a:	1a5b      	subs	r3, r3, r1
 8010a2c:	4543      	cmp	r3, r8
 8010a2e:	dcf0      	bgt.n	8010a12 <_printf_float+0x412>
 8010a30:	e6f7      	b.n	8010822 <_printf_float+0x222>
 8010a32:	f04f 0800 	mov.w	r8, #0
 8010a36:	f104 0919 	add.w	r9, r4, #25
 8010a3a:	e7f4      	b.n	8010a26 <_printf_float+0x426>

08010a3c <_printf_common>:
 8010a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a40:	4616      	mov	r6, r2
 8010a42:	4699      	mov	r9, r3
 8010a44:	688a      	ldr	r2, [r1, #8]
 8010a46:	690b      	ldr	r3, [r1, #16]
 8010a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	bfb8      	it	lt
 8010a50:	4613      	movlt	r3, r2
 8010a52:	6033      	str	r3, [r6, #0]
 8010a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a58:	4607      	mov	r7, r0
 8010a5a:	460c      	mov	r4, r1
 8010a5c:	b10a      	cbz	r2, 8010a62 <_printf_common+0x26>
 8010a5e:	3301      	adds	r3, #1
 8010a60:	6033      	str	r3, [r6, #0]
 8010a62:	6823      	ldr	r3, [r4, #0]
 8010a64:	0699      	lsls	r1, r3, #26
 8010a66:	bf42      	ittt	mi
 8010a68:	6833      	ldrmi	r3, [r6, #0]
 8010a6a:	3302      	addmi	r3, #2
 8010a6c:	6033      	strmi	r3, [r6, #0]
 8010a6e:	6825      	ldr	r5, [r4, #0]
 8010a70:	f015 0506 	ands.w	r5, r5, #6
 8010a74:	d106      	bne.n	8010a84 <_printf_common+0x48>
 8010a76:	f104 0a19 	add.w	sl, r4, #25
 8010a7a:	68e3      	ldr	r3, [r4, #12]
 8010a7c:	6832      	ldr	r2, [r6, #0]
 8010a7e:	1a9b      	subs	r3, r3, r2
 8010a80:	42ab      	cmp	r3, r5
 8010a82:	dc26      	bgt.n	8010ad2 <_printf_common+0x96>
 8010a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010a88:	1e13      	subs	r3, r2, #0
 8010a8a:	6822      	ldr	r2, [r4, #0]
 8010a8c:	bf18      	it	ne
 8010a8e:	2301      	movne	r3, #1
 8010a90:	0692      	lsls	r2, r2, #26
 8010a92:	d42b      	bmi.n	8010aec <_printf_common+0xb0>
 8010a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a98:	4649      	mov	r1, r9
 8010a9a:	4638      	mov	r0, r7
 8010a9c:	47c0      	blx	r8
 8010a9e:	3001      	adds	r0, #1
 8010aa0:	d01e      	beq.n	8010ae0 <_printf_common+0xa4>
 8010aa2:	6823      	ldr	r3, [r4, #0]
 8010aa4:	68e5      	ldr	r5, [r4, #12]
 8010aa6:	6832      	ldr	r2, [r6, #0]
 8010aa8:	f003 0306 	and.w	r3, r3, #6
 8010aac:	2b04      	cmp	r3, #4
 8010aae:	bf08      	it	eq
 8010ab0:	1aad      	subeq	r5, r5, r2
 8010ab2:	68a3      	ldr	r3, [r4, #8]
 8010ab4:	6922      	ldr	r2, [r4, #16]
 8010ab6:	bf0c      	ite	eq
 8010ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010abc:	2500      	movne	r5, #0
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	bfc4      	itt	gt
 8010ac2:	1a9b      	subgt	r3, r3, r2
 8010ac4:	18ed      	addgt	r5, r5, r3
 8010ac6:	2600      	movs	r6, #0
 8010ac8:	341a      	adds	r4, #26
 8010aca:	42b5      	cmp	r5, r6
 8010acc:	d11a      	bne.n	8010b04 <_printf_common+0xc8>
 8010ace:	2000      	movs	r0, #0
 8010ad0:	e008      	b.n	8010ae4 <_printf_common+0xa8>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	4652      	mov	r2, sl
 8010ad6:	4649      	mov	r1, r9
 8010ad8:	4638      	mov	r0, r7
 8010ada:	47c0      	blx	r8
 8010adc:	3001      	adds	r0, #1
 8010ade:	d103      	bne.n	8010ae8 <_printf_common+0xac>
 8010ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae8:	3501      	adds	r5, #1
 8010aea:	e7c6      	b.n	8010a7a <_printf_common+0x3e>
 8010aec:	18e1      	adds	r1, r4, r3
 8010aee:	1c5a      	adds	r2, r3, #1
 8010af0:	2030      	movs	r0, #48	; 0x30
 8010af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010af6:	4422      	add	r2, r4
 8010af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010b00:	3302      	adds	r3, #2
 8010b02:	e7c7      	b.n	8010a94 <_printf_common+0x58>
 8010b04:	2301      	movs	r3, #1
 8010b06:	4622      	mov	r2, r4
 8010b08:	4649      	mov	r1, r9
 8010b0a:	4638      	mov	r0, r7
 8010b0c:	47c0      	blx	r8
 8010b0e:	3001      	adds	r0, #1
 8010b10:	d0e6      	beq.n	8010ae0 <_printf_common+0xa4>
 8010b12:	3601      	adds	r6, #1
 8010b14:	e7d9      	b.n	8010aca <_printf_common+0x8e>
	...

08010b18 <_printf_i>:
 8010b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b1c:	7e0f      	ldrb	r7, [r1, #24]
 8010b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010b20:	2f78      	cmp	r7, #120	; 0x78
 8010b22:	4691      	mov	r9, r2
 8010b24:	4680      	mov	r8, r0
 8010b26:	460c      	mov	r4, r1
 8010b28:	469a      	mov	sl, r3
 8010b2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010b2e:	d807      	bhi.n	8010b40 <_printf_i+0x28>
 8010b30:	2f62      	cmp	r7, #98	; 0x62
 8010b32:	d80a      	bhi.n	8010b4a <_printf_i+0x32>
 8010b34:	2f00      	cmp	r7, #0
 8010b36:	f000 80d8 	beq.w	8010cea <_printf_i+0x1d2>
 8010b3a:	2f58      	cmp	r7, #88	; 0x58
 8010b3c:	f000 80a3 	beq.w	8010c86 <_printf_i+0x16e>
 8010b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010b48:	e03a      	b.n	8010bc0 <_printf_i+0xa8>
 8010b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010b4e:	2b15      	cmp	r3, #21
 8010b50:	d8f6      	bhi.n	8010b40 <_printf_i+0x28>
 8010b52:	a101      	add	r1, pc, #4	; (adr r1, 8010b58 <_printf_i+0x40>)
 8010b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b58:	08010bb1 	.word	0x08010bb1
 8010b5c:	08010bc5 	.word	0x08010bc5
 8010b60:	08010b41 	.word	0x08010b41
 8010b64:	08010b41 	.word	0x08010b41
 8010b68:	08010b41 	.word	0x08010b41
 8010b6c:	08010b41 	.word	0x08010b41
 8010b70:	08010bc5 	.word	0x08010bc5
 8010b74:	08010b41 	.word	0x08010b41
 8010b78:	08010b41 	.word	0x08010b41
 8010b7c:	08010b41 	.word	0x08010b41
 8010b80:	08010b41 	.word	0x08010b41
 8010b84:	08010cd1 	.word	0x08010cd1
 8010b88:	08010bf5 	.word	0x08010bf5
 8010b8c:	08010cb3 	.word	0x08010cb3
 8010b90:	08010b41 	.word	0x08010b41
 8010b94:	08010b41 	.word	0x08010b41
 8010b98:	08010cf3 	.word	0x08010cf3
 8010b9c:	08010b41 	.word	0x08010b41
 8010ba0:	08010bf5 	.word	0x08010bf5
 8010ba4:	08010b41 	.word	0x08010b41
 8010ba8:	08010b41 	.word	0x08010b41
 8010bac:	08010cbb 	.word	0x08010cbb
 8010bb0:	682b      	ldr	r3, [r5, #0]
 8010bb2:	1d1a      	adds	r2, r3, #4
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	602a      	str	r2, [r5, #0]
 8010bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e0a3      	b.n	8010d0c <_printf_i+0x1f4>
 8010bc4:	6820      	ldr	r0, [r4, #0]
 8010bc6:	6829      	ldr	r1, [r5, #0]
 8010bc8:	0606      	lsls	r6, r0, #24
 8010bca:	f101 0304 	add.w	r3, r1, #4
 8010bce:	d50a      	bpl.n	8010be6 <_printf_i+0xce>
 8010bd0:	680e      	ldr	r6, [r1, #0]
 8010bd2:	602b      	str	r3, [r5, #0]
 8010bd4:	2e00      	cmp	r6, #0
 8010bd6:	da03      	bge.n	8010be0 <_printf_i+0xc8>
 8010bd8:	232d      	movs	r3, #45	; 0x2d
 8010bda:	4276      	negs	r6, r6
 8010bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010be0:	485e      	ldr	r0, [pc, #376]	; (8010d5c <_printf_i+0x244>)
 8010be2:	230a      	movs	r3, #10
 8010be4:	e019      	b.n	8010c1a <_printf_i+0x102>
 8010be6:	680e      	ldr	r6, [r1, #0]
 8010be8:	602b      	str	r3, [r5, #0]
 8010bea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010bee:	bf18      	it	ne
 8010bf0:	b236      	sxthne	r6, r6
 8010bf2:	e7ef      	b.n	8010bd4 <_printf_i+0xbc>
 8010bf4:	682b      	ldr	r3, [r5, #0]
 8010bf6:	6820      	ldr	r0, [r4, #0]
 8010bf8:	1d19      	adds	r1, r3, #4
 8010bfa:	6029      	str	r1, [r5, #0]
 8010bfc:	0601      	lsls	r1, r0, #24
 8010bfe:	d501      	bpl.n	8010c04 <_printf_i+0xec>
 8010c00:	681e      	ldr	r6, [r3, #0]
 8010c02:	e002      	b.n	8010c0a <_printf_i+0xf2>
 8010c04:	0646      	lsls	r6, r0, #25
 8010c06:	d5fb      	bpl.n	8010c00 <_printf_i+0xe8>
 8010c08:	881e      	ldrh	r6, [r3, #0]
 8010c0a:	4854      	ldr	r0, [pc, #336]	; (8010d5c <_printf_i+0x244>)
 8010c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8010c0e:	bf0c      	ite	eq
 8010c10:	2308      	moveq	r3, #8
 8010c12:	230a      	movne	r3, #10
 8010c14:	2100      	movs	r1, #0
 8010c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010c1a:	6865      	ldr	r5, [r4, #4]
 8010c1c:	60a5      	str	r5, [r4, #8]
 8010c1e:	2d00      	cmp	r5, #0
 8010c20:	bfa2      	ittt	ge
 8010c22:	6821      	ldrge	r1, [r4, #0]
 8010c24:	f021 0104 	bicge.w	r1, r1, #4
 8010c28:	6021      	strge	r1, [r4, #0]
 8010c2a:	b90e      	cbnz	r6, 8010c30 <_printf_i+0x118>
 8010c2c:	2d00      	cmp	r5, #0
 8010c2e:	d04d      	beq.n	8010ccc <_printf_i+0x1b4>
 8010c30:	4615      	mov	r5, r2
 8010c32:	fbb6 f1f3 	udiv	r1, r6, r3
 8010c36:	fb03 6711 	mls	r7, r3, r1, r6
 8010c3a:	5dc7      	ldrb	r7, [r0, r7]
 8010c3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010c40:	4637      	mov	r7, r6
 8010c42:	42bb      	cmp	r3, r7
 8010c44:	460e      	mov	r6, r1
 8010c46:	d9f4      	bls.n	8010c32 <_printf_i+0x11a>
 8010c48:	2b08      	cmp	r3, #8
 8010c4a:	d10b      	bne.n	8010c64 <_printf_i+0x14c>
 8010c4c:	6823      	ldr	r3, [r4, #0]
 8010c4e:	07de      	lsls	r6, r3, #31
 8010c50:	d508      	bpl.n	8010c64 <_printf_i+0x14c>
 8010c52:	6923      	ldr	r3, [r4, #16]
 8010c54:	6861      	ldr	r1, [r4, #4]
 8010c56:	4299      	cmp	r1, r3
 8010c58:	bfde      	ittt	le
 8010c5a:	2330      	movle	r3, #48	; 0x30
 8010c5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010c64:	1b52      	subs	r2, r2, r5
 8010c66:	6122      	str	r2, [r4, #16]
 8010c68:	f8cd a000 	str.w	sl, [sp]
 8010c6c:	464b      	mov	r3, r9
 8010c6e:	aa03      	add	r2, sp, #12
 8010c70:	4621      	mov	r1, r4
 8010c72:	4640      	mov	r0, r8
 8010c74:	f7ff fee2 	bl	8010a3c <_printf_common>
 8010c78:	3001      	adds	r0, #1
 8010c7a:	d14c      	bne.n	8010d16 <_printf_i+0x1fe>
 8010c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c80:	b004      	add	sp, #16
 8010c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c86:	4835      	ldr	r0, [pc, #212]	; (8010d5c <_printf_i+0x244>)
 8010c88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010c8c:	6829      	ldr	r1, [r5, #0]
 8010c8e:	6823      	ldr	r3, [r4, #0]
 8010c90:	f851 6b04 	ldr.w	r6, [r1], #4
 8010c94:	6029      	str	r1, [r5, #0]
 8010c96:	061d      	lsls	r5, r3, #24
 8010c98:	d514      	bpl.n	8010cc4 <_printf_i+0x1ac>
 8010c9a:	07df      	lsls	r7, r3, #31
 8010c9c:	bf44      	itt	mi
 8010c9e:	f043 0320 	orrmi.w	r3, r3, #32
 8010ca2:	6023      	strmi	r3, [r4, #0]
 8010ca4:	b91e      	cbnz	r6, 8010cae <_printf_i+0x196>
 8010ca6:	6823      	ldr	r3, [r4, #0]
 8010ca8:	f023 0320 	bic.w	r3, r3, #32
 8010cac:	6023      	str	r3, [r4, #0]
 8010cae:	2310      	movs	r3, #16
 8010cb0:	e7b0      	b.n	8010c14 <_printf_i+0xfc>
 8010cb2:	6823      	ldr	r3, [r4, #0]
 8010cb4:	f043 0320 	orr.w	r3, r3, #32
 8010cb8:	6023      	str	r3, [r4, #0]
 8010cba:	2378      	movs	r3, #120	; 0x78
 8010cbc:	4828      	ldr	r0, [pc, #160]	; (8010d60 <_printf_i+0x248>)
 8010cbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010cc2:	e7e3      	b.n	8010c8c <_printf_i+0x174>
 8010cc4:	0659      	lsls	r1, r3, #25
 8010cc6:	bf48      	it	mi
 8010cc8:	b2b6      	uxthmi	r6, r6
 8010cca:	e7e6      	b.n	8010c9a <_printf_i+0x182>
 8010ccc:	4615      	mov	r5, r2
 8010cce:	e7bb      	b.n	8010c48 <_printf_i+0x130>
 8010cd0:	682b      	ldr	r3, [r5, #0]
 8010cd2:	6826      	ldr	r6, [r4, #0]
 8010cd4:	6961      	ldr	r1, [r4, #20]
 8010cd6:	1d18      	adds	r0, r3, #4
 8010cd8:	6028      	str	r0, [r5, #0]
 8010cda:	0635      	lsls	r5, r6, #24
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	d501      	bpl.n	8010ce4 <_printf_i+0x1cc>
 8010ce0:	6019      	str	r1, [r3, #0]
 8010ce2:	e002      	b.n	8010cea <_printf_i+0x1d2>
 8010ce4:	0670      	lsls	r0, r6, #25
 8010ce6:	d5fb      	bpl.n	8010ce0 <_printf_i+0x1c8>
 8010ce8:	8019      	strh	r1, [r3, #0]
 8010cea:	2300      	movs	r3, #0
 8010cec:	6123      	str	r3, [r4, #16]
 8010cee:	4615      	mov	r5, r2
 8010cf0:	e7ba      	b.n	8010c68 <_printf_i+0x150>
 8010cf2:	682b      	ldr	r3, [r5, #0]
 8010cf4:	1d1a      	adds	r2, r3, #4
 8010cf6:	602a      	str	r2, [r5, #0]
 8010cf8:	681d      	ldr	r5, [r3, #0]
 8010cfa:	6862      	ldr	r2, [r4, #4]
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	4628      	mov	r0, r5
 8010d00:	f7ef faf6 	bl	80002f0 <memchr>
 8010d04:	b108      	cbz	r0, 8010d0a <_printf_i+0x1f2>
 8010d06:	1b40      	subs	r0, r0, r5
 8010d08:	6060      	str	r0, [r4, #4]
 8010d0a:	6863      	ldr	r3, [r4, #4]
 8010d0c:	6123      	str	r3, [r4, #16]
 8010d0e:	2300      	movs	r3, #0
 8010d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d14:	e7a8      	b.n	8010c68 <_printf_i+0x150>
 8010d16:	6923      	ldr	r3, [r4, #16]
 8010d18:	462a      	mov	r2, r5
 8010d1a:	4649      	mov	r1, r9
 8010d1c:	4640      	mov	r0, r8
 8010d1e:	47d0      	blx	sl
 8010d20:	3001      	adds	r0, #1
 8010d22:	d0ab      	beq.n	8010c7c <_printf_i+0x164>
 8010d24:	6823      	ldr	r3, [r4, #0]
 8010d26:	079b      	lsls	r3, r3, #30
 8010d28:	d413      	bmi.n	8010d52 <_printf_i+0x23a>
 8010d2a:	68e0      	ldr	r0, [r4, #12]
 8010d2c:	9b03      	ldr	r3, [sp, #12]
 8010d2e:	4298      	cmp	r0, r3
 8010d30:	bfb8      	it	lt
 8010d32:	4618      	movlt	r0, r3
 8010d34:	e7a4      	b.n	8010c80 <_printf_i+0x168>
 8010d36:	2301      	movs	r3, #1
 8010d38:	4632      	mov	r2, r6
 8010d3a:	4649      	mov	r1, r9
 8010d3c:	4640      	mov	r0, r8
 8010d3e:	47d0      	blx	sl
 8010d40:	3001      	adds	r0, #1
 8010d42:	d09b      	beq.n	8010c7c <_printf_i+0x164>
 8010d44:	3501      	adds	r5, #1
 8010d46:	68e3      	ldr	r3, [r4, #12]
 8010d48:	9903      	ldr	r1, [sp, #12]
 8010d4a:	1a5b      	subs	r3, r3, r1
 8010d4c:	42ab      	cmp	r3, r5
 8010d4e:	dcf2      	bgt.n	8010d36 <_printf_i+0x21e>
 8010d50:	e7eb      	b.n	8010d2a <_printf_i+0x212>
 8010d52:	2500      	movs	r5, #0
 8010d54:	f104 0619 	add.w	r6, r4, #25
 8010d58:	e7f5      	b.n	8010d46 <_printf_i+0x22e>
 8010d5a:	bf00      	nop
 8010d5c:	08012ca6 	.word	0x08012ca6
 8010d60:	08012cb7 	.word	0x08012cb7

08010d64 <_sbrk_r>:
 8010d64:	b538      	push	{r3, r4, r5, lr}
 8010d66:	4d06      	ldr	r5, [pc, #24]	; (8010d80 <_sbrk_r+0x1c>)
 8010d68:	2300      	movs	r3, #0
 8010d6a:	4604      	mov	r4, r0
 8010d6c:	4608      	mov	r0, r1
 8010d6e:	602b      	str	r3, [r5, #0]
 8010d70:	f7f0 fc90 	bl	8001694 <_sbrk>
 8010d74:	1c43      	adds	r3, r0, #1
 8010d76:	d102      	bne.n	8010d7e <_sbrk_r+0x1a>
 8010d78:	682b      	ldr	r3, [r5, #0]
 8010d7a:	b103      	cbz	r3, 8010d7e <_sbrk_r+0x1a>
 8010d7c:	6023      	str	r3, [r4, #0]
 8010d7e:	bd38      	pop	{r3, r4, r5, pc}
 8010d80:	24002008 	.word	0x24002008

08010d84 <quorem>:
 8010d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d88:	6903      	ldr	r3, [r0, #16]
 8010d8a:	690c      	ldr	r4, [r1, #16]
 8010d8c:	42a3      	cmp	r3, r4
 8010d8e:	4607      	mov	r7, r0
 8010d90:	f2c0 8081 	blt.w	8010e96 <quorem+0x112>
 8010d94:	3c01      	subs	r4, #1
 8010d96:	f101 0814 	add.w	r8, r1, #20
 8010d9a:	f100 0514 	add.w	r5, r0, #20
 8010d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010da2:	9301      	str	r3, [sp, #4]
 8010da4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010da8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010dac:	3301      	adds	r3, #1
 8010dae:	429a      	cmp	r2, r3
 8010db0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010db4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010db8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010dbc:	d331      	bcc.n	8010e22 <quorem+0x9e>
 8010dbe:	f04f 0e00 	mov.w	lr, #0
 8010dc2:	4640      	mov	r0, r8
 8010dc4:	46ac      	mov	ip, r5
 8010dc6:	46f2      	mov	sl, lr
 8010dc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8010dcc:	b293      	uxth	r3, r2
 8010dce:	fb06 e303 	mla	r3, r6, r3, lr
 8010dd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	ebaa 0303 	sub.w	r3, sl, r3
 8010ddc:	f8dc a000 	ldr.w	sl, [ip]
 8010de0:	0c12      	lsrs	r2, r2, #16
 8010de2:	fa13 f38a 	uxtah	r3, r3, sl
 8010de6:	fb06 e202 	mla	r2, r6, r2, lr
 8010dea:	9300      	str	r3, [sp, #0]
 8010dec:	9b00      	ldr	r3, [sp, #0]
 8010dee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010df2:	b292      	uxth	r2, r2
 8010df4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010df8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010dfc:	f8bd 3000 	ldrh.w	r3, [sp]
 8010e00:	4581      	cmp	r9, r0
 8010e02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e06:	f84c 3b04 	str.w	r3, [ip], #4
 8010e0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010e0e:	d2db      	bcs.n	8010dc8 <quorem+0x44>
 8010e10:	f855 300b 	ldr.w	r3, [r5, fp]
 8010e14:	b92b      	cbnz	r3, 8010e22 <quorem+0x9e>
 8010e16:	9b01      	ldr	r3, [sp, #4]
 8010e18:	3b04      	subs	r3, #4
 8010e1a:	429d      	cmp	r5, r3
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	d32e      	bcc.n	8010e7e <quorem+0xfa>
 8010e20:	613c      	str	r4, [r7, #16]
 8010e22:	4638      	mov	r0, r7
 8010e24:	f001 f84a 	bl	8011ebc <__mcmp>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	db24      	blt.n	8010e76 <quorem+0xf2>
 8010e2c:	3601      	adds	r6, #1
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f04f 0c00 	mov.w	ip, #0
 8010e34:	f858 2b04 	ldr.w	r2, [r8], #4
 8010e38:	f8d0 e000 	ldr.w	lr, [r0]
 8010e3c:	b293      	uxth	r3, r2
 8010e3e:	ebac 0303 	sub.w	r3, ip, r3
 8010e42:	0c12      	lsrs	r2, r2, #16
 8010e44:	fa13 f38e 	uxtah	r3, r3, lr
 8010e48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010e4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e56:	45c1      	cmp	r9, r8
 8010e58:	f840 3b04 	str.w	r3, [r0], #4
 8010e5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010e60:	d2e8      	bcs.n	8010e34 <quorem+0xb0>
 8010e62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e6a:	b922      	cbnz	r2, 8010e76 <quorem+0xf2>
 8010e6c:	3b04      	subs	r3, #4
 8010e6e:	429d      	cmp	r5, r3
 8010e70:	461a      	mov	r2, r3
 8010e72:	d30a      	bcc.n	8010e8a <quorem+0x106>
 8010e74:	613c      	str	r4, [r7, #16]
 8010e76:	4630      	mov	r0, r6
 8010e78:	b003      	add	sp, #12
 8010e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7e:	6812      	ldr	r2, [r2, #0]
 8010e80:	3b04      	subs	r3, #4
 8010e82:	2a00      	cmp	r2, #0
 8010e84:	d1cc      	bne.n	8010e20 <quorem+0x9c>
 8010e86:	3c01      	subs	r4, #1
 8010e88:	e7c7      	b.n	8010e1a <quorem+0x96>
 8010e8a:	6812      	ldr	r2, [r2, #0]
 8010e8c:	3b04      	subs	r3, #4
 8010e8e:	2a00      	cmp	r2, #0
 8010e90:	d1f0      	bne.n	8010e74 <quorem+0xf0>
 8010e92:	3c01      	subs	r4, #1
 8010e94:	e7eb      	b.n	8010e6e <quorem+0xea>
 8010e96:	2000      	movs	r0, #0
 8010e98:	e7ee      	b.n	8010e78 <quorem+0xf4>
 8010e9a:	0000      	movs	r0, r0
 8010e9c:	0000      	movs	r0, r0
	...

08010ea0 <_dtoa_r>:
 8010ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea4:	ed2d 8b02 	vpush	{d8}
 8010ea8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010eaa:	b091      	sub	sp, #68	; 0x44
 8010eac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010eb0:	ec59 8b10 	vmov	r8, r9, d0
 8010eb4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8010eb6:	9106      	str	r1, [sp, #24]
 8010eb8:	4606      	mov	r6, r0
 8010eba:	9208      	str	r2, [sp, #32]
 8010ebc:	930c      	str	r3, [sp, #48]	; 0x30
 8010ebe:	b975      	cbnz	r5, 8010ede <_dtoa_r+0x3e>
 8010ec0:	2010      	movs	r0, #16
 8010ec2:	f7ff fa13 	bl	80102ec <malloc>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	6270      	str	r0, [r6, #36]	; 0x24
 8010eca:	b920      	cbnz	r0, 8010ed6 <_dtoa_r+0x36>
 8010ecc:	4baa      	ldr	r3, [pc, #680]	; (8011178 <_dtoa_r+0x2d8>)
 8010ece:	21ea      	movs	r1, #234	; 0xea
 8010ed0:	48aa      	ldr	r0, [pc, #680]	; (801117c <_dtoa_r+0x2dc>)
 8010ed2:	f001 f90b 	bl	80120ec <__assert_func>
 8010ed6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010eda:	6005      	str	r5, [r0, #0]
 8010edc:	60c5      	str	r5, [r0, #12]
 8010ede:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010ee0:	6819      	ldr	r1, [r3, #0]
 8010ee2:	b151      	cbz	r1, 8010efa <_dtoa_r+0x5a>
 8010ee4:	685a      	ldr	r2, [r3, #4]
 8010ee6:	604a      	str	r2, [r1, #4]
 8010ee8:	2301      	movs	r3, #1
 8010eea:	4093      	lsls	r3, r2
 8010eec:	608b      	str	r3, [r1, #8]
 8010eee:	4630      	mov	r0, r6
 8010ef0:	f000 fda2 	bl	8011a38 <_Bfree>
 8010ef4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	601a      	str	r2, [r3, #0]
 8010efa:	f1b9 0300 	subs.w	r3, r9, #0
 8010efe:	bfbb      	ittet	lt
 8010f00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010f04:	9303      	strlt	r3, [sp, #12]
 8010f06:	2300      	movge	r3, #0
 8010f08:	2201      	movlt	r2, #1
 8010f0a:	bfac      	ite	ge
 8010f0c:	6023      	strge	r3, [r4, #0]
 8010f0e:	6022      	strlt	r2, [r4, #0]
 8010f10:	4b9b      	ldr	r3, [pc, #620]	; (8011180 <_dtoa_r+0x2e0>)
 8010f12:	9c03      	ldr	r4, [sp, #12]
 8010f14:	43a3      	bics	r3, r4
 8010f16:	d11c      	bne.n	8010f52 <_dtoa_r+0xb2>
 8010f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010f1e:	6013      	str	r3, [r2, #0]
 8010f20:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010f24:	ea53 0308 	orrs.w	r3, r3, r8
 8010f28:	f000 84fd 	beq.w	8011926 <_dtoa_r+0xa86>
 8010f2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f2e:	b963      	cbnz	r3, 8010f4a <_dtoa_r+0xaa>
 8010f30:	4b94      	ldr	r3, [pc, #592]	; (8011184 <_dtoa_r+0x2e4>)
 8010f32:	e01f      	b.n	8010f74 <_dtoa_r+0xd4>
 8010f34:	4b94      	ldr	r3, [pc, #592]	; (8011188 <_dtoa_r+0x2e8>)
 8010f36:	9301      	str	r3, [sp, #4]
 8010f38:	3308      	adds	r3, #8
 8010f3a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010f3c:	6013      	str	r3, [r2, #0]
 8010f3e:	9801      	ldr	r0, [sp, #4]
 8010f40:	b011      	add	sp, #68	; 0x44
 8010f42:	ecbd 8b02 	vpop	{d8}
 8010f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4a:	4b8e      	ldr	r3, [pc, #568]	; (8011184 <_dtoa_r+0x2e4>)
 8010f4c:	9301      	str	r3, [sp, #4]
 8010f4e:	3303      	adds	r3, #3
 8010f50:	e7f3      	b.n	8010f3a <_dtoa_r+0x9a>
 8010f52:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010f56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5e:	d10b      	bne.n	8010f78 <_dtoa_r+0xd8>
 8010f60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010f62:	2301      	movs	r3, #1
 8010f64:	6013      	str	r3, [r2, #0]
 8010f66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	f000 84d9 	beq.w	8011920 <_dtoa_r+0xa80>
 8010f6e:	4887      	ldr	r0, [pc, #540]	; (801118c <_dtoa_r+0x2ec>)
 8010f70:	6018      	str	r0, [r3, #0]
 8010f72:	1e43      	subs	r3, r0, #1
 8010f74:	9301      	str	r3, [sp, #4]
 8010f76:	e7e2      	b.n	8010f3e <_dtoa_r+0x9e>
 8010f78:	a90f      	add	r1, sp, #60	; 0x3c
 8010f7a:	aa0e      	add	r2, sp, #56	; 0x38
 8010f7c:	4630      	mov	r0, r6
 8010f7e:	eeb0 0b48 	vmov.f64	d0, d8
 8010f82:	f001 f841 	bl	8012008 <__d2b>
 8010f86:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8010f8a:	4605      	mov	r5, r0
 8010f8c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010f8e:	2900      	cmp	r1, #0
 8010f90:	d046      	beq.n	8011020 <_dtoa_r+0x180>
 8010f92:	ee18 4a90 	vmov	r4, s17
 8010f96:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010f9a:	ec53 2b18 	vmov	r2, r3, d8
 8010f9e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010fa2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010fa6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010faa:	2400      	movs	r4, #0
 8010fac:	ec43 2b16 	vmov	d6, r2, r3
 8010fb0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010fb4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011160 <_dtoa_r+0x2c0>
 8010fb8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010fbc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8011168 <_dtoa_r+0x2c8>
 8010fc0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010fc4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8011170 <_dtoa_r+0x2d0>
 8010fc8:	ee07 1a90 	vmov	s15, r1
 8010fcc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010fd0:	eeb0 7b46 	vmov.f64	d7, d6
 8010fd4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010fd8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010fdc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe4:	ee16 ba90 	vmov	fp, s13
 8010fe8:	940a      	str	r4, [sp, #40]	; 0x28
 8010fea:	d508      	bpl.n	8010ffe <_dtoa_r+0x15e>
 8010fec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010ff0:	eeb4 6b47 	vcmp.f64	d6, d7
 8010ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff8:	bf18      	it	ne
 8010ffa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010ffe:	f1bb 0f16 	cmp.w	fp, #22
 8011002:	d82f      	bhi.n	8011064 <_dtoa_r+0x1c4>
 8011004:	4b62      	ldr	r3, [pc, #392]	; (8011190 <_dtoa_r+0x2f0>)
 8011006:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801100a:	ed93 7b00 	vldr	d7, [r3]
 801100e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011016:	d501      	bpl.n	801101c <_dtoa_r+0x17c>
 8011018:	f10b 3bff 	add.w	fp, fp, #4294967295
 801101c:	2300      	movs	r3, #0
 801101e:	e022      	b.n	8011066 <_dtoa_r+0x1c6>
 8011020:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011022:	4401      	add	r1, r0
 8011024:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011028:	2b20      	cmp	r3, #32
 801102a:	bfc1      	itttt	gt
 801102c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011030:	fa04 f303 	lslgt.w	r3, r4, r3
 8011034:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011038:	fa28 f804 	lsrgt.w	r8, r8, r4
 801103c:	bfd6      	itet	le
 801103e:	f1c3 0320 	rsble	r3, r3, #32
 8011042:	ea43 0808 	orrgt.w	r8, r3, r8
 8011046:	fa08 f803 	lslle.w	r8, r8, r3
 801104a:	ee07 8a90 	vmov	s15, r8
 801104e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011052:	3901      	subs	r1, #1
 8011054:	ee17 4a90 	vmov	r4, s15
 8011058:	ec53 2b17 	vmov	r2, r3, d7
 801105c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011060:	2401      	movs	r4, #1
 8011062:	e7a3      	b.n	8010fac <_dtoa_r+0x10c>
 8011064:	2301      	movs	r3, #1
 8011066:	930b      	str	r3, [sp, #44]	; 0x2c
 8011068:	1a43      	subs	r3, r0, r1
 801106a:	1e5a      	subs	r2, r3, #1
 801106c:	bf45      	ittet	mi
 801106e:	f1c3 0301 	rsbmi	r3, r3, #1
 8011072:	9304      	strmi	r3, [sp, #16]
 8011074:	2300      	movpl	r3, #0
 8011076:	2300      	movmi	r3, #0
 8011078:	9205      	str	r2, [sp, #20]
 801107a:	bf54      	ite	pl
 801107c:	9304      	strpl	r3, [sp, #16]
 801107e:	9305      	strmi	r3, [sp, #20]
 8011080:	f1bb 0f00 	cmp.w	fp, #0
 8011084:	db18      	blt.n	80110b8 <_dtoa_r+0x218>
 8011086:	9b05      	ldr	r3, [sp, #20]
 8011088:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801108c:	445b      	add	r3, fp
 801108e:	9305      	str	r3, [sp, #20]
 8011090:	2300      	movs	r3, #0
 8011092:	9a06      	ldr	r2, [sp, #24]
 8011094:	2a09      	cmp	r2, #9
 8011096:	d849      	bhi.n	801112c <_dtoa_r+0x28c>
 8011098:	2a05      	cmp	r2, #5
 801109a:	bfc4      	itt	gt
 801109c:	3a04      	subgt	r2, #4
 801109e:	9206      	strgt	r2, [sp, #24]
 80110a0:	9a06      	ldr	r2, [sp, #24]
 80110a2:	f1a2 0202 	sub.w	r2, r2, #2
 80110a6:	bfcc      	ite	gt
 80110a8:	2400      	movgt	r4, #0
 80110aa:	2401      	movle	r4, #1
 80110ac:	2a03      	cmp	r2, #3
 80110ae:	d848      	bhi.n	8011142 <_dtoa_r+0x2a2>
 80110b0:	e8df f002 	tbb	[pc, r2]
 80110b4:	3a2c2e0b 	.word	0x3a2c2e0b
 80110b8:	9b04      	ldr	r3, [sp, #16]
 80110ba:	2200      	movs	r2, #0
 80110bc:	eba3 030b 	sub.w	r3, r3, fp
 80110c0:	9304      	str	r3, [sp, #16]
 80110c2:	9209      	str	r2, [sp, #36]	; 0x24
 80110c4:	f1cb 0300 	rsb	r3, fp, #0
 80110c8:	e7e3      	b.n	8011092 <_dtoa_r+0x1f2>
 80110ca:	2200      	movs	r2, #0
 80110cc:	9207      	str	r2, [sp, #28]
 80110ce:	9a08      	ldr	r2, [sp, #32]
 80110d0:	2a00      	cmp	r2, #0
 80110d2:	dc39      	bgt.n	8011148 <_dtoa_r+0x2a8>
 80110d4:	f04f 0a01 	mov.w	sl, #1
 80110d8:	46d1      	mov	r9, sl
 80110da:	4652      	mov	r2, sl
 80110dc:	f8cd a020 	str.w	sl, [sp, #32]
 80110e0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80110e2:	2100      	movs	r1, #0
 80110e4:	6079      	str	r1, [r7, #4]
 80110e6:	2004      	movs	r0, #4
 80110e8:	f100 0c14 	add.w	ip, r0, #20
 80110ec:	4594      	cmp	ip, r2
 80110ee:	6879      	ldr	r1, [r7, #4]
 80110f0:	d92f      	bls.n	8011152 <_dtoa_r+0x2b2>
 80110f2:	4630      	mov	r0, r6
 80110f4:	930d      	str	r3, [sp, #52]	; 0x34
 80110f6:	f000 fc5f 	bl	80119b8 <_Balloc>
 80110fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110fc:	9001      	str	r0, [sp, #4]
 80110fe:	4602      	mov	r2, r0
 8011100:	2800      	cmp	r0, #0
 8011102:	d149      	bne.n	8011198 <_dtoa_r+0x2f8>
 8011104:	4b23      	ldr	r3, [pc, #140]	; (8011194 <_dtoa_r+0x2f4>)
 8011106:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801110a:	e6e1      	b.n	8010ed0 <_dtoa_r+0x30>
 801110c:	2201      	movs	r2, #1
 801110e:	e7dd      	b.n	80110cc <_dtoa_r+0x22c>
 8011110:	2200      	movs	r2, #0
 8011112:	9207      	str	r2, [sp, #28]
 8011114:	9a08      	ldr	r2, [sp, #32]
 8011116:	eb0b 0a02 	add.w	sl, fp, r2
 801111a:	f10a 0901 	add.w	r9, sl, #1
 801111e:	464a      	mov	r2, r9
 8011120:	2a01      	cmp	r2, #1
 8011122:	bfb8      	it	lt
 8011124:	2201      	movlt	r2, #1
 8011126:	e7db      	b.n	80110e0 <_dtoa_r+0x240>
 8011128:	2201      	movs	r2, #1
 801112a:	e7f2      	b.n	8011112 <_dtoa_r+0x272>
 801112c:	2401      	movs	r4, #1
 801112e:	2200      	movs	r2, #0
 8011130:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8011134:	f04f 3aff 	mov.w	sl, #4294967295
 8011138:	2100      	movs	r1, #0
 801113a:	46d1      	mov	r9, sl
 801113c:	2212      	movs	r2, #18
 801113e:	9108      	str	r1, [sp, #32]
 8011140:	e7ce      	b.n	80110e0 <_dtoa_r+0x240>
 8011142:	2201      	movs	r2, #1
 8011144:	9207      	str	r2, [sp, #28]
 8011146:	e7f5      	b.n	8011134 <_dtoa_r+0x294>
 8011148:	f8dd a020 	ldr.w	sl, [sp, #32]
 801114c:	46d1      	mov	r9, sl
 801114e:	4652      	mov	r2, sl
 8011150:	e7c6      	b.n	80110e0 <_dtoa_r+0x240>
 8011152:	3101      	adds	r1, #1
 8011154:	6079      	str	r1, [r7, #4]
 8011156:	0040      	lsls	r0, r0, #1
 8011158:	e7c6      	b.n	80110e8 <_dtoa_r+0x248>
 801115a:	bf00      	nop
 801115c:	f3af 8000 	nop.w
 8011160:	636f4361 	.word	0x636f4361
 8011164:	3fd287a7 	.word	0x3fd287a7
 8011168:	8b60c8b3 	.word	0x8b60c8b3
 801116c:	3fc68a28 	.word	0x3fc68a28
 8011170:	509f79fb 	.word	0x509f79fb
 8011174:	3fd34413 	.word	0x3fd34413
 8011178:	08012cd5 	.word	0x08012cd5
 801117c:	08012cec 	.word	0x08012cec
 8011180:	7ff00000 	.word	0x7ff00000
 8011184:	08012cd1 	.word	0x08012cd1
 8011188:	08012cc8 	.word	0x08012cc8
 801118c:	08012ca5 	.word	0x08012ca5
 8011190:	08012de0 	.word	0x08012de0
 8011194:	08012d47 	.word	0x08012d47
 8011198:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801119a:	9901      	ldr	r1, [sp, #4]
 801119c:	6011      	str	r1, [r2, #0]
 801119e:	f1b9 0f0e 	cmp.w	r9, #14
 80111a2:	d86c      	bhi.n	801127e <_dtoa_r+0x3de>
 80111a4:	2c00      	cmp	r4, #0
 80111a6:	d06a      	beq.n	801127e <_dtoa_r+0x3de>
 80111a8:	f1bb 0f00 	cmp.w	fp, #0
 80111ac:	f340 80a0 	ble.w	80112f0 <_dtoa_r+0x450>
 80111b0:	49c1      	ldr	r1, [pc, #772]	; (80114b8 <_dtoa_r+0x618>)
 80111b2:	f00b 020f 	and.w	r2, fp, #15
 80111b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80111ba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80111be:	ed92 7b00 	vldr	d7, [r2]
 80111c2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80111c6:	f000 8087 	beq.w	80112d8 <_dtoa_r+0x438>
 80111ca:	4abc      	ldr	r2, [pc, #752]	; (80114bc <_dtoa_r+0x61c>)
 80111cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80111d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80111d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80111d8:	f001 010f 	and.w	r1, r1, #15
 80111dc:	2203      	movs	r2, #3
 80111de:	48b7      	ldr	r0, [pc, #732]	; (80114bc <_dtoa_r+0x61c>)
 80111e0:	2900      	cmp	r1, #0
 80111e2:	d17b      	bne.n	80112dc <_dtoa_r+0x43c>
 80111e4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80111e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80111ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80111f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111f2:	2900      	cmp	r1, #0
 80111f4:	f000 80a2 	beq.w	801133c <_dtoa_r+0x49c>
 80111f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80111fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011200:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011208:	f140 8098 	bpl.w	801133c <_dtoa_r+0x49c>
 801120c:	f1b9 0f00 	cmp.w	r9, #0
 8011210:	f000 8094 	beq.w	801133c <_dtoa_r+0x49c>
 8011214:	f1ba 0f00 	cmp.w	sl, #0
 8011218:	dd2f      	ble.n	801127a <_dtoa_r+0x3da>
 801121a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801121e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011222:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011226:	f10b 37ff 	add.w	r7, fp, #4294967295
 801122a:	3201      	adds	r2, #1
 801122c:	4650      	mov	r0, sl
 801122e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011232:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011236:	ee07 2a90 	vmov	s15, r2
 801123a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801123e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011242:	ee15 4a90 	vmov	r4, s11
 8011246:	ec52 1b15 	vmov	r1, r2, d5
 801124a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801124e:	2800      	cmp	r0, #0
 8011250:	d177      	bne.n	8011342 <_dtoa_r+0x4a2>
 8011252:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011256:	ee36 6b47 	vsub.f64	d6, d6, d7
 801125a:	ec42 1b17 	vmov	d7, r1, r2
 801125e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011266:	f300 8263 	bgt.w	8011730 <_dtoa_r+0x890>
 801126a:	eeb1 7b47 	vneg.f64	d7, d7
 801126e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011276:	f100 8258 	bmi.w	801172a <_dtoa_r+0x88a>
 801127a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801127e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011280:	2a00      	cmp	r2, #0
 8011282:	f2c0 811d 	blt.w	80114c0 <_dtoa_r+0x620>
 8011286:	f1bb 0f0e 	cmp.w	fp, #14
 801128a:	f300 8119 	bgt.w	80114c0 <_dtoa_r+0x620>
 801128e:	4b8a      	ldr	r3, [pc, #552]	; (80114b8 <_dtoa_r+0x618>)
 8011290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011294:	ed93 6b00 	vldr	d6, [r3]
 8011298:	9b08      	ldr	r3, [sp, #32]
 801129a:	2b00      	cmp	r3, #0
 801129c:	f280 80b7 	bge.w	801140e <_dtoa_r+0x56e>
 80112a0:	f1b9 0f00 	cmp.w	r9, #0
 80112a4:	f300 80b3 	bgt.w	801140e <_dtoa_r+0x56e>
 80112a8:	f040 823f 	bne.w	801172a <_dtoa_r+0x88a>
 80112ac:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80112b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80112b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80112b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80112bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c0:	464c      	mov	r4, r9
 80112c2:	464f      	mov	r7, r9
 80112c4:	f280 8215 	bge.w	80116f2 <_dtoa_r+0x852>
 80112c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80112cc:	2331      	movs	r3, #49	; 0x31
 80112ce:	f808 3b01 	strb.w	r3, [r8], #1
 80112d2:	f10b 0b01 	add.w	fp, fp, #1
 80112d6:	e211      	b.n	80116fc <_dtoa_r+0x85c>
 80112d8:	2202      	movs	r2, #2
 80112da:	e780      	b.n	80111de <_dtoa_r+0x33e>
 80112dc:	07cc      	lsls	r4, r1, #31
 80112de:	d504      	bpl.n	80112ea <_dtoa_r+0x44a>
 80112e0:	ed90 6b00 	vldr	d6, [r0]
 80112e4:	3201      	adds	r2, #1
 80112e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80112ea:	1049      	asrs	r1, r1, #1
 80112ec:	3008      	adds	r0, #8
 80112ee:	e777      	b.n	80111e0 <_dtoa_r+0x340>
 80112f0:	d022      	beq.n	8011338 <_dtoa_r+0x498>
 80112f2:	f1cb 0100 	rsb	r1, fp, #0
 80112f6:	4a70      	ldr	r2, [pc, #448]	; (80114b8 <_dtoa_r+0x618>)
 80112f8:	f001 000f 	and.w	r0, r1, #15
 80112fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011300:	ed92 7b00 	vldr	d7, [r2]
 8011304:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011308:	ed8d 7b02 	vstr	d7, [sp, #8]
 801130c:	486b      	ldr	r0, [pc, #428]	; (80114bc <_dtoa_r+0x61c>)
 801130e:	1109      	asrs	r1, r1, #4
 8011310:	2400      	movs	r4, #0
 8011312:	2202      	movs	r2, #2
 8011314:	b929      	cbnz	r1, 8011322 <_dtoa_r+0x482>
 8011316:	2c00      	cmp	r4, #0
 8011318:	f43f af6a 	beq.w	80111f0 <_dtoa_r+0x350>
 801131c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011320:	e766      	b.n	80111f0 <_dtoa_r+0x350>
 8011322:	07cf      	lsls	r7, r1, #31
 8011324:	d505      	bpl.n	8011332 <_dtoa_r+0x492>
 8011326:	ed90 6b00 	vldr	d6, [r0]
 801132a:	3201      	adds	r2, #1
 801132c:	2401      	movs	r4, #1
 801132e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011332:	1049      	asrs	r1, r1, #1
 8011334:	3008      	adds	r0, #8
 8011336:	e7ed      	b.n	8011314 <_dtoa_r+0x474>
 8011338:	2202      	movs	r2, #2
 801133a:	e759      	b.n	80111f0 <_dtoa_r+0x350>
 801133c:	465f      	mov	r7, fp
 801133e:	4648      	mov	r0, r9
 8011340:	e775      	b.n	801122e <_dtoa_r+0x38e>
 8011342:	ec42 1b17 	vmov	d7, r1, r2
 8011346:	4a5c      	ldr	r2, [pc, #368]	; (80114b8 <_dtoa_r+0x618>)
 8011348:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801134c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011350:	9a01      	ldr	r2, [sp, #4]
 8011352:	1814      	adds	r4, r2, r0
 8011354:	9a07      	ldr	r2, [sp, #28]
 8011356:	b352      	cbz	r2, 80113ae <_dtoa_r+0x50e>
 8011358:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801135c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011360:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011364:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011368:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801136c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011370:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8011374:	ee14 2a90 	vmov	r2, s9
 8011378:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801137c:	3230      	adds	r2, #48	; 0x30
 801137e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011382:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801138a:	f808 2b01 	strb.w	r2, [r8], #1
 801138e:	d439      	bmi.n	8011404 <_dtoa_r+0x564>
 8011390:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011394:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801139c:	d472      	bmi.n	8011484 <_dtoa_r+0x5e4>
 801139e:	45a0      	cmp	r8, r4
 80113a0:	f43f af6b 	beq.w	801127a <_dtoa_r+0x3da>
 80113a4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80113a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80113ac:	e7e0      	b.n	8011370 <_dtoa_r+0x4d0>
 80113ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80113b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80113b6:	4621      	mov	r1, r4
 80113b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80113bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80113c0:	ee14 2a90 	vmov	r2, s9
 80113c4:	3230      	adds	r2, #48	; 0x30
 80113c6:	f808 2b01 	strb.w	r2, [r8], #1
 80113ca:	45a0      	cmp	r8, r4
 80113cc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80113d0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80113d4:	d118      	bne.n	8011408 <_dtoa_r+0x568>
 80113d6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80113da:	ee37 4b05 	vadd.f64	d4, d7, d5
 80113de:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80113e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e6:	dc4d      	bgt.n	8011484 <_dtoa_r+0x5e4>
 80113e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80113ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80113f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f4:	f57f af41 	bpl.w	801127a <_dtoa_r+0x3da>
 80113f8:	4688      	mov	r8, r1
 80113fa:	3901      	subs	r1, #1
 80113fc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011400:	2b30      	cmp	r3, #48	; 0x30
 8011402:	d0f9      	beq.n	80113f8 <_dtoa_r+0x558>
 8011404:	46bb      	mov	fp, r7
 8011406:	e02a      	b.n	801145e <_dtoa_r+0x5be>
 8011408:	ee26 6b03 	vmul.f64	d6, d6, d3
 801140c:	e7d6      	b.n	80113bc <_dtoa_r+0x51c>
 801140e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011412:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011416:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801141a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801141e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011422:	ee15 3a10 	vmov	r3, s10
 8011426:	3330      	adds	r3, #48	; 0x30
 8011428:	f808 3b01 	strb.w	r3, [r8], #1
 801142c:	9b01      	ldr	r3, [sp, #4]
 801142e:	eba8 0303 	sub.w	r3, r8, r3
 8011432:	4599      	cmp	r9, r3
 8011434:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011438:	eea3 7b46 	vfms.f64	d7, d3, d6
 801143c:	d133      	bne.n	80114a6 <_dtoa_r+0x606>
 801143e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011442:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801144a:	dc1a      	bgt.n	8011482 <_dtoa_r+0x5e2>
 801144c:	eeb4 7b46 	vcmp.f64	d7, d6
 8011450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011454:	d103      	bne.n	801145e <_dtoa_r+0x5be>
 8011456:	ee15 3a10 	vmov	r3, s10
 801145a:	07d9      	lsls	r1, r3, #31
 801145c:	d411      	bmi.n	8011482 <_dtoa_r+0x5e2>
 801145e:	4629      	mov	r1, r5
 8011460:	4630      	mov	r0, r6
 8011462:	f000 fae9 	bl	8011a38 <_Bfree>
 8011466:	2300      	movs	r3, #0
 8011468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801146a:	f888 3000 	strb.w	r3, [r8]
 801146e:	f10b 0301 	add.w	r3, fp, #1
 8011472:	6013      	str	r3, [r2, #0]
 8011474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011476:	2b00      	cmp	r3, #0
 8011478:	f43f ad61 	beq.w	8010f3e <_dtoa_r+0x9e>
 801147c:	f8c3 8000 	str.w	r8, [r3]
 8011480:	e55d      	b.n	8010f3e <_dtoa_r+0x9e>
 8011482:	465f      	mov	r7, fp
 8011484:	4643      	mov	r3, r8
 8011486:	4698      	mov	r8, r3
 8011488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801148c:	2a39      	cmp	r2, #57	; 0x39
 801148e:	d106      	bne.n	801149e <_dtoa_r+0x5fe>
 8011490:	9a01      	ldr	r2, [sp, #4]
 8011492:	429a      	cmp	r2, r3
 8011494:	d1f7      	bne.n	8011486 <_dtoa_r+0x5e6>
 8011496:	9901      	ldr	r1, [sp, #4]
 8011498:	2230      	movs	r2, #48	; 0x30
 801149a:	3701      	adds	r7, #1
 801149c:	700a      	strb	r2, [r1, #0]
 801149e:	781a      	ldrb	r2, [r3, #0]
 80114a0:	3201      	adds	r2, #1
 80114a2:	701a      	strb	r2, [r3, #0]
 80114a4:	e7ae      	b.n	8011404 <_dtoa_r+0x564>
 80114a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80114aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80114ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b2:	d1b2      	bne.n	801141a <_dtoa_r+0x57a>
 80114b4:	e7d3      	b.n	801145e <_dtoa_r+0x5be>
 80114b6:	bf00      	nop
 80114b8:	08012de0 	.word	0x08012de0
 80114bc:	08012db8 	.word	0x08012db8
 80114c0:	9907      	ldr	r1, [sp, #28]
 80114c2:	2900      	cmp	r1, #0
 80114c4:	f000 80d0 	beq.w	8011668 <_dtoa_r+0x7c8>
 80114c8:	9906      	ldr	r1, [sp, #24]
 80114ca:	2901      	cmp	r1, #1
 80114cc:	f300 80b4 	bgt.w	8011638 <_dtoa_r+0x798>
 80114d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80114d2:	2900      	cmp	r1, #0
 80114d4:	f000 80ac 	beq.w	8011630 <_dtoa_r+0x790>
 80114d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80114dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80114e0:	461c      	mov	r4, r3
 80114e2:	930a      	str	r3, [sp, #40]	; 0x28
 80114e4:	9b04      	ldr	r3, [sp, #16]
 80114e6:	4413      	add	r3, r2
 80114e8:	9304      	str	r3, [sp, #16]
 80114ea:	9b05      	ldr	r3, [sp, #20]
 80114ec:	2101      	movs	r1, #1
 80114ee:	4413      	add	r3, r2
 80114f0:	4630      	mov	r0, r6
 80114f2:	9305      	str	r3, [sp, #20]
 80114f4:	f000 fb58 	bl	8011ba8 <__i2b>
 80114f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114fa:	4607      	mov	r7, r0
 80114fc:	f1b8 0f00 	cmp.w	r8, #0
 8011500:	dd0d      	ble.n	801151e <_dtoa_r+0x67e>
 8011502:	9a05      	ldr	r2, [sp, #20]
 8011504:	2a00      	cmp	r2, #0
 8011506:	dd0a      	ble.n	801151e <_dtoa_r+0x67e>
 8011508:	4542      	cmp	r2, r8
 801150a:	9904      	ldr	r1, [sp, #16]
 801150c:	bfa8      	it	ge
 801150e:	4642      	movge	r2, r8
 8011510:	1a89      	subs	r1, r1, r2
 8011512:	9104      	str	r1, [sp, #16]
 8011514:	9905      	ldr	r1, [sp, #20]
 8011516:	eba8 0802 	sub.w	r8, r8, r2
 801151a:	1a8a      	subs	r2, r1, r2
 801151c:	9205      	str	r2, [sp, #20]
 801151e:	b303      	cbz	r3, 8011562 <_dtoa_r+0x6c2>
 8011520:	9a07      	ldr	r2, [sp, #28]
 8011522:	2a00      	cmp	r2, #0
 8011524:	f000 80a5 	beq.w	8011672 <_dtoa_r+0x7d2>
 8011528:	2c00      	cmp	r4, #0
 801152a:	dd13      	ble.n	8011554 <_dtoa_r+0x6b4>
 801152c:	4639      	mov	r1, r7
 801152e:	4622      	mov	r2, r4
 8011530:	4630      	mov	r0, r6
 8011532:	930d      	str	r3, [sp, #52]	; 0x34
 8011534:	f000 fbf8 	bl	8011d28 <__pow5mult>
 8011538:	462a      	mov	r2, r5
 801153a:	4601      	mov	r1, r0
 801153c:	4607      	mov	r7, r0
 801153e:	4630      	mov	r0, r6
 8011540:	f000 fb48 	bl	8011bd4 <__multiply>
 8011544:	4629      	mov	r1, r5
 8011546:	900a      	str	r0, [sp, #40]	; 0x28
 8011548:	4630      	mov	r0, r6
 801154a:	f000 fa75 	bl	8011a38 <_Bfree>
 801154e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011552:	4615      	mov	r5, r2
 8011554:	1b1a      	subs	r2, r3, r4
 8011556:	d004      	beq.n	8011562 <_dtoa_r+0x6c2>
 8011558:	4629      	mov	r1, r5
 801155a:	4630      	mov	r0, r6
 801155c:	f000 fbe4 	bl	8011d28 <__pow5mult>
 8011560:	4605      	mov	r5, r0
 8011562:	2101      	movs	r1, #1
 8011564:	4630      	mov	r0, r6
 8011566:	f000 fb1f 	bl	8011ba8 <__i2b>
 801156a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801156c:	2b00      	cmp	r3, #0
 801156e:	4604      	mov	r4, r0
 8011570:	f340 8081 	ble.w	8011676 <_dtoa_r+0x7d6>
 8011574:	461a      	mov	r2, r3
 8011576:	4601      	mov	r1, r0
 8011578:	4630      	mov	r0, r6
 801157a:	f000 fbd5 	bl	8011d28 <__pow5mult>
 801157e:	9b06      	ldr	r3, [sp, #24]
 8011580:	2b01      	cmp	r3, #1
 8011582:	4604      	mov	r4, r0
 8011584:	dd7a      	ble.n	801167c <_dtoa_r+0x7dc>
 8011586:	2300      	movs	r3, #0
 8011588:	930a      	str	r3, [sp, #40]	; 0x28
 801158a:	6922      	ldr	r2, [r4, #16]
 801158c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011590:	6910      	ldr	r0, [r2, #16]
 8011592:	f000 fab9 	bl	8011b08 <__hi0bits>
 8011596:	f1c0 0020 	rsb	r0, r0, #32
 801159a:	9b05      	ldr	r3, [sp, #20]
 801159c:	4418      	add	r0, r3
 801159e:	f010 001f 	ands.w	r0, r0, #31
 80115a2:	f000 808c 	beq.w	80116be <_dtoa_r+0x81e>
 80115a6:	f1c0 0220 	rsb	r2, r0, #32
 80115aa:	2a04      	cmp	r2, #4
 80115ac:	f340 8085 	ble.w	80116ba <_dtoa_r+0x81a>
 80115b0:	f1c0 001c 	rsb	r0, r0, #28
 80115b4:	9b04      	ldr	r3, [sp, #16]
 80115b6:	4403      	add	r3, r0
 80115b8:	9304      	str	r3, [sp, #16]
 80115ba:	9b05      	ldr	r3, [sp, #20]
 80115bc:	4403      	add	r3, r0
 80115be:	4480      	add	r8, r0
 80115c0:	9305      	str	r3, [sp, #20]
 80115c2:	9b04      	ldr	r3, [sp, #16]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	dd05      	ble.n	80115d4 <_dtoa_r+0x734>
 80115c8:	4629      	mov	r1, r5
 80115ca:	461a      	mov	r2, r3
 80115cc:	4630      	mov	r0, r6
 80115ce:	f000 fc05 	bl	8011ddc <__lshift>
 80115d2:	4605      	mov	r5, r0
 80115d4:	9b05      	ldr	r3, [sp, #20]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	dd05      	ble.n	80115e6 <_dtoa_r+0x746>
 80115da:	4621      	mov	r1, r4
 80115dc:	461a      	mov	r2, r3
 80115de:	4630      	mov	r0, r6
 80115e0:	f000 fbfc 	bl	8011ddc <__lshift>
 80115e4:	4604      	mov	r4, r0
 80115e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d06a      	beq.n	80116c2 <_dtoa_r+0x822>
 80115ec:	4621      	mov	r1, r4
 80115ee:	4628      	mov	r0, r5
 80115f0:	f000 fc64 	bl	8011ebc <__mcmp>
 80115f4:	2800      	cmp	r0, #0
 80115f6:	da64      	bge.n	80116c2 <_dtoa_r+0x822>
 80115f8:	2300      	movs	r3, #0
 80115fa:	4629      	mov	r1, r5
 80115fc:	220a      	movs	r2, #10
 80115fe:	4630      	mov	r0, r6
 8011600:	f000 fa3c 	bl	8011a7c <__multadd>
 8011604:	9b07      	ldr	r3, [sp, #28]
 8011606:	f10b 3bff 	add.w	fp, fp, #4294967295
 801160a:	4605      	mov	r5, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	f000 8191 	beq.w	8011934 <_dtoa_r+0xa94>
 8011612:	4639      	mov	r1, r7
 8011614:	2300      	movs	r3, #0
 8011616:	220a      	movs	r2, #10
 8011618:	4630      	mov	r0, r6
 801161a:	f000 fa2f 	bl	8011a7c <__multadd>
 801161e:	f1ba 0f00 	cmp.w	sl, #0
 8011622:	4607      	mov	r7, r0
 8011624:	f300 808d 	bgt.w	8011742 <_dtoa_r+0x8a2>
 8011628:	9b06      	ldr	r3, [sp, #24]
 801162a:	2b02      	cmp	r3, #2
 801162c:	dc50      	bgt.n	80116d0 <_dtoa_r+0x830>
 801162e:	e088      	b.n	8011742 <_dtoa_r+0x8a2>
 8011630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011632:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011636:	e751      	b.n	80114dc <_dtoa_r+0x63c>
 8011638:	f109 34ff 	add.w	r4, r9, #4294967295
 801163c:	42a3      	cmp	r3, r4
 801163e:	bfbf      	itttt	lt
 8011640:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8011642:	1ae3      	sublt	r3, r4, r3
 8011644:	18d2      	addlt	r2, r2, r3
 8011646:	9209      	strlt	r2, [sp, #36]	; 0x24
 8011648:	bfb6      	itet	lt
 801164a:	4623      	movlt	r3, r4
 801164c:	1b1c      	subge	r4, r3, r4
 801164e:	2400      	movlt	r4, #0
 8011650:	f1b9 0f00 	cmp.w	r9, #0
 8011654:	bfb5      	itete	lt
 8011656:	9a04      	ldrlt	r2, [sp, #16]
 8011658:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801165c:	eba2 0809 	sublt.w	r8, r2, r9
 8011660:	464a      	movge	r2, r9
 8011662:	bfb8      	it	lt
 8011664:	2200      	movlt	r2, #0
 8011666:	e73c      	b.n	80114e2 <_dtoa_r+0x642>
 8011668:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801166c:	9f07      	ldr	r7, [sp, #28]
 801166e:	461c      	mov	r4, r3
 8011670:	e744      	b.n	80114fc <_dtoa_r+0x65c>
 8011672:	461a      	mov	r2, r3
 8011674:	e770      	b.n	8011558 <_dtoa_r+0x6b8>
 8011676:	9b06      	ldr	r3, [sp, #24]
 8011678:	2b01      	cmp	r3, #1
 801167a:	dc18      	bgt.n	80116ae <_dtoa_r+0x80e>
 801167c:	9b02      	ldr	r3, [sp, #8]
 801167e:	b9b3      	cbnz	r3, 80116ae <_dtoa_r+0x80e>
 8011680:	9b03      	ldr	r3, [sp, #12]
 8011682:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011686:	b9a2      	cbnz	r2, 80116b2 <_dtoa_r+0x812>
 8011688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801168c:	0d12      	lsrs	r2, r2, #20
 801168e:	0512      	lsls	r2, r2, #20
 8011690:	b18a      	cbz	r2, 80116b6 <_dtoa_r+0x816>
 8011692:	9b04      	ldr	r3, [sp, #16]
 8011694:	3301      	adds	r3, #1
 8011696:	9304      	str	r3, [sp, #16]
 8011698:	9b05      	ldr	r3, [sp, #20]
 801169a:	3301      	adds	r3, #1
 801169c:	9305      	str	r3, [sp, #20]
 801169e:	2301      	movs	r3, #1
 80116a0:	930a      	str	r3, [sp, #40]	; 0x28
 80116a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f47f af70 	bne.w	801158a <_dtoa_r+0x6ea>
 80116aa:	2001      	movs	r0, #1
 80116ac:	e775      	b.n	801159a <_dtoa_r+0x6fa>
 80116ae:	2300      	movs	r3, #0
 80116b0:	e7f6      	b.n	80116a0 <_dtoa_r+0x800>
 80116b2:	9b02      	ldr	r3, [sp, #8]
 80116b4:	e7f4      	b.n	80116a0 <_dtoa_r+0x800>
 80116b6:	920a      	str	r2, [sp, #40]	; 0x28
 80116b8:	e7f3      	b.n	80116a2 <_dtoa_r+0x802>
 80116ba:	d082      	beq.n	80115c2 <_dtoa_r+0x722>
 80116bc:	4610      	mov	r0, r2
 80116be:	301c      	adds	r0, #28
 80116c0:	e778      	b.n	80115b4 <_dtoa_r+0x714>
 80116c2:	f1b9 0f00 	cmp.w	r9, #0
 80116c6:	dc37      	bgt.n	8011738 <_dtoa_r+0x898>
 80116c8:	9b06      	ldr	r3, [sp, #24]
 80116ca:	2b02      	cmp	r3, #2
 80116cc:	dd34      	ble.n	8011738 <_dtoa_r+0x898>
 80116ce:	46ca      	mov	sl, r9
 80116d0:	f1ba 0f00 	cmp.w	sl, #0
 80116d4:	d10d      	bne.n	80116f2 <_dtoa_r+0x852>
 80116d6:	4621      	mov	r1, r4
 80116d8:	4653      	mov	r3, sl
 80116da:	2205      	movs	r2, #5
 80116dc:	4630      	mov	r0, r6
 80116de:	f000 f9cd 	bl	8011a7c <__multadd>
 80116e2:	4601      	mov	r1, r0
 80116e4:	4604      	mov	r4, r0
 80116e6:	4628      	mov	r0, r5
 80116e8:	f000 fbe8 	bl	8011ebc <__mcmp>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	f73f adeb 	bgt.w	80112c8 <_dtoa_r+0x428>
 80116f2:	9b08      	ldr	r3, [sp, #32]
 80116f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80116f8:	ea6f 0b03 	mvn.w	fp, r3
 80116fc:	f04f 0900 	mov.w	r9, #0
 8011700:	4621      	mov	r1, r4
 8011702:	4630      	mov	r0, r6
 8011704:	f000 f998 	bl	8011a38 <_Bfree>
 8011708:	2f00      	cmp	r7, #0
 801170a:	f43f aea8 	beq.w	801145e <_dtoa_r+0x5be>
 801170e:	f1b9 0f00 	cmp.w	r9, #0
 8011712:	d005      	beq.n	8011720 <_dtoa_r+0x880>
 8011714:	45b9      	cmp	r9, r7
 8011716:	d003      	beq.n	8011720 <_dtoa_r+0x880>
 8011718:	4649      	mov	r1, r9
 801171a:	4630      	mov	r0, r6
 801171c:	f000 f98c 	bl	8011a38 <_Bfree>
 8011720:	4639      	mov	r1, r7
 8011722:	4630      	mov	r0, r6
 8011724:	f000 f988 	bl	8011a38 <_Bfree>
 8011728:	e699      	b.n	801145e <_dtoa_r+0x5be>
 801172a:	2400      	movs	r4, #0
 801172c:	4627      	mov	r7, r4
 801172e:	e7e0      	b.n	80116f2 <_dtoa_r+0x852>
 8011730:	46bb      	mov	fp, r7
 8011732:	4604      	mov	r4, r0
 8011734:	4607      	mov	r7, r0
 8011736:	e5c7      	b.n	80112c8 <_dtoa_r+0x428>
 8011738:	9b07      	ldr	r3, [sp, #28]
 801173a:	46ca      	mov	sl, r9
 801173c:	2b00      	cmp	r3, #0
 801173e:	f000 8100 	beq.w	8011942 <_dtoa_r+0xaa2>
 8011742:	f1b8 0f00 	cmp.w	r8, #0
 8011746:	dd05      	ble.n	8011754 <_dtoa_r+0x8b4>
 8011748:	4639      	mov	r1, r7
 801174a:	4642      	mov	r2, r8
 801174c:	4630      	mov	r0, r6
 801174e:	f000 fb45 	bl	8011ddc <__lshift>
 8011752:	4607      	mov	r7, r0
 8011754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011756:	2b00      	cmp	r3, #0
 8011758:	d05d      	beq.n	8011816 <_dtoa_r+0x976>
 801175a:	6879      	ldr	r1, [r7, #4]
 801175c:	4630      	mov	r0, r6
 801175e:	f000 f92b 	bl	80119b8 <_Balloc>
 8011762:	4680      	mov	r8, r0
 8011764:	b928      	cbnz	r0, 8011772 <_dtoa_r+0x8d2>
 8011766:	4b82      	ldr	r3, [pc, #520]	; (8011970 <_dtoa_r+0xad0>)
 8011768:	4602      	mov	r2, r0
 801176a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801176e:	f7ff bbaf 	b.w	8010ed0 <_dtoa_r+0x30>
 8011772:	693a      	ldr	r2, [r7, #16]
 8011774:	3202      	adds	r2, #2
 8011776:	0092      	lsls	r2, r2, #2
 8011778:	f107 010c 	add.w	r1, r7, #12
 801177c:	300c      	adds	r0, #12
 801177e:	f000 f901 	bl	8011984 <memcpy>
 8011782:	2201      	movs	r2, #1
 8011784:	4641      	mov	r1, r8
 8011786:	4630      	mov	r0, r6
 8011788:	f000 fb28 	bl	8011ddc <__lshift>
 801178c:	9b01      	ldr	r3, [sp, #4]
 801178e:	3301      	adds	r3, #1
 8011790:	9304      	str	r3, [sp, #16]
 8011792:	9b01      	ldr	r3, [sp, #4]
 8011794:	4453      	add	r3, sl
 8011796:	9308      	str	r3, [sp, #32]
 8011798:	9b02      	ldr	r3, [sp, #8]
 801179a:	f003 0301 	and.w	r3, r3, #1
 801179e:	46b9      	mov	r9, r7
 80117a0:	9307      	str	r3, [sp, #28]
 80117a2:	4607      	mov	r7, r0
 80117a4:	9b04      	ldr	r3, [sp, #16]
 80117a6:	4621      	mov	r1, r4
 80117a8:	3b01      	subs	r3, #1
 80117aa:	4628      	mov	r0, r5
 80117ac:	9302      	str	r3, [sp, #8]
 80117ae:	f7ff fae9 	bl	8010d84 <quorem>
 80117b2:	4603      	mov	r3, r0
 80117b4:	3330      	adds	r3, #48	; 0x30
 80117b6:	9005      	str	r0, [sp, #20]
 80117b8:	4649      	mov	r1, r9
 80117ba:	4628      	mov	r0, r5
 80117bc:	9309      	str	r3, [sp, #36]	; 0x24
 80117be:	f000 fb7d 	bl	8011ebc <__mcmp>
 80117c2:	463a      	mov	r2, r7
 80117c4:	4682      	mov	sl, r0
 80117c6:	4621      	mov	r1, r4
 80117c8:	4630      	mov	r0, r6
 80117ca:	f000 fb93 	bl	8011ef4 <__mdiff>
 80117ce:	68c2      	ldr	r2, [r0, #12]
 80117d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117d2:	4680      	mov	r8, r0
 80117d4:	bb0a      	cbnz	r2, 801181a <_dtoa_r+0x97a>
 80117d6:	4601      	mov	r1, r0
 80117d8:	4628      	mov	r0, r5
 80117da:	f000 fb6f 	bl	8011ebc <__mcmp>
 80117de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117e0:	4602      	mov	r2, r0
 80117e2:	4641      	mov	r1, r8
 80117e4:	4630      	mov	r0, r6
 80117e6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80117ea:	f000 f925 	bl	8011a38 <_Bfree>
 80117ee:	9b06      	ldr	r3, [sp, #24]
 80117f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117f2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80117f6:	ea43 0102 	orr.w	r1, r3, r2
 80117fa:	9b07      	ldr	r3, [sp, #28]
 80117fc:	430b      	orrs	r3, r1
 80117fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011800:	d10d      	bne.n	801181e <_dtoa_r+0x97e>
 8011802:	2b39      	cmp	r3, #57	; 0x39
 8011804:	d029      	beq.n	801185a <_dtoa_r+0x9ba>
 8011806:	f1ba 0f00 	cmp.w	sl, #0
 801180a:	dd01      	ble.n	8011810 <_dtoa_r+0x970>
 801180c:	9b05      	ldr	r3, [sp, #20]
 801180e:	3331      	adds	r3, #49	; 0x31
 8011810:	9a02      	ldr	r2, [sp, #8]
 8011812:	7013      	strb	r3, [r2, #0]
 8011814:	e774      	b.n	8011700 <_dtoa_r+0x860>
 8011816:	4638      	mov	r0, r7
 8011818:	e7b8      	b.n	801178c <_dtoa_r+0x8ec>
 801181a:	2201      	movs	r2, #1
 801181c:	e7e1      	b.n	80117e2 <_dtoa_r+0x942>
 801181e:	f1ba 0f00 	cmp.w	sl, #0
 8011822:	db06      	blt.n	8011832 <_dtoa_r+0x992>
 8011824:	9906      	ldr	r1, [sp, #24]
 8011826:	ea41 0a0a 	orr.w	sl, r1, sl
 801182a:	9907      	ldr	r1, [sp, #28]
 801182c:	ea5a 0101 	orrs.w	r1, sl, r1
 8011830:	d120      	bne.n	8011874 <_dtoa_r+0x9d4>
 8011832:	2a00      	cmp	r2, #0
 8011834:	ddec      	ble.n	8011810 <_dtoa_r+0x970>
 8011836:	4629      	mov	r1, r5
 8011838:	2201      	movs	r2, #1
 801183a:	4630      	mov	r0, r6
 801183c:	9304      	str	r3, [sp, #16]
 801183e:	f000 facd 	bl	8011ddc <__lshift>
 8011842:	4621      	mov	r1, r4
 8011844:	4605      	mov	r5, r0
 8011846:	f000 fb39 	bl	8011ebc <__mcmp>
 801184a:	2800      	cmp	r0, #0
 801184c:	9b04      	ldr	r3, [sp, #16]
 801184e:	dc02      	bgt.n	8011856 <_dtoa_r+0x9b6>
 8011850:	d1de      	bne.n	8011810 <_dtoa_r+0x970>
 8011852:	07da      	lsls	r2, r3, #31
 8011854:	d5dc      	bpl.n	8011810 <_dtoa_r+0x970>
 8011856:	2b39      	cmp	r3, #57	; 0x39
 8011858:	d1d8      	bne.n	801180c <_dtoa_r+0x96c>
 801185a:	9a02      	ldr	r2, [sp, #8]
 801185c:	2339      	movs	r3, #57	; 0x39
 801185e:	7013      	strb	r3, [r2, #0]
 8011860:	4643      	mov	r3, r8
 8011862:	4698      	mov	r8, r3
 8011864:	3b01      	subs	r3, #1
 8011866:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801186a:	2a39      	cmp	r2, #57	; 0x39
 801186c:	d051      	beq.n	8011912 <_dtoa_r+0xa72>
 801186e:	3201      	adds	r2, #1
 8011870:	701a      	strb	r2, [r3, #0]
 8011872:	e745      	b.n	8011700 <_dtoa_r+0x860>
 8011874:	2a00      	cmp	r2, #0
 8011876:	dd03      	ble.n	8011880 <_dtoa_r+0x9e0>
 8011878:	2b39      	cmp	r3, #57	; 0x39
 801187a:	d0ee      	beq.n	801185a <_dtoa_r+0x9ba>
 801187c:	3301      	adds	r3, #1
 801187e:	e7c7      	b.n	8011810 <_dtoa_r+0x970>
 8011880:	9a04      	ldr	r2, [sp, #16]
 8011882:	9908      	ldr	r1, [sp, #32]
 8011884:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011888:	428a      	cmp	r2, r1
 801188a:	d02b      	beq.n	80118e4 <_dtoa_r+0xa44>
 801188c:	4629      	mov	r1, r5
 801188e:	2300      	movs	r3, #0
 8011890:	220a      	movs	r2, #10
 8011892:	4630      	mov	r0, r6
 8011894:	f000 f8f2 	bl	8011a7c <__multadd>
 8011898:	45b9      	cmp	r9, r7
 801189a:	4605      	mov	r5, r0
 801189c:	f04f 0300 	mov.w	r3, #0
 80118a0:	f04f 020a 	mov.w	r2, #10
 80118a4:	4649      	mov	r1, r9
 80118a6:	4630      	mov	r0, r6
 80118a8:	d107      	bne.n	80118ba <_dtoa_r+0xa1a>
 80118aa:	f000 f8e7 	bl	8011a7c <__multadd>
 80118ae:	4681      	mov	r9, r0
 80118b0:	4607      	mov	r7, r0
 80118b2:	9b04      	ldr	r3, [sp, #16]
 80118b4:	3301      	adds	r3, #1
 80118b6:	9304      	str	r3, [sp, #16]
 80118b8:	e774      	b.n	80117a4 <_dtoa_r+0x904>
 80118ba:	f000 f8df 	bl	8011a7c <__multadd>
 80118be:	4639      	mov	r1, r7
 80118c0:	4681      	mov	r9, r0
 80118c2:	2300      	movs	r3, #0
 80118c4:	220a      	movs	r2, #10
 80118c6:	4630      	mov	r0, r6
 80118c8:	f000 f8d8 	bl	8011a7c <__multadd>
 80118cc:	4607      	mov	r7, r0
 80118ce:	e7f0      	b.n	80118b2 <_dtoa_r+0xa12>
 80118d0:	f1ba 0f00 	cmp.w	sl, #0
 80118d4:	9a01      	ldr	r2, [sp, #4]
 80118d6:	bfcc      	ite	gt
 80118d8:	46d0      	movgt	r8, sl
 80118da:	f04f 0801 	movle.w	r8, #1
 80118de:	4490      	add	r8, r2
 80118e0:	f04f 0900 	mov.w	r9, #0
 80118e4:	4629      	mov	r1, r5
 80118e6:	2201      	movs	r2, #1
 80118e8:	4630      	mov	r0, r6
 80118ea:	9302      	str	r3, [sp, #8]
 80118ec:	f000 fa76 	bl	8011ddc <__lshift>
 80118f0:	4621      	mov	r1, r4
 80118f2:	4605      	mov	r5, r0
 80118f4:	f000 fae2 	bl	8011ebc <__mcmp>
 80118f8:	2800      	cmp	r0, #0
 80118fa:	dcb1      	bgt.n	8011860 <_dtoa_r+0x9c0>
 80118fc:	d102      	bne.n	8011904 <_dtoa_r+0xa64>
 80118fe:	9b02      	ldr	r3, [sp, #8]
 8011900:	07db      	lsls	r3, r3, #31
 8011902:	d4ad      	bmi.n	8011860 <_dtoa_r+0x9c0>
 8011904:	4643      	mov	r3, r8
 8011906:	4698      	mov	r8, r3
 8011908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801190c:	2a30      	cmp	r2, #48	; 0x30
 801190e:	d0fa      	beq.n	8011906 <_dtoa_r+0xa66>
 8011910:	e6f6      	b.n	8011700 <_dtoa_r+0x860>
 8011912:	9a01      	ldr	r2, [sp, #4]
 8011914:	429a      	cmp	r2, r3
 8011916:	d1a4      	bne.n	8011862 <_dtoa_r+0x9c2>
 8011918:	f10b 0b01 	add.w	fp, fp, #1
 801191c:	2331      	movs	r3, #49	; 0x31
 801191e:	e778      	b.n	8011812 <_dtoa_r+0x972>
 8011920:	4b14      	ldr	r3, [pc, #80]	; (8011974 <_dtoa_r+0xad4>)
 8011922:	f7ff bb27 	b.w	8010f74 <_dtoa_r+0xd4>
 8011926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011928:	2b00      	cmp	r3, #0
 801192a:	f47f ab03 	bne.w	8010f34 <_dtoa_r+0x94>
 801192e:	4b12      	ldr	r3, [pc, #72]	; (8011978 <_dtoa_r+0xad8>)
 8011930:	f7ff bb20 	b.w	8010f74 <_dtoa_r+0xd4>
 8011934:	f1ba 0f00 	cmp.w	sl, #0
 8011938:	dc03      	bgt.n	8011942 <_dtoa_r+0xaa2>
 801193a:	9b06      	ldr	r3, [sp, #24]
 801193c:	2b02      	cmp	r3, #2
 801193e:	f73f aec7 	bgt.w	80116d0 <_dtoa_r+0x830>
 8011942:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011946:	4621      	mov	r1, r4
 8011948:	4628      	mov	r0, r5
 801194a:	f7ff fa1b 	bl	8010d84 <quorem>
 801194e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011952:	f808 3b01 	strb.w	r3, [r8], #1
 8011956:	9a01      	ldr	r2, [sp, #4]
 8011958:	eba8 0202 	sub.w	r2, r8, r2
 801195c:	4592      	cmp	sl, r2
 801195e:	ddb7      	ble.n	80118d0 <_dtoa_r+0xa30>
 8011960:	4629      	mov	r1, r5
 8011962:	2300      	movs	r3, #0
 8011964:	220a      	movs	r2, #10
 8011966:	4630      	mov	r0, r6
 8011968:	f000 f888 	bl	8011a7c <__multadd>
 801196c:	4605      	mov	r5, r0
 801196e:	e7ea      	b.n	8011946 <_dtoa_r+0xaa6>
 8011970:	08012d47 	.word	0x08012d47
 8011974:	08012ca4 	.word	0x08012ca4
 8011978:	08012cc8 	.word	0x08012cc8

0801197c <_localeconv_r>:
 801197c:	4800      	ldr	r0, [pc, #0]	; (8011980 <_localeconv_r+0x4>)
 801197e:	4770      	bx	lr
 8011980:	240002d8 	.word	0x240002d8

08011984 <memcpy>:
 8011984:	440a      	add	r2, r1
 8011986:	4291      	cmp	r1, r2
 8011988:	f100 33ff 	add.w	r3, r0, #4294967295
 801198c:	d100      	bne.n	8011990 <memcpy+0xc>
 801198e:	4770      	bx	lr
 8011990:	b510      	push	{r4, lr}
 8011992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011996:	f803 4f01 	strb.w	r4, [r3, #1]!
 801199a:	4291      	cmp	r1, r2
 801199c:	d1f9      	bne.n	8011992 <memcpy+0xe>
 801199e:	bd10      	pop	{r4, pc}

080119a0 <__malloc_lock>:
 80119a0:	4801      	ldr	r0, [pc, #4]	; (80119a8 <__malloc_lock+0x8>)
 80119a2:	f000 bbd4 	b.w	801214e <__retarget_lock_acquire_recursive>
 80119a6:	bf00      	nop
 80119a8:	2400200c 	.word	0x2400200c

080119ac <__malloc_unlock>:
 80119ac:	4801      	ldr	r0, [pc, #4]	; (80119b4 <__malloc_unlock+0x8>)
 80119ae:	f000 bbcf 	b.w	8012150 <__retarget_lock_release_recursive>
 80119b2:	bf00      	nop
 80119b4:	2400200c 	.word	0x2400200c

080119b8 <_Balloc>:
 80119b8:	b570      	push	{r4, r5, r6, lr}
 80119ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80119bc:	4604      	mov	r4, r0
 80119be:	460d      	mov	r5, r1
 80119c0:	b976      	cbnz	r6, 80119e0 <_Balloc+0x28>
 80119c2:	2010      	movs	r0, #16
 80119c4:	f7fe fc92 	bl	80102ec <malloc>
 80119c8:	4602      	mov	r2, r0
 80119ca:	6260      	str	r0, [r4, #36]	; 0x24
 80119cc:	b920      	cbnz	r0, 80119d8 <_Balloc+0x20>
 80119ce:	4b18      	ldr	r3, [pc, #96]	; (8011a30 <_Balloc+0x78>)
 80119d0:	4818      	ldr	r0, [pc, #96]	; (8011a34 <_Balloc+0x7c>)
 80119d2:	2166      	movs	r1, #102	; 0x66
 80119d4:	f000 fb8a 	bl	80120ec <__assert_func>
 80119d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80119dc:	6006      	str	r6, [r0, #0]
 80119de:	60c6      	str	r6, [r0, #12]
 80119e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80119e2:	68f3      	ldr	r3, [r6, #12]
 80119e4:	b183      	cbz	r3, 8011a08 <_Balloc+0x50>
 80119e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80119e8:	68db      	ldr	r3, [r3, #12]
 80119ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80119ee:	b9b8      	cbnz	r0, 8011a20 <_Balloc+0x68>
 80119f0:	2101      	movs	r1, #1
 80119f2:	fa01 f605 	lsl.w	r6, r1, r5
 80119f6:	1d72      	adds	r2, r6, #5
 80119f8:	0092      	lsls	r2, r2, #2
 80119fa:	4620      	mov	r0, r4
 80119fc:	f000 fb60 	bl	80120c0 <_calloc_r>
 8011a00:	b160      	cbz	r0, 8011a1c <_Balloc+0x64>
 8011a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a06:	e00e      	b.n	8011a26 <_Balloc+0x6e>
 8011a08:	2221      	movs	r2, #33	; 0x21
 8011a0a:	2104      	movs	r1, #4
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f000 fb57 	bl	80120c0 <_calloc_r>
 8011a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a14:	60f0      	str	r0, [r6, #12]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d1e4      	bne.n	80119e6 <_Balloc+0x2e>
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}
 8011a20:	6802      	ldr	r2, [r0, #0]
 8011a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a26:	2300      	movs	r3, #0
 8011a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011a2c:	e7f7      	b.n	8011a1e <_Balloc+0x66>
 8011a2e:	bf00      	nop
 8011a30:	08012cd5 	.word	0x08012cd5
 8011a34:	08012d58 	.word	0x08012d58

08011a38 <_Bfree>:
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a3c:	4605      	mov	r5, r0
 8011a3e:	460c      	mov	r4, r1
 8011a40:	b976      	cbnz	r6, 8011a60 <_Bfree+0x28>
 8011a42:	2010      	movs	r0, #16
 8011a44:	f7fe fc52 	bl	80102ec <malloc>
 8011a48:	4602      	mov	r2, r0
 8011a4a:	6268      	str	r0, [r5, #36]	; 0x24
 8011a4c:	b920      	cbnz	r0, 8011a58 <_Bfree+0x20>
 8011a4e:	4b09      	ldr	r3, [pc, #36]	; (8011a74 <_Bfree+0x3c>)
 8011a50:	4809      	ldr	r0, [pc, #36]	; (8011a78 <_Bfree+0x40>)
 8011a52:	218a      	movs	r1, #138	; 0x8a
 8011a54:	f000 fb4a 	bl	80120ec <__assert_func>
 8011a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a5c:	6006      	str	r6, [r0, #0]
 8011a5e:	60c6      	str	r6, [r0, #12]
 8011a60:	b13c      	cbz	r4, 8011a72 <_Bfree+0x3a>
 8011a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011a64:	6862      	ldr	r2, [r4, #4]
 8011a66:	68db      	ldr	r3, [r3, #12]
 8011a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011a6c:	6021      	str	r1, [r4, #0]
 8011a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011a72:	bd70      	pop	{r4, r5, r6, pc}
 8011a74:	08012cd5 	.word	0x08012cd5
 8011a78:	08012d58 	.word	0x08012d58

08011a7c <__multadd>:
 8011a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a80:	690d      	ldr	r5, [r1, #16]
 8011a82:	4607      	mov	r7, r0
 8011a84:	460c      	mov	r4, r1
 8011a86:	461e      	mov	r6, r3
 8011a88:	f101 0c14 	add.w	ip, r1, #20
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	f8dc 3000 	ldr.w	r3, [ip]
 8011a92:	b299      	uxth	r1, r3
 8011a94:	fb02 6101 	mla	r1, r2, r1, r6
 8011a98:	0c1e      	lsrs	r6, r3, #16
 8011a9a:	0c0b      	lsrs	r3, r1, #16
 8011a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8011aa0:	b289      	uxth	r1, r1
 8011aa2:	3001      	adds	r0, #1
 8011aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011aa8:	4285      	cmp	r5, r0
 8011aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8011aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011ab2:	dcec      	bgt.n	8011a8e <__multadd+0x12>
 8011ab4:	b30e      	cbz	r6, 8011afa <__multadd+0x7e>
 8011ab6:	68a3      	ldr	r3, [r4, #8]
 8011ab8:	42ab      	cmp	r3, r5
 8011aba:	dc19      	bgt.n	8011af0 <__multadd+0x74>
 8011abc:	6861      	ldr	r1, [r4, #4]
 8011abe:	4638      	mov	r0, r7
 8011ac0:	3101      	adds	r1, #1
 8011ac2:	f7ff ff79 	bl	80119b8 <_Balloc>
 8011ac6:	4680      	mov	r8, r0
 8011ac8:	b928      	cbnz	r0, 8011ad6 <__multadd+0x5a>
 8011aca:	4602      	mov	r2, r0
 8011acc:	4b0c      	ldr	r3, [pc, #48]	; (8011b00 <__multadd+0x84>)
 8011ace:	480d      	ldr	r0, [pc, #52]	; (8011b04 <__multadd+0x88>)
 8011ad0:	21b5      	movs	r1, #181	; 0xb5
 8011ad2:	f000 fb0b 	bl	80120ec <__assert_func>
 8011ad6:	6922      	ldr	r2, [r4, #16]
 8011ad8:	3202      	adds	r2, #2
 8011ada:	f104 010c 	add.w	r1, r4, #12
 8011ade:	0092      	lsls	r2, r2, #2
 8011ae0:	300c      	adds	r0, #12
 8011ae2:	f7ff ff4f 	bl	8011984 <memcpy>
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	4638      	mov	r0, r7
 8011aea:	f7ff ffa5 	bl	8011a38 <_Bfree>
 8011aee:	4644      	mov	r4, r8
 8011af0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011af4:	3501      	adds	r5, #1
 8011af6:	615e      	str	r6, [r3, #20]
 8011af8:	6125      	str	r5, [r4, #16]
 8011afa:	4620      	mov	r0, r4
 8011afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b00:	08012d47 	.word	0x08012d47
 8011b04:	08012d58 	.word	0x08012d58

08011b08 <__hi0bits>:
 8011b08:	0c03      	lsrs	r3, r0, #16
 8011b0a:	041b      	lsls	r3, r3, #16
 8011b0c:	b9d3      	cbnz	r3, 8011b44 <__hi0bits+0x3c>
 8011b0e:	0400      	lsls	r0, r0, #16
 8011b10:	2310      	movs	r3, #16
 8011b12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011b16:	bf04      	itt	eq
 8011b18:	0200      	lsleq	r0, r0, #8
 8011b1a:	3308      	addeq	r3, #8
 8011b1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011b20:	bf04      	itt	eq
 8011b22:	0100      	lsleq	r0, r0, #4
 8011b24:	3304      	addeq	r3, #4
 8011b26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011b2a:	bf04      	itt	eq
 8011b2c:	0080      	lsleq	r0, r0, #2
 8011b2e:	3302      	addeq	r3, #2
 8011b30:	2800      	cmp	r0, #0
 8011b32:	db05      	blt.n	8011b40 <__hi0bits+0x38>
 8011b34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011b38:	f103 0301 	add.w	r3, r3, #1
 8011b3c:	bf08      	it	eq
 8011b3e:	2320      	moveq	r3, #32
 8011b40:	4618      	mov	r0, r3
 8011b42:	4770      	bx	lr
 8011b44:	2300      	movs	r3, #0
 8011b46:	e7e4      	b.n	8011b12 <__hi0bits+0xa>

08011b48 <__lo0bits>:
 8011b48:	6803      	ldr	r3, [r0, #0]
 8011b4a:	f013 0207 	ands.w	r2, r3, #7
 8011b4e:	4601      	mov	r1, r0
 8011b50:	d00b      	beq.n	8011b6a <__lo0bits+0x22>
 8011b52:	07da      	lsls	r2, r3, #31
 8011b54:	d423      	bmi.n	8011b9e <__lo0bits+0x56>
 8011b56:	0798      	lsls	r0, r3, #30
 8011b58:	bf49      	itett	mi
 8011b5a:	085b      	lsrmi	r3, r3, #1
 8011b5c:	089b      	lsrpl	r3, r3, #2
 8011b5e:	2001      	movmi	r0, #1
 8011b60:	600b      	strmi	r3, [r1, #0]
 8011b62:	bf5c      	itt	pl
 8011b64:	600b      	strpl	r3, [r1, #0]
 8011b66:	2002      	movpl	r0, #2
 8011b68:	4770      	bx	lr
 8011b6a:	b298      	uxth	r0, r3
 8011b6c:	b9a8      	cbnz	r0, 8011b9a <__lo0bits+0x52>
 8011b6e:	0c1b      	lsrs	r3, r3, #16
 8011b70:	2010      	movs	r0, #16
 8011b72:	b2da      	uxtb	r2, r3
 8011b74:	b90a      	cbnz	r2, 8011b7a <__lo0bits+0x32>
 8011b76:	3008      	adds	r0, #8
 8011b78:	0a1b      	lsrs	r3, r3, #8
 8011b7a:	071a      	lsls	r2, r3, #28
 8011b7c:	bf04      	itt	eq
 8011b7e:	091b      	lsreq	r3, r3, #4
 8011b80:	3004      	addeq	r0, #4
 8011b82:	079a      	lsls	r2, r3, #30
 8011b84:	bf04      	itt	eq
 8011b86:	089b      	lsreq	r3, r3, #2
 8011b88:	3002      	addeq	r0, #2
 8011b8a:	07da      	lsls	r2, r3, #31
 8011b8c:	d403      	bmi.n	8011b96 <__lo0bits+0x4e>
 8011b8e:	085b      	lsrs	r3, r3, #1
 8011b90:	f100 0001 	add.w	r0, r0, #1
 8011b94:	d005      	beq.n	8011ba2 <__lo0bits+0x5a>
 8011b96:	600b      	str	r3, [r1, #0]
 8011b98:	4770      	bx	lr
 8011b9a:	4610      	mov	r0, r2
 8011b9c:	e7e9      	b.n	8011b72 <__lo0bits+0x2a>
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	4770      	bx	lr
 8011ba2:	2020      	movs	r0, #32
 8011ba4:	4770      	bx	lr
	...

08011ba8 <__i2b>:
 8011ba8:	b510      	push	{r4, lr}
 8011baa:	460c      	mov	r4, r1
 8011bac:	2101      	movs	r1, #1
 8011bae:	f7ff ff03 	bl	80119b8 <_Balloc>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	b928      	cbnz	r0, 8011bc2 <__i2b+0x1a>
 8011bb6:	4b05      	ldr	r3, [pc, #20]	; (8011bcc <__i2b+0x24>)
 8011bb8:	4805      	ldr	r0, [pc, #20]	; (8011bd0 <__i2b+0x28>)
 8011bba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011bbe:	f000 fa95 	bl	80120ec <__assert_func>
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	6144      	str	r4, [r0, #20]
 8011bc6:	6103      	str	r3, [r0, #16]
 8011bc8:	bd10      	pop	{r4, pc}
 8011bca:	bf00      	nop
 8011bcc:	08012d47 	.word	0x08012d47
 8011bd0:	08012d58 	.word	0x08012d58

08011bd4 <__multiply>:
 8011bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd8:	4691      	mov	r9, r2
 8011bda:	690a      	ldr	r2, [r1, #16]
 8011bdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	bfb8      	it	lt
 8011be4:	460b      	movlt	r3, r1
 8011be6:	460c      	mov	r4, r1
 8011be8:	bfbc      	itt	lt
 8011bea:	464c      	movlt	r4, r9
 8011bec:	4699      	movlt	r9, r3
 8011bee:	6927      	ldr	r7, [r4, #16]
 8011bf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011bf4:	68a3      	ldr	r3, [r4, #8]
 8011bf6:	6861      	ldr	r1, [r4, #4]
 8011bf8:	eb07 060a 	add.w	r6, r7, sl
 8011bfc:	42b3      	cmp	r3, r6
 8011bfe:	b085      	sub	sp, #20
 8011c00:	bfb8      	it	lt
 8011c02:	3101      	addlt	r1, #1
 8011c04:	f7ff fed8 	bl	80119b8 <_Balloc>
 8011c08:	b930      	cbnz	r0, 8011c18 <__multiply+0x44>
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	4b44      	ldr	r3, [pc, #272]	; (8011d20 <__multiply+0x14c>)
 8011c0e:	4845      	ldr	r0, [pc, #276]	; (8011d24 <__multiply+0x150>)
 8011c10:	f240 115d 	movw	r1, #349	; 0x15d
 8011c14:	f000 fa6a 	bl	80120ec <__assert_func>
 8011c18:	f100 0514 	add.w	r5, r0, #20
 8011c1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011c20:	462b      	mov	r3, r5
 8011c22:	2200      	movs	r2, #0
 8011c24:	4543      	cmp	r3, r8
 8011c26:	d321      	bcc.n	8011c6c <__multiply+0x98>
 8011c28:	f104 0314 	add.w	r3, r4, #20
 8011c2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011c30:	f109 0314 	add.w	r3, r9, #20
 8011c34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011c38:	9202      	str	r2, [sp, #8]
 8011c3a:	1b3a      	subs	r2, r7, r4
 8011c3c:	3a15      	subs	r2, #21
 8011c3e:	f022 0203 	bic.w	r2, r2, #3
 8011c42:	3204      	adds	r2, #4
 8011c44:	f104 0115 	add.w	r1, r4, #21
 8011c48:	428f      	cmp	r7, r1
 8011c4a:	bf38      	it	cc
 8011c4c:	2204      	movcc	r2, #4
 8011c4e:	9201      	str	r2, [sp, #4]
 8011c50:	9a02      	ldr	r2, [sp, #8]
 8011c52:	9303      	str	r3, [sp, #12]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d80c      	bhi.n	8011c72 <__multiply+0x9e>
 8011c58:	2e00      	cmp	r6, #0
 8011c5a:	dd03      	ble.n	8011c64 <__multiply+0x90>
 8011c5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d05a      	beq.n	8011d1a <__multiply+0x146>
 8011c64:	6106      	str	r6, [r0, #16]
 8011c66:	b005      	add	sp, #20
 8011c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c6c:	f843 2b04 	str.w	r2, [r3], #4
 8011c70:	e7d8      	b.n	8011c24 <__multiply+0x50>
 8011c72:	f8b3 a000 	ldrh.w	sl, [r3]
 8011c76:	f1ba 0f00 	cmp.w	sl, #0
 8011c7a:	d024      	beq.n	8011cc6 <__multiply+0xf2>
 8011c7c:	f104 0e14 	add.w	lr, r4, #20
 8011c80:	46a9      	mov	r9, r5
 8011c82:	f04f 0c00 	mov.w	ip, #0
 8011c86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011c8a:	f8d9 1000 	ldr.w	r1, [r9]
 8011c8e:	fa1f fb82 	uxth.w	fp, r2
 8011c92:	b289      	uxth	r1, r1
 8011c94:	fb0a 110b 	mla	r1, sl, fp, r1
 8011c98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8011ca0:	4461      	add	r1, ip
 8011ca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011ca6:	fb0a c20b 	mla	r2, sl, fp, ip
 8011caa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011cae:	b289      	uxth	r1, r1
 8011cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011cb4:	4577      	cmp	r7, lr
 8011cb6:	f849 1b04 	str.w	r1, [r9], #4
 8011cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011cbe:	d8e2      	bhi.n	8011c86 <__multiply+0xb2>
 8011cc0:	9a01      	ldr	r2, [sp, #4]
 8011cc2:	f845 c002 	str.w	ip, [r5, r2]
 8011cc6:	9a03      	ldr	r2, [sp, #12]
 8011cc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011ccc:	3304      	adds	r3, #4
 8011cce:	f1b9 0f00 	cmp.w	r9, #0
 8011cd2:	d020      	beq.n	8011d16 <__multiply+0x142>
 8011cd4:	6829      	ldr	r1, [r5, #0]
 8011cd6:	f104 0c14 	add.w	ip, r4, #20
 8011cda:	46ae      	mov	lr, r5
 8011cdc:	f04f 0a00 	mov.w	sl, #0
 8011ce0:	f8bc b000 	ldrh.w	fp, [ip]
 8011ce4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011ce8:	fb09 220b 	mla	r2, r9, fp, r2
 8011cec:	4492      	add	sl, r2
 8011cee:	b289      	uxth	r1, r1
 8011cf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011cf4:	f84e 1b04 	str.w	r1, [lr], #4
 8011cf8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011cfc:	f8be 1000 	ldrh.w	r1, [lr]
 8011d00:	0c12      	lsrs	r2, r2, #16
 8011d02:	fb09 1102 	mla	r1, r9, r2, r1
 8011d06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011d0a:	4567      	cmp	r7, ip
 8011d0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011d10:	d8e6      	bhi.n	8011ce0 <__multiply+0x10c>
 8011d12:	9a01      	ldr	r2, [sp, #4]
 8011d14:	50a9      	str	r1, [r5, r2]
 8011d16:	3504      	adds	r5, #4
 8011d18:	e79a      	b.n	8011c50 <__multiply+0x7c>
 8011d1a:	3e01      	subs	r6, #1
 8011d1c:	e79c      	b.n	8011c58 <__multiply+0x84>
 8011d1e:	bf00      	nop
 8011d20:	08012d47 	.word	0x08012d47
 8011d24:	08012d58 	.word	0x08012d58

08011d28 <__pow5mult>:
 8011d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d2c:	4615      	mov	r5, r2
 8011d2e:	f012 0203 	ands.w	r2, r2, #3
 8011d32:	4606      	mov	r6, r0
 8011d34:	460f      	mov	r7, r1
 8011d36:	d007      	beq.n	8011d48 <__pow5mult+0x20>
 8011d38:	4c25      	ldr	r4, [pc, #148]	; (8011dd0 <__pow5mult+0xa8>)
 8011d3a:	3a01      	subs	r2, #1
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011d42:	f7ff fe9b 	bl	8011a7c <__multadd>
 8011d46:	4607      	mov	r7, r0
 8011d48:	10ad      	asrs	r5, r5, #2
 8011d4a:	d03d      	beq.n	8011dc8 <__pow5mult+0xa0>
 8011d4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011d4e:	b97c      	cbnz	r4, 8011d70 <__pow5mult+0x48>
 8011d50:	2010      	movs	r0, #16
 8011d52:	f7fe facb 	bl	80102ec <malloc>
 8011d56:	4602      	mov	r2, r0
 8011d58:	6270      	str	r0, [r6, #36]	; 0x24
 8011d5a:	b928      	cbnz	r0, 8011d68 <__pow5mult+0x40>
 8011d5c:	4b1d      	ldr	r3, [pc, #116]	; (8011dd4 <__pow5mult+0xac>)
 8011d5e:	481e      	ldr	r0, [pc, #120]	; (8011dd8 <__pow5mult+0xb0>)
 8011d60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011d64:	f000 f9c2 	bl	80120ec <__assert_func>
 8011d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d6c:	6004      	str	r4, [r0, #0]
 8011d6e:	60c4      	str	r4, [r0, #12]
 8011d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d78:	b94c      	cbnz	r4, 8011d8e <__pow5mult+0x66>
 8011d7a:	f240 2171 	movw	r1, #625	; 0x271
 8011d7e:	4630      	mov	r0, r6
 8011d80:	f7ff ff12 	bl	8011ba8 <__i2b>
 8011d84:	2300      	movs	r3, #0
 8011d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d8a:	4604      	mov	r4, r0
 8011d8c:	6003      	str	r3, [r0, #0]
 8011d8e:	f04f 0900 	mov.w	r9, #0
 8011d92:	07eb      	lsls	r3, r5, #31
 8011d94:	d50a      	bpl.n	8011dac <__pow5mult+0x84>
 8011d96:	4639      	mov	r1, r7
 8011d98:	4622      	mov	r2, r4
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	f7ff ff1a 	bl	8011bd4 <__multiply>
 8011da0:	4639      	mov	r1, r7
 8011da2:	4680      	mov	r8, r0
 8011da4:	4630      	mov	r0, r6
 8011da6:	f7ff fe47 	bl	8011a38 <_Bfree>
 8011daa:	4647      	mov	r7, r8
 8011dac:	106d      	asrs	r5, r5, #1
 8011dae:	d00b      	beq.n	8011dc8 <__pow5mult+0xa0>
 8011db0:	6820      	ldr	r0, [r4, #0]
 8011db2:	b938      	cbnz	r0, 8011dc4 <__pow5mult+0x9c>
 8011db4:	4622      	mov	r2, r4
 8011db6:	4621      	mov	r1, r4
 8011db8:	4630      	mov	r0, r6
 8011dba:	f7ff ff0b 	bl	8011bd4 <__multiply>
 8011dbe:	6020      	str	r0, [r4, #0]
 8011dc0:	f8c0 9000 	str.w	r9, [r0]
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	e7e4      	b.n	8011d92 <__pow5mult+0x6a>
 8011dc8:	4638      	mov	r0, r7
 8011dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dce:	bf00      	nop
 8011dd0:	08012ea8 	.word	0x08012ea8
 8011dd4:	08012cd5 	.word	0x08012cd5
 8011dd8:	08012d58 	.word	0x08012d58

08011ddc <__lshift>:
 8011ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de0:	460c      	mov	r4, r1
 8011de2:	6849      	ldr	r1, [r1, #4]
 8011de4:	6923      	ldr	r3, [r4, #16]
 8011de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011dea:	68a3      	ldr	r3, [r4, #8]
 8011dec:	4607      	mov	r7, r0
 8011dee:	4691      	mov	r9, r2
 8011df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011df4:	f108 0601 	add.w	r6, r8, #1
 8011df8:	42b3      	cmp	r3, r6
 8011dfa:	db0b      	blt.n	8011e14 <__lshift+0x38>
 8011dfc:	4638      	mov	r0, r7
 8011dfe:	f7ff fddb 	bl	80119b8 <_Balloc>
 8011e02:	4605      	mov	r5, r0
 8011e04:	b948      	cbnz	r0, 8011e1a <__lshift+0x3e>
 8011e06:	4602      	mov	r2, r0
 8011e08:	4b2a      	ldr	r3, [pc, #168]	; (8011eb4 <__lshift+0xd8>)
 8011e0a:	482b      	ldr	r0, [pc, #172]	; (8011eb8 <__lshift+0xdc>)
 8011e0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011e10:	f000 f96c 	bl	80120ec <__assert_func>
 8011e14:	3101      	adds	r1, #1
 8011e16:	005b      	lsls	r3, r3, #1
 8011e18:	e7ee      	b.n	8011df8 <__lshift+0x1c>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	f100 0114 	add.w	r1, r0, #20
 8011e20:	f100 0210 	add.w	r2, r0, #16
 8011e24:	4618      	mov	r0, r3
 8011e26:	4553      	cmp	r3, sl
 8011e28:	db37      	blt.n	8011e9a <__lshift+0xbe>
 8011e2a:	6920      	ldr	r0, [r4, #16]
 8011e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011e30:	f104 0314 	add.w	r3, r4, #20
 8011e34:	f019 091f 	ands.w	r9, r9, #31
 8011e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011e3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011e40:	d02f      	beq.n	8011ea2 <__lshift+0xc6>
 8011e42:	f1c9 0e20 	rsb	lr, r9, #32
 8011e46:	468a      	mov	sl, r1
 8011e48:	f04f 0c00 	mov.w	ip, #0
 8011e4c:	681a      	ldr	r2, [r3, #0]
 8011e4e:	fa02 f209 	lsl.w	r2, r2, r9
 8011e52:	ea42 020c 	orr.w	r2, r2, ip
 8011e56:	f84a 2b04 	str.w	r2, [sl], #4
 8011e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e5e:	4298      	cmp	r0, r3
 8011e60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011e64:	d8f2      	bhi.n	8011e4c <__lshift+0x70>
 8011e66:	1b03      	subs	r3, r0, r4
 8011e68:	3b15      	subs	r3, #21
 8011e6a:	f023 0303 	bic.w	r3, r3, #3
 8011e6e:	3304      	adds	r3, #4
 8011e70:	f104 0215 	add.w	r2, r4, #21
 8011e74:	4290      	cmp	r0, r2
 8011e76:	bf38      	it	cc
 8011e78:	2304      	movcc	r3, #4
 8011e7a:	f841 c003 	str.w	ip, [r1, r3]
 8011e7e:	f1bc 0f00 	cmp.w	ip, #0
 8011e82:	d001      	beq.n	8011e88 <__lshift+0xac>
 8011e84:	f108 0602 	add.w	r6, r8, #2
 8011e88:	3e01      	subs	r6, #1
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	612e      	str	r6, [r5, #16]
 8011e8e:	4621      	mov	r1, r4
 8011e90:	f7ff fdd2 	bl	8011a38 <_Bfree>
 8011e94:	4628      	mov	r0, r5
 8011e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	e7c1      	b.n	8011e26 <__lshift+0x4a>
 8011ea2:	3904      	subs	r1, #4
 8011ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011eac:	4298      	cmp	r0, r3
 8011eae:	d8f9      	bhi.n	8011ea4 <__lshift+0xc8>
 8011eb0:	e7ea      	b.n	8011e88 <__lshift+0xac>
 8011eb2:	bf00      	nop
 8011eb4:	08012d47 	.word	0x08012d47
 8011eb8:	08012d58 	.word	0x08012d58

08011ebc <__mcmp>:
 8011ebc:	b530      	push	{r4, r5, lr}
 8011ebe:	6902      	ldr	r2, [r0, #16]
 8011ec0:	690c      	ldr	r4, [r1, #16]
 8011ec2:	1b12      	subs	r2, r2, r4
 8011ec4:	d10e      	bne.n	8011ee4 <__mcmp+0x28>
 8011ec6:	f100 0314 	add.w	r3, r0, #20
 8011eca:	3114      	adds	r1, #20
 8011ecc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ed0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011ed4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011ed8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011edc:	42a5      	cmp	r5, r4
 8011ede:	d003      	beq.n	8011ee8 <__mcmp+0x2c>
 8011ee0:	d305      	bcc.n	8011eee <__mcmp+0x32>
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	4610      	mov	r0, r2
 8011ee6:	bd30      	pop	{r4, r5, pc}
 8011ee8:	4283      	cmp	r3, r0
 8011eea:	d3f3      	bcc.n	8011ed4 <__mcmp+0x18>
 8011eec:	e7fa      	b.n	8011ee4 <__mcmp+0x28>
 8011eee:	f04f 32ff 	mov.w	r2, #4294967295
 8011ef2:	e7f7      	b.n	8011ee4 <__mcmp+0x28>

08011ef4 <__mdiff>:
 8011ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ef8:	460c      	mov	r4, r1
 8011efa:	4606      	mov	r6, r0
 8011efc:	4611      	mov	r1, r2
 8011efe:	4620      	mov	r0, r4
 8011f00:	4690      	mov	r8, r2
 8011f02:	f7ff ffdb 	bl	8011ebc <__mcmp>
 8011f06:	1e05      	subs	r5, r0, #0
 8011f08:	d110      	bne.n	8011f2c <__mdiff+0x38>
 8011f0a:	4629      	mov	r1, r5
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	f7ff fd53 	bl	80119b8 <_Balloc>
 8011f12:	b930      	cbnz	r0, 8011f22 <__mdiff+0x2e>
 8011f14:	4b3a      	ldr	r3, [pc, #232]	; (8012000 <__mdiff+0x10c>)
 8011f16:	4602      	mov	r2, r0
 8011f18:	f240 2132 	movw	r1, #562	; 0x232
 8011f1c:	4839      	ldr	r0, [pc, #228]	; (8012004 <__mdiff+0x110>)
 8011f1e:	f000 f8e5 	bl	80120ec <__assert_func>
 8011f22:	2301      	movs	r3, #1
 8011f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f2c:	bfa4      	itt	ge
 8011f2e:	4643      	movge	r3, r8
 8011f30:	46a0      	movge	r8, r4
 8011f32:	4630      	mov	r0, r6
 8011f34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011f38:	bfa6      	itte	ge
 8011f3a:	461c      	movge	r4, r3
 8011f3c:	2500      	movge	r5, #0
 8011f3e:	2501      	movlt	r5, #1
 8011f40:	f7ff fd3a 	bl	80119b8 <_Balloc>
 8011f44:	b920      	cbnz	r0, 8011f50 <__mdiff+0x5c>
 8011f46:	4b2e      	ldr	r3, [pc, #184]	; (8012000 <__mdiff+0x10c>)
 8011f48:	4602      	mov	r2, r0
 8011f4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011f4e:	e7e5      	b.n	8011f1c <__mdiff+0x28>
 8011f50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011f54:	6926      	ldr	r6, [r4, #16]
 8011f56:	60c5      	str	r5, [r0, #12]
 8011f58:	f104 0914 	add.w	r9, r4, #20
 8011f5c:	f108 0514 	add.w	r5, r8, #20
 8011f60:	f100 0e14 	add.w	lr, r0, #20
 8011f64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011f68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011f6c:	f108 0210 	add.w	r2, r8, #16
 8011f70:	46f2      	mov	sl, lr
 8011f72:	2100      	movs	r1, #0
 8011f74:	f859 3b04 	ldr.w	r3, [r9], #4
 8011f78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011f7c:	fa1f f883 	uxth.w	r8, r3
 8011f80:	fa11 f18b 	uxtah	r1, r1, fp
 8011f84:	0c1b      	lsrs	r3, r3, #16
 8011f86:	eba1 0808 	sub.w	r8, r1, r8
 8011f8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011f8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011f92:	fa1f f888 	uxth.w	r8, r8
 8011f96:	1419      	asrs	r1, r3, #16
 8011f98:	454e      	cmp	r6, r9
 8011f9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011f9e:	f84a 3b04 	str.w	r3, [sl], #4
 8011fa2:	d8e7      	bhi.n	8011f74 <__mdiff+0x80>
 8011fa4:	1b33      	subs	r3, r6, r4
 8011fa6:	3b15      	subs	r3, #21
 8011fa8:	f023 0303 	bic.w	r3, r3, #3
 8011fac:	3304      	adds	r3, #4
 8011fae:	3415      	adds	r4, #21
 8011fb0:	42a6      	cmp	r6, r4
 8011fb2:	bf38      	it	cc
 8011fb4:	2304      	movcc	r3, #4
 8011fb6:	441d      	add	r5, r3
 8011fb8:	4473      	add	r3, lr
 8011fba:	469e      	mov	lr, r3
 8011fbc:	462e      	mov	r6, r5
 8011fbe:	4566      	cmp	r6, ip
 8011fc0:	d30e      	bcc.n	8011fe0 <__mdiff+0xec>
 8011fc2:	f10c 0203 	add.w	r2, ip, #3
 8011fc6:	1b52      	subs	r2, r2, r5
 8011fc8:	f022 0203 	bic.w	r2, r2, #3
 8011fcc:	3d03      	subs	r5, #3
 8011fce:	45ac      	cmp	ip, r5
 8011fd0:	bf38      	it	cc
 8011fd2:	2200      	movcc	r2, #0
 8011fd4:	441a      	add	r2, r3
 8011fd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011fda:	b17b      	cbz	r3, 8011ffc <__mdiff+0x108>
 8011fdc:	6107      	str	r7, [r0, #16]
 8011fde:	e7a3      	b.n	8011f28 <__mdiff+0x34>
 8011fe0:	f856 8b04 	ldr.w	r8, [r6], #4
 8011fe4:	fa11 f288 	uxtah	r2, r1, r8
 8011fe8:	1414      	asrs	r4, r2, #16
 8011fea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011fee:	b292      	uxth	r2, r2
 8011ff0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011ff4:	f84e 2b04 	str.w	r2, [lr], #4
 8011ff8:	1421      	asrs	r1, r4, #16
 8011ffa:	e7e0      	b.n	8011fbe <__mdiff+0xca>
 8011ffc:	3f01      	subs	r7, #1
 8011ffe:	e7ea      	b.n	8011fd6 <__mdiff+0xe2>
 8012000:	08012d47 	.word	0x08012d47
 8012004:	08012d58 	.word	0x08012d58

08012008 <__d2b>:
 8012008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801200c:	4689      	mov	r9, r1
 801200e:	2101      	movs	r1, #1
 8012010:	ec57 6b10 	vmov	r6, r7, d0
 8012014:	4690      	mov	r8, r2
 8012016:	f7ff fccf 	bl	80119b8 <_Balloc>
 801201a:	4604      	mov	r4, r0
 801201c:	b930      	cbnz	r0, 801202c <__d2b+0x24>
 801201e:	4602      	mov	r2, r0
 8012020:	4b25      	ldr	r3, [pc, #148]	; (80120b8 <__d2b+0xb0>)
 8012022:	4826      	ldr	r0, [pc, #152]	; (80120bc <__d2b+0xb4>)
 8012024:	f240 310a 	movw	r1, #778	; 0x30a
 8012028:	f000 f860 	bl	80120ec <__assert_func>
 801202c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012034:	bb35      	cbnz	r5, 8012084 <__d2b+0x7c>
 8012036:	2e00      	cmp	r6, #0
 8012038:	9301      	str	r3, [sp, #4]
 801203a:	d028      	beq.n	801208e <__d2b+0x86>
 801203c:	4668      	mov	r0, sp
 801203e:	9600      	str	r6, [sp, #0]
 8012040:	f7ff fd82 	bl	8011b48 <__lo0bits>
 8012044:	9900      	ldr	r1, [sp, #0]
 8012046:	b300      	cbz	r0, 801208a <__d2b+0x82>
 8012048:	9a01      	ldr	r2, [sp, #4]
 801204a:	f1c0 0320 	rsb	r3, r0, #32
 801204e:	fa02 f303 	lsl.w	r3, r2, r3
 8012052:	430b      	orrs	r3, r1
 8012054:	40c2      	lsrs	r2, r0
 8012056:	6163      	str	r3, [r4, #20]
 8012058:	9201      	str	r2, [sp, #4]
 801205a:	9b01      	ldr	r3, [sp, #4]
 801205c:	61a3      	str	r3, [r4, #24]
 801205e:	2b00      	cmp	r3, #0
 8012060:	bf14      	ite	ne
 8012062:	2202      	movne	r2, #2
 8012064:	2201      	moveq	r2, #1
 8012066:	6122      	str	r2, [r4, #16]
 8012068:	b1d5      	cbz	r5, 80120a0 <__d2b+0x98>
 801206a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801206e:	4405      	add	r5, r0
 8012070:	f8c9 5000 	str.w	r5, [r9]
 8012074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012078:	f8c8 0000 	str.w	r0, [r8]
 801207c:	4620      	mov	r0, r4
 801207e:	b003      	add	sp, #12
 8012080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012088:	e7d5      	b.n	8012036 <__d2b+0x2e>
 801208a:	6161      	str	r1, [r4, #20]
 801208c:	e7e5      	b.n	801205a <__d2b+0x52>
 801208e:	a801      	add	r0, sp, #4
 8012090:	f7ff fd5a 	bl	8011b48 <__lo0bits>
 8012094:	9b01      	ldr	r3, [sp, #4]
 8012096:	6163      	str	r3, [r4, #20]
 8012098:	2201      	movs	r2, #1
 801209a:	6122      	str	r2, [r4, #16]
 801209c:	3020      	adds	r0, #32
 801209e:	e7e3      	b.n	8012068 <__d2b+0x60>
 80120a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80120a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80120a8:	f8c9 0000 	str.w	r0, [r9]
 80120ac:	6918      	ldr	r0, [r3, #16]
 80120ae:	f7ff fd2b 	bl	8011b08 <__hi0bits>
 80120b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120b6:	e7df      	b.n	8012078 <__d2b+0x70>
 80120b8:	08012d47 	.word	0x08012d47
 80120bc:	08012d58 	.word	0x08012d58

080120c0 <_calloc_r>:
 80120c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120c2:	fba1 2402 	umull	r2, r4, r1, r2
 80120c6:	b94c      	cbnz	r4, 80120dc <_calloc_r+0x1c>
 80120c8:	4611      	mov	r1, r2
 80120ca:	9201      	str	r2, [sp, #4]
 80120cc:	f7fe f992 	bl	80103f4 <_malloc_r>
 80120d0:	9a01      	ldr	r2, [sp, #4]
 80120d2:	4605      	mov	r5, r0
 80120d4:	b930      	cbnz	r0, 80120e4 <_calloc_r+0x24>
 80120d6:	4628      	mov	r0, r5
 80120d8:	b003      	add	sp, #12
 80120da:	bd30      	pop	{r4, r5, pc}
 80120dc:	220c      	movs	r2, #12
 80120de:	6002      	str	r2, [r0, #0]
 80120e0:	2500      	movs	r5, #0
 80120e2:	e7f8      	b.n	80120d6 <_calloc_r+0x16>
 80120e4:	4621      	mov	r1, r4
 80120e6:	f7fe f911 	bl	801030c <memset>
 80120ea:	e7f4      	b.n	80120d6 <_calloc_r+0x16>

080120ec <__assert_func>:
 80120ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120ee:	4614      	mov	r4, r2
 80120f0:	461a      	mov	r2, r3
 80120f2:	4b09      	ldr	r3, [pc, #36]	; (8012118 <__assert_func+0x2c>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	4605      	mov	r5, r0
 80120f8:	68d8      	ldr	r0, [r3, #12]
 80120fa:	b14c      	cbz	r4, 8012110 <__assert_func+0x24>
 80120fc:	4b07      	ldr	r3, [pc, #28]	; (801211c <__assert_func+0x30>)
 80120fe:	9100      	str	r1, [sp, #0]
 8012100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012104:	4906      	ldr	r1, [pc, #24]	; (8012120 <__assert_func+0x34>)
 8012106:	462b      	mov	r3, r5
 8012108:	f000 f80e 	bl	8012128 <fiprintf>
 801210c:	f000 fa5a 	bl	80125c4 <abort>
 8012110:	4b04      	ldr	r3, [pc, #16]	; (8012124 <__assert_func+0x38>)
 8012112:	461c      	mov	r4, r3
 8012114:	e7f3      	b.n	80120fe <__assert_func+0x12>
 8012116:	bf00      	nop
 8012118:	24000184 	.word	0x24000184
 801211c:	08012eb4 	.word	0x08012eb4
 8012120:	08012ec1 	.word	0x08012ec1
 8012124:	08012eef 	.word	0x08012eef

08012128 <fiprintf>:
 8012128:	b40e      	push	{r1, r2, r3}
 801212a:	b503      	push	{r0, r1, lr}
 801212c:	4601      	mov	r1, r0
 801212e:	ab03      	add	r3, sp, #12
 8012130:	4805      	ldr	r0, [pc, #20]	; (8012148 <fiprintf+0x20>)
 8012132:	f853 2b04 	ldr.w	r2, [r3], #4
 8012136:	6800      	ldr	r0, [r0, #0]
 8012138:	9301      	str	r3, [sp, #4]
 801213a:	f000 f845 	bl	80121c8 <_vfiprintf_r>
 801213e:	b002      	add	sp, #8
 8012140:	f85d eb04 	ldr.w	lr, [sp], #4
 8012144:	b003      	add	sp, #12
 8012146:	4770      	bx	lr
 8012148:	24000184 	.word	0x24000184

0801214c <__retarget_lock_init_recursive>:
 801214c:	4770      	bx	lr

0801214e <__retarget_lock_acquire_recursive>:
 801214e:	4770      	bx	lr

08012150 <__retarget_lock_release_recursive>:
 8012150:	4770      	bx	lr

08012152 <__ascii_mbtowc>:
 8012152:	b082      	sub	sp, #8
 8012154:	b901      	cbnz	r1, 8012158 <__ascii_mbtowc+0x6>
 8012156:	a901      	add	r1, sp, #4
 8012158:	b142      	cbz	r2, 801216c <__ascii_mbtowc+0x1a>
 801215a:	b14b      	cbz	r3, 8012170 <__ascii_mbtowc+0x1e>
 801215c:	7813      	ldrb	r3, [r2, #0]
 801215e:	600b      	str	r3, [r1, #0]
 8012160:	7812      	ldrb	r2, [r2, #0]
 8012162:	1e10      	subs	r0, r2, #0
 8012164:	bf18      	it	ne
 8012166:	2001      	movne	r0, #1
 8012168:	b002      	add	sp, #8
 801216a:	4770      	bx	lr
 801216c:	4610      	mov	r0, r2
 801216e:	e7fb      	b.n	8012168 <__ascii_mbtowc+0x16>
 8012170:	f06f 0001 	mvn.w	r0, #1
 8012174:	e7f8      	b.n	8012168 <__ascii_mbtowc+0x16>

08012176 <__sfputc_r>:
 8012176:	6893      	ldr	r3, [r2, #8]
 8012178:	3b01      	subs	r3, #1
 801217a:	2b00      	cmp	r3, #0
 801217c:	b410      	push	{r4}
 801217e:	6093      	str	r3, [r2, #8]
 8012180:	da08      	bge.n	8012194 <__sfputc_r+0x1e>
 8012182:	6994      	ldr	r4, [r2, #24]
 8012184:	42a3      	cmp	r3, r4
 8012186:	db01      	blt.n	801218c <__sfputc_r+0x16>
 8012188:	290a      	cmp	r1, #10
 801218a:	d103      	bne.n	8012194 <__sfputc_r+0x1e>
 801218c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012190:	f000 b94a 	b.w	8012428 <__swbuf_r>
 8012194:	6813      	ldr	r3, [r2, #0]
 8012196:	1c58      	adds	r0, r3, #1
 8012198:	6010      	str	r0, [r2, #0]
 801219a:	7019      	strb	r1, [r3, #0]
 801219c:	4608      	mov	r0, r1
 801219e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121a2:	4770      	bx	lr

080121a4 <__sfputs_r>:
 80121a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121a6:	4606      	mov	r6, r0
 80121a8:	460f      	mov	r7, r1
 80121aa:	4614      	mov	r4, r2
 80121ac:	18d5      	adds	r5, r2, r3
 80121ae:	42ac      	cmp	r4, r5
 80121b0:	d101      	bne.n	80121b6 <__sfputs_r+0x12>
 80121b2:	2000      	movs	r0, #0
 80121b4:	e007      	b.n	80121c6 <__sfputs_r+0x22>
 80121b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121ba:	463a      	mov	r2, r7
 80121bc:	4630      	mov	r0, r6
 80121be:	f7ff ffda 	bl	8012176 <__sfputc_r>
 80121c2:	1c43      	adds	r3, r0, #1
 80121c4:	d1f3      	bne.n	80121ae <__sfputs_r+0xa>
 80121c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080121c8 <_vfiprintf_r>:
 80121c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121cc:	460d      	mov	r5, r1
 80121ce:	b09d      	sub	sp, #116	; 0x74
 80121d0:	4614      	mov	r4, r2
 80121d2:	4698      	mov	r8, r3
 80121d4:	4606      	mov	r6, r0
 80121d6:	b118      	cbz	r0, 80121e0 <_vfiprintf_r+0x18>
 80121d8:	6983      	ldr	r3, [r0, #24]
 80121da:	b90b      	cbnz	r3, 80121e0 <_vfiprintf_r+0x18>
 80121dc:	f000 fb14 	bl	8012808 <__sinit>
 80121e0:	4b89      	ldr	r3, [pc, #548]	; (8012408 <_vfiprintf_r+0x240>)
 80121e2:	429d      	cmp	r5, r3
 80121e4:	d11b      	bne.n	801221e <_vfiprintf_r+0x56>
 80121e6:	6875      	ldr	r5, [r6, #4]
 80121e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121ea:	07d9      	lsls	r1, r3, #31
 80121ec:	d405      	bmi.n	80121fa <_vfiprintf_r+0x32>
 80121ee:	89ab      	ldrh	r3, [r5, #12]
 80121f0:	059a      	lsls	r2, r3, #22
 80121f2:	d402      	bmi.n	80121fa <_vfiprintf_r+0x32>
 80121f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121f6:	f7ff ffaa 	bl	801214e <__retarget_lock_acquire_recursive>
 80121fa:	89ab      	ldrh	r3, [r5, #12]
 80121fc:	071b      	lsls	r3, r3, #28
 80121fe:	d501      	bpl.n	8012204 <_vfiprintf_r+0x3c>
 8012200:	692b      	ldr	r3, [r5, #16]
 8012202:	b9eb      	cbnz	r3, 8012240 <_vfiprintf_r+0x78>
 8012204:	4629      	mov	r1, r5
 8012206:	4630      	mov	r0, r6
 8012208:	f000 f96e 	bl	80124e8 <__swsetup_r>
 801220c:	b1c0      	cbz	r0, 8012240 <_vfiprintf_r+0x78>
 801220e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012210:	07dc      	lsls	r4, r3, #31
 8012212:	d50e      	bpl.n	8012232 <_vfiprintf_r+0x6a>
 8012214:	f04f 30ff 	mov.w	r0, #4294967295
 8012218:	b01d      	add	sp, #116	; 0x74
 801221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221e:	4b7b      	ldr	r3, [pc, #492]	; (801240c <_vfiprintf_r+0x244>)
 8012220:	429d      	cmp	r5, r3
 8012222:	d101      	bne.n	8012228 <_vfiprintf_r+0x60>
 8012224:	68b5      	ldr	r5, [r6, #8]
 8012226:	e7df      	b.n	80121e8 <_vfiprintf_r+0x20>
 8012228:	4b79      	ldr	r3, [pc, #484]	; (8012410 <_vfiprintf_r+0x248>)
 801222a:	429d      	cmp	r5, r3
 801222c:	bf08      	it	eq
 801222e:	68f5      	ldreq	r5, [r6, #12]
 8012230:	e7da      	b.n	80121e8 <_vfiprintf_r+0x20>
 8012232:	89ab      	ldrh	r3, [r5, #12]
 8012234:	0598      	lsls	r0, r3, #22
 8012236:	d4ed      	bmi.n	8012214 <_vfiprintf_r+0x4c>
 8012238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801223a:	f7ff ff89 	bl	8012150 <__retarget_lock_release_recursive>
 801223e:	e7e9      	b.n	8012214 <_vfiprintf_r+0x4c>
 8012240:	2300      	movs	r3, #0
 8012242:	9309      	str	r3, [sp, #36]	; 0x24
 8012244:	2320      	movs	r3, #32
 8012246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801224a:	f8cd 800c 	str.w	r8, [sp, #12]
 801224e:	2330      	movs	r3, #48	; 0x30
 8012250:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012414 <_vfiprintf_r+0x24c>
 8012254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012258:	f04f 0901 	mov.w	r9, #1
 801225c:	4623      	mov	r3, r4
 801225e:	469a      	mov	sl, r3
 8012260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012264:	b10a      	cbz	r2, 801226a <_vfiprintf_r+0xa2>
 8012266:	2a25      	cmp	r2, #37	; 0x25
 8012268:	d1f9      	bne.n	801225e <_vfiprintf_r+0x96>
 801226a:	ebba 0b04 	subs.w	fp, sl, r4
 801226e:	d00b      	beq.n	8012288 <_vfiprintf_r+0xc0>
 8012270:	465b      	mov	r3, fp
 8012272:	4622      	mov	r2, r4
 8012274:	4629      	mov	r1, r5
 8012276:	4630      	mov	r0, r6
 8012278:	f7ff ff94 	bl	80121a4 <__sfputs_r>
 801227c:	3001      	adds	r0, #1
 801227e:	f000 80aa 	beq.w	80123d6 <_vfiprintf_r+0x20e>
 8012282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012284:	445a      	add	r2, fp
 8012286:	9209      	str	r2, [sp, #36]	; 0x24
 8012288:	f89a 3000 	ldrb.w	r3, [sl]
 801228c:	2b00      	cmp	r3, #0
 801228e:	f000 80a2 	beq.w	80123d6 <_vfiprintf_r+0x20e>
 8012292:	2300      	movs	r3, #0
 8012294:	f04f 32ff 	mov.w	r2, #4294967295
 8012298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801229c:	f10a 0a01 	add.w	sl, sl, #1
 80122a0:	9304      	str	r3, [sp, #16]
 80122a2:	9307      	str	r3, [sp, #28]
 80122a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122a8:	931a      	str	r3, [sp, #104]	; 0x68
 80122aa:	4654      	mov	r4, sl
 80122ac:	2205      	movs	r2, #5
 80122ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122b2:	4858      	ldr	r0, [pc, #352]	; (8012414 <_vfiprintf_r+0x24c>)
 80122b4:	f7ee f81c 	bl	80002f0 <memchr>
 80122b8:	9a04      	ldr	r2, [sp, #16]
 80122ba:	b9d8      	cbnz	r0, 80122f4 <_vfiprintf_r+0x12c>
 80122bc:	06d1      	lsls	r1, r2, #27
 80122be:	bf44      	itt	mi
 80122c0:	2320      	movmi	r3, #32
 80122c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122c6:	0713      	lsls	r3, r2, #28
 80122c8:	bf44      	itt	mi
 80122ca:	232b      	movmi	r3, #43	; 0x2b
 80122cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122d0:	f89a 3000 	ldrb.w	r3, [sl]
 80122d4:	2b2a      	cmp	r3, #42	; 0x2a
 80122d6:	d015      	beq.n	8012304 <_vfiprintf_r+0x13c>
 80122d8:	9a07      	ldr	r2, [sp, #28]
 80122da:	4654      	mov	r4, sl
 80122dc:	2000      	movs	r0, #0
 80122de:	f04f 0c0a 	mov.w	ip, #10
 80122e2:	4621      	mov	r1, r4
 80122e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122e8:	3b30      	subs	r3, #48	; 0x30
 80122ea:	2b09      	cmp	r3, #9
 80122ec:	d94e      	bls.n	801238c <_vfiprintf_r+0x1c4>
 80122ee:	b1b0      	cbz	r0, 801231e <_vfiprintf_r+0x156>
 80122f0:	9207      	str	r2, [sp, #28]
 80122f2:	e014      	b.n	801231e <_vfiprintf_r+0x156>
 80122f4:	eba0 0308 	sub.w	r3, r0, r8
 80122f8:	fa09 f303 	lsl.w	r3, r9, r3
 80122fc:	4313      	orrs	r3, r2
 80122fe:	9304      	str	r3, [sp, #16]
 8012300:	46a2      	mov	sl, r4
 8012302:	e7d2      	b.n	80122aa <_vfiprintf_r+0xe2>
 8012304:	9b03      	ldr	r3, [sp, #12]
 8012306:	1d19      	adds	r1, r3, #4
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	9103      	str	r1, [sp, #12]
 801230c:	2b00      	cmp	r3, #0
 801230e:	bfbb      	ittet	lt
 8012310:	425b      	neglt	r3, r3
 8012312:	f042 0202 	orrlt.w	r2, r2, #2
 8012316:	9307      	strge	r3, [sp, #28]
 8012318:	9307      	strlt	r3, [sp, #28]
 801231a:	bfb8      	it	lt
 801231c:	9204      	strlt	r2, [sp, #16]
 801231e:	7823      	ldrb	r3, [r4, #0]
 8012320:	2b2e      	cmp	r3, #46	; 0x2e
 8012322:	d10c      	bne.n	801233e <_vfiprintf_r+0x176>
 8012324:	7863      	ldrb	r3, [r4, #1]
 8012326:	2b2a      	cmp	r3, #42	; 0x2a
 8012328:	d135      	bne.n	8012396 <_vfiprintf_r+0x1ce>
 801232a:	9b03      	ldr	r3, [sp, #12]
 801232c:	1d1a      	adds	r2, r3, #4
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	9203      	str	r2, [sp, #12]
 8012332:	2b00      	cmp	r3, #0
 8012334:	bfb8      	it	lt
 8012336:	f04f 33ff 	movlt.w	r3, #4294967295
 801233a:	3402      	adds	r4, #2
 801233c:	9305      	str	r3, [sp, #20]
 801233e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012424 <_vfiprintf_r+0x25c>
 8012342:	7821      	ldrb	r1, [r4, #0]
 8012344:	2203      	movs	r2, #3
 8012346:	4650      	mov	r0, sl
 8012348:	f7ed ffd2 	bl	80002f0 <memchr>
 801234c:	b140      	cbz	r0, 8012360 <_vfiprintf_r+0x198>
 801234e:	2340      	movs	r3, #64	; 0x40
 8012350:	eba0 000a 	sub.w	r0, r0, sl
 8012354:	fa03 f000 	lsl.w	r0, r3, r0
 8012358:	9b04      	ldr	r3, [sp, #16]
 801235a:	4303      	orrs	r3, r0
 801235c:	3401      	adds	r4, #1
 801235e:	9304      	str	r3, [sp, #16]
 8012360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012364:	482c      	ldr	r0, [pc, #176]	; (8012418 <_vfiprintf_r+0x250>)
 8012366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801236a:	2206      	movs	r2, #6
 801236c:	f7ed ffc0 	bl	80002f0 <memchr>
 8012370:	2800      	cmp	r0, #0
 8012372:	d03f      	beq.n	80123f4 <_vfiprintf_r+0x22c>
 8012374:	4b29      	ldr	r3, [pc, #164]	; (801241c <_vfiprintf_r+0x254>)
 8012376:	bb1b      	cbnz	r3, 80123c0 <_vfiprintf_r+0x1f8>
 8012378:	9b03      	ldr	r3, [sp, #12]
 801237a:	3307      	adds	r3, #7
 801237c:	f023 0307 	bic.w	r3, r3, #7
 8012380:	3308      	adds	r3, #8
 8012382:	9303      	str	r3, [sp, #12]
 8012384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012386:	443b      	add	r3, r7
 8012388:	9309      	str	r3, [sp, #36]	; 0x24
 801238a:	e767      	b.n	801225c <_vfiprintf_r+0x94>
 801238c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012390:	460c      	mov	r4, r1
 8012392:	2001      	movs	r0, #1
 8012394:	e7a5      	b.n	80122e2 <_vfiprintf_r+0x11a>
 8012396:	2300      	movs	r3, #0
 8012398:	3401      	adds	r4, #1
 801239a:	9305      	str	r3, [sp, #20]
 801239c:	4619      	mov	r1, r3
 801239e:	f04f 0c0a 	mov.w	ip, #10
 80123a2:	4620      	mov	r0, r4
 80123a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123a8:	3a30      	subs	r2, #48	; 0x30
 80123aa:	2a09      	cmp	r2, #9
 80123ac:	d903      	bls.n	80123b6 <_vfiprintf_r+0x1ee>
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d0c5      	beq.n	801233e <_vfiprintf_r+0x176>
 80123b2:	9105      	str	r1, [sp, #20]
 80123b4:	e7c3      	b.n	801233e <_vfiprintf_r+0x176>
 80123b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80123ba:	4604      	mov	r4, r0
 80123bc:	2301      	movs	r3, #1
 80123be:	e7f0      	b.n	80123a2 <_vfiprintf_r+0x1da>
 80123c0:	ab03      	add	r3, sp, #12
 80123c2:	9300      	str	r3, [sp, #0]
 80123c4:	462a      	mov	r2, r5
 80123c6:	4b16      	ldr	r3, [pc, #88]	; (8012420 <_vfiprintf_r+0x258>)
 80123c8:	a904      	add	r1, sp, #16
 80123ca:	4630      	mov	r0, r6
 80123cc:	f7fe f918 	bl	8010600 <_printf_float>
 80123d0:	4607      	mov	r7, r0
 80123d2:	1c78      	adds	r0, r7, #1
 80123d4:	d1d6      	bne.n	8012384 <_vfiprintf_r+0x1bc>
 80123d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123d8:	07d9      	lsls	r1, r3, #31
 80123da:	d405      	bmi.n	80123e8 <_vfiprintf_r+0x220>
 80123dc:	89ab      	ldrh	r3, [r5, #12]
 80123de:	059a      	lsls	r2, r3, #22
 80123e0:	d402      	bmi.n	80123e8 <_vfiprintf_r+0x220>
 80123e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123e4:	f7ff feb4 	bl	8012150 <__retarget_lock_release_recursive>
 80123e8:	89ab      	ldrh	r3, [r5, #12]
 80123ea:	065b      	lsls	r3, r3, #25
 80123ec:	f53f af12 	bmi.w	8012214 <_vfiprintf_r+0x4c>
 80123f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123f2:	e711      	b.n	8012218 <_vfiprintf_r+0x50>
 80123f4:	ab03      	add	r3, sp, #12
 80123f6:	9300      	str	r3, [sp, #0]
 80123f8:	462a      	mov	r2, r5
 80123fa:	4b09      	ldr	r3, [pc, #36]	; (8012420 <_vfiprintf_r+0x258>)
 80123fc:	a904      	add	r1, sp, #16
 80123fe:	4630      	mov	r0, r6
 8012400:	f7fe fb8a 	bl	8010b18 <_printf_i>
 8012404:	e7e4      	b.n	80123d0 <_vfiprintf_r+0x208>
 8012406:	bf00      	nop
 8012408:	0801302c 	.word	0x0801302c
 801240c:	0801304c 	.word	0x0801304c
 8012410:	0801300c 	.word	0x0801300c
 8012414:	08012efa 	.word	0x08012efa
 8012418:	08012f04 	.word	0x08012f04
 801241c:	08010601 	.word	0x08010601
 8012420:	080121a5 	.word	0x080121a5
 8012424:	08012f00 	.word	0x08012f00

08012428 <__swbuf_r>:
 8012428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801242a:	460e      	mov	r6, r1
 801242c:	4614      	mov	r4, r2
 801242e:	4605      	mov	r5, r0
 8012430:	b118      	cbz	r0, 801243a <__swbuf_r+0x12>
 8012432:	6983      	ldr	r3, [r0, #24]
 8012434:	b90b      	cbnz	r3, 801243a <__swbuf_r+0x12>
 8012436:	f000 f9e7 	bl	8012808 <__sinit>
 801243a:	4b21      	ldr	r3, [pc, #132]	; (80124c0 <__swbuf_r+0x98>)
 801243c:	429c      	cmp	r4, r3
 801243e:	d12b      	bne.n	8012498 <__swbuf_r+0x70>
 8012440:	686c      	ldr	r4, [r5, #4]
 8012442:	69a3      	ldr	r3, [r4, #24]
 8012444:	60a3      	str	r3, [r4, #8]
 8012446:	89a3      	ldrh	r3, [r4, #12]
 8012448:	071a      	lsls	r2, r3, #28
 801244a:	d52f      	bpl.n	80124ac <__swbuf_r+0x84>
 801244c:	6923      	ldr	r3, [r4, #16]
 801244e:	b36b      	cbz	r3, 80124ac <__swbuf_r+0x84>
 8012450:	6923      	ldr	r3, [r4, #16]
 8012452:	6820      	ldr	r0, [r4, #0]
 8012454:	1ac0      	subs	r0, r0, r3
 8012456:	6963      	ldr	r3, [r4, #20]
 8012458:	b2f6      	uxtb	r6, r6
 801245a:	4283      	cmp	r3, r0
 801245c:	4637      	mov	r7, r6
 801245e:	dc04      	bgt.n	801246a <__swbuf_r+0x42>
 8012460:	4621      	mov	r1, r4
 8012462:	4628      	mov	r0, r5
 8012464:	f000 f93c 	bl	80126e0 <_fflush_r>
 8012468:	bb30      	cbnz	r0, 80124b8 <__swbuf_r+0x90>
 801246a:	68a3      	ldr	r3, [r4, #8]
 801246c:	3b01      	subs	r3, #1
 801246e:	60a3      	str	r3, [r4, #8]
 8012470:	6823      	ldr	r3, [r4, #0]
 8012472:	1c5a      	adds	r2, r3, #1
 8012474:	6022      	str	r2, [r4, #0]
 8012476:	701e      	strb	r6, [r3, #0]
 8012478:	6963      	ldr	r3, [r4, #20]
 801247a:	3001      	adds	r0, #1
 801247c:	4283      	cmp	r3, r0
 801247e:	d004      	beq.n	801248a <__swbuf_r+0x62>
 8012480:	89a3      	ldrh	r3, [r4, #12]
 8012482:	07db      	lsls	r3, r3, #31
 8012484:	d506      	bpl.n	8012494 <__swbuf_r+0x6c>
 8012486:	2e0a      	cmp	r6, #10
 8012488:	d104      	bne.n	8012494 <__swbuf_r+0x6c>
 801248a:	4621      	mov	r1, r4
 801248c:	4628      	mov	r0, r5
 801248e:	f000 f927 	bl	80126e0 <_fflush_r>
 8012492:	b988      	cbnz	r0, 80124b8 <__swbuf_r+0x90>
 8012494:	4638      	mov	r0, r7
 8012496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012498:	4b0a      	ldr	r3, [pc, #40]	; (80124c4 <__swbuf_r+0x9c>)
 801249a:	429c      	cmp	r4, r3
 801249c:	d101      	bne.n	80124a2 <__swbuf_r+0x7a>
 801249e:	68ac      	ldr	r4, [r5, #8]
 80124a0:	e7cf      	b.n	8012442 <__swbuf_r+0x1a>
 80124a2:	4b09      	ldr	r3, [pc, #36]	; (80124c8 <__swbuf_r+0xa0>)
 80124a4:	429c      	cmp	r4, r3
 80124a6:	bf08      	it	eq
 80124a8:	68ec      	ldreq	r4, [r5, #12]
 80124aa:	e7ca      	b.n	8012442 <__swbuf_r+0x1a>
 80124ac:	4621      	mov	r1, r4
 80124ae:	4628      	mov	r0, r5
 80124b0:	f000 f81a 	bl	80124e8 <__swsetup_r>
 80124b4:	2800      	cmp	r0, #0
 80124b6:	d0cb      	beq.n	8012450 <__swbuf_r+0x28>
 80124b8:	f04f 37ff 	mov.w	r7, #4294967295
 80124bc:	e7ea      	b.n	8012494 <__swbuf_r+0x6c>
 80124be:	bf00      	nop
 80124c0:	0801302c 	.word	0x0801302c
 80124c4:	0801304c 	.word	0x0801304c
 80124c8:	0801300c 	.word	0x0801300c

080124cc <__ascii_wctomb>:
 80124cc:	b149      	cbz	r1, 80124e2 <__ascii_wctomb+0x16>
 80124ce:	2aff      	cmp	r2, #255	; 0xff
 80124d0:	bf85      	ittet	hi
 80124d2:	238a      	movhi	r3, #138	; 0x8a
 80124d4:	6003      	strhi	r3, [r0, #0]
 80124d6:	700a      	strbls	r2, [r1, #0]
 80124d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80124dc:	bf98      	it	ls
 80124de:	2001      	movls	r0, #1
 80124e0:	4770      	bx	lr
 80124e2:	4608      	mov	r0, r1
 80124e4:	4770      	bx	lr
	...

080124e8 <__swsetup_r>:
 80124e8:	4b32      	ldr	r3, [pc, #200]	; (80125b4 <__swsetup_r+0xcc>)
 80124ea:	b570      	push	{r4, r5, r6, lr}
 80124ec:	681d      	ldr	r5, [r3, #0]
 80124ee:	4606      	mov	r6, r0
 80124f0:	460c      	mov	r4, r1
 80124f2:	b125      	cbz	r5, 80124fe <__swsetup_r+0x16>
 80124f4:	69ab      	ldr	r3, [r5, #24]
 80124f6:	b913      	cbnz	r3, 80124fe <__swsetup_r+0x16>
 80124f8:	4628      	mov	r0, r5
 80124fa:	f000 f985 	bl	8012808 <__sinit>
 80124fe:	4b2e      	ldr	r3, [pc, #184]	; (80125b8 <__swsetup_r+0xd0>)
 8012500:	429c      	cmp	r4, r3
 8012502:	d10f      	bne.n	8012524 <__swsetup_r+0x3c>
 8012504:	686c      	ldr	r4, [r5, #4]
 8012506:	89a3      	ldrh	r3, [r4, #12]
 8012508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801250c:	0719      	lsls	r1, r3, #28
 801250e:	d42c      	bmi.n	801256a <__swsetup_r+0x82>
 8012510:	06dd      	lsls	r5, r3, #27
 8012512:	d411      	bmi.n	8012538 <__swsetup_r+0x50>
 8012514:	2309      	movs	r3, #9
 8012516:	6033      	str	r3, [r6, #0]
 8012518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801251c:	81a3      	strh	r3, [r4, #12]
 801251e:	f04f 30ff 	mov.w	r0, #4294967295
 8012522:	e03e      	b.n	80125a2 <__swsetup_r+0xba>
 8012524:	4b25      	ldr	r3, [pc, #148]	; (80125bc <__swsetup_r+0xd4>)
 8012526:	429c      	cmp	r4, r3
 8012528:	d101      	bne.n	801252e <__swsetup_r+0x46>
 801252a:	68ac      	ldr	r4, [r5, #8]
 801252c:	e7eb      	b.n	8012506 <__swsetup_r+0x1e>
 801252e:	4b24      	ldr	r3, [pc, #144]	; (80125c0 <__swsetup_r+0xd8>)
 8012530:	429c      	cmp	r4, r3
 8012532:	bf08      	it	eq
 8012534:	68ec      	ldreq	r4, [r5, #12]
 8012536:	e7e6      	b.n	8012506 <__swsetup_r+0x1e>
 8012538:	0758      	lsls	r0, r3, #29
 801253a:	d512      	bpl.n	8012562 <__swsetup_r+0x7a>
 801253c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801253e:	b141      	cbz	r1, 8012552 <__swsetup_r+0x6a>
 8012540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012544:	4299      	cmp	r1, r3
 8012546:	d002      	beq.n	801254e <__swsetup_r+0x66>
 8012548:	4630      	mov	r0, r6
 801254a:	f7fd fee7 	bl	801031c <_free_r>
 801254e:	2300      	movs	r3, #0
 8012550:	6363      	str	r3, [r4, #52]	; 0x34
 8012552:	89a3      	ldrh	r3, [r4, #12]
 8012554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012558:	81a3      	strh	r3, [r4, #12]
 801255a:	2300      	movs	r3, #0
 801255c:	6063      	str	r3, [r4, #4]
 801255e:	6923      	ldr	r3, [r4, #16]
 8012560:	6023      	str	r3, [r4, #0]
 8012562:	89a3      	ldrh	r3, [r4, #12]
 8012564:	f043 0308 	orr.w	r3, r3, #8
 8012568:	81a3      	strh	r3, [r4, #12]
 801256a:	6923      	ldr	r3, [r4, #16]
 801256c:	b94b      	cbnz	r3, 8012582 <__swsetup_r+0x9a>
 801256e:	89a3      	ldrh	r3, [r4, #12]
 8012570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012578:	d003      	beq.n	8012582 <__swsetup_r+0x9a>
 801257a:	4621      	mov	r1, r4
 801257c:	4630      	mov	r0, r6
 801257e:	f000 fa05 	bl	801298c <__smakebuf_r>
 8012582:	89a0      	ldrh	r0, [r4, #12]
 8012584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012588:	f010 0301 	ands.w	r3, r0, #1
 801258c:	d00a      	beq.n	80125a4 <__swsetup_r+0xbc>
 801258e:	2300      	movs	r3, #0
 8012590:	60a3      	str	r3, [r4, #8]
 8012592:	6963      	ldr	r3, [r4, #20]
 8012594:	425b      	negs	r3, r3
 8012596:	61a3      	str	r3, [r4, #24]
 8012598:	6923      	ldr	r3, [r4, #16]
 801259a:	b943      	cbnz	r3, 80125ae <__swsetup_r+0xc6>
 801259c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80125a0:	d1ba      	bne.n	8012518 <__swsetup_r+0x30>
 80125a2:	bd70      	pop	{r4, r5, r6, pc}
 80125a4:	0781      	lsls	r1, r0, #30
 80125a6:	bf58      	it	pl
 80125a8:	6963      	ldrpl	r3, [r4, #20]
 80125aa:	60a3      	str	r3, [r4, #8]
 80125ac:	e7f4      	b.n	8012598 <__swsetup_r+0xb0>
 80125ae:	2000      	movs	r0, #0
 80125b0:	e7f7      	b.n	80125a2 <__swsetup_r+0xba>
 80125b2:	bf00      	nop
 80125b4:	24000184 	.word	0x24000184
 80125b8:	0801302c 	.word	0x0801302c
 80125bc:	0801304c 	.word	0x0801304c
 80125c0:	0801300c 	.word	0x0801300c

080125c4 <abort>:
 80125c4:	b508      	push	{r3, lr}
 80125c6:	2006      	movs	r0, #6
 80125c8:	f000 fa48 	bl	8012a5c <raise>
 80125cc:	2001      	movs	r0, #1
 80125ce:	f7ee ffe9 	bl	80015a4 <_exit>
	...

080125d4 <__sflush_r>:
 80125d4:	898a      	ldrh	r2, [r1, #12]
 80125d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125da:	4605      	mov	r5, r0
 80125dc:	0710      	lsls	r0, r2, #28
 80125de:	460c      	mov	r4, r1
 80125e0:	d458      	bmi.n	8012694 <__sflush_r+0xc0>
 80125e2:	684b      	ldr	r3, [r1, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	dc05      	bgt.n	80125f4 <__sflush_r+0x20>
 80125e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	dc02      	bgt.n	80125f4 <__sflush_r+0x20>
 80125ee:	2000      	movs	r0, #0
 80125f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125f6:	2e00      	cmp	r6, #0
 80125f8:	d0f9      	beq.n	80125ee <__sflush_r+0x1a>
 80125fa:	2300      	movs	r3, #0
 80125fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012600:	682f      	ldr	r7, [r5, #0]
 8012602:	602b      	str	r3, [r5, #0]
 8012604:	d032      	beq.n	801266c <__sflush_r+0x98>
 8012606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	075a      	lsls	r2, r3, #29
 801260c:	d505      	bpl.n	801261a <__sflush_r+0x46>
 801260e:	6863      	ldr	r3, [r4, #4]
 8012610:	1ac0      	subs	r0, r0, r3
 8012612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012614:	b10b      	cbz	r3, 801261a <__sflush_r+0x46>
 8012616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012618:	1ac0      	subs	r0, r0, r3
 801261a:	2300      	movs	r3, #0
 801261c:	4602      	mov	r2, r0
 801261e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012620:	6a21      	ldr	r1, [r4, #32]
 8012622:	4628      	mov	r0, r5
 8012624:	47b0      	blx	r6
 8012626:	1c43      	adds	r3, r0, #1
 8012628:	89a3      	ldrh	r3, [r4, #12]
 801262a:	d106      	bne.n	801263a <__sflush_r+0x66>
 801262c:	6829      	ldr	r1, [r5, #0]
 801262e:	291d      	cmp	r1, #29
 8012630:	d82c      	bhi.n	801268c <__sflush_r+0xb8>
 8012632:	4a2a      	ldr	r2, [pc, #168]	; (80126dc <__sflush_r+0x108>)
 8012634:	40ca      	lsrs	r2, r1
 8012636:	07d6      	lsls	r6, r2, #31
 8012638:	d528      	bpl.n	801268c <__sflush_r+0xb8>
 801263a:	2200      	movs	r2, #0
 801263c:	6062      	str	r2, [r4, #4]
 801263e:	04d9      	lsls	r1, r3, #19
 8012640:	6922      	ldr	r2, [r4, #16]
 8012642:	6022      	str	r2, [r4, #0]
 8012644:	d504      	bpl.n	8012650 <__sflush_r+0x7c>
 8012646:	1c42      	adds	r2, r0, #1
 8012648:	d101      	bne.n	801264e <__sflush_r+0x7a>
 801264a:	682b      	ldr	r3, [r5, #0]
 801264c:	b903      	cbnz	r3, 8012650 <__sflush_r+0x7c>
 801264e:	6560      	str	r0, [r4, #84]	; 0x54
 8012650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012652:	602f      	str	r7, [r5, #0]
 8012654:	2900      	cmp	r1, #0
 8012656:	d0ca      	beq.n	80125ee <__sflush_r+0x1a>
 8012658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801265c:	4299      	cmp	r1, r3
 801265e:	d002      	beq.n	8012666 <__sflush_r+0x92>
 8012660:	4628      	mov	r0, r5
 8012662:	f7fd fe5b 	bl	801031c <_free_r>
 8012666:	2000      	movs	r0, #0
 8012668:	6360      	str	r0, [r4, #52]	; 0x34
 801266a:	e7c1      	b.n	80125f0 <__sflush_r+0x1c>
 801266c:	6a21      	ldr	r1, [r4, #32]
 801266e:	2301      	movs	r3, #1
 8012670:	4628      	mov	r0, r5
 8012672:	47b0      	blx	r6
 8012674:	1c41      	adds	r1, r0, #1
 8012676:	d1c7      	bne.n	8012608 <__sflush_r+0x34>
 8012678:	682b      	ldr	r3, [r5, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d0c4      	beq.n	8012608 <__sflush_r+0x34>
 801267e:	2b1d      	cmp	r3, #29
 8012680:	d001      	beq.n	8012686 <__sflush_r+0xb2>
 8012682:	2b16      	cmp	r3, #22
 8012684:	d101      	bne.n	801268a <__sflush_r+0xb6>
 8012686:	602f      	str	r7, [r5, #0]
 8012688:	e7b1      	b.n	80125ee <__sflush_r+0x1a>
 801268a:	89a3      	ldrh	r3, [r4, #12]
 801268c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012690:	81a3      	strh	r3, [r4, #12]
 8012692:	e7ad      	b.n	80125f0 <__sflush_r+0x1c>
 8012694:	690f      	ldr	r7, [r1, #16]
 8012696:	2f00      	cmp	r7, #0
 8012698:	d0a9      	beq.n	80125ee <__sflush_r+0x1a>
 801269a:	0793      	lsls	r3, r2, #30
 801269c:	680e      	ldr	r6, [r1, #0]
 801269e:	bf08      	it	eq
 80126a0:	694b      	ldreq	r3, [r1, #20]
 80126a2:	600f      	str	r7, [r1, #0]
 80126a4:	bf18      	it	ne
 80126a6:	2300      	movne	r3, #0
 80126a8:	eba6 0807 	sub.w	r8, r6, r7
 80126ac:	608b      	str	r3, [r1, #8]
 80126ae:	f1b8 0f00 	cmp.w	r8, #0
 80126b2:	dd9c      	ble.n	80125ee <__sflush_r+0x1a>
 80126b4:	6a21      	ldr	r1, [r4, #32]
 80126b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80126b8:	4643      	mov	r3, r8
 80126ba:	463a      	mov	r2, r7
 80126bc:	4628      	mov	r0, r5
 80126be:	47b0      	blx	r6
 80126c0:	2800      	cmp	r0, #0
 80126c2:	dc06      	bgt.n	80126d2 <__sflush_r+0xfe>
 80126c4:	89a3      	ldrh	r3, [r4, #12]
 80126c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126ca:	81a3      	strh	r3, [r4, #12]
 80126cc:	f04f 30ff 	mov.w	r0, #4294967295
 80126d0:	e78e      	b.n	80125f0 <__sflush_r+0x1c>
 80126d2:	4407      	add	r7, r0
 80126d4:	eba8 0800 	sub.w	r8, r8, r0
 80126d8:	e7e9      	b.n	80126ae <__sflush_r+0xda>
 80126da:	bf00      	nop
 80126dc:	20400001 	.word	0x20400001

080126e0 <_fflush_r>:
 80126e0:	b538      	push	{r3, r4, r5, lr}
 80126e2:	690b      	ldr	r3, [r1, #16]
 80126e4:	4605      	mov	r5, r0
 80126e6:	460c      	mov	r4, r1
 80126e8:	b913      	cbnz	r3, 80126f0 <_fflush_r+0x10>
 80126ea:	2500      	movs	r5, #0
 80126ec:	4628      	mov	r0, r5
 80126ee:	bd38      	pop	{r3, r4, r5, pc}
 80126f0:	b118      	cbz	r0, 80126fa <_fflush_r+0x1a>
 80126f2:	6983      	ldr	r3, [r0, #24]
 80126f4:	b90b      	cbnz	r3, 80126fa <_fflush_r+0x1a>
 80126f6:	f000 f887 	bl	8012808 <__sinit>
 80126fa:	4b14      	ldr	r3, [pc, #80]	; (801274c <_fflush_r+0x6c>)
 80126fc:	429c      	cmp	r4, r3
 80126fe:	d11b      	bne.n	8012738 <_fflush_r+0x58>
 8012700:	686c      	ldr	r4, [r5, #4]
 8012702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d0ef      	beq.n	80126ea <_fflush_r+0xa>
 801270a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801270c:	07d0      	lsls	r0, r2, #31
 801270e:	d404      	bmi.n	801271a <_fflush_r+0x3a>
 8012710:	0599      	lsls	r1, r3, #22
 8012712:	d402      	bmi.n	801271a <_fflush_r+0x3a>
 8012714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012716:	f7ff fd1a 	bl	801214e <__retarget_lock_acquire_recursive>
 801271a:	4628      	mov	r0, r5
 801271c:	4621      	mov	r1, r4
 801271e:	f7ff ff59 	bl	80125d4 <__sflush_r>
 8012722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012724:	07da      	lsls	r2, r3, #31
 8012726:	4605      	mov	r5, r0
 8012728:	d4e0      	bmi.n	80126ec <_fflush_r+0xc>
 801272a:	89a3      	ldrh	r3, [r4, #12]
 801272c:	059b      	lsls	r3, r3, #22
 801272e:	d4dd      	bmi.n	80126ec <_fflush_r+0xc>
 8012730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012732:	f7ff fd0d 	bl	8012150 <__retarget_lock_release_recursive>
 8012736:	e7d9      	b.n	80126ec <_fflush_r+0xc>
 8012738:	4b05      	ldr	r3, [pc, #20]	; (8012750 <_fflush_r+0x70>)
 801273a:	429c      	cmp	r4, r3
 801273c:	d101      	bne.n	8012742 <_fflush_r+0x62>
 801273e:	68ac      	ldr	r4, [r5, #8]
 8012740:	e7df      	b.n	8012702 <_fflush_r+0x22>
 8012742:	4b04      	ldr	r3, [pc, #16]	; (8012754 <_fflush_r+0x74>)
 8012744:	429c      	cmp	r4, r3
 8012746:	bf08      	it	eq
 8012748:	68ec      	ldreq	r4, [r5, #12]
 801274a:	e7da      	b.n	8012702 <_fflush_r+0x22>
 801274c:	0801302c 	.word	0x0801302c
 8012750:	0801304c 	.word	0x0801304c
 8012754:	0801300c 	.word	0x0801300c

08012758 <std>:
 8012758:	2300      	movs	r3, #0
 801275a:	b510      	push	{r4, lr}
 801275c:	4604      	mov	r4, r0
 801275e:	e9c0 3300 	strd	r3, r3, [r0]
 8012762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012766:	6083      	str	r3, [r0, #8]
 8012768:	8181      	strh	r1, [r0, #12]
 801276a:	6643      	str	r3, [r0, #100]	; 0x64
 801276c:	81c2      	strh	r2, [r0, #14]
 801276e:	6183      	str	r3, [r0, #24]
 8012770:	4619      	mov	r1, r3
 8012772:	2208      	movs	r2, #8
 8012774:	305c      	adds	r0, #92	; 0x5c
 8012776:	f7fd fdc9 	bl	801030c <memset>
 801277a:	4b05      	ldr	r3, [pc, #20]	; (8012790 <std+0x38>)
 801277c:	6263      	str	r3, [r4, #36]	; 0x24
 801277e:	4b05      	ldr	r3, [pc, #20]	; (8012794 <std+0x3c>)
 8012780:	62a3      	str	r3, [r4, #40]	; 0x28
 8012782:	4b05      	ldr	r3, [pc, #20]	; (8012798 <std+0x40>)
 8012784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012786:	4b05      	ldr	r3, [pc, #20]	; (801279c <std+0x44>)
 8012788:	6224      	str	r4, [r4, #32]
 801278a:	6323      	str	r3, [r4, #48]	; 0x30
 801278c:	bd10      	pop	{r4, pc}
 801278e:	bf00      	nop
 8012790:	08012a95 	.word	0x08012a95
 8012794:	08012ab7 	.word	0x08012ab7
 8012798:	08012aef 	.word	0x08012aef
 801279c:	08012b13 	.word	0x08012b13

080127a0 <_cleanup_r>:
 80127a0:	4901      	ldr	r1, [pc, #4]	; (80127a8 <_cleanup_r+0x8>)
 80127a2:	f000 b8af 	b.w	8012904 <_fwalk_reent>
 80127a6:	bf00      	nop
 80127a8:	080126e1 	.word	0x080126e1

080127ac <__sfmoreglue>:
 80127ac:	b570      	push	{r4, r5, r6, lr}
 80127ae:	2268      	movs	r2, #104	; 0x68
 80127b0:	1e4d      	subs	r5, r1, #1
 80127b2:	4355      	muls	r5, r2
 80127b4:	460e      	mov	r6, r1
 80127b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80127ba:	f7fd fe1b 	bl	80103f4 <_malloc_r>
 80127be:	4604      	mov	r4, r0
 80127c0:	b140      	cbz	r0, 80127d4 <__sfmoreglue+0x28>
 80127c2:	2100      	movs	r1, #0
 80127c4:	e9c0 1600 	strd	r1, r6, [r0]
 80127c8:	300c      	adds	r0, #12
 80127ca:	60a0      	str	r0, [r4, #8]
 80127cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80127d0:	f7fd fd9c 	bl	801030c <memset>
 80127d4:	4620      	mov	r0, r4
 80127d6:	bd70      	pop	{r4, r5, r6, pc}

080127d8 <__sfp_lock_acquire>:
 80127d8:	4801      	ldr	r0, [pc, #4]	; (80127e0 <__sfp_lock_acquire+0x8>)
 80127da:	f7ff bcb8 	b.w	801214e <__retarget_lock_acquire_recursive>
 80127de:	bf00      	nop
 80127e0:	2400200d 	.word	0x2400200d

080127e4 <__sfp_lock_release>:
 80127e4:	4801      	ldr	r0, [pc, #4]	; (80127ec <__sfp_lock_release+0x8>)
 80127e6:	f7ff bcb3 	b.w	8012150 <__retarget_lock_release_recursive>
 80127ea:	bf00      	nop
 80127ec:	2400200d 	.word	0x2400200d

080127f0 <__sinit_lock_acquire>:
 80127f0:	4801      	ldr	r0, [pc, #4]	; (80127f8 <__sinit_lock_acquire+0x8>)
 80127f2:	f7ff bcac 	b.w	801214e <__retarget_lock_acquire_recursive>
 80127f6:	bf00      	nop
 80127f8:	2400200e 	.word	0x2400200e

080127fc <__sinit_lock_release>:
 80127fc:	4801      	ldr	r0, [pc, #4]	; (8012804 <__sinit_lock_release+0x8>)
 80127fe:	f7ff bca7 	b.w	8012150 <__retarget_lock_release_recursive>
 8012802:	bf00      	nop
 8012804:	2400200e 	.word	0x2400200e

08012808 <__sinit>:
 8012808:	b510      	push	{r4, lr}
 801280a:	4604      	mov	r4, r0
 801280c:	f7ff fff0 	bl	80127f0 <__sinit_lock_acquire>
 8012810:	69a3      	ldr	r3, [r4, #24]
 8012812:	b11b      	cbz	r3, 801281c <__sinit+0x14>
 8012814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012818:	f7ff bff0 	b.w	80127fc <__sinit_lock_release>
 801281c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012820:	6523      	str	r3, [r4, #80]	; 0x50
 8012822:	4b13      	ldr	r3, [pc, #76]	; (8012870 <__sinit+0x68>)
 8012824:	4a13      	ldr	r2, [pc, #76]	; (8012874 <__sinit+0x6c>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	62a2      	str	r2, [r4, #40]	; 0x28
 801282a:	42a3      	cmp	r3, r4
 801282c:	bf04      	itt	eq
 801282e:	2301      	moveq	r3, #1
 8012830:	61a3      	streq	r3, [r4, #24]
 8012832:	4620      	mov	r0, r4
 8012834:	f000 f820 	bl	8012878 <__sfp>
 8012838:	6060      	str	r0, [r4, #4]
 801283a:	4620      	mov	r0, r4
 801283c:	f000 f81c 	bl	8012878 <__sfp>
 8012840:	60a0      	str	r0, [r4, #8]
 8012842:	4620      	mov	r0, r4
 8012844:	f000 f818 	bl	8012878 <__sfp>
 8012848:	2200      	movs	r2, #0
 801284a:	60e0      	str	r0, [r4, #12]
 801284c:	2104      	movs	r1, #4
 801284e:	6860      	ldr	r0, [r4, #4]
 8012850:	f7ff ff82 	bl	8012758 <std>
 8012854:	68a0      	ldr	r0, [r4, #8]
 8012856:	2201      	movs	r2, #1
 8012858:	2109      	movs	r1, #9
 801285a:	f7ff ff7d 	bl	8012758 <std>
 801285e:	68e0      	ldr	r0, [r4, #12]
 8012860:	2202      	movs	r2, #2
 8012862:	2112      	movs	r1, #18
 8012864:	f7ff ff78 	bl	8012758 <std>
 8012868:	2301      	movs	r3, #1
 801286a:	61a3      	str	r3, [r4, #24]
 801286c:	e7d2      	b.n	8012814 <__sinit+0xc>
 801286e:	bf00      	nop
 8012870:	08012c90 	.word	0x08012c90
 8012874:	080127a1 	.word	0x080127a1

08012878 <__sfp>:
 8012878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801287a:	4607      	mov	r7, r0
 801287c:	f7ff ffac 	bl	80127d8 <__sfp_lock_acquire>
 8012880:	4b1e      	ldr	r3, [pc, #120]	; (80128fc <__sfp+0x84>)
 8012882:	681e      	ldr	r6, [r3, #0]
 8012884:	69b3      	ldr	r3, [r6, #24]
 8012886:	b913      	cbnz	r3, 801288e <__sfp+0x16>
 8012888:	4630      	mov	r0, r6
 801288a:	f7ff ffbd 	bl	8012808 <__sinit>
 801288e:	3648      	adds	r6, #72	; 0x48
 8012890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012894:	3b01      	subs	r3, #1
 8012896:	d503      	bpl.n	80128a0 <__sfp+0x28>
 8012898:	6833      	ldr	r3, [r6, #0]
 801289a:	b30b      	cbz	r3, 80128e0 <__sfp+0x68>
 801289c:	6836      	ldr	r6, [r6, #0]
 801289e:	e7f7      	b.n	8012890 <__sfp+0x18>
 80128a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80128a4:	b9d5      	cbnz	r5, 80128dc <__sfp+0x64>
 80128a6:	4b16      	ldr	r3, [pc, #88]	; (8012900 <__sfp+0x88>)
 80128a8:	60e3      	str	r3, [r4, #12]
 80128aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80128ae:	6665      	str	r5, [r4, #100]	; 0x64
 80128b0:	f7ff fc4c 	bl	801214c <__retarget_lock_init_recursive>
 80128b4:	f7ff ff96 	bl	80127e4 <__sfp_lock_release>
 80128b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80128bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80128c0:	6025      	str	r5, [r4, #0]
 80128c2:	61a5      	str	r5, [r4, #24]
 80128c4:	2208      	movs	r2, #8
 80128c6:	4629      	mov	r1, r5
 80128c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80128cc:	f7fd fd1e 	bl	801030c <memset>
 80128d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80128d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80128d8:	4620      	mov	r0, r4
 80128da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128dc:	3468      	adds	r4, #104	; 0x68
 80128de:	e7d9      	b.n	8012894 <__sfp+0x1c>
 80128e0:	2104      	movs	r1, #4
 80128e2:	4638      	mov	r0, r7
 80128e4:	f7ff ff62 	bl	80127ac <__sfmoreglue>
 80128e8:	4604      	mov	r4, r0
 80128ea:	6030      	str	r0, [r6, #0]
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d1d5      	bne.n	801289c <__sfp+0x24>
 80128f0:	f7ff ff78 	bl	80127e4 <__sfp_lock_release>
 80128f4:	230c      	movs	r3, #12
 80128f6:	603b      	str	r3, [r7, #0]
 80128f8:	e7ee      	b.n	80128d8 <__sfp+0x60>
 80128fa:	bf00      	nop
 80128fc:	08012c90 	.word	0x08012c90
 8012900:	ffff0001 	.word	0xffff0001

08012904 <_fwalk_reent>:
 8012904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012908:	4606      	mov	r6, r0
 801290a:	4688      	mov	r8, r1
 801290c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012910:	2700      	movs	r7, #0
 8012912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012916:	f1b9 0901 	subs.w	r9, r9, #1
 801291a:	d505      	bpl.n	8012928 <_fwalk_reent+0x24>
 801291c:	6824      	ldr	r4, [r4, #0]
 801291e:	2c00      	cmp	r4, #0
 8012920:	d1f7      	bne.n	8012912 <_fwalk_reent+0xe>
 8012922:	4638      	mov	r0, r7
 8012924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012928:	89ab      	ldrh	r3, [r5, #12]
 801292a:	2b01      	cmp	r3, #1
 801292c:	d907      	bls.n	801293e <_fwalk_reent+0x3a>
 801292e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012932:	3301      	adds	r3, #1
 8012934:	d003      	beq.n	801293e <_fwalk_reent+0x3a>
 8012936:	4629      	mov	r1, r5
 8012938:	4630      	mov	r0, r6
 801293a:	47c0      	blx	r8
 801293c:	4307      	orrs	r7, r0
 801293e:	3568      	adds	r5, #104	; 0x68
 8012940:	e7e9      	b.n	8012916 <_fwalk_reent+0x12>

08012942 <__swhatbuf_r>:
 8012942:	b570      	push	{r4, r5, r6, lr}
 8012944:	460e      	mov	r6, r1
 8012946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801294a:	2900      	cmp	r1, #0
 801294c:	b096      	sub	sp, #88	; 0x58
 801294e:	4614      	mov	r4, r2
 8012950:	461d      	mov	r5, r3
 8012952:	da08      	bge.n	8012966 <__swhatbuf_r+0x24>
 8012954:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012958:	2200      	movs	r2, #0
 801295a:	602a      	str	r2, [r5, #0]
 801295c:	061a      	lsls	r2, r3, #24
 801295e:	d410      	bmi.n	8012982 <__swhatbuf_r+0x40>
 8012960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012964:	e00e      	b.n	8012984 <__swhatbuf_r+0x42>
 8012966:	466a      	mov	r2, sp
 8012968:	f000 f8fa 	bl	8012b60 <_fstat_r>
 801296c:	2800      	cmp	r0, #0
 801296e:	dbf1      	blt.n	8012954 <__swhatbuf_r+0x12>
 8012970:	9a01      	ldr	r2, [sp, #4]
 8012972:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012976:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801297a:	425a      	negs	r2, r3
 801297c:	415a      	adcs	r2, r3
 801297e:	602a      	str	r2, [r5, #0]
 8012980:	e7ee      	b.n	8012960 <__swhatbuf_r+0x1e>
 8012982:	2340      	movs	r3, #64	; 0x40
 8012984:	2000      	movs	r0, #0
 8012986:	6023      	str	r3, [r4, #0]
 8012988:	b016      	add	sp, #88	; 0x58
 801298a:	bd70      	pop	{r4, r5, r6, pc}

0801298c <__smakebuf_r>:
 801298c:	898b      	ldrh	r3, [r1, #12]
 801298e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012990:	079d      	lsls	r5, r3, #30
 8012992:	4606      	mov	r6, r0
 8012994:	460c      	mov	r4, r1
 8012996:	d507      	bpl.n	80129a8 <__smakebuf_r+0x1c>
 8012998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801299c:	6023      	str	r3, [r4, #0]
 801299e:	6123      	str	r3, [r4, #16]
 80129a0:	2301      	movs	r3, #1
 80129a2:	6163      	str	r3, [r4, #20]
 80129a4:	b002      	add	sp, #8
 80129a6:	bd70      	pop	{r4, r5, r6, pc}
 80129a8:	ab01      	add	r3, sp, #4
 80129aa:	466a      	mov	r2, sp
 80129ac:	f7ff ffc9 	bl	8012942 <__swhatbuf_r>
 80129b0:	9900      	ldr	r1, [sp, #0]
 80129b2:	4605      	mov	r5, r0
 80129b4:	4630      	mov	r0, r6
 80129b6:	f7fd fd1d 	bl	80103f4 <_malloc_r>
 80129ba:	b948      	cbnz	r0, 80129d0 <__smakebuf_r+0x44>
 80129bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129c0:	059a      	lsls	r2, r3, #22
 80129c2:	d4ef      	bmi.n	80129a4 <__smakebuf_r+0x18>
 80129c4:	f023 0303 	bic.w	r3, r3, #3
 80129c8:	f043 0302 	orr.w	r3, r3, #2
 80129cc:	81a3      	strh	r3, [r4, #12]
 80129ce:	e7e3      	b.n	8012998 <__smakebuf_r+0xc>
 80129d0:	4b0d      	ldr	r3, [pc, #52]	; (8012a08 <__smakebuf_r+0x7c>)
 80129d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80129d4:	89a3      	ldrh	r3, [r4, #12]
 80129d6:	6020      	str	r0, [r4, #0]
 80129d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129dc:	81a3      	strh	r3, [r4, #12]
 80129de:	9b00      	ldr	r3, [sp, #0]
 80129e0:	6163      	str	r3, [r4, #20]
 80129e2:	9b01      	ldr	r3, [sp, #4]
 80129e4:	6120      	str	r0, [r4, #16]
 80129e6:	b15b      	cbz	r3, 8012a00 <__smakebuf_r+0x74>
 80129e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129ec:	4630      	mov	r0, r6
 80129ee:	f000 f8c9 	bl	8012b84 <_isatty_r>
 80129f2:	b128      	cbz	r0, 8012a00 <__smakebuf_r+0x74>
 80129f4:	89a3      	ldrh	r3, [r4, #12]
 80129f6:	f023 0303 	bic.w	r3, r3, #3
 80129fa:	f043 0301 	orr.w	r3, r3, #1
 80129fe:	81a3      	strh	r3, [r4, #12]
 8012a00:	89a0      	ldrh	r0, [r4, #12]
 8012a02:	4305      	orrs	r5, r0
 8012a04:	81a5      	strh	r5, [r4, #12]
 8012a06:	e7cd      	b.n	80129a4 <__smakebuf_r+0x18>
 8012a08:	080127a1 	.word	0x080127a1

08012a0c <_raise_r>:
 8012a0c:	291f      	cmp	r1, #31
 8012a0e:	b538      	push	{r3, r4, r5, lr}
 8012a10:	4604      	mov	r4, r0
 8012a12:	460d      	mov	r5, r1
 8012a14:	d904      	bls.n	8012a20 <_raise_r+0x14>
 8012a16:	2316      	movs	r3, #22
 8012a18:	6003      	str	r3, [r0, #0]
 8012a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8012a1e:	bd38      	pop	{r3, r4, r5, pc}
 8012a20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012a22:	b112      	cbz	r2, 8012a2a <_raise_r+0x1e>
 8012a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a28:	b94b      	cbnz	r3, 8012a3e <_raise_r+0x32>
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f000 f830 	bl	8012a90 <_getpid_r>
 8012a30:	462a      	mov	r2, r5
 8012a32:	4601      	mov	r1, r0
 8012a34:	4620      	mov	r0, r4
 8012a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a3a:	f000 b817 	b.w	8012a6c <_kill_r>
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d00a      	beq.n	8012a58 <_raise_r+0x4c>
 8012a42:	1c59      	adds	r1, r3, #1
 8012a44:	d103      	bne.n	8012a4e <_raise_r+0x42>
 8012a46:	2316      	movs	r3, #22
 8012a48:	6003      	str	r3, [r0, #0]
 8012a4a:	2001      	movs	r0, #1
 8012a4c:	e7e7      	b.n	8012a1e <_raise_r+0x12>
 8012a4e:	2400      	movs	r4, #0
 8012a50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a54:	4628      	mov	r0, r5
 8012a56:	4798      	blx	r3
 8012a58:	2000      	movs	r0, #0
 8012a5a:	e7e0      	b.n	8012a1e <_raise_r+0x12>

08012a5c <raise>:
 8012a5c:	4b02      	ldr	r3, [pc, #8]	; (8012a68 <raise+0xc>)
 8012a5e:	4601      	mov	r1, r0
 8012a60:	6818      	ldr	r0, [r3, #0]
 8012a62:	f7ff bfd3 	b.w	8012a0c <_raise_r>
 8012a66:	bf00      	nop
 8012a68:	24000184 	.word	0x24000184

08012a6c <_kill_r>:
 8012a6c:	b538      	push	{r3, r4, r5, lr}
 8012a6e:	4d07      	ldr	r5, [pc, #28]	; (8012a8c <_kill_r+0x20>)
 8012a70:	2300      	movs	r3, #0
 8012a72:	4604      	mov	r4, r0
 8012a74:	4608      	mov	r0, r1
 8012a76:	4611      	mov	r1, r2
 8012a78:	602b      	str	r3, [r5, #0]
 8012a7a:	f7ee fd83 	bl	8001584 <_kill>
 8012a7e:	1c43      	adds	r3, r0, #1
 8012a80:	d102      	bne.n	8012a88 <_kill_r+0x1c>
 8012a82:	682b      	ldr	r3, [r5, #0]
 8012a84:	b103      	cbz	r3, 8012a88 <_kill_r+0x1c>
 8012a86:	6023      	str	r3, [r4, #0]
 8012a88:	bd38      	pop	{r3, r4, r5, pc}
 8012a8a:	bf00      	nop
 8012a8c:	24002008 	.word	0x24002008

08012a90 <_getpid_r>:
 8012a90:	f7ee bd70 	b.w	8001574 <_getpid>

08012a94 <__sread>:
 8012a94:	b510      	push	{r4, lr}
 8012a96:	460c      	mov	r4, r1
 8012a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a9c:	f000 f894 	bl	8012bc8 <_read_r>
 8012aa0:	2800      	cmp	r0, #0
 8012aa2:	bfab      	itete	ge
 8012aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8012aa8:	181b      	addge	r3, r3, r0
 8012aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012aae:	bfac      	ite	ge
 8012ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012ab2:	81a3      	strhlt	r3, [r4, #12]
 8012ab4:	bd10      	pop	{r4, pc}

08012ab6 <__swrite>:
 8012ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aba:	461f      	mov	r7, r3
 8012abc:	898b      	ldrh	r3, [r1, #12]
 8012abe:	05db      	lsls	r3, r3, #23
 8012ac0:	4605      	mov	r5, r0
 8012ac2:	460c      	mov	r4, r1
 8012ac4:	4616      	mov	r6, r2
 8012ac6:	d505      	bpl.n	8012ad4 <__swrite+0x1e>
 8012ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012acc:	2302      	movs	r3, #2
 8012ace:	2200      	movs	r2, #0
 8012ad0:	f000 f868 	bl	8012ba4 <_lseek_r>
 8012ad4:	89a3      	ldrh	r3, [r4, #12]
 8012ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ade:	81a3      	strh	r3, [r4, #12]
 8012ae0:	4632      	mov	r2, r6
 8012ae2:	463b      	mov	r3, r7
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012aea:	f000 b817 	b.w	8012b1c <_write_r>

08012aee <__sseek>:
 8012aee:	b510      	push	{r4, lr}
 8012af0:	460c      	mov	r4, r1
 8012af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012af6:	f000 f855 	bl	8012ba4 <_lseek_r>
 8012afa:	1c43      	adds	r3, r0, #1
 8012afc:	89a3      	ldrh	r3, [r4, #12]
 8012afe:	bf15      	itete	ne
 8012b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8012b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012b0a:	81a3      	strheq	r3, [r4, #12]
 8012b0c:	bf18      	it	ne
 8012b0e:	81a3      	strhne	r3, [r4, #12]
 8012b10:	bd10      	pop	{r4, pc}

08012b12 <__sclose>:
 8012b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b16:	f000 b813 	b.w	8012b40 <_close_r>
	...

08012b1c <_write_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4d07      	ldr	r5, [pc, #28]	; (8012b3c <_write_r+0x20>)
 8012b20:	4604      	mov	r4, r0
 8012b22:	4608      	mov	r0, r1
 8012b24:	4611      	mov	r1, r2
 8012b26:	2200      	movs	r2, #0
 8012b28:	602a      	str	r2, [r5, #0]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	f7ee fd61 	bl	80015f2 <_write>
 8012b30:	1c43      	adds	r3, r0, #1
 8012b32:	d102      	bne.n	8012b3a <_write_r+0x1e>
 8012b34:	682b      	ldr	r3, [r5, #0]
 8012b36:	b103      	cbz	r3, 8012b3a <_write_r+0x1e>
 8012b38:	6023      	str	r3, [r4, #0]
 8012b3a:	bd38      	pop	{r3, r4, r5, pc}
 8012b3c:	24002008 	.word	0x24002008

08012b40 <_close_r>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4d06      	ldr	r5, [pc, #24]	; (8012b5c <_close_r+0x1c>)
 8012b44:	2300      	movs	r3, #0
 8012b46:	4604      	mov	r4, r0
 8012b48:	4608      	mov	r0, r1
 8012b4a:	602b      	str	r3, [r5, #0]
 8012b4c:	f7ee fd6d 	bl	800162a <_close>
 8012b50:	1c43      	adds	r3, r0, #1
 8012b52:	d102      	bne.n	8012b5a <_close_r+0x1a>
 8012b54:	682b      	ldr	r3, [r5, #0]
 8012b56:	b103      	cbz	r3, 8012b5a <_close_r+0x1a>
 8012b58:	6023      	str	r3, [r4, #0]
 8012b5a:	bd38      	pop	{r3, r4, r5, pc}
 8012b5c:	24002008 	.word	0x24002008

08012b60 <_fstat_r>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4d07      	ldr	r5, [pc, #28]	; (8012b80 <_fstat_r+0x20>)
 8012b64:	2300      	movs	r3, #0
 8012b66:	4604      	mov	r4, r0
 8012b68:	4608      	mov	r0, r1
 8012b6a:	4611      	mov	r1, r2
 8012b6c:	602b      	str	r3, [r5, #0]
 8012b6e:	f7ee fd68 	bl	8001642 <_fstat>
 8012b72:	1c43      	adds	r3, r0, #1
 8012b74:	d102      	bne.n	8012b7c <_fstat_r+0x1c>
 8012b76:	682b      	ldr	r3, [r5, #0]
 8012b78:	b103      	cbz	r3, 8012b7c <_fstat_r+0x1c>
 8012b7a:	6023      	str	r3, [r4, #0]
 8012b7c:	bd38      	pop	{r3, r4, r5, pc}
 8012b7e:	bf00      	nop
 8012b80:	24002008 	.word	0x24002008

08012b84 <_isatty_r>:
 8012b84:	b538      	push	{r3, r4, r5, lr}
 8012b86:	4d06      	ldr	r5, [pc, #24]	; (8012ba0 <_isatty_r+0x1c>)
 8012b88:	2300      	movs	r3, #0
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	4608      	mov	r0, r1
 8012b8e:	602b      	str	r3, [r5, #0]
 8012b90:	f7ee fd67 	bl	8001662 <_isatty>
 8012b94:	1c43      	adds	r3, r0, #1
 8012b96:	d102      	bne.n	8012b9e <_isatty_r+0x1a>
 8012b98:	682b      	ldr	r3, [r5, #0]
 8012b9a:	b103      	cbz	r3, 8012b9e <_isatty_r+0x1a>
 8012b9c:	6023      	str	r3, [r4, #0]
 8012b9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ba0:	24002008 	.word	0x24002008

08012ba4 <_lseek_r>:
 8012ba4:	b538      	push	{r3, r4, r5, lr}
 8012ba6:	4d07      	ldr	r5, [pc, #28]	; (8012bc4 <_lseek_r+0x20>)
 8012ba8:	4604      	mov	r4, r0
 8012baa:	4608      	mov	r0, r1
 8012bac:	4611      	mov	r1, r2
 8012bae:	2200      	movs	r2, #0
 8012bb0:	602a      	str	r2, [r5, #0]
 8012bb2:	461a      	mov	r2, r3
 8012bb4:	f7ee fd60 	bl	8001678 <_lseek>
 8012bb8:	1c43      	adds	r3, r0, #1
 8012bba:	d102      	bne.n	8012bc2 <_lseek_r+0x1e>
 8012bbc:	682b      	ldr	r3, [r5, #0]
 8012bbe:	b103      	cbz	r3, 8012bc2 <_lseek_r+0x1e>
 8012bc0:	6023      	str	r3, [r4, #0]
 8012bc2:	bd38      	pop	{r3, r4, r5, pc}
 8012bc4:	24002008 	.word	0x24002008

08012bc8 <_read_r>:
 8012bc8:	b538      	push	{r3, r4, r5, lr}
 8012bca:	4d07      	ldr	r5, [pc, #28]	; (8012be8 <_read_r+0x20>)
 8012bcc:	4604      	mov	r4, r0
 8012bce:	4608      	mov	r0, r1
 8012bd0:	4611      	mov	r1, r2
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	602a      	str	r2, [r5, #0]
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	f7ee fcee 	bl	80015b8 <_read>
 8012bdc:	1c43      	adds	r3, r0, #1
 8012bde:	d102      	bne.n	8012be6 <_read_r+0x1e>
 8012be0:	682b      	ldr	r3, [r5, #0]
 8012be2:	b103      	cbz	r3, 8012be6 <_read_r+0x1e>
 8012be4:	6023      	str	r3, [r4, #0]
 8012be6:	bd38      	pop	{r3, r4, r5, pc}
 8012be8:	24002008 	.word	0x24002008

08012bec <_init>:
 8012bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bee:	bf00      	nop
 8012bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bf2:	bc08      	pop	{r3}
 8012bf4:	469e      	mov	lr, r3
 8012bf6:	4770      	bx	lr

08012bf8 <_fini>:
 8012bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bfa:	bf00      	nop
 8012bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bfe:	bc08      	pop	{r3}
 8012c00:	469e      	mov	lr, r3
 8012c02:	4770      	bx	lr
