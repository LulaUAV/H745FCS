
baremetal_2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e690  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0810e928  0810e928  0001e928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ea20  0810ea20  0001ea20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ea28  0810ea28  0001ea28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810ea2c  0810ea2c  0001ea2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  0810ea30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000059c  10000074  0810eaa4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000610  0810eaa4  00020610  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000328c3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000051e8  00000000  00000000  00052967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00004a09  00000000  00000000  00057b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017c0  00000000  00000000  0005c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002310  00000000  00000000  0005dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f8fa  00000000  00000000  00060028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024c9b  00000000  00000000  0009f922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00193e3e  00000000  00000000  000c45bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  002583fb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000066e4  00000000  00000000  0025844c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000074 	.word	0x10000074
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810e910 	.word	0x0810e910

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000078 	.word	0x10000078
 81002d4:	0810e910 	.word	0x0810e910

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9bf 	b.w	810120c <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b974 	b.w	810120c <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468e      	mov	lr, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	d14d      	bne.n	8100fe6 <__udivmoddi4+0xaa>
 8100f4a:	428a      	cmp	r2, r1
 8100f4c:	4694      	mov	ip, r2
 8100f4e:	d969      	bls.n	8101024 <__udivmoddi4+0xe8>
 8100f50:	fab2 f282 	clz	r2, r2
 8100f54:	b152      	cbz	r2, 8100f6c <__udivmoddi4+0x30>
 8100f56:	fa01 f302 	lsl.w	r3, r1, r2
 8100f5a:	f1c2 0120 	rsb	r1, r2, #32
 8100f5e:	fa20 f101 	lsr.w	r1, r0, r1
 8100f62:	fa0c fc02 	lsl.w	ip, ip, r2
 8100f66:	ea41 0e03 	orr.w	lr, r1, r3
 8100f6a:	4094      	lsls	r4, r2
 8100f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f70:	0c21      	lsrs	r1, r4, #16
 8100f72:	fbbe f6f8 	udiv	r6, lr, r8
 8100f76:	fa1f f78c 	uxth.w	r7, ip
 8100f7a:	fb08 e316 	mls	r3, r8, r6, lr
 8100f7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100f82:	fb06 f107 	mul.w	r1, r6, r7
 8100f86:	4299      	cmp	r1, r3
 8100f88:	d90a      	bls.n	8100fa0 <__udivmoddi4+0x64>
 8100f8a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f92:	f080 811f 	bcs.w	81011d4 <__udivmoddi4+0x298>
 8100f96:	4299      	cmp	r1, r3
 8100f98:	f240 811c 	bls.w	81011d4 <__udivmoddi4+0x298>
 8100f9c:	3e02      	subs	r6, #2
 8100f9e:	4463      	add	r3, ip
 8100fa0:	1a5b      	subs	r3, r3, r1
 8100fa2:	b2a4      	uxth	r4, r4
 8100fa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa8:	fb08 3310 	mls	r3, r8, r0, r3
 8100fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fb0:	fb00 f707 	mul.w	r7, r0, r7
 8100fb4:	42a7      	cmp	r7, r4
 8100fb6:	d90a      	bls.n	8100fce <__udivmoddi4+0x92>
 8100fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8100fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fc0:	f080 810a 	bcs.w	81011d8 <__udivmoddi4+0x29c>
 8100fc4:	42a7      	cmp	r7, r4
 8100fc6:	f240 8107 	bls.w	81011d8 <__udivmoddi4+0x29c>
 8100fca:	4464      	add	r4, ip
 8100fcc:	3802      	subs	r0, #2
 8100fce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fd2:	1be4      	subs	r4, r4, r7
 8100fd4:	2600      	movs	r6, #0
 8100fd6:	b11d      	cbz	r5, 8100fe0 <__udivmoddi4+0xa4>
 8100fd8:	40d4      	lsrs	r4, r2
 8100fda:	2300      	movs	r3, #0
 8100fdc:	e9c5 4300 	strd	r4, r3, [r5]
 8100fe0:	4631      	mov	r1, r6
 8100fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe6:	428b      	cmp	r3, r1
 8100fe8:	d909      	bls.n	8100ffe <__udivmoddi4+0xc2>
 8100fea:	2d00      	cmp	r5, #0
 8100fec:	f000 80ef 	beq.w	81011ce <__udivmoddi4+0x292>
 8100ff0:	2600      	movs	r6, #0
 8100ff2:	e9c5 0100 	strd	r0, r1, [r5]
 8100ff6:	4630      	mov	r0, r6
 8100ff8:	4631      	mov	r1, r6
 8100ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ffe:	fab3 f683 	clz	r6, r3
 8101002:	2e00      	cmp	r6, #0
 8101004:	d14a      	bne.n	810109c <__udivmoddi4+0x160>
 8101006:	428b      	cmp	r3, r1
 8101008:	d302      	bcc.n	8101010 <__udivmoddi4+0xd4>
 810100a:	4282      	cmp	r2, r0
 810100c:	f200 80f9 	bhi.w	8101202 <__udivmoddi4+0x2c6>
 8101010:	1a84      	subs	r4, r0, r2
 8101012:	eb61 0303 	sbc.w	r3, r1, r3
 8101016:	2001      	movs	r0, #1
 8101018:	469e      	mov	lr, r3
 810101a:	2d00      	cmp	r5, #0
 810101c:	d0e0      	beq.n	8100fe0 <__udivmoddi4+0xa4>
 810101e:	e9c5 4e00 	strd	r4, lr, [r5]
 8101022:	e7dd      	b.n	8100fe0 <__udivmoddi4+0xa4>
 8101024:	b902      	cbnz	r2, 8101028 <__udivmoddi4+0xec>
 8101026:	deff      	udf	#255	; 0xff
 8101028:	fab2 f282 	clz	r2, r2
 810102c:	2a00      	cmp	r2, #0
 810102e:	f040 8092 	bne.w	8101156 <__udivmoddi4+0x21a>
 8101032:	eba1 010c 	sub.w	r1, r1, ip
 8101036:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810103a:	fa1f fe8c 	uxth.w	lr, ip
 810103e:	2601      	movs	r6, #1
 8101040:	0c20      	lsrs	r0, r4, #16
 8101042:	fbb1 f3f7 	udiv	r3, r1, r7
 8101046:	fb07 1113 	mls	r1, r7, r3, r1
 810104a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810104e:	fb0e f003 	mul.w	r0, lr, r3
 8101052:	4288      	cmp	r0, r1
 8101054:	d908      	bls.n	8101068 <__udivmoddi4+0x12c>
 8101056:	eb1c 0101 	adds.w	r1, ip, r1
 810105a:	f103 38ff 	add.w	r8, r3, #4294967295
 810105e:	d202      	bcs.n	8101066 <__udivmoddi4+0x12a>
 8101060:	4288      	cmp	r0, r1
 8101062:	f200 80cb 	bhi.w	81011fc <__udivmoddi4+0x2c0>
 8101066:	4643      	mov	r3, r8
 8101068:	1a09      	subs	r1, r1, r0
 810106a:	b2a4      	uxth	r4, r4
 810106c:	fbb1 f0f7 	udiv	r0, r1, r7
 8101070:	fb07 1110 	mls	r1, r7, r0, r1
 8101074:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8101078:	fb0e fe00 	mul.w	lr, lr, r0
 810107c:	45a6      	cmp	lr, r4
 810107e:	d908      	bls.n	8101092 <__udivmoddi4+0x156>
 8101080:	eb1c 0404 	adds.w	r4, ip, r4
 8101084:	f100 31ff 	add.w	r1, r0, #4294967295
 8101088:	d202      	bcs.n	8101090 <__udivmoddi4+0x154>
 810108a:	45a6      	cmp	lr, r4
 810108c:	f200 80bb 	bhi.w	8101206 <__udivmoddi4+0x2ca>
 8101090:	4608      	mov	r0, r1
 8101092:	eba4 040e 	sub.w	r4, r4, lr
 8101096:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810109a:	e79c      	b.n	8100fd6 <__udivmoddi4+0x9a>
 810109c:	f1c6 0720 	rsb	r7, r6, #32
 81010a0:	40b3      	lsls	r3, r6
 81010a2:	fa22 fc07 	lsr.w	ip, r2, r7
 81010a6:	ea4c 0c03 	orr.w	ip, ip, r3
 81010aa:	fa20 f407 	lsr.w	r4, r0, r7
 81010ae:	fa01 f306 	lsl.w	r3, r1, r6
 81010b2:	431c      	orrs	r4, r3
 81010b4:	40f9      	lsrs	r1, r7
 81010b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 81010ba:	fa00 f306 	lsl.w	r3, r0, r6
 81010be:	fbb1 f8f9 	udiv	r8, r1, r9
 81010c2:	0c20      	lsrs	r0, r4, #16
 81010c4:	fa1f fe8c 	uxth.w	lr, ip
 81010c8:	fb09 1118 	mls	r1, r9, r8, r1
 81010cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81010d0:	fb08 f00e 	mul.w	r0, r8, lr
 81010d4:	4288      	cmp	r0, r1
 81010d6:	fa02 f206 	lsl.w	r2, r2, r6
 81010da:	d90b      	bls.n	81010f4 <__udivmoddi4+0x1b8>
 81010dc:	eb1c 0101 	adds.w	r1, ip, r1
 81010e0:	f108 3aff 	add.w	sl, r8, #4294967295
 81010e4:	f080 8088 	bcs.w	81011f8 <__udivmoddi4+0x2bc>
 81010e8:	4288      	cmp	r0, r1
 81010ea:	f240 8085 	bls.w	81011f8 <__udivmoddi4+0x2bc>
 81010ee:	f1a8 0802 	sub.w	r8, r8, #2
 81010f2:	4461      	add	r1, ip
 81010f4:	1a09      	subs	r1, r1, r0
 81010f6:	b2a4      	uxth	r4, r4
 81010f8:	fbb1 f0f9 	udiv	r0, r1, r9
 81010fc:	fb09 1110 	mls	r1, r9, r0, r1
 8101100:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8101104:	fb00 fe0e 	mul.w	lr, r0, lr
 8101108:	458e      	cmp	lr, r1
 810110a:	d908      	bls.n	810111e <__udivmoddi4+0x1e2>
 810110c:	eb1c 0101 	adds.w	r1, ip, r1
 8101110:	f100 34ff 	add.w	r4, r0, #4294967295
 8101114:	d26c      	bcs.n	81011f0 <__udivmoddi4+0x2b4>
 8101116:	458e      	cmp	lr, r1
 8101118:	d96a      	bls.n	81011f0 <__udivmoddi4+0x2b4>
 810111a:	3802      	subs	r0, #2
 810111c:	4461      	add	r1, ip
 810111e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8101122:	fba0 9402 	umull	r9, r4, r0, r2
 8101126:	eba1 010e 	sub.w	r1, r1, lr
 810112a:	42a1      	cmp	r1, r4
 810112c:	46c8      	mov	r8, r9
 810112e:	46a6      	mov	lr, r4
 8101130:	d356      	bcc.n	81011e0 <__udivmoddi4+0x2a4>
 8101132:	d053      	beq.n	81011dc <__udivmoddi4+0x2a0>
 8101134:	b15d      	cbz	r5, 810114e <__udivmoddi4+0x212>
 8101136:	ebb3 0208 	subs.w	r2, r3, r8
 810113a:	eb61 010e 	sbc.w	r1, r1, lr
 810113e:	fa01 f707 	lsl.w	r7, r1, r7
 8101142:	fa22 f306 	lsr.w	r3, r2, r6
 8101146:	40f1      	lsrs	r1, r6
 8101148:	431f      	orrs	r7, r3
 810114a:	e9c5 7100 	strd	r7, r1, [r5]
 810114e:	2600      	movs	r6, #0
 8101150:	4631      	mov	r1, r6
 8101152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101156:	f1c2 0320 	rsb	r3, r2, #32
 810115a:	40d8      	lsrs	r0, r3
 810115c:	fa0c fc02 	lsl.w	ip, ip, r2
 8101160:	fa21 f303 	lsr.w	r3, r1, r3
 8101164:	4091      	lsls	r1, r2
 8101166:	4301      	orrs	r1, r0
 8101168:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810116c:	fa1f fe8c 	uxth.w	lr, ip
 8101170:	fbb3 f0f7 	udiv	r0, r3, r7
 8101174:	fb07 3610 	mls	r6, r7, r0, r3
 8101178:	0c0b      	lsrs	r3, r1, #16
 810117a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 810117e:	fb00 f60e 	mul.w	r6, r0, lr
 8101182:	429e      	cmp	r6, r3
 8101184:	fa04 f402 	lsl.w	r4, r4, r2
 8101188:	d908      	bls.n	810119c <__udivmoddi4+0x260>
 810118a:	eb1c 0303 	adds.w	r3, ip, r3
 810118e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101192:	d22f      	bcs.n	81011f4 <__udivmoddi4+0x2b8>
 8101194:	429e      	cmp	r6, r3
 8101196:	d92d      	bls.n	81011f4 <__udivmoddi4+0x2b8>
 8101198:	3802      	subs	r0, #2
 810119a:	4463      	add	r3, ip
 810119c:	1b9b      	subs	r3, r3, r6
 810119e:	b289      	uxth	r1, r1
 81011a0:	fbb3 f6f7 	udiv	r6, r3, r7
 81011a4:	fb07 3316 	mls	r3, r7, r6, r3
 81011a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81011ac:	fb06 f30e 	mul.w	r3, r6, lr
 81011b0:	428b      	cmp	r3, r1
 81011b2:	d908      	bls.n	81011c6 <__udivmoddi4+0x28a>
 81011b4:	eb1c 0101 	adds.w	r1, ip, r1
 81011b8:	f106 38ff 	add.w	r8, r6, #4294967295
 81011bc:	d216      	bcs.n	81011ec <__udivmoddi4+0x2b0>
 81011be:	428b      	cmp	r3, r1
 81011c0:	d914      	bls.n	81011ec <__udivmoddi4+0x2b0>
 81011c2:	3e02      	subs	r6, #2
 81011c4:	4461      	add	r1, ip
 81011c6:	1ac9      	subs	r1, r1, r3
 81011c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81011cc:	e738      	b.n	8101040 <__udivmoddi4+0x104>
 81011ce:	462e      	mov	r6, r5
 81011d0:	4628      	mov	r0, r5
 81011d2:	e705      	b.n	8100fe0 <__udivmoddi4+0xa4>
 81011d4:	4606      	mov	r6, r0
 81011d6:	e6e3      	b.n	8100fa0 <__udivmoddi4+0x64>
 81011d8:	4618      	mov	r0, r3
 81011da:	e6f8      	b.n	8100fce <__udivmoddi4+0x92>
 81011dc:	454b      	cmp	r3, r9
 81011de:	d2a9      	bcs.n	8101134 <__udivmoddi4+0x1f8>
 81011e0:	ebb9 0802 	subs.w	r8, r9, r2
 81011e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 81011e8:	3801      	subs	r0, #1
 81011ea:	e7a3      	b.n	8101134 <__udivmoddi4+0x1f8>
 81011ec:	4646      	mov	r6, r8
 81011ee:	e7ea      	b.n	81011c6 <__udivmoddi4+0x28a>
 81011f0:	4620      	mov	r0, r4
 81011f2:	e794      	b.n	810111e <__udivmoddi4+0x1e2>
 81011f4:	4640      	mov	r0, r8
 81011f6:	e7d1      	b.n	810119c <__udivmoddi4+0x260>
 81011f8:	46d0      	mov	r8, sl
 81011fa:	e77b      	b.n	81010f4 <__udivmoddi4+0x1b8>
 81011fc:	3b02      	subs	r3, #2
 81011fe:	4461      	add	r1, ip
 8101200:	e732      	b.n	8101068 <__udivmoddi4+0x12c>
 8101202:	4630      	mov	r0, r6
 8101204:	e709      	b.n	810101a <__udivmoddi4+0xde>
 8101206:	4464      	add	r4, ip
 8101208:	3802      	subs	r0, #2
 810120a:	e742      	b.n	8101092 <__udivmoddi4+0x156>

0810120c <__aeabi_idiv0>:
 810120c:	4770      	bx	lr
 810120e:	bf00      	nop

08101210 <_ZN8EntryAppC1Ev>:
#include "helpers.hpp"

static volatile uint32_t notif_rx;


EntryApp::EntryApp()
 8101210:	b510      	push	{r4, lr}
 8101212:	4604      	mov	r4, r0
 8101214:	f000 fa8e 	bl	8101734 <_ZN6Bmp280C1Ev>
 8101218:	f104 0048 	add.w	r0, r4, #72	; 0x48
 810121c:	f001 fc10 	bl	8102a40 <_ZN3GPSC1Ev>
 8101220:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8101224:	f001 f90c 	bl	8102440 <_ZN3IMUC1Ev>
 8101228:	a108      	add	r1, pc, #32	; (adr r1, 810124c <_ZN8EntryAppC1Ev+0x3c>)
 810122a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810122e:	a309      	add	r3, pc, #36	; (adr r3, 8101254 <_ZN8EntryAppC1Ev+0x44>)
 8101230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101234:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
 8101238:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
 810123c:	4b02      	ldr	r3, [pc, #8]	; (8101248 <_ZN8EntryAppC1Ev+0x38>)
 810123e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
{

}
 8101242:	4620      	mov	r0, r4
 8101244:	bd10      	pop	{r4, pc}
 8101246:	bf00      	nop
 8101248:	38001080 	.word	0x38001080
 810124c:	38001000 	.word	0x38001000
 8101250:	38001020 	.word	0x38001020
 8101254:	38001040 	.word	0x38001040
 8101258:	38001060 	.word	0x38001060

0810125c <_ZN8EntryApp10M4DataToM7Eh>:
 * from the M4 core to the M7.
 * @param data_type Sensor data type to send
 * @retval None
 */
void EntryApp::M4DataToM7(const uint8_t data_type)
{
 810125c:	b530      	push	{r4, r5, lr}
	switch(data_type)
 810125e:	3901      	subs	r1, #1
{
 8101260:	b0a3      	sub	sp, #140	; 0x8c
 8101262:	4604      	mov	r4, r0
	switch(data_type)
 8101264:	2904      	cmp	r1, #4
 8101266:	f200 80c7 	bhi.w	81013f8 <_ZN8EntryApp10M4DataToM7Eh+0x19c>
 810126a:	e8df f001 	tbb	[pc, r1]
 810126e:	9210      	.short	0x9210
 8101270:	7558      	.short	0x7558
 8101272:	03          	.byte	0x03
 8101273:	00          	.byte	0x00
			break;
		}

		case BARO_DATA_TYPE:
		{
		    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8101274:	2000      	movs	r0, #0
 8101276:	f005 fa8f 	bl	8106798 <HAL_HSEM_FastTake>
 810127a:	2800      	cmp	r0, #0
 810127c:	f000 80ad 	beq.w	81013da <_ZN8EntryApp10M4DataToM7Eh+0x17e>
			    HAL_HSEM_Release(HSEM_ID_0, 0);
 8101280:	2100      	movs	r1, #0
 8101282:	4608      	mov	r0, r1
		    // Release semaphore
		    HAL_HSEM_Release(HSEM_ID_0, 0);
			break;
		}
	}
}
 8101284:	b023      	add	sp, #140	; 0x8c
 8101286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			    HAL_HSEM_Release(HSEM_ID_0, 0);
 810128a:	f005 ba9f 	b.w	81067cc <HAL_HSEM_Release>
			if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 810128e:	2000      	movs	r0, #0
 8101290:	f005 fa82 	bl	8106798 <HAL_HSEM_FastTake>
 8101294:	2800      	cmp	r0, #0
 8101296:	d1f3      	bne.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
			      gps_values_m4->gps_latitude = gps.GetGPSData().gps_latitude;
 8101298:	f104 0548 	add.w	r5, r4, #72	; 0x48
 810129c:	4629      	mov	r1, r5
 810129e:	a81a      	add	r0, sp, #104	; 0x68
 81012a0:	f001 fb04 	bl	81028ac <_ZN3GPS10GetGPSDataEv>
 81012a4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 81012aa:	601a      	str	r2, [r3, #0]
			      gps_values_m4->gps_longitude = gps.GetGPSData().gps_longitude;
 81012ac:	4629      	mov	r1, r5
 81012ae:	a81a      	add	r0, sp, #104	; 0x68
 81012b0:	f001 fafc 	bl	81028ac <_ZN3GPS10GetGPSDataEv>
 81012b4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 81012ba:	605a      	str	r2, [r3, #4]
			      gps_values_m4->gps_altitude = gps.GetGPSData().gps_altitude;
 81012bc:	4629      	mov	r1, r5
 81012be:	a81a      	add	r0, sp, #104	; 0x68
 81012c0:	f001 faf4 	bl	81028ac <_ZN3GPS10GetGPSDataEv>
 81012c4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 81012ca:	609a      	str	r2, [r3, #8]
			      gps_values_m4->gps_velocity_x = gps.GetGPSData().gps_velocity_x;
 81012cc:	4629      	mov	r1, r5
 81012ce:	a81a      	add	r0, sp, #104	; 0x68
 81012d0:	f001 faec 	bl	81028ac <_ZN3GPS10GetGPSDataEv>
 81012d4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 81012da:	60da      	str	r2, [r3, #12]
			      gps_values_m4->gps_velocity_y = gps.GetGPSData().gps_velocity_y;
 81012dc:	4629      	mov	r1, r5
 81012de:	a81a      	add	r0, sp, #104	; 0x68
 81012e0:	f001 fae4 	bl	81028ac <_ZN3GPS10GetGPSDataEv>
 81012e4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 81012ea:	611a      	str	r2, [r3, #16]
			      gps_values_m4->gps_velocity_z = gps.GetGPSData().gps_velocity_z;
 81012ec:	4629      	mov	r1, r5
 81012ee:	a81a      	add	r0, sp, #104	; 0x68
 81012f0:	f001 fadc 	bl	81028ac <_ZN3GPS10GetGPSDataEv>
 81012f4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 81012fa:	615a      	str	r2, [r3, #20]
			      gps_values_m4->gnd_speed = gps.GetGPSData().gnd_speed;
 81012fc:	4629      	mov	r1, r5
 81012fe:	a81a      	add	r0, sp, #104	; 0x68
 8101300:	f001 fad4 	bl	81028ac <_ZN3GPS10GetGPSDataEv>
 8101304:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8101308:	9a20      	ldr	r2, [sp, #128]	; 0x80
 810130a:	619a      	str	r2, [r3, #24]
			      gps_values_m4->gps_satellites = gps.GetGPSData().gps_satellites;
 810130c:	4629      	mov	r1, r5
 810130e:	a81a      	add	r0, sp, #104	; 0x68
 8101310:	f001 facc 	bl	81028ac <_ZN3GPS10GetGPSDataEv>
 8101314:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8101318:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810131a:	61da      	str	r2, [r3, #28]
 810131c:	e7b0      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 810131e:	2000      	movs	r0, #0
 8101320:	f005 fa3a 	bl	8106798 <HAL_HSEM_FastTake>
 8101324:	2800      	cmp	r0, #0
 8101326:	d1ab      	bne.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		      acc_values_m4->imu_acc_x = imu.GetAccelData().x;
 8101328:	f104 0068 	add.w	r0, r4, #104	; 0x68
 810132c:	9001      	str	r0, [sp, #4]
 810132e:	f000 fe75 	bl	810201c <_ZN3IMU12GetAccelDataEv>
 8101332:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		      acc_values_m4->imu_acc_y = imu.GetAccelData().y;
 8101336:	9801      	ldr	r0, [sp, #4]
		      acc_values_m4->imu_acc_x = imu.GetAccelData().x;
 8101338:	ed83 0a00 	vstr	s0, [r3]
		      acc_values_m4->imu_acc_y = imu.GetAccelData().y;
 810133c:	f000 fe6e 	bl	810201c <_ZN3IMU12GetAccelDataEv>
 8101340:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		      acc_values_m4->imu_acc_z = imu.GetAccelData().z;
 8101344:	9801      	ldr	r0, [sp, #4]
		      acc_values_m4->imu_acc_y = imu.GetAccelData().y;
 8101346:	edc3 0a01 	vstr	s1, [r3, #4]
		      acc_values_m4->imu_acc_z = imu.GetAccelData().z;
 810134a:	f000 fe67 	bl	810201c <_ZN3IMU12GetAccelDataEv>
 810134e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8101352:	ed83 1a02 	vstr	s2, [r3, #8]
 8101356:	e793      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8101358:	2000      	movs	r0, #0
 810135a:	f005 fa1d 	bl	8106798 <HAL_HSEM_FastTake>
 810135e:	2800      	cmp	r0, #0
 8101360:	d18e      	bne.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		      gyro_values_m4->imu_gyro_x = imu.GetGyroData().x;
 8101362:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8101366:	9001      	str	r0, [sp, #4]
 8101368:	f000 fe18 	bl	8101f9c <_ZN3IMU11GetGyroDataEv>
 810136c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
		      gyro_values_m4->imu_gyro_y = imu.GetGyroData().y;
 8101370:	9801      	ldr	r0, [sp, #4]
		      gyro_values_m4->imu_gyro_x = imu.GetGyroData().x;
 8101372:	ed83 0a00 	vstr	s0, [r3]
		      gyro_values_m4->imu_gyro_y = imu.GetGyroData().y;
 8101376:	f000 fe11 	bl	8101f9c <_ZN3IMU11GetGyroDataEv>
 810137a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
		      gyro_values_m4->imu_gyro_z = imu.GetGyroData().z;
 810137e:	9801      	ldr	r0, [sp, #4]
		      gyro_values_m4->imu_gyro_y = imu.GetGyroData().y;
 8101380:	edc3 0a01 	vstr	s1, [r3, #4]
		      gyro_values_m4->imu_gyro_z = imu.GetGyroData().z;
 8101384:	f000 fe0a 	bl	8101f9c <_ZN3IMU11GetGyroDataEv>
 8101388:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 810138c:	ed83 1a02 	vstr	s2, [r3, #8]
 8101390:	e776      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8101392:	2000      	movs	r0, #0
 8101394:	f005 fa00 	bl	8106798 <HAL_HSEM_FastTake>
 8101398:	2800      	cmp	r0, #0
 810139a:	f47f af71 	bne.w	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		      mag_values_m4->imu_mag_x = imu.GetMagData().x;
 810139e:	f104 0068 	add.w	r0, r4, #104	; 0x68
 81013a2:	9001      	str	r0, [sp, #4]
 81013a4:	f000 fe7a 	bl	810209c <_ZN3IMU10GetMagDataEv>
 81013a8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
		      mag_values_m4->imu_mag_y = imu.GetMagData().y;
 81013ac:	9801      	ldr	r0, [sp, #4]
		      mag_values_m4->imu_mag_x = imu.GetMagData().x;
 81013ae:	ed83 0a00 	vstr	s0, [r3]
		      mag_values_m4->imu_mag_y = imu.GetMagData().y;
 81013b2:	f000 fe73 	bl	810209c <_ZN3IMU10GetMagDataEv>
 81013b6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
		      mag_values_m4->imu_mag_z = imu.GetMagData().z;
 81013ba:	9801      	ldr	r0, [sp, #4]
		      mag_values_m4->imu_mag_y = imu.GetMagData().y;
 81013bc:	edc3 0a01 	vstr	s1, [r3, #4]
		      mag_values_m4->imu_mag_z = imu.GetMagData().z;
 81013c0:	f000 fe6c 	bl	810209c <_ZN3IMU10GetMagDataEv>
 81013c4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 81013c8:	ed8d 0a1a 	vstr	s0, [sp, #104]	; 0x68
 81013cc:	edcd 0a1b 	vstr	s1, [sp, #108]	; 0x6c
 81013d0:	ed8d 1a1c 	vstr	s2, [sp, #112]	; 0x70
 81013d4:	ed83 1a02 	vstr	s2, [r3, #8]
 81013d8:	e752      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		      baro_values_m4->baro_altitude = baro.GetAltitude();
 81013da:	4620      	mov	r0, r4
 81013dc:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
 81013e0:	f000 f854 	bl	810148c <_ZN6Bmp28011GetAltitudeEv>
		      baro_values_m4->baro_pressure = baro.GetPressure();
 81013e4:	4620      	mov	r0, r4
 81013e6:	f8d4 40cc 	ldr.w	r4, [r4, #204]	; 0xcc
		      baro_values_m4->baro_altitude = baro.GetAltitude();
 81013ea:	ed85 0a01 	vstr	s0, [r5, #4]
		      baro_values_m4->baro_pressure = baro.GetPressure();
 81013ee:	f000 f855 	bl	810149c <_ZN6Bmp28011GetPressureEv>
 81013f2:	ed84 0a00 	vstr	s0, [r4]
 81013f6:	e743      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
}
 81013f8:	b023      	add	sp, #140	; 0x8c
 81013fa:	bd30      	pop	{r4, r5, pc}

081013fc <_ZN8EntryApp10RunSensorsEv>:
{
 81013fc:	b530      	push	{r4, r5, lr}
 81013fe:	4604      	mov	r4, r0
 8101400:	b08b      	sub	sp, #44	; 0x2c
    baro.Run();
 8101402:	f000 fb75 	bl	8101af0 <_ZN6Bmp2803RunEv>
    M4DataToM7(BARO_DATA_TYPE);
 8101406:	2105      	movs	r1, #5
 8101408:	4620      	mov	r0, r4
 810140a:	f7ff ff27 	bl	810125c <_ZN8EntryApp10M4DataToM7Eh>
   gps.ProcessGPS();
 810140e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8101412:	f001 fa65 	bl	81028e0 <_ZN3GPS10ProcessGPSEv>
  imu.GetAccelData();
 8101416:	f104 0568 	add.w	r5, r4, #104	; 0x68
   M4DataToM7(GPS_DATA_TYPE);
 810141a:	2101      	movs	r1, #1
 810141c:	4620      	mov	r0, r4
 810141e:	f7ff ff1d 	bl	810125c <_ZN8EntryApp10M4DataToM7Eh>
  imu.GetAccelData();
 8101422:	4628      	mov	r0, r5
 8101424:	f000 fdfa 	bl	810201c <_ZN3IMU12GetAccelDataEv>
  M4DataToM7(ACC_DATA_TYPE);
 8101428:	2103      	movs	r1, #3
 810142a:	4620      	mov	r0, r4
 810142c:	f7ff ff16 	bl	810125c <_ZN8EntryApp10M4DataToM7Eh>
  imu.GetMagData();
 8101430:	4628      	mov	r0, r5
 8101432:	f000 fe33 	bl	810209c <_ZN3IMU10GetMagDataEv>
  M4DataToM7(MAG_DATA_TYPE);
 8101436:	2102      	movs	r1, #2
 8101438:	4620      	mov	r0, r4
 810143a:	f7ff ff0f 	bl	810125c <_ZN8EntryApp10M4DataToM7Eh>
  imu.GetGyroData();
 810143e:	4628      	mov	r0, r5
 8101440:	f000 fdac 	bl	8101f9c <_ZN3IMU11GetGyroDataEv>
  M4DataToM7(GYRO_DATA_TYPE);
 8101444:	2104      	movs	r1, #4
 8101446:	4620      	mov	r0, r4
}
 8101448:	b00b      	add	sp, #44	; 0x2c
 810144a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  M4DataToM7(GYRO_DATA_TYPE);
 810144e:	f7ff bf05 	b.w	810125c <_ZN8EntryApp10M4DataToM7Eh>
 8101452:	bf00      	nop

08101454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101454:	b480      	push	{r7}
 8101456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101458:	4b0b      	ldr	r3, [pc, #44]	; (8101488 <SystemInit+0x34>)
 810145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810145e:	4a0a      	ldr	r2, [pc, #40]	; (8101488 <SystemInit+0x34>)
 8101460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101468:	4b07      	ldr	r3, [pc, #28]	; (8101488 <SystemInit+0x34>)
 810146a:	691b      	ldr	r3, [r3, #16]
 810146c:	4a06      	ldr	r2, [pc, #24]	; (8101488 <SystemInit+0x34>)
 810146e:	f043 0310 	orr.w	r3, r3, #16
 8101472:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101474:	4b04      	ldr	r3, [pc, #16]	; (8101488 <SystemInit+0x34>)
 8101476:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810147a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810147c:	bf00      	nop
 810147e:	46bd      	mov	sp, r7
 8101480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101484:	4770      	bx	lr
 8101486:	bf00      	nop
 8101488:	e000ed00 	.word	0xe000ed00

0810148c <_ZN6Bmp28011GetAltitudeEv>:

  return true;
}

float Bmp280::GetAltitude()
{
 810148c:	b508      	push	{r3, lr}
	return altitude;
 810148e:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8101492:	f7ff fb8d 	bl	8100bb0 <__aeabi_d2f>
}
 8101496:	ee00 0a10 	vmov	s0, r0
 810149a:	bd08      	pop	{r3, pc}

0810149c <_ZN6Bmp28011GetPressureEv>:

float Bmp280::GetPressure()
{
	return pressure;

}
 810149c:	ed90 0a02 	vldr	s0, [r0, #8]
 81014a0:	4770      	bx	lr
 81014a2:	bf00      	nop

081014a4 <_ZN6Bmp28016ReadCoefficientsEv>:

/*
 *  @brief  Reads the factory-set coefficients
 */
void Bmp280::ReadCoefficients()
{
 81014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 81014a6:	4605      	mov	r5, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81014a8:	4ea0      	ldr	r6, [pc, #640]	; (810172c <_ZN6Bmp28016ReadCoefficientsEv+0x288>)
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81014aa:	4fa1      	ldr	r7, [pc, #644]	; (8101730 <_ZN6Bmp28016ReadCoefficientsEv+0x28c>)
  SerialData[0] = Register | address::SPI_READ;
 81014ac:	2388      	movs	r3, #136	; 0x88
 81014ae:	f805 3f18 	strb.w	r3, [r5, #24]!
{
 81014b2:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81014b4:	2200      	movs	r2, #0
 81014b6:	2110      	movs	r1, #16
 81014b8:	4630      	mov	r0, r6
 81014ba:	f005 f953 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81014be:	230a      	movs	r3, #10
 81014c0:	2201      	movs	r2, #1
 81014c2:	4629      	mov	r1, r5
 81014c4:	4638      	mov	r0, r7
 81014c6:	f009 fb45 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81014ca:	230a      	movs	r3, #10
 81014cc:	2202      	movs	r2, #2
 81014ce:	4629      	mov	r1, r5
 81014d0:	4638      	mov	r0, r7
 81014d2:	f009 fd2d 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81014d6:	2201      	movs	r2, #1
 81014d8:	2110      	movs	r1, #16
 81014da:	4630      	mov	r0, r6
 81014dc:	f005 f942 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_T1 = Read16BitLE(address::REG_DIG_T1);
 81014e0:	8b23      	ldrh	r3, [r4, #24]
 81014e2:	8623      	strh	r3, [r4, #48]	; 0x30
  SerialData[0] = Register | address::SPI_READ;
 81014e4:	238a      	movs	r3, #138	; 0x8a
 81014e6:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81014e8:	2200      	movs	r2, #0
 81014ea:	2110      	movs	r1, #16
 81014ec:	4630      	mov	r0, r6
 81014ee:	f005 f939 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81014f2:	230a      	movs	r3, #10
 81014f4:	2201      	movs	r2, #1
 81014f6:	4629      	mov	r1, r5
 81014f8:	4638      	mov	r0, r7
 81014fa:	f009 fb2b 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81014fe:	230a      	movs	r3, #10
 8101500:	2202      	movs	r2, #2
 8101502:	4629      	mov	r1, r5
 8101504:	4638      	mov	r0, r7
 8101506:	f009 fd13 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810150a:	2201      	movs	r2, #1
 810150c:	2110      	movs	r1, #16
 810150e:	4630      	mov	r0, r6
 8101510:	f005 f928 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_T2 = Read16BitLE(address::REG_DIG_T2);
 8101514:	8b23      	ldrh	r3, [r4, #24]
 8101516:	8663      	strh	r3, [r4, #50]	; 0x32
  SerialData[0] = Register | address::SPI_READ;
 8101518:	238c      	movs	r3, #140	; 0x8c
 810151a:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810151c:	2200      	movs	r2, #0
 810151e:	2110      	movs	r1, #16
 8101520:	4630      	mov	r0, r6
 8101522:	f005 f91f 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101526:	230a      	movs	r3, #10
 8101528:	2201      	movs	r2, #1
 810152a:	4629      	mov	r1, r5
 810152c:	4638      	mov	r0, r7
 810152e:	f009 fb11 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101532:	230a      	movs	r3, #10
 8101534:	2202      	movs	r2, #2
 8101536:	4629      	mov	r1, r5
 8101538:	4638      	mov	r0, r7
 810153a:	f009 fcf9 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810153e:	2201      	movs	r2, #1
 8101540:	2110      	movs	r1, #16
 8101542:	4630      	mov	r0, r6
 8101544:	f005 f90e 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_T3 = Read16BitLE(address::REG_DIG_T3);
 8101548:	8b23      	ldrh	r3, [r4, #24]
 810154a:	86a3      	strh	r3, [r4, #52]	; 0x34
  SerialData[0] = Register | address::SPI_READ;
 810154c:	238e      	movs	r3, #142	; 0x8e
 810154e:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101550:	2200      	movs	r2, #0
 8101552:	2110      	movs	r1, #16
 8101554:	4630      	mov	r0, r6
 8101556:	f005 f905 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810155a:	230a      	movs	r3, #10
 810155c:	2201      	movs	r2, #1
 810155e:	4629      	mov	r1, r5
 8101560:	4638      	mov	r0, r7
 8101562:	f009 faf7 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101566:	230a      	movs	r3, #10
 8101568:	2202      	movs	r2, #2
 810156a:	4629      	mov	r1, r5
 810156c:	4638      	mov	r0, r7
 810156e:	f009 fcdf 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101572:	2201      	movs	r2, #1
 8101574:	2110      	movs	r1, #16
 8101576:	4630      	mov	r0, r6
 8101578:	f005 f8f4 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_P1 = Read16BitLE(address::REG_DIG_P1);
 810157c:	8b23      	ldrh	r3, [r4, #24]
 810157e:	86e3      	strh	r3, [r4, #54]	; 0x36
  SerialData[0] = Register | address::SPI_READ;
 8101580:	2390      	movs	r3, #144	; 0x90
 8101582:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101584:	2200      	movs	r2, #0
 8101586:	2110      	movs	r1, #16
 8101588:	4630      	mov	r0, r6
 810158a:	f005 f8eb 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810158e:	230a      	movs	r3, #10
 8101590:	2201      	movs	r2, #1
 8101592:	4629      	mov	r1, r5
 8101594:	4638      	mov	r0, r7
 8101596:	f009 fadd 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810159a:	230a      	movs	r3, #10
 810159c:	2202      	movs	r2, #2
 810159e:	4629      	mov	r1, r5
 81015a0:	4638      	mov	r0, r7
 81015a2:	f009 fcc5 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81015a6:	2201      	movs	r2, #1
 81015a8:	2110      	movs	r1, #16
 81015aa:	4630      	mov	r0, r6
 81015ac:	f005 f8da 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_P2 = Read16BitLE(address::REG_DIG_P2);
 81015b0:	8b23      	ldrh	r3, [r4, #24]
 81015b2:	8723      	strh	r3, [r4, #56]	; 0x38
  SerialData[0] = Register | address::SPI_READ;
 81015b4:	2392      	movs	r3, #146	; 0x92
 81015b6:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81015b8:	2200      	movs	r2, #0
 81015ba:	2110      	movs	r1, #16
 81015bc:	4630      	mov	r0, r6
 81015be:	f005 f8d1 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81015c2:	230a      	movs	r3, #10
 81015c4:	2201      	movs	r2, #1
 81015c6:	4629      	mov	r1, r5
 81015c8:	4638      	mov	r0, r7
 81015ca:	f009 fac3 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81015ce:	230a      	movs	r3, #10
 81015d0:	2202      	movs	r2, #2
 81015d2:	4629      	mov	r1, r5
 81015d4:	4638      	mov	r0, r7
 81015d6:	f009 fcab 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81015da:	2201      	movs	r2, #1
 81015dc:	2110      	movs	r1, #16
 81015de:	4630      	mov	r0, r6
 81015e0:	f005 f8c0 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_P3 = Read16BitLE(address::REG_DIG_P3);
 81015e4:	8b23      	ldrh	r3, [r4, #24]
 81015e6:	8763      	strh	r3, [r4, #58]	; 0x3a
  SerialData[0] = Register | address::SPI_READ;
 81015e8:	2394      	movs	r3, #148	; 0x94
 81015ea:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81015ec:	2200      	movs	r2, #0
 81015ee:	2110      	movs	r1, #16
 81015f0:	4630      	mov	r0, r6
 81015f2:	f005 f8b7 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81015f6:	230a      	movs	r3, #10
 81015f8:	2201      	movs	r2, #1
 81015fa:	4629      	mov	r1, r5
 81015fc:	4638      	mov	r0, r7
 81015fe:	f009 faa9 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101602:	230a      	movs	r3, #10
 8101604:	2202      	movs	r2, #2
 8101606:	4629      	mov	r1, r5
 8101608:	4638      	mov	r0, r7
 810160a:	f009 fc91 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810160e:	2201      	movs	r2, #1
 8101610:	2110      	movs	r1, #16
 8101612:	4630      	mov	r0, r6
 8101614:	f005 f8a6 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_P4 = Read16BitLE(address::REG_DIG_P4);
 8101618:	8b23      	ldrh	r3, [r4, #24]
 810161a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  SerialData[0] = Register | address::SPI_READ;
 810161c:	2396      	movs	r3, #150	; 0x96
 810161e:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101620:	2200      	movs	r2, #0
 8101622:	2110      	movs	r1, #16
 8101624:	4630      	mov	r0, r6
 8101626:	f005 f89d 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810162a:	230a      	movs	r3, #10
 810162c:	2201      	movs	r2, #1
 810162e:	4629      	mov	r1, r5
 8101630:	4638      	mov	r0, r7
 8101632:	f009 fa8f 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101636:	230a      	movs	r3, #10
 8101638:	2202      	movs	r2, #2
 810163a:	4629      	mov	r1, r5
 810163c:	4638      	mov	r0, r7
 810163e:	f009 fc77 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101642:	2201      	movs	r2, #1
 8101644:	2110      	movs	r1, #16
 8101646:	4630      	mov	r0, r6
 8101648:	f005 f88c 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_P5 = Read16BitLE(address::REG_DIG_P5);
 810164c:	8b23      	ldrh	r3, [r4, #24]
 810164e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  SerialData[0] = Register | address::SPI_READ;
 8101650:	2398      	movs	r3, #152	; 0x98
 8101652:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101654:	2200      	movs	r2, #0
 8101656:	2110      	movs	r1, #16
 8101658:	4630      	mov	r0, r6
 810165a:	f005 f883 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810165e:	230a      	movs	r3, #10
 8101660:	2201      	movs	r2, #1
 8101662:	4629      	mov	r1, r5
 8101664:	4638      	mov	r0, r7
 8101666:	f009 fa75 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810166a:	230a      	movs	r3, #10
 810166c:	2202      	movs	r2, #2
 810166e:	4629      	mov	r1, r5
 8101670:	4638      	mov	r0, r7
 8101672:	f009 fc5d 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101676:	2201      	movs	r2, #1
 8101678:	2110      	movs	r1, #16
 810167a:	4630      	mov	r0, r6
 810167c:	f005 f872 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_P6 = Read16BitLE(address::REG_DIG_P6);
 8101680:	8b23      	ldrh	r3, [r4, #24]
 8101682:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  SerialData[0] = Register | address::SPI_READ;
 8101686:	239a      	movs	r3, #154	; 0x9a
 8101688:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810168a:	2200      	movs	r2, #0
 810168c:	2110      	movs	r1, #16
 810168e:	4630      	mov	r0, r6
 8101690:	f005 f868 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101694:	230a      	movs	r3, #10
 8101696:	2201      	movs	r2, #1
 8101698:	4629      	mov	r1, r5
 810169a:	4638      	mov	r0, r7
 810169c:	f009 fa5a 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81016a0:	230a      	movs	r3, #10
 81016a2:	2202      	movs	r2, #2
 81016a4:	4629      	mov	r1, r5
 81016a6:	4638      	mov	r0, r7
 81016a8:	f009 fc42 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81016ac:	2201      	movs	r2, #1
 81016ae:	2110      	movs	r1, #16
 81016b0:	4630      	mov	r0, r6
 81016b2:	f005 f857 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_P7 = Read16BitLE(address::REG_DIG_P7);
 81016b6:	8b23      	ldrh	r3, [r4, #24]
 81016b8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  SerialData[0] = Register | address::SPI_READ;
 81016bc:	239c      	movs	r3, #156	; 0x9c
 81016be:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81016c0:	2200      	movs	r2, #0
 81016c2:	2110      	movs	r1, #16
 81016c4:	4630      	mov	r0, r6
 81016c6:	f005 f84d 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81016ca:	230a      	movs	r3, #10
 81016cc:	2201      	movs	r2, #1
 81016ce:	4629      	mov	r1, r5
 81016d0:	4638      	mov	r0, r7
 81016d2:	f009 fa3f 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81016d6:	230a      	movs	r3, #10
 81016d8:	2202      	movs	r2, #2
 81016da:	4629      	mov	r1, r5
 81016dc:	4638      	mov	r0, r7
 81016de:	f009 fc27 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81016e2:	2201      	movs	r2, #1
 81016e4:	2110      	movs	r1, #16
 81016e6:	4630      	mov	r0, r6
 81016e8:	f005 f83c 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_P8 = Read16BitLE(address::REG_DIG_P8);
 81016ec:	8b23      	ldrh	r3, [r4, #24]
 81016ee:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  SerialData[0] = Register | address::SPI_READ;
 81016f2:	239e      	movs	r3, #158	; 0x9e
 81016f4:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81016f6:	2200      	movs	r2, #0
 81016f8:	2110      	movs	r1, #16
 81016fa:	4630      	mov	r0, r6
 81016fc:	f005 f832 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101700:	230a      	movs	r3, #10
 8101702:	2201      	movs	r2, #1
 8101704:	4629      	mov	r1, r5
 8101706:	4638      	mov	r0, r7
 8101708:	f009 fa24 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810170c:	230a      	movs	r3, #10
 810170e:	4629      	mov	r1, r5
 8101710:	2202      	movs	r2, #2
 8101712:	4638      	mov	r0, r7
 8101714:	f009 fc0c 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101718:	2201      	movs	r2, #1
 810171a:	2110      	movs	r1, #16
 810171c:	4630      	mov	r0, r6
 810171e:	f005 f821 	bl	8106764 <HAL_GPIO_WritePin>
 comp_values.dig_P9 = Read16BitLE(address::REG_DIG_P9);
 8101722:	8b23      	ldrh	r3, [r4, #24]
 8101724:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
}
 8101728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810172a:	bf00      	nop
 810172c:	58020000 	.word	0x58020000
 8101730:	100002a8 	.word	0x100002a8

08101734 <_ZN6Bmp280C1Ev>:
Bmp280::Bmp280()
 8101734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101736:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101738:	2200      	movs	r2, #0
 810173a:	4841      	ldr	r0, [pc, #260]	; (8101840 <_ZN6Bmp280C1Ev+0x10c>)
 810173c:	2110      	movs	r1, #16
  SerialData[0] = Register | address::SPI_READ;
 810173e:	4627      	mov	r7, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101740:	f005 f810 	bl	8106764 <HAL_GPIO_WritePin>
  SerialData[0] = Register | address::SPI_READ;
 8101744:	23d0      	movs	r3, #208	; 0xd0
 8101746:	f807 3f18 	strb.w	r3, [r7, #24]!
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810174a:	483d      	ldr	r0, [pc, #244]	; (8101840 <_ZN6Bmp280C1Ev+0x10c>)
 810174c:	2200      	movs	r2, #0
 810174e:	2110      	movs	r1, #16
 8101750:	f005 f808 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101754:	230a      	movs	r3, #10
 8101756:	2201      	movs	r2, #1
 8101758:	4639      	mov	r1, r7
 810175a:	483a      	ldr	r0, [pc, #232]	; (8101844 <_ZN6Bmp280C1Ev+0x110>)
 810175c:	f009 f9fa 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[1], 1, 10);
 8101760:	230a      	movs	r3, #10
 8101762:	2201      	movs	r2, #1
 8101764:	f104 0119 	add.w	r1, r4, #25
 8101768:	4836      	ldr	r0, [pc, #216]	; (8101844 <_ZN6Bmp280C1Ev+0x110>)
 810176a:	f009 fbe1 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810176e:	4834      	ldr	r0, [pc, #208]	; (8101840 <_ZN6Bmp280C1Ev+0x10c>)
 8101770:	2201      	movs	r2, #1
 8101772:	2110      	movs	r1, #16
 8101774:	f004 fff6 	bl	8106764 <HAL_GPIO_WritePin>
  if(Read8Bit(address::REG_ID) != address::CHIP_ID)
 8101778:	7e63      	ldrb	r3, [r4, #25]
 810177a:	2b58      	cmp	r3, #88	; 0x58
 810177c:	d15d      	bne.n	810183a <_ZN6Bmp280C1Ev+0x106>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810177e:	2200      	movs	r2, #0
 8101780:	2110      	movs	r1, #16
 8101782:	482f      	ldr	r0, [pc, #188]	; (8101840 <_ZN6Bmp280C1Ev+0x10c>)
 8101784:	f004 ffee 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8101788:	20c8      	movs	r0, #200	; 0xc8
 810178a:	f001 fbad 	bl	8102ee8 <HAL_Delay>
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::SetConfig()
{
  config.mode = settings::Mode::NORMAL;
 810178e:	2303      	movs	r3, #3
 8101790:	76e3      	strb	r3, [r4, #27]
  config.pressure_oversampling = settings::Oversampling::X16;
 8101792:	2305      	movs	r3, #5
  config.mode = settings::Mode::NORMAL;
 8101794:	2500      	movs	r5, #0
  config.temp_oversampling = settings::Oversampling::X2;
 8101796:	2602      	movs	r6, #2
  config.pressure_oversampling = settings::Oversampling::X16;
 8101798:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  SerialData[0] = Register & address::SPI_WRITE;
 810179c:	f245 7374 	movw	r3, #22388	; 0x5774
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017a0:	4827      	ldr	r0, [pc, #156]	; (8101840 <_ZN6Bmp280C1Ev+0x10c>)
  SerialData[0] = Register & address::SPI_WRITE;
 81017a2:	8323      	strh	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017a4:	462a      	mov	r2, r5
 81017a6:	2110      	movs	r1, #16
  config.mode = settings::Mode::NORMAL;
 81017a8:	7725      	strb	r5, [r4, #28]
 81017aa:	7765      	strb	r5, [r4, #29]
 81017ac:	77a5      	strb	r5, [r4, #30]
  config.pressure_oversampling = settings::Oversampling::X16;
 81017ae:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 81017b2:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 81017b6:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
  config.temp_oversampling = settings::Oversampling::X2;
 81017ba:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 81017be:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 81017c2:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
 81017c6:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017ca:	f004 ffcb 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 2, 30);
 81017ce:	231e      	movs	r3, #30
 81017d0:	4632      	mov	r2, r6
 81017d2:	4639      	mov	r1, r7
 81017d4:	481b      	ldr	r0, [pc, #108]	; (8101844 <_ZN6Bmp280C1Ev+0x110>)
 81017d6:	f009 f9bd 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81017da:	4819      	ldr	r0, [pc, #100]	; (8101840 <_ZN6Bmp280C1Ev+0x10c>)
 81017dc:	2201      	movs	r2, #1
 81017de:	2110      	movs	r1, #16
 81017e0:	f004 ffc0 	bl	8106764 <HAL_GPIO_WritePin>
  uint8_t oversampling_data  =  (uint8_t) (temp_oversampling << 5 | pres_oversampling << 2  |mode);

  Write8Bit(address::REG_CTRL_MEAS, oversampling_data);


  config.iir_filter = settings::Filter::FILTER_16;
 81017e4:	2304      	movs	r3, #4
 81017e6:	77e3      	strb	r3, [r4, #31]
  SerialData[0] = Register & address::SPI_WRITE;
 81017e8:	f241 0375 	movw	r3, #4213	; 0x1075
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017ec:	4814      	ldr	r0, [pc, #80]	; (8101840 <_ZN6Bmp280C1Ev+0x10c>)
  SerialData[0] = Register & address::SPI_WRITE;
 81017ee:	8323      	strh	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017f0:	462a      	mov	r2, r5
 81017f2:	2110      	movs	r1, #16
  config.iir_filter = settings::Filter::FILTER_16;
 81017f4:	f884 5020 	strb.w	r5, [r4, #32]
 81017f8:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 81017fc:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
  config.standby = settings::StandbyTime::STANDBY_0_5;
 8101800:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
 8101804:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8101808:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 810180c:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101810:	f004 ffa8 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 2, 30);
 8101814:	231e      	movs	r3, #30
 8101816:	4632      	mov	r2, r6
 8101818:	4639      	mov	r1, r7
 810181a:	480a      	ldr	r0, [pc, #40]	; (8101844 <_ZN6Bmp280C1Ev+0x110>)
 810181c:	f009 f99a 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101820:	2201      	movs	r2, #1
 8101822:	2110      	movs	r1, #16
 8101824:	4806      	ldr	r0, [pc, #24]	; (8101840 <_ZN6Bmp280C1Ev+0x10c>)
 8101826:	f004 ff9d 	bl	8106764 <HAL_GPIO_WritePin>
  ReadCoefficients();
 810182a:	4620      	mov	r0, r4
 810182c:	f7ff fe3a 	bl	81014a4 <_ZN6Bmp28016ReadCoefficientsEv>

namespace ledcontrol{

inline void LEDAOn ()
{
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8101830:	4805      	ldr	r0, [pc, #20]	; (8101848 <_ZN6Bmp280C1Ev+0x114>)
 8101832:	2201      	movs	r2, #1
 8101834:	2180      	movs	r1, #128	; 0x80
 8101836:	f004 ff95 	bl	8106764 <HAL_GPIO_WritePin>
}
 810183a:	4620      	mov	r0, r4
 810183c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810183e:	bf00      	nop
 8101840:	58020000 	.word	0x58020000
 8101844:	100002a8 	.word	0x100002a8
 8101848:	58021000 	.word	0x58021000

0810184c <_ZN6Bmp2808ReadTempEv>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::ReadTemp()
{
 810184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 810184e:	4605      	mov	r5, r0
 8101850:	23fa      	movs	r3, #250	; 0xfa
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101852:	4e22      	ldr	r6, [pc, #136]	; (81018dc <_ZN6Bmp2808ReadTempEv+0x90>)
  SerialData[0] = Register | address::SPI_READ;
 8101854:	f805 3f18 	strb.w	r3, [r5, #24]!
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101858:	4f21      	ldr	r7, [pc, #132]	; (81018e0 <_ZN6Bmp2808ReadTempEv+0x94>)
{
 810185a:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810185c:	2200      	movs	r2, #0
 810185e:	2110      	movs	r1, #16
 8101860:	4630      	mov	r0, r6
 8101862:	f004 ff7f 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101866:	230a      	movs	r3, #10
 8101868:	2201      	movs	r2, #1
 810186a:	4629      	mov	r1, r5
 810186c:	4638      	mov	r0, r7
 810186e:	f009 f971 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 8101872:	230a      	movs	r3, #10
 8101874:	4629      	mov	r1, r5
 8101876:	2203      	movs	r2, #3
 8101878:	4638      	mov	r0, r7
 810187a:	f009 fb59 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810187e:	2201      	movs	r2, #1
 8101880:	2110      	movs	r1, #16
 8101882:	4630      	mov	r0, r6
 8101884:	f004 ff6e 	bl	8106764 <HAL_GPIO_WritePin>
  lsb = (SerialData[1] << 8);
 8101888:	7e60      	ldrb	r0, [r4, #25]
  msb = (SerialData[0] << 16);
 810188a:	7e23      	ldrb	r3, [r4, #24]
  int32_t var1, var2;
  int32_t adc_T = Read24Bit(address::REG_TEMP_MSB);
  adc_T >>= 4;

  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 810188c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;

  t_fine = var1 + var2;
  float T = (t_fine * 5 + 128) >> 8;
  temperature = (T / 100);
 810188e:	eddf 6a15 	vldr	s13, [pc, #84]	; 81018e4 <_ZN6Bmp2808ReadTempEv+0x98>
  lsb = (SerialData[1] << 8);
 8101892:	0200      	lsls	r0, r0, #8
  Out = msb | lsb | xlsb;
 8101894:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 8101898:	ebc1 2210 	rsb	r2, r1, r0, lsr #8
 810189c:	fb02 f302 	mul.w	r3, r2, r2
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81018a0:	0049      	lsls	r1, r1, #1
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 81018a2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81018a6:	ebc1 11d0 	rsb	r1, r1, r0, lsr #7
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 81018aa:	131b      	asrs	r3, r3, #12
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81018ac:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 81018b0:	fb02 f303 	mul.w	r3, r2, r3
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81018b4:	fb00 f101 	mul.w	r1, r0, r1
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 81018b8:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 81018ba:	eb03 23e1 	add.w	r3, r3, r1, asr #11
  float T = (t_fine * 5 + 128) >> 8;
 81018be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 81018c2:	3280      	adds	r2, #128	; 0x80
 81018c4:	1212      	asrs	r2, r2, #8
 81018c6:	ee07 2a90 	vmov	s15, r2
 81018ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  t_fine = var1 + var2;
 81018ce:	6023      	str	r3, [r4, #0]
  temperature = (T / 100);
 81018d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81018d4:	ed84 7a01 	vstr	s14, [r4, #4]
}
 81018d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81018da:	bf00      	nop
 81018dc:	58020000 	.word	0x58020000
 81018e0:	100002a8 	.word	0x100002a8
 81018e4:	42c80000 	.word	0x42c80000

081018e8 <_ZN6Bmp28012ReadPressureEv>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::ReadPressure()
{
 81018e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  SerialData[0] = Register | address::SPI_READ;
 81018ec:	4605      	mov	r5, r0
{
 81018ee:	4604      	mov	r4, r0

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp();
 81018f0:	f7ff ffac 	bl	810184c <_ZN6Bmp2808ReadTempEv>
  SerialData[0] = Register | address::SPI_READ;
 81018f4:	23f7      	movs	r3, #247	; 0xf7
 81018f6:	f805 3f18 	strb.w	r3, [r5, #24]!
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81018fa:	4879      	ldr	r0, [pc, #484]	; (8101ae0 <_ZN6Bmp28012ReadPressureEv+0x1f8>)
 81018fc:	2200      	movs	r2, #0
 81018fe:	2110      	movs	r1, #16
 8101900:	f004 ff30 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101904:	4629      	mov	r1, r5
 8101906:	230a      	movs	r3, #10
 8101908:	2201      	movs	r2, #1
 810190a:	4876      	ldr	r0, [pc, #472]	; (8101ae4 <_ZN6Bmp28012ReadPressureEv+0x1fc>)
 810190c:	f009 f922 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 8101910:	230a      	movs	r3, #10
 8101912:	4629      	mov	r1, r5
 8101914:	2203      	movs	r2, #3
 8101916:	4873      	ldr	r0, [pc, #460]	; (8101ae4 <_ZN6Bmp28012ReadPressureEv+0x1fc>)
 8101918:	f009 fb0a 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810191c:	4870      	ldr	r0, [pc, #448]	; (8101ae0 <_ZN6Bmp28012ReadPressureEv+0x1f8>)
 810191e:	2201      	movs	r2, #1
 8101920:	2110      	movs	r1, #16
 8101922:	f004 ff1f 	bl	8106764 <HAL_GPIO_WritePin>

  int32_t adc_P = Read24Bit(address::REG_PRESS_MSB);
  adc_P >>= 4;

  var1 = ((int64_t) t_fine) - 128000;
 8101926:	6821      	ldr	r1, [r4, #0]
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
  var2 = var2 + (((int64_t) comp_values.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t) comp_values.dig_P3) >> 8) + ((var1 * (int64_t) comp_values.dig_P2) << 12);
 8101928:	f9b4 0038 	ldrsh.w	r0, [r4, #56]	; 0x38
 810192c:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
  var1 = ((int64_t) t_fine) - 128000;
 8101930:	f5b1 3cfa 	subs.w	ip, r1, #128000	; 0x1f400
 8101934:	ea4f 71e1 	mov.w	r1, r1, asr #31
 8101938:	f141 31ff 	adc.w	r1, r1, #4294967295
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 810193c:	fbac 5e0c 	umull	r5, lr, ip, ip
 8101940:	fb0c f201 	mul.w	r2, ip, r1
  var1 = ((var1 * var1 * (int64_t) comp_values.dig_P3) >> 8) + ((var1 * (int64_t) comp_values.dig_P2) << 12);
 8101944:	17c6      	asrs	r6, r0, #31
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 8101946:	eb0e 0e42 	add.w	lr, lr, r2, lsl #1
  var1 = ((var1 * var1 * (int64_t) comp_values.dig_P3) >> 8) + ((var1 * (int64_t) comp_values.dig_P2) << 12);
 810194a:	fb00 f201 	mul.w	r2, r0, r1
 810194e:	17df      	asrs	r7, r3, #31
 8101950:	fb0c 2206 	mla	r2, ip, r6, r2
 8101954:	fb03 f60e 	mul.w	r6, r3, lr
 8101958:	fb05 6607 	mla	r6, r5, r7, r6
 810195c:	fba0 070c 	umull	r0, r7, r0, ip
 8101960:	443a      	add	r2, r7
 8101962:	fba3 3705 	umull	r3, r7, r3, r5
 8101966:	443e      	add	r6, r7
 8101968:	0312      	lsls	r2, r2, #12
 810196a:	0a1b      	lsrs	r3, r3, #8
 810196c:	ea42 5210 	orr.w	r2, r2, r0, lsr #20
 8101970:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8101974:	0300      	lsls	r0, r0, #12
 8101976:	181b      	adds	r3, r3, r0
 8101978:	eb42 2226 	adc.w	r2, r2, r6, asr #8
  var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) comp_values.dig_P1) >> 33;
 810197c:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
 810197e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8101982:	fba3 3006 	umull	r3, r0, r3, r6
 8101986:	fb06 0002 	mla	r0, r6, r2, r0
 810198a:	17c3      	asrs	r3, r0, #31
 810198c:	1042      	asrs	r2, r0, #1

  if (var1 == 0)
 810198e:	ea53 0060 	orrs.w	r0, r3, r0, asr #1
 8101992:	f000 80a3 	beq.w	8101adc <_ZN6Bmp28012ReadPressureEv+0x1f4>
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 8101996:	f9b4 803e 	ldrsh.w	r8, [r4, #62]	; 0x3e
  lsb = (SerialData[1] << 8);
 810199a:	7e60      	ldrb	r0, [r4, #25]
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 810199c:	f9b4 7040 	ldrsh.w	r7, [r4, #64]	; 0x40
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 81019a0:	fb08 f101 	mul.w	r1, r8, r1
 81019a4:	ea4f 79e8 	mov.w	r9, r8, asr #31
 81019a8:	fb0c 1109 	mla	r1, ip, r9, r1
 81019ac:	fba8 8c0c 	umull	r8, ip, r8, ip
 81019b0:	448c      	add	ip, r1
 81019b2:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 81019b6:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
 81019ba:	ea4f 4148 	mov.w	r1, r8, lsl #17
  msb = (SerialData[0] << 16);
 81019be:	f894 8018 	ldrb.w	r8, [r4, #24]
  lsb = (SerialData[1] << 8);
 81019c2:	0200      	lsls	r0, r0, #8
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81019c4:	fb07 fe0e 	mul.w	lr, r7, lr
  Out = msb | lsb | xlsb;
 81019c8:	ea40 4808 	orr.w	r8, r0, r8, lsl #16
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81019cc:	17f8      	asrs	r0, r7, #31
 81019ce:	fb05 ee00 	mla	lr, r5, r0, lr
 81019d2:	fba7 7505 	umull	r7, r5, r7, r5
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 81019d6:	19cf      	adds	r7, r1, r7
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81019d8:	4475      	add	r5, lr
  var2 = var2 + (((int64_t) comp_values.dig_P4) << 35);
 81019da:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
  adc_P >>= 4;
 81019de:	ea4f 1818 	mov.w	r8, r8, lsr #4
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 81019e2:	eb45 050c 	adc.w	r5, r5, ip
  {
    return; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 81019e6:	f5c8 1880 	rsb	r8, r8, #1048576	; 0x100000
 81019ea:	2600      	movs	r6, #0
  var2 = var2 + (((int64_t) comp_values.dig_P4) << 35);
 81019ec:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 81019f0:	19f6      	adds	r6, r6, r7
  p = (((p << 31) - var2) * 3125) / var1;
 81019f2:	f008 4500 	and.w	r5, r8, #2147483648	; 0x80000000
 81019f6:	ea4f 70c8 	mov.w	r0, r8, lsl #31
 81019fa:	1b80      	subs	r0, r0, r6
 81019fc:	ea45 0558 	orr.w	r5, r5, r8, lsr #1
 8101a00:	eb65 0501 	sbc.w	r5, r5, r1
 8101a04:	eb10 0c00 	adds.w	ip, r0, r0
 8101a08:	eb45 0e05 	adc.w	lr, r5, r5
 8101a0c:	eb1c 0c00 	adds.w	ip, ip, r0
 8101a10:	eb45 0e0e 	adc.w	lr, r5, lr
 8101a14:	ea4f 118e 	mov.w	r1, lr, lsl #6
 8101a18:	ea4f 168c 	mov.w	r6, ip, lsl #6
 8101a1c:	ea41 619c 	orr.w	r1, r1, ip, lsr #26
 8101a20:	eb1c 0c06 	adds.w	ip, ip, r6
 8101a24:	eb4e 0e01 	adc.w	lr, lr, r1
 8101a28:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8101a2c:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8101a30:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8101a34:	eb1c 0c00 	adds.w	ip, ip, r0
 8101a38:	eb45 010e 	adc.w	r1, r5, lr
 8101a3c:	0089      	lsls	r1, r1, #2
 8101a3e:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8101a42:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8101a46:	eb1c 0000 	adds.w	r0, ip, r0
 8101a4a:	eb45 0101 	adc.w	r1, r5, r1
 8101a4e:	f7ff fa0d 	bl	8100e6c <__aeabi_ldivmod>
  var1 = (((int64_t) comp_values.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8101a52:	f9b4 2046 	ldrsh.w	r2, [r4, #70]	; 0x46
  var2 = (((int64_t) comp_values.dig_P8) * p) >> 19;
 8101a56:	f9b4 e044 	ldrsh.w	lr, [r4, #68]	; 0x44
  var1 = (((int64_t) comp_values.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8101a5a:	ea4f 3c61 	mov.w	ip, r1, asr #13
 8101a5e:	0b45      	lsrs	r5, r0, #13
 8101a60:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
 8101a64:	fb02 f30c 	mul.w	r3, r2, ip
 8101a68:	17d6      	asrs	r6, r2, #31
 8101a6a:	fb05 3306 	mla	r3, r5, r6, r3
 8101a6e:	fba2 2605 	umull	r2, r6, r2, r5
 8101a72:	4433      	add	r3, r6
 8101a74:	fb02 fc0c 	mul.w	ip, r2, ip
 8101a78:	fb05 cc03 	mla	ip, r5, r3, ip
 8101a7c:	fba2 2505 	umull	r2, r5, r2, r5
 8101a80:	4465      	add	r5, ip
 8101a82:	0e53      	lsrs	r3, r2, #25
 8101a84:	ea43 13c5 	orr.w	r3, r3, r5, lsl #7

  p = ((p + var1 + var2) >> 8) + (((int64_t) comp_values.dig_P7) << 4);
 8101a88:	181b      	adds	r3, r3, r0
 8101a8a:	eb41 6565 	adc.w	r5, r1, r5, asr #25
  var2 = (((int64_t) comp_values.dig_P8) * p) >> 19;
 8101a8e:	ea4f 72ee 	mov.w	r2, lr, asr #31
 8101a92:	fb0e f101 	mul.w	r1, lr, r1
 8101a96:	fb02 1100 	mla	r1, r2, r0, r1
 8101a9a:	fbae 0e00 	umull	r0, lr, lr, r0
 8101a9e:	4471      	add	r1, lr
 8101aa0:	0cc0      	lsrs	r0, r0, #19
 8101aa2:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t) comp_values.dig_P7) << 4);
 8101aa6:	181b      	adds	r3, r3, r0
 8101aa8:	f9b4 0042 	ldrsh.w	r0, [r4, #66]	; 0x42
 8101aac:	ea4f 76e0 	mov.w	r6, r0, asr #31
 8101ab0:	eb45 41e1 	adc.w	r1, r5, r1, asr #19
 8101ab4:	0a1b      	lsrs	r3, r3, #8
 8101ab6:	0136      	lsls	r6, r6, #4
 8101ab8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8101abc:	ea46 7610 	orr.w	r6, r6, r0, lsr #28
 8101ac0:	0100      	lsls	r0, r0, #4
 8101ac2:	18c0      	adds	r0, r0, r3

  pressure = (float) p / 256;
 8101ac4:	eb46 2121 	adc.w	r1, r6, r1, asr #8
 8101ac8:	f7ff f992 	bl	8100df0 <__aeabi_l2f>
 8101acc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8101ae8 <_ZN6Bmp28012ReadPressureEv+0x200>
 8101ad0:	ee07 0a10 	vmov	s14, r0
 8101ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ad8:	edc4 7a02 	vstr	s15, [r4, #8]

}
 8101adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8101ae0:	58020000 	.word	0x58020000
 8101ae4:	100002a8 	.word	0x100002a8
 8101ae8:	3b800000 	.word	0x3b800000
 8101aec:	00000000 	.word	0x00000000

08101af0 <_ZN6Bmp2803RunEv>:
{
 8101af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 8101af2:	4605      	mov	r5, r0
 8101af4:	23fa      	movs	r3, #250	; 0xfa
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101af6:	4e36      	ldr	r6, [pc, #216]	; (8101bd0 <_ZN6Bmp2803RunEv+0xe0>)
  SerialData[0] = Register | address::SPI_READ;
 8101af8:	f805 3f18 	strb.w	r3, [r5, #24]!
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101afc:	4f35      	ldr	r7, [pc, #212]	; (8101bd4 <_ZN6Bmp2803RunEv+0xe4>)
{
 8101afe:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101b00:	2200      	movs	r2, #0
 8101b02:	2110      	movs	r1, #16
 8101b04:	4630      	mov	r0, r6
 8101b06:	f004 fe2d 	bl	8106764 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101b0a:	230a      	movs	r3, #10
 8101b0c:	2201      	movs	r2, #1
 8101b0e:	4629      	mov	r1, r5
 8101b10:	4638      	mov	r0, r7
 8101b12:	f009 f81f 	bl	810ab54 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 8101b16:	230a      	movs	r3, #10
 8101b18:	4629      	mov	r1, r5
 8101b1a:	2203      	movs	r2, #3
 8101b1c:	4638      	mov	r0, r7
 8101b1e:	f009 fa07 	bl	810af30 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101b22:	2201      	movs	r2, #1
 8101b24:	2110      	movs	r1, #16
 8101b26:	4630      	mov	r0, r6
 8101b28:	f004 fe1c 	bl	8106764 <HAL_GPIO_WritePin>
  lsb = (SerialData[1] << 8);
 8101b2c:	7e60      	ldrb	r0, [r4, #25]
  msb = (SerialData[0] << 16);
 8101b2e:	7e23      	ldrb	r3, [r4, #24]
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b30:	8e21      	ldrh	r1, [r4, #48]	; 0x30
  temperature = (T / 100);
 8101b32:	eddf 6a29 	vldr	s13, [pc, #164]	; 8101bd8 <_ZN6Bmp2803RunEv+0xe8>
  lsb = (SerialData[1] << 8);
 8101b36:	0200      	lsls	r0, r0, #8
  Out = msb | lsb | xlsb;
 8101b38:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 8101b3c:	ebc1 2210 	rsb	r2, r1, r0, lsr #8
 8101b40:	fb02 f302 	mul.w	r3, r2, r2
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b44:	0049      	lsls	r1, r1, #1
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101b46:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b4a:	ebc1 11d0 	rsb	r1, r1, r0, lsr #7
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101b4e:	131b      	asrs	r3, r3, #12
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b50:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101b54:	fb02 f303 	mul.w	r3, r2, r3
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b58:	fb00 f101 	mul.w	r1, r0, r1
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 8101b5c:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 8101b5e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
  float T = (t_fine * 5 + 128) >> 8;
 8101b62:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8101b66:	3280      	adds	r2, #128	; 0x80
 8101b68:	1212      	asrs	r2, r2, #8
 8101b6a:	ee07 2a90 	vmov	s15, r2
 8101b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  t_fine = var1 + var2;
 8101b72:	6023      	str	r3, [r4, #0]
  temperature = (T / 100);
 8101b74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  ReadPressure();
 8101b78:	4620      	mov	r0, r4
  temperature = (T / 100);
 8101b7a:	ed84 7a01 	vstr	s14, [r4, #4]
  ReadPressure();
 8101b7e:	f7ff feb3 	bl	81018e8 <_ZN6Bmp28012ReadPressureEv>
 * @param baro a pointer to the BMP280 struct
 * @returns nothing.
 */
void Bmp280::ReadAltitude()
{
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure / SEA_LEVEL_PRESSURE), (1 / 5.255)));
 8101b82:	ed94 7a02 	vldr	s14, [r4, #8]
 8101b86:	eddf 7a15 	vldr	s15, [pc, #84]	; 8101bdc <_ZN6Bmp2803RunEv+0xec>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8101b8a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8101b8e:	ee17 0a90 	vmov	r0, s15
 8101b92:	f7fe fd05 	bl	81005a0 <__aeabi_f2d>
 8101b96:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8101bc0 <_ZN6Bmp2803RunEv+0xd0>
 8101b9a:	ec41 0b10 	vmov	d0, r0, r1
 8101b9e:	f00b ff6b 	bl	810da78 <pow>
 8101ba2:	490f      	ldr	r1, [pc, #60]	; (8101be0 <_ZN6Bmp2803RunEv+0xf0>)
 8101ba4:	ec53 2b10 	vmov	r2, r3, d0
 8101ba8:	2000      	movs	r0, #0
 8101baa:	f7fe fb99 	bl	81002e0 <__aeabi_dsub>
 8101bae:	a306      	add	r3, pc, #24	; (adr r3, 8101bc8 <_ZN6Bmp2803RunEv+0xd8>)
 8101bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bb4:	f7fe fd4c 	bl	8100650 <__aeabi_dmul>
 8101bb8:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 8101bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101bbe:	bf00      	nop
 8101bc0:	ccd9456c 	.word	0xccd9456c
 8101bc4:	3fc85b95 	.word	0x3fc85b95
 8101bc8:	00000000 	.word	0x00000000
 8101bcc:	40e5a540 	.word	0x40e5a540
 8101bd0:	58020000 	.word	0x58020000
 8101bd4:	100002a8 	.word	0x100002a8
 8101bd8:	42c80000 	.word	0x42c80000
 8101bdc:	47c5e680 	.word	0x47c5e680
 8101be0:	3ff00000 	.word	0x3ff00000

08101be4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101be4:	b580      	push	{r7, lr}
 8101be6:	b082      	sub	sp, #8
 8101be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101bea:	4b2d      	ldr	r3, [pc, #180]	; (8101ca0 <MX_DMA_Init+0xbc>)
 8101bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101bf0:	4a2b      	ldr	r2, [pc, #172]	; (8101ca0 <MX_DMA_Init+0xbc>)
 8101bf2:	f043 0301 	orr.w	r3, r3, #1
 8101bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101bfa:	4b29      	ldr	r3, [pc, #164]	; (8101ca0 <MX_DMA_Init+0xbc>)
 8101bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c00:	f003 0301 	and.w	r3, r3, #1
 8101c04:	607b      	str	r3, [r7, #4]
 8101c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101c08:	4b25      	ldr	r3, [pc, #148]	; (8101ca0 <MX_DMA_Init+0xbc>)
 8101c0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c0e:	4a24      	ldr	r2, [pc, #144]	; (8101ca0 <MX_DMA_Init+0xbc>)
 8101c10:	f043 0302 	orr.w	r3, r3, #2
 8101c14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101c18:	4b21      	ldr	r3, [pc, #132]	; (8101ca0 <MX_DMA_Init+0xbc>)
 8101c1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c1e:	f003 0302 	and.w	r3, r3, #2
 8101c22:	603b      	str	r3, [r7, #0]
 8101c24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101c26:	2200      	movs	r2, #0
 8101c28:	2100      	movs	r1, #0
 8101c2a:	200b      	movs	r0, #11
 8101c2c:	f001 fd4d 	bl	81036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101c30:	200b      	movs	r0, #11
 8101c32:	f001 fd64 	bl	81036fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101c36:	2200      	movs	r2, #0
 8101c38:	2100      	movs	r1, #0
 8101c3a:	200c      	movs	r0, #12
 8101c3c:	f001 fd45 	bl	81036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101c40:	200c      	movs	r0, #12
 8101c42:	f001 fd5c 	bl	81036fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101c46:	2200      	movs	r2, #0
 8101c48:	2100      	movs	r1, #0
 8101c4a:	200d      	movs	r0, #13
 8101c4c:	f001 fd3d 	bl	81036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101c50:	200d      	movs	r0, #13
 8101c52:	f001 fd54 	bl	81036fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101c56:	2200      	movs	r2, #0
 8101c58:	2100      	movs	r1, #0
 8101c5a:	200e      	movs	r0, #14
 8101c5c:	f001 fd35 	bl	81036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101c60:	200e      	movs	r0, #14
 8101c62:	f001 fd4c 	bl	81036fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8101c66:	2200      	movs	r2, #0
 8101c68:	2100      	movs	r1, #0
 8101c6a:	200f      	movs	r0, #15
 8101c6c:	f001 fd2d 	bl	81036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8101c70:	200f      	movs	r0, #15
 8101c72:	f001 fd44 	bl	81036fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101c76:	2200      	movs	r2, #0
 8101c78:	2100      	movs	r1, #0
 8101c7a:	202f      	movs	r0, #47	; 0x2f
 8101c7c:	f001 fd25 	bl	81036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101c80:	202f      	movs	r0, #47	; 0x2f
 8101c82:	f001 fd3c 	bl	81036fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101c86:	2200      	movs	r2, #0
 8101c88:	2100      	movs	r1, #0
 8101c8a:	2038      	movs	r0, #56	; 0x38
 8101c8c:	f001 fd1d 	bl	81036ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101c90:	2038      	movs	r0, #56	; 0x38
 8101c92:	f001 fd34 	bl	81036fe <HAL_NVIC_EnableIRQ>

}
 8101c96:	bf00      	nop
 8101c98:	3708      	adds	r7, #8
 8101c9a:	46bd      	mov	sp, r7
 8101c9c:	bd80      	pop	{r7, pc}
 8101c9e:	bf00      	nop
 8101ca0:	58024400 	.word	0x58024400

08101ca4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101ca4:	b580      	push	{r7, lr}
 8101ca6:	b08a      	sub	sp, #40	; 0x28
 8101ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101caa:	f107 0314 	add.w	r3, r7, #20
 8101cae:	2200      	movs	r2, #0
 8101cb0:	601a      	str	r2, [r3, #0]
 8101cb2:	605a      	str	r2, [r3, #4]
 8101cb4:	609a      	str	r2, [r3, #8]
 8101cb6:	60da      	str	r2, [r3, #12]
 8101cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101cba:	4b29      	ldr	r3, [pc, #164]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cc0:	4a27      	ldr	r2, [pc, #156]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101cc2:	f043 0301 	orr.w	r3, r3, #1
 8101cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cca:	4b25      	ldr	r3, [pc, #148]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cd0:	f003 0301 	and.w	r3, r3, #1
 8101cd4:	613b      	str	r3, [r7, #16]
 8101cd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101cd8:	4b21      	ldr	r3, [pc, #132]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cde:	4a20      	ldr	r2, [pc, #128]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101ce0:	f043 0320 	orr.w	r3, r3, #32
 8101ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ce8:	4b1d      	ldr	r3, [pc, #116]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cee:	f003 0320 	and.w	r3, r3, #32
 8101cf2:	60fb      	str	r3, [r7, #12]
 8101cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101cf6:	4b1a      	ldr	r3, [pc, #104]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cfc:	4a18      	ldr	r2, [pc, #96]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101cfe:	f043 0308 	orr.w	r3, r3, #8
 8101d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d06:	4b16      	ldr	r3, [pc, #88]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d0c:	f003 0308 	and.w	r3, r3, #8
 8101d10:	60bb      	str	r3, [r7, #8]
 8101d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d14:	4b12      	ldr	r3, [pc, #72]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d1a:	4a11      	ldr	r2, [pc, #68]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101d1c:	f043 0302 	orr.w	r3, r3, #2
 8101d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d24:	4b0e      	ldr	r3, [pc, #56]	; (8101d60 <MX_GPIO_Init+0xbc>)
 8101d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d2a:	f003 0302 	and.w	r3, r3, #2
 8101d2e:	607b      	str	r3, [r7, #4]
 8101d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101d32:	2201      	movs	r2, #1
 8101d34:	2110      	movs	r1, #16
 8101d36:	480b      	ldr	r0, [pc, #44]	; (8101d64 <MX_GPIO_Init+0xc0>)
 8101d38:	f004 fd14 	bl	8106764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101d3c:	2310      	movs	r3, #16
 8101d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101d40:	2301      	movs	r3, #1
 8101d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d44:	2300      	movs	r3, #0
 8101d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d48:	2300      	movs	r3, #0
 8101d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101d4c:	f107 0314 	add.w	r3, r7, #20
 8101d50:	4619      	mov	r1, r3
 8101d52:	4804      	ldr	r0, [pc, #16]	; (8101d64 <MX_GPIO_Init+0xc0>)
 8101d54:	f004 fb56 	bl	8106404 <HAL_GPIO_Init>

}
 8101d58:	bf00      	nop
 8101d5a:	3728      	adds	r7, #40	; 0x28
 8101d5c:	46bd      	mov	sp, r7
 8101d5e:	bd80      	pop	{r7, pc}
 8101d60:	58024400 	.word	0x58024400
 8101d64:	58020000 	.word	0x58020000

08101d68 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101d68:	b580      	push	{r7, lr}
 8101d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101d6c:	4b1b      	ldr	r3, [pc, #108]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101d6e:	4a1c      	ldr	r2, [pc, #112]	; (8101de0 <MX_I2C1_Init+0x78>)
 8101d70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101d72:	4b1a      	ldr	r3, [pc, #104]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101d74:	4a1b      	ldr	r2, [pc, #108]	; (8101de4 <MX_I2C1_Init+0x7c>)
 8101d76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101d78:	4b18      	ldr	r3, [pc, #96]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101d7a:	2200      	movs	r2, #0
 8101d7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101d7e:	4b17      	ldr	r3, [pc, #92]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101d80:	2201      	movs	r2, #1
 8101d82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101d84:	4b15      	ldr	r3, [pc, #84]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101d86:	2200      	movs	r2, #0
 8101d88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101d8a:	4b14      	ldr	r3, [pc, #80]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101d8c:	2200      	movs	r2, #0
 8101d8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101d90:	4b12      	ldr	r3, [pc, #72]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101d92:	2200      	movs	r2, #0
 8101d94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101d96:	4b11      	ldr	r3, [pc, #68]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101d98:	2200      	movs	r2, #0
 8101d9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101d9c:	4b0f      	ldr	r3, [pc, #60]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101d9e:	2200      	movs	r2, #0
 8101da0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101da2:	480e      	ldr	r0, [pc, #56]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101da4:	f004 fd38 	bl	8106818 <HAL_I2C_Init>
 8101da8:	4603      	mov	r3, r0
 8101daa:	2b00      	cmp	r3, #0
 8101dac:	d001      	beq.n	8101db2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101dae:	f000 fb97 	bl	81024e0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101db2:	2100      	movs	r1, #0
 8101db4:	4809      	ldr	r0, [pc, #36]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101db6:	f006 ff6b 	bl	8108c90 <HAL_I2CEx_ConfigAnalogFilter>
 8101dba:	4603      	mov	r3, r0
 8101dbc:	2b00      	cmp	r3, #0
 8101dbe:	d001      	beq.n	8101dc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101dc0:	f000 fb8e 	bl	81024e0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101dc4:	2100      	movs	r1, #0
 8101dc6:	4805      	ldr	r0, [pc, #20]	; (8101ddc <MX_I2C1_Init+0x74>)
 8101dc8:	f006 ffad 	bl	8108d26 <HAL_I2CEx_ConfigDigitalFilter>
 8101dcc:	4603      	mov	r3, r0
 8101dce:	2b00      	cmp	r3, #0
 8101dd0:	d001      	beq.n	8101dd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101dd2:	f000 fb85 	bl	81024e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101dd6:	bf00      	nop
 8101dd8:	bd80      	pop	{r7, pc}
 8101dda:	bf00      	nop
 8101ddc:	1000016c 	.word	0x1000016c
 8101de0:	40005400 	.word	0x40005400
 8101de4:	307075b1 	.word	0x307075b1

08101de8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101de8:	b580      	push	{r7, lr}
 8101dea:	b0b8      	sub	sp, #224	; 0xe0
 8101dec:	af00      	add	r7, sp, #0
 8101dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101df0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101df4:	2200      	movs	r2, #0
 8101df6:	601a      	str	r2, [r3, #0]
 8101df8:	605a      	str	r2, [r3, #4]
 8101dfa:	609a      	str	r2, [r3, #8]
 8101dfc:	60da      	str	r2, [r3, #12]
 8101dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101e00:	f107 0310 	add.w	r3, r7, #16
 8101e04:	22bc      	movs	r2, #188	; 0xbc
 8101e06:	2100      	movs	r1, #0
 8101e08:	4618      	mov	r0, r3
 8101e0a:	f00c fd79 	bl	810e900 <memset>
  if(i2cHandle->Instance==I2C1)
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	681b      	ldr	r3, [r3, #0]
 8101e12:	4a5b      	ldr	r2, [pc, #364]	; (8101f80 <HAL_I2C_MspInit+0x198>)
 8101e14:	4293      	cmp	r3, r2
 8101e16:	f040 80af 	bne.w	8101f78 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101e1a:	2308      	movs	r3, #8
 8101e1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101e1e:	2300      	movs	r3, #0
 8101e20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e24:	f107 0310 	add.w	r3, r7, #16
 8101e28:	4618      	mov	r0, r3
 8101e2a:	f007 fa29 	bl	8109280 <HAL_RCCEx_PeriphCLKConfig>
 8101e2e:	4603      	mov	r3, r0
 8101e30:	2b00      	cmp	r3, #0
 8101e32:	d001      	beq.n	8101e38 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101e34:	f000 fb54 	bl	81024e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101e38:	4b52      	ldr	r3, [pc, #328]	; (8101f84 <HAL_I2C_MspInit+0x19c>)
 8101e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e3e:	4a51      	ldr	r2, [pc, #324]	; (8101f84 <HAL_I2C_MspInit+0x19c>)
 8101e40:	f043 0302 	orr.w	r3, r3, #2
 8101e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e48:	4b4e      	ldr	r3, [pc, #312]	; (8101f84 <HAL_I2C_MspInit+0x19c>)
 8101e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e4e:	f003 0302 	and.w	r3, r3, #2
 8101e52:	60fb      	str	r3, [r7, #12]
 8101e54:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101e56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101e5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101e5e:	2312      	movs	r3, #18
 8101e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e64:	2300      	movs	r3, #0
 8101e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e6a:	2300      	movs	r3, #0
 8101e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101e70:	2304      	movs	r3, #4
 8101e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101e76:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101e7a:	4619      	mov	r1, r3
 8101e7c:	4842      	ldr	r0, [pc, #264]	; (8101f88 <HAL_I2C_MspInit+0x1a0>)
 8101e7e:	f004 fac1 	bl	8106404 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101e82:	4b40      	ldr	r3, [pc, #256]	; (8101f84 <HAL_I2C_MspInit+0x19c>)
 8101e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e88:	4a3e      	ldr	r2, [pc, #248]	; (8101f84 <HAL_I2C_MspInit+0x19c>)
 8101e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101e8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e92:	4b3c      	ldr	r3, [pc, #240]	; (8101f84 <HAL_I2C_MspInit+0x19c>)
 8101e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101e9c:	60bb      	str	r3, [r7, #8]
 8101e9e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101ea0:	4b3a      	ldr	r3, [pc, #232]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101ea2:	4a3b      	ldr	r2, [pc, #236]	; (8101f90 <HAL_I2C_MspInit+0x1a8>)
 8101ea4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101ea6:	4b39      	ldr	r3, [pc, #228]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101ea8:	2221      	movs	r2, #33	; 0x21
 8101eaa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101eac:	4b37      	ldr	r3, [pc, #220]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101eae:	2200      	movs	r2, #0
 8101eb0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101eb2:	4b36      	ldr	r3, [pc, #216]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101eb4:	2200      	movs	r2, #0
 8101eb6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101eb8:	4b34      	ldr	r3, [pc, #208]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101ebe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101ec0:	4b32      	ldr	r3, [pc, #200]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101ec2:	2200      	movs	r2, #0
 8101ec4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101ec6:	4b31      	ldr	r3, [pc, #196]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101ec8:	2200      	movs	r2, #0
 8101eca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101ecc:	4b2f      	ldr	r3, [pc, #188]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101ece:	2200      	movs	r2, #0
 8101ed0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101ed2:	4b2e      	ldr	r3, [pc, #184]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101ed4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101ed8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101eda:	4b2c      	ldr	r3, [pc, #176]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101edc:	2200      	movs	r2, #0
 8101ede:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101ee0:	482a      	ldr	r0, [pc, #168]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101ee2:	f001 fc3b 	bl	810375c <HAL_DMA_Init>
 8101ee6:	4603      	mov	r3, r0
 8101ee8:	2b00      	cmp	r3, #0
 8101eea:	d001      	beq.n	8101ef0 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101eec:	f000 faf8 	bl	81024e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	4a26      	ldr	r2, [pc, #152]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101ef4:	63da      	str	r2, [r3, #60]	; 0x3c
 8101ef6:	4a25      	ldr	r2, [pc, #148]	; (8101f8c <HAL_I2C_MspInit+0x1a4>)
 8101ef8:	687b      	ldr	r3, [r7, #4]
 8101efa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8101efc:	4b25      	ldr	r3, [pc, #148]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101efe:	4a26      	ldr	r2, [pc, #152]	; (8101f98 <HAL_I2C_MspInit+0x1b0>)
 8101f00:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101f02:	4b24      	ldr	r3, [pc, #144]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f04:	2222      	movs	r2, #34	; 0x22
 8101f06:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101f08:	4b22      	ldr	r3, [pc, #136]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f0a:	2240      	movs	r2, #64	; 0x40
 8101f0c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101f0e:	4b21      	ldr	r3, [pc, #132]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f10:	2200      	movs	r2, #0
 8101f12:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101f14:	4b1f      	ldr	r3, [pc, #124]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101f1a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101f1c:	4b1d      	ldr	r3, [pc, #116]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f1e:	2200      	movs	r2, #0
 8101f20:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101f22:	4b1c      	ldr	r3, [pc, #112]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f24:	2200      	movs	r2, #0
 8101f26:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101f28:	4b1a      	ldr	r3, [pc, #104]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f2a:	2200      	movs	r2, #0
 8101f2c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101f2e:	4b19      	ldr	r3, [pc, #100]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101f34:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101f36:	4b17      	ldr	r3, [pc, #92]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f38:	2200      	movs	r2, #0
 8101f3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101f3c:	4815      	ldr	r0, [pc, #84]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f3e:	f001 fc0d 	bl	810375c <HAL_DMA_Init>
 8101f42:	4603      	mov	r3, r0
 8101f44:	2b00      	cmp	r3, #0
 8101f46:	d001      	beq.n	8101f4c <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101f48:	f000 faca 	bl	81024e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	4a11      	ldr	r2, [pc, #68]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f50:	639a      	str	r2, [r3, #56]	; 0x38
 8101f52:	4a10      	ldr	r2, [pc, #64]	; (8101f94 <HAL_I2C_MspInit+0x1ac>)
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101f58:	2200      	movs	r2, #0
 8101f5a:	2100      	movs	r1, #0
 8101f5c:	201f      	movs	r0, #31
 8101f5e:	f001 fbb4 	bl	81036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101f62:	201f      	movs	r0, #31
 8101f64:	f001 fbcb 	bl	81036fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101f68:	2200      	movs	r2, #0
 8101f6a:	2100      	movs	r1, #0
 8101f6c:	2020      	movs	r0, #32
 8101f6e:	f001 fbac 	bl	81036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101f72:	2020      	movs	r0, #32
 8101f74:	f001 fbc3 	bl	81036fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101f78:	bf00      	nop
 8101f7a:	37e0      	adds	r7, #224	; 0xe0
 8101f7c:	46bd      	mov	sp, r7
 8101f7e:	bd80      	pop	{r7, pc}
 8101f80:	40005400 	.word	0x40005400
 8101f84:	58024400 	.word	0x58024400
 8101f88:	58020400 	.word	0x58020400
 8101f8c:	100001b8 	.word	0x100001b8
 8101f90:	40020040 	.word	0x40020040
 8101f94:	10000230 	.word	0x10000230
 8101f98:	40020058 	.word	0x40020058

08101f9c <_ZN3IMU11GetGyroDataEv>:
  bool is_imu = Setup();

}

IMU::gyroData IMU::GetGyroData()
{
 8101f9c:	b530      	push	{r4, r5, lr}
 8101f9e:	b08b      	sub	sp, #44	; 0x2c
 * @returns number of bytes read
 */
uint8_t IMU::I2CReadBytes(const uint8_t &address, const uint8_t &reg,  uint8_t* buffer, uint8_t numBytes)
{
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101fa0:	ad07      	add	r5, sp, #28
 8101fa2:	2406      	movs	r4, #6
 8101fa4:	e9cd 5400 	strd	r5, r4, [sp]
 8101fa8:	2218      	movs	r2, #24
{
 8101faa:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101fac:	21d6      	movs	r1, #214	; 0xd6
 8101fae:	2301      	movs	r3, #1
 8101fb0:	4819      	ldr	r0, [pc, #100]	; (8102018 <_ZN3IMU11GetGyroDataEv+0x7c>)
 8101fb2:	f004 fed1 	bl	8106d58 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(5);
 8101fb6:	2005      	movs	r0, #5
 8101fb8:	f000 ff96 	bl	8102ee8 <HAL_Delay>
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8101fbc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return gyro * gyro_res;
 8101fc0:	ed94 6a00 	vldr	s12, [r4]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8101fc4:	ee07 3a10 	vmov	s14, r3
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8101fc8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8101fcc:	ee07 3a90 	vmov	s15, r3
  gyro_values.x = CalcGyro(gx);
 8101fd0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8101fd4:	ee06 3a90 	vmov	s13, r3
  gyro_values.y = CalcGyro(gy);
 8101fd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  gyro_values.x = CalcGyro(gx);
 8101fdc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  gyro_values.z = CalcGyro(gz);
 8101fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return gyro * gyro_res;
 8101fe4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8101fe8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8101fec:	ee67 7a86 	vmul.f32	s15, s15, s12
  gyro_values.x = CalcGyro(gx);
 8101ff0:	edc4 6a13 	vstr	s13, [r4, #76]	; 0x4c
  gyro_values.y = CalcGyro(gy);
 8101ff4:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
  gyro_values.z = CalcGyro(gz);
 8101ff8:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
  return gyro_values;
 8101ffc:	344c      	adds	r4, #76	; 0x4c
 8101ffe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8102002:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8102006:	eddd 0a08 	vldr	s1, [sp, #32]
 810200a:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 810200e:	ed9d 0a07 	vldr	s0, [sp, #28]
 8102012:	b00b      	add	sp, #44	; 0x2c
 8102014:	bd30      	pop	{r4, r5, pc}
 8102016:	bf00      	nop
 8102018:	1000016c 	.word	0x1000016c

0810201c <_ZN3IMU12GetAccelDataEv>:
{
 810201c:	b530      	push	{r4, r5, lr}
 810201e:	b08b      	sub	sp, #44	; 0x2c
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8102020:	ad07      	add	r5, sp, #28
 8102022:	2406      	movs	r4, #6
 8102024:	e9cd 5400 	strd	r5, r4, [sp]
 8102028:	2228      	movs	r2, #40	; 0x28
{
 810202a:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 810202c:	21d6      	movs	r1, #214	; 0xd6
 810202e:	2301      	movs	r3, #1
 8102030:	4819      	ldr	r0, [pc, #100]	; (8102098 <_ZN3IMU12GetAccelDataEv+0x7c>)
 8102032:	f004 fe91 	bl	8106d58 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(5);
 8102036:	2005      	movs	r0, #5
 8102038:	f000 ff56 	bl	8102ee8 <HAL_Delay>
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into ay
 810203c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return accel * acc_res;
 8102040:	ed94 6a02 	vldr	s12, [r4, #8]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into ay
 8102044:	ee07 3a10 	vmov	s14, r3
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into az
 8102048:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 810204c:	ee07 3a90 	vmov	s15, r3
  accel_values.x = CalcAccel(ax);
 8102050:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8102054:	ee06 3a90 	vmov	s13, r3
  accel_values.y = CalcAccel(ay);
 8102058:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  accel_values.x = CalcAccel(ax);
 810205c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  accel_values.z = CalcAccel(az);
 8102060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return accel * acc_res;
 8102064:	ee66 6a86 	vmul.f32	s13, s13, s12
 8102068:	ee27 7a06 	vmul.f32	s14, s14, s12
 810206c:	ee67 7a86 	vmul.f32	s15, s15, s12
  accel_values.x = CalcAccel(ax);
 8102070:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
  accel_values.y = CalcAccel(ay);
 8102074:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
  accel_values.z = CalcAccel(az);
 8102078:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
  return accel_values;
 810207c:	3440      	adds	r4, #64	; 0x40
 810207e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8102082:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8102086:	eddd 0a08 	vldr	s1, [sp, #32]
 810208a:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 810208e:	ed9d 0a07 	vldr	s0, [sp, #28]
 8102092:	b00b      	add	sp, #44	; 0x2c
 8102094:	bd30      	pop	{r4, r5, pc}
 8102096:	bf00      	nop
 8102098:	1000016c 	.word	0x1000016c

0810209c <_ZN3IMU10GetMagDataEv>:
{
 810209c:	b530      	push	{r4, r5, lr}
 810209e:	b08b      	sub	sp, #44	; 0x2c
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 81020a0:	ad07      	add	r5, sp, #28
 81020a2:	2406      	movs	r4, #6
 81020a4:	e9cd 5400 	strd	r5, r4, [sp]
 81020a8:	2228      	movs	r2, #40	; 0x28
{
 81020aa:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 81020ac:	213c      	movs	r1, #60	; 0x3c
 81020ae:	2301      	movs	r3, #1
 81020b0:	4819      	ldr	r0, [pc, #100]	; (8102118 <_ZN3IMU10GetMagDataEv+0x7c>)
 81020b2:	f004 fe51 	bl	8106d58 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(5);
 81020b6:	2005      	movs	r0, #5
 81020b8:	f000 ff16 	bl	8102ee8 <HAL_Delay>
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 81020bc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return mag * mag_res;
 81020c0:	ed94 6a01 	vldr	s12, [r4, #4]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 81020c4:	ee07 3a10 	vmov	s14, r3
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 81020c8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 81020cc:	ee07 3a90 	vmov	s15, r3
    mag_values.x = CalcMag(mx);
 81020d0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 81020d4:	ee06 3a90 	vmov	s13, r3
    mag_values.y = CalcMag(my);
 81020d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mag_values.x = CalcMag(mx);
 81020dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    mag_values.z = CalcMag(mz);
 81020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return mag * mag_res;
 81020e4:	ee66 6a86 	vmul.f32	s13, s13, s12
 81020e8:	ee27 7a06 	vmul.f32	s14, s14, s12
 81020ec:	ee67 7a86 	vmul.f32	s15, s15, s12
    mag_values.x = CalcMag(mx);
 81020f0:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    mag_values.y = CalcMag(my);
 81020f4:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    mag_values.z = CalcMag(mz);
 81020f8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
  return mag_values;
 81020fc:	3434      	adds	r4, #52	; 0x34
 81020fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8102102:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8102106:	eddd 0a08 	vldr	s1, [sp, #32]
 810210a:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 810210e:	ed9d 0a07 	vldr	s0, [sp, #28]
 8102112:	b00b      	add	sp, #44	; 0x2c
 8102114:	bd30      	pop	{r4, r5, pc}
 8102116:	bf00      	nop
 8102118:	1000016c 	.word	0x1000016c

0810211c <_ZN3IMU8InitGyroEv>:
{
 810211c:	b570      	push	{r4, r5, r6, lr}
   if(gyro_settings.enabled == true)
 810211e:	7c02      	ldrb	r2, [r0, #16]
{
 8102120:	b084      	sub	sp, #16
 8102122:	4604      	mov	r4, r0
   if(gyro_settings.enabled == true)
 8102124:	b102      	cbz	r2, 8102128 <_ZN3IMU8InitGyroEv+0xc>
       temp_reg_val = gyro_settings.sampleRate;
 8102126:	7d02      	ldrb	r2, [r0, #20]
   temp_reg_val |= gyro_settings.scale;
 8102128:	8a61      	ldrh	r1, [r4, #18]
   temp_reg_val |= gyro_settings.bandwidth;
 810212a:	7d63      	ldrb	r3, [r4, #21]
 */
HAL_StatusTypeDef IMU::WriteByte(const uint8_t &address, const uint8_t &reg, uint8_t data)
{
  HAL_StatusTypeDef status;
//  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810212c:	4830      	ldr	r0, [pc, #192]	; (81021f0 <_ZN3IMU8InitGyroEv+0xd4>)
   temp_reg_val |= gyro_settings.bandwidth;
 810212e:	430b      	orrs	r3, r1
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102130:	2601      	movs	r6, #1
   temp_reg_val |= gyro_settings.bandwidth;
 8102132:	431a      	orrs	r2, r3
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102134:	f10d 050f 	add.w	r5, sp, #15
 8102138:	4633      	mov	r3, r6
 810213a:	21d6      	movs	r1, #214	; 0xd6
 810213c:	f88d 200f 	strb.w	r2, [sp, #15]
 8102140:	e9cd 5600 	strd	r5, r6, [sp]
 8102144:	2210      	movs	r2, #16
 8102146:	f004 fd11 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 810214a:	2005      	movs	r0, #5
 810214c:	f000 fecc 	bl	8102ee8 <HAL_Delay>
    WriteByte(gyroaccaddress::LSM9DS1_AG_ADDR, gyroaccaddress::CTRL_REG2_G, temp_reg_val);
 8102150:	2100      	movs	r1, #0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102152:	2211      	movs	r2, #17
 8102154:	4633      	mov	r3, r6
 8102156:	f88d 100f 	strb.w	r1, [sp, #15]
 810215a:	4825      	ldr	r0, [pc, #148]	; (81021f0 <_ZN3IMU8InitGyroEv+0xd4>)
 810215c:	9601      	str	r6, [sp, #4]
 810215e:	21d6      	movs	r1, #214	; 0xd6
 8102160:	9500      	str	r5, [sp, #0]
 8102162:	f004 fd03 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 8102166:	2005      	movs	r0, #5
 8102168:	f000 febe 	bl	8102ee8 <HAL_Delay>
    if(gyro_settings.flipX)
 810216c:	7e63      	ldrb	r3, [r4, #25]
    if(gyro_settings.flipY)
 810216e:	7ea0      	ldrb	r0, [r4, #26]
    if(gyro_settings.flipX)
 8102170:	2b00      	cmp	r3, #0
    if(gyro_settings.flipZ)
 8102172:	7ee3      	ldrb	r3, [r4, #27]
    if(gyro_settings.flipX)
 8102174:	bf0b      	itete	eq
 8102176:	2110      	moveq	r1, #16
 8102178:	2130      	movne	r1, #48	; 0x30
 810217a:	2200      	moveq	r2, #0
 810217c:	2220      	movne	r2, #32
      temp_reg_val |= 1 << 4;
 810217e:	2800      	cmp	r0, #0
 8102180:	bf18      	it	ne
 8102182:	460a      	movne	r2, r1
    if(gyro_settings.flipZ)
 8102184:	b10b      	cbz	r3, 810218a <_ZN3IMU8InitGyroEv+0x6e>
      temp_reg_val |= 1 << 3;
 8102186:	f042 0208 	orr.w	r2, r2, #8
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810218a:	2301      	movs	r3, #1
 810218c:	e9cd 5300 	strd	r5, r3, [sp]
 8102190:	21d6      	movs	r1, #214	; 0xd6
 8102192:	f88d 200f 	strb.w	r2, [sp, #15]
 8102196:	4816      	ldr	r0, [pc, #88]	; (81021f0 <_ZN3IMU8InitGyroEv+0xd4>)
 8102198:	2213      	movs	r2, #19
 810219a:	f004 fce7 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 810219e:	2005      	movs	r0, #5
 81021a0:	f000 fea2 	bl	8102ee8 <HAL_Delay>
    if(gyro_settings.enableZ)
 81021a4:	7fe3      	ldrb	r3, [r4, #31]
    if(gyro_settings.enableY)
 81021a6:	7fa1      	ldrb	r1, [r4, #30]
    if(gyro_settings.enableZ)
 81021a8:	2b00      	cmp	r3, #0
    if(gyro_settings.enableX)
 81021aa:	7f63      	ldrb	r3, [r4, #29]
    if(gyro_settings.enableZ)
 81021ac:	bf0b      	itete	eq
 81021ae:	2210      	moveq	r2, #16
 81021b0:	2230      	movne	r2, #48	; 0x30
 81021b2:	f04f 0c00 	moveq.w	ip, #0
 81021b6:	f04f 0c20 	movne.w	ip, #32
      temp_reg_val |= 1 << 4;
 81021ba:	2900      	cmp	r1, #0
 81021bc:	bf18      	it	ne
 81021be:	4694      	movne	ip, r2
    if(gyro_settings.enableX)
 81021c0:	b10b      	cbz	r3, 81021c6 <_ZN3IMU8InitGyroEv+0xaa>
      temp_reg_val |= 1 << 3;
 81021c2:	f04c 0c08 	orr.w	ip, ip, #8
    if(gyro_settings.latchInterrupt)
 81021c6:	f894 3020 	ldrb.w	r3, [r4, #32]
 81021ca:	b10b      	cbz	r3, 81021d0 <_ZN3IMU8InitGyroEv+0xb4>
      temp_reg_val |= 1 << 1;
 81021cc:	f04c 0c02 	orr.w	ip, ip, #2
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81021d0:	2301      	movs	r3, #1
 81021d2:	e9cd 5300 	strd	r5, r3, [sp]
 81021d6:	221e      	movs	r2, #30
 81021d8:	21d6      	movs	r1, #214	; 0xd6
 81021da:	4805      	ldr	r0, [pc, #20]	; (81021f0 <_ZN3IMU8InitGyroEv+0xd4>)
 81021dc:	f88d c00f 	strb.w	ip, [sp, #15]
 81021e0:	f004 fcc4 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 81021e4:	2005      	movs	r0, #5
 81021e6:	f000 fe7f 	bl	8102ee8 <HAL_Delay>
}
 81021ea:	b004      	add	sp, #16
 81021ec:	bd70      	pop	{r4, r5, r6, pc}
 81021ee:	bf00      	nop
 81021f0:	1000016c 	.word	0x1000016c

081021f4 <_ZN3IMU9InitAccelEv>:
{
 81021f4:	b530      	push	{r4, r5, lr}
  if(accel_settings.enableZ)
 81021f6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
{
 81021fa:	4604      	mov	r4, r0
  if(accel_settings.enableZ)
 81021fc:	2b00      	cmp	r3, #0
  if(accel_settings.enableY)
 81021fe:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
  if(accel_settings.enableX)
 8102202:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  if(accel_settings.enableZ)
 8102206:	bf0b      	itete	eq
 8102208:	2110      	moveq	r1, #16
 810220a:	2130      	movne	r1, #48	; 0x30
 810220c:	2200      	moveq	r2, #0
 810220e:	2220      	movne	r2, #32
{
 8102210:	b085      	sub	sp, #20
    temp_reg_val |= 1 << 4;
 8102212:	2800      	cmp	r0, #0
 8102214:	bf18      	it	ne
 8102216:	460a      	movne	r2, r1
  if(accel_settings.enableX)
 8102218:	b10b      	cbz	r3, 810221e <_ZN3IMU9InitAccelEv+0x2a>
    temp_reg_val |= 1 << 3;
 810221a:	f042 0208 	orr.w	r2, r2, #8
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810221e:	2301      	movs	r3, #1
 8102220:	f10d 050f 	add.w	r5, sp, #15
 8102224:	e9cd 5300 	strd	r5, r3, [sp]
 8102228:	f88d 200f 	strb.w	r2, [sp, #15]
 810222c:	21d6      	movs	r1, #214	; 0xd6
 810222e:	221f      	movs	r2, #31
 8102230:	4812      	ldr	r0, [pc, #72]	; (810227c <_ZN3IMU9InitAccelEv+0x88>)
 8102232:	f004 fc9b 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 8102236:	2005      	movs	r0, #5
 8102238:	f000 fe56 	bl	8102ee8 <HAL_Delay>
  if(accel_settings.enabled == true)
 810223c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8102240:	b10b      	cbz	r3, 8102246 <_ZN3IMU9InitAccelEv+0x52>
    temp_reg_val = accel_settings.sampleRate;
 8102242:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  if(accel_settings.bandwidth > 0)
 8102246:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
  temp_reg_val |= accel_settings.scale;
 810224a:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810224e:	480b      	ldr	r0, [pc, #44]	; (810227c <_ZN3IMU9InitAccelEv+0x88>)
  temp_reg_val |= accel_settings.scale;
 8102250:	ea43 0401 	orr.w	r4, r3, r1
  if(accel_settings.bandwidth > 0)
 8102254:	2a00      	cmp	r2, #0
    temp_reg_val |= accel_settings.bandwidth;
 8102256:	bfc8      	it	gt
 8102258:	4314      	orrgt	r4, r2
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810225a:	f04f 0301 	mov.w	r3, #1
    temp_reg_val |= accel_settings.bandwidth;
 810225e:	bfc8      	it	gt
 8102260:	b2e4      	uxtbgt	r4, r4
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102262:	e9cd 5300 	strd	r5, r3, [sp]
 8102266:	2220      	movs	r2, #32
 8102268:	21d6      	movs	r1, #214	; 0xd6
 810226a:	f88d 400f 	strb.w	r4, [sp, #15]
 810226e:	f004 fc7d 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 8102272:	2005      	movs	r0, #5
 8102274:	f000 fe38 	bl	8102ee8 <HAL_Delay>
}
 8102278:	b005      	add	sp, #20
 810227a:	bd30      	pop	{r4, r5, pc}
 810227c:	1000016c 	.word	0x1000016c

08102280 <_ZN3IMU7InitMagEv>:
{
 8102280:	b570      	push	{r4, r5, r6, lr}
  if(mag_settings.tempCompensationEnable)
 8102282:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
  temp_reg_val |= mag_settings.sampleRate;
 8102286:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
 810228a:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
    temp_reg_val |=  0x1 << 7;
 810228e:	2b00      	cmp	r3, #0
{
 8102290:	b084      	sub	sp, #16
    temp_reg_val |=  0x1 << 7;
 8102292:	bf18      	it	ne
 8102294:	2380      	movne	r3, #128	; 0x80
  temp_reg_val |= mag_settings.sampleRate;
 8102296:	430a      	orrs	r2, r1
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102298:	2401      	movs	r4, #1
 810229a:	f10d 060f 	add.w	r6, sp, #15
  temp_reg_val |= mag_settings.sampleRate;
 810229e:	4313      	orrs	r3, r2
{
 81022a0:	4605      	mov	r5, r0
 81022a2:	f88d 300f 	strb.w	r3, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81022a6:	2220      	movs	r2, #32
 81022a8:	4623      	mov	r3, r4
 81022aa:	213c      	movs	r1, #60	; 0x3c
 81022ac:	e9cd 6400 	strd	r6, r4, [sp]
 81022b0:	4825      	ldr	r0, [pc, #148]	; (8102348 <_ZN3IMU7InitMagEv+0xc8>)
 81022b2:	f004 fc5b 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 81022b6:	2005      	movs	r0, #5
 81022b8:	f000 fe16 	bl	8102ee8 <HAL_Delay>
   WriteByte(magaddress::LSM9DS1_M_ADDR, magaddress::CTRL_REG2_M, temp_reg_val);
 81022bc:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 81022c0:	f88d 100f 	strb.w	r1, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81022c4:	4623      	mov	r3, r4
 81022c6:	2221      	movs	r2, #33	; 0x21
 81022c8:	213c      	movs	r1, #60	; 0x3c
 81022ca:	e9cd 6400 	strd	r6, r4, [sp]
 81022ce:	481e      	ldr	r0, [pc, #120]	; (8102348 <_ZN3IMU7InitMagEv+0xc8>)
 81022d0:	f004 fc4c 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 81022d4:	2005      	movs	r0, #5
 81022d6:	f000 fe07 	bl	8102ee8 <HAL_Delay>
   if(mag_settings.lowPowerEnable)
 81022da:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   temp_reg_val |= mag_settings.operatingMode & 0x3;
 81022de:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81022e2:	4819      	ldr	r0, [pc, #100]	; (8102348 <_ZN3IMU7InitMagEv+0xc8>)
     temp_reg_val |= 0x1 << 5;
 81022e4:	2a00      	cmp	r2, #0
 81022e6:	bf0c      	ite	eq
 81022e8:	2200      	moveq	r2, #0
 81022ea:	2220      	movne	r2, #32
   temp_reg_val |= mag_settings.operatingMode & 0x3;
 81022ec:	f003 0303 	and.w	r3, r3, #3
 81022f0:	431a      	orrs	r2, r3
 81022f2:	f88d 200f 	strb.w	r2, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81022f6:	4623      	mov	r3, r4
 81022f8:	2222      	movs	r2, #34	; 0x22
 81022fa:	213c      	movs	r1, #60	; 0x3c
 81022fc:	e9cd 6400 	strd	r6, r4, [sp]
 8102300:	f004 fc34 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 8102304:	2005      	movs	r0, #5
 8102306:	f000 fdef 	bl	8102ee8 <HAL_Delay>
   WriteByte( magaddress::LSM9DS1_M_ADDR,  magaddress::CTRL_REG4_M, temp_reg_val);
 810230a:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 810230e:	f88d 100f 	strb.w	r1, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102312:	4623      	mov	r3, r4
 8102314:	2223      	movs	r2, #35	; 0x23
 8102316:	213c      	movs	r1, #60	; 0x3c
 8102318:	e9cd 6400 	strd	r6, r4, [sp]
 810231c:	480a      	ldr	r0, [pc, #40]	; (8102348 <_ZN3IMU7InitMagEv+0xc8>)
 810231e:	f004 fc25 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 8102322:	2005      	movs	r0, #5
 8102324:	f000 fde0 	bl	8102ee8 <HAL_Delay>
   WriteByte( magaddress::LSM9DS1_M_ADDR,  magaddress::CTRL_REG5_M, temp_reg_val);
 8102328:	2500      	movs	r5, #0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810232a:	4623      	mov	r3, r4
 810232c:	2224      	movs	r2, #36	; 0x24
 810232e:	213c      	movs	r1, #60	; 0x3c
 8102330:	e9cd 6400 	strd	r6, r4, [sp]
 8102334:	4804      	ldr	r0, [pc, #16]	; (8102348 <_ZN3IMU7InitMagEv+0xc8>)
 8102336:	f88d 500f 	strb.w	r5, [sp, #15]
 810233a:	f004 fc17 	bl	8106b6c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 810233e:	2005      	movs	r0, #5
 8102340:	f000 fdd2 	bl	8102ee8 <HAL_Delay>
}
 8102344:	b004      	add	sp, #16
 8102346:	bd70      	pop	{r4, r5, r6, pc}
 8102348:	1000016c 	.word	0x1000016c

0810234c <_ZN3IMU5SetupEv>:
{
 810234c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      mag_res = resolution::MAG_FS_4G;
 8102350:	4b33      	ldr	r3, [pc, #204]	; (8102420 <_ZN3IMU5SetupEv+0xd4>)
 8102352:	6043      	str	r3, [r0, #4]
{
 8102354:	b086      	sub	sp, #24
 gyro_settings.orientation = 0;
 8102356:	4b33      	ldr	r3, [pc, #204]	; (8102424 <_ZN3IMU5SetupEv+0xd8>)
      gyro_res =  resolution::GYRO_FS_245;
 8102358:	4933      	ldr	r1, [pc, #204]	; (8102428 <_ZN3IMU5SetupEv+0xdc>)
      acc_res =  resolution::ACC_FS_4G;
 810235a:	4a34      	ldr	r2, [pc, #208]	; (810242c <_ZN3IMU5SetupEv+0xe0>)
      gyro_res =  resolution::GYRO_FS_245;
 810235c:	6001      	str	r1, [r0, #0]
 gyro_settings.scale = to_underlying(settings::GyroFullScale::FS_245);
 810235e:	2600      	movs	r6, #0
  gyro_settings.enabled = true;
 8102360:	2501      	movs	r5, #1
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8102362:	f04f 0864 	mov.w	r8, #100	; 0x64
 8102366:	f10d 0717 	add.w	r7, sp, #23
      acc_res =  resolution::ACC_FS_4G;
 810236a:	6082      	str	r2, [r0, #8]
  gyro_settings.enabled = true;
 810236c:	7405      	strb	r5, [r0, #16]
 gyro_settings.scale = to_underlying(settings::GyroFullScale::FS_245);
 810236e:	8246      	strh	r6, [r0, #18]
 gyro_settings.HPFCutoff = 0;
 8102370:	6186      	str	r6, [r0, #24]
 gyro_settings.latchInterrupt = 0;
 8102372:	f880 6020 	strb.w	r6, [r0, #32]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8102376:	e9cd 5801 	strd	r5, r8, [sp, #4]
 810237a:	9700      	str	r7, [sp, #0]
 gyro_settings.orientation = 0;
 810237c:	61c3      	str	r3, [r0, #28]
  accel_settings.scale = to_underlying(settings::AccFullScale::XL_FS_4G);
 810237e:	33c0      	adds	r3, #192	; 0xc0
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 8102380:	4a2b      	ldr	r2, [pc, #172]	; (8102430 <_ZN3IMU5SetupEv+0xe4>)
  accel_settings.scale = to_underlying(settings::AccFullScale::XL_FS_4G);
 8102382:	6243      	str	r3, [r0, #36]	; 0x24
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 8102384:	4b2b      	ldr	r3, [pc, #172]	; (8102434 <_ZN3IMU5SetupEv+0xe8>)
  uint8_t reg_value = 0x00;
 8102386:	f88d 6017 	strb.w	r6, [sp, #23]
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 810238a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  mag_settings.ZPerformance = to_underlying(settings::MagZOpMode::MAG_UHP_MODE);
 810238e:	4b2a      	ldr	r3, [pc, #168]	; (8102438 <_ZN3IMU5SetupEv+0xec>)
 8102390:	6303      	str	r3, [r0, #48]	; 0x30
 gyro_settings.sampleRate = to_underlying(settings::GyroODR::ODR_952);
 8102392:	23c0      	movs	r3, #192	; 0xc0
 8102394:	6143      	str	r3, [r0, #20]
  accel_settings.enabled = true;
 8102396:	f241 0301 	movw	r3, #4097	; 0x1001
 810239a:	8443      	strh	r3, [r0, #34]	; 0x22
{
 810239c:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 810239e:	462b      	mov	r3, r5
 81023a0:	4826      	ldr	r0, [pc, #152]	; (810243c <_ZN3IMU5SetupEv+0xf0>)
 81023a2:	220f      	movs	r2, #15
 81023a4:	21d6      	movs	r1, #214	; 0xd6
 81023a6:	f004 fac7 	bl	8106938 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 81023aa:	b9d8      	cbnz	r0, 81023e4 <_ZN3IMU5SetupEv+0x98>
  return reg_value;
 81023ac:	4684      	mov	ip, r0
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81023ae:	462b      	mov	r3, r5
 81023b0:	e9cd 5801 	strd	r5, r8, [sp, #4]
 81023b4:	4821      	ldr	r0, [pc, #132]	; (810243c <_ZN3IMU5SetupEv+0xf0>)
 81023b6:	9700      	str	r7, [sp, #0]
 81023b8:	220f      	movs	r2, #15
 81023ba:	213c      	movs	r1, #60	; 0x3c
  return reg_value;
 81023bc:	f89d 6017 	ldrb.w	r6, [sp, #23]
  uint8_t reg_value = 0x00;
 81023c0:	f88d c017 	strb.w	ip, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81023c4:	f004 fab8 	bl	8106938 <HAL_I2C_Mem_Read>
      uint16_t imu_response = (ag_check << 8) | mag_check;
 81023c8:	0233      	lsls	r3, r6, #8
 81023ca:	b21b      	sxth	r3, r3
  if(status != HAL_OK)
 81023cc:	b908      	cbnz	r0, 81023d2 <_ZN3IMU5SetupEv+0x86>
      uint16_t imu_response = (ag_check << 8) | mag_check;
 81023ce:	f89d 5017 	ldrb.w	r5, [sp, #23]
        if(imu_response != ((imuresponse::WHO_AM_I_AG_RSP << 8 ) | imuresponse::WHO_AM_I_M_RSP))
 81023d2:	431d      	orrs	r5, r3
 81023d4:	f646 033d 	movw	r3, #26685	; 0x683d
 81023d8:	429d      	cmp	r5, r3
 81023da:	d013      	beq.n	8102404 <_ZN3IMU5SetupEv+0xb8>
           return false;
 81023dc:	2000      	movs	r0, #0
}
 81023de:	b006      	add	sp, #24
 81023e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81023e4:	e9cd 5801 	strd	r5, r8, [sp, #4]
 81023e8:	4814      	ldr	r0, [pc, #80]	; (810243c <_ZN3IMU5SetupEv+0xf0>)
 81023ea:	9700      	str	r7, [sp, #0]
 81023ec:	462b      	mov	r3, r5
 81023ee:	220f      	movs	r2, #15
 81023f0:	213c      	movs	r1, #60	; 0x3c
  uint8_t reg_value = 0x00;
 81023f2:	f88d 6017 	strb.w	r6, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81023f6:	f004 fa9f 	bl	8106938 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 81023fa:	2800      	cmp	r0, #0
 81023fc:	d1ee      	bne.n	81023dc <_ZN3IMU5SetupEv+0x90>
 81023fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8102402:	e7e4      	b.n	81023ce <_ZN3IMU5SetupEv+0x82>
        InitGyro();
 8102404:	4620      	mov	r0, r4
 8102406:	f7ff fe89 	bl	810211c <_ZN3IMU8InitGyroEv>
        InitAccel();
 810240a:	4620      	mov	r0, r4
 810240c:	f7ff fef2 	bl	81021f4 <_ZN3IMU9InitAccelEv>
        InitMag();
 8102410:	4620      	mov	r0, r4
 8102412:	f7ff ff35 	bl	8102280 <_ZN3IMU7InitMagEv>
        return true;
 8102416:	2001      	movs	r0, #1
}
 8102418:	b006      	add	sp, #24
 810241a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810241e:	bf00      	nop
 8102420:	3912ccf7 	.word	0x3912ccf7
 8102424:	01010100 	.word	0x01010100
 8102428:	3c0f5c29 	.word	0x3c0f5c29
 810242c:	38ffda40 	.word	0x38ffda40
 8102430:	010000ff 	.word	0x010000ff
 8102434:	60001c00 	.word	0x60001c00
 8102438:	0100000c 	.word	0x0100000c
 810243c:	1000016c 	.word	0x1000016c

08102440 <_ZN3IMUC1Ev>:
IMU::IMU()
 8102440:	b510      	push	{r4, lr}
 8102442:	4604      	mov	r4, r0
  bool is_imu = Setup();
 8102444:	f7ff ff82 	bl	810234c <_ZN3IMU5SetupEv>
}
 8102448:	4620      	mov	r0, r4
 810244a:	bd10      	pop	{r4, pc}

0810244c <HAL_I2C_MemRxCpltCallback>:
 810244c:	4770      	bx	lr
 810244e:	bf00      	nop

08102450 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{


}
 8102450:	4770      	bx	lr
 8102452:	bf00      	nop

08102454 <main>:
  /* MPU Configuration--------------------------------------------------------*/
 // MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102454:	4b1f      	ldr	r3, [pc, #124]	; (81024d4 <main+0x80>)
{
 8102456:	b500      	push	{lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102458:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810245c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8102460:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
{
 8102468:	b0bf      	sub	sp, #252	; 0xfc
  __HAL_RCC_HSEM_CLK_ENABLE();
 810246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810246e:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102470:	9301      	str	r3, [sp, #4]
 8102472:	9b01      	ldr	r3, [sp, #4]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102474:	f004 f9be 	bl	81067f4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8102478:	f006 fd1c 	bl	8108eb4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810247c:	2201      	movs	r2, #1
 810247e:	2102      	movs	r1, #2
 8102480:	2000      	movs	r0, #0
 8102482:	f006 fc9d 	bl	8108dc0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102486:	4b14      	ldr	r3, [pc, #80]	; (81024d8 <main+0x84>)
 8102488:	4a14      	ldr	r2, [pc, #80]	; (81024dc <main+0x88>)
 810248a:	681b      	ldr	r3, [r3, #0]
 810248c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8102490:	2b07      	cmp	r3, #7
 8102492:	d018      	beq.n	81024c6 <main+0x72>
 8102494:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 8102498:	f043 0301 	orr.w	r3, r3, #1
 810249c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81024a0:	f000 fc6e 	bl	8102d80 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81024a4:	f7ff fbfe 	bl	8101ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 81024a8:	f7ff fb9c 	bl	8101be4 <MX_DMA_Init>
  MX_SPI1_Init();
 81024ac:	f000 f81a 	bl	81024e4 <MX_SPI1_Init>
  MX_I2C1_Init();
 81024b0:	f7ff fc5a 	bl	8101d68 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 81024b4:	f000 fb1a 	bl	8102aec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  EntryApp app;
 81024b8:	a802      	add	r0, sp, #8
 81024ba:	f7fe fea9 	bl	8101210 <_ZN8EntryAppC1Ev>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app.RunSensors();
 81024be:	a802      	add	r0, sp, #8
 81024c0:	f7fe ff9c 	bl	81013fc <_ZN8EntryApp10RunSensorsEv>
  while (1)
 81024c4:	e7fb      	b.n	81024be <main+0x6a>
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81024c6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 81024ca:	f043 0301 	orr.w	r3, r3, #1
 81024ce:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81024d2:	e7e5      	b.n	81024a0 <main+0x4c>
 81024d4:	58024400 	.word	0x58024400
 81024d8:	e000ed00 	.word	0xe000ed00
 81024dc:	58026400 	.word	0x58026400

081024e0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81024e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81024e2:	e7fe      	b.n	81024e2 <Error_Handler+0x2>

081024e4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 81024e4:	b580      	push	{r7, lr}
 81024e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 81024e8:	4b27      	ldr	r3, [pc, #156]	; (8102588 <MX_SPI1_Init+0xa4>)
 81024ea:	4a28      	ldr	r2, [pc, #160]	; (810258c <MX_SPI1_Init+0xa8>)
 81024ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81024ee:	4b26      	ldr	r3, [pc, #152]	; (8102588 <MX_SPI1_Init+0xa4>)
 81024f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81024f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81024f6:	4b24      	ldr	r3, [pc, #144]	; (8102588 <MX_SPI1_Init+0xa4>)
 81024f8:	2200      	movs	r2, #0
 81024fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 81024fc:	4b22      	ldr	r3, [pc, #136]	; (8102588 <MX_SPI1_Init+0xa4>)
 81024fe:	2207      	movs	r2, #7
 8102500:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8102502:	4b21      	ldr	r3, [pc, #132]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102504:	2200      	movs	r2, #0
 8102506:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8102508:	4b1f      	ldr	r3, [pc, #124]	; (8102588 <MX_SPI1_Init+0xa4>)
 810250a:	2200      	movs	r2, #0
 810250c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810250e:	4b1e      	ldr	r3, [pc, #120]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102510:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102514:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8102516:	4b1c      	ldr	r3, [pc, #112]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102518:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 810251c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810251e:	4b1a      	ldr	r3, [pc, #104]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102520:	2200      	movs	r2, #0
 8102522:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102524:	4b18      	ldr	r3, [pc, #96]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102526:	2200      	movs	r2, #0
 8102528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810252a:	4b17      	ldr	r3, [pc, #92]	; (8102588 <MX_SPI1_Init+0xa4>)
 810252c:	2200      	movs	r2, #0
 810252e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102530:	4b15      	ldr	r3, [pc, #84]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102532:	2200      	movs	r2, #0
 8102534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102536:	4b14      	ldr	r3, [pc, #80]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810253c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810253e:	4b12      	ldr	r3, [pc, #72]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102540:	2200      	movs	r2, #0
 8102542:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102544:	4b10      	ldr	r3, [pc, #64]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102546:	2200      	movs	r2, #0
 8102548:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810254a:	4b0f      	ldr	r3, [pc, #60]	; (8102588 <MX_SPI1_Init+0xa4>)
 810254c:	2200      	movs	r2, #0
 810254e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102550:	4b0d      	ldr	r3, [pc, #52]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102552:	2200      	movs	r2, #0
 8102554:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102556:	4b0c      	ldr	r3, [pc, #48]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102558:	2200      	movs	r2, #0
 810255a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810255c:	4b0a      	ldr	r3, [pc, #40]	; (8102588 <MX_SPI1_Init+0xa4>)
 810255e:	2200      	movs	r2, #0
 8102560:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102562:	4b09      	ldr	r3, [pc, #36]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102564:	2200      	movs	r2, #0
 8102566:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102568:	4b07      	ldr	r3, [pc, #28]	; (8102588 <MX_SPI1_Init+0xa4>)
 810256a:	2200      	movs	r2, #0
 810256c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810256e:	4b06      	ldr	r3, [pc, #24]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102570:	2200      	movs	r2, #0
 8102572:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8102574:	4804      	ldr	r0, [pc, #16]	; (8102588 <MX_SPI1_Init+0xa4>)
 8102576:	f008 f9eb 	bl	810a950 <HAL_SPI_Init>
 810257a:	4603      	mov	r3, r0
 810257c:	2b00      	cmp	r3, #0
 810257e:	d001      	beq.n	8102584 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8102580:	f7ff ffae 	bl	81024e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8102584:	bf00      	nop
 8102586:	bd80      	pop	{r7, pc}
 8102588:	100002a8 	.word	0x100002a8
 810258c:	40013000 	.word	0x40013000

08102590 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8102590:	b580      	push	{r7, lr}
 8102592:	b0b8      	sub	sp, #224	; 0xe0
 8102594:	af00      	add	r7, sp, #0
 8102596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102598:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810259c:	2200      	movs	r2, #0
 810259e:	601a      	str	r2, [r3, #0]
 81025a0:	605a      	str	r2, [r3, #4]
 81025a2:	609a      	str	r2, [r3, #8]
 81025a4:	60da      	str	r2, [r3, #12]
 81025a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81025a8:	f107 0310 	add.w	r3, r7, #16
 81025ac:	22bc      	movs	r2, #188	; 0xbc
 81025ae:	2100      	movs	r1, #0
 81025b0:	4618      	mov	r0, r3
 81025b2:	f00c f9a5 	bl	810e900 <memset>
  if(spiHandle->Instance==SPI1)
 81025b6:	687b      	ldr	r3, [r7, #4]
 81025b8:	681b      	ldr	r3, [r3, #0]
 81025ba:	4a57      	ldr	r2, [pc, #348]	; (8102718 <HAL_SPI_MspInit+0x188>)
 81025bc:	4293      	cmp	r3, r2
 81025be:	f040 80a6 	bne.w	810270e <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81025c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81025c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81025c8:	2300      	movs	r3, #0
 81025ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81025cc:	f107 0310 	add.w	r3, r7, #16
 81025d0:	4618      	mov	r0, r3
 81025d2:	f006 fe55 	bl	8109280 <HAL_RCCEx_PeriphCLKConfig>
 81025d6:	4603      	mov	r3, r0
 81025d8:	2b00      	cmp	r3, #0
 81025da:	d001      	beq.n	81025e0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 81025dc:	f7ff ff80 	bl	81024e0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81025e0:	4b4e      	ldr	r3, [pc, #312]	; (810271c <HAL_SPI_MspInit+0x18c>)
 81025e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81025e6:	4a4d      	ldr	r2, [pc, #308]	; (810271c <HAL_SPI_MspInit+0x18c>)
 81025e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81025ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81025f0:	4b4a      	ldr	r3, [pc, #296]	; (810271c <HAL_SPI_MspInit+0x18c>)
 81025f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81025f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81025fa:	60fb      	str	r3, [r7, #12]
 81025fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81025fe:	4b47      	ldr	r3, [pc, #284]	; (810271c <HAL_SPI_MspInit+0x18c>)
 8102600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102604:	4a45      	ldr	r2, [pc, #276]	; (810271c <HAL_SPI_MspInit+0x18c>)
 8102606:	f043 0301 	orr.w	r3, r3, #1
 810260a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810260e:	4b43      	ldr	r3, [pc, #268]	; (810271c <HAL_SPI_MspInit+0x18c>)
 8102610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102614:	f003 0301 	and.w	r3, r3, #1
 8102618:	60bb      	str	r3, [r7, #8]
 810261a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 810261c:	23e0      	movs	r3, #224	; 0xe0
 810261e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102622:	2302      	movs	r3, #2
 8102624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102628:	2300      	movs	r3, #0
 810262a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810262e:	2300      	movs	r3, #0
 8102630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102634:	2305      	movs	r3, #5
 8102636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810263a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810263e:	4619      	mov	r1, r3
 8102640:	4837      	ldr	r0, [pc, #220]	; (8102720 <HAL_SPI_MspInit+0x190>)
 8102642:	f003 fedf 	bl	8106404 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8102646:	4b37      	ldr	r3, [pc, #220]	; (8102724 <HAL_SPI_MspInit+0x194>)
 8102648:	4a37      	ldr	r2, [pc, #220]	; (8102728 <HAL_SPI_MspInit+0x198>)
 810264a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 810264c:	4b35      	ldr	r3, [pc, #212]	; (8102724 <HAL_SPI_MspInit+0x194>)
 810264e:	2225      	movs	r2, #37	; 0x25
 8102650:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102652:	4b34      	ldr	r3, [pc, #208]	; (8102724 <HAL_SPI_MspInit+0x194>)
 8102654:	2200      	movs	r2, #0
 8102656:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102658:	4b32      	ldr	r3, [pc, #200]	; (8102724 <HAL_SPI_MspInit+0x194>)
 810265a:	2200      	movs	r2, #0
 810265c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810265e:	4b31      	ldr	r3, [pc, #196]	; (8102724 <HAL_SPI_MspInit+0x194>)
 8102660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102664:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102666:	4b2f      	ldr	r3, [pc, #188]	; (8102724 <HAL_SPI_MspInit+0x194>)
 8102668:	2200      	movs	r2, #0
 810266a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810266c:	4b2d      	ldr	r3, [pc, #180]	; (8102724 <HAL_SPI_MspInit+0x194>)
 810266e:	2200      	movs	r2, #0
 8102670:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8102672:	4b2c      	ldr	r3, [pc, #176]	; (8102724 <HAL_SPI_MspInit+0x194>)
 8102674:	2200      	movs	r2, #0
 8102676:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102678:	4b2a      	ldr	r3, [pc, #168]	; (8102724 <HAL_SPI_MspInit+0x194>)
 810267a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810267e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102680:	4b28      	ldr	r3, [pc, #160]	; (8102724 <HAL_SPI_MspInit+0x194>)
 8102682:	2200      	movs	r2, #0
 8102684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8102686:	4827      	ldr	r0, [pc, #156]	; (8102724 <HAL_SPI_MspInit+0x194>)
 8102688:	f001 f868 	bl	810375c <HAL_DMA_Init>
 810268c:	4603      	mov	r3, r0
 810268e:	2b00      	cmp	r3, #0
 8102690:	d001      	beq.n	8102696 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8102692:	f7ff ff25 	bl	81024e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	4a22      	ldr	r2, [pc, #136]	; (8102724 <HAL_SPI_MspInit+0x194>)
 810269a:	67da      	str	r2, [r3, #124]	; 0x7c
 810269c:	4a21      	ldr	r2, [pc, #132]	; (8102724 <HAL_SPI_MspInit+0x194>)
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 81026a2:	4b22      	ldr	r3, [pc, #136]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026a4:	4a22      	ldr	r2, [pc, #136]	; (8102730 <HAL_SPI_MspInit+0x1a0>)
 81026a6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 81026a8:	4b20      	ldr	r3, [pc, #128]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026aa:	2226      	movs	r2, #38	; 0x26
 81026ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 81026ae:	4b1f      	ldr	r3, [pc, #124]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026b0:	2240      	movs	r2, #64	; 0x40
 81026b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81026b4:	4b1d      	ldr	r3, [pc, #116]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026b6:	2200      	movs	r2, #0
 81026b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81026ba:	4b1c      	ldr	r3, [pc, #112]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81026c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81026c2:	4b1a      	ldr	r3, [pc, #104]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026c4:	2200      	movs	r2, #0
 81026c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81026c8:	4b18      	ldr	r3, [pc, #96]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026ca:	2200      	movs	r2, #0
 81026cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 81026ce:	4b17      	ldr	r3, [pc, #92]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026d0:	2200      	movs	r2, #0
 81026d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 81026d4:	4b15      	ldr	r3, [pc, #84]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81026da:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81026dc:	4b13      	ldr	r3, [pc, #76]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026de:	2200      	movs	r2, #0
 81026e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 81026e2:	4812      	ldr	r0, [pc, #72]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026e4:	f001 f83a 	bl	810375c <HAL_DMA_Init>
 81026e8:	4603      	mov	r3, r0
 81026ea:	2b00      	cmp	r3, #0
 81026ec:	d001      	beq.n	81026f2 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 81026ee:	f7ff fef7 	bl	81024e0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	4a0d      	ldr	r2, [pc, #52]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026f6:	679a      	str	r2, [r3, #120]	; 0x78
 81026f8:	4a0c      	ldr	r2, [pc, #48]	; (810272c <HAL_SPI_MspInit+0x19c>)
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 81026fe:	2200      	movs	r2, #0
 8102700:	2100      	movs	r1, #0
 8102702:	2023      	movs	r0, #35	; 0x23
 8102704:	f000 ffe1 	bl	81036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8102708:	2023      	movs	r0, #35	; 0x23
 810270a:	f000 fff8 	bl	81036fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 810270e:	bf00      	nop
 8102710:	37e0      	adds	r7, #224	; 0xe0
 8102712:	46bd      	mov	sp, r7
 8102714:	bd80      	pop	{r7, pc}
 8102716:	bf00      	nop
 8102718:	40013000 	.word	0x40013000
 810271c:	58024400 	.word	0x58024400
 8102720:	58020000 	.word	0x58020000
 8102724:	10000330 	.word	0x10000330
 8102728:	40020010 	.word	0x40020010
 810272c:	100003a8 	.word	0x100003a8
 8102730:	40020028 	.word	0x40020028

08102734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102734:	b480      	push	{r7}
 8102736:	b083      	sub	sp, #12
 8102738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810273a:	4b0a      	ldr	r3, [pc, #40]	; (8102764 <HAL_MspInit+0x30>)
 810273c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102740:	4a08      	ldr	r2, [pc, #32]	; (8102764 <HAL_MspInit+0x30>)
 8102742:	f043 0302 	orr.w	r3, r3, #2
 8102746:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810274a:	4b06      	ldr	r3, [pc, #24]	; (8102764 <HAL_MspInit+0x30>)
 810274c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102750:	f003 0302 	and.w	r3, r3, #2
 8102754:	607b      	str	r3, [r7, #4]
 8102756:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102758:	bf00      	nop
 810275a:	370c      	adds	r7, #12
 810275c:	46bd      	mov	sp, r7
 810275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102762:	4770      	bx	lr
 8102764:	58024400 	.word	0x58024400

08102768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102768:	b480      	push	{r7}
 810276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810276c:	e7fe      	b.n	810276c <NMI_Handler+0x4>

0810276e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810276e:	b480      	push	{r7}
 8102770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102772:	e7fe      	b.n	8102772 <HardFault_Handler+0x4>

08102774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102774:	b480      	push	{r7}
 8102776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102778:	e7fe      	b.n	8102778 <MemManage_Handler+0x4>

0810277a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810277a:	b480      	push	{r7}
 810277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810277e:	e7fe      	b.n	810277e <BusFault_Handler+0x4>

08102780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102780:	b480      	push	{r7}
 8102782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102784:	e7fe      	b.n	8102784 <UsageFault_Handler+0x4>

08102786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102786:	b480      	push	{r7}
 8102788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810278a:	bf00      	nop
 810278c:	46bd      	mov	sp, r7
 810278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102792:	4770      	bx	lr

08102794 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102794:	b480      	push	{r7}
 8102796:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102798:	bf00      	nop
 810279a:	46bd      	mov	sp, r7
 810279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027a0:	4770      	bx	lr

081027a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81027a2:	b480      	push	{r7}
 81027a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81027a6:	bf00      	nop
 81027a8:	46bd      	mov	sp, r7
 81027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ae:	4770      	bx	lr

081027b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81027b0:	b580      	push	{r7, lr}
 81027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81027b4:	f000 fb78 	bl	8102ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81027b8:	bf00      	nop
 81027ba:	bd80      	pop	{r7, pc}

081027bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 81027bc:	b580      	push	{r7, lr}
 81027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 81027c0:	4802      	ldr	r0, [pc, #8]	; (81027cc <DMA1_Stream0_IRQHandler+0x10>)
 81027c2:	f002 faf3 	bl	8104dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 81027c6:	bf00      	nop
 81027c8:	bd80      	pop	{r7, pc}
 81027ca:	bf00      	nop
 81027cc:	10000330 	.word	0x10000330

081027d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 81027d0:	b580      	push	{r7, lr}
 81027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 81027d4:	4802      	ldr	r0, [pc, #8]	; (81027e0 <DMA1_Stream1_IRQHandler+0x10>)
 81027d6:	f002 fae9 	bl	8104dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 81027da:	bf00      	nop
 81027dc:	bd80      	pop	{r7, pc}
 81027de:	bf00      	nop
 81027e0:	100003a8 	.word	0x100003a8

081027e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 81027e4:	b580      	push	{r7, lr}
 81027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 81027e8:	4802      	ldr	r0, [pc, #8]	; (81027f4 <DMA1_Stream2_IRQHandler+0x10>)
 81027ea:	f002 fadf 	bl	8104dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 81027ee:	bf00      	nop
 81027f0:	bd80      	pop	{r7, pc}
 81027f2:	bf00      	nop
 81027f4:	100001b8 	.word	0x100001b8

081027f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 81027f8:	b580      	push	{r7, lr}
 81027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 81027fc:	4802      	ldr	r0, [pc, #8]	; (8102808 <DMA1_Stream3_IRQHandler+0x10>)
 81027fe:	f002 fad5 	bl	8104dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8102802:	bf00      	nop
 8102804:	bd80      	pop	{r7, pc}
 8102806:	bf00      	nop
 8102808:	10000230 	.word	0x10000230

0810280c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 810280c:	b580      	push	{r7, lr}
 810280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8102810:	4802      	ldr	r0, [pc, #8]	; (810281c <DMA1_Stream4_IRQHandler+0x10>)
 8102812:	f002 facb 	bl	8104dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8102816:	bf00      	nop
 8102818:	bd80      	pop	{r7, pc}
 810281a:	bf00      	nop
 810281c:	100000f4 	.word	0x100000f4

08102820 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8102820:	b580      	push	{r7, lr}
 8102822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8102824:	4802      	ldr	r0, [pc, #8]	; (8102830 <ADC_IRQHandler+0x10>)
 8102826:	f000 fbeb 	bl	8103000 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 810282a:	bf00      	nop
 810282c:	bd80      	pop	{r7, pc}
 810282e:	bf00      	nop
 8102830:	10000090 	.word	0x10000090

08102834 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8102834:	b580      	push	{r7, lr}
 8102836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8102838:	4802      	ldr	r0, [pc, #8]	; (8102844 <I2C1_EV_IRQHandler+0x10>)
 810283a:	f004 fb85 	bl	8106f48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 810283e:	bf00      	nop
 8102840:	bd80      	pop	{r7, pc}
 8102842:	bf00      	nop
 8102844:	1000016c 	.word	0x1000016c

08102848 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8102848:	b580      	push	{r7, lr}
 810284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 810284c:	4802      	ldr	r0, [pc, #8]	; (8102858 <I2C1_ER_IRQHandler+0x10>)
 810284e:	f004 fb95 	bl	8106f7c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8102852:	bf00      	nop
 8102854:	bd80      	pop	{r7, pc}
 8102856:	bf00      	nop
 8102858:	1000016c 	.word	0x1000016c

0810285c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 810285c:	b580      	push	{r7, lr}
 810285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8102860:	4802      	ldr	r0, [pc, #8]	; (810286c <SPI1_IRQHandler+0x10>)
 8102862:	f009 f83f 	bl	810b8e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8102866:	bf00      	nop
 8102868:	bd80      	pop	{r7, pc}
 810286a:	bf00      	nop
 810286c:	100002a8 	.word	0x100002a8

08102870 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8102870:	b580      	push	{r7, lr}
 8102872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102874:	4802      	ldr	r0, [pc, #8]	; (8102880 <USART3_IRQHandler+0x10>)
 8102876:	f009 fc57 	bl	810c128 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 810287a:	bf00      	nop
 810287c:	bd80      	pop	{r7, pc}
 810287e:	bf00      	nop
 8102880:	1000048c 	.word	0x1000048c

08102884 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8102884:	b580      	push	{r7, lr}
 8102886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8102888:	4802      	ldr	r0, [pc, #8]	; (8102894 <DMA1_Stream7_IRQHandler+0x10>)
 810288a:	f002 fa8f 	bl	8104dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 810288e:	bf00      	nop
 8102890:	bd80      	pop	{r7, pc}
 8102892:	bf00      	nop
 8102894:	1000051c 	.word	0x1000051c

08102898 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8102898:	b580      	push	{r7, lr}
 810289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 810289c:	4802      	ldr	r0, [pc, #8]	; (81028a8 <DMA2_Stream0_IRQHandler+0x10>)
 810289e:	f002 fa85 	bl	8104dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 81028a2:	bf00      	nop
 81028a4:	bd80      	pop	{r7, pc}
 81028a6:	bf00      	nop
 81028a8:	10000594 	.word	0x10000594

081028ac <_ZN3GPS10GetGPSDataEv>:

gps_data GPS::GetGPSData()
{
  gps_data gps;
  gps.gps_latitude = latitude;
  gps.gps_longitude = longitude;
 81028ac:	684a      	ldr	r2, [r1, #4]
  gps.gps_latitude = latitude;
 81028ae:	f8d1 c000 	ldr.w	ip, [r1]
  gps.gps_longitude = longitude;
 81028b2:	6042      	str	r2, [r0, #4]
  gps.gps_altitude = altitude;
  gps.gps_velocity_x = vel_x;
 81028b4:	68ca      	ldr	r2, [r1, #12]
  gps.gps_latitude = latitude;
 81028b6:	f8c0 c000 	str.w	ip, [r0]
  gps.gps_velocity_x = vel_x;
 81028ba:	60c2      	str	r2, [r0, #12]
  gps.gps_altitude = altitude;
 81028bc:	f8d1 c008 	ldr.w	ip, [r1, #8]
  gps.gps_velocity_y = vel_y;
  gps.gps_velocity_z = vel_z;
 81028c0:	694a      	ldr	r2, [r1, #20]
  gps.gps_altitude = altitude;
 81028c2:	f8c0 c008 	str.w	ip, [r0, #8]
  gps.gps_velocity_z = vel_z;
 81028c6:	6142      	str	r2, [r0, #20]
  gps.gps_velocity_y = vel_y;
 81028c8:	f8d1 c010 	ldr.w	ip, [r1, #16]
  gps.gps_satellites = num_satellites;
  gps.gnd_speed= gndSpeed;
 81028cc:	698a      	ldr	r2, [r1, #24]
  gps.gps_satellites = num_satellites;
 81028ce:	69c9      	ldr	r1, [r1, #28]
  gps.gps_velocity_y = vel_y;
 81028d0:	f8c0 c010 	str.w	ip, [r0, #16]
  gps.gps_satellites = num_satellites;
 81028d4:	61c1      	str	r1, [r0, #28]
  gps.gnd_speed= gndSpeed;
 81028d6:	6182      	str	r2, [r0, #24]

  return gps;


}
 81028d8:	4770      	bx	lr
 81028da:	bf00      	nop
 81028dc:	0000      	movs	r0, r0
	...

081028e0 <_ZN3GPS10ProcessGPSEv>:




 void GPS::ProcessGPS()
 {
 81028e0:	b538      	push	{r3, r4, r5, lr}

   latitude = pvt.latitude * 1.0e-7;
 81028e2:	4d27      	ldr	r5, [pc, #156]	; (8102980 <_ZN3GPS10ProcessGPSEv+0xa0>)
 81028e4:	6a2b      	ldr	r3, [r5, #32]
 {
 81028e6:	4604      	mov	r4, r0
   latitude = pvt.latitude * 1.0e-7;
 81028e8:	4618      	mov	r0, r3
 81028ea:	f7fd fe47 	bl	810057c <__aeabi_i2d>
 81028ee:	a322      	add	r3, pc, #136	; (adr r3, 8102978 <_ZN3GPS10ProcessGPSEv+0x98>)
 81028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028f4:	f7fd feac 	bl	8100650 <__aeabi_dmul>
 81028f8:	f7fe f95a 	bl	8100bb0 <__aeabi_d2f>
   longitude = pvt.longitude * 1.0e-7;
 81028fc:	69eb      	ldr	r3, [r5, #28]
   latitude = pvt.latitude * 1.0e-7;
 81028fe:	6020      	str	r0, [r4, #0]
   longitude = pvt.longitude * 1.0e-7;
 8102900:	4618      	mov	r0, r3
 8102902:	f7fd fe3b 	bl	810057c <__aeabi_i2d>
 8102906:	a31c      	add	r3, pc, #112	; (adr r3, 8102978 <_ZN3GPS10ProcessGPSEv+0x98>)
 8102908:	e9d3 2300 	ldrd	r2, r3, [r3]
 810290c:	f7fd fea0 	bl	8100650 <__aeabi_dmul>
 8102910:	f7fe f94e 	bl	8100bb0 <__aeabi_d2f>
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102914:	ed95 5a0a 	vldr	s10, [r5, #40]	; 0x28

   // format to ENU
   vel_x = pvt.velE / 1000.0f;
 8102918:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
   vel_y = pvt.velN / 1000.0f;
 810291c:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
   vel_z = pvt.velD / -1000.0f;
 8102920:	edd5 6a0f 	vldr	s13, [r5, #60]	; 0x3c
   gndSpeed = pvt.gSpeed / 1000.0f;
 8102924:	ed95 7a10 	vldr	s14, [r5, #64]	; 0x40
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102928:	eddf 7a16 	vldr	s15, [pc, #88]	; 8102984 <_ZN3GPS10ProcessGPSEv+0xa4>
   vel_z = pvt.velD / -1000.0f;
 810292c:	ed9f 4a16 	vldr	s8, [pc, #88]	; 8102988 <_ZN3GPS10ProcessGPSEv+0xa8>
   longitude = pvt.longitude * 1.0e-7;
 8102930:	6060      	str	r0, [r4, #4]
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102932:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
   vel_x = pvt.velE / 1000.0f;
 8102936:	eef8 5ae5 	vcvt.f32.s32	s11, s11
   vel_y = pvt.velN / 1000.0f;
 810293a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
   vel_z = pvt.velD / -1000.0f;
 810293e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   gndSpeed = pvt.gSpeed / 1000.0f;
 8102942:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102946:	eec5 4a27 	vdiv.f32	s9, s10, s15
   vel_x = pvt.velE / 1000.0f;
 810294a:	ee85 5aa7 	vdiv.f32	s10, s11, s15
   vel_y = pvt.velN / 1000.0f;
 810294e:	eec6 5a27 	vdiv.f32	s11, s12, s15
   vel_z = pvt.velD / -1000.0f;
 8102952:	ee86 6a84 	vdiv.f32	s12, s13, s8
   gndSpeed = pvt.gSpeed / 1000.0f;
 8102956:	eec7 6a27 	vdiv.f32	s13, s14, s15
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 810295a:	edc4 4a02 	vstr	s9, [r4, #8]
   vel_x = pvt.velE / 1000.0f;
 810295e:	ed84 5a03 	vstr	s10, [r4, #12]
   vel_y = pvt.velN / 1000.0f;
 8102962:	edc4 5a04 	vstr	s11, [r4, #16]
   vel_z = pvt.velD / -1000.0f;
 8102966:	ed84 6a05 	vstr	s12, [r4, #20]
   gndSpeed = pvt.gSpeed / 1000.0f;
 810296a:	edc4 6a06 	vstr	s13, [r4, #24]
   /* Retrieve number of satellites used */
   num_satellites = pvt.numSV;
 810296e:	7eeb      	ldrb	r3, [r5, #27]
 8102970:	61e3      	str	r3, [r4, #28]
 }
 8102972:	bd38      	pop	{r3, r4, r5, pc}
 8102974:	f3af 8000 	nop.w
 8102978:	9abcaf48 	.word	0x9abcaf48
 810297c:	3e7ad7f2 	.word	0x3e7ad7f2
 8102980:	1000042c 	.word	0x1000042c
 8102984:	447a0000 	.word	0x447a0000
 8102988:	c47a0000 	.word	0xc47a0000

0810298c <_ZN3GPS6ConfigEv>:

 void GPS::Config()
 {
 810298c:	b510      	push	{r4, lr}

  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 810298e:	4c22      	ldr	r4, [pc, #136]	; (8102a18 <_ZN3GPS6ConfigEv+0x8c>)
 8102990:	4922      	ldr	r1, [pc, #136]	; (8102a1c <_ZN3GPS6ConfigEv+0x90>)
 8102992:	220e      	movs	r2, #14
 8102994:	4620      	mov	r0, r4
 8102996:	f009 fb01 	bl	810bf9c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810299a:	2032      	movs	r0, #50	; 0x32
 810299c:	f000 faa4 	bl	8102ee8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 81029a0:	491f      	ldr	r1, [pc, #124]	; (8102a20 <_ZN3GPS6ConfigEv+0x94>)
 81029a2:	2210      	movs	r2, #16
 81029a4:	4620      	mov	r0, r4
 81029a6:	f009 faf9 	bl	810bf9c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029aa:	2032      	movs	r0, #50	; 0x32
 81029ac:	f000 fa9c 	bl	8102ee8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 81029b0:	491c      	ldr	r1, [pc, #112]	; (8102a24 <_ZN3GPS6ConfigEv+0x98>)
 81029b2:	2210      	movs	r2, #16
 81029b4:	4620      	mov	r0, r4
 81029b6:	f009 faf1 	bl	810bf9c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029ba:	2032      	movs	r0, #50	; 0x32
 81029bc:	f000 fa94 	bl	8102ee8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 81029c0:	4919      	ldr	r1, [pc, #100]	; (8102a28 <_ZN3GPS6ConfigEv+0x9c>)
 81029c2:	2210      	movs	r2, #16
 81029c4:	4620      	mov	r0, r4
 81029c6:	f009 fae9 	bl	810bf9c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029ca:	2032      	movs	r0, #50	; 0x32
 81029cc:	f000 fa8c 	bl	8102ee8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 81029d0:	4916      	ldr	r1, [pc, #88]	; (8102a2c <_ZN3GPS6ConfigEv+0xa0>)
 81029d2:	2210      	movs	r2, #16
 81029d4:	4620      	mov	r0, r4
 81029d6:	f009 fae1 	bl	810bf9c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029da:	2032      	movs	r0, #50	; 0x32
 81029dc:	f000 fa84 	bl	8102ee8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 81029e0:	4913      	ldr	r1, [pc, #76]	; (8102a30 <_ZN3GPS6ConfigEv+0xa4>)
 81029e2:	2210      	movs	r2, #16
 81029e4:	4620      	mov	r0, r4
 81029e6:	f009 fad9 	bl	810bf9c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029ea:	2032      	movs	r0, #50	; 0x32
 81029ec:	f000 fa7c 	bl	8102ee8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 81029f0:	4910      	ldr	r1, [pc, #64]	; (8102a34 <_ZN3GPS6ConfigEv+0xa8>)
 81029f2:	2210      	movs	r2, #16
 81029f4:	4620      	mov	r0, r4
 81029f6:	f009 fad1 	bl	810bf9c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029fa:	2032      	movs	r0, #50	; 0x32
 81029fc:	f000 fa74 	bl	8102ee8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 8102a00:	490d      	ldr	r1, [pc, #52]	; (8102a38 <_ZN3GPS6ConfigEv+0xac>)
 8102a02:	2210      	movs	r2, #16
 8102a04:	4620      	mov	r0, r4
 8102a06:	f009 fac9 	bl	810bf9c <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_byte, 1);
 8102a0a:	4620      	mov	r0, r4
 8102a0c:	490b      	ldr	r1, [pc, #44]	; (8102a3c <_ZN3GPS6ConfigEv+0xb0>)

 }
 8102a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_byte, 1);
 8102a12:	2201      	movs	r2, #1
 8102a14:	f009 bb42 	b.w	810c09c <HAL_UART_Receive_DMA>
 8102a18:	1000048c 	.word	0x1000048c
 8102a1c:	0810e93c 	.word	0x0810e93c
 8102a20:	0810e94c 	.word	0x0810e94c
 8102a24:	0810e95c 	.word	0x0810e95c
 8102a28:	0810e96c 	.word	0x0810e96c
 8102a2c:	0810e97c 	.word	0x0810e97c
 8102a30:	0810e98c 	.word	0x0810e98c
 8102a34:	0810e99c 	.word	0x0810e99c
 8102a38:	0810e9ac 	.word	0x0810e9ac
 8102a3c:	10000428 	.word	0x10000428

08102a40 <_ZN3GPSC1Ev>:
GPS::GPS()
 8102a40:	b510      	push	{r4, lr}
 8102a42:	4604      	mov	r4, r0
  Config();
 8102a44:	f7ff ffa2 	bl	810298c <_ZN3GPS6ConfigEv>
}
 8102a48:	4620      	mov	r0, r4
 8102a4a:	bd10      	pop	{r4, pc}

08102a4c <HAL_UART_RxCpltCallback>:
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 8102a4c:	4b20      	ldr	r3, [pc, #128]	; (8102ad0 <HAL_UART_RxCpltCallback+0x84>)
 8102a4e:	6802      	ldr	r2, [r0, #0]
 8102a50:	429a      	cmp	r2, r3
 8102a52:	d000      	beq.n	8102a56 <HAL_UART_RxCpltCallback+0xa>
 8102a54:	4770      	bx	lr
    {
      /*Append Preamble*/
      if(byte_pos < 2)
 8102a56:	491f      	ldr	r1, [pc, #124]	; (8102ad4 <HAL_UART_RxCpltCallback+0x88>)
 8102a58:	680a      	ldr	r2, [r1, #0]
 8102a5a:	2a01      	cmp	r2, #1
 8102a5c:	dd20      	ble.n	8102aa0 <HAL_UART_RxCpltCallback+0x54>
        }
      }

      else
      {
        if((byte_pos -2) < data_size)
 8102a5e:	2a61      	cmp	r2, #97	; 0x61
 8102a60:	dc27      	bgt.n	8102ab2 <HAL_UART_RxCpltCallback+0x66>
        {
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8102a62:	4b1d      	ldr	r3, [pc, #116]	; (8102ad8 <HAL_UART_RxCpltCallback+0x8c>)
 {
 8102a64:	b410      	push	{r4}
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8102a66:	4c1d      	ldr	r4, [pc, #116]	; (8102adc <HAL_UART_RxCpltCallback+0x90>)
 8102a68:	1898      	adds	r0, r3, r2
        }
        byte_pos++;
 8102a6a:	3201      	adds	r2, #1
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8102a6c:	f894 c000 	ldrb.w	ip, [r4]
 8102a70:	f800 cc02 	strb.w	ip, [r0, #-2]

        if (byte_pos == (data_size+2))
 8102a74:	2a62      	cmp	r2, #98	; 0x62
        byte_pos++;
 8102a76:	600a      	str	r2, [r1, #0]
        if (byte_pos == (data_size+2))
 8102a78:	d10f      	bne.n	8102a9a <HAL_UART_RxCpltCallback+0x4e>
 8102a7a:	2200      	movs	r2, #0
 8102a7c:	1e59      	subs	r1, r3, #1
 8102a7e:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
 8102a82:	4613      	mov	r3, r2
       ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 8102a84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8102a88:	4403      	add	r3, r0
 8102a8a:	b2db      	uxtb	r3, r3
       ck[1] = ck[1] + ck[0];
 8102a8c:	441a      	add	r2, r3
    for (int i = 0; i < (int)sizeof(pvt); i++)
 8102a8e:	458c      	cmp	ip, r1
       ck[1] = ck[1] + ck[0];
 8102a90:	b2d2      	uxtb	r2, r2
    for (int i = 0; i < (int)sizeof(pvt); i++)
 8102a92:	d1f7      	bne.n	8102a84 <HAL_UART_RxCpltCallback+0x38>
 8102a94:	4912      	ldr	r1, [pc, #72]	; (8102ae0 <HAL_UART_RxCpltCallback+0x94>)
 8102a96:	700b      	strb	r3, [r1, #0]
 8102a98:	704a      	strb	r2, [r1, #1]
        {
          byte_pos = 0;
        }
      }
    }
 }
 8102a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8102a9e:	4770      	bx	lr
        if(data_byte[0] == UBX_HEADER[byte_pos])
 8102aa0:	480e      	ldr	r0, [pc, #56]	; (8102adc <HAL_UART_RxCpltCallback+0x90>)
 8102aa2:	4b10      	ldr	r3, [pc, #64]	; (8102ae4 <HAL_UART_RxCpltCallback+0x98>)
 8102aa4:	7800      	ldrb	r0, [r0, #0]
 8102aa6:	5c9b      	ldrb	r3, [r3, r2]
 8102aa8:	4298      	cmp	r0, r3
 8102aaa:	d00d      	beq.n	8102ac8 <HAL_UART_RxCpltCallback+0x7c>
          byte_pos = 0;
 8102aac:	2300      	movs	r3, #0
 8102aae:	600b      	str	r3, [r1, #0]
 8102ab0:	4770      	bx	lr
        byte_pos++;
 8102ab2:	3201      	adds	r2, #1
        else if (byte_pos == (data_size+3) )
 8102ab4:	2a63      	cmp	r2, #99	; 0x63
        byte_pos++;
 8102ab6:	600a      	str	r2, [r1, #0]
        else if (byte_pos == (data_size+3) )
 8102ab8:	d1f8      	bne.n	8102aac <HAL_UART_RxCpltCallback+0x60>
          if (data_byte[0] != checksum[0])
 8102aba:	4a08      	ldr	r2, [pc, #32]	; (8102adc <HAL_UART_RxCpltCallback+0x90>)
 8102abc:	4b08      	ldr	r3, [pc, #32]	; (8102ae0 <HAL_UART_RxCpltCallback+0x94>)
 8102abe:	7812      	ldrb	r2, [r2, #0]
 8102ac0:	781b      	ldrb	r3, [r3, #0]
 8102ac2:	429a      	cmp	r2, r3
 8102ac4:	d1f2      	bne.n	8102aac <HAL_UART_RxCpltCallback+0x60>
 8102ac6:	4770      	bx	lr
          byte_pos++;
 8102ac8:	3201      	adds	r2, #1
 8102aca:	600a      	str	r2, [r1, #0]
 8102acc:	4770      	bx	lr
 8102ace:	bf00      	nop
 8102ad0:	40004800 	.word	0x40004800
 8102ad4:	10000420 	.word	0x10000420
 8102ad8:	1000042c 	.word	0x1000042c
 8102adc:	10000428 	.word	0x10000428
 8102ae0:	10000424 	.word	0x10000424
 8102ae4:	0810e938 	.word	0x0810e938

08102ae8 <HAL_UART_TxCpltCallback>:
  {
     if(huart->Instance == USART3)
     {

     }
  }
 8102ae8:	4770      	bx	lr
 8102aea:	bf00      	nop

08102aec <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102aec:	b580      	push	{r7, lr}
 8102aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102af0:	4b22      	ldr	r3, [pc, #136]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102af2:	4a23      	ldr	r2, [pc, #140]	; (8102b80 <MX_USART3_UART_Init+0x94>)
 8102af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8102af6:	4b21      	ldr	r3, [pc, #132]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102af8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8102afc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102afe:	4b1f      	ldr	r3, [pc, #124]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b00:	2200      	movs	r2, #0
 8102b02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102b04:	4b1d      	ldr	r3, [pc, #116]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b06:	2200      	movs	r2, #0
 8102b08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102b0a:	4b1c      	ldr	r3, [pc, #112]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b0c:	2200      	movs	r2, #0
 8102b0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102b10:	4b1a      	ldr	r3, [pc, #104]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b12:	220c      	movs	r2, #12
 8102b14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102b16:	4b19      	ldr	r3, [pc, #100]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b18:	2200      	movs	r2, #0
 8102b1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102b1c:	4b17      	ldr	r3, [pc, #92]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b1e:	2200      	movs	r2, #0
 8102b20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102b22:	4b16      	ldr	r3, [pc, #88]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b24:	2200      	movs	r2, #0
 8102b26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102b28:	4b14      	ldr	r3, [pc, #80]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b2a:	2200      	movs	r2, #0
 8102b2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102b2e:	4b13      	ldr	r3, [pc, #76]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b30:	2200      	movs	r2, #0
 8102b32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102b34:	4811      	ldr	r0, [pc, #68]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b36:	f009 f9e0 	bl	810befa <HAL_UART_Init>
 8102b3a:	4603      	mov	r3, r0
 8102b3c:	2b00      	cmp	r3, #0
 8102b3e:	d001      	beq.n	8102b44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102b40:	f7ff fcce 	bl	81024e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102b44:	2100      	movs	r1, #0
 8102b46:	480d      	ldr	r0, [pc, #52]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b48:	f00a fecc 	bl	810d8e4 <HAL_UARTEx_SetTxFifoThreshold>
 8102b4c:	4603      	mov	r3, r0
 8102b4e:	2b00      	cmp	r3, #0
 8102b50:	d001      	beq.n	8102b56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8102b52:	f7ff fcc5 	bl	81024e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102b56:	2100      	movs	r1, #0
 8102b58:	4808      	ldr	r0, [pc, #32]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b5a:	f00a ff01 	bl	810d960 <HAL_UARTEx_SetRxFifoThreshold>
 8102b5e:	4603      	mov	r3, r0
 8102b60:	2b00      	cmp	r3, #0
 8102b62:	d001      	beq.n	8102b68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102b64:	f7ff fcbc 	bl	81024e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102b68:	4804      	ldr	r0, [pc, #16]	; (8102b7c <MX_USART3_UART_Init+0x90>)
 8102b6a:	f00a fe82 	bl	810d872 <HAL_UARTEx_DisableFifoMode>
 8102b6e:	4603      	mov	r3, r0
 8102b70:	2b00      	cmp	r3, #0
 8102b72:	d001      	beq.n	8102b78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102b74:	f7ff fcb4 	bl	81024e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102b78:	bf00      	nop
 8102b7a:	bd80      	pop	{r7, pc}
 8102b7c:	1000048c 	.word	0x1000048c
 8102b80:	40004800 	.word	0x40004800

08102b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102b84:	b580      	push	{r7, lr}
 8102b86:	b0b8      	sub	sp, #224	; 0xe0
 8102b88:	af00      	add	r7, sp, #0
 8102b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102b90:	2200      	movs	r2, #0
 8102b92:	601a      	str	r2, [r3, #0]
 8102b94:	605a      	str	r2, [r3, #4]
 8102b96:	609a      	str	r2, [r3, #8]
 8102b98:	60da      	str	r2, [r3, #12]
 8102b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102b9c:	f107 0310 	add.w	r3, r7, #16
 8102ba0:	22bc      	movs	r2, #188	; 0xbc
 8102ba2:	2100      	movs	r1, #0
 8102ba4:	4618      	mov	r0, r3
 8102ba6:	f00b feab 	bl	810e900 <memset>
  if(uartHandle->Instance==USART3)
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	4a58      	ldr	r2, [pc, #352]	; (8102d10 <HAL_UART_MspInit+0x18c>)
 8102bb0:	4293      	cmp	r3, r2
 8102bb2:	f040 80a8 	bne.w	8102d06 <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102bb6:	2302      	movs	r3, #2
 8102bb8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102bba:	2300      	movs	r3, #0
 8102bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102bc0:	f107 0310 	add.w	r3, r7, #16
 8102bc4:	4618      	mov	r0, r3
 8102bc6:	f006 fb5b 	bl	8109280 <HAL_RCCEx_PeriphCLKConfig>
 8102bca:	4603      	mov	r3, r0
 8102bcc:	2b00      	cmp	r3, #0
 8102bce:	d001      	beq.n	8102bd4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8102bd0:	f7ff fc86 	bl	81024e0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102bd4:	4b4f      	ldr	r3, [pc, #316]	; (8102d14 <HAL_UART_MspInit+0x190>)
 8102bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bda:	4a4e      	ldr	r2, [pc, #312]	; (8102d14 <HAL_UART_MspInit+0x190>)
 8102bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102be0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102be4:	4b4b      	ldr	r3, [pc, #300]	; (8102d14 <HAL_UART_MspInit+0x190>)
 8102be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102bee:	60fb      	str	r3, [r7, #12]
 8102bf0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102bf2:	4b48      	ldr	r3, [pc, #288]	; (8102d14 <HAL_UART_MspInit+0x190>)
 8102bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102bf8:	4a46      	ldr	r2, [pc, #280]	; (8102d14 <HAL_UART_MspInit+0x190>)
 8102bfa:	f043 0308 	orr.w	r3, r3, #8
 8102bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102c02:	4b44      	ldr	r3, [pc, #272]	; (8102d14 <HAL_UART_MspInit+0x190>)
 8102c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102c08:	f003 0308 	and.w	r3, r3, #8
 8102c0c:	60bb      	str	r3, [r7, #8]
 8102c0e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8102c10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102c14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c18:	2302      	movs	r3, #2
 8102c1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c1e:	2300      	movs	r3, #0
 8102c20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c24:	2300      	movs	r3, #0
 8102c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102c2a:	2307      	movs	r3, #7
 8102c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102c30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102c34:	4619      	mov	r1, r3
 8102c36:	4838      	ldr	r0, [pc, #224]	; (8102d18 <HAL_UART_MspInit+0x194>)
 8102c38:	f003 fbe4 	bl	8106404 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8102c3c:	4b37      	ldr	r3, [pc, #220]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c3e:	4a38      	ldr	r2, [pc, #224]	; (8102d20 <HAL_UART_MspInit+0x19c>)
 8102c40:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8102c42:	4b36      	ldr	r3, [pc, #216]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c44:	222d      	movs	r2, #45	; 0x2d
 8102c46:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102c48:	4b34      	ldr	r3, [pc, #208]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c4a:	2200      	movs	r2, #0
 8102c4c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102c4e:	4b33      	ldr	r3, [pc, #204]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c50:	2200      	movs	r2, #0
 8102c52:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102c54:	4b31      	ldr	r3, [pc, #196]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102c5a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102c5c:	4b2f      	ldr	r3, [pc, #188]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c5e:	2200      	movs	r2, #0
 8102c60:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102c62:	4b2e      	ldr	r3, [pc, #184]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c64:	2200      	movs	r2, #0
 8102c66:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8102c68:	4b2c      	ldr	r3, [pc, #176]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102c6e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102c70:	4b2a      	ldr	r3, [pc, #168]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102c76:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102c78:	4b28      	ldr	r3, [pc, #160]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c7a:	2200      	movs	r2, #0
 8102c7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8102c7e:	4827      	ldr	r0, [pc, #156]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c80:	f000 fd6c 	bl	810375c <HAL_DMA_Init>
 8102c84:	4603      	mov	r3, r0
 8102c86:	2b00      	cmp	r3, #0
 8102c88:	d001      	beq.n	8102c8e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8102c8a:	f7ff fc29 	bl	81024e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8102c8e:	687b      	ldr	r3, [r7, #4]
 8102c90:	4a22      	ldr	r2, [pc, #136]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c92:	67da      	str	r2, [r3, #124]	; 0x7c
 8102c94:	4a21      	ldr	r2, [pc, #132]	; (8102d1c <HAL_UART_MspInit+0x198>)
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 8102c9a:	4b22      	ldr	r3, [pc, #136]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102c9c:	4a22      	ldr	r2, [pc, #136]	; (8102d28 <HAL_UART_MspInit+0x1a4>)
 8102c9e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8102ca0:	4b20      	ldr	r3, [pc, #128]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102ca2:	222e      	movs	r2, #46	; 0x2e
 8102ca4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102ca6:	4b1f      	ldr	r3, [pc, #124]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102ca8:	2240      	movs	r2, #64	; 0x40
 8102caa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102cac:	4b1d      	ldr	r3, [pc, #116]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cae:	2200      	movs	r2, #0
 8102cb0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102cb2:	4b1c      	ldr	r3, [pc, #112]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102cb8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102cba:	4b1a      	ldr	r3, [pc, #104]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cbc:	2200      	movs	r2, #0
 8102cbe:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102cc0:	4b18      	ldr	r3, [pc, #96]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cc2:	2200      	movs	r2, #0
 8102cc4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8102cc6:	4b17      	ldr	r3, [pc, #92]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cc8:	2200      	movs	r2, #0
 8102cca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102ccc:	4b15      	ldr	r3, [pc, #84]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102cd2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102cd4:	4b13      	ldr	r3, [pc, #76]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cd6:	2200      	movs	r2, #0
 8102cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102cda:	4812      	ldr	r0, [pc, #72]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cdc:	f000 fd3e 	bl	810375c <HAL_DMA_Init>
 8102ce0:	4603      	mov	r3, r0
 8102ce2:	2b00      	cmp	r3, #0
 8102ce4:	d001      	beq.n	8102cea <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8102ce6:	f7ff fbfb 	bl	81024e0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	4a0d      	ldr	r2, [pc, #52]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cee:	679a      	str	r2, [r3, #120]	; 0x78
 8102cf0:	4a0c      	ldr	r2, [pc, #48]	; (8102d24 <HAL_UART_MspInit+0x1a0>)
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8102cf6:	2200      	movs	r2, #0
 8102cf8:	2105      	movs	r1, #5
 8102cfa:	2027      	movs	r0, #39	; 0x27
 8102cfc:	f000 fce5 	bl	81036ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102d00:	2027      	movs	r0, #39	; 0x27
 8102d02:	f000 fcfc 	bl	81036fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102d06:	bf00      	nop
 8102d08:	37e0      	adds	r7, #224	; 0xe0
 8102d0a:	46bd      	mov	sp, r7
 8102d0c:	bd80      	pop	{r7, pc}
 8102d0e:	bf00      	nop
 8102d10:	40004800 	.word	0x40004800
 8102d14:	58024400 	.word	0x58024400
 8102d18:	58020c00 	.word	0x58020c00
 8102d1c:	1000051c 	.word	0x1000051c
 8102d20:	400200b8 	.word	0x400200b8
 8102d24:	10000594 	.word	0x10000594
 8102d28:	40020410 	.word	0x40020410

08102d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102d30:	f7fe fb90 	bl	8101454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102d34:	480c      	ldr	r0, [pc, #48]	; (8102d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102d36:	490d      	ldr	r1, [pc, #52]	; (8102d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102d38:	4a0d      	ldr	r2, [pc, #52]	; (8102d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102d3c:	e002      	b.n	8102d44 <LoopCopyDataInit>

08102d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102d42:	3304      	adds	r3, #4

08102d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102d48:	d3f9      	bcc.n	8102d3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102d4a:	4a0a      	ldr	r2, [pc, #40]	; (8102d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102d4c:	4c0a      	ldr	r4, [pc, #40]	; (8102d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102d50:	e001      	b.n	8102d56 <LoopFillZerobss>

08102d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102d54:	3204      	adds	r2, #4

08102d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102d58:	d3fb      	bcc.n	8102d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102d5a:	f00b fdad 	bl	810e8b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102d5e:	f7ff fb79 	bl	8102454 <main>
  bx  lr
 8102d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102d64:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102d68:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102d6c:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 8102d70:	0810ea30 	.word	0x0810ea30
  ldr r2, =_sbss
 8102d74:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 8102d78:	10000610 	.word	0x10000610

08102d7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102d7c:	e7fe      	b.n	8102d7c <ADC3_IRQHandler>
	...

08102d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102d80:	b580      	push	{r7, lr}
 8102d82:	b082      	sub	sp, #8
 8102d84:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102d86:	4b28      	ldr	r3, [pc, #160]	; (8102e28 <HAL_Init+0xa8>)
 8102d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102d8c:	4a26      	ldr	r2, [pc, #152]	; (8102e28 <HAL_Init+0xa8>)
 8102d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102d92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102d96:	4b24      	ldr	r3, [pc, #144]	; (8102e28 <HAL_Init+0xa8>)
 8102d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102da0:	603b      	str	r3, [r7, #0]
 8102da2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102da4:	4b21      	ldr	r3, [pc, #132]	; (8102e2c <HAL_Init+0xac>)
 8102da6:	681b      	ldr	r3, [r3, #0]
 8102da8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102db0:	4a1e      	ldr	r2, [pc, #120]	; (8102e2c <HAL_Init+0xac>)
 8102db2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102db6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102db8:	4b1c      	ldr	r3, [pc, #112]	; (8102e2c <HAL_Init+0xac>)
 8102dba:	681b      	ldr	r3, [r3, #0]
 8102dbc:	4a1b      	ldr	r2, [pc, #108]	; (8102e2c <HAL_Init+0xac>)
 8102dbe:	f043 0301 	orr.w	r3, r3, #1
 8102dc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102dc4:	2003      	movs	r0, #3
 8102dc6:	f000 fc75 	bl	81036b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102dca:	f006 f881 	bl	8108ed0 <HAL_RCC_GetSysClockFreq>
 8102dce:	4602      	mov	r2, r0
 8102dd0:	4b15      	ldr	r3, [pc, #84]	; (8102e28 <HAL_Init+0xa8>)
 8102dd2:	699b      	ldr	r3, [r3, #24]
 8102dd4:	0a1b      	lsrs	r3, r3, #8
 8102dd6:	f003 030f 	and.w	r3, r3, #15
 8102dda:	4915      	ldr	r1, [pc, #84]	; (8102e30 <HAL_Init+0xb0>)
 8102ddc:	5ccb      	ldrb	r3, [r1, r3]
 8102dde:	f003 031f 	and.w	r3, r3, #31
 8102de2:	fa22 f303 	lsr.w	r3, r2, r3
 8102de6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102de8:	4b0f      	ldr	r3, [pc, #60]	; (8102e28 <HAL_Init+0xa8>)
 8102dea:	699b      	ldr	r3, [r3, #24]
 8102dec:	f003 030f 	and.w	r3, r3, #15
 8102df0:	4a0f      	ldr	r2, [pc, #60]	; (8102e30 <HAL_Init+0xb0>)
 8102df2:	5cd3      	ldrb	r3, [r2, r3]
 8102df4:	f003 031f 	and.w	r3, r3, #31
 8102df8:	687a      	ldr	r2, [r7, #4]
 8102dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8102dfe:	4a0d      	ldr	r2, [pc, #52]	; (8102e34 <HAL_Init+0xb4>)
 8102e00:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102e02:	4b0c      	ldr	r3, [pc, #48]	; (8102e34 <HAL_Init+0xb4>)
 8102e04:	681b      	ldr	r3, [r3, #0]
 8102e06:	4a0c      	ldr	r2, [pc, #48]	; (8102e38 <HAL_Init+0xb8>)
 8102e08:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102e0a:	2000      	movs	r0, #0
 8102e0c:	f000 f816 	bl	8102e3c <HAL_InitTick>
 8102e10:	4603      	mov	r3, r0
 8102e12:	2b00      	cmp	r3, #0
 8102e14:	d001      	beq.n	8102e1a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102e16:	2301      	movs	r3, #1
 8102e18:	e002      	b.n	8102e20 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102e1a:	f7ff fc8b 	bl	8102734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102e1e:	2300      	movs	r3, #0
}
 8102e20:	4618      	mov	r0, r3
 8102e22:	3708      	adds	r7, #8
 8102e24:	46bd      	mov	sp, r7
 8102e26:	bd80      	pop	{r7, pc}
 8102e28:	58024400 	.word	0x58024400
 8102e2c:	40024400 	.word	0x40024400
 8102e30:	0810e928 	.word	0x0810e928
 8102e34:	10000004 	.word	0x10000004
 8102e38:	10000000 	.word	0x10000000

08102e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102e3c:	b580      	push	{r7, lr}
 8102e3e:	b082      	sub	sp, #8
 8102e40:	af00      	add	r7, sp, #0
 8102e42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102e44:	4b15      	ldr	r3, [pc, #84]	; (8102e9c <HAL_InitTick+0x60>)
 8102e46:	781b      	ldrb	r3, [r3, #0]
 8102e48:	2b00      	cmp	r3, #0
 8102e4a:	d101      	bne.n	8102e50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102e4c:	2301      	movs	r3, #1
 8102e4e:	e021      	b.n	8102e94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102e50:	4b13      	ldr	r3, [pc, #76]	; (8102ea0 <HAL_InitTick+0x64>)
 8102e52:	681a      	ldr	r2, [r3, #0]
 8102e54:	4b11      	ldr	r3, [pc, #68]	; (8102e9c <HAL_InitTick+0x60>)
 8102e56:	781b      	ldrb	r3, [r3, #0]
 8102e58:	4619      	mov	r1, r3
 8102e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8102e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8102e66:	4618      	mov	r0, r3
 8102e68:	f000 fc57 	bl	810371a <HAL_SYSTICK_Config>
 8102e6c:	4603      	mov	r3, r0
 8102e6e:	2b00      	cmp	r3, #0
 8102e70:	d001      	beq.n	8102e76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102e72:	2301      	movs	r3, #1
 8102e74:	e00e      	b.n	8102e94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	2b0f      	cmp	r3, #15
 8102e7a:	d80a      	bhi.n	8102e92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102e7c:	2200      	movs	r2, #0
 8102e7e:	6879      	ldr	r1, [r7, #4]
 8102e80:	f04f 30ff 	mov.w	r0, #4294967295
 8102e84:	f000 fc21 	bl	81036ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102e88:	4a06      	ldr	r2, [pc, #24]	; (8102ea4 <HAL_InitTick+0x68>)
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102e8e:	2300      	movs	r3, #0
 8102e90:	e000      	b.n	8102e94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102e92:	2301      	movs	r3, #1
}
 8102e94:	4618      	mov	r0, r3
 8102e96:	3708      	adds	r7, #8
 8102e98:	46bd      	mov	sp, r7
 8102e9a:	bd80      	pop	{r7, pc}
 8102e9c:	1000000c 	.word	0x1000000c
 8102ea0:	10000000 	.word	0x10000000
 8102ea4:	10000008 	.word	0x10000008

08102ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102ea8:	b480      	push	{r7}
 8102eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102eac:	4b06      	ldr	r3, [pc, #24]	; (8102ec8 <HAL_IncTick+0x20>)
 8102eae:	781b      	ldrb	r3, [r3, #0]
 8102eb0:	461a      	mov	r2, r3
 8102eb2:	4b06      	ldr	r3, [pc, #24]	; (8102ecc <HAL_IncTick+0x24>)
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	4413      	add	r3, r2
 8102eb8:	4a04      	ldr	r2, [pc, #16]	; (8102ecc <HAL_IncTick+0x24>)
 8102eba:	6013      	str	r3, [r2, #0]
}
 8102ebc:	bf00      	nop
 8102ebe:	46bd      	mov	sp, r7
 8102ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ec4:	4770      	bx	lr
 8102ec6:	bf00      	nop
 8102ec8:	1000000c 	.word	0x1000000c
 8102ecc:	1000060c 	.word	0x1000060c

08102ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102ed0:	b480      	push	{r7}
 8102ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8102ed4:	4b03      	ldr	r3, [pc, #12]	; (8102ee4 <HAL_GetTick+0x14>)
 8102ed6:	681b      	ldr	r3, [r3, #0]
}
 8102ed8:	4618      	mov	r0, r3
 8102eda:	46bd      	mov	sp, r7
 8102edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ee0:	4770      	bx	lr
 8102ee2:	bf00      	nop
 8102ee4:	1000060c 	.word	0x1000060c

08102ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102ee8:	b580      	push	{r7, lr}
 8102eea:	b084      	sub	sp, #16
 8102eec:	af00      	add	r7, sp, #0
 8102eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102ef0:	f7ff ffee 	bl	8102ed0 <HAL_GetTick>
 8102ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102efa:	68fb      	ldr	r3, [r7, #12]
 8102efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102f00:	d005      	beq.n	8102f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102f02:	4b0a      	ldr	r3, [pc, #40]	; (8102f2c <HAL_Delay+0x44>)
 8102f04:	781b      	ldrb	r3, [r3, #0]
 8102f06:	461a      	mov	r2, r3
 8102f08:	68fb      	ldr	r3, [r7, #12]
 8102f0a:	4413      	add	r3, r2
 8102f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102f0e:	bf00      	nop
 8102f10:	f7ff ffde 	bl	8102ed0 <HAL_GetTick>
 8102f14:	4602      	mov	r2, r0
 8102f16:	68bb      	ldr	r3, [r7, #8]
 8102f18:	1ad3      	subs	r3, r2, r3
 8102f1a:	68fa      	ldr	r2, [r7, #12]
 8102f1c:	429a      	cmp	r2, r3
 8102f1e:	d8f7      	bhi.n	8102f10 <HAL_Delay+0x28>
  {
  }
}
 8102f20:	bf00      	nop
 8102f22:	bf00      	nop
 8102f24:	3710      	adds	r7, #16
 8102f26:	46bd      	mov	sp, r7
 8102f28:	bd80      	pop	{r7, pc}
 8102f2a:	bf00      	nop
 8102f2c:	1000000c 	.word	0x1000000c

08102f30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102f30:	b480      	push	{r7}
 8102f32:	b083      	sub	sp, #12
 8102f34:	af00      	add	r7, sp, #0
 8102f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	68db      	ldr	r3, [r3, #12]
 8102f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8102f40:	2b00      	cmp	r3, #0
 8102f42:	d101      	bne.n	8102f48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102f44:	2301      	movs	r3, #1
 8102f46:	e000      	b.n	8102f4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102f48:	2300      	movs	r3, #0
}
 8102f4a:	4618      	mov	r0, r3
 8102f4c:	370c      	adds	r7, #12
 8102f4e:	46bd      	mov	sp, r7
 8102f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f54:	4770      	bx	lr

08102f56 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102f56:	b480      	push	{r7}
 8102f58:	b083      	sub	sp, #12
 8102f5a:	af00      	add	r7, sp, #0
 8102f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f62:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8102f66:	2b00      	cmp	r3, #0
 8102f68:	d101      	bne.n	8102f6e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8102f6a:	2301      	movs	r3, #1
 8102f6c:	e000      	b.n	8102f70 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8102f6e:	2300      	movs	r3, #0
}
 8102f70:	4618      	mov	r0, r3
 8102f72:	370c      	adds	r7, #12
 8102f74:	46bd      	mov	sp, r7
 8102f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f7a:	4770      	bx	lr

08102f7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102f7c:	b480      	push	{r7}
 8102f7e:	b083      	sub	sp, #12
 8102f80:	af00      	add	r7, sp, #0
 8102f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	689b      	ldr	r3, [r3, #8]
 8102f88:	f003 031f 	and.w	r3, r3, #31
}
 8102f8c:	4618      	mov	r0, r3
 8102f8e:	370c      	adds	r7, #12
 8102f90:	46bd      	mov	sp, r7
 8102f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f96:	4770      	bx	lr

08102f98 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102f98:	b480      	push	{r7}
 8102f9a:	b083      	sub	sp, #12
 8102f9c:	af00      	add	r7, sp, #0
 8102f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	689b      	ldr	r3, [r3, #8]
 8102fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8102fa8:	4618      	mov	r0, r3
 8102faa:	370c      	adds	r7, #12
 8102fac:	46bd      	mov	sp, r7
 8102fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fb2:	4770      	bx	lr

08102fb4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102fb4:	b480      	push	{r7}
 8102fb6:	b083      	sub	sp, #12
 8102fb8:	af00      	add	r7, sp, #0
 8102fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102fbc:	687b      	ldr	r3, [r7, #4]
 8102fbe:	689b      	ldr	r3, [r3, #8]
 8102fc0:	f003 0304 	and.w	r3, r3, #4
 8102fc4:	2b04      	cmp	r3, #4
 8102fc6:	d101      	bne.n	8102fcc <LL_ADC_REG_IsConversionOngoing+0x18>
 8102fc8:	2301      	movs	r3, #1
 8102fca:	e000      	b.n	8102fce <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102fcc:	2300      	movs	r3, #0
}
 8102fce:	4618      	mov	r0, r3
 8102fd0:	370c      	adds	r7, #12
 8102fd2:	46bd      	mov	sp, r7
 8102fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fd8:	4770      	bx	lr

08102fda <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102fda:	b480      	push	{r7}
 8102fdc:	b083      	sub	sp, #12
 8102fde:	af00      	add	r7, sp, #0
 8102fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	689b      	ldr	r3, [r3, #8]
 8102fe6:	f003 0308 	and.w	r3, r3, #8
 8102fea:	2b08      	cmp	r3, #8
 8102fec:	d101      	bne.n	8102ff2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102fee:	2301      	movs	r3, #1
 8102ff0:	e000      	b.n	8102ff4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102ff2:	2300      	movs	r3, #0
}
 8102ff4:	4618      	mov	r0, r3
 8102ff6:	370c      	adds	r7, #12
 8102ff8:	46bd      	mov	sp, r7
 8102ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ffe:	4770      	bx	lr

08103000 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8103000:	b580      	push	{r7, lr}
 8103002:	b08a      	sub	sp, #40	; 0x28
 8103004:	af00      	add	r7, sp, #0
 8103006:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8103008:	2300      	movs	r3, #0
 810300a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	685b      	ldr	r3, [r3, #4]
 810301a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810301c:	687b      	ldr	r3, [r7, #4]
 810301e:	681b      	ldr	r3, [r3, #0]
 8103020:	4a87      	ldr	r2, [pc, #540]	; (8103240 <HAL_ADC_IRQHandler+0x240>)
 8103022:	4293      	cmp	r3, r2
 8103024:	d004      	beq.n	8103030 <HAL_ADC_IRQHandler+0x30>
 8103026:	687b      	ldr	r3, [r7, #4]
 8103028:	681b      	ldr	r3, [r3, #0]
 810302a:	4a86      	ldr	r2, [pc, #536]	; (8103244 <HAL_ADC_IRQHandler+0x244>)
 810302c:	4293      	cmp	r3, r2
 810302e:	d101      	bne.n	8103034 <HAL_ADC_IRQHandler+0x34>
 8103030:	4b85      	ldr	r3, [pc, #532]	; (8103248 <HAL_ADC_IRQHandler+0x248>)
 8103032:	e000      	b.n	8103036 <HAL_ADC_IRQHandler+0x36>
 8103034:	4b85      	ldr	r3, [pc, #532]	; (810324c <HAL_ADC_IRQHandler+0x24c>)
 8103036:	4618      	mov	r0, r3
 8103038:	f7ff ffa0 	bl	8102f7c <LL_ADC_GetMultimode>
 810303c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 810303e:	69fb      	ldr	r3, [r7, #28]
 8103040:	f003 0302 	and.w	r3, r3, #2
 8103044:	2b00      	cmp	r3, #0
 8103046:	d017      	beq.n	8103078 <HAL_ADC_IRQHandler+0x78>
 8103048:	69bb      	ldr	r3, [r7, #24]
 810304a:	f003 0302 	and.w	r3, r3, #2
 810304e:	2b00      	cmp	r3, #0
 8103050:	d012      	beq.n	8103078 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103056:	f003 0310 	and.w	r3, r3, #16
 810305a:	2b00      	cmp	r3, #0
 810305c:	d105      	bne.n	810306a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103062:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 810306a:	6878      	ldr	r0, [r7, #4]
 810306c:	f000 fa48 	bl	8103500 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	2202      	movs	r2, #2
 8103076:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103078:	69fb      	ldr	r3, [r7, #28]
 810307a:	f003 0304 	and.w	r3, r3, #4
 810307e:	2b00      	cmp	r3, #0
 8103080:	d004      	beq.n	810308c <HAL_ADC_IRQHandler+0x8c>
 8103082:	69bb      	ldr	r3, [r7, #24]
 8103084:	f003 0304 	and.w	r3, r3, #4
 8103088:	2b00      	cmp	r3, #0
 810308a:	d10a      	bne.n	81030a2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 810308c:	69fb      	ldr	r3, [r7, #28]
 810308e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103092:	2b00      	cmp	r3, #0
 8103094:	f000 8083 	beq.w	810319e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8103098:	69bb      	ldr	r3, [r7, #24]
 810309a:	f003 0308 	and.w	r3, r3, #8
 810309e:	2b00      	cmp	r3, #0
 81030a0:	d07d      	beq.n	810319e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030a6:	f003 0310 	and.w	r3, r3, #16
 81030aa:	2b00      	cmp	r3, #0
 81030ac:	d105      	bne.n	81030ba <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	4618      	mov	r0, r3
 81030c0:	f7ff ff36 	bl	8102f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 81030c4:	4603      	mov	r3, r0
 81030c6:	2b00      	cmp	r3, #0
 81030c8:	d062      	beq.n	8103190 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	4a5d      	ldr	r2, [pc, #372]	; (8103244 <HAL_ADC_IRQHandler+0x244>)
 81030d0:	4293      	cmp	r3, r2
 81030d2:	d002      	beq.n	81030da <HAL_ADC_IRQHandler+0xda>
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	e000      	b.n	81030dc <HAL_ADC_IRQHandler+0xdc>
 81030da:	4b59      	ldr	r3, [pc, #356]	; (8103240 <HAL_ADC_IRQHandler+0x240>)
 81030dc:	687a      	ldr	r2, [r7, #4]
 81030de:	6812      	ldr	r2, [r2, #0]
 81030e0:	4293      	cmp	r3, r2
 81030e2:	d008      	beq.n	81030f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81030e4:	697b      	ldr	r3, [r7, #20]
 81030e6:	2b00      	cmp	r3, #0
 81030e8:	d005      	beq.n	81030f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81030ea:	697b      	ldr	r3, [r7, #20]
 81030ec:	2b05      	cmp	r3, #5
 81030ee:	d002      	beq.n	81030f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81030f0:	697b      	ldr	r3, [r7, #20]
 81030f2:	2b09      	cmp	r3, #9
 81030f4:	d104      	bne.n	8103100 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	68db      	ldr	r3, [r3, #12]
 81030fc:	623b      	str	r3, [r7, #32]
 81030fe:	e00c      	b.n	810311a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	4a4f      	ldr	r2, [pc, #316]	; (8103244 <HAL_ADC_IRQHandler+0x244>)
 8103106:	4293      	cmp	r3, r2
 8103108:	d002      	beq.n	8103110 <HAL_ADC_IRQHandler+0x110>
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	e000      	b.n	8103112 <HAL_ADC_IRQHandler+0x112>
 8103110:	4b4b      	ldr	r3, [pc, #300]	; (8103240 <HAL_ADC_IRQHandler+0x240>)
 8103112:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103114:	693b      	ldr	r3, [r7, #16]
 8103116:	68db      	ldr	r3, [r3, #12]
 8103118:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 810311a:	6a3b      	ldr	r3, [r7, #32]
 810311c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103120:	2b00      	cmp	r3, #0
 8103122:	d135      	bne.n	8103190 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	f003 0308 	and.w	r3, r3, #8
 810312e:	2b08      	cmp	r3, #8
 8103130:	d12e      	bne.n	8103190 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	4618      	mov	r0, r3
 8103138:	f7ff ff3c 	bl	8102fb4 <LL_ADC_REG_IsConversionOngoing>
 810313c:	4603      	mov	r3, r0
 810313e:	2b00      	cmp	r3, #0
 8103140:	d11a      	bne.n	8103178 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	685a      	ldr	r2, [r3, #4]
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	f022 020c 	bic.w	r2, r2, #12
 8103150:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103166:	2b00      	cmp	r3, #0
 8103168:	d112      	bne.n	8103190 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810316e:	f043 0201 	orr.w	r2, r3, #1
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	655a      	str	r2, [r3, #84]	; 0x54
 8103176:	e00b      	b.n	8103190 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103178:	687b      	ldr	r3, [r7, #4]
 810317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810317c:	f043 0210 	orr.w	r2, r3, #16
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103188:	f043 0201 	orr.w	r2, r3, #1
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8103190:	6878      	ldr	r0, [r7, #4]
 8103192:	f000 f96f 	bl	8103474 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	220c      	movs	r2, #12
 810319c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 810319e:	69fb      	ldr	r3, [r7, #28]
 81031a0:	f003 0320 	and.w	r3, r3, #32
 81031a4:	2b00      	cmp	r3, #0
 81031a6:	d004      	beq.n	81031b2 <HAL_ADC_IRQHandler+0x1b2>
 81031a8:	69bb      	ldr	r3, [r7, #24]
 81031aa:	f003 0320 	and.w	r3, r3, #32
 81031ae:	2b00      	cmp	r3, #0
 81031b0:	d10b      	bne.n	81031ca <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81031b2:	69fb      	ldr	r3, [r7, #28]
 81031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 81031b8:	2b00      	cmp	r3, #0
 81031ba:	f000 80a0 	beq.w	81032fe <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81031be:	69bb      	ldr	r3, [r7, #24]
 81031c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81031c4:	2b00      	cmp	r3, #0
 81031c6:	f000 809a 	beq.w	81032fe <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031ce:	f003 0310 	and.w	r3, r3, #16
 81031d2:	2b00      	cmp	r3, #0
 81031d4:	d105      	bne.n	81031e2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 81031d6:	687b      	ldr	r3, [r7, #4]
 81031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	4618      	mov	r0, r3
 81031e8:	f7ff feb5 	bl	8102f56 <LL_ADC_INJ_IsTriggerSourceSWStart>
 81031ec:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	681b      	ldr	r3, [r3, #0]
 81031f2:	4618      	mov	r0, r3
 81031f4:	f7ff fe9c 	bl	8102f30 <LL_ADC_REG_IsTriggerSourceSWStart>
 81031f8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	4a11      	ldr	r2, [pc, #68]	; (8103244 <HAL_ADC_IRQHandler+0x244>)
 8103200:	4293      	cmp	r3, r2
 8103202:	d002      	beq.n	810320a <HAL_ADC_IRQHandler+0x20a>
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	681b      	ldr	r3, [r3, #0]
 8103208:	e000      	b.n	810320c <HAL_ADC_IRQHandler+0x20c>
 810320a:	4b0d      	ldr	r3, [pc, #52]	; (8103240 <HAL_ADC_IRQHandler+0x240>)
 810320c:	687a      	ldr	r2, [r7, #4]
 810320e:	6812      	ldr	r2, [r2, #0]
 8103210:	4293      	cmp	r3, r2
 8103212:	d008      	beq.n	8103226 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103214:	697b      	ldr	r3, [r7, #20]
 8103216:	2b00      	cmp	r3, #0
 8103218:	d005      	beq.n	8103226 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 810321a:	697b      	ldr	r3, [r7, #20]
 810321c:	2b06      	cmp	r3, #6
 810321e:	d002      	beq.n	8103226 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8103220:	697b      	ldr	r3, [r7, #20]
 8103222:	2b07      	cmp	r3, #7
 8103224:	d104      	bne.n	8103230 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	681b      	ldr	r3, [r3, #0]
 810322a:	68db      	ldr	r3, [r3, #12]
 810322c:	623b      	str	r3, [r7, #32]
 810322e:	e014      	b.n	810325a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	681b      	ldr	r3, [r3, #0]
 8103234:	4a03      	ldr	r2, [pc, #12]	; (8103244 <HAL_ADC_IRQHandler+0x244>)
 8103236:	4293      	cmp	r3, r2
 8103238:	d00a      	beq.n	8103250 <HAL_ADC_IRQHandler+0x250>
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	681b      	ldr	r3, [r3, #0]
 810323e:	e008      	b.n	8103252 <HAL_ADC_IRQHandler+0x252>
 8103240:	40022000 	.word	0x40022000
 8103244:	40022100 	.word	0x40022100
 8103248:	40022300 	.word	0x40022300
 810324c:	58026300 	.word	0x58026300
 8103250:	4b84      	ldr	r3, [pc, #528]	; (8103464 <HAL_ADC_IRQHandler+0x464>)
 8103252:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103254:	693b      	ldr	r3, [r7, #16]
 8103256:	68db      	ldr	r3, [r3, #12]
 8103258:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 810325a:	68fb      	ldr	r3, [r7, #12]
 810325c:	2b00      	cmp	r3, #0
 810325e:	d10c      	bne.n	810327a <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8103260:	6a3b      	ldr	r3, [r7, #32]
 8103262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8103266:	2b00      	cmp	r3, #0
 8103268:	d142      	bne.n	81032f0 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 810326a:	68bb      	ldr	r3, [r7, #8]
 810326c:	2b00      	cmp	r3, #0
 810326e:	d03f      	beq.n	81032f0 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8103270:	6a3b      	ldr	r3, [r7, #32]
 8103272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8103276:	2b00      	cmp	r3, #0
 8103278:	d13a      	bne.n	81032f0 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	681b      	ldr	r3, [r3, #0]
 8103280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103284:	2b40      	cmp	r3, #64	; 0x40
 8103286:	d133      	bne.n	81032f0 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8103288:	6a3b      	ldr	r3, [r7, #32]
 810328a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810328e:	2b00      	cmp	r3, #0
 8103290:	d12e      	bne.n	81032f0 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	681b      	ldr	r3, [r3, #0]
 8103296:	4618      	mov	r0, r3
 8103298:	f7ff fe9f 	bl	8102fda <LL_ADC_INJ_IsConversionOngoing>
 810329c:	4603      	mov	r3, r0
 810329e:	2b00      	cmp	r3, #0
 81032a0:	d11a      	bne.n	81032d8 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	685a      	ldr	r2, [r3, #4]
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 81032b0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81032c6:	2b00      	cmp	r3, #0
 81032c8:	d112      	bne.n	81032f0 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032ce:	f043 0201 	orr.w	r2, r3, #1
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	655a      	str	r2, [r3, #84]	; 0x54
 81032d6:	e00b      	b.n	81032f0 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032dc:	f043 0210 	orr.w	r2, r3, #16
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81032e8:	f043 0201 	orr.w	r2, r3, #1
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 81032f0:	6878      	ldr	r0, [r7, #4]
 81032f2:	f000 f8dd 	bl	81034b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 81032f6:	687b      	ldr	r3, [r7, #4]
 81032f8:	681b      	ldr	r3, [r3, #0]
 81032fa:	2260      	movs	r2, #96	; 0x60
 81032fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 81032fe:	69fb      	ldr	r3, [r7, #28]
 8103300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103304:	2b00      	cmp	r3, #0
 8103306:	d011      	beq.n	810332c <HAL_ADC_IRQHandler+0x32c>
 8103308:	69bb      	ldr	r3, [r7, #24]
 810330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810330e:	2b00      	cmp	r3, #0
 8103310:	d00c      	beq.n	810332c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103316:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 810331e:	6878      	ldr	r0, [r7, #4]
 8103320:	f000 f8b2 	bl	8103488 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	2280      	movs	r2, #128	; 0x80
 810332a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 810332c:	69fb      	ldr	r3, [r7, #28]
 810332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103332:	2b00      	cmp	r3, #0
 8103334:	d012      	beq.n	810335c <HAL_ADC_IRQHandler+0x35c>
 8103336:	69bb      	ldr	r3, [r7, #24]
 8103338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810333c:	2b00      	cmp	r3, #0
 810333e:	d00d      	beq.n	810335c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103344:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 810334c:	6878      	ldr	r0, [r7, #4]
 810334e:	f000 f8c3 	bl	81034d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8103352:	687b      	ldr	r3, [r7, #4]
 8103354:	681b      	ldr	r3, [r3, #0]
 8103356:	f44f 7280 	mov.w	r2, #256	; 0x100
 810335a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 810335c:	69fb      	ldr	r3, [r7, #28]
 810335e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103362:	2b00      	cmp	r3, #0
 8103364:	d012      	beq.n	810338c <HAL_ADC_IRQHandler+0x38c>
 8103366:	69bb      	ldr	r3, [r7, #24]
 8103368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810336c:	2b00      	cmp	r3, #0
 810336e:	d00d      	beq.n	810338c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103374:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8103378:	687b      	ldr	r3, [r7, #4]
 810337a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 810337c:	6878      	ldr	r0, [r7, #4]
 810337e:	f000 f8b5 	bl	81034ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8103382:	687b      	ldr	r3, [r7, #4]
 8103384:	681b      	ldr	r3, [r3, #0]
 8103386:	f44f 7200 	mov.w	r2, #512	; 0x200
 810338a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 810338c:	69fb      	ldr	r3, [r7, #28]
 810338e:	f003 0310 	and.w	r3, r3, #16
 8103392:	2b00      	cmp	r3, #0
 8103394:	d043      	beq.n	810341e <HAL_ADC_IRQHandler+0x41e>
 8103396:	69bb      	ldr	r3, [r7, #24]
 8103398:	f003 0310 	and.w	r3, r3, #16
 810339c:	2b00      	cmp	r3, #0
 810339e:	d03e      	beq.n	810341e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81033a4:	2b00      	cmp	r3, #0
 81033a6:	d102      	bne.n	81033ae <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 81033a8:	2301      	movs	r3, #1
 81033aa:	627b      	str	r3, [r7, #36]	; 0x24
 81033ac:	e021      	b.n	81033f2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 81033ae:	697b      	ldr	r3, [r7, #20]
 81033b0:	2b00      	cmp	r3, #0
 81033b2:	d015      	beq.n	81033e0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	681b      	ldr	r3, [r3, #0]
 81033b8:	4a2a      	ldr	r2, [pc, #168]	; (8103464 <HAL_ADC_IRQHandler+0x464>)
 81033ba:	4293      	cmp	r3, r2
 81033bc:	d004      	beq.n	81033c8 <HAL_ADC_IRQHandler+0x3c8>
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	4a29      	ldr	r2, [pc, #164]	; (8103468 <HAL_ADC_IRQHandler+0x468>)
 81033c4:	4293      	cmp	r3, r2
 81033c6:	d101      	bne.n	81033cc <HAL_ADC_IRQHandler+0x3cc>
 81033c8:	4b28      	ldr	r3, [pc, #160]	; (810346c <HAL_ADC_IRQHandler+0x46c>)
 81033ca:	e000      	b.n	81033ce <HAL_ADC_IRQHandler+0x3ce>
 81033cc:	4b28      	ldr	r3, [pc, #160]	; (8103470 <HAL_ADC_IRQHandler+0x470>)
 81033ce:	4618      	mov	r0, r3
 81033d0:	f7ff fde2 	bl	8102f98 <LL_ADC_GetMultiDMATransfer>
 81033d4:	4603      	mov	r3, r0
 81033d6:	2b00      	cmp	r3, #0
 81033d8:	d00b      	beq.n	81033f2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 81033da:	2301      	movs	r3, #1
 81033dc:	627b      	str	r3, [r7, #36]	; 0x24
 81033de:	e008      	b.n	81033f2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	68db      	ldr	r3, [r3, #12]
 81033e6:	f003 0303 	and.w	r3, r3, #3
 81033ea:	2b00      	cmp	r3, #0
 81033ec:	d001      	beq.n	81033f2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 81033ee:	2301      	movs	r3, #1
 81033f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 81033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81033f4:	2b01      	cmp	r3, #1
 81033f6:	d10e      	bne.n	8103416 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 81033f8:	687b      	ldr	r3, [r7, #4]
 81033fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103408:	f043 0202 	orr.w	r2, r3, #2
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8103410:	6878      	ldr	r0, [r7, #4]
 8103412:	f000 f843 	bl	810349c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	2210      	movs	r2, #16
 810341c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 810341e:	69fb      	ldr	r3, [r7, #28]
 8103420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103424:	2b00      	cmp	r3, #0
 8103426:	d018      	beq.n	810345a <HAL_ADC_IRQHandler+0x45a>
 8103428:	69bb      	ldr	r3, [r7, #24]
 810342a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810342e:	2b00      	cmp	r3, #0
 8103430:	d013      	beq.n	810345a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103436:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103442:	f043 0208 	orr.w	r2, r3, #8
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	681b      	ldr	r3, [r3, #0]
 810344e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103452:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8103454:	6878      	ldr	r0, [r7, #4]
 8103456:	f000 f835 	bl	81034c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 810345a:	bf00      	nop
 810345c:	3728      	adds	r7, #40	; 0x28
 810345e:	46bd      	mov	sp, r7
 8103460:	bd80      	pop	{r7, pc}
 8103462:	bf00      	nop
 8103464:	40022000 	.word	0x40022000
 8103468:	40022100 	.word	0x40022100
 810346c:	40022300 	.word	0x40022300
 8103470:	58026300 	.word	0x58026300

08103474 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103474:	b480      	push	{r7}
 8103476:	b083      	sub	sp, #12
 8103478:	af00      	add	r7, sp, #0
 810347a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 810347c:	bf00      	nop
 810347e:	370c      	adds	r7, #12
 8103480:	46bd      	mov	sp, r7
 8103482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103486:	4770      	bx	lr

08103488 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8103488:	b480      	push	{r7}
 810348a:	b083      	sub	sp, #12
 810348c:	af00      	add	r7, sp, #0
 810348e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8103490:	bf00      	nop
 8103492:	370c      	adds	r7, #12
 8103494:	46bd      	mov	sp, r7
 8103496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810349a:	4770      	bx	lr

0810349c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 810349c:	b480      	push	{r7}
 810349e:	b083      	sub	sp, #12
 81034a0:	af00      	add	r7, sp, #0
 81034a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 81034a4:	bf00      	nop
 81034a6:	370c      	adds	r7, #12
 81034a8:	46bd      	mov	sp, r7
 81034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ae:	4770      	bx	lr

081034b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 81034b0:	b480      	push	{r7}
 81034b2:	b083      	sub	sp, #12
 81034b4:	af00      	add	r7, sp, #0
 81034b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 81034b8:	bf00      	nop
 81034ba:	370c      	adds	r7, #12
 81034bc:	46bd      	mov	sp, r7
 81034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034c2:	4770      	bx	lr

081034c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 81034c4:	b480      	push	{r7}
 81034c6:	b083      	sub	sp, #12
 81034c8:	af00      	add	r7, sp, #0
 81034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 81034cc:	bf00      	nop
 81034ce:	370c      	adds	r7, #12
 81034d0:	46bd      	mov	sp, r7
 81034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034d6:	4770      	bx	lr

081034d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 81034d8:	b480      	push	{r7}
 81034da:	b083      	sub	sp, #12
 81034dc:	af00      	add	r7, sp, #0
 81034de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 81034e0:	bf00      	nop
 81034e2:	370c      	adds	r7, #12
 81034e4:	46bd      	mov	sp, r7
 81034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ea:	4770      	bx	lr

081034ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 81034ec:	b480      	push	{r7}
 81034ee:	b083      	sub	sp, #12
 81034f0:	af00      	add	r7, sp, #0
 81034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 81034f4:	bf00      	nop
 81034f6:	370c      	adds	r7, #12
 81034f8:	46bd      	mov	sp, r7
 81034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034fe:	4770      	bx	lr

08103500 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103500:	b480      	push	{r7}
 8103502:	b083      	sub	sp, #12
 8103504:	af00      	add	r7, sp, #0
 8103506:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8103508:	bf00      	nop
 810350a:	370c      	adds	r7, #12
 810350c:	46bd      	mov	sp, r7
 810350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103512:	4770      	bx	lr

08103514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103514:	b480      	push	{r7}
 8103516:	b085      	sub	sp, #20
 8103518:	af00      	add	r7, sp, #0
 810351a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	f003 0307 	and.w	r3, r3, #7
 8103522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103524:	4b0c      	ldr	r3, [pc, #48]	; (8103558 <__NVIC_SetPriorityGrouping+0x44>)
 8103526:	68db      	ldr	r3, [r3, #12]
 8103528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810352a:	68ba      	ldr	r2, [r7, #8]
 810352c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103530:	4013      	ands	r3, r2
 8103532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103534:	68fb      	ldr	r3, [r7, #12]
 8103536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103538:	68bb      	ldr	r3, [r7, #8]
 810353a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810353c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103546:	4a04      	ldr	r2, [pc, #16]	; (8103558 <__NVIC_SetPriorityGrouping+0x44>)
 8103548:	68bb      	ldr	r3, [r7, #8]
 810354a:	60d3      	str	r3, [r2, #12]
}
 810354c:	bf00      	nop
 810354e:	3714      	adds	r7, #20
 8103550:	46bd      	mov	sp, r7
 8103552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103556:	4770      	bx	lr
 8103558:	e000ed00 	.word	0xe000ed00

0810355c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810355c:	b480      	push	{r7}
 810355e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103560:	4b04      	ldr	r3, [pc, #16]	; (8103574 <__NVIC_GetPriorityGrouping+0x18>)
 8103562:	68db      	ldr	r3, [r3, #12]
 8103564:	0a1b      	lsrs	r3, r3, #8
 8103566:	f003 0307 	and.w	r3, r3, #7
}
 810356a:	4618      	mov	r0, r3
 810356c:	46bd      	mov	sp, r7
 810356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103572:	4770      	bx	lr
 8103574:	e000ed00 	.word	0xe000ed00

08103578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103578:	b480      	push	{r7}
 810357a:	b083      	sub	sp, #12
 810357c:	af00      	add	r7, sp, #0
 810357e:	4603      	mov	r3, r0
 8103580:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103586:	2b00      	cmp	r3, #0
 8103588:	db0b      	blt.n	81035a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810358a:	88fb      	ldrh	r3, [r7, #6]
 810358c:	f003 021f 	and.w	r2, r3, #31
 8103590:	4907      	ldr	r1, [pc, #28]	; (81035b0 <__NVIC_EnableIRQ+0x38>)
 8103592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103596:	095b      	lsrs	r3, r3, #5
 8103598:	2001      	movs	r0, #1
 810359a:	fa00 f202 	lsl.w	r2, r0, r2
 810359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81035a2:	bf00      	nop
 81035a4:	370c      	adds	r7, #12
 81035a6:	46bd      	mov	sp, r7
 81035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ac:	4770      	bx	lr
 81035ae:	bf00      	nop
 81035b0:	e000e100 	.word	0xe000e100

081035b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81035b4:	b480      	push	{r7}
 81035b6:	b083      	sub	sp, #12
 81035b8:	af00      	add	r7, sp, #0
 81035ba:	4603      	mov	r3, r0
 81035bc:	6039      	str	r1, [r7, #0]
 81035be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81035c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81035c4:	2b00      	cmp	r3, #0
 81035c6:	db0a      	blt.n	81035de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035c8:	683b      	ldr	r3, [r7, #0]
 81035ca:	b2da      	uxtb	r2, r3
 81035cc:	490c      	ldr	r1, [pc, #48]	; (8103600 <__NVIC_SetPriority+0x4c>)
 81035ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81035d2:	0112      	lsls	r2, r2, #4
 81035d4:	b2d2      	uxtb	r2, r2
 81035d6:	440b      	add	r3, r1
 81035d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81035dc:	e00a      	b.n	81035f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035de:	683b      	ldr	r3, [r7, #0]
 81035e0:	b2da      	uxtb	r2, r3
 81035e2:	4908      	ldr	r1, [pc, #32]	; (8103604 <__NVIC_SetPriority+0x50>)
 81035e4:	88fb      	ldrh	r3, [r7, #6]
 81035e6:	f003 030f 	and.w	r3, r3, #15
 81035ea:	3b04      	subs	r3, #4
 81035ec:	0112      	lsls	r2, r2, #4
 81035ee:	b2d2      	uxtb	r2, r2
 81035f0:	440b      	add	r3, r1
 81035f2:	761a      	strb	r2, [r3, #24]
}
 81035f4:	bf00      	nop
 81035f6:	370c      	adds	r7, #12
 81035f8:	46bd      	mov	sp, r7
 81035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035fe:	4770      	bx	lr
 8103600:	e000e100 	.word	0xe000e100
 8103604:	e000ed00 	.word	0xe000ed00

08103608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103608:	b480      	push	{r7}
 810360a:	b089      	sub	sp, #36	; 0x24
 810360c:	af00      	add	r7, sp, #0
 810360e:	60f8      	str	r0, [r7, #12]
 8103610:	60b9      	str	r1, [r7, #8]
 8103612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103614:	68fb      	ldr	r3, [r7, #12]
 8103616:	f003 0307 	and.w	r3, r3, #7
 810361a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810361c:	69fb      	ldr	r3, [r7, #28]
 810361e:	f1c3 0307 	rsb	r3, r3, #7
 8103622:	2b04      	cmp	r3, #4
 8103624:	bf28      	it	cs
 8103626:	2304      	movcs	r3, #4
 8103628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810362a:	69fb      	ldr	r3, [r7, #28]
 810362c:	3304      	adds	r3, #4
 810362e:	2b06      	cmp	r3, #6
 8103630:	d902      	bls.n	8103638 <NVIC_EncodePriority+0x30>
 8103632:	69fb      	ldr	r3, [r7, #28]
 8103634:	3b03      	subs	r3, #3
 8103636:	e000      	b.n	810363a <NVIC_EncodePriority+0x32>
 8103638:	2300      	movs	r3, #0
 810363a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810363c:	f04f 32ff 	mov.w	r2, #4294967295
 8103640:	69bb      	ldr	r3, [r7, #24]
 8103642:	fa02 f303 	lsl.w	r3, r2, r3
 8103646:	43da      	mvns	r2, r3
 8103648:	68bb      	ldr	r3, [r7, #8]
 810364a:	401a      	ands	r2, r3
 810364c:	697b      	ldr	r3, [r7, #20]
 810364e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103650:	f04f 31ff 	mov.w	r1, #4294967295
 8103654:	697b      	ldr	r3, [r7, #20]
 8103656:	fa01 f303 	lsl.w	r3, r1, r3
 810365a:	43d9      	mvns	r1, r3
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103660:	4313      	orrs	r3, r2
         );
}
 8103662:	4618      	mov	r0, r3
 8103664:	3724      	adds	r7, #36	; 0x24
 8103666:	46bd      	mov	sp, r7
 8103668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810366c:	4770      	bx	lr
	...

08103670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103670:	b580      	push	{r7, lr}
 8103672:	b082      	sub	sp, #8
 8103674:	af00      	add	r7, sp, #0
 8103676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	3b01      	subs	r3, #1
 810367c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103680:	d301      	bcc.n	8103686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103682:	2301      	movs	r3, #1
 8103684:	e00f      	b.n	81036a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103686:	4a0a      	ldr	r2, [pc, #40]	; (81036b0 <SysTick_Config+0x40>)
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	3b01      	subs	r3, #1
 810368c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810368e:	210f      	movs	r1, #15
 8103690:	f04f 30ff 	mov.w	r0, #4294967295
 8103694:	f7ff ff8e 	bl	81035b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103698:	4b05      	ldr	r3, [pc, #20]	; (81036b0 <SysTick_Config+0x40>)
 810369a:	2200      	movs	r2, #0
 810369c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810369e:	4b04      	ldr	r3, [pc, #16]	; (81036b0 <SysTick_Config+0x40>)
 81036a0:	2207      	movs	r2, #7
 81036a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81036a4:	2300      	movs	r3, #0
}
 81036a6:	4618      	mov	r0, r3
 81036a8:	3708      	adds	r7, #8
 81036aa:	46bd      	mov	sp, r7
 81036ac:	bd80      	pop	{r7, pc}
 81036ae:	bf00      	nop
 81036b0:	e000e010 	.word	0xe000e010

081036b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81036b4:	b580      	push	{r7, lr}
 81036b6:	b082      	sub	sp, #8
 81036b8:	af00      	add	r7, sp, #0
 81036ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81036bc:	6878      	ldr	r0, [r7, #4]
 81036be:	f7ff ff29 	bl	8103514 <__NVIC_SetPriorityGrouping>
}
 81036c2:	bf00      	nop
 81036c4:	3708      	adds	r7, #8
 81036c6:	46bd      	mov	sp, r7
 81036c8:	bd80      	pop	{r7, pc}

081036ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81036ca:	b580      	push	{r7, lr}
 81036cc:	b086      	sub	sp, #24
 81036ce:	af00      	add	r7, sp, #0
 81036d0:	4603      	mov	r3, r0
 81036d2:	60b9      	str	r1, [r7, #8]
 81036d4:	607a      	str	r2, [r7, #4]
 81036d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81036d8:	f7ff ff40 	bl	810355c <__NVIC_GetPriorityGrouping>
 81036dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81036de:	687a      	ldr	r2, [r7, #4]
 81036e0:	68b9      	ldr	r1, [r7, #8]
 81036e2:	6978      	ldr	r0, [r7, #20]
 81036e4:	f7ff ff90 	bl	8103608 <NVIC_EncodePriority>
 81036e8:	4602      	mov	r2, r0
 81036ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81036ee:	4611      	mov	r1, r2
 81036f0:	4618      	mov	r0, r3
 81036f2:	f7ff ff5f 	bl	81035b4 <__NVIC_SetPriority>
}
 81036f6:	bf00      	nop
 81036f8:	3718      	adds	r7, #24
 81036fa:	46bd      	mov	sp, r7
 81036fc:	bd80      	pop	{r7, pc}

081036fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81036fe:	b580      	push	{r7, lr}
 8103700:	b082      	sub	sp, #8
 8103702:	af00      	add	r7, sp, #0
 8103704:	4603      	mov	r3, r0
 8103706:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810370c:	4618      	mov	r0, r3
 810370e:	f7ff ff33 	bl	8103578 <__NVIC_EnableIRQ>
}
 8103712:	bf00      	nop
 8103714:	3708      	adds	r7, #8
 8103716:	46bd      	mov	sp, r7
 8103718:	bd80      	pop	{r7, pc}

0810371a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810371a:	b580      	push	{r7, lr}
 810371c:	b082      	sub	sp, #8
 810371e:	af00      	add	r7, sp, #0
 8103720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103722:	6878      	ldr	r0, [r7, #4]
 8103724:	f7ff ffa4 	bl	8103670 <SysTick_Config>
 8103728:	4603      	mov	r3, r0
}
 810372a:	4618      	mov	r0, r3
 810372c:	3708      	adds	r7, #8
 810372e:	46bd      	mov	sp, r7
 8103730:	bd80      	pop	{r7, pc}
	...

08103734 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103734:	b480      	push	{r7}
 8103736:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103738:	4b07      	ldr	r3, [pc, #28]	; (8103758 <HAL_GetCurrentCPUID+0x24>)
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	091b      	lsrs	r3, r3, #4
 810373e:	f003 030f 	and.w	r3, r3, #15
 8103742:	2b07      	cmp	r3, #7
 8103744:	d101      	bne.n	810374a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103746:	2303      	movs	r3, #3
 8103748:	e000      	b.n	810374c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810374a:	2301      	movs	r3, #1
  }
}
 810374c:	4618      	mov	r0, r3
 810374e:	46bd      	mov	sp, r7
 8103750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103754:	4770      	bx	lr
 8103756:	bf00      	nop
 8103758:	e000ed00 	.word	0xe000ed00

0810375c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 810375c:	b580      	push	{r7, lr}
 810375e:	b086      	sub	sp, #24
 8103760:	af00      	add	r7, sp, #0
 8103762:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103764:	f7ff fbb4 	bl	8102ed0 <HAL_GetTick>
 8103768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	2b00      	cmp	r3, #0
 810376e:	d101      	bne.n	8103774 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8103770:	2301      	movs	r3, #1
 8103772:	e314      	b.n	8103d9e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103774:	687b      	ldr	r3, [r7, #4]
 8103776:	681b      	ldr	r3, [r3, #0]
 8103778:	4a66      	ldr	r2, [pc, #408]	; (8103914 <HAL_DMA_Init+0x1b8>)
 810377a:	4293      	cmp	r3, r2
 810377c:	d04a      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 810377e:	687b      	ldr	r3, [r7, #4]
 8103780:	681b      	ldr	r3, [r3, #0]
 8103782:	4a65      	ldr	r2, [pc, #404]	; (8103918 <HAL_DMA_Init+0x1bc>)
 8103784:	4293      	cmp	r3, r2
 8103786:	d045      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	681b      	ldr	r3, [r3, #0]
 810378c:	4a63      	ldr	r2, [pc, #396]	; (810391c <HAL_DMA_Init+0x1c0>)
 810378e:	4293      	cmp	r3, r2
 8103790:	d040      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	681b      	ldr	r3, [r3, #0]
 8103796:	4a62      	ldr	r2, [pc, #392]	; (8103920 <HAL_DMA_Init+0x1c4>)
 8103798:	4293      	cmp	r3, r2
 810379a:	d03b      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	4a60      	ldr	r2, [pc, #384]	; (8103924 <HAL_DMA_Init+0x1c8>)
 81037a2:	4293      	cmp	r3, r2
 81037a4:	d036      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	4a5f      	ldr	r2, [pc, #380]	; (8103928 <HAL_DMA_Init+0x1cc>)
 81037ac:	4293      	cmp	r3, r2
 81037ae:	d031      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	4a5d      	ldr	r2, [pc, #372]	; (810392c <HAL_DMA_Init+0x1d0>)
 81037b6:	4293      	cmp	r3, r2
 81037b8:	d02c      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	4a5c      	ldr	r2, [pc, #368]	; (8103930 <HAL_DMA_Init+0x1d4>)
 81037c0:	4293      	cmp	r3, r2
 81037c2:	d027      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	681b      	ldr	r3, [r3, #0]
 81037c8:	4a5a      	ldr	r2, [pc, #360]	; (8103934 <HAL_DMA_Init+0x1d8>)
 81037ca:	4293      	cmp	r3, r2
 81037cc:	d022      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	681b      	ldr	r3, [r3, #0]
 81037d2:	4a59      	ldr	r2, [pc, #356]	; (8103938 <HAL_DMA_Init+0x1dc>)
 81037d4:	4293      	cmp	r3, r2
 81037d6:	d01d      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	681b      	ldr	r3, [r3, #0]
 81037dc:	4a57      	ldr	r2, [pc, #348]	; (810393c <HAL_DMA_Init+0x1e0>)
 81037de:	4293      	cmp	r3, r2
 81037e0:	d018      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	4a56      	ldr	r2, [pc, #344]	; (8103940 <HAL_DMA_Init+0x1e4>)
 81037e8:	4293      	cmp	r3, r2
 81037ea:	d013      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	681b      	ldr	r3, [r3, #0]
 81037f0:	4a54      	ldr	r2, [pc, #336]	; (8103944 <HAL_DMA_Init+0x1e8>)
 81037f2:	4293      	cmp	r3, r2
 81037f4:	d00e      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	681b      	ldr	r3, [r3, #0]
 81037fa:	4a53      	ldr	r2, [pc, #332]	; (8103948 <HAL_DMA_Init+0x1ec>)
 81037fc:	4293      	cmp	r3, r2
 81037fe:	d009      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	4a51      	ldr	r2, [pc, #324]	; (810394c <HAL_DMA_Init+0x1f0>)
 8103806:	4293      	cmp	r3, r2
 8103808:	d004      	beq.n	8103814 <HAL_DMA_Init+0xb8>
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	681b      	ldr	r3, [r3, #0]
 810380e:	4a50      	ldr	r2, [pc, #320]	; (8103950 <HAL_DMA_Init+0x1f4>)
 8103810:	4293      	cmp	r3, r2
 8103812:	d101      	bne.n	8103818 <HAL_DMA_Init+0xbc>
 8103814:	2301      	movs	r3, #1
 8103816:	e000      	b.n	810381a <HAL_DMA_Init+0xbe>
 8103818:	2300      	movs	r3, #0
 810381a:	2b00      	cmp	r3, #0
 810381c:	f000 813b 	beq.w	8103a96 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	2200      	movs	r2, #0
 8103824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	2202      	movs	r2, #2
 810382c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	681b      	ldr	r3, [r3, #0]
 8103834:	4a37      	ldr	r2, [pc, #220]	; (8103914 <HAL_DMA_Init+0x1b8>)
 8103836:	4293      	cmp	r3, r2
 8103838:	d04a      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	4a36      	ldr	r2, [pc, #216]	; (8103918 <HAL_DMA_Init+0x1bc>)
 8103840:	4293      	cmp	r3, r2
 8103842:	d045      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	681b      	ldr	r3, [r3, #0]
 8103848:	4a34      	ldr	r2, [pc, #208]	; (810391c <HAL_DMA_Init+0x1c0>)
 810384a:	4293      	cmp	r3, r2
 810384c:	d040      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	4a33      	ldr	r2, [pc, #204]	; (8103920 <HAL_DMA_Init+0x1c4>)
 8103854:	4293      	cmp	r3, r2
 8103856:	d03b      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	4a31      	ldr	r2, [pc, #196]	; (8103924 <HAL_DMA_Init+0x1c8>)
 810385e:	4293      	cmp	r3, r2
 8103860:	d036      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	4a30      	ldr	r2, [pc, #192]	; (8103928 <HAL_DMA_Init+0x1cc>)
 8103868:	4293      	cmp	r3, r2
 810386a:	d031      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	4a2e      	ldr	r2, [pc, #184]	; (810392c <HAL_DMA_Init+0x1d0>)
 8103872:	4293      	cmp	r3, r2
 8103874:	d02c      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	4a2d      	ldr	r2, [pc, #180]	; (8103930 <HAL_DMA_Init+0x1d4>)
 810387c:	4293      	cmp	r3, r2
 810387e:	d027      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	681b      	ldr	r3, [r3, #0]
 8103884:	4a2b      	ldr	r2, [pc, #172]	; (8103934 <HAL_DMA_Init+0x1d8>)
 8103886:	4293      	cmp	r3, r2
 8103888:	d022      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	681b      	ldr	r3, [r3, #0]
 810388e:	4a2a      	ldr	r2, [pc, #168]	; (8103938 <HAL_DMA_Init+0x1dc>)
 8103890:	4293      	cmp	r3, r2
 8103892:	d01d      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	4a28      	ldr	r2, [pc, #160]	; (810393c <HAL_DMA_Init+0x1e0>)
 810389a:	4293      	cmp	r3, r2
 810389c:	d018      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	4a27      	ldr	r2, [pc, #156]	; (8103940 <HAL_DMA_Init+0x1e4>)
 81038a4:	4293      	cmp	r3, r2
 81038a6:	d013      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	4a25      	ldr	r2, [pc, #148]	; (8103944 <HAL_DMA_Init+0x1e8>)
 81038ae:	4293      	cmp	r3, r2
 81038b0:	d00e      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	4a24      	ldr	r2, [pc, #144]	; (8103948 <HAL_DMA_Init+0x1ec>)
 81038b8:	4293      	cmp	r3, r2
 81038ba:	d009      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	4a22      	ldr	r2, [pc, #136]	; (810394c <HAL_DMA_Init+0x1f0>)
 81038c2:	4293      	cmp	r3, r2
 81038c4:	d004      	beq.n	81038d0 <HAL_DMA_Init+0x174>
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	4a21      	ldr	r2, [pc, #132]	; (8103950 <HAL_DMA_Init+0x1f4>)
 81038cc:	4293      	cmp	r3, r2
 81038ce:	d108      	bne.n	81038e2 <HAL_DMA_Init+0x186>
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	681b      	ldr	r3, [r3, #0]
 81038d4:	681a      	ldr	r2, [r3, #0]
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	681b      	ldr	r3, [r3, #0]
 81038da:	f022 0201 	bic.w	r2, r2, #1
 81038de:	601a      	str	r2, [r3, #0]
 81038e0:	e007      	b.n	81038f2 <HAL_DMA_Init+0x196>
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	681b      	ldr	r3, [r3, #0]
 81038e6:	681a      	ldr	r2, [r3, #0]
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	f022 0201 	bic.w	r2, r2, #1
 81038f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81038f2:	e02f      	b.n	8103954 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81038f4:	f7ff faec 	bl	8102ed0 <HAL_GetTick>
 81038f8:	4602      	mov	r2, r0
 81038fa:	693b      	ldr	r3, [r7, #16]
 81038fc:	1ad3      	subs	r3, r2, r3
 81038fe:	2b05      	cmp	r3, #5
 8103900:	d928      	bls.n	8103954 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	2220      	movs	r2, #32
 8103906:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	2203      	movs	r2, #3
 810390c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8103910:	2301      	movs	r3, #1
 8103912:	e244      	b.n	8103d9e <HAL_DMA_Init+0x642>
 8103914:	40020010 	.word	0x40020010
 8103918:	40020028 	.word	0x40020028
 810391c:	40020040 	.word	0x40020040
 8103920:	40020058 	.word	0x40020058
 8103924:	40020070 	.word	0x40020070
 8103928:	40020088 	.word	0x40020088
 810392c:	400200a0 	.word	0x400200a0
 8103930:	400200b8 	.word	0x400200b8
 8103934:	40020410 	.word	0x40020410
 8103938:	40020428 	.word	0x40020428
 810393c:	40020440 	.word	0x40020440
 8103940:	40020458 	.word	0x40020458
 8103944:	40020470 	.word	0x40020470
 8103948:	40020488 	.word	0x40020488
 810394c:	400204a0 	.word	0x400204a0
 8103950:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	681b      	ldr	r3, [r3, #0]
 810395a:	f003 0301 	and.w	r3, r3, #1
 810395e:	2b00      	cmp	r3, #0
 8103960:	d1c8      	bne.n	81038f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	681b      	ldr	r3, [r3, #0]
 8103968:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810396a:	697a      	ldr	r2, [r7, #20]
 810396c:	4b84      	ldr	r3, [pc, #528]	; (8103b80 <HAL_DMA_Init+0x424>)
 810396e:	4013      	ands	r3, r2
 8103970:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810397a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	691b      	ldr	r3, [r3, #16]
 8103980:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103986:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	699b      	ldr	r3, [r3, #24]
 810398c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103992:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	6a1b      	ldr	r3, [r3, #32]
 8103998:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810399a:	697a      	ldr	r2, [r7, #20]
 810399c:	4313      	orrs	r3, r2
 810399e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81039a0:	687b      	ldr	r3, [r7, #4]
 81039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039a4:	2b04      	cmp	r3, #4
 81039a6:	d107      	bne.n	81039b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81039b0:	4313      	orrs	r3, r2
 81039b2:	697a      	ldr	r2, [r7, #20]
 81039b4:	4313      	orrs	r3, r2
 81039b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81039b8:	4b72      	ldr	r3, [pc, #456]	; (8103b84 <HAL_DMA_Init+0x428>)
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	0c1b      	lsrs	r3, r3, #16
 81039be:	041b      	lsls	r3, r3, #16
 81039c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81039c4:	d328      	bcc.n	8103a18 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	685b      	ldr	r3, [r3, #4]
 81039ca:	2b28      	cmp	r3, #40	; 0x28
 81039cc:	d903      	bls.n	81039d6 <HAL_DMA_Init+0x27a>
 81039ce:	687b      	ldr	r3, [r7, #4]
 81039d0:	685b      	ldr	r3, [r3, #4]
 81039d2:	2b2e      	cmp	r3, #46	; 0x2e
 81039d4:	d917      	bls.n	8103a06 <HAL_DMA_Init+0x2aa>
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	685b      	ldr	r3, [r3, #4]
 81039da:	2b3e      	cmp	r3, #62	; 0x3e
 81039dc:	d903      	bls.n	81039e6 <HAL_DMA_Init+0x28a>
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	685b      	ldr	r3, [r3, #4]
 81039e2:	2b42      	cmp	r3, #66	; 0x42
 81039e4:	d90f      	bls.n	8103a06 <HAL_DMA_Init+0x2aa>
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	685b      	ldr	r3, [r3, #4]
 81039ea:	2b46      	cmp	r3, #70	; 0x46
 81039ec:	d903      	bls.n	81039f6 <HAL_DMA_Init+0x29a>
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	685b      	ldr	r3, [r3, #4]
 81039f2:	2b48      	cmp	r3, #72	; 0x48
 81039f4:	d907      	bls.n	8103a06 <HAL_DMA_Init+0x2aa>
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	685b      	ldr	r3, [r3, #4]
 81039fa:	2b4e      	cmp	r3, #78	; 0x4e
 81039fc:	d905      	bls.n	8103a0a <HAL_DMA_Init+0x2ae>
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	685b      	ldr	r3, [r3, #4]
 8103a02:	2b52      	cmp	r3, #82	; 0x52
 8103a04:	d801      	bhi.n	8103a0a <HAL_DMA_Init+0x2ae>
 8103a06:	2301      	movs	r3, #1
 8103a08:	e000      	b.n	8103a0c <HAL_DMA_Init+0x2b0>
 8103a0a:	2300      	movs	r3, #0
 8103a0c:	2b00      	cmp	r3, #0
 8103a0e:	d003      	beq.n	8103a18 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8103a10:	697b      	ldr	r3, [r7, #20]
 8103a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103a16:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	697a      	ldr	r2, [r7, #20]
 8103a1e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	695b      	ldr	r3, [r3, #20]
 8103a26:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103a28:	697b      	ldr	r3, [r7, #20]
 8103a2a:	f023 0307 	bic.w	r3, r3, #7
 8103a2e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a34:	697a      	ldr	r2, [r7, #20]
 8103a36:	4313      	orrs	r3, r2
 8103a38:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a3e:	2b04      	cmp	r3, #4
 8103a40:	d117      	bne.n	8103a72 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a46:	697a      	ldr	r2, [r7, #20]
 8103a48:	4313      	orrs	r3, r2
 8103a4a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a50:	2b00      	cmp	r3, #0
 8103a52:	d00e      	beq.n	8103a72 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8103a54:	6878      	ldr	r0, [r7, #4]
 8103a56:	f002 fb4b 	bl	81060f0 <DMA_CheckFifoParam>
 8103a5a:	4603      	mov	r3, r0
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	d008      	beq.n	8103a72 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103a60:	687b      	ldr	r3, [r7, #4]
 8103a62:	2240      	movs	r2, #64	; 0x40
 8103a64:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	2201      	movs	r2, #1
 8103a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8103a6e:	2301      	movs	r3, #1
 8103a70:	e195      	b.n	8103d9e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	697a      	ldr	r2, [r7, #20]
 8103a78:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103a7a:	6878      	ldr	r0, [r7, #4]
 8103a7c:	f002 fa86 	bl	8105f8c <DMA_CalcBaseAndBitshift>
 8103a80:	4603      	mov	r3, r0
 8103a82:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a88:	f003 031f 	and.w	r3, r3, #31
 8103a8c:	223f      	movs	r2, #63	; 0x3f
 8103a8e:	409a      	lsls	r2, r3
 8103a90:	68bb      	ldr	r3, [r7, #8]
 8103a92:	609a      	str	r2, [r3, #8]
 8103a94:	e0cb      	b.n	8103c2e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	681b      	ldr	r3, [r3, #0]
 8103a9a:	4a3b      	ldr	r2, [pc, #236]	; (8103b88 <HAL_DMA_Init+0x42c>)
 8103a9c:	4293      	cmp	r3, r2
 8103a9e:	d022      	beq.n	8103ae6 <HAL_DMA_Init+0x38a>
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	4a39      	ldr	r2, [pc, #228]	; (8103b8c <HAL_DMA_Init+0x430>)
 8103aa6:	4293      	cmp	r3, r2
 8103aa8:	d01d      	beq.n	8103ae6 <HAL_DMA_Init+0x38a>
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	4a38      	ldr	r2, [pc, #224]	; (8103b90 <HAL_DMA_Init+0x434>)
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	d018      	beq.n	8103ae6 <HAL_DMA_Init+0x38a>
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	4a36      	ldr	r2, [pc, #216]	; (8103b94 <HAL_DMA_Init+0x438>)
 8103aba:	4293      	cmp	r3, r2
 8103abc:	d013      	beq.n	8103ae6 <HAL_DMA_Init+0x38a>
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	4a35      	ldr	r2, [pc, #212]	; (8103b98 <HAL_DMA_Init+0x43c>)
 8103ac4:	4293      	cmp	r3, r2
 8103ac6:	d00e      	beq.n	8103ae6 <HAL_DMA_Init+0x38a>
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	4a33      	ldr	r2, [pc, #204]	; (8103b9c <HAL_DMA_Init+0x440>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d009      	beq.n	8103ae6 <HAL_DMA_Init+0x38a>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	4a32      	ldr	r2, [pc, #200]	; (8103ba0 <HAL_DMA_Init+0x444>)
 8103ad8:	4293      	cmp	r3, r2
 8103ada:	d004      	beq.n	8103ae6 <HAL_DMA_Init+0x38a>
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	4a30      	ldr	r2, [pc, #192]	; (8103ba4 <HAL_DMA_Init+0x448>)
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d101      	bne.n	8103aea <HAL_DMA_Init+0x38e>
 8103ae6:	2301      	movs	r3, #1
 8103ae8:	e000      	b.n	8103aec <HAL_DMA_Init+0x390>
 8103aea:	2300      	movs	r3, #0
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	f000 8095 	beq.w	8103c1c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	4a24      	ldr	r2, [pc, #144]	; (8103b88 <HAL_DMA_Init+0x42c>)
 8103af8:	4293      	cmp	r3, r2
 8103afa:	d021      	beq.n	8103b40 <HAL_DMA_Init+0x3e4>
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	4a22      	ldr	r2, [pc, #136]	; (8103b8c <HAL_DMA_Init+0x430>)
 8103b02:	4293      	cmp	r3, r2
 8103b04:	d01c      	beq.n	8103b40 <HAL_DMA_Init+0x3e4>
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	4a21      	ldr	r2, [pc, #132]	; (8103b90 <HAL_DMA_Init+0x434>)
 8103b0c:	4293      	cmp	r3, r2
 8103b0e:	d017      	beq.n	8103b40 <HAL_DMA_Init+0x3e4>
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	4a1f      	ldr	r2, [pc, #124]	; (8103b94 <HAL_DMA_Init+0x438>)
 8103b16:	4293      	cmp	r3, r2
 8103b18:	d012      	beq.n	8103b40 <HAL_DMA_Init+0x3e4>
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	681b      	ldr	r3, [r3, #0]
 8103b1e:	4a1e      	ldr	r2, [pc, #120]	; (8103b98 <HAL_DMA_Init+0x43c>)
 8103b20:	4293      	cmp	r3, r2
 8103b22:	d00d      	beq.n	8103b40 <HAL_DMA_Init+0x3e4>
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	4a1c      	ldr	r2, [pc, #112]	; (8103b9c <HAL_DMA_Init+0x440>)
 8103b2a:	4293      	cmp	r3, r2
 8103b2c:	d008      	beq.n	8103b40 <HAL_DMA_Init+0x3e4>
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	681b      	ldr	r3, [r3, #0]
 8103b32:	4a1b      	ldr	r2, [pc, #108]	; (8103ba0 <HAL_DMA_Init+0x444>)
 8103b34:	4293      	cmp	r3, r2
 8103b36:	d003      	beq.n	8103b40 <HAL_DMA_Init+0x3e4>
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	681b      	ldr	r3, [r3, #0]
 8103b3c:	4a19      	ldr	r2, [pc, #100]	; (8103ba4 <HAL_DMA_Init+0x448>)
 8103b3e:	4293      	cmp	r3, r2
 8103b40:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	2200      	movs	r2, #0
 8103b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	2202      	movs	r2, #2
 8103b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	681b      	ldr	r3, [r3, #0]
 8103b56:	681b      	ldr	r3, [r3, #0]
 8103b58:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103b5a:	697b      	ldr	r3, [r7, #20]
 8103b5c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8103b60:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8103b64:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	689b      	ldr	r3, [r3, #8]
 8103b6a:	2b40      	cmp	r3, #64	; 0x40
 8103b6c:	d01c      	beq.n	8103ba8 <HAL_DMA_Init+0x44c>
 8103b6e:	687b      	ldr	r3, [r7, #4]
 8103b70:	689b      	ldr	r3, [r3, #8]
 8103b72:	2b80      	cmp	r3, #128	; 0x80
 8103b74:	d102      	bne.n	8103b7c <HAL_DMA_Init+0x420>
 8103b76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103b7a:	e016      	b.n	8103baa <HAL_DMA_Init+0x44e>
 8103b7c:	2300      	movs	r3, #0
 8103b7e:	e014      	b.n	8103baa <HAL_DMA_Init+0x44e>
 8103b80:	fe10803f 	.word	0xfe10803f
 8103b84:	5c001000 	.word	0x5c001000
 8103b88:	58025408 	.word	0x58025408
 8103b8c:	5802541c 	.word	0x5802541c
 8103b90:	58025430 	.word	0x58025430
 8103b94:	58025444 	.word	0x58025444
 8103b98:	58025458 	.word	0x58025458
 8103b9c:	5802546c 	.word	0x5802546c
 8103ba0:	58025480 	.word	0x58025480
 8103ba4:	58025494 	.word	0x58025494
 8103ba8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103baa:	687a      	ldr	r2, [r7, #4]
 8103bac:	68d2      	ldr	r2, [r2, #12]
 8103bae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	691b      	ldr	r3, [r3, #16]
 8103bb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103bb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	695b      	ldr	r3, [r3, #20]
 8103bbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103bc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103bc2:	687b      	ldr	r3, [r7, #4]
 8103bc4:	699b      	ldr	r3, [r3, #24]
 8103bc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103bc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	69db      	ldr	r3, [r3, #28]
 8103bce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103bd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	6a1b      	ldr	r3, [r3, #32]
 8103bd6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103bd8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103bda:	697a      	ldr	r2, [r7, #20]
 8103bdc:	4313      	orrs	r3, r2
 8103bde:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	681b      	ldr	r3, [r3, #0]
 8103be4:	697a      	ldr	r2, [r7, #20]
 8103be6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	461a      	mov	r2, r3
 8103bee:	4b6e      	ldr	r3, [pc, #440]	; (8103da8 <HAL_DMA_Init+0x64c>)
 8103bf0:	4413      	add	r3, r2
 8103bf2:	4a6e      	ldr	r2, [pc, #440]	; (8103dac <HAL_DMA_Init+0x650>)
 8103bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8103bf8:	091b      	lsrs	r3, r3, #4
 8103bfa:	009a      	lsls	r2, r3, #2
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103c00:	6878      	ldr	r0, [r7, #4]
 8103c02:	f002 f9c3 	bl	8105f8c <DMA_CalcBaseAndBitshift>
 8103c06:	4603      	mov	r3, r0
 8103c08:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c0e:	f003 031f 	and.w	r3, r3, #31
 8103c12:	2201      	movs	r2, #1
 8103c14:	409a      	lsls	r2, r3
 8103c16:	68fb      	ldr	r3, [r7, #12]
 8103c18:	605a      	str	r2, [r3, #4]
 8103c1a:	e008      	b.n	8103c2e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	2240      	movs	r2, #64	; 0x40
 8103c20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	2203      	movs	r2, #3
 8103c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8103c2a:	2301      	movs	r3, #1
 8103c2c:	e0b7      	b.n	8103d9e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	681b      	ldr	r3, [r3, #0]
 8103c32:	4a5f      	ldr	r2, [pc, #380]	; (8103db0 <HAL_DMA_Init+0x654>)
 8103c34:	4293      	cmp	r3, r2
 8103c36:	d072      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	4a5d      	ldr	r2, [pc, #372]	; (8103db4 <HAL_DMA_Init+0x658>)
 8103c3e:	4293      	cmp	r3, r2
 8103c40:	d06d      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	681b      	ldr	r3, [r3, #0]
 8103c46:	4a5c      	ldr	r2, [pc, #368]	; (8103db8 <HAL_DMA_Init+0x65c>)
 8103c48:	4293      	cmp	r3, r2
 8103c4a:	d068      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	4a5a      	ldr	r2, [pc, #360]	; (8103dbc <HAL_DMA_Init+0x660>)
 8103c52:	4293      	cmp	r3, r2
 8103c54:	d063      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	4a59      	ldr	r2, [pc, #356]	; (8103dc0 <HAL_DMA_Init+0x664>)
 8103c5c:	4293      	cmp	r3, r2
 8103c5e:	d05e      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	681b      	ldr	r3, [r3, #0]
 8103c64:	4a57      	ldr	r2, [pc, #348]	; (8103dc4 <HAL_DMA_Init+0x668>)
 8103c66:	4293      	cmp	r3, r2
 8103c68:	d059      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	681b      	ldr	r3, [r3, #0]
 8103c6e:	4a56      	ldr	r2, [pc, #344]	; (8103dc8 <HAL_DMA_Init+0x66c>)
 8103c70:	4293      	cmp	r3, r2
 8103c72:	d054      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	4a54      	ldr	r2, [pc, #336]	; (8103dcc <HAL_DMA_Init+0x670>)
 8103c7a:	4293      	cmp	r3, r2
 8103c7c:	d04f      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	681b      	ldr	r3, [r3, #0]
 8103c82:	4a53      	ldr	r2, [pc, #332]	; (8103dd0 <HAL_DMA_Init+0x674>)
 8103c84:	4293      	cmp	r3, r2
 8103c86:	d04a      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	681b      	ldr	r3, [r3, #0]
 8103c8c:	4a51      	ldr	r2, [pc, #324]	; (8103dd4 <HAL_DMA_Init+0x678>)
 8103c8e:	4293      	cmp	r3, r2
 8103c90:	d045      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	681b      	ldr	r3, [r3, #0]
 8103c96:	4a50      	ldr	r2, [pc, #320]	; (8103dd8 <HAL_DMA_Init+0x67c>)
 8103c98:	4293      	cmp	r3, r2
 8103c9a:	d040      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	681b      	ldr	r3, [r3, #0]
 8103ca0:	4a4e      	ldr	r2, [pc, #312]	; (8103ddc <HAL_DMA_Init+0x680>)
 8103ca2:	4293      	cmp	r3, r2
 8103ca4:	d03b      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103ca6:	687b      	ldr	r3, [r7, #4]
 8103ca8:	681b      	ldr	r3, [r3, #0]
 8103caa:	4a4d      	ldr	r2, [pc, #308]	; (8103de0 <HAL_DMA_Init+0x684>)
 8103cac:	4293      	cmp	r3, r2
 8103cae:	d036      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	4a4b      	ldr	r2, [pc, #300]	; (8103de4 <HAL_DMA_Init+0x688>)
 8103cb6:	4293      	cmp	r3, r2
 8103cb8:	d031      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103cba:	687b      	ldr	r3, [r7, #4]
 8103cbc:	681b      	ldr	r3, [r3, #0]
 8103cbe:	4a4a      	ldr	r2, [pc, #296]	; (8103de8 <HAL_DMA_Init+0x68c>)
 8103cc0:	4293      	cmp	r3, r2
 8103cc2:	d02c      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	681b      	ldr	r3, [r3, #0]
 8103cc8:	4a48      	ldr	r2, [pc, #288]	; (8103dec <HAL_DMA_Init+0x690>)
 8103cca:	4293      	cmp	r3, r2
 8103ccc:	d027      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	681b      	ldr	r3, [r3, #0]
 8103cd2:	4a47      	ldr	r2, [pc, #284]	; (8103df0 <HAL_DMA_Init+0x694>)
 8103cd4:	4293      	cmp	r3, r2
 8103cd6:	d022      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	4a45      	ldr	r2, [pc, #276]	; (8103df4 <HAL_DMA_Init+0x698>)
 8103cde:	4293      	cmp	r3, r2
 8103ce0:	d01d      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103ce2:	687b      	ldr	r3, [r7, #4]
 8103ce4:	681b      	ldr	r3, [r3, #0]
 8103ce6:	4a44      	ldr	r2, [pc, #272]	; (8103df8 <HAL_DMA_Init+0x69c>)
 8103ce8:	4293      	cmp	r3, r2
 8103cea:	d018      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	681b      	ldr	r3, [r3, #0]
 8103cf0:	4a42      	ldr	r2, [pc, #264]	; (8103dfc <HAL_DMA_Init+0x6a0>)
 8103cf2:	4293      	cmp	r3, r2
 8103cf4:	d013      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	681b      	ldr	r3, [r3, #0]
 8103cfa:	4a41      	ldr	r2, [pc, #260]	; (8103e00 <HAL_DMA_Init+0x6a4>)
 8103cfc:	4293      	cmp	r3, r2
 8103cfe:	d00e      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	681b      	ldr	r3, [r3, #0]
 8103d04:	4a3f      	ldr	r2, [pc, #252]	; (8103e04 <HAL_DMA_Init+0x6a8>)
 8103d06:	4293      	cmp	r3, r2
 8103d08:	d009      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	681b      	ldr	r3, [r3, #0]
 8103d0e:	4a3e      	ldr	r2, [pc, #248]	; (8103e08 <HAL_DMA_Init+0x6ac>)
 8103d10:	4293      	cmp	r3, r2
 8103d12:	d004      	beq.n	8103d1e <HAL_DMA_Init+0x5c2>
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	4a3c      	ldr	r2, [pc, #240]	; (8103e0c <HAL_DMA_Init+0x6b0>)
 8103d1a:	4293      	cmp	r3, r2
 8103d1c:	d101      	bne.n	8103d22 <HAL_DMA_Init+0x5c6>
 8103d1e:	2301      	movs	r3, #1
 8103d20:	e000      	b.n	8103d24 <HAL_DMA_Init+0x5c8>
 8103d22:	2300      	movs	r3, #0
 8103d24:	2b00      	cmp	r3, #0
 8103d26:	d032      	beq.n	8103d8e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103d28:	6878      	ldr	r0, [r7, #4]
 8103d2a:	f002 fa5d 	bl	81061e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	689b      	ldr	r3, [r3, #8]
 8103d32:	2b80      	cmp	r3, #128	; 0x80
 8103d34:	d102      	bne.n	8103d3c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	2200      	movs	r2, #0
 8103d3a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	685a      	ldr	r2, [r3, #4]
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103d44:	b2d2      	uxtb	r2, r2
 8103d46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103d4c:	687a      	ldr	r2, [r7, #4]
 8103d4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103d50:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	685b      	ldr	r3, [r3, #4]
 8103d56:	2b00      	cmp	r3, #0
 8103d58:	d010      	beq.n	8103d7c <HAL_DMA_Init+0x620>
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	685b      	ldr	r3, [r3, #4]
 8103d5e:	2b08      	cmp	r3, #8
 8103d60:	d80c      	bhi.n	8103d7c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8103d62:	6878      	ldr	r0, [r7, #4]
 8103d64:	f002 fada 	bl	810631c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103d6c:	2200      	movs	r2, #0
 8103d6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103d74:	687a      	ldr	r2, [r7, #4]
 8103d76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103d78:	605a      	str	r2, [r3, #4]
 8103d7a:	e008      	b.n	8103d8e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	2200      	movs	r2, #0
 8103d80:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	2200      	movs	r2, #0
 8103d86:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	2200      	movs	r2, #0
 8103d8c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	2200      	movs	r2, #0
 8103d92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	2201      	movs	r2, #1
 8103d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8103d9c:	2300      	movs	r3, #0
}
 8103d9e:	4618      	mov	r0, r3
 8103da0:	3718      	adds	r7, #24
 8103da2:	46bd      	mov	sp, r7
 8103da4:	bd80      	pop	{r7, pc}
 8103da6:	bf00      	nop
 8103da8:	a7fdabf8 	.word	0xa7fdabf8
 8103dac:	cccccccd 	.word	0xcccccccd
 8103db0:	40020010 	.word	0x40020010
 8103db4:	40020028 	.word	0x40020028
 8103db8:	40020040 	.word	0x40020040
 8103dbc:	40020058 	.word	0x40020058
 8103dc0:	40020070 	.word	0x40020070
 8103dc4:	40020088 	.word	0x40020088
 8103dc8:	400200a0 	.word	0x400200a0
 8103dcc:	400200b8 	.word	0x400200b8
 8103dd0:	40020410 	.word	0x40020410
 8103dd4:	40020428 	.word	0x40020428
 8103dd8:	40020440 	.word	0x40020440
 8103ddc:	40020458 	.word	0x40020458
 8103de0:	40020470 	.word	0x40020470
 8103de4:	40020488 	.word	0x40020488
 8103de8:	400204a0 	.word	0x400204a0
 8103dec:	400204b8 	.word	0x400204b8
 8103df0:	58025408 	.word	0x58025408
 8103df4:	5802541c 	.word	0x5802541c
 8103df8:	58025430 	.word	0x58025430
 8103dfc:	58025444 	.word	0x58025444
 8103e00:	58025458 	.word	0x58025458
 8103e04:	5802546c 	.word	0x5802546c
 8103e08:	58025480 	.word	0x58025480
 8103e0c:	58025494 	.word	0x58025494

08103e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103e10:	b580      	push	{r7, lr}
 8103e12:	b086      	sub	sp, #24
 8103e14:	af00      	add	r7, sp, #0
 8103e16:	60f8      	str	r0, [r7, #12]
 8103e18:	60b9      	str	r1, [r7, #8]
 8103e1a:	607a      	str	r2, [r7, #4]
 8103e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8103e1e:	2300      	movs	r3, #0
 8103e20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103e22:	68fb      	ldr	r3, [r7, #12]
 8103e24:	2b00      	cmp	r3, #0
 8103e26:	d101      	bne.n	8103e2c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8103e28:	2301      	movs	r3, #1
 8103e2a:	e226      	b.n	810427a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8103e2c:	68fb      	ldr	r3, [r7, #12]
 8103e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8103e32:	2b01      	cmp	r3, #1
 8103e34:	d101      	bne.n	8103e3a <HAL_DMA_Start_IT+0x2a>
 8103e36:	2302      	movs	r3, #2
 8103e38:	e21f      	b.n	810427a <HAL_DMA_Start_IT+0x46a>
 8103e3a:	68fb      	ldr	r3, [r7, #12]
 8103e3c:	2201      	movs	r2, #1
 8103e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8103e42:	68fb      	ldr	r3, [r7, #12]
 8103e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103e48:	b2db      	uxtb	r3, r3
 8103e4a:	2b01      	cmp	r3, #1
 8103e4c:	f040 820a 	bne.w	8104264 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103e50:	68fb      	ldr	r3, [r7, #12]
 8103e52:	2202      	movs	r2, #2
 8103e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103e58:	68fb      	ldr	r3, [r7, #12]
 8103e5a:	2200      	movs	r2, #0
 8103e5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103e5e:	68fb      	ldr	r3, [r7, #12]
 8103e60:	681b      	ldr	r3, [r3, #0]
 8103e62:	4a68      	ldr	r2, [pc, #416]	; (8104004 <HAL_DMA_Start_IT+0x1f4>)
 8103e64:	4293      	cmp	r3, r2
 8103e66:	d04a      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103e68:	68fb      	ldr	r3, [r7, #12]
 8103e6a:	681b      	ldr	r3, [r3, #0]
 8103e6c:	4a66      	ldr	r2, [pc, #408]	; (8104008 <HAL_DMA_Start_IT+0x1f8>)
 8103e6e:	4293      	cmp	r3, r2
 8103e70:	d045      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103e72:	68fb      	ldr	r3, [r7, #12]
 8103e74:	681b      	ldr	r3, [r3, #0]
 8103e76:	4a65      	ldr	r2, [pc, #404]	; (810400c <HAL_DMA_Start_IT+0x1fc>)
 8103e78:	4293      	cmp	r3, r2
 8103e7a:	d040      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	4a63      	ldr	r2, [pc, #396]	; (8104010 <HAL_DMA_Start_IT+0x200>)
 8103e82:	4293      	cmp	r3, r2
 8103e84:	d03b      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103e86:	68fb      	ldr	r3, [r7, #12]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	4a62      	ldr	r2, [pc, #392]	; (8104014 <HAL_DMA_Start_IT+0x204>)
 8103e8c:	4293      	cmp	r3, r2
 8103e8e:	d036      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103e90:	68fb      	ldr	r3, [r7, #12]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	4a60      	ldr	r2, [pc, #384]	; (8104018 <HAL_DMA_Start_IT+0x208>)
 8103e96:	4293      	cmp	r3, r2
 8103e98:	d031      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103e9a:	68fb      	ldr	r3, [r7, #12]
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	4a5f      	ldr	r2, [pc, #380]	; (810401c <HAL_DMA_Start_IT+0x20c>)
 8103ea0:	4293      	cmp	r3, r2
 8103ea2:	d02c      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	4a5d      	ldr	r2, [pc, #372]	; (8104020 <HAL_DMA_Start_IT+0x210>)
 8103eaa:	4293      	cmp	r3, r2
 8103eac:	d027      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103eae:	68fb      	ldr	r3, [r7, #12]
 8103eb0:	681b      	ldr	r3, [r3, #0]
 8103eb2:	4a5c      	ldr	r2, [pc, #368]	; (8104024 <HAL_DMA_Start_IT+0x214>)
 8103eb4:	4293      	cmp	r3, r2
 8103eb6:	d022      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103eb8:	68fb      	ldr	r3, [r7, #12]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	4a5a      	ldr	r2, [pc, #360]	; (8104028 <HAL_DMA_Start_IT+0x218>)
 8103ebe:	4293      	cmp	r3, r2
 8103ec0:	d01d      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103ec2:	68fb      	ldr	r3, [r7, #12]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	4a59      	ldr	r2, [pc, #356]	; (810402c <HAL_DMA_Start_IT+0x21c>)
 8103ec8:	4293      	cmp	r3, r2
 8103eca:	d018      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	681b      	ldr	r3, [r3, #0]
 8103ed0:	4a57      	ldr	r2, [pc, #348]	; (8104030 <HAL_DMA_Start_IT+0x220>)
 8103ed2:	4293      	cmp	r3, r2
 8103ed4:	d013      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103ed6:	68fb      	ldr	r3, [r7, #12]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	4a56      	ldr	r2, [pc, #344]	; (8104034 <HAL_DMA_Start_IT+0x224>)
 8103edc:	4293      	cmp	r3, r2
 8103ede:	d00e      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103ee0:	68fb      	ldr	r3, [r7, #12]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	4a54      	ldr	r2, [pc, #336]	; (8104038 <HAL_DMA_Start_IT+0x228>)
 8103ee6:	4293      	cmp	r3, r2
 8103ee8:	d009      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103eea:	68fb      	ldr	r3, [r7, #12]
 8103eec:	681b      	ldr	r3, [r3, #0]
 8103eee:	4a53      	ldr	r2, [pc, #332]	; (810403c <HAL_DMA_Start_IT+0x22c>)
 8103ef0:	4293      	cmp	r3, r2
 8103ef2:	d004      	beq.n	8103efe <HAL_DMA_Start_IT+0xee>
 8103ef4:	68fb      	ldr	r3, [r7, #12]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	4a51      	ldr	r2, [pc, #324]	; (8104040 <HAL_DMA_Start_IT+0x230>)
 8103efa:	4293      	cmp	r3, r2
 8103efc:	d108      	bne.n	8103f10 <HAL_DMA_Start_IT+0x100>
 8103efe:	68fb      	ldr	r3, [r7, #12]
 8103f00:	681b      	ldr	r3, [r3, #0]
 8103f02:	681a      	ldr	r2, [r3, #0]
 8103f04:	68fb      	ldr	r3, [r7, #12]
 8103f06:	681b      	ldr	r3, [r3, #0]
 8103f08:	f022 0201 	bic.w	r2, r2, #1
 8103f0c:	601a      	str	r2, [r3, #0]
 8103f0e:	e007      	b.n	8103f20 <HAL_DMA_Start_IT+0x110>
 8103f10:	68fb      	ldr	r3, [r7, #12]
 8103f12:	681b      	ldr	r3, [r3, #0]
 8103f14:	681a      	ldr	r2, [r3, #0]
 8103f16:	68fb      	ldr	r3, [r7, #12]
 8103f18:	681b      	ldr	r3, [r3, #0]
 8103f1a:	f022 0201 	bic.w	r2, r2, #1
 8103f1e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8103f20:	683b      	ldr	r3, [r7, #0]
 8103f22:	687a      	ldr	r2, [r7, #4]
 8103f24:	68b9      	ldr	r1, [r7, #8]
 8103f26:	68f8      	ldr	r0, [r7, #12]
 8103f28:	f001 fe84 	bl	8105c34 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103f2c:	68fb      	ldr	r3, [r7, #12]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	4a34      	ldr	r2, [pc, #208]	; (8104004 <HAL_DMA_Start_IT+0x1f4>)
 8103f32:	4293      	cmp	r3, r2
 8103f34:	d04a      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f36:	68fb      	ldr	r3, [r7, #12]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	4a33      	ldr	r2, [pc, #204]	; (8104008 <HAL_DMA_Start_IT+0x1f8>)
 8103f3c:	4293      	cmp	r3, r2
 8103f3e:	d045      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f40:	68fb      	ldr	r3, [r7, #12]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	4a31      	ldr	r2, [pc, #196]	; (810400c <HAL_DMA_Start_IT+0x1fc>)
 8103f46:	4293      	cmp	r3, r2
 8103f48:	d040      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f4a:	68fb      	ldr	r3, [r7, #12]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	4a30      	ldr	r2, [pc, #192]	; (8104010 <HAL_DMA_Start_IT+0x200>)
 8103f50:	4293      	cmp	r3, r2
 8103f52:	d03b      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f54:	68fb      	ldr	r3, [r7, #12]
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	4a2e      	ldr	r2, [pc, #184]	; (8104014 <HAL_DMA_Start_IT+0x204>)
 8103f5a:	4293      	cmp	r3, r2
 8103f5c:	d036      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f5e:	68fb      	ldr	r3, [r7, #12]
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	4a2d      	ldr	r2, [pc, #180]	; (8104018 <HAL_DMA_Start_IT+0x208>)
 8103f64:	4293      	cmp	r3, r2
 8103f66:	d031      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f68:	68fb      	ldr	r3, [r7, #12]
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	4a2b      	ldr	r2, [pc, #172]	; (810401c <HAL_DMA_Start_IT+0x20c>)
 8103f6e:	4293      	cmp	r3, r2
 8103f70:	d02c      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f72:	68fb      	ldr	r3, [r7, #12]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	4a2a      	ldr	r2, [pc, #168]	; (8104020 <HAL_DMA_Start_IT+0x210>)
 8103f78:	4293      	cmp	r3, r2
 8103f7a:	d027      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f7c:	68fb      	ldr	r3, [r7, #12]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	4a28      	ldr	r2, [pc, #160]	; (8104024 <HAL_DMA_Start_IT+0x214>)
 8103f82:	4293      	cmp	r3, r2
 8103f84:	d022      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f86:	68fb      	ldr	r3, [r7, #12]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	4a27      	ldr	r2, [pc, #156]	; (8104028 <HAL_DMA_Start_IT+0x218>)
 8103f8c:	4293      	cmp	r3, r2
 8103f8e:	d01d      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f90:	68fb      	ldr	r3, [r7, #12]
 8103f92:	681b      	ldr	r3, [r3, #0]
 8103f94:	4a25      	ldr	r2, [pc, #148]	; (810402c <HAL_DMA_Start_IT+0x21c>)
 8103f96:	4293      	cmp	r3, r2
 8103f98:	d018      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103f9a:	68fb      	ldr	r3, [r7, #12]
 8103f9c:	681b      	ldr	r3, [r3, #0]
 8103f9e:	4a24      	ldr	r2, [pc, #144]	; (8104030 <HAL_DMA_Start_IT+0x220>)
 8103fa0:	4293      	cmp	r3, r2
 8103fa2:	d013      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103fa4:	68fb      	ldr	r3, [r7, #12]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	4a22      	ldr	r2, [pc, #136]	; (8104034 <HAL_DMA_Start_IT+0x224>)
 8103faa:	4293      	cmp	r3, r2
 8103fac:	d00e      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103fae:	68fb      	ldr	r3, [r7, #12]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	4a21      	ldr	r2, [pc, #132]	; (8104038 <HAL_DMA_Start_IT+0x228>)
 8103fb4:	4293      	cmp	r3, r2
 8103fb6:	d009      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103fb8:	68fb      	ldr	r3, [r7, #12]
 8103fba:	681b      	ldr	r3, [r3, #0]
 8103fbc:	4a1f      	ldr	r2, [pc, #124]	; (810403c <HAL_DMA_Start_IT+0x22c>)
 8103fbe:	4293      	cmp	r3, r2
 8103fc0:	d004      	beq.n	8103fcc <HAL_DMA_Start_IT+0x1bc>
 8103fc2:	68fb      	ldr	r3, [r7, #12]
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	4a1e      	ldr	r2, [pc, #120]	; (8104040 <HAL_DMA_Start_IT+0x230>)
 8103fc8:	4293      	cmp	r3, r2
 8103fca:	d101      	bne.n	8103fd0 <HAL_DMA_Start_IT+0x1c0>
 8103fcc:	2301      	movs	r3, #1
 8103fce:	e000      	b.n	8103fd2 <HAL_DMA_Start_IT+0x1c2>
 8103fd0:	2300      	movs	r3, #0
 8103fd2:	2b00      	cmp	r3, #0
 8103fd4:	d036      	beq.n	8104044 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103fd6:	68fb      	ldr	r3, [r7, #12]
 8103fd8:	681b      	ldr	r3, [r3, #0]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	f023 021e 	bic.w	r2, r3, #30
 8103fe0:	68fb      	ldr	r3, [r7, #12]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	f042 0216 	orr.w	r2, r2, #22
 8103fe8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8103fea:	68fb      	ldr	r3, [r7, #12]
 8103fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fee:	2b00      	cmp	r3, #0
 8103ff0:	d03e      	beq.n	8104070 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103ff2:	68fb      	ldr	r3, [r7, #12]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	681a      	ldr	r2, [r3, #0]
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f042 0208 	orr.w	r2, r2, #8
 8104000:	601a      	str	r2, [r3, #0]
 8104002:	e035      	b.n	8104070 <HAL_DMA_Start_IT+0x260>
 8104004:	40020010 	.word	0x40020010
 8104008:	40020028 	.word	0x40020028
 810400c:	40020040 	.word	0x40020040
 8104010:	40020058 	.word	0x40020058
 8104014:	40020070 	.word	0x40020070
 8104018:	40020088 	.word	0x40020088
 810401c:	400200a0 	.word	0x400200a0
 8104020:	400200b8 	.word	0x400200b8
 8104024:	40020410 	.word	0x40020410
 8104028:	40020428 	.word	0x40020428
 810402c:	40020440 	.word	0x40020440
 8104030:	40020458 	.word	0x40020458
 8104034:	40020470 	.word	0x40020470
 8104038:	40020488 	.word	0x40020488
 810403c:	400204a0 	.word	0x400204a0
 8104040:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104044:	68fb      	ldr	r3, [r7, #12]
 8104046:	681b      	ldr	r3, [r3, #0]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	f023 020e 	bic.w	r2, r3, #14
 810404e:	68fb      	ldr	r3, [r7, #12]
 8104050:	681b      	ldr	r3, [r3, #0]
 8104052:	f042 020a 	orr.w	r2, r2, #10
 8104056:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104058:	68fb      	ldr	r3, [r7, #12]
 810405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810405c:	2b00      	cmp	r3, #0
 810405e:	d007      	beq.n	8104070 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8104060:	68fb      	ldr	r3, [r7, #12]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	681a      	ldr	r2, [r3, #0]
 8104066:	68fb      	ldr	r3, [r7, #12]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	f042 0204 	orr.w	r2, r2, #4
 810406e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104070:	68fb      	ldr	r3, [r7, #12]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	4a83      	ldr	r2, [pc, #524]	; (8104284 <HAL_DMA_Start_IT+0x474>)
 8104076:	4293      	cmp	r3, r2
 8104078:	d072      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 810407a:	68fb      	ldr	r3, [r7, #12]
 810407c:	681b      	ldr	r3, [r3, #0]
 810407e:	4a82      	ldr	r2, [pc, #520]	; (8104288 <HAL_DMA_Start_IT+0x478>)
 8104080:	4293      	cmp	r3, r2
 8104082:	d06d      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 8104084:	68fb      	ldr	r3, [r7, #12]
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	4a80      	ldr	r2, [pc, #512]	; (810428c <HAL_DMA_Start_IT+0x47c>)
 810408a:	4293      	cmp	r3, r2
 810408c:	d068      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 810408e:	68fb      	ldr	r3, [r7, #12]
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	4a7f      	ldr	r2, [pc, #508]	; (8104290 <HAL_DMA_Start_IT+0x480>)
 8104094:	4293      	cmp	r3, r2
 8104096:	d063      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 8104098:	68fb      	ldr	r3, [r7, #12]
 810409a:	681b      	ldr	r3, [r3, #0]
 810409c:	4a7d      	ldr	r2, [pc, #500]	; (8104294 <HAL_DMA_Start_IT+0x484>)
 810409e:	4293      	cmp	r3, r2
 81040a0:	d05e      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040a2:	68fb      	ldr	r3, [r7, #12]
 81040a4:	681b      	ldr	r3, [r3, #0]
 81040a6:	4a7c      	ldr	r2, [pc, #496]	; (8104298 <HAL_DMA_Start_IT+0x488>)
 81040a8:	4293      	cmp	r3, r2
 81040aa:	d059      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040ac:	68fb      	ldr	r3, [r7, #12]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	4a7a      	ldr	r2, [pc, #488]	; (810429c <HAL_DMA_Start_IT+0x48c>)
 81040b2:	4293      	cmp	r3, r2
 81040b4:	d054      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040b6:	68fb      	ldr	r3, [r7, #12]
 81040b8:	681b      	ldr	r3, [r3, #0]
 81040ba:	4a79      	ldr	r2, [pc, #484]	; (81042a0 <HAL_DMA_Start_IT+0x490>)
 81040bc:	4293      	cmp	r3, r2
 81040be:	d04f      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040c0:	68fb      	ldr	r3, [r7, #12]
 81040c2:	681b      	ldr	r3, [r3, #0]
 81040c4:	4a77      	ldr	r2, [pc, #476]	; (81042a4 <HAL_DMA_Start_IT+0x494>)
 81040c6:	4293      	cmp	r3, r2
 81040c8:	d04a      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040ca:	68fb      	ldr	r3, [r7, #12]
 81040cc:	681b      	ldr	r3, [r3, #0]
 81040ce:	4a76      	ldr	r2, [pc, #472]	; (81042a8 <HAL_DMA_Start_IT+0x498>)
 81040d0:	4293      	cmp	r3, r2
 81040d2:	d045      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040d4:	68fb      	ldr	r3, [r7, #12]
 81040d6:	681b      	ldr	r3, [r3, #0]
 81040d8:	4a74      	ldr	r2, [pc, #464]	; (81042ac <HAL_DMA_Start_IT+0x49c>)
 81040da:	4293      	cmp	r3, r2
 81040dc:	d040      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040de:	68fb      	ldr	r3, [r7, #12]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	4a73      	ldr	r2, [pc, #460]	; (81042b0 <HAL_DMA_Start_IT+0x4a0>)
 81040e4:	4293      	cmp	r3, r2
 81040e6:	d03b      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040e8:	68fb      	ldr	r3, [r7, #12]
 81040ea:	681b      	ldr	r3, [r3, #0]
 81040ec:	4a71      	ldr	r2, [pc, #452]	; (81042b4 <HAL_DMA_Start_IT+0x4a4>)
 81040ee:	4293      	cmp	r3, r2
 81040f0:	d036      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040f2:	68fb      	ldr	r3, [r7, #12]
 81040f4:	681b      	ldr	r3, [r3, #0]
 81040f6:	4a70      	ldr	r2, [pc, #448]	; (81042b8 <HAL_DMA_Start_IT+0x4a8>)
 81040f8:	4293      	cmp	r3, r2
 81040fa:	d031      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 81040fc:	68fb      	ldr	r3, [r7, #12]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	4a6e      	ldr	r2, [pc, #440]	; (81042bc <HAL_DMA_Start_IT+0x4ac>)
 8104102:	4293      	cmp	r3, r2
 8104104:	d02c      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 8104106:	68fb      	ldr	r3, [r7, #12]
 8104108:	681b      	ldr	r3, [r3, #0]
 810410a:	4a6d      	ldr	r2, [pc, #436]	; (81042c0 <HAL_DMA_Start_IT+0x4b0>)
 810410c:	4293      	cmp	r3, r2
 810410e:	d027      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 8104110:	68fb      	ldr	r3, [r7, #12]
 8104112:	681b      	ldr	r3, [r3, #0]
 8104114:	4a6b      	ldr	r2, [pc, #428]	; (81042c4 <HAL_DMA_Start_IT+0x4b4>)
 8104116:	4293      	cmp	r3, r2
 8104118:	d022      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 810411a:	68fb      	ldr	r3, [r7, #12]
 810411c:	681b      	ldr	r3, [r3, #0]
 810411e:	4a6a      	ldr	r2, [pc, #424]	; (81042c8 <HAL_DMA_Start_IT+0x4b8>)
 8104120:	4293      	cmp	r3, r2
 8104122:	d01d      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 8104124:	68fb      	ldr	r3, [r7, #12]
 8104126:	681b      	ldr	r3, [r3, #0]
 8104128:	4a68      	ldr	r2, [pc, #416]	; (81042cc <HAL_DMA_Start_IT+0x4bc>)
 810412a:	4293      	cmp	r3, r2
 810412c:	d018      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 810412e:	68fb      	ldr	r3, [r7, #12]
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	4a67      	ldr	r2, [pc, #412]	; (81042d0 <HAL_DMA_Start_IT+0x4c0>)
 8104134:	4293      	cmp	r3, r2
 8104136:	d013      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 8104138:	68fb      	ldr	r3, [r7, #12]
 810413a:	681b      	ldr	r3, [r3, #0]
 810413c:	4a65      	ldr	r2, [pc, #404]	; (81042d4 <HAL_DMA_Start_IT+0x4c4>)
 810413e:	4293      	cmp	r3, r2
 8104140:	d00e      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	4a64      	ldr	r2, [pc, #400]	; (81042d8 <HAL_DMA_Start_IT+0x4c8>)
 8104148:	4293      	cmp	r3, r2
 810414a:	d009      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 810414c:	68fb      	ldr	r3, [r7, #12]
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	4a62      	ldr	r2, [pc, #392]	; (81042dc <HAL_DMA_Start_IT+0x4cc>)
 8104152:	4293      	cmp	r3, r2
 8104154:	d004      	beq.n	8104160 <HAL_DMA_Start_IT+0x350>
 8104156:	68fb      	ldr	r3, [r7, #12]
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	4a61      	ldr	r2, [pc, #388]	; (81042e0 <HAL_DMA_Start_IT+0x4d0>)
 810415c:	4293      	cmp	r3, r2
 810415e:	d101      	bne.n	8104164 <HAL_DMA_Start_IT+0x354>
 8104160:	2301      	movs	r3, #1
 8104162:	e000      	b.n	8104166 <HAL_DMA_Start_IT+0x356>
 8104164:	2300      	movs	r3, #0
 8104166:	2b00      	cmp	r3, #0
 8104168:	d01a      	beq.n	81041a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 810416a:	68fb      	ldr	r3, [r7, #12]
 810416c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104174:	2b00      	cmp	r3, #0
 8104176:	d007      	beq.n	8104188 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8104178:	68fb      	ldr	r3, [r7, #12]
 810417a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810417c:	681a      	ldr	r2, [r3, #0]
 810417e:	68fb      	ldr	r3, [r7, #12]
 8104180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104186:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104188:	68fb      	ldr	r3, [r7, #12]
 810418a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810418c:	2b00      	cmp	r3, #0
 810418e:	d007      	beq.n	81041a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104194:	681a      	ldr	r2, [r3, #0]
 8104196:	68fb      	ldr	r3, [r7, #12]
 8104198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810419a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810419e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 81041a0:	68fb      	ldr	r3, [r7, #12]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	4a37      	ldr	r2, [pc, #220]	; (8104284 <HAL_DMA_Start_IT+0x474>)
 81041a6:	4293      	cmp	r3, r2
 81041a8:	d04a      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 81041aa:	68fb      	ldr	r3, [r7, #12]
 81041ac:	681b      	ldr	r3, [r3, #0]
 81041ae:	4a36      	ldr	r2, [pc, #216]	; (8104288 <HAL_DMA_Start_IT+0x478>)
 81041b0:	4293      	cmp	r3, r2
 81041b2:	d045      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 81041b4:	68fb      	ldr	r3, [r7, #12]
 81041b6:	681b      	ldr	r3, [r3, #0]
 81041b8:	4a34      	ldr	r2, [pc, #208]	; (810428c <HAL_DMA_Start_IT+0x47c>)
 81041ba:	4293      	cmp	r3, r2
 81041bc:	d040      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 81041be:	68fb      	ldr	r3, [r7, #12]
 81041c0:	681b      	ldr	r3, [r3, #0]
 81041c2:	4a33      	ldr	r2, [pc, #204]	; (8104290 <HAL_DMA_Start_IT+0x480>)
 81041c4:	4293      	cmp	r3, r2
 81041c6:	d03b      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 81041c8:	68fb      	ldr	r3, [r7, #12]
 81041ca:	681b      	ldr	r3, [r3, #0]
 81041cc:	4a31      	ldr	r2, [pc, #196]	; (8104294 <HAL_DMA_Start_IT+0x484>)
 81041ce:	4293      	cmp	r3, r2
 81041d0:	d036      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 81041d2:	68fb      	ldr	r3, [r7, #12]
 81041d4:	681b      	ldr	r3, [r3, #0]
 81041d6:	4a30      	ldr	r2, [pc, #192]	; (8104298 <HAL_DMA_Start_IT+0x488>)
 81041d8:	4293      	cmp	r3, r2
 81041da:	d031      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 81041dc:	68fb      	ldr	r3, [r7, #12]
 81041de:	681b      	ldr	r3, [r3, #0]
 81041e0:	4a2e      	ldr	r2, [pc, #184]	; (810429c <HAL_DMA_Start_IT+0x48c>)
 81041e2:	4293      	cmp	r3, r2
 81041e4:	d02c      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 81041e6:	68fb      	ldr	r3, [r7, #12]
 81041e8:	681b      	ldr	r3, [r3, #0]
 81041ea:	4a2d      	ldr	r2, [pc, #180]	; (81042a0 <HAL_DMA_Start_IT+0x490>)
 81041ec:	4293      	cmp	r3, r2
 81041ee:	d027      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 81041f0:	68fb      	ldr	r3, [r7, #12]
 81041f2:	681b      	ldr	r3, [r3, #0]
 81041f4:	4a2b      	ldr	r2, [pc, #172]	; (81042a4 <HAL_DMA_Start_IT+0x494>)
 81041f6:	4293      	cmp	r3, r2
 81041f8:	d022      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 81041fa:	68fb      	ldr	r3, [r7, #12]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	4a2a      	ldr	r2, [pc, #168]	; (81042a8 <HAL_DMA_Start_IT+0x498>)
 8104200:	4293      	cmp	r3, r2
 8104202:	d01d      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 8104204:	68fb      	ldr	r3, [r7, #12]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	4a28      	ldr	r2, [pc, #160]	; (81042ac <HAL_DMA_Start_IT+0x49c>)
 810420a:	4293      	cmp	r3, r2
 810420c:	d018      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 810420e:	68fb      	ldr	r3, [r7, #12]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	4a27      	ldr	r2, [pc, #156]	; (81042b0 <HAL_DMA_Start_IT+0x4a0>)
 8104214:	4293      	cmp	r3, r2
 8104216:	d013      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	681b      	ldr	r3, [r3, #0]
 810421c:	4a25      	ldr	r2, [pc, #148]	; (81042b4 <HAL_DMA_Start_IT+0x4a4>)
 810421e:	4293      	cmp	r3, r2
 8104220:	d00e      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 8104222:	68fb      	ldr	r3, [r7, #12]
 8104224:	681b      	ldr	r3, [r3, #0]
 8104226:	4a24      	ldr	r2, [pc, #144]	; (81042b8 <HAL_DMA_Start_IT+0x4a8>)
 8104228:	4293      	cmp	r3, r2
 810422a:	d009      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	4a22      	ldr	r2, [pc, #136]	; (81042bc <HAL_DMA_Start_IT+0x4ac>)
 8104232:	4293      	cmp	r3, r2
 8104234:	d004      	beq.n	8104240 <HAL_DMA_Start_IT+0x430>
 8104236:	68fb      	ldr	r3, [r7, #12]
 8104238:	681b      	ldr	r3, [r3, #0]
 810423a:	4a21      	ldr	r2, [pc, #132]	; (81042c0 <HAL_DMA_Start_IT+0x4b0>)
 810423c:	4293      	cmp	r3, r2
 810423e:	d108      	bne.n	8104252 <HAL_DMA_Start_IT+0x442>
 8104240:	68fb      	ldr	r3, [r7, #12]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	681a      	ldr	r2, [r3, #0]
 8104246:	68fb      	ldr	r3, [r7, #12]
 8104248:	681b      	ldr	r3, [r3, #0]
 810424a:	f042 0201 	orr.w	r2, r2, #1
 810424e:	601a      	str	r2, [r3, #0]
 8104250:	e012      	b.n	8104278 <HAL_DMA_Start_IT+0x468>
 8104252:	68fb      	ldr	r3, [r7, #12]
 8104254:	681b      	ldr	r3, [r3, #0]
 8104256:	681a      	ldr	r2, [r3, #0]
 8104258:	68fb      	ldr	r3, [r7, #12]
 810425a:	681b      	ldr	r3, [r3, #0]
 810425c:	f042 0201 	orr.w	r2, r2, #1
 8104260:	601a      	str	r2, [r3, #0]
 8104262:	e009      	b.n	8104278 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104264:	68fb      	ldr	r3, [r7, #12]
 8104266:	2200      	movs	r2, #0
 8104268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 810426c:	68fb      	ldr	r3, [r7, #12]
 810426e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104272:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8104274:	2301      	movs	r3, #1
 8104276:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104278:	7dfb      	ldrb	r3, [r7, #23]
}
 810427a:	4618      	mov	r0, r3
 810427c:	3718      	adds	r7, #24
 810427e:	46bd      	mov	sp, r7
 8104280:	bd80      	pop	{r7, pc}
 8104282:	bf00      	nop
 8104284:	40020010 	.word	0x40020010
 8104288:	40020028 	.word	0x40020028
 810428c:	40020040 	.word	0x40020040
 8104290:	40020058 	.word	0x40020058
 8104294:	40020070 	.word	0x40020070
 8104298:	40020088 	.word	0x40020088
 810429c:	400200a0 	.word	0x400200a0
 81042a0:	400200b8 	.word	0x400200b8
 81042a4:	40020410 	.word	0x40020410
 81042a8:	40020428 	.word	0x40020428
 81042ac:	40020440 	.word	0x40020440
 81042b0:	40020458 	.word	0x40020458
 81042b4:	40020470 	.word	0x40020470
 81042b8:	40020488 	.word	0x40020488
 81042bc:	400204a0 	.word	0x400204a0
 81042c0:	400204b8 	.word	0x400204b8
 81042c4:	58025408 	.word	0x58025408
 81042c8:	5802541c 	.word	0x5802541c
 81042cc:	58025430 	.word	0x58025430
 81042d0:	58025444 	.word	0x58025444
 81042d4:	58025458 	.word	0x58025458
 81042d8:	5802546c 	.word	0x5802546c
 81042dc:	58025480 	.word	0x58025480
 81042e0:	58025494 	.word	0x58025494

081042e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81042e4:	b580      	push	{r7, lr}
 81042e6:	b086      	sub	sp, #24
 81042e8:	af00      	add	r7, sp, #0
 81042ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81042ec:	f7fe fdf0 	bl	8102ed0 <HAL_GetTick>
 81042f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	2b00      	cmp	r3, #0
 81042f6:	d101      	bne.n	81042fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81042f8:	2301      	movs	r3, #1
 81042fa:	e2dc      	b.n	81048b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104302:	b2db      	uxtb	r3, r3
 8104304:	2b02      	cmp	r3, #2
 8104306:	d008      	beq.n	810431a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	2280      	movs	r2, #128	; 0x80
 810430c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	2200      	movs	r2, #0
 8104312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104316:	2301      	movs	r3, #1
 8104318:	e2cd      	b.n	81048b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	681b      	ldr	r3, [r3, #0]
 810431e:	4a76      	ldr	r2, [pc, #472]	; (81044f8 <HAL_DMA_Abort+0x214>)
 8104320:	4293      	cmp	r3, r2
 8104322:	d04a      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	681b      	ldr	r3, [r3, #0]
 8104328:	4a74      	ldr	r2, [pc, #464]	; (81044fc <HAL_DMA_Abort+0x218>)
 810432a:	4293      	cmp	r3, r2
 810432c:	d045      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	4a73      	ldr	r2, [pc, #460]	; (8104500 <HAL_DMA_Abort+0x21c>)
 8104334:	4293      	cmp	r3, r2
 8104336:	d040      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	4a71      	ldr	r2, [pc, #452]	; (8104504 <HAL_DMA_Abort+0x220>)
 810433e:	4293      	cmp	r3, r2
 8104340:	d03b      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	4a70      	ldr	r2, [pc, #448]	; (8104508 <HAL_DMA_Abort+0x224>)
 8104348:	4293      	cmp	r3, r2
 810434a:	d036      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	4a6e      	ldr	r2, [pc, #440]	; (810450c <HAL_DMA_Abort+0x228>)
 8104352:	4293      	cmp	r3, r2
 8104354:	d031      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	4a6d      	ldr	r2, [pc, #436]	; (8104510 <HAL_DMA_Abort+0x22c>)
 810435c:	4293      	cmp	r3, r2
 810435e:	d02c      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	681b      	ldr	r3, [r3, #0]
 8104364:	4a6b      	ldr	r2, [pc, #428]	; (8104514 <HAL_DMA_Abort+0x230>)
 8104366:	4293      	cmp	r3, r2
 8104368:	d027      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	681b      	ldr	r3, [r3, #0]
 810436e:	4a6a      	ldr	r2, [pc, #424]	; (8104518 <HAL_DMA_Abort+0x234>)
 8104370:	4293      	cmp	r3, r2
 8104372:	d022      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	4a68      	ldr	r2, [pc, #416]	; (810451c <HAL_DMA_Abort+0x238>)
 810437a:	4293      	cmp	r3, r2
 810437c:	d01d      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	681b      	ldr	r3, [r3, #0]
 8104382:	4a67      	ldr	r2, [pc, #412]	; (8104520 <HAL_DMA_Abort+0x23c>)
 8104384:	4293      	cmp	r3, r2
 8104386:	d018      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	4a65      	ldr	r2, [pc, #404]	; (8104524 <HAL_DMA_Abort+0x240>)
 810438e:	4293      	cmp	r3, r2
 8104390:	d013      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	4a64      	ldr	r2, [pc, #400]	; (8104528 <HAL_DMA_Abort+0x244>)
 8104398:	4293      	cmp	r3, r2
 810439a:	d00e      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	4a62      	ldr	r2, [pc, #392]	; (810452c <HAL_DMA_Abort+0x248>)
 81043a2:	4293      	cmp	r3, r2
 81043a4:	d009      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	4a61      	ldr	r2, [pc, #388]	; (8104530 <HAL_DMA_Abort+0x24c>)
 81043ac:	4293      	cmp	r3, r2
 81043ae:	d004      	beq.n	81043ba <HAL_DMA_Abort+0xd6>
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	4a5f      	ldr	r2, [pc, #380]	; (8104534 <HAL_DMA_Abort+0x250>)
 81043b6:	4293      	cmp	r3, r2
 81043b8:	d101      	bne.n	81043be <HAL_DMA_Abort+0xda>
 81043ba:	2301      	movs	r3, #1
 81043bc:	e000      	b.n	81043c0 <HAL_DMA_Abort+0xdc>
 81043be:	2300      	movs	r3, #0
 81043c0:	2b00      	cmp	r3, #0
 81043c2:	d013      	beq.n	81043ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	681a      	ldr	r2, [r3, #0]
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	f022 021e 	bic.w	r2, r2, #30
 81043d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	695a      	ldr	r2, [r3, #20]
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81043e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	617b      	str	r3, [r7, #20]
 81043ea:	e00a      	b.n	8104402 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	681a      	ldr	r2, [r3, #0]
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	f022 020e 	bic.w	r2, r2, #14
 81043fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	4a3c      	ldr	r2, [pc, #240]	; (81044f8 <HAL_DMA_Abort+0x214>)
 8104408:	4293      	cmp	r3, r2
 810440a:	d072      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	4a3a      	ldr	r2, [pc, #232]	; (81044fc <HAL_DMA_Abort+0x218>)
 8104412:	4293      	cmp	r3, r2
 8104414:	d06d      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	681b      	ldr	r3, [r3, #0]
 810441a:	4a39      	ldr	r2, [pc, #228]	; (8104500 <HAL_DMA_Abort+0x21c>)
 810441c:	4293      	cmp	r3, r2
 810441e:	d068      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 8104420:	687b      	ldr	r3, [r7, #4]
 8104422:	681b      	ldr	r3, [r3, #0]
 8104424:	4a37      	ldr	r2, [pc, #220]	; (8104504 <HAL_DMA_Abort+0x220>)
 8104426:	4293      	cmp	r3, r2
 8104428:	d063      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	4a36      	ldr	r2, [pc, #216]	; (8104508 <HAL_DMA_Abort+0x224>)
 8104430:	4293      	cmp	r3, r2
 8104432:	d05e      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	681b      	ldr	r3, [r3, #0]
 8104438:	4a34      	ldr	r2, [pc, #208]	; (810450c <HAL_DMA_Abort+0x228>)
 810443a:	4293      	cmp	r3, r2
 810443c:	d059      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	4a33      	ldr	r2, [pc, #204]	; (8104510 <HAL_DMA_Abort+0x22c>)
 8104444:	4293      	cmp	r3, r2
 8104446:	d054      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	4a31      	ldr	r2, [pc, #196]	; (8104514 <HAL_DMA_Abort+0x230>)
 810444e:	4293      	cmp	r3, r2
 8104450:	d04f      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	681b      	ldr	r3, [r3, #0]
 8104456:	4a30      	ldr	r2, [pc, #192]	; (8104518 <HAL_DMA_Abort+0x234>)
 8104458:	4293      	cmp	r3, r2
 810445a:	d04a      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	4a2e      	ldr	r2, [pc, #184]	; (810451c <HAL_DMA_Abort+0x238>)
 8104462:	4293      	cmp	r3, r2
 8104464:	d045      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	681b      	ldr	r3, [r3, #0]
 810446a:	4a2d      	ldr	r2, [pc, #180]	; (8104520 <HAL_DMA_Abort+0x23c>)
 810446c:	4293      	cmp	r3, r2
 810446e:	d040      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	4a2b      	ldr	r2, [pc, #172]	; (8104524 <HAL_DMA_Abort+0x240>)
 8104476:	4293      	cmp	r3, r2
 8104478:	d03b      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	4a2a      	ldr	r2, [pc, #168]	; (8104528 <HAL_DMA_Abort+0x244>)
 8104480:	4293      	cmp	r3, r2
 8104482:	d036      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	4a28      	ldr	r2, [pc, #160]	; (810452c <HAL_DMA_Abort+0x248>)
 810448a:	4293      	cmp	r3, r2
 810448c:	d031      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	4a27      	ldr	r2, [pc, #156]	; (8104530 <HAL_DMA_Abort+0x24c>)
 8104494:	4293      	cmp	r3, r2
 8104496:	d02c      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	4a25      	ldr	r2, [pc, #148]	; (8104534 <HAL_DMA_Abort+0x250>)
 810449e:	4293      	cmp	r3, r2
 81044a0:	d027      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 81044a2:	687b      	ldr	r3, [r7, #4]
 81044a4:	681b      	ldr	r3, [r3, #0]
 81044a6:	4a24      	ldr	r2, [pc, #144]	; (8104538 <HAL_DMA_Abort+0x254>)
 81044a8:	4293      	cmp	r3, r2
 81044aa:	d022      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	4a22      	ldr	r2, [pc, #136]	; (810453c <HAL_DMA_Abort+0x258>)
 81044b2:	4293      	cmp	r3, r2
 81044b4:	d01d      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	4a21      	ldr	r2, [pc, #132]	; (8104540 <HAL_DMA_Abort+0x25c>)
 81044bc:	4293      	cmp	r3, r2
 81044be:	d018      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	4a1f      	ldr	r2, [pc, #124]	; (8104544 <HAL_DMA_Abort+0x260>)
 81044c6:	4293      	cmp	r3, r2
 81044c8:	d013      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	4a1e      	ldr	r2, [pc, #120]	; (8104548 <HAL_DMA_Abort+0x264>)
 81044d0:	4293      	cmp	r3, r2
 81044d2:	d00e      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	4a1c      	ldr	r2, [pc, #112]	; (810454c <HAL_DMA_Abort+0x268>)
 81044da:	4293      	cmp	r3, r2
 81044dc:	d009      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	681b      	ldr	r3, [r3, #0]
 81044e2:	4a1b      	ldr	r2, [pc, #108]	; (8104550 <HAL_DMA_Abort+0x26c>)
 81044e4:	4293      	cmp	r3, r2
 81044e6:	d004      	beq.n	81044f2 <HAL_DMA_Abort+0x20e>
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	4a19      	ldr	r2, [pc, #100]	; (8104554 <HAL_DMA_Abort+0x270>)
 81044ee:	4293      	cmp	r3, r2
 81044f0:	d132      	bne.n	8104558 <HAL_DMA_Abort+0x274>
 81044f2:	2301      	movs	r3, #1
 81044f4:	e031      	b.n	810455a <HAL_DMA_Abort+0x276>
 81044f6:	bf00      	nop
 81044f8:	40020010 	.word	0x40020010
 81044fc:	40020028 	.word	0x40020028
 8104500:	40020040 	.word	0x40020040
 8104504:	40020058 	.word	0x40020058
 8104508:	40020070 	.word	0x40020070
 810450c:	40020088 	.word	0x40020088
 8104510:	400200a0 	.word	0x400200a0
 8104514:	400200b8 	.word	0x400200b8
 8104518:	40020410 	.word	0x40020410
 810451c:	40020428 	.word	0x40020428
 8104520:	40020440 	.word	0x40020440
 8104524:	40020458 	.word	0x40020458
 8104528:	40020470 	.word	0x40020470
 810452c:	40020488 	.word	0x40020488
 8104530:	400204a0 	.word	0x400204a0
 8104534:	400204b8 	.word	0x400204b8
 8104538:	58025408 	.word	0x58025408
 810453c:	5802541c 	.word	0x5802541c
 8104540:	58025430 	.word	0x58025430
 8104544:	58025444 	.word	0x58025444
 8104548:	58025458 	.word	0x58025458
 810454c:	5802546c 	.word	0x5802546c
 8104550:	58025480 	.word	0x58025480
 8104554:	58025494 	.word	0x58025494
 8104558:	2300      	movs	r3, #0
 810455a:	2b00      	cmp	r3, #0
 810455c:	d007      	beq.n	810456e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104562:	681a      	ldr	r2, [r3, #0]
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810456c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	4a6d      	ldr	r2, [pc, #436]	; (8104728 <HAL_DMA_Abort+0x444>)
 8104574:	4293      	cmp	r3, r2
 8104576:	d04a      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	681b      	ldr	r3, [r3, #0]
 810457c:	4a6b      	ldr	r2, [pc, #428]	; (810472c <HAL_DMA_Abort+0x448>)
 810457e:	4293      	cmp	r3, r2
 8104580:	d045      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	681b      	ldr	r3, [r3, #0]
 8104586:	4a6a      	ldr	r2, [pc, #424]	; (8104730 <HAL_DMA_Abort+0x44c>)
 8104588:	4293      	cmp	r3, r2
 810458a:	d040      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	4a68      	ldr	r2, [pc, #416]	; (8104734 <HAL_DMA_Abort+0x450>)
 8104592:	4293      	cmp	r3, r2
 8104594:	d03b      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	681b      	ldr	r3, [r3, #0]
 810459a:	4a67      	ldr	r2, [pc, #412]	; (8104738 <HAL_DMA_Abort+0x454>)
 810459c:	4293      	cmp	r3, r2
 810459e:	d036      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	4a65      	ldr	r2, [pc, #404]	; (810473c <HAL_DMA_Abort+0x458>)
 81045a6:	4293      	cmp	r3, r2
 81045a8:	d031      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	4a64      	ldr	r2, [pc, #400]	; (8104740 <HAL_DMA_Abort+0x45c>)
 81045b0:	4293      	cmp	r3, r2
 81045b2:	d02c      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	4a62      	ldr	r2, [pc, #392]	; (8104744 <HAL_DMA_Abort+0x460>)
 81045ba:	4293      	cmp	r3, r2
 81045bc:	d027      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	681b      	ldr	r3, [r3, #0]
 81045c2:	4a61      	ldr	r2, [pc, #388]	; (8104748 <HAL_DMA_Abort+0x464>)
 81045c4:	4293      	cmp	r3, r2
 81045c6:	d022      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	4a5f      	ldr	r2, [pc, #380]	; (810474c <HAL_DMA_Abort+0x468>)
 81045ce:	4293      	cmp	r3, r2
 81045d0:	d01d      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	4a5e      	ldr	r2, [pc, #376]	; (8104750 <HAL_DMA_Abort+0x46c>)
 81045d8:	4293      	cmp	r3, r2
 81045da:	d018      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	4a5c      	ldr	r2, [pc, #368]	; (8104754 <HAL_DMA_Abort+0x470>)
 81045e2:	4293      	cmp	r3, r2
 81045e4:	d013      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	681b      	ldr	r3, [r3, #0]
 81045ea:	4a5b      	ldr	r2, [pc, #364]	; (8104758 <HAL_DMA_Abort+0x474>)
 81045ec:	4293      	cmp	r3, r2
 81045ee:	d00e      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	4a59      	ldr	r2, [pc, #356]	; (810475c <HAL_DMA_Abort+0x478>)
 81045f6:	4293      	cmp	r3, r2
 81045f8:	d009      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	4a58      	ldr	r2, [pc, #352]	; (8104760 <HAL_DMA_Abort+0x47c>)
 8104600:	4293      	cmp	r3, r2
 8104602:	d004      	beq.n	810460e <HAL_DMA_Abort+0x32a>
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	4a56      	ldr	r2, [pc, #344]	; (8104764 <HAL_DMA_Abort+0x480>)
 810460a:	4293      	cmp	r3, r2
 810460c:	d108      	bne.n	8104620 <HAL_DMA_Abort+0x33c>
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	681a      	ldr	r2, [r3, #0]
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	681b      	ldr	r3, [r3, #0]
 8104618:	f022 0201 	bic.w	r2, r2, #1
 810461c:	601a      	str	r2, [r3, #0]
 810461e:	e007      	b.n	8104630 <HAL_DMA_Abort+0x34c>
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	681a      	ldr	r2, [r3, #0]
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	f022 0201 	bic.w	r2, r2, #1
 810462e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104630:	e013      	b.n	810465a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104632:	f7fe fc4d 	bl	8102ed0 <HAL_GetTick>
 8104636:	4602      	mov	r2, r0
 8104638:	693b      	ldr	r3, [r7, #16]
 810463a:	1ad3      	subs	r3, r2, r3
 810463c:	2b05      	cmp	r3, #5
 810463e:	d90c      	bls.n	810465a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	2220      	movs	r2, #32
 8104644:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	2200      	movs	r2, #0
 810464a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	2203      	movs	r2, #3
 8104652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104656:	2301      	movs	r3, #1
 8104658:	e12d      	b.n	81048b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810465a:	697b      	ldr	r3, [r7, #20]
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	f003 0301 	and.w	r3, r3, #1
 8104662:	2b00      	cmp	r3, #0
 8104664:	d1e5      	bne.n	8104632 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	681b      	ldr	r3, [r3, #0]
 810466a:	4a2f      	ldr	r2, [pc, #188]	; (8104728 <HAL_DMA_Abort+0x444>)
 810466c:	4293      	cmp	r3, r2
 810466e:	d04a      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	681b      	ldr	r3, [r3, #0]
 8104674:	4a2d      	ldr	r2, [pc, #180]	; (810472c <HAL_DMA_Abort+0x448>)
 8104676:	4293      	cmp	r3, r2
 8104678:	d045      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	681b      	ldr	r3, [r3, #0]
 810467e:	4a2c      	ldr	r2, [pc, #176]	; (8104730 <HAL_DMA_Abort+0x44c>)
 8104680:	4293      	cmp	r3, r2
 8104682:	d040      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 8104684:	687b      	ldr	r3, [r7, #4]
 8104686:	681b      	ldr	r3, [r3, #0]
 8104688:	4a2a      	ldr	r2, [pc, #168]	; (8104734 <HAL_DMA_Abort+0x450>)
 810468a:	4293      	cmp	r3, r2
 810468c:	d03b      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	681b      	ldr	r3, [r3, #0]
 8104692:	4a29      	ldr	r2, [pc, #164]	; (8104738 <HAL_DMA_Abort+0x454>)
 8104694:	4293      	cmp	r3, r2
 8104696:	d036      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	681b      	ldr	r3, [r3, #0]
 810469c:	4a27      	ldr	r2, [pc, #156]	; (810473c <HAL_DMA_Abort+0x458>)
 810469e:	4293      	cmp	r3, r2
 81046a0:	d031      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	681b      	ldr	r3, [r3, #0]
 81046a6:	4a26      	ldr	r2, [pc, #152]	; (8104740 <HAL_DMA_Abort+0x45c>)
 81046a8:	4293      	cmp	r3, r2
 81046aa:	d02c      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	4a24      	ldr	r2, [pc, #144]	; (8104744 <HAL_DMA_Abort+0x460>)
 81046b2:	4293      	cmp	r3, r2
 81046b4:	d027      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	681b      	ldr	r3, [r3, #0]
 81046ba:	4a23      	ldr	r2, [pc, #140]	; (8104748 <HAL_DMA_Abort+0x464>)
 81046bc:	4293      	cmp	r3, r2
 81046be:	d022      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046c0:	687b      	ldr	r3, [r7, #4]
 81046c2:	681b      	ldr	r3, [r3, #0]
 81046c4:	4a21      	ldr	r2, [pc, #132]	; (810474c <HAL_DMA_Abort+0x468>)
 81046c6:	4293      	cmp	r3, r2
 81046c8:	d01d      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	681b      	ldr	r3, [r3, #0]
 81046ce:	4a20      	ldr	r2, [pc, #128]	; (8104750 <HAL_DMA_Abort+0x46c>)
 81046d0:	4293      	cmp	r3, r2
 81046d2:	d018      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	4a1e      	ldr	r2, [pc, #120]	; (8104754 <HAL_DMA_Abort+0x470>)
 81046da:	4293      	cmp	r3, r2
 81046dc:	d013      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	681b      	ldr	r3, [r3, #0]
 81046e2:	4a1d      	ldr	r2, [pc, #116]	; (8104758 <HAL_DMA_Abort+0x474>)
 81046e4:	4293      	cmp	r3, r2
 81046e6:	d00e      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	681b      	ldr	r3, [r3, #0]
 81046ec:	4a1b      	ldr	r2, [pc, #108]	; (810475c <HAL_DMA_Abort+0x478>)
 81046ee:	4293      	cmp	r3, r2
 81046f0:	d009      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	4a1a      	ldr	r2, [pc, #104]	; (8104760 <HAL_DMA_Abort+0x47c>)
 81046f8:	4293      	cmp	r3, r2
 81046fa:	d004      	beq.n	8104706 <HAL_DMA_Abort+0x422>
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	681b      	ldr	r3, [r3, #0]
 8104700:	4a18      	ldr	r2, [pc, #96]	; (8104764 <HAL_DMA_Abort+0x480>)
 8104702:	4293      	cmp	r3, r2
 8104704:	d101      	bne.n	810470a <HAL_DMA_Abort+0x426>
 8104706:	2301      	movs	r3, #1
 8104708:	e000      	b.n	810470c <HAL_DMA_Abort+0x428>
 810470a:	2300      	movs	r3, #0
 810470c:	2b00      	cmp	r3, #0
 810470e:	d02b      	beq.n	8104768 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104714:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810471a:	f003 031f 	and.w	r3, r3, #31
 810471e:	223f      	movs	r2, #63	; 0x3f
 8104720:	409a      	lsls	r2, r3
 8104722:	68bb      	ldr	r3, [r7, #8]
 8104724:	609a      	str	r2, [r3, #8]
 8104726:	e02a      	b.n	810477e <HAL_DMA_Abort+0x49a>
 8104728:	40020010 	.word	0x40020010
 810472c:	40020028 	.word	0x40020028
 8104730:	40020040 	.word	0x40020040
 8104734:	40020058 	.word	0x40020058
 8104738:	40020070 	.word	0x40020070
 810473c:	40020088 	.word	0x40020088
 8104740:	400200a0 	.word	0x400200a0
 8104744:	400200b8 	.word	0x400200b8
 8104748:	40020410 	.word	0x40020410
 810474c:	40020428 	.word	0x40020428
 8104750:	40020440 	.word	0x40020440
 8104754:	40020458 	.word	0x40020458
 8104758:	40020470 	.word	0x40020470
 810475c:	40020488 	.word	0x40020488
 8104760:	400204a0 	.word	0x400204a0
 8104764:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810476c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104772:	f003 031f 	and.w	r3, r3, #31
 8104776:	2201      	movs	r2, #1
 8104778:	409a      	lsls	r2, r3
 810477a:	68fb      	ldr	r3, [r7, #12]
 810477c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	681b      	ldr	r3, [r3, #0]
 8104782:	4a4f      	ldr	r2, [pc, #316]	; (81048c0 <HAL_DMA_Abort+0x5dc>)
 8104784:	4293      	cmp	r3, r2
 8104786:	d072      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	681b      	ldr	r3, [r3, #0]
 810478c:	4a4d      	ldr	r2, [pc, #308]	; (81048c4 <HAL_DMA_Abort+0x5e0>)
 810478e:	4293      	cmp	r3, r2
 8104790:	d06d      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	681b      	ldr	r3, [r3, #0]
 8104796:	4a4c      	ldr	r2, [pc, #304]	; (81048c8 <HAL_DMA_Abort+0x5e4>)
 8104798:	4293      	cmp	r3, r2
 810479a:	d068      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	681b      	ldr	r3, [r3, #0]
 81047a0:	4a4a      	ldr	r2, [pc, #296]	; (81048cc <HAL_DMA_Abort+0x5e8>)
 81047a2:	4293      	cmp	r3, r2
 81047a4:	d063      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	681b      	ldr	r3, [r3, #0]
 81047aa:	4a49      	ldr	r2, [pc, #292]	; (81048d0 <HAL_DMA_Abort+0x5ec>)
 81047ac:	4293      	cmp	r3, r2
 81047ae:	d05e      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 81047b0:	687b      	ldr	r3, [r7, #4]
 81047b2:	681b      	ldr	r3, [r3, #0]
 81047b4:	4a47      	ldr	r2, [pc, #284]	; (81048d4 <HAL_DMA_Abort+0x5f0>)
 81047b6:	4293      	cmp	r3, r2
 81047b8:	d059      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	681b      	ldr	r3, [r3, #0]
 81047be:	4a46      	ldr	r2, [pc, #280]	; (81048d8 <HAL_DMA_Abort+0x5f4>)
 81047c0:	4293      	cmp	r3, r2
 81047c2:	d054      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 81047c4:	687b      	ldr	r3, [r7, #4]
 81047c6:	681b      	ldr	r3, [r3, #0]
 81047c8:	4a44      	ldr	r2, [pc, #272]	; (81048dc <HAL_DMA_Abort+0x5f8>)
 81047ca:	4293      	cmp	r3, r2
 81047cc:	d04f      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 81047ce:	687b      	ldr	r3, [r7, #4]
 81047d0:	681b      	ldr	r3, [r3, #0]
 81047d2:	4a43      	ldr	r2, [pc, #268]	; (81048e0 <HAL_DMA_Abort+0x5fc>)
 81047d4:	4293      	cmp	r3, r2
 81047d6:	d04a      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 81047d8:	687b      	ldr	r3, [r7, #4]
 81047da:	681b      	ldr	r3, [r3, #0]
 81047dc:	4a41      	ldr	r2, [pc, #260]	; (81048e4 <HAL_DMA_Abort+0x600>)
 81047de:	4293      	cmp	r3, r2
 81047e0:	d045      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	681b      	ldr	r3, [r3, #0]
 81047e6:	4a40      	ldr	r2, [pc, #256]	; (81048e8 <HAL_DMA_Abort+0x604>)
 81047e8:	4293      	cmp	r3, r2
 81047ea:	d040      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 81047ec:	687b      	ldr	r3, [r7, #4]
 81047ee:	681b      	ldr	r3, [r3, #0]
 81047f0:	4a3e      	ldr	r2, [pc, #248]	; (81048ec <HAL_DMA_Abort+0x608>)
 81047f2:	4293      	cmp	r3, r2
 81047f4:	d03b      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	681b      	ldr	r3, [r3, #0]
 81047fa:	4a3d      	ldr	r2, [pc, #244]	; (81048f0 <HAL_DMA_Abort+0x60c>)
 81047fc:	4293      	cmp	r3, r2
 81047fe:	d036      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	681b      	ldr	r3, [r3, #0]
 8104804:	4a3b      	ldr	r2, [pc, #236]	; (81048f4 <HAL_DMA_Abort+0x610>)
 8104806:	4293      	cmp	r3, r2
 8104808:	d031      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	681b      	ldr	r3, [r3, #0]
 810480e:	4a3a      	ldr	r2, [pc, #232]	; (81048f8 <HAL_DMA_Abort+0x614>)
 8104810:	4293      	cmp	r3, r2
 8104812:	d02c      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 8104814:	687b      	ldr	r3, [r7, #4]
 8104816:	681b      	ldr	r3, [r3, #0]
 8104818:	4a38      	ldr	r2, [pc, #224]	; (81048fc <HAL_DMA_Abort+0x618>)
 810481a:	4293      	cmp	r3, r2
 810481c:	d027      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 810481e:	687b      	ldr	r3, [r7, #4]
 8104820:	681b      	ldr	r3, [r3, #0]
 8104822:	4a37      	ldr	r2, [pc, #220]	; (8104900 <HAL_DMA_Abort+0x61c>)
 8104824:	4293      	cmp	r3, r2
 8104826:	d022      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	4a35      	ldr	r2, [pc, #212]	; (8104904 <HAL_DMA_Abort+0x620>)
 810482e:	4293      	cmp	r3, r2
 8104830:	d01d      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	681b      	ldr	r3, [r3, #0]
 8104836:	4a34      	ldr	r2, [pc, #208]	; (8104908 <HAL_DMA_Abort+0x624>)
 8104838:	4293      	cmp	r3, r2
 810483a:	d018      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	681b      	ldr	r3, [r3, #0]
 8104840:	4a32      	ldr	r2, [pc, #200]	; (810490c <HAL_DMA_Abort+0x628>)
 8104842:	4293      	cmp	r3, r2
 8104844:	d013      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	681b      	ldr	r3, [r3, #0]
 810484a:	4a31      	ldr	r2, [pc, #196]	; (8104910 <HAL_DMA_Abort+0x62c>)
 810484c:	4293      	cmp	r3, r2
 810484e:	d00e      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	681b      	ldr	r3, [r3, #0]
 8104854:	4a2f      	ldr	r2, [pc, #188]	; (8104914 <HAL_DMA_Abort+0x630>)
 8104856:	4293      	cmp	r3, r2
 8104858:	d009      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	681b      	ldr	r3, [r3, #0]
 810485e:	4a2e      	ldr	r2, [pc, #184]	; (8104918 <HAL_DMA_Abort+0x634>)
 8104860:	4293      	cmp	r3, r2
 8104862:	d004      	beq.n	810486e <HAL_DMA_Abort+0x58a>
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	4a2c      	ldr	r2, [pc, #176]	; (810491c <HAL_DMA_Abort+0x638>)
 810486a:	4293      	cmp	r3, r2
 810486c:	d101      	bne.n	8104872 <HAL_DMA_Abort+0x58e>
 810486e:	2301      	movs	r3, #1
 8104870:	e000      	b.n	8104874 <HAL_DMA_Abort+0x590>
 8104872:	2300      	movs	r3, #0
 8104874:	2b00      	cmp	r3, #0
 8104876:	d015      	beq.n	81048a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810487c:	687a      	ldr	r2, [r7, #4]
 810487e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104880:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104886:	2b00      	cmp	r3, #0
 8104888:	d00c      	beq.n	81048a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810488e:	681a      	ldr	r2, [r3, #0]
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104898:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810489a:	687b      	ldr	r3, [r7, #4]
 810489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810489e:	687a      	ldr	r2, [r7, #4]
 81048a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81048a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81048a4:	687b      	ldr	r3, [r7, #4]
 81048a6:	2200      	movs	r2, #0
 81048a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	2201      	movs	r2, #1
 81048b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 81048b4:	2300      	movs	r3, #0
}
 81048b6:	4618      	mov	r0, r3
 81048b8:	3718      	adds	r7, #24
 81048ba:	46bd      	mov	sp, r7
 81048bc:	bd80      	pop	{r7, pc}
 81048be:	bf00      	nop
 81048c0:	40020010 	.word	0x40020010
 81048c4:	40020028 	.word	0x40020028
 81048c8:	40020040 	.word	0x40020040
 81048cc:	40020058 	.word	0x40020058
 81048d0:	40020070 	.word	0x40020070
 81048d4:	40020088 	.word	0x40020088
 81048d8:	400200a0 	.word	0x400200a0
 81048dc:	400200b8 	.word	0x400200b8
 81048e0:	40020410 	.word	0x40020410
 81048e4:	40020428 	.word	0x40020428
 81048e8:	40020440 	.word	0x40020440
 81048ec:	40020458 	.word	0x40020458
 81048f0:	40020470 	.word	0x40020470
 81048f4:	40020488 	.word	0x40020488
 81048f8:	400204a0 	.word	0x400204a0
 81048fc:	400204b8 	.word	0x400204b8
 8104900:	58025408 	.word	0x58025408
 8104904:	5802541c 	.word	0x5802541c
 8104908:	58025430 	.word	0x58025430
 810490c:	58025444 	.word	0x58025444
 8104910:	58025458 	.word	0x58025458
 8104914:	5802546c 	.word	0x5802546c
 8104918:	58025480 	.word	0x58025480
 810491c:	58025494 	.word	0x58025494

08104920 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8104920:	b580      	push	{r7, lr}
 8104922:	b084      	sub	sp, #16
 8104924:	af00      	add	r7, sp, #0
 8104926:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104928:	687b      	ldr	r3, [r7, #4]
 810492a:	2b00      	cmp	r3, #0
 810492c:	d101      	bne.n	8104932 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810492e:	2301      	movs	r3, #1
 8104930:	e237      	b.n	8104da2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104932:	687b      	ldr	r3, [r7, #4]
 8104934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104938:	b2db      	uxtb	r3, r3
 810493a:	2b02      	cmp	r3, #2
 810493c:	d004      	beq.n	8104948 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	2280      	movs	r2, #128	; 0x80
 8104942:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8104944:	2301      	movs	r3, #1
 8104946:	e22c      	b.n	8104da2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	681b      	ldr	r3, [r3, #0]
 810494c:	4a5c      	ldr	r2, [pc, #368]	; (8104ac0 <HAL_DMA_Abort_IT+0x1a0>)
 810494e:	4293      	cmp	r3, r2
 8104950:	d04a      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	4a5b      	ldr	r2, [pc, #364]	; (8104ac4 <HAL_DMA_Abort_IT+0x1a4>)
 8104958:	4293      	cmp	r3, r2
 810495a:	d045      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	4a59      	ldr	r2, [pc, #356]	; (8104ac8 <HAL_DMA_Abort_IT+0x1a8>)
 8104962:	4293      	cmp	r3, r2
 8104964:	d040      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 8104966:	687b      	ldr	r3, [r7, #4]
 8104968:	681b      	ldr	r3, [r3, #0]
 810496a:	4a58      	ldr	r2, [pc, #352]	; (8104acc <HAL_DMA_Abort_IT+0x1ac>)
 810496c:	4293      	cmp	r3, r2
 810496e:	d03b      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	681b      	ldr	r3, [r3, #0]
 8104974:	4a56      	ldr	r2, [pc, #344]	; (8104ad0 <HAL_DMA_Abort_IT+0x1b0>)
 8104976:	4293      	cmp	r3, r2
 8104978:	d036      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	4a55      	ldr	r2, [pc, #340]	; (8104ad4 <HAL_DMA_Abort_IT+0x1b4>)
 8104980:	4293      	cmp	r3, r2
 8104982:	d031      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 8104984:	687b      	ldr	r3, [r7, #4]
 8104986:	681b      	ldr	r3, [r3, #0]
 8104988:	4a53      	ldr	r2, [pc, #332]	; (8104ad8 <HAL_DMA_Abort_IT+0x1b8>)
 810498a:	4293      	cmp	r3, r2
 810498c:	d02c      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 810498e:	687b      	ldr	r3, [r7, #4]
 8104990:	681b      	ldr	r3, [r3, #0]
 8104992:	4a52      	ldr	r2, [pc, #328]	; (8104adc <HAL_DMA_Abort_IT+0x1bc>)
 8104994:	4293      	cmp	r3, r2
 8104996:	d027      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 8104998:	687b      	ldr	r3, [r7, #4]
 810499a:	681b      	ldr	r3, [r3, #0]
 810499c:	4a50      	ldr	r2, [pc, #320]	; (8104ae0 <HAL_DMA_Abort_IT+0x1c0>)
 810499e:	4293      	cmp	r3, r2
 81049a0:	d022      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	681b      	ldr	r3, [r3, #0]
 81049a6:	4a4f      	ldr	r2, [pc, #316]	; (8104ae4 <HAL_DMA_Abort_IT+0x1c4>)
 81049a8:	4293      	cmp	r3, r2
 81049aa:	d01d      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	681b      	ldr	r3, [r3, #0]
 81049b0:	4a4d      	ldr	r2, [pc, #308]	; (8104ae8 <HAL_DMA_Abort_IT+0x1c8>)
 81049b2:	4293      	cmp	r3, r2
 81049b4:	d018      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 81049b6:	687b      	ldr	r3, [r7, #4]
 81049b8:	681b      	ldr	r3, [r3, #0]
 81049ba:	4a4c      	ldr	r2, [pc, #304]	; (8104aec <HAL_DMA_Abort_IT+0x1cc>)
 81049bc:	4293      	cmp	r3, r2
 81049be:	d013      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	4a4a      	ldr	r2, [pc, #296]	; (8104af0 <HAL_DMA_Abort_IT+0x1d0>)
 81049c6:	4293      	cmp	r3, r2
 81049c8:	d00e      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 81049ca:	687b      	ldr	r3, [r7, #4]
 81049cc:	681b      	ldr	r3, [r3, #0]
 81049ce:	4a49      	ldr	r2, [pc, #292]	; (8104af4 <HAL_DMA_Abort_IT+0x1d4>)
 81049d0:	4293      	cmp	r3, r2
 81049d2:	d009      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	4a47      	ldr	r2, [pc, #284]	; (8104af8 <HAL_DMA_Abort_IT+0x1d8>)
 81049da:	4293      	cmp	r3, r2
 81049dc:	d004      	beq.n	81049e8 <HAL_DMA_Abort_IT+0xc8>
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	4a46      	ldr	r2, [pc, #280]	; (8104afc <HAL_DMA_Abort_IT+0x1dc>)
 81049e4:	4293      	cmp	r3, r2
 81049e6:	d101      	bne.n	81049ec <HAL_DMA_Abort_IT+0xcc>
 81049e8:	2301      	movs	r3, #1
 81049ea:	e000      	b.n	81049ee <HAL_DMA_Abort_IT+0xce>
 81049ec:	2300      	movs	r3, #0
 81049ee:	2b00      	cmp	r3, #0
 81049f0:	f000 8086 	beq.w	8104b00 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	2204      	movs	r2, #4
 81049f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	681b      	ldr	r3, [r3, #0]
 8104a00:	4a2f      	ldr	r2, [pc, #188]	; (8104ac0 <HAL_DMA_Abort_IT+0x1a0>)
 8104a02:	4293      	cmp	r3, r2
 8104a04:	d04a      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a06:	687b      	ldr	r3, [r7, #4]
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	4a2e      	ldr	r2, [pc, #184]	; (8104ac4 <HAL_DMA_Abort_IT+0x1a4>)
 8104a0c:	4293      	cmp	r3, r2
 8104a0e:	d045      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	4a2c      	ldr	r2, [pc, #176]	; (8104ac8 <HAL_DMA_Abort_IT+0x1a8>)
 8104a16:	4293      	cmp	r3, r2
 8104a18:	d040      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a1a:	687b      	ldr	r3, [r7, #4]
 8104a1c:	681b      	ldr	r3, [r3, #0]
 8104a1e:	4a2b      	ldr	r2, [pc, #172]	; (8104acc <HAL_DMA_Abort_IT+0x1ac>)
 8104a20:	4293      	cmp	r3, r2
 8104a22:	d03b      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	4a29      	ldr	r2, [pc, #164]	; (8104ad0 <HAL_DMA_Abort_IT+0x1b0>)
 8104a2a:	4293      	cmp	r3, r2
 8104a2c:	d036      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	4a28      	ldr	r2, [pc, #160]	; (8104ad4 <HAL_DMA_Abort_IT+0x1b4>)
 8104a34:	4293      	cmp	r3, r2
 8104a36:	d031      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a38:	687b      	ldr	r3, [r7, #4]
 8104a3a:	681b      	ldr	r3, [r3, #0]
 8104a3c:	4a26      	ldr	r2, [pc, #152]	; (8104ad8 <HAL_DMA_Abort_IT+0x1b8>)
 8104a3e:	4293      	cmp	r3, r2
 8104a40:	d02c      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a42:	687b      	ldr	r3, [r7, #4]
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	4a25      	ldr	r2, [pc, #148]	; (8104adc <HAL_DMA_Abort_IT+0x1bc>)
 8104a48:	4293      	cmp	r3, r2
 8104a4a:	d027      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a4c:	687b      	ldr	r3, [r7, #4]
 8104a4e:	681b      	ldr	r3, [r3, #0]
 8104a50:	4a23      	ldr	r2, [pc, #140]	; (8104ae0 <HAL_DMA_Abort_IT+0x1c0>)
 8104a52:	4293      	cmp	r3, r2
 8104a54:	d022      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	4a22      	ldr	r2, [pc, #136]	; (8104ae4 <HAL_DMA_Abort_IT+0x1c4>)
 8104a5c:	4293      	cmp	r3, r2
 8104a5e:	d01d      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	4a20      	ldr	r2, [pc, #128]	; (8104ae8 <HAL_DMA_Abort_IT+0x1c8>)
 8104a66:	4293      	cmp	r3, r2
 8104a68:	d018      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	681b      	ldr	r3, [r3, #0]
 8104a6e:	4a1f      	ldr	r2, [pc, #124]	; (8104aec <HAL_DMA_Abort_IT+0x1cc>)
 8104a70:	4293      	cmp	r3, r2
 8104a72:	d013      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a74:	687b      	ldr	r3, [r7, #4]
 8104a76:	681b      	ldr	r3, [r3, #0]
 8104a78:	4a1d      	ldr	r2, [pc, #116]	; (8104af0 <HAL_DMA_Abort_IT+0x1d0>)
 8104a7a:	4293      	cmp	r3, r2
 8104a7c:	d00e      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	4a1c      	ldr	r2, [pc, #112]	; (8104af4 <HAL_DMA_Abort_IT+0x1d4>)
 8104a84:	4293      	cmp	r3, r2
 8104a86:	d009      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	4a1a      	ldr	r2, [pc, #104]	; (8104af8 <HAL_DMA_Abort_IT+0x1d8>)
 8104a8e:	4293      	cmp	r3, r2
 8104a90:	d004      	beq.n	8104a9c <HAL_DMA_Abort_IT+0x17c>
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	4a19      	ldr	r2, [pc, #100]	; (8104afc <HAL_DMA_Abort_IT+0x1dc>)
 8104a98:	4293      	cmp	r3, r2
 8104a9a:	d108      	bne.n	8104aae <HAL_DMA_Abort_IT+0x18e>
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	681a      	ldr	r2, [r3, #0]
 8104aa2:	687b      	ldr	r3, [r7, #4]
 8104aa4:	681b      	ldr	r3, [r3, #0]
 8104aa6:	f022 0201 	bic.w	r2, r2, #1
 8104aaa:	601a      	str	r2, [r3, #0]
 8104aac:	e178      	b.n	8104da0 <HAL_DMA_Abort_IT+0x480>
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	681b      	ldr	r3, [r3, #0]
 8104ab2:	681a      	ldr	r2, [r3, #0]
 8104ab4:	687b      	ldr	r3, [r7, #4]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	f022 0201 	bic.w	r2, r2, #1
 8104abc:	601a      	str	r2, [r3, #0]
 8104abe:	e16f      	b.n	8104da0 <HAL_DMA_Abort_IT+0x480>
 8104ac0:	40020010 	.word	0x40020010
 8104ac4:	40020028 	.word	0x40020028
 8104ac8:	40020040 	.word	0x40020040
 8104acc:	40020058 	.word	0x40020058
 8104ad0:	40020070 	.word	0x40020070
 8104ad4:	40020088 	.word	0x40020088
 8104ad8:	400200a0 	.word	0x400200a0
 8104adc:	400200b8 	.word	0x400200b8
 8104ae0:	40020410 	.word	0x40020410
 8104ae4:	40020428 	.word	0x40020428
 8104ae8:	40020440 	.word	0x40020440
 8104aec:	40020458 	.word	0x40020458
 8104af0:	40020470 	.word	0x40020470
 8104af4:	40020488 	.word	0x40020488
 8104af8:	400204a0 	.word	0x400204a0
 8104afc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	681a      	ldr	r2, [r3, #0]
 8104b06:	687b      	ldr	r3, [r7, #4]
 8104b08:	681b      	ldr	r3, [r3, #0]
 8104b0a:	f022 020e 	bic.w	r2, r2, #14
 8104b0e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8104b10:	687b      	ldr	r3, [r7, #4]
 8104b12:	681b      	ldr	r3, [r3, #0]
 8104b14:	4a6c      	ldr	r2, [pc, #432]	; (8104cc8 <HAL_DMA_Abort_IT+0x3a8>)
 8104b16:	4293      	cmp	r3, r2
 8104b18:	d04a      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	681b      	ldr	r3, [r3, #0]
 8104b1e:	4a6b      	ldr	r2, [pc, #428]	; (8104ccc <HAL_DMA_Abort_IT+0x3ac>)
 8104b20:	4293      	cmp	r3, r2
 8104b22:	d045      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b24:	687b      	ldr	r3, [r7, #4]
 8104b26:	681b      	ldr	r3, [r3, #0]
 8104b28:	4a69      	ldr	r2, [pc, #420]	; (8104cd0 <HAL_DMA_Abort_IT+0x3b0>)
 8104b2a:	4293      	cmp	r3, r2
 8104b2c:	d040      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b2e:	687b      	ldr	r3, [r7, #4]
 8104b30:	681b      	ldr	r3, [r3, #0]
 8104b32:	4a68      	ldr	r2, [pc, #416]	; (8104cd4 <HAL_DMA_Abort_IT+0x3b4>)
 8104b34:	4293      	cmp	r3, r2
 8104b36:	d03b      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	4a66      	ldr	r2, [pc, #408]	; (8104cd8 <HAL_DMA_Abort_IT+0x3b8>)
 8104b3e:	4293      	cmp	r3, r2
 8104b40:	d036      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	681b      	ldr	r3, [r3, #0]
 8104b46:	4a65      	ldr	r2, [pc, #404]	; (8104cdc <HAL_DMA_Abort_IT+0x3bc>)
 8104b48:	4293      	cmp	r3, r2
 8104b4a:	d031      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	4a63      	ldr	r2, [pc, #396]	; (8104ce0 <HAL_DMA_Abort_IT+0x3c0>)
 8104b52:	4293      	cmp	r3, r2
 8104b54:	d02c      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	681b      	ldr	r3, [r3, #0]
 8104b5a:	4a62      	ldr	r2, [pc, #392]	; (8104ce4 <HAL_DMA_Abort_IT+0x3c4>)
 8104b5c:	4293      	cmp	r3, r2
 8104b5e:	d027      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	4a60      	ldr	r2, [pc, #384]	; (8104ce8 <HAL_DMA_Abort_IT+0x3c8>)
 8104b66:	4293      	cmp	r3, r2
 8104b68:	d022      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	4a5f      	ldr	r2, [pc, #380]	; (8104cec <HAL_DMA_Abort_IT+0x3cc>)
 8104b70:	4293      	cmp	r3, r2
 8104b72:	d01d      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	4a5d      	ldr	r2, [pc, #372]	; (8104cf0 <HAL_DMA_Abort_IT+0x3d0>)
 8104b7a:	4293      	cmp	r3, r2
 8104b7c:	d018      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b7e:	687b      	ldr	r3, [r7, #4]
 8104b80:	681b      	ldr	r3, [r3, #0]
 8104b82:	4a5c      	ldr	r2, [pc, #368]	; (8104cf4 <HAL_DMA_Abort_IT+0x3d4>)
 8104b84:	4293      	cmp	r3, r2
 8104b86:	d013      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	681b      	ldr	r3, [r3, #0]
 8104b8c:	4a5a      	ldr	r2, [pc, #360]	; (8104cf8 <HAL_DMA_Abort_IT+0x3d8>)
 8104b8e:	4293      	cmp	r3, r2
 8104b90:	d00e      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	681b      	ldr	r3, [r3, #0]
 8104b96:	4a59      	ldr	r2, [pc, #356]	; (8104cfc <HAL_DMA_Abort_IT+0x3dc>)
 8104b98:	4293      	cmp	r3, r2
 8104b9a:	d009      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	681b      	ldr	r3, [r3, #0]
 8104ba0:	4a57      	ldr	r2, [pc, #348]	; (8104d00 <HAL_DMA_Abort_IT+0x3e0>)
 8104ba2:	4293      	cmp	r3, r2
 8104ba4:	d004      	beq.n	8104bb0 <HAL_DMA_Abort_IT+0x290>
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	681b      	ldr	r3, [r3, #0]
 8104baa:	4a56      	ldr	r2, [pc, #344]	; (8104d04 <HAL_DMA_Abort_IT+0x3e4>)
 8104bac:	4293      	cmp	r3, r2
 8104bae:	d108      	bne.n	8104bc2 <HAL_DMA_Abort_IT+0x2a2>
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	681b      	ldr	r3, [r3, #0]
 8104bb4:	681a      	ldr	r2, [r3, #0]
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	681b      	ldr	r3, [r3, #0]
 8104bba:	f022 0201 	bic.w	r2, r2, #1
 8104bbe:	601a      	str	r2, [r3, #0]
 8104bc0:	e007      	b.n	8104bd2 <HAL_DMA_Abort_IT+0x2b2>
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	681a      	ldr	r2, [r3, #0]
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	681b      	ldr	r3, [r3, #0]
 8104bcc:	f022 0201 	bic.w	r2, r2, #1
 8104bd0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	681b      	ldr	r3, [r3, #0]
 8104bd6:	4a3c      	ldr	r2, [pc, #240]	; (8104cc8 <HAL_DMA_Abort_IT+0x3a8>)
 8104bd8:	4293      	cmp	r3, r2
 8104bda:	d072      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104bdc:	687b      	ldr	r3, [r7, #4]
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	4a3a      	ldr	r2, [pc, #232]	; (8104ccc <HAL_DMA_Abort_IT+0x3ac>)
 8104be2:	4293      	cmp	r3, r2
 8104be4:	d06d      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	681b      	ldr	r3, [r3, #0]
 8104bea:	4a39      	ldr	r2, [pc, #228]	; (8104cd0 <HAL_DMA_Abort_IT+0x3b0>)
 8104bec:	4293      	cmp	r3, r2
 8104bee:	d068      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104bf0:	687b      	ldr	r3, [r7, #4]
 8104bf2:	681b      	ldr	r3, [r3, #0]
 8104bf4:	4a37      	ldr	r2, [pc, #220]	; (8104cd4 <HAL_DMA_Abort_IT+0x3b4>)
 8104bf6:	4293      	cmp	r3, r2
 8104bf8:	d063      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	681b      	ldr	r3, [r3, #0]
 8104bfe:	4a36      	ldr	r2, [pc, #216]	; (8104cd8 <HAL_DMA_Abort_IT+0x3b8>)
 8104c00:	4293      	cmp	r3, r2
 8104c02:	d05e      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c04:	687b      	ldr	r3, [r7, #4]
 8104c06:	681b      	ldr	r3, [r3, #0]
 8104c08:	4a34      	ldr	r2, [pc, #208]	; (8104cdc <HAL_DMA_Abort_IT+0x3bc>)
 8104c0a:	4293      	cmp	r3, r2
 8104c0c:	d059      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	681b      	ldr	r3, [r3, #0]
 8104c12:	4a33      	ldr	r2, [pc, #204]	; (8104ce0 <HAL_DMA_Abort_IT+0x3c0>)
 8104c14:	4293      	cmp	r3, r2
 8104c16:	d054      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c18:	687b      	ldr	r3, [r7, #4]
 8104c1a:	681b      	ldr	r3, [r3, #0]
 8104c1c:	4a31      	ldr	r2, [pc, #196]	; (8104ce4 <HAL_DMA_Abort_IT+0x3c4>)
 8104c1e:	4293      	cmp	r3, r2
 8104c20:	d04f      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c22:	687b      	ldr	r3, [r7, #4]
 8104c24:	681b      	ldr	r3, [r3, #0]
 8104c26:	4a30      	ldr	r2, [pc, #192]	; (8104ce8 <HAL_DMA_Abort_IT+0x3c8>)
 8104c28:	4293      	cmp	r3, r2
 8104c2a:	d04a      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	4a2e      	ldr	r2, [pc, #184]	; (8104cec <HAL_DMA_Abort_IT+0x3cc>)
 8104c32:	4293      	cmp	r3, r2
 8104c34:	d045      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	681b      	ldr	r3, [r3, #0]
 8104c3a:	4a2d      	ldr	r2, [pc, #180]	; (8104cf0 <HAL_DMA_Abort_IT+0x3d0>)
 8104c3c:	4293      	cmp	r3, r2
 8104c3e:	d040      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	681b      	ldr	r3, [r3, #0]
 8104c44:	4a2b      	ldr	r2, [pc, #172]	; (8104cf4 <HAL_DMA_Abort_IT+0x3d4>)
 8104c46:	4293      	cmp	r3, r2
 8104c48:	d03b      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c4a:	687b      	ldr	r3, [r7, #4]
 8104c4c:	681b      	ldr	r3, [r3, #0]
 8104c4e:	4a2a      	ldr	r2, [pc, #168]	; (8104cf8 <HAL_DMA_Abort_IT+0x3d8>)
 8104c50:	4293      	cmp	r3, r2
 8104c52:	d036      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c54:	687b      	ldr	r3, [r7, #4]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	4a28      	ldr	r2, [pc, #160]	; (8104cfc <HAL_DMA_Abort_IT+0x3dc>)
 8104c5a:	4293      	cmp	r3, r2
 8104c5c:	d031      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c5e:	687b      	ldr	r3, [r7, #4]
 8104c60:	681b      	ldr	r3, [r3, #0]
 8104c62:	4a27      	ldr	r2, [pc, #156]	; (8104d00 <HAL_DMA_Abort_IT+0x3e0>)
 8104c64:	4293      	cmp	r3, r2
 8104c66:	d02c      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	681b      	ldr	r3, [r3, #0]
 8104c6c:	4a25      	ldr	r2, [pc, #148]	; (8104d04 <HAL_DMA_Abort_IT+0x3e4>)
 8104c6e:	4293      	cmp	r3, r2
 8104c70:	d027      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c72:	687b      	ldr	r3, [r7, #4]
 8104c74:	681b      	ldr	r3, [r3, #0]
 8104c76:	4a24      	ldr	r2, [pc, #144]	; (8104d08 <HAL_DMA_Abort_IT+0x3e8>)
 8104c78:	4293      	cmp	r3, r2
 8104c7a:	d022      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c7c:	687b      	ldr	r3, [r7, #4]
 8104c7e:	681b      	ldr	r3, [r3, #0]
 8104c80:	4a22      	ldr	r2, [pc, #136]	; (8104d0c <HAL_DMA_Abort_IT+0x3ec>)
 8104c82:	4293      	cmp	r3, r2
 8104c84:	d01d      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	681b      	ldr	r3, [r3, #0]
 8104c8a:	4a21      	ldr	r2, [pc, #132]	; (8104d10 <HAL_DMA_Abort_IT+0x3f0>)
 8104c8c:	4293      	cmp	r3, r2
 8104c8e:	d018      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	681b      	ldr	r3, [r3, #0]
 8104c94:	4a1f      	ldr	r2, [pc, #124]	; (8104d14 <HAL_DMA_Abort_IT+0x3f4>)
 8104c96:	4293      	cmp	r3, r2
 8104c98:	d013      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	681b      	ldr	r3, [r3, #0]
 8104c9e:	4a1e      	ldr	r2, [pc, #120]	; (8104d18 <HAL_DMA_Abort_IT+0x3f8>)
 8104ca0:	4293      	cmp	r3, r2
 8104ca2:	d00e      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	681b      	ldr	r3, [r3, #0]
 8104ca8:	4a1c      	ldr	r2, [pc, #112]	; (8104d1c <HAL_DMA_Abort_IT+0x3fc>)
 8104caa:	4293      	cmp	r3, r2
 8104cac:	d009      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	4a1b      	ldr	r2, [pc, #108]	; (8104d20 <HAL_DMA_Abort_IT+0x400>)
 8104cb4:	4293      	cmp	r3, r2
 8104cb6:	d004      	beq.n	8104cc2 <HAL_DMA_Abort_IT+0x3a2>
 8104cb8:	687b      	ldr	r3, [r7, #4]
 8104cba:	681b      	ldr	r3, [r3, #0]
 8104cbc:	4a19      	ldr	r2, [pc, #100]	; (8104d24 <HAL_DMA_Abort_IT+0x404>)
 8104cbe:	4293      	cmp	r3, r2
 8104cc0:	d132      	bne.n	8104d28 <HAL_DMA_Abort_IT+0x408>
 8104cc2:	2301      	movs	r3, #1
 8104cc4:	e031      	b.n	8104d2a <HAL_DMA_Abort_IT+0x40a>
 8104cc6:	bf00      	nop
 8104cc8:	40020010 	.word	0x40020010
 8104ccc:	40020028 	.word	0x40020028
 8104cd0:	40020040 	.word	0x40020040
 8104cd4:	40020058 	.word	0x40020058
 8104cd8:	40020070 	.word	0x40020070
 8104cdc:	40020088 	.word	0x40020088
 8104ce0:	400200a0 	.word	0x400200a0
 8104ce4:	400200b8 	.word	0x400200b8
 8104ce8:	40020410 	.word	0x40020410
 8104cec:	40020428 	.word	0x40020428
 8104cf0:	40020440 	.word	0x40020440
 8104cf4:	40020458 	.word	0x40020458
 8104cf8:	40020470 	.word	0x40020470
 8104cfc:	40020488 	.word	0x40020488
 8104d00:	400204a0 	.word	0x400204a0
 8104d04:	400204b8 	.word	0x400204b8
 8104d08:	58025408 	.word	0x58025408
 8104d0c:	5802541c 	.word	0x5802541c
 8104d10:	58025430 	.word	0x58025430
 8104d14:	58025444 	.word	0x58025444
 8104d18:	58025458 	.word	0x58025458
 8104d1c:	5802546c 	.word	0x5802546c
 8104d20:	58025480 	.word	0x58025480
 8104d24:	58025494 	.word	0x58025494
 8104d28:	2300      	movs	r3, #0
 8104d2a:	2b00      	cmp	r3, #0
 8104d2c:	d028      	beq.n	8104d80 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104d2e:	687b      	ldr	r3, [r7, #4]
 8104d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d32:	681a      	ldr	r2, [r3, #0]
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104d3c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104d3e:	687b      	ldr	r3, [r7, #4]
 8104d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d42:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104d48:	f003 031f 	and.w	r3, r3, #31
 8104d4c:	2201      	movs	r2, #1
 8104d4e:	409a      	lsls	r2, r3
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104d58:	687a      	ldr	r2, [r7, #4]
 8104d5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104d5c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d62:	2b00      	cmp	r3, #0
 8104d64:	d00c      	beq.n	8104d80 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d6a:	681a      	ldr	r2, [r3, #0]
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104d74:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104d76:	687b      	ldr	r3, [r7, #4]
 8104d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104d7a:	687a      	ldr	r2, [r7, #4]
 8104d7c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104d7e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	2200      	movs	r2, #0
 8104d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104d88:	687b      	ldr	r3, [r7, #4]
 8104d8a:	2201      	movs	r2, #1
 8104d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d94:	2b00      	cmp	r3, #0
 8104d96:	d003      	beq.n	8104da0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d9c:	6878      	ldr	r0, [r7, #4]
 8104d9e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8104da0:	2300      	movs	r3, #0
}
 8104da2:	4618      	mov	r0, r3
 8104da4:	3710      	adds	r7, #16
 8104da6:	46bd      	mov	sp, r7
 8104da8:	bd80      	pop	{r7, pc}
 8104daa:	bf00      	nop

08104dac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8104dac:	b580      	push	{r7, lr}
 8104dae:	b08a      	sub	sp, #40	; 0x28
 8104db0:	af00      	add	r7, sp, #0
 8104db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8104db4:	2300      	movs	r3, #0
 8104db6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104db8:	4b67      	ldr	r3, [pc, #412]	; (8104f58 <HAL_DMA_IRQHandler+0x1ac>)
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	4a67      	ldr	r2, [pc, #412]	; (8104f5c <HAL_DMA_IRQHandler+0x1b0>)
 8104dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8104dc2:	0a9b      	lsrs	r3, r3, #10
 8104dc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104dc6:	687b      	ldr	r3, [r7, #4]
 8104dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104dca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104dd0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8104dd2:	6a3b      	ldr	r3, [r7, #32]
 8104dd4:	681b      	ldr	r3, [r3, #0]
 8104dd6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8104dd8:	69fb      	ldr	r3, [r7, #28]
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	4a5f      	ldr	r2, [pc, #380]	; (8104f60 <HAL_DMA_IRQHandler+0x1b4>)
 8104de4:	4293      	cmp	r3, r2
 8104de6:	d04a      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	4a5d      	ldr	r2, [pc, #372]	; (8104f64 <HAL_DMA_IRQHandler+0x1b8>)
 8104dee:	4293      	cmp	r3, r2
 8104df0:	d045      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	4a5c      	ldr	r2, [pc, #368]	; (8104f68 <HAL_DMA_IRQHandler+0x1bc>)
 8104df8:	4293      	cmp	r3, r2
 8104dfa:	d040      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	681b      	ldr	r3, [r3, #0]
 8104e00:	4a5a      	ldr	r2, [pc, #360]	; (8104f6c <HAL_DMA_IRQHandler+0x1c0>)
 8104e02:	4293      	cmp	r3, r2
 8104e04:	d03b      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	4a59      	ldr	r2, [pc, #356]	; (8104f70 <HAL_DMA_IRQHandler+0x1c4>)
 8104e0c:	4293      	cmp	r3, r2
 8104e0e:	d036      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	4a57      	ldr	r2, [pc, #348]	; (8104f74 <HAL_DMA_IRQHandler+0x1c8>)
 8104e16:	4293      	cmp	r3, r2
 8104e18:	d031      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	681b      	ldr	r3, [r3, #0]
 8104e1e:	4a56      	ldr	r2, [pc, #344]	; (8104f78 <HAL_DMA_IRQHandler+0x1cc>)
 8104e20:	4293      	cmp	r3, r2
 8104e22:	d02c      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e24:	687b      	ldr	r3, [r7, #4]
 8104e26:	681b      	ldr	r3, [r3, #0]
 8104e28:	4a54      	ldr	r2, [pc, #336]	; (8104f7c <HAL_DMA_IRQHandler+0x1d0>)
 8104e2a:	4293      	cmp	r3, r2
 8104e2c:	d027      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e2e:	687b      	ldr	r3, [r7, #4]
 8104e30:	681b      	ldr	r3, [r3, #0]
 8104e32:	4a53      	ldr	r2, [pc, #332]	; (8104f80 <HAL_DMA_IRQHandler+0x1d4>)
 8104e34:	4293      	cmp	r3, r2
 8104e36:	d022      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	681b      	ldr	r3, [r3, #0]
 8104e3c:	4a51      	ldr	r2, [pc, #324]	; (8104f84 <HAL_DMA_IRQHandler+0x1d8>)
 8104e3e:	4293      	cmp	r3, r2
 8104e40:	d01d      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	681b      	ldr	r3, [r3, #0]
 8104e46:	4a50      	ldr	r2, [pc, #320]	; (8104f88 <HAL_DMA_IRQHandler+0x1dc>)
 8104e48:	4293      	cmp	r3, r2
 8104e4a:	d018      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	4a4e      	ldr	r2, [pc, #312]	; (8104f8c <HAL_DMA_IRQHandler+0x1e0>)
 8104e52:	4293      	cmp	r3, r2
 8104e54:	d013      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	681b      	ldr	r3, [r3, #0]
 8104e5a:	4a4d      	ldr	r2, [pc, #308]	; (8104f90 <HAL_DMA_IRQHandler+0x1e4>)
 8104e5c:	4293      	cmp	r3, r2
 8104e5e:	d00e      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	4a4b      	ldr	r2, [pc, #300]	; (8104f94 <HAL_DMA_IRQHandler+0x1e8>)
 8104e66:	4293      	cmp	r3, r2
 8104e68:	d009      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e6a:	687b      	ldr	r3, [r7, #4]
 8104e6c:	681b      	ldr	r3, [r3, #0]
 8104e6e:	4a4a      	ldr	r2, [pc, #296]	; (8104f98 <HAL_DMA_IRQHandler+0x1ec>)
 8104e70:	4293      	cmp	r3, r2
 8104e72:	d004      	beq.n	8104e7e <HAL_DMA_IRQHandler+0xd2>
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	4a48      	ldr	r2, [pc, #288]	; (8104f9c <HAL_DMA_IRQHandler+0x1f0>)
 8104e7a:	4293      	cmp	r3, r2
 8104e7c:	d101      	bne.n	8104e82 <HAL_DMA_IRQHandler+0xd6>
 8104e7e:	2301      	movs	r3, #1
 8104e80:	e000      	b.n	8104e84 <HAL_DMA_IRQHandler+0xd8>
 8104e82:	2300      	movs	r3, #0
 8104e84:	2b00      	cmp	r3, #0
 8104e86:	f000 842b 	beq.w	81056e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e8e:	f003 031f 	and.w	r3, r3, #31
 8104e92:	2208      	movs	r2, #8
 8104e94:	409a      	lsls	r2, r3
 8104e96:	69bb      	ldr	r3, [r7, #24]
 8104e98:	4013      	ands	r3, r2
 8104e9a:	2b00      	cmp	r3, #0
 8104e9c:	f000 80a2 	beq.w	8104fe4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	681b      	ldr	r3, [r3, #0]
 8104ea4:	4a2e      	ldr	r2, [pc, #184]	; (8104f60 <HAL_DMA_IRQHandler+0x1b4>)
 8104ea6:	4293      	cmp	r3, r2
 8104ea8:	d04a      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	4a2d      	ldr	r2, [pc, #180]	; (8104f64 <HAL_DMA_IRQHandler+0x1b8>)
 8104eb0:	4293      	cmp	r3, r2
 8104eb2:	d045      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	4a2b      	ldr	r2, [pc, #172]	; (8104f68 <HAL_DMA_IRQHandler+0x1bc>)
 8104eba:	4293      	cmp	r3, r2
 8104ebc:	d040      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	681b      	ldr	r3, [r3, #0]
 8104ec2:	4a2a      	ldr	r2, [pc, #168]	; (8104f6c <HAL_DMA_IRQHandler+0x1c0>)
 8104ec4:	4293      	cmp	r3, r2
 8104ec6:	d03b      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104ec8:	687b      	ldr	r3, [r7, #4]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	4a28      	ldr	r2, [pc, #160]	; (8104f70 <HAL_DMA_IRQHandler+0x1c4>)
 8104ece:	4293      	cmp	r3, r2
 8104ed0:	d036      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	681b      	ldr	r3, [r3, #0]
 8104ed6:	4a27      	ldr	r2, [pc, #156]	; (8104f74 <HAL_DMA_IRQHandler+0x1c8>)
 8104ed8:	4293      	cmp	r3, r2
 8104eda:	d031      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	4a25      	ldr	r2, [pc, #148]	; (8104f78 <HAL_DMA_IRQHandler+0x1cc>)
 8104ee2:	4293      	cmp	r3, r2
 8104ee4:	d02c      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	681b      	ldr	r3, [r3, #0]
 8104eea:	4a24      	ldr	r2, [pc, #144]	; (8104f7c <HAL_DMA_IRQHandler+0x1d0>)
 8104eec:	4293      	cmp	r3, r2
 8104eee:	d027      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	4a22      	ldr	r2, [pc, #136]	; (8104f80 <HAL_DMA_IRQHandler+0x1d4>)
 8104ef6:	4293      	cmp	r3, r2
 8104ef8:	d022      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104efa:	687b      	ldr	r3, [r7, #4]
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	4a21      	ldr	r2, [pc, #132]	; (8104f84 <HAL_DMA_IRQHandler+0x1d8>)
 8104f00:	4293      	cmp	r3, r2
 8104f02:	d01d      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	4a1f      	ldr	r2, [pc, #124]	; (8104f88 <HAL_DMA_IRQHandler+0x1dc>)
 8104f0a:	4293      	cmp	r3, r2
 8104f0c:	d018      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	681b      	ldr	r3, [r3, #0]
 8104f12:	4a1e      	ldr	r2, [pc, #120]	; (8104f8c <HAL_DMA_IRQHandler+0x1e0>)
 8104f14:	4293      	cmp	r3, r2
 8104f16:	d013      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	681b      	ldr	r3, [r3, #0]
 8104f1c:	4a1c      	ldr	r2, [pc, #112]	; (8104f90 <HAL_DMA_IRQHandler+0x1e4>)
 8104f1e:	4293      	cmp	r3, r2
 8104f20:	d00e      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	4a1b      	ldr	r2, [pc, #108]	; (8104f94 <HAL_DMA_IRQHandler+0x1e8>)
 8104f28:	4293      	cmp	r3, r2
 8104f2a:	d009      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	681b      	ldr	r3, [r3, #0]
 8104f30:	4a19      	ldr	r2, [pc, #100]	; (8104f98 <HAL_DMA_IRQHandler+0x1ec>)
 8104f32:	4293      	cmp	r3, r2
 8104f34:	d004      	beq.n	8104f40 <HAL_DMA_IRQHandler+0x194>
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	4a18      	ldr	r2, [pc, #96]	; (8104f9c <HAL_DMA_IRQHandler+0x1f0>)
 8104f3c:	4293      	cmp	r3, r2
 8104f3e:	d12f      	bne.n	8104fa0 <HAL_DMA_IRQHandler+0x1f4>
 8104f40:	687b      	ldr	r3, [r7, #4]
 8104f42:	681b      	ldr	r3, [r3, #0]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	f003 0304 	and.w	r3, r3, #4
 8104f4a:	2b00      	cmp	r3, #0
 8104f4c:	bf14      	ite	ne
 8104f4e:	2301      	movne	r3, #1
 8104f50:	2300      	moveq	r3, #0
 8104f52:	b2db      	uxtb	r3, r3
 8104f54:	e02e      	b.n	8104fb4 <HAL_DMA_IRQHandler+0x208>
 8104f56:	bf00      	nop
 8104f58:	10000000 	.word	0x10000000
 8104f5c:	1b4e81b5 	.word	0x1b4e81b5
 8104f60:	40020010 	.word	0x40020010
 8104f64:	40020028 	.word	0x40020028
 8104f68:	40020040 	.word	0x40020040
 8104f6c:	40020058 	.word	0x40020058
 8104f70:	40020070 	.word	0x40020070
 8104f74:	40020088 	.word	0x40020088
 8104f78:	400200a0 	.word	0x400200a0
 8104f7c:	400200b8 	.word	0x400200b8
 8104f80:	40020410 	.word	0x40020410
 8104f84:	40020428 	.word	0x40020428
 8104f88:	40020440 	.word	0x40020440
 8104f8c:	40020458 	.word	0x40020458
 8104f90:	40020470 	.word	0x40020470
 8104f94:	40020488 	.word	0x40020488
 8104f98:	400204a0 	.word	0x400204a0
 8104f9c:	400204b8 	.word	0x400204b8
 8104fa0:	687b      	ldr	r3, [r7, #4]
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	681b      	ldr	r3, [r3, #0]
 8104fa6:	f003 0308 	and.w	r3, r3, #8
 8104faa:	2b00      	cmp	r3, #0
 8104fac:	bf14      	ite	ne
 8104fae:	2301      	movne	r3, #1
 8104fb0:	2300      	moveq	r3, #0
 8104fb2:	b2db      	uxtb	r3, r3
 8104fb4:	2b00      	cmp	r3, #0
 8104fb6:	d015      	beq.n	8104fe4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	681b      	ldr	r3, [r3, #0]
 8104fbc:	681a      	ldr	r2, [r3, #0]
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	f022 0204 	bic.w	r2, r2, #4
 8104fc6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fcc:	f003 031f 	and.w	r3, r3, #31
 8104fd0:	2208      	movs	r2, #8
 8104fd2:	409a      	lsls	r2, r3
 8104fd4:	6a3b      	ldr	r3, [r7, #32]
 8104fd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8104fd8:	687b      	ldr	r3, [r7, #4]
 8104fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104fdc:	f043 0201 	orr.w	r2, r3, #1
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104fe4:	687b      	ldr	r3, [r7, #4]
 8104fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fe8:	f003 031f 	and.w	r3, r3, #31
 8104fec:	69ba      	ldr	r2, [r7, #24]
 8104fee:	fa22 f303 	lsr.w	r3, r2, r3
 8104ff2:	f003 0301 	and.w	r3, r3, #1
 8104ff6:	2b00      	cmp	r3, #0
 8104ff8:	d06e      	beq.n	81050d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	4a69      	ldr	r2, [pc, #420]	; (81051a4 <HAL_DMA_IRQHandler+0x3f8>)
 8105000:	4293      	cmp	r3, r2
 8105002:	d04a      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	4a67      	ldr	r2, [pc, #412]	; (81051a8 <HAL_DMA_IRQHandler+0x3fc>)
 810500a:	4293      	cmp	r3, r2
 810500c:	d045      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 810500e:	687b      	ldr	r3, [r7, #4]
 8105010:	681b      	ldr	r3, [r3, #0]
 8105012:	4a66      	ldr	r2, [pc, #408]	; (81051ac <HAL_DMA_IRQHandler+0x400>)
 8105014:	4293      	cmp	r3, r2
 8105016:	d040      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	681b      	ldr	r3, [r3, #0]
 810501c:	4a64      	ldr	r2, [pc, #400]	; (81051b0 <HAL_DMA_IRQHandler+0x404>)
 810501e:	4293      	cmp	r3, r2
 8105020:	d03b      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105022:	687b      	ldr	r3, [r7, #4]
 8105024:	681b      	ldr	r3, [r3, #0]
 8105026:	4a63      	ldr	r2, [pc, #396]	; (81051b4 <HAL_DMA_IRQHandler+0x408>)
 8105028:	4293      	cmp	r3, r2
 810502a:	d036      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	681b      	ldr	r3, [r3, #0]
 8105030:	4a61      	ldr	r2, [pc, #388]	; (81051b8 <HAL_DMA_IRQHandler+0x40c>)
 8105032:	4293      	cmp	r3, r2
 8105034:	d031      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	681b      	ldr	r3, [r3, #0]
 810503a:	4a60      	ldr	r2, [pc, #384]	; (81051bc <HAL_DMA_IRQHandler+0x410>)
 810503c:	4293      	cmp	r3, r2
 810503e:	d02c      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105040:	687b      	ldr	r3, [r7, #4]
 8105042:	681b      	ldr	r3, [r3, #0]
 8105044:	4a5e      	ldr	r2, [pc, #376]	; (81051c0 <HAL_DMA_IRQHandler+0x414>)
 8105046:	4293      	cmp	r3, r2
 8105048:	d027      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 810504a:	687b      	ldr	r3, [r7, #4]
 810504c:	681b      	ldr	r3, [r3, #0]
 810504e:	4a5d      	ldr	r2, [pc, #372]	; (81051c4 <HAL_DMA_IRQHandler+0x418>)
 8105050:	4293      	cmp	r3, r2
 8105052:	d022      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	681b      	ldr	r3, [r3, #0]
 8105058:	4a5b      	ldr	r2, [pc, #364]	; (81051c8 <HAL_DMA_IRQHandler+0x41c>)
 810505a:	4293      	cmp	r3, r2
 810505c:	d01d      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 810505e:	687b      	ldr	r3, [r7, #4]
 8105060:	681b      	ldr	r3, [r3, #0]
 8105062:	4a5a      	ldr	r2, [pc, #360]	; (81051cc <HAL_DMA_IRQHandler+0x420>)
 8105064:	4293      	cmp	r3, r2
 8105066:	d018      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	681b      	ldr	r3, [r3, #0]
 810506c:	4a58      	ldr	r2, [pc, #352]	; (81051d0 <HAL_DMA_IRQHandler+0x424>)
 810506e:	4293      	cmp	r3, r2
 8105070:	d013      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	4a57      	ldr	r2, [pc, #348]	; (81051d4 <HAL_DMA_IRQHandler+0x428>)
 8105078:	4293      	cmp	r3, r2
 810507a:	d00e      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	4a55      	ldr	r2, [pc, #340]	; (81051d8 <HAL_DMA_IRQHandler+0x42c>)
 8105082:	4293      	cmp	r3, r2
 8105084:	d009      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105086:	687b      	ldr	r3, [r7, #4]
 8105088:	681b      	ldr	r3, [r3, #0]
 810508a:	4a54      	ldr	r2, [pc, #336]	; (81051dc <HAL_DMA_IRQHandler+0x430>)
 810508c:	4293      	cmp	r3, r2
 810508e:	d004      	beq.n	810509a <HAL_DMA_IRQHandler+0x2ee>
 8105090:	687b      	ldr	r3, [r7, #4]
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	4a52      	ldr	r2, [pc, #328]	; (81051e0 <HAL_DMA_IRQHandler+0x434>)
 8105096:	4293      	cmp	r3, r2
 8105098:	d10a      	bne.n	81050b0 <HAL_DMA_IRQHandler+0x304>
 810509a:	687b      	ldr	r3, [r7, #4]
 810509c:	681b      	ldr	r3, [r3, #0]
 810509e:	695b      	ldr	r3, [r3, #20]
 81050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81050a4:	2b00      	cmp	r3, #0
 81050a6:	bf14      	ite	ne
 81050a8:	2301      	movne	r3, #1
 81050aa:	2300      	moveq	r3, #0
 81050ac:	b2db      	uxtb	r3, r3
 81050ae:	e003      	b.n	81050b8 <HAL_DMA_IRQHandler+0x30c>
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	681b      	ldr	r3, [r3, #0]
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	2300      	movs	r3, #0
 81050b8:	2b00      	cmp	r3, #0
 81050ba:	d00d      	beq.n	81050d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81050bc:	687b      	ldr	r3, [r7, #4]
 81050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050c0:	f003 031f 	and.w	r3, r3, #31
 81050c4:	2201      	movs	r2, #1
 81050c6:	409a      	lsls	r2, r3
 81050c8:	6a3b      	ldr	r3, [r7, #32]
 81050ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81050cc:	687b      	ldr	r3, [r7, #4]
 81050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81050d0:	f043 0202 	orr.w	r2, r3, #2
 81050d4:	687b      	ldr	r3, [r7, #4]
 81050d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81050d8:	687b      	ldr	r3, [r7, #4]
 81050da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050dc:	f003 031f 	and.w	r3, r3, #31
 81050e0:	2204      	movs	r2, #4
 81050e2:	409a      	lsls	r2, r3
 81050e4:	69bb      	ldr	r3, [r7, #24]
 81050e6:	4013      	ands	r3, r2
 81050e8:	2b00      	cmp	r3, #0
 81050ea:	f000 808f 	beq.w	810520c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	681b      	ldr	r3, [r3, #0]
 81050f2:	4a2c      	ldr	r2, [pc, #176]	; (81051a4 <HAL_DMA_IRQHandler+0x3f8>)
 81050f4:	4293      	cmp	r3, r2
 81050f6:	d04a      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	4a2a      	ldr	r2, [pc, #168]	; (81051a8 <HAL_DMA_IRQHandler+0x3fc>)
 81050fe:	4293      	cmp	r3, r2
 8105100:	d045      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	681b      	ldr	r3, [r3, #0]
 8105106:	4a29      	ldr	r2, [pc, #164]	; (81051ac <HAL_DMA_IRQHandler+0x400>)
 8105108:	4293      	cmp	r3, r2
 810510a:	d040      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 810510c:	687b      	ldr	r3, [r7, #4]
 810510e:	681b      	ldr	r3, [r3, #0]
 8105110:	4a27      	ldr	r2, [pc, #156]	; (81051b0 <HAL_DMA_IRQHandler+0x404>)
 8105112:	4293      	cmp	r3, r2
 8105114:	d03b      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	4a26      	ldr	r2, [pc, #152]	; (81051b4 <HAL_DMA_IRQHandler+0x408>)
 810511c:	4293      	cmp	r3, r2
 810511e:	d036      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	681b      	ldr	r3, [r3, #0]
 8105124:	4a24      	ldr	r2, [pc, #144]	; (81051b8 <HAL_DMA_IRQHandler+0x40c>)
 8105126:	4293      	cmp	r3, r2
 8105128:	d031      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	4a23      	ldr	r2, [pc, #140]	; (81051bc <HAL_DMA_IRQHandler+0x410>)
 8105130:	4293      	cmp	r3, r2
 8105132:	d02c      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	681b      	ldr	r3, [r3, #0]
 8105138:	4a21      	ldr	r2, [pc, #132]	; (81051c0 <HAL_DMA_IRQHandler+0x414>)
 810513a:	4293      	cmp	r3, r2
 810513c:	d027      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 810513e:	687b      	ldr	r3, [r7, #4]
 8105140:	681b      	ldr	r3, [r3, #0]
 8105142:	4a20      	ldr	r2, [pc, #128]	; (81051c4 <HAL_DMA_IRQHandler+0x418>)
 8105144:	4293      	cmp	r3, r2
 8105146:	d022      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 8105148:	687b      	ldr	r3, [r7, #4]
 810514a:	681b      	ldr	r3, [r3, #0]
 810514c:	4a1e      	ldr	r2, [pc, #120]	; (81051c8 <HAL_DMA_IRQHandler+0x41c>)
 810514e:	4293      	cmp	r3, r2
 8105150:	d01d      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 8105152:	687b      	ldr	r3, [r7, #4]
 8105154:	681b      	ldr	r3, [r3, #0]
 8105156:	4a1d      	ldr	r2, [pc, #116]	; (81051cc <HAL_DMA_IRQHandler+0x420>)
 8105158:	4293      	cmp	r3, r2
 810515a:	d018      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	4a1b      	ldr	r2, [pc, #108]	; (81051d0 <HAL_DMA_IRQHandler+0x424>)
 8105162:	4293      	cmp	r3, r2
 8105164:	d013      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	4a1a      	ldr	r2, [pc, #104]	; (81051d4 <HAL_DMA_IRQHandler+0x428>)
 810516c:	4293      	cmp	r3, r2
 810516e:	d00e      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	4a18      	ldr	r2, [pc, #96]	; (81051d8 <HAL_DMA_IRQHandler+0x42c>)
 8105176:	4293      	cmp	r3, r2
 8105178:	d009      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	4a17      	ldr	r2, [pc, #92]	; (81051dc <HAL_DMA_IRQHandler+0x430>)
 8105180:	4293      	cmp	r3, r2
 8105182:	d004      	beq.n	810518e <HAL_DMA_IRQHandler+0x3e2>
 8105184:	687b      	ldr	r3, [r7, #4]
 8105186:	681b      	ldr	r3, [r3, #0]
 8105188:	4a15      	ldr	r2, [pc, #84]	; (81051e0 <HAL_DMA_IRQHandler+0x434>)
 810518a:	4293      	cmp	r3, r2
 810518c:	d12a      	bne.n	81051e4 <HAL_DMA_IRQHandler+0x438>
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	681b      	ldr	r3, [r3, #0]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	f003 0302 	and.w	r3, r3, #2
 8105198:	2b00      	cmp	r3, #0
 810519a:	bf14      	ite	ne
 810519c:	2301      	movne	r3, #1
 810519e:	2300      	moveq	r3, #0
 81051a0:	b2db      	uxtb	r3, r3
 81051a2:	e023      	b.n	81051ec <HAL_DMA_IRQHandler+0x440>
 81051a4:	40020010 	.word	0x40020010
 81051a8:	40020028 	.word	0x40020028
 81051ac:	40020040 	.word	0x40020040
 81051b0:	40020058 	.word	0x40020058
 81051b4:	40020070 	.word	0x40020070
 81051b8:	40020088 	.word	0x40020088
 81051bc:	400200a0 	.word	0x400200a0
 81051c0:	400200b8 	.word	0x400200b8
 81051c4:	40020410 	.word	0x40020410
 81051c8:	40020428 	.word	0x40020428
 81051cc:	40020440 	.word	0x40020440
 81051d0:	40020458 	.word	0x40020458
 81051d4:	40020470 	.word	0x40020470
 81051d8:	40020488 	.word	0x40020488
 81051dc:	400204a0 	.word	0x400204a0
 81051e0:	400204b8 	.word	0x400204b8
 81051e4:	687b      	ldr	r3, [r7, #4]
 81051e6:	681b      	ldr	r3, [r3, #0]
 81051e8:	681b      	ldr	r3, [r3, #0]
 81051ea:	2300      	movs	r3, #0
 81051ec:	2b00      	cmp	r3, #0
 81051ee:	d00d      	beq.n	810520c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81051f4:	f003 031f 	and.w	r3, r3, #31
 81051f8:	2204      	movs	r2, #4
 81051fa:	409a      	lsls	r2, r3
 81051fc:	6a3b      	ldr	r3, [r7, #32]
 81051fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8105200:	687b      	ldr	r3, [r7, #4]
 8105202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105204:	f043 0204 	orr.w	r2, r3, #4
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810520c:	687b      	ldr	r3, [r7, #4]
 810520e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105210:	f003 031f 	and.w	r3, r3, #31
 8105214:	2210      	movs	r2, #16
 8105216:	409a      	lsls	r2, r3
 8105218:	69bb      	ldr	r3, [r7, #24]
 810521a:	4013      	ands	r3, r2
 810521c:	2b00      	cmp	r3, #0
 810521e:	f000 80a6 	beq.w	810536e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	4a85      	ldr	r2, [pc, #532]	; (810543c <HAL_DMA_IRQHandler+0x690>)
 8105228:	4293      	cmp	r3, r2
 810522a:	d04a      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	4a83      	ldr	r2, [pc, #524]	; (8105440 <HAL_DMA_IRQHandler+0x694>)
 8105232:	4293      	cmp	r3, r2
 8105234:	d045      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 8105236:	687b      	ldr	r3, [r7, #4]
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	4a82      	ldr	r2, [pc, #520]	; (8105444 <HAL_DMA_IRQHandler+0x698>)
 810523c:	4293      	cmp	r3, r2
 810523e:	d040      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	681b      	ldr	r3, [r3, #0]
 8105244:	4a80      	ldr	r2, [pc, #512]	; (8105448 <HAL_DMA_IRQHandler+0x69c>)
 8105246:	4293      	cmp	r3, r2
 8105248:	d03b      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 810524a:	687b      	ldr	r3, [r7, #4]
 810524c:	681b      	ldr	r3, [r3, #0]
 810524e:	4a7f      	ldr	r2, [pc, #508]	; (810544c <HAL_DMA_IRQHandler+0x6a0>)
 8105250:	4293      	cmp	r3, r2
 8105252:	d036      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	681b      	ldr	r3, [r3, #0]
 8105258:	4a7d      	ldr	r2, [pc, #500]	; (8105450 <HAL_DMA_IRQHandler+0x6a4>)
 810525a:	4293      	cmp	r3, r2
 810525c:	d031      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	681b      	ldr	r3, [r3, #0]
 8105262:	4a7c      	ldr	r2, [pc, #496]	; (8105454 <HAL_DMA_IRQHandler+0x6a8>)
 8105264:	4293      	cmp	r3, r2
 8105266:	d02c      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	681b      	ldr	r3, [r3, #0]
 810526c:	4a7a      	ldr	r2, [pc, #488]	; (8105458 <HAL_DMA_IRQHandler+0x6ac>)
 810526e:	4293      	cmp	r3, r2
 8105270:	d027      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	681b      	ldr	r3, [r3, #0]
 8105276:	4a79      	ldr	r2, [pc, #484]	; (810545c <HAL_DMA_IRQHandler+0x6b0>)
 8105278:	4293      	cmp	r3, r2
 810527a:	d022      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	681b      	ldr	r3, [r3, #0]
 8105280:	4a77      	ldr	r2, [pc, #476]	; (8105460 <HAL_DMA_IRQHandler+0x6b4>)
 8105282:	4293      	cmp	r3, r2
 8105284:	d01d      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	681b      	ldr	r3, [r3, #0]
 810528a:	4a76      	ldr	r2, [pc, #472]	; (8105464 <HAL_DMA_IRQHandler+0x6b8>)
 810528c:	4293      	cmp	r3, r2
 810528e:	d018      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	681b      	ldr	r3, [r3, #0]
 8105294:	4a74      	ldr	r2, [pc, #464]	; (8105468 <HAL_DMA_IRQHandler+0x6bc>)
 8105296:	4293      	cmp	r3, r2
 8105298:	d013      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 810529a:	687b      	ldr	r3, [r7, #4]
 810529c:	681b      	ldr	r3, [r3, #0]
 810529e:	4a73      	ldr	r2, [pc, #460]	; (810546c <HAL_DMA_IRQHandler+0x6c0>)
 81052a0:	4293      	cmp	r3, r2
 81052a2:	d00e      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	681b      	ldr	r3, [r3, #0]
 81052a8:	4a71      	ldr	r2, [pc, #452]	; (8105470 <HAL_DMA_IRQHandler+0x6c4>)
 81052aa:	4293      	cmp	r3, r2
 81052ac:	d009      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	681b      	ldr	r3, [r3, #0]
 81052b2:	4a70      	ldr	r2, [pc, #448]	; (8105474 <HAL_DMA_IRQHandler+0x6c8>)
 81052b4:	4293      	cmp	r3, r2
 81052b6:	d004      	beq.n	81052c2 <HAL_DMA_IRQHandler+0x516>
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	4a6e      	ldr	r2, [pc, #440]	; (8105478 <HAL_DMA_IRQHandler+0x6cc>)
 81052be:	4293      	cmp	r3, r2
 81052c0:	d10a      	bne.n	81052d8 <HAL_DMA_IRQHandler+0x52c>
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	681b      	ldr	r3, [r3, #0]
 81052c6:	681b      	ldr	r3, [r3, #0]
 81052c8:	f003 0308 	and.w	r3, r3, #8
 81052cc:	2b00      	cmp	r3, #0
 81052ce:	bf14      	ite	ne
 81052d0:	2301      	movne	r3, #1
 81052d2:	2300      	moveq	r3, #0
 81052d4:	b2db      	uxtb	r3, r3
 81052d6:	e009      	b.n	81052ec <HAL_DMA_IRQHandler+0x540>
 81052d8:	687b      	ldr	r3, [r7, #4]
 81052da:	681b      	ldr	r3, [r3, #0]
 81052dc:	681b      	ldr	r3, [r3, #0]
 81052de:	f003 0304 	and.w	r3, r3, #4
 81052e2:	2b00      	cmp	r3, #0
 81052e4:	bf14      	ite	ne
 81052e6:	2301      	movne	r3, #1
 81052e8:	2300      	moveq	r3, #0
 81052ea:	b2db      	uxtb	r3, r3
 81052ec:	2b00      	cmp	r3, #0
 81052ee:	d03e      	beq.n	810536e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052f4:	f003 031f 	and.w	r3, r3, #31
 81052f8:	2210      	movs	r2, #16
 81052fa:	409a      	lsls	r2, r3
 81052fc:	6a3b      	ldr	r3, [r7, #32]
 81052fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	681b      	ldr	r3, [r3, #0]
 8105304:	681b      	ldr	r3, [r3, #0]
 8105306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810530a:	2b00      	cmp	r3, #0
 810530c:	d018      	beq.n	8105340 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	681b      	ldr	r3, [r3, #0]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105318:	2b00      	cmp	r3, #0
 810531a:	d108      	bne.n	810532e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 810531c:	687b      	ldr	r3, [r7, #4]
 810531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105320:	2b00      	cmp	r3, #0
 8105322:	d024      	beq.n	810536e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105328:	6878      	ldr	r0, [r7, #4]
 810532a:	4798      	blx	r3
 810532c:	e01f      	b.n	810536e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105332:	2b00      	cmp	r3, #0
 8105334:	d01b      	beq.n	810536e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810533a:	6878      	ldr	r0, [r7, #4]
 810533c:	4798      	blx	r3
 810533e:	e016      	b.n	810536e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105340:	687b      	ldr	r3, [r7, #4]
 8105342:	681b      	ldr	r3, [r3, #0]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810534a:	2b00      	cmp	r3, #0
 810534c:	d107      	bne.n	810535e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	681b      	ldr	r3, [r3, #0]
 8105352:	681a      	ldr	r2, [r3, #0]
 8105354:	687b      	ldr	r3, [r7, #4]
 8105356:	681b      	ldr	r3, [r3, #0]
 8105358:	f022 0208 	bic.w	r2, r2, #8
 810535c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105362:	2b00      	cmp	r3, #0
 8105364:	d003      	beq.n	810536e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810536a:	6878      	ldr	r0, [r7, #4]
 810536c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810536e:	687b      	ldr	r3, [r7, #4]
 8105370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105372:	f003 031f 	and.w	r3, r3, #31
 8105376:	2220      	movs	r2, #32
 8105378:	409a      	lsls	r2, r3
 810537a:	69bb      	ldr	r3, [r7, #24]
 810537c:	4013      	ands	r3, r2
 810537e:	2b00      	cmp	r3, #0
 8105380:	f000 8110 	beq.w	81055a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	681b      	ldr	r3, [r3, #0]
 8105388:	4a2c      	ldr	r2, [pc, #176]	; (810543c <HAL_DMA_IRQHandler+0x690>)
 810538a:	4293      	cmp	r3, r2
 810538c:	d04a      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	681b      	ldr	r3, [r3, #0]
 8105392:	4a2b      	ldr	r2, [pc, #172]	; (8105440 <HAL_DMA_IRQHandler+0x694>)
 8105394:	4293      	cmp	r3, r2
 8105396:	d045      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	681b      	ldr	r3, [r3, #0]
 810539c:	4a29      	ldr	r2, [pc, #164]	; (8105444 <HAL_DMA_IRQHandler+0x698>)
 810539e:	4293      	cmp	r3, r2
 81053a0:	d040      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	681b      	ldr	r3, [r3, #0]
 81053a6:	4a28      	ldr	r2, [pc, #160]	; (8105448 <HAL_DMA_IRQHandler+0x69c>)
 81053a8:	4293      	cmp	r3, r2
 81053aa:	d03b      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053ac:	687b      	ldr	r3, [r7, #4]
 81053ae:	681b      	ldr	r3, [r3, #0]
 81053b0:	4a26      	ldr	r2, [pc, #152]	; (810544c <HAL_DMA_IRQHandler+0x6a0>)
 81053b2:	4293      	cmp	r3, r2
 81053b4:	d036      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	681b      	ldr	r3, [r3, #0]
 81053ba:	4a25      	ldr	r2, [pc, #148]	; (8105450 <HAL_DMA_IRQHandler+0x6a4>)
 81053bc:	4293      	cmp	r3, r2
 81053be:	d031      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053c0:	687b      	ldr	r3, [r7, #4]
 81053c2:	681b      	ldr	r3, [r3, #0]
 81053c4:	4a23      	ldr	r2, [pc, #140]	; (8105454 <HAL_DMA_IRQHandler+0x6a8>)
 81053c6:	4293      	cmp	r3, r2
 81053c8:	d02c      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681b      	ldr	r3, [r3, #0]
 81053ce:	4a22      	ldr	r2, [pc, #136]	; (8105458 <HAL_DMA_IRQHandler+0x6ac>)
 81053d0:	4293      	cmp	r3, r2
 81053d2:	d027      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	681b      	ldr	r3, [r3, #0]
 81053d8:	4a20      	ldr	r2, [pc, #128]	; (810545c <HAL_DMA_IRQHandler+0x6b0>)
 81053da:	4293      	cmp	r3, r2
 81053dc:	d022      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	681b      	ldr	r3, [r3, #0]
 81053e2:	4a1f      	ldr	r2, [pc, #124]	; (8105460 <HAL_DMA_IRQHandler+0x6b4>)
 81053e4:	4293      	cmp	r3, r2
 81053e6:	d01d      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	681b      	ldr	r3, [r3, #0]
 81053ec:	4a1d      	ldr	r2, [pc, #116]	; (8105464 <HAL_DMA_IRQHandler+0x6b8>)
 81053ee:	4293      	cmp	r3, r2
 81053f0:	d018      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	681b      	ldr	r3, [r3, #0]
 81053f6:	4a1c      	ldr	r2, [pc, #112]	; (8105468 <HAL_DMA_IRQHandler+0x6bc>)
 81053f8:	4293      	cmp	r3, r2
 81053fa:	d013      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	681b      	ldr	r3, [r3, #0]
 8105400:	4a1a      	ldr	r2, [pc, #104]	; (810546c <HAL_DMA_IRQHandler+0x6c0>)
 8105402:	4293      	cmp	r3, r2
 8105404:	d00e      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	681b      	ldr	r3, [r3, #0]
 810540a:	4a19      	ldr	r2, [pc, #100]	; (8105470 <HAL_DMA_IRQHandler+0x6c4>)
 810540c:	4293      	cmp	r3, r2
 810540e:	d009      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	681b      	ldr	r3, [r3, #0]
 8105414:	4a17      	ldr	r2, [pc, #92]	; (8105474 <HAL_DMA_IRQHandler+0x6c8>)
 8105416:	4293      	cmp	r3, r2
 8105418:	d004      	beq.n	8105424 <HAL_DMA_IRQHandler+0x678>
 810541a:	687b      	ldr	r3, [r7, #4]
 810541c:	681b      	ldr	r3, [r3, #0]
 810541e:	4a16      	ldr	r2, [pc, #88]	; (8105478 <HAL_DMA_IRQHandler+0x6cc>)
 8105420:	4293      	cmp	r3, r2
 8105422:	d12b      	bne.n	810547c <HAL_DMA_IRQHandler+0x6d0>
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	681b      	ldr	r3, [r3, #0]
 8105428:	681b      	ldr	r3, [r3, #0]
 810542a:	f003 0310 	and.w	r3, r3, #16
 810542e:	2b00      	cmp	r3, #0
 8105430:	bf14      	ite	ne
 8105432:	2301      	movne	r3, #1
 8105434:	2300      	moveq	r3, #0
 8105436:	b2db      	uxtb	r3, r3
 8105438:	e02a      	b.n	8105490 <HAL_DMA_IRQHandler+0x6e4>
 810543a:	bf00      	nop
 810543c:	40020010 	.word	0x40020010
 8105440:	40020028 	.word	0x40020028
 8105444:	40020040 	.word	0x40020040
 8105448:	40020058 	.word	0x40020058
 810544c:	40020070 	.word	0x40020070
 8105450:	40020088 	.word	0x40020088
 8105454:	400200a0 	.word	0x400200a0
 8105458:	400200b8 	.word	0x400200b8
 810545c:	40020410 	.word	0x40020410
 8105460:	40020428 	.word	0x40020428
 8105464:	40020440 	.word	0x40020440
 8105468:	40020458 	.word	0x40020458
 810546c:	40020470 	.word	0x40020470
 8105470:	40020488 	.word	0x40020488
 8105474:	400204a0 	.word	0x400204a0
 8105478:	400204b8 	.word	0x400204b8
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	681b      	ldr	r3, [r3, #0]
 8105480:	681b      	ldr	r3, [r3, #0]
 8105482:	f003 0302 	and.w	r3, r3, #2
 8105486:	2b00      	cmp	r3, #0
 8105488:	bf14      	ite	ne
 810548a:	2301      	movne	r3, #1
 810548c:	2300      	moveq	r3, #0
 810548e:	b2db      	uxtb	r3, r3
 8105490:	2b00      	cmp	r3, #0
 8105492:	f000 8087 	beq.w	81055a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810549a:	f003 031f 	and.w	r3, r3, #31
 810549e:	2220      	movs	r2, #32
 81054a0:	409a      	lsls	r2, r3
 81054a2:	6a3b      	ldr	r3, [r7, #32]
 81054a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81054ac:	b2db      	uxtb	r3, r3
 81054ae:	2b04      	cmp	r3, #4
 81054b0:	d139      	bne.n	8105526 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	681a      	ldr	r2, [r3, #0]
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	681b      	ldr	r3, [r3, #0]
 81054bc:	f022 0216 	bic.w	r2, r2, #22
 81054c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	681b      	ldr	r3, [r3, #0]
 81054c6:	695a      	ldr	r2, [r3, #20]
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	681b      	ldr	r3, [r3, #0]
 81054cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81054d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81054d6:	2b00      	cmp	r3, #0
 81054d8:	d103      	bne.n	81054e2 <HAL_DMA_IRQHandler+0x736>
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81054de:	2b00      	cmp	r3, #0
 81054e0:	d007      	beq.n	81054f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	681b      	ldr	r3, [r3, #0]
 81054e6:	681a      	ldr	r2, [r3, #0]
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	681b      	ldr	r3, [r3, #0]
 81054ec:	f022 0208 	bic.w	r2, r2, #8
 81054f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81054f6:	f003 031f 	and.w	r3, r3, #31
 81054fa:	223f      	movs	r2, #63	; 0x3f
 81054fc:	409a      	lsls	r2, r3
 81054fe:	6a3b      	ldr	r3, [r7, #32]
 8105500:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	2200      	movs	r2, #0
 8105506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	2201      	movs	r2, #1
 810550e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105516:	2b00      	cmp	r3, #0
 8105518:	f000 834a 	beq.w	8105bb0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 810551c:	687b      	ldr	r3, [r7, #4]
 810551e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105520:	6878      	ldr	r0, [r7, #4]
 8105522:	4798      	blx	r3
          }
          return;
 8105524:	e344      	b.n	8105bb0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105526:	687b      	ldr	r3, [r7, #4]
 8105528:	681b      	ldr	r3, [r3, #0]
 810552a:	681b      	ldr	r3, [r3, #0]
 810552c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105530:	2b00      	cmp	r3, #0
 8105532:	d018      	beq.n	8105566 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	681b      	ldr	r3, [r3, #0]
 810553a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810553e:	2b00      	cmp	r3, #0
 8105540:	d108      	bne.n	8105554 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105546:	2b00      	cmp	r3, #0
 8105548:	d02c      	beq.n	81055a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810554e:	6878      	ldr	r0, [r7, #4]
 8105550:	4798      	blx	r3
 8105552:	e027      	b.n	81055a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105558:	2b00      	cmp	r3, #0
 810555a:	d023      	beq.n	81055a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105560:	6878      	ldr	r0, [r7, #4]
 8105562:	4798      	blx	r3
 8105564:	e01e      	b.n	81055a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	681b      	ldr	r3, [r3, #0]
 810556a:	681b      	ldr	r3, [r3, #0]
 810556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105570:	2b00      	cmp	r3, #0
 8105572:	d10f      	bne.n	8105594 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8105574:	687b      	ldr	r3, [r7, #4]
 8105576:	681b      	ldr	r3, [r3, #0]
 8105578:	681a      	ldr	r2, [r3, #0]
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	f022 0210 	bic.w	r2, r2, #16
 8105582:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	2200      	movs	r2, #0
 8105588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	2201      	movs	r2, #1
 8105590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105598:	2b00      	cmp	r3, #0
 810559a:	d003      	beq.n	81055a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 810559c:	687b      	ldr	r3, [r7, #4]
 810559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81055a0:	6878      	ldr	r0, [r7, #4]
 81055a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055a8:	2b00      	cmp	r3, #0
 81055aa:	f000 8306 	beq.w	8105bba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055b2:	f003 0301 	and.w	r3, r3, #1
 81055b6:	2b00      	cmp	r3, #0
 81055b8:	f000 8088 	beq.w	81056cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	2204      	movs	r2, #4
 81055c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	681b      	ldr	r3, [r3, #0]
 81055c8:	4a7a      	ldr	r2, [pc, #488]	; (81057b4 <HAL_DMA_IRQHandler+0xa08>)
 81055ca:	4293      	cmp	r3, r2
 81055cc:	d04a      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	681b      	ldr	r3, [r3, #0]
 81055d2:	4a79      	ldr	r2, [pc, #484]	; (81057b8 <HAL_DMA_IRQHandler+0xa0c>)
 81055d4:	4293      	cmp	r3, r2
 81055d6:	d045      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	681b      	ldr	r3, [r3, #0]
 81055dc:	4a77      	ldr	r2, [pc, #476]	; (81057bc <HAL_DMA_IRQHandler+0xa10>)
 81055de:	4293      	cmp	r3, r2
 81055e0:	d040      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 81055e2:	687b      	ldr	r3, [r7, #4]
 81055e4:	681b      	ldr	r3, [r3, #0]
 81055e6:	4a76      	ldr	r2, [pc, #472]	; (81057c0 <HAL_DMA_IRQHandler+0xa14>)
 81055e8:	4293      	cmp	r3, r2
 81055ea:	d03b      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	681b      	ldr	r3, [r3, #0]
 81055f0:	4a74      	ldr	r2, [pc, #464]	; (81057c4 <HAL_DMA_IRQHandler+0xa18>)
 81055f2:	4293      	cmp	r3, r2
 81055f4:	d036      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 81055f6:	687b      	ldr	r3, [r7, #4]
 81055f8:	681b      	ldr	r3, [r3, #0]
 81055fa:	4a73      	ldr	r2, [pc, #460]	; (81057c8 <HAL_DMA_IRQHandler+0xa1c>)
 81055fc:	4293      	cmp	r3, r2
 81055fe:	d031      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	681b      	ldr	r3, [r3, #0]
 8105604:	4a71      	ldr	r2, [pc, #452]	; (81057cc <HAL_DMA_IRQHandler+0xa20>)
 8105606:	4293      	cmp	r3, r2
 8105608:	d02c      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	681b      	ldr	r3, [r3, #0]
 810560e:	4a70      	ldr	r2, [pc, #448]	; (81057d0 <HAL_DMA_IRQHandler+0xa24>)
 8105610:	4293      	cmp	r3, r2
 8105612:	d027      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 8105614:	687b      	ldr	r3, [r7, #4]
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	4a6e      	ldr	r2, [pc, #440]	; (81057d4 <HAL_DMA_IRQHandler+0xa28>)
 810561a:	4293      	cmp	r3, r2
 810561c:	d022      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 810561e:	687b      	ldr	r3, [r7, #4]
 8105620:	681b      	ldr	r3, [r3, #0]
 8105622:	4a6d      	ldr	r2, [pc, #436]	; (81057d8 <HAL_DMA_IRQHandler+0xa2c>)
 8105624:	4293      	cmp	r3, r2
 8105626:	d01d      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 8105628:	687b      	ldr	r3, [r7, #4]
 810562a:	681b      	ldr	r3, [r3, #0]
 810562c:	4a6b      	ldr	r2, [pc, #428]	; (81057dc <HAL_DMA_IRQHandler+0xa30>)
 810562e:	4293      	cmp	r3, r2
 8105630:	d018      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	681b      	ldr	r3, [r3, #0]
 8105636:	4a6a      	ldr	r2, [pc, #424]	; (81057e0 <HAL_DMA_IRQHandler+0xa34>)
 8105638:	4293      	cmp	r3, r2
 810563a:	d013      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	681b      	ldr	r3, [r3, #0]
 8105640:	4a68      	ldr	r2, [pc, #416]	; (81057e4 <HAL_DMA_IRQHandler+0xa38>)
 8105642:	4293      	cmp	r3, r2
 8105644:	d00e      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	681b      	ldr	r3, [r3, #0]
 810564a:	4a67      	ldr	r2, [pc, #412]	; (81057e8 <HAL_DMA_IRQHandler+0xa3c>)
 810564c:	4293      	cmp	r3, r2
 810564e:	d009      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	681b      	ldr	r3, [r3, #0]
 8105654:	4a65      	ldr	r2, [pc, #404]	; (81057ec <HAL_DMA_IRQHandler+0xa40>)
 8105656:	4293      	cmp	r3, r2
 8105658:	d004      	beq.n	8105664 <HAL_DMA_IRQHandler+0x8b8>
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	681b      	ldr	r3, [r3, #0]
 810565e:	4a64      	ldr	r2, [pc, #400]	; (81057f0 <HAL_DMA_IRQHandler+0xa44>)
 8105660:	4293      	cmp	r3, r2
 8105662:	d108      	bne.n	8105676 <HAL_DMA_IRQHandler+0x8ca>
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	681b      	ldr	r3, [r3, #0]
 8105668:	681a      	ldr	r2, [r3, #0]
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	681b      	ldr	r3, [r3, #0]
 810566e:	f022 0201 	bic.w	r2, r2, #1
 8105672:	601a      	str	r2, [r3, #0]
 8105674:	e007      	b.n	8105686 <HAL_DMA_IRQHandler+0x8da>
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	681a      	ldr	r2, [r3, #0]
 810567c:	687b      	ldr	r3, [r7, #4]
 810567e:	681b      	ldr	r3, [r3, #0]
 8105680:	f022 0201 	bic.w	r2, r2, #1
 8105684:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8105686:	68fb      	ldr	r3, [r7, #12]
 8105688:	3301      	adds	r3, #1
 810568a:	60fb      	str	r3, [r7, #12]
 810568c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810568e:	429a      	cmp	r2, r3
 8105690:	d307      	bcc.n	81056a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	681b      	ldr	r3, [r3, #0]
 8105696:	681b      	ldr	r3, [r3, #0]
 8105698:	f003 0301 	and.w	r3, r3, #1
 810569c:	2b00      	cmp	r3, #0
 810569e:	d1f2      	bne.n	8105686 <HAL_DMA_IRQHandler+0x8da>
 81056a0:	e000      	b.n	81056a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 81056a2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81056a4:	687b      	ldr	r3, [r7, #4]
 81056a6:	2200      	movs	r2, #0
 81056a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	681b      	ldr	r3, [r3, #0]
 81056b0:	681b      	ldr	r3, [r3, #0]
 81056b2:	f003 0301 	and.w	r3, r3, #1
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d004      	beq.n	81056c4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	2203      	movs	r2, #3
 81056be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81056c2:	e003      	b.n	81056cc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81056c4:	687b      	ldr	r3, [r7, #4]
 81056c6:	2201      	movs	r2, #1
 81056c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81056d0:	2b00      	cmp	r3, #0
 81056d2:	f000 8272 	beq.w	8105bba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81056da:	6878      	ldr	r0, [r7, #4]
 81056dc:	4798      	blx	r3
 81056de:	e26c      	b.n	8105bba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	681b      	ldr	r3, [r3, #0]
 81056e4:	4a43      	ldr	r2, [pc, #268]	; (81057f4 <HAL_DMA_IRQHandler+0xa48>)
 81056e6:	4293      	cmp	r3, r2
 81056e8:	d022      	beq.n	8105730 <HAL_DMA_IRQHandler+0x984>
 81056ea:	687b      	ldr	r3, [r7, #4]
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	4a42      	ldr	r2, [pc, #264]	; (81057f8 <HAL_DMA_IRQHandler+0xa4c>)
 81056f0:	4293      	cmp	r3, r2
 81056f2:	d01d      	beq.n	8105730 <HAL_DMA_IRQHandler+0x984>
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	681b      	ldr	r3, [r3, #0]
 81056f8:	4a40      	ldr	r2, [pc, #256]	; (81057fc <HAL_DMA_IRQHandler+0xa50>)
 81056fa:	4293      	cmp	r3, r2
 81056fc:	d018      	beq.n	8105730 <HAL_DMA_IRQHandler+0x984>
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	681b      	ldr	r3, [r3, #0]
 8105702:	4a3f      	ldr	r2, [pc, #252]	; (8105800 <HAL_DMA_IRQHandler+0xa54>)
 8105704:	4293      	cmp	r3, r2
 8105706:	d013      	beq.n	8105730 <HAL_DMA_IRQHandler+0x984>
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	681b      	ldr	r3, [r3, #0]
 810570c:	4a3d      	ldr	r2, [pc, #244]	; (8105804 <HAL_DMA_IRQHandler+0xa58>)
 810570e:	4293      	cmp	r3, r2
 8105710:	d00e      	beq.n	8105730 <HAL_DMA_IRQHandler+0x984>
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	681b      	ldr	r3, [r3, #0]
 8105716:	4a3c      	ldr	r2, [pc, #240]	; (8105808 <HAL_DMA_IRQHandler+0xa5c>)
 8105718:	4293      	cmp	r3, r2
 810571a:	d009      	beq.n	8105730 <HAL_DMA_IRQHandler+0x984>
 810571c:	687b      	ldr	r3, [r7, #4]
 810571e:	681b      	ldr	r3, [r3, #0]
 8105720:	4a3a      	ldr	r2, [pc, #232]	; (810580c <HAL_DMA_IRQHandler+0xa60>)
 8105722:	4293      	cmp	r3, r2
 8105724:	d004      	beq.n	8105730 <HAL_DMA_IRQHandler+0x984>
 8105726:	687b      	ldr	r3, [r7, #4]
 8105728:	681b      	ldr	r3, [r3, #0]
 810572a:	4a39      	ldr	r2, [pc, #228]	; (8105810 <HAL_DMA_IRQHandler+0xa64>)
 810572c:	4293      	cmp	r3, r2
 810572e:	d101      	bne.n	8105734 <HAL_DMA_IRQHandler+0x988>
 8105730:	2301      	movs	r3, #1
 8105732:	e000      	b.n	8105736 <HAL_DMA_IRQHandler+0x98a>
 8105734:	2300      	movs	r3, #0
 8105736:	2b00      	cmp	r3, #0
 8105738:	f000 823f 	beq.w	8105bba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	681b      	ldr	r3, [r3, #0]
 8105740:	681b      	ldr	r3, [r3, #0]
 8105742:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8105744:	687b      	ldr	r3, [r7, #4]
 8105746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105748:	f003 031f 	and.w	r3, r3, #31
 810574c:	2204      	movs	r2, #4
 810574e:	409a      	lsls	r2, r3
 8105750:	697b      	ldr	r3, [r7, #20]
 8105752:	4013      	ands	r3, r2
 8105754:	2b00      	cmp	r3, #0
 8105756:	f000 80cd 	beq.w	81058f4 <HAL_DMA_IRQHandler+0xb48>
 810575a:	693b      	ldr	r3, [r7, #16]
 810575c:	f003 0304 	and.w	r3, r3, #4
 8105760:	2b00      	cmp	r3, #0
 8105762:	f000 80c7 	beq.w	81058f4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8105766:	687b      	ldr	r3, [r7, #4]
 8105768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810576a:	f003 031f 	and.w	r3, r3, #31
 810576e:	2204      	movs	r2, #4
 8105770:	409a      	lsls	r2, r3
 8105772:	69fb      	ldr	r3, [r7, #28]
 8105774:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105776:	693b      	ldr	r3, [r7, #16]
 8105778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810577c:	2b00      	cmp	r3, #0
 810577e:	d049      	beq.n	8105814 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105780:	693b      	ldr	r3, [r7, #16]
 8105782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105786:	2b00      	cmp	r3, #0
 8105788:	d109      	bne.n	810579e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810578e:	2b00      	cmp	r3, #0
 8105790:	f000 8210 	beq.w	8105bb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105798:	6878      	ldr	r0, [r7, #4]
 810579a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810579c:	e20a      	b.n	8105bb4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810579e:	687b      	ldr	r3, [r7, #4]
 81057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81057a2:	2b00      	cmp	r3, #0
 81057a4:	f000 8206 	beq.w	8105bb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81057a8:	687b      	ldr	r3, [r7, #4]
 81057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81057ac:	6878      	ldr	r0, [r7, #4]
 81057ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81057b0:	e200      	b.n	8105bb4 <HAL_DMA_IRQHandler+0xe08>
 81057b2:	bf00      	nop
 81057b4:	40020010 	.word	0x40020010
 81057b8:	40020028 	.word	0x40020028
 81057bc:	40020040 	.word	0x40020040
 81057c0:	40020058 	.word	0x40020058
 81057c4:	40020070 	.word	0x40020070
 81057c8:	40020088 	.word	0x40020088
 81057cc:	400200a0 	.word	0x400200a0
 81057d0:	400200b8 	.word	0x400200b8
 81057d4:	40020410 	.word	0x40020410
 81057d8:	40020428 	.word	0x40020428
 81057dc:	40020440 	.word	0x40020440
 81057e0:	40020458 	.word	0x40020458
 81057e4:	40020470 	.word	0x40020470
 81057e8:	40020488 	.word	0x40020488
 81057ec:	400204a0 	.word	0x400204a0
 81057f0:	400204b8 	.word	0x400204b8
 81057f4:	58025408 	.word	0x58025408
 81057f8:	5802541c 	.word	0x5802541c
 81057fc:	58025430 	.word	0x58025430
 8105800:	58025444 	.word	0x58025444
 8105804:	58025458 	.word	0x58025458
 8105808:	5802546c 	.word	0x5802546c
 810580c:	58025480 	.word	0x58025480
 8105810:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105814:	693b      	ldr	r3, [r7, #16]
 8105816:	f003 0320 	and.w	r3, r3, #32
 810581a:	2b00      	cmp	r3, #0
 810581c:	d160      	bne.n	81058e0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	681b      	ldr	r3, [r3, #0]
 8105822:	4a7f      	ldr	r2, [pc, #508]	; (8105a20 <HAL_DMA_IRQHandler+0xc74>)
 8105824:	4293      	cmp	r3, r2
 8105826:	d04a      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 8105828:	687b      	ldr	r3, [r7, #4]
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	4a7d      	ldr	r2, [pc, #500]	; (8105a24 <HAL_DMA_IRQHandler+0xc78>)
 810582e:	4293      	cmp	r3, r2
 8105830:	d045      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	4a7c      	ldr	r2, [pc, #496]	; (8105a28 <HAL_DMA_IRQHandler+0xc7c>)
 8105838:	4293      	cmp	r3, r2
 810583a:	d040      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	681b      	ldr	r3, [r3, #0]
 8105840:	4a7a      	ldr	r2, [pc, #488]	; (8105a2c <HAL_DMA_IRQHandler+0xc80>)
 8105842:	4293      	cmp	r3, r2
 8105844:	d03b      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 8105846:	687b      	ldr	r3, [r7, #4]
 8105848:	681b      	ldr	r3, [r3, #0]
 810584a:	4a79      	ldr	r2, [pc, #484]	; (8105a30 <HAL_DMA_IRQHandler+0xc84>)
 810584c:	4293      	cmp	r3, r2
 810584e:	d036      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 8105850:	687b      	ldr	r3, [r7, #4]
 8105852:	681b      	ldr	r3, [r3, #0]
 8105854:	4a77      	ldr	r2, [pc, #476]	; (8105a34 <HAL_DMA_IRQHandler+0xc88>)
 8105856:	4293      	cmp	r3, r2
 8105858:	d031      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 810585a:	687b      	ldr	r3, [r7, #4]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	4a76      	ldr	r2, [pc, #472]	; (8105a38 <HAL_DMA_IRQHandler+0xc8c>)
 8105860:	4293      	cmp	r3, r2
 8105862:	d02c      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 8105864:	687b      	ldr	r3, [r7, #4]
 8105866:	681b      	ldr	r3, [r3, #0]
 8105868:	4a74      	ldr	r2, [pc, #464]	; (8105a3c <HAL_DMA_IRQHandler+0xc90>)
 810586a:	4293      	cmp	r3, r2
 810586c:	d027      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	681b      	ldr	r3, [r3, #0]
 8105872:	4a73      	ldr	r2, [pc, #460]	; (8105a40 <HAL_DMA_IRQHandler+0xc94>)
 8105874:	4293      	cmp	r3, r2
 8105876:	d022      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 8105878:	687b      	ldr	r3, [r7, #4]
 810587a:	681b      	ldr	r3, [r3, #0]
 810587c:	4a71      	ldr	r2, [pc, #452]	; (8105a44 <HAL_DMA_IRQHandler+0xc98>)
 810587e:	4293      	cmp	r3, r2
 8105880:	d01d      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	681b      	ldr	r3, [r3, #0]
 8105886:	4a70      	ldr	r2, [pc, #448]	; (8105a48 <HAL_DMA_IRQHandler+0xc9c>)
 8105888:	4293      	cmp	r3, r2
 810588a:	d018      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 810588c:	687b      	ldr	r3, [r7, #4]
 810588e:	681b      	ldr	r3, [r3, #0]
 8105890:	4a6e      	ldr	r2, [pc, #440]	; (8105a4c <HAL_DMA_IRQHandler+0xca0>)
 8105892:	4293      	cmp	r3, r2
 8105894:	d013      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 8105896:	687b      	ldr	r3, [r7, #4]
 8105898:	681b      	ldr	r3, [r3, #0]
 810589a:	4a6d      	ldr	r2, [pc, #436]	; (8105a50 <HAL_DMA_IRQHandler+0xca4>)
 810589c:	4293      	cmp	r3, r2
 810589e:	d00e      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	681b      	ldr	r3, [r3, #0]
 81058a4:	4a6b      	ldr	r2, [pc, #428]	; (8105a54 <HAL_DMA_IRQHandler+0xca8>)
 81058a6:	4293      	cmp	r3, r2
 81058a8:	d009      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	4a6a      	ldr	r2, [pc, #424]	; (8105a58 <HAL_DMA_IRQHandler+0xcac>)
 81058b0:	4293      	cmp	r3, r2
 81058b2:	d004      	beq.n	81058be <HAL_DMA_IRQHandler+0xb12>
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	681b      	ldr	r3, [r3, #0]
 81058b8:	4a68      	ldr	r2, [pc, #416]	; (8105a5c <HAL_DMA_IRQHandler+0xcb0>)
 81058ba:	4293      	cmp	r3, r2
 81058bc:	d108      	bne.n	81058d0 <HAL_DMA_IRQHandler+0xb24>
 81058be:	687b      	ldr	r3, [r7, #4]
 81058c0:	681b      	ldr	r3, [r3, #0]
 81058c2:	681a      	ldr	r2, [r3, #0]
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	681b      	ldr	r3, [r3, #0]
 81058c8:	f022 0208 	bic.w	r2, r2, #8
 81058cc:	601a      	str	r2, [r3, #0]
 81058ce:	e007      	b.n	81058e0 <HAL_DMA_IRQHandler+0xb34>
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	681b      	ldr	r3, [r3, #0]
 81058d4:	681a      	ldr	r2, [r3, #0]
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	f022 0204 	bic.w	r2, r2, #4
 81058de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81058e4:	2b00      	cmp	r3, #0
 81058e6:	f000 8165 	beq.w	8105bb4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81058ee:	6878      	ldr	r0, [r7, #4]
 81058f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81058f2:	e15f      	b.n	8105bb4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81058f4:	687b      	ldr	r3, [r7, #4]
 81058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81058f8:	f003 031f 	and.w	r3, r3, #31
 81058fc:	2202      	movs	r2, #2
 81058fe:	409a      	lsls	r2, r3
 8105900:	697b      	ldr	r3, [r7, #20]
 8105902:	4013      	ands	r3, r2
 8105904:	2b00      	cmp	r3, #0
 8105906:	f000 80c5 	beq.w	8105a94 <HAL_DMA_IRQHandler+0xce8>
 810590a:	693b      	ldr	r3, [r7, #16]
 810590c:	f003 0302 	and.w	r3, r3, #2
 8105910:	2b00      	cmp	r3, #0
 8105912:	f000 80bf 	beq.w	8105a94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810591a:	f003 031f 	and.w	r3, r3, #31
 810591e:	2202      	movs	r2, #2
 8105920:	409a      	lsls	r2, r3
 8105922:	69fb      	ldr	r3, [r7, #28]
 8105924:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105926:	693b      	ldr	r3, [r7, #16]
 8105928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810592c:	2b00      	cmp	r3, #0
 810592e:	d018      	beq.n	8105962 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105930:	693b      	ldr	r3, [r7, #16]
 8105932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105936:	2b00      	cmp	r3, #0
 8105938:	d109      	bne.n	810594e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810593e:	2b00      	cmp	r3, #0
 8105940:	f000 813a 	beq.w	8105bb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105948:	6878      	ldr	r0, [r7, #4]
 810594a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810594c:	e134      	b.n	8105bb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105952:	2b00      	cmp	r3, #0
 8105954:	f000 8130 	beq.w	8105bb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810595c:	6878      	ldr	r0, [r7, #4]
 810595e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105960:	e12a      	b.n	8105bb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105962:	693b      	ldr	r3, [r7, #16]
 8105964:	f003 0320 	and.w	r3, r3, #32
 8105968:	2b00      	cmp	r3, #0
 810596a:	f040 8089 	bne.w	8105a80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	681b      	ldr	r3, [r3, #0]
 8105972:	4a2b      	ldr	r2, [pc, #172]	; (8105a20 <HAL_DMA_IRQHandler+0xc74>)
 8105974:	4293      	cmp	r3, r2
 8105976:	d04a      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	4a29      	ldr	r2, [pc, #164]	; (8105a24 <HAL_DMA_IRQHandler+0xc78>)
 810597e:	4293      	cmp	r3, r2
 8105980:	d045      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	4a28      	ldr	r2, [pc, #160]	; (8105a28 <HAL_DMA_IRQHandler+0xc7c>)
 8105988:	4293      	cmp	r3, r2
 810598a:	d040      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	4a26      	ldr	r2, [pc, #152]	; (8105a2c <HAL_DMA_IRQHandler+0xc80>)
 8105992:	4293      	cmp	r3, r2
 8105994:	d03b      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 8105996:	687b      	ldr	r3, [r7, #4]
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	4a25      	ldr	r2, [pc, #148]	; (8105a30 <HAL_DMA_IRQHandler+0xc84>)
 810599c:	4293      	cmp	r3, r2
 810599e:	d036      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	681b      	ldr	r3, [r3, #0]
 81059a4:	4a23      	ldr	r2, [pc, #140]	; (8105a34 <HAL_DMA_IRQHandler+0xc88>)
 81059a6:	4293      	cmp	r3, r2
 81059a8:	d031      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	681b      	ldr	r3, [r3, #0]
 81059ae:	4a22      	ldr	r2, [pc, #136]	; (8105a38 <HAL_DMA_IRQHandler+0xc8c>)
 81059b0:	4293      	cmp	r3, r2
 81059b2:	d02c      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059b4:	687b      	ldr	r3, [r7, #4]
 81059b6:	681b      	ldr	r3, [r3, #0]
 81059b8:	4a20      	ldr	r2, [pc, #128]	; (8105a3c <HAL_DMA_IRQHandler+0xc90>)
 81059ba:	4293      	cmp	r3, r2
 81059bc:	d027      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059be:	687b      	ldr	r3, [r7, #4]
 81059c0:	681b      	ldr	r3, [r3, #0]
 81059c2:	4a1f      	ldr	r2, [pc, #124]	; (8105a40 <HAL_DMA_IRQHandler+0xc94>)
 81059c4:	4293      	cmp	r3, r2
 81059c6:	d022      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	681b      	ldr	r3, [r3, #0]
 81059cc:	4a1d      	ldr	r2, [pc, #116]	; (8105a44 <HAL_DMA_IRQHandler+0xc98>)
 81059ce:	4293      	cmp	r3, r2
 81059d0:	d01d      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	681b      	ldr	r3, [r3, #0]
 81059d6:	4a1c      	ldr	r2, [pc, #112]	; (8105a48 <HAL_DMA_IRQHandler+0xc9c>)
 81059d8:	4293      	cmp	r3, r2
 81059da:	d018      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	681b      	ldr	r3, [r3, #0]
 81059e0:	4a1a      	ldr	r2, [pc, #104]	; (8105a4c <HAL_DMA_IRQHandler+0xca0>)
 81059e2:	4293      	cmp	r3, r2
 81059e4:	d013      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059e6:	687b      	ldr	r3, [r7, #4]
 81059e8:	681b      	ldr	r3, [r3, #0]
 81059ea:	4a19      	ldr	r2, [pc, #100]	; (8105a50 <HAL_DMA_IRQHandler+0xca4>)
 81059ec:	4293      	cmp	r3, r2
 81059ee:	d00e      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	681b      	ldr	r3, [r3, #0]
 81059f4:	4a17      	ldr	r2, [pc, #92]	; (8105a54 <HAL_DMA_IRQHandler+0xca8>)
 81059f6:	4293      	cmp	r3, r2
 81059f8:	d009      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 81059fa:	687b      	ldr	r3, [r7, #4]
 81059fc:	681b      	ldr	r3, [r3, #0]
 81059fe:	4a16      	ldr	r2, [pc, #88]	; (8105a58 <HAL_DMA_IRQHandler+0xcac>)
 8105a00:	4293      	cmp	r3, r2
 8105a02:	d004      	beq.n	8105a0e <HAL_DMA_IRQHandler+0xc62>
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	681b      	ldr	r3, [r3, #0]
 8105a08:	4a14      	ldr	r2, [pc, #80]	; (8105a5c <HAL_DMA_IRQHandler+0xcb0>)
 8105a0a:	4293      	cmp	r3, r2
 8105a0c:	d128      	bne.n	8105a60 <HAL_DMA_IRQHandler+0xcb4>
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	681a      	ldr	r2, [r3, #0]
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	f022 0214 	bic.w	r2, r2, #20
 8105a1c:	601a      	str	r2, [r3, #0]
 8105a1e:	e027      	b.n	8105a70 <HAL_DMA_IRQHandler+0xcc4>
 8105a20:	40020010 	.word	0x40020010
 8105a24:	40020028 	.word	0x40020028
 8105a28:	40020040 	.word	0x40020040
 8105a2c:	40020058 	.word	0x40020058
 8105a30:	40020070 	.word	0x40020070
 8105a34:	40020088 	.word	0x40020088
 8105a38:	400200a0 	.word	0x400200a0
 8105a3c:	400200b8 	.word	0x400200b8
 8105a40:	40020410 	.word	0x40020410
 8105a44:	40020428 	.word	0x40020428
 8105a48:	40020440 	.word	0x40020440
 8105a4c:	40020458 	.word	0x40020458
 8105a50:	40020470 	.word	0x40020470
 8105a54:	40020488 	.word	0x40020488
 8105a58:	400204a0 	.word	0x400204a0
 8105a5c:	400204b8 	.word	0x400204b8
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	681b      	ldr	r3, [r3, #0]
 8105a64:	681a      	ldr	r2, [r3, #0]
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	681b      	ldr	r3, [r3, #0]
 8105a6a:	f022 020a 	bic.w	r2, r2, #10
 8105a6e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	2200      	movs	r2, #0
 8105a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	2201      	movs	r2, #1
 8105a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a84:	2b00      	cmp	r3, #0
 8105a86:	f000 8097 	beq.w	8105bb8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a8e:	6878      	ldr	r0, [r7, #4]
 8105a90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105a92:	e091      	b.n	8105bb8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a98:	f003 031f 	and.w	r3, r3, #31
 8105a9c:	2208      	movs	r2, #8
 8105a9e:	409a      	lsls	r2, r3
 8105aa0:	697b      	ldr	r3, [r7, #20]
 8105aa2:	4013      	ands	r3, r2
 8105aa4:	2b00      	cmp	r3, #0
 8105aa6:	f000 8088 	beq.w	8105bba <HAL_DMA_IRQHandler+0xe0e>
 8105aaa:	693b      	ldr	r3, [r7, #16]
 8105aac:	f003 0308 	and.w	r3, r3, #8
 8105ab0:	2b00      	cmp	r3, #0
 8105ab2:	f000 8082 	beq.w	8105bba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	4a41      	ldr	r2, [pc, #260]	; (8105bc0 <HAL_DMA_IRQHandler+0xe14>)
 8105abc:	4293      	cmp	r3, r2
 8105abe:	d04a      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	681b      	ldr	r3, [r3, #0]
 8105ac4:	4a3f      	ldr	r2, [pc, #252]	; (8105bc4 <HAL_DMA_IRQHandler+0xe18>)
 8105ac6:	4293      	cmp	r3, r2
 8105ac8:	d045      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	681b      	ldr	r3, [r3, #0]
 8105ace:	4a3e      	ldr	r2, [pc, #248]	; (8105bc8 <HAL_DMA_IRQHandler+0xe1c>)
 8105ad0:	4293      	cmp	r3, r2
 8105ad2:	d040      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	681b      	ldr	r3, [r3, #0]
 8105ad8:	4a3c      	ldr	r2, [pc, #240]	; (8105bcc <HAL_DMA_IRQHandler+0xe20>)
 8105ada:	4293      	cmp	r3, r2
 8105adc:	d03b      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105ade:	687b      	ldr	r3, [r7, #4]
 8105ae0:	681b      	ldr	r3, [r3, #0]
 8105ae2:	4a3b      	ldr	r2, [pc, #236]	; (8105bd0 <HAL_DMA_IRQHandler+0xe24>)
 8105ae4:	4293      	cmp	r3, r2
 8105ae6:	d036      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	681b      	ldr	r3, [r3, #0]
 8105aec:	4a39      	ldr	r2, [pc, #228]	; (8105bd4 <HAL_DMA_IRQHandler+0xe28>)
 8105aee:	4293      	cmp	r3, r2
 8105af0:	d031      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	681b      	ldr	r3, [r3, #0]
 8105af6:	4a38      	ldr	r2, [pc, #224]	; (8105bd8 <HAL_DMA_IRQHandler+0xe2c>)
 8105af8:	4293      	cmp	r3, r2
 8105afa:	d02c      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	681b      	ldr	r3, [r3, #0]
 8105b00:	4a36      	ldr	r2, [pc, #216]	; (8105bdc <HAL_DMA_IRQHandler+0xe30>)
 8105b02:	4293      	cmp	r3, r2
 8105b04:	d027      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	681b      	ldr	r3, [r3, #0]
 8105b0a:	4a35      	ldr	r2, [pc, #212]	; (8105be0 <HAL_DMA_IRQHandler+0xe34>)
 8105b0c:	4293      	cmp	r3, r2
 8105b0e:	d022      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	681b      	ldr	r3, [r3, #0]
 8105b14:	4a33      	ldr	r2, [pc, #204]	; (8105be4 <HAL_DMA_IRQHandler+0xe38>)
 8105b16:	4293      	cmp	r3, r2
 8105b18:	d01d      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	4a32      	ldr	r2, [pc, #200]	; (8105be8 <HAL_DMA_IRQHandler+0xe3c>)
 8105b20:	4293      	cmp	r3, r2
 8105b22:	d018      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	681b      	ldr	r3, [r3, #0]
 8105b28:	4a30      	ldr	r2, [pc, #192]	; (8105bec <HAL_DMA_IRQHandler+0xe40>)
 8105b2a:	4293      	cmp	r3, r2
 8105b2c:	d013      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105b2e:	687b      	ldr	r3, [r7, #4]
 8105b30:	681b      	ldr	r3, [r3, #0]
 8105b32:	4a2f      	ldr	r2, [pc, #188]	; (8105bf0 <HAL_DMA_IRQHandler+0xe44>)
 8105b34:	4293      	cmp	r3, r2
 8105b36:	d00e      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	4a2d      	ldr	r2, [pc, #180]	; (8105bf4 <HAL_DMA_IRQHandler+0xe48>)
 8105b3e:	4293      	cmp	r3, r2
 8105b40:	d009      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	4a2c      	ldr	r2, [pc, #176]	; (8105bf8 <HAL_DMA_IRQHandler+0xe4c>)
 8105b48:	4293      	cmp	r3, r2
 8105b4a:	d004      	beq.n	8105b56 <HAL_DMA_IRQHandler+0xdaa>
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	4a2a      	ldr	r2, [pc, #168]	; (8105bfc <HAL_DMA_IRQHandler+0xe50>)
 8105b52:	4293      	cmp	r3, r2
 8105b54:	d108      	bne.n	8105b68 <HAL_DMA_IRQHandler+0xdbc>
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	681b      	ldr	r3, [r3, #0]
 8105b5a:	681a      	ldr	r2, [r3, #0]
 8105b5c:	687b      	ldr	r3, [r7, #4]
 8105b5e:	681b      	ldr	r3, [r3, #0]
 8105b60:	f022 021c 	bic.w	r2, r2, #28
 8105b64:	601a      	str	r2, [r3, #0]
 8105b66:	e007      	b.n	8105b78 <HAL_DMA_IRQHandler+0xdcc>
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	681b      	ldr	r3, [r3, #0]
 8105b6c:	681a      	ldr	r2, [r3, #0]
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	f022 020e 	bic.w	r2, r2, #14
 8105b76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b7c:	f003 031f 	and.w	r3, r3, #31
 8105b80:	2201      	movs	r2, #1
 8105b82:	409a      	lsls	r2, r3
 8105b84:	69fb      	ldr	r3, [r7, #28]
 8105b86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	2201      	movs	r2, #1
 8105b8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105b8e:	687b      	ldr	r3, [r7, #4]
 8105b90:	2200      	movs	r2, #0
 8105b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	2201      	movs	r2, #1
 8105b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ba2:	2b00      	cmp	r3, #0
 8105ba4:	d009      	beq.n	8105bba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105baa:	6878      	ldr	r0, [r7, #4]
 8105bac:	4798      	blx	r3
 8105bae:	e004      	b.n	8105bba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8105bb0:	bf00      	nop
 8105bb2:	e002      	b.n	8105bba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105bb4:	bf00      	nop
 8105bb6:	e000      	b.n	8105bba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105bb8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105bba:	3728      	adds	r7, #40	; 0x28
 8105bbc:	46bd      	mov	sp, r7
 8105bbe:	bd80      	pop	{r7, pc}
 8105bc0:	40020010 	.word	0x40020010
 8105bc4:	40020028 	.word	0x40020028
 8105bc8:	40020040 	.word	0x40020040
 8105bcc:	40020058 	.word	0x40020058
 8105bd0:	40020070 	.word	0x40020070
 8105bd4:	40020088 	.word	0x40020088
 8105bd8:	400200a0 	.word	0x400200a0
 8105bdc:	400200b8 	.word	0x400200b8
 8105be0:	40020410 	.word	0x40020410
 8105be4:	40020428 	.word	0x40020428
 8105be8:	40020440 	.word	0x40020440
 8105bec:	40020458 	.word	0x40020458
 8105bf0:	40020470 	.word	0x40020470
 8105bf4:	40020488 	.word	0x40020488
 8105bf8:	400204a0 	.word	0x400204a0
 8105bfc:	400204b8 	.word	0x400204b8

08105c00 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8105c00:	b480      	push	{r7}
 8105c02:	b083      	sub	sp, #12
 8105c04:	af00      	add	r7, sp, #0
 8105c06:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105c0e:	b2db      	uxtb	r3, r3
}
 8105c10:	4618      	mov	r0, r3
 8105c12:	370c      	adds	r7, #12
 8105c14:	46bd      	mov	sp, r7
 8105c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c1a:	4770      	bx	lr

08105c1c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8105c1c:	b480      	push	{r7}
 8105c1e:	b083      	sub	sp, #12
 8105c20:	af00      	add	r7, sp, #0
 8105c22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8105c24:	687b      	ldr	r3, [r7, #4]
 8105c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8105c28:	4618      	mov	r0, r3
 8105c2a:	370c      	adds	r7, #12
 8105c2c:	46bd      	mov	sp, r7
 8105c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c32:	4770      	bx	lr

08105c34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8105c34:	b480      	push	{r7}
 8105c36:	b087      	sub	sp, #28
 8105c38:	af00      	add	r7, sp, #0
 8105c3a:	60f8      	str	r0, [r7, #12]
 8105c3c:	60b9      	str	r1, [r7, #8]
 8105c3e:	607a      	str	r2, [r7, #4]
 8105c40:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105c42:	68fb      	ldr	r3, [r7, #12]
 8105c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c46:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105c48:	68fb      	ldr	r3, [r7, #12]
 8105c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c4c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105c4e:	68fb      	ldr	r3, [r7, #12]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	4a7f      	ldr	r2, [pc, #508]	; (8105e50 <DMA_SetConfig+0x21c>)
 8105c54:	4293      	cmp	r3, r2
 8105c56:	d072      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105c58:	68fb      	ldr	r3, [r7, #12]
 8105c5a:	681b      	ldr	r3, [r3, #0]
 8105c5c:	4a7d      	ldr	r2, [pc, #500]	; (8105e54 <DMA_SetConfig+0x220>)
 8105c5e:	4293      	cmp	r3, r2
 8105c60:	d06d      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105c62:	68fb      	ldr	r3, [r7, #12]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	4a7c      	ldr	r2, [pc, #496]	; (8105e58 <DMA_SetConfig+0x224>)
 8105c68:	4293      	cmp	r3, r2
 8105c6a:	d068      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105c6c:	68fb      	ldr	r3, [r7, #12]
 8105c6e:	681b      	ldr	r3, [r3, #0]
 8105c70:	4a7a      	ldr	r2, [pc, #488]	; (8105e5c <DMA_SetConfig+0x228>)
 8105c72:	4293      	cmp	r3, r2
 8105c74:	d063      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105c76:	68fb      	ldr	r3, [r7, #12]
 8105c78:	681b      	ldr	r3, [r3, #0]
 8105c7a:	4a79      	ldr	r2, [pc, #484]	; (8105e60 <DMA_SetConfig+0x22c>)
 8105c7c:	4293      	cmp	r3, r2
 8105c7e:	d05e      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105c80:	68fb      	ldr	r3, [r7, #12]
 8105c82:	681b      	ldr	r3, [r3, #0]
 8105c84:	4a77      	ldr	r2, [pc, #476]	; (8105e64 <DMA_SetConfig+0x230>)
 8105c86:	4293      	cmp	r3, r2
 8105c88:	d059      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105c8a:	68fb      	ldr	r3, [r7, #12]
 8105c8c:	681b      	ldr	r3, [r3, #0]
 8105c8e:	4a76      	ldr	r2, [pc, #472]	; (8105e68 <DMA_SetConfig+0x234>)
 8105c90:	4293      	cmp	r3, r2
 8105c92:	d054      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105c94:	68fb      	ldr	r3, [r7, #12]
 8105c96:	681b      	ldr	r3, [r3, #0]
 8105c98:	4a74      	ldr	r2, [pc, #464]	; (8105e6c <DMA_SetConfig+0x238>)
 8105c9a:	4293      	cmp	r3, r2
 8105c9c:	d04f      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105c9e:	68fb      	ldr	r3, [r7, #12]
 8105ca0:	681b      	ldr	r3, [r3, #0]
 8105ca2:	4a73      	ldr	r2, [pc, #460]	; (8105e70 <DMA_SetConfig+0x23c>)
 8105ca4:	4293      	cmp	r3, r2
 8105ca6:	d04a      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105ca8:	68fb      	ldr	r3, [r7, #12]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	4a71      	ldr	r2, [pc, #452]	; (8105e74 <DMA_SetConfig+0x240>)
 8105cae:	4293      	cmp	r3, r2
 8105cb0:	d045      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105cb2:	68fb      	ldr	r3, [r7, #12]
 8105cb4:	681b      	ldr	r3, [r3, #0]
 8105cb6:	4a70      	ldr	r2, [pc, #448]	; (8105e78 <DMA_SetConfig+0x244>)
 8105cb8:	4293      	cmp	r3, r2
 8105cba:	d040      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105cbc:	68fb      	ldr	r3, [r7, #12]
 8105cbe:	681b      	ldr	r3, [r3, #0]
 8105cc0:	4a6e      	ldr	r2, [pc, #440]	; (8105e7c <DMA_SetConfig+0x248>)
 8105cc2:	4293      	cmp	r3, r2
 8105cc4:	d03b      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105cc6:	68fb      	ldr	r3, [r7, #12]
 8105cc8:	681b      	ldr	r3, [r3, #0]
 8105cca:	4a6d      	ldr	r2, [pc, #436]	; (8105e80 <DMA_SetConfig+0x24c>)
 8105ccc:	4293      	cmp	r3, r2
 8105cce:	d036      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105cd0:	68fb      	ldr	r3, [r7, #12]
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	4a6b      	ldr	r2, [pc, #428]	; (8105e84 <DMA_SetConfig+0x250>)
 8105cd6:	4293      	cmp	r3, r2
 8105cd8:	d031      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105cda:	68fb      	ldr	r3, [r7, #12]
 8105cdc:	681b      	ldr	r3, [r3, #0]
 8105cde:	4a6a      	ldr	r2, [pc, #424]	; (8105e88 <DMA_SetConfig+0x254>)
 8105ce0:	4293      	cmp	r3, r2
 8105ce2:	d02c      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105ce4:	68fb      	ldr	r3, [r7, #12]
 8105ce6:	681b      	ldr	r3, [r3, #0]
 8105ce8:	4a68      	ldr	r2, [pc, #416]	; (8105e8c <DMA_SetConfig+0x258>)
 8105cea:	4293      	cmp	r3, r2
 8105cec:	d027      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105cee:	68fb      	ldr	r3, [r7, #12]
 8105cf0:	681b      	ldr	r3, [r3, #0]
 8105cf2:	4a67      	ldr	r2, [pc, #412]	; (8105e90 <DMA_SetConfig+0x25c>)
 8105cf4:	4293      	cmp	r3, r2
 8105cf6:	d022      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105cf8:	68fb      	ldr	r3, [r7, #12]
 8105cfa:	681b      	ldr	r3, [r3, #0]
 8105cfc:	4a65      	ldr	r2, [pc, #404]	; (8105e94 <DMA_SetConfig+0x260>)
 8105cfe:	4293      	cmp	r3, r2
 8105d00:	d01d      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105d02:	68fb      	ldr	r3, [r7, #12]
 8105d04:	681b      	ldr	r3, [r3, #0]
 8105d06:	4a64      	ldr	r2, [pc, #400]	; (8105e98 <DMA_SetConfig+0x264>)
 8105d08:	4293      	cmp	r3, r2
 8105d0a:	d018      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105d0c:	68fb      	ldr	r3, [r7, #12]
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	4a62      	ldr	r2, [pc, #392]	; (8105e9c <DMA_SetConfig+0x268>)
 8105d12:	4293      	cmp	r3, r2
 8105d14:	d013      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105d16:	68fb      	ldr	r3, [r7, #12]
 8105d18:	681b      	ldr	r3, [r3, #0]
 8105d1a:	4a61      	ldr	r2, [pc, #388]	; (8105ea0 <DMA_SetConfig+0x26c>)
 8105d1c:	4293      	cmp	r3, r2
 8105d1e:	d00e      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105d20:	68fb      	ldr	r3, [r7, #12]
 8105d22:	681b      	ldr	r3, [r3, #0]
 8105d24:	4a5f      	ldr	r2, [pc, #380]	; (8105ea4 <DMA_SetConfig+0x270>)
 8105d26:	4293      	cmp	r3, r2
 8105d28:	d009      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105d2a:	68fb      	ldr	r3, [r7, #12]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	4a5e      	ldr	r2, [pc, #376]	; (8105ea8 <DMA_SetConfig+0x274>)
 8105d30:	4293      	cmp	r3, r2
 8105d32:	d004      	beq.n	8105d3e <DMA_SetConfig+0x10a>
 8105d34:	68fb      	ldr	r3, [r7, #12]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	4a5c      	ldr	r2, [pc, #368]	; (8105eac <DMA_SetConfig+0x278>)
 8105d3a:	4293      	cmp	r3, r2
 8105d3c:	d101      	bne.n	8105d42 <DMA_SetConfig+0x10e>
 8105d3e:	2301      	movs	r3, #1
 8105d40:	e000      	b.n	8105d44 <DMA_SetConfig+0x110>
 8105d42:	2300      	movs	r3, #0
 8105d44:	2b00      	cmp	r3, #0
 8105d46:	d00d      	beq.n	8105d64 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105d48:	68fb      	ldr	r3, [r7, #12]
 8105d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d4c:	68fa      	ldr	r2, [r7, #12]
 8105d4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105d50:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8105d52:	68fb      	ldr	r3, [r7, #12]
 8105d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105d56:	2b00      	cmp	r3, #0
 8105d58:	d004      	beq.n	8105d64 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105d5a:	68fb      	ldr	r3, [r7, #12]
 8105d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105d5e:	68fa      	ldr	r2, [r7, #12]
 8105d60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105d62:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105d64:	68fb      	ldr	r3, [r7, #12]
 8105d66:	681b      	ldr	r3, [r3, #0]
 8105d68:	4a39      	ldr	r2, [pc, #228]	; (8105e50 <DMA_SetConfig+0x21c>)
 8105d6a:	4293      	cmp	r3, r2
 8105d6c:	d04a      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105d6e:	68fb      	ldr	r3, [r7, #12]
 8105d70:	681b      	ldr	r3, [r3, #0]
 8105d72:	4a38      	ldr	r2, [pc, #224]	; (8105e54 <DMA_SetConfig+0x220>)
 8105d74:	4293      	cmp	r3, r2
 8105d76:	d045      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105d78:	68fb      	ldr	r3, [r7, #12]
 8105d7a:	681b      	ldr	r3, [r3, #0]
 8105d7c:	4a36      	ldr	r2, [pc, #216]	; (8105e58 <DMA_SetConfig+0x224>)
 8105d7e:	4293      	cmp	r3, r2
 8105d80:	d040      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105d82:	68fb      	ldr	r3, [r7, #12]
 8105d84:	681b      	ldr	r3, [r3, #0]
 8105d86:	4a35      	ldr	r2, [pc, #212]	; (8105e5c <DMA_SetConfig+0x228>)
 8105d88:	4293      	cmp	r3, r2
 8105d8a:	d03b      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105d8c:	68fb      	ldr	r3, [r7, #12]
 8105d8e:	681b      	ldr	r3, [r3, #0]
 8105d90:	4a33      	ldr	r2, [pc, #204]	; (8105e60 <DMA_SetConfig+0x22c>)
 8105d92:	4293      	cmp	r3, r2
 8105d94:	d036      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105d96:	68fb      	ldr	r3, [r7, #12]
 8105d98:	681b      	ldr	r3, [r3, #0]
 8105d9a:	4a32      	ldr	r2, [pc, #200]	; (8105e64 <DMA_SetConfig+0x230>)
 8105d9c:	4293      	cmp	r3, r2
 8105d9e:	d031      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105da0:	68fb      	ldr	r3, [r7, #12]
 8105da2:	681b      	ldr	r3, [r3, #0]
 8105da4:	4a30      	ldr	r2, [pc, #192]	; (8105e68 <DMA_SetConfig+0x234>)
 8105da6:	4293      	cmp	r3, r2
 8105da8:	d02c      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105daa:	68fb      	ldr	r3, [r7, #12]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	4a2f      	ldr	r2, [pc, #188]	; (8105e6c <DMA_SetConfig+0x238>)
 8105db0:	4293      	cmp	r3, r2
 8105db2:	d027      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105db4:	68fb      	ldr	r3, [r7, #12]
 8105db6:	681b      	ldr	r3, [r3, #0]
 8105db8:	4a2d      	ldr	r2, [pc, #180]	; (8105e70 <DMA_SetConfig+0x23c>)
 8105dba:	4293      	cmp	r3, r2
 8105dbc:	d022      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105dbe:	68fb      	ldr	r3, [r7, #12]
 8105dc0:	681b      	ldr	r3, [r3, #0]
 8105dc2:	4a2c      	ldr	r2, [pc, #176]	; (8105e74 <DMA_SetConfig+0x240>)
 8105dc4:	4293      	cmp	r3, r2
 8105dc6:	d01d      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105dc8:	68fb      	ldr	r3, [r7, #12]
 8105dca:	681b      	ldr	r3, [r3, #0]
 8105dcc:	4a2a      	ldr	r2, [pc, #168]	; (8105e78 <DMA_SetConfig+0x244>)
 8105dce:	4293      	cmp	r3, r2
 8105dd0:	d018      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105dd2:	68fb      	ldr	r3, [r7, #12]
 8105dd4:	681b      	ldr	r3, [r3, #0]
 8105dd6:	4a29      	ldr	r2, [pc, #164]	; (8105e7c <DMA_SetConfig+0x248>)
 8105dd8:	4293      	cmp	r3, r2
 8105dda:	d013      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105ddc:	68fb      	ldr	r3, [r7, #12]
 8105dde:	681b      	ldr	r3, [r3, #0]
 8105de0:	4a27      	ldr	r2, [pc, #156]	; (8105e80 <DMA_SetConfig+0x24c>)
 8105de2:	4293      	cmp	r3, r2
 8105de4:	d00e      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105de6:	68fb      	ldr	r3, [r7, #12]
 8105de8:	681b      	ldr	r3, [r3, #0]
 8105dea:	4a26      	ldr	r2, [pc, #152]	; (8105e84 <DMA_SetConfig+0x250>)
 8105dec:	4293      	cmp	r3, r2
 8105dee:	d009      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105df0:	68fb      	ldr	r3, [r7, #12]
 8105df2:	681b      	ldr	r3, [r3, #0]
 8105df4:	4a24      	ldr	r2, [pc, #144]	; (8105e88 <DMA_SetConfig+0x254>)
 8105df6:	4293      	cmp	r3, r2
 8105df8:	d004      	beq.n	8105e04 <DMA_SetConfig+0x1d0>
 8105dfa:	68fb      	ldr	r3, [r7, #12]
 8105dfc:	681b      	ldr	r3, [r3, #0]
 8105dfe:	4a23      	ldr	r2, [pc, #140]	; (8105e8c <DMA_SetConfig+0x258>)
 8105e00:	4293      	cmp	r3, r2
 8105e02:	d101      	bne.n	8105e08 <DMA_SetConfig+0x1d4>
 8105e04:	2301      	movs	r3, #1
 8105e06:	e000      	b.n	8105e0a <DMA_SetConfig+0x1d6>
 8105e08:	2300      	movs	r3, #0
 8105e0a:	2b00      	cmp	r3, #0
 8105e0c:	d059      	beq.n	8105ec2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105e0e:	68fb      	ldr	r3, [r7, #12]
 8105e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e12:	f003 031f 	and.w	r3, r3, #31
 8105e16:	223f      	movs	r2, #63	; 0x3f
 8105e18:	409a      	lsls	r2, r3
 8105e1a:	697b      	ldr	r3, [r7, #20]
 8105e1c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8105e1e:	68fb      	ldr	r3, [r7, #12]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	681a      	ldr	r2, [r3, #0]
 8105e24:	68fb      	ldr	r3, [r7, #12]
 8105e26:	681b      	ldr	r3, [r3, #0]
 8105e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8105e2c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8105e2e:	68fb      	ldr	r3, [r7, #12]
 8105e30:	681b      	ldr	r3, [r3, #0]
 8105e32:	683a      	ldr	r2, [r7, #0]
 8105e34:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105e36:	68fb      	ldr	r3, [r7, #12]
 8105e38:	689b      	ldr	r3, [r3, #8]
 8105e3a:	2b40      	cmp	r3, #64	; 0x40
 8105e3c:	d138      	bne.n	8105eb0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8105e3e:	68fb      	ldr	r3, [r7, #12]
 8105e40:	681b      	ldr	r3, [r3, #0]
 8105e42:	687a      	ldr	r2, [r7, #4]
 8105e44:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8105e46:	68fb      	ldr	r3, [r7, #12]
 8105e48:	681b      	ldr	r3, [r3, #0]
 8105e4a:	68ba      	ldr	r2, [r7, #8]
 8105e4c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105e4e:	e086      	b.n	8105f5e <DMA_SetConfig+0x32a>
 8105e50:	40020010 	.word	0x40020010
 8105e54:	40020028 	.word	0x40020028
 8105e58:	40020040 	.word	0x40020040
 8105e5c:	40020058 	.word	0x40020058
 8105e60:	40020070 	.word	0x40020070
 8105e64:	40020088 	.word	0x40020088
 8105e68:	400200a0 	.word	0x400200a0
 8105e6c:	400200b8 	.word	0x400200b8
 8105e70:	40020410 	.word	0x40020410
 8105e74:	40020428 	.word	0x40020428
 8105e78:	40020440 	.word	0x40020440
 8105e7c:	40020458 	.word	0x40020458
 8105e80:	40020470 	.word	0x40020470
 8105e84:	40020488 	.word	0x40020488
 8105e88:	400204a0 	.word	0x400204a0
 8105e8c:	400204b8 	.word	0x400204b8
 8105e90:	58025408 	.word	0x58025408
 8105e94:	5802541c 	.word	0x5802541c
 8105e98:	58025430 	.word	0x58025430
 8105e9c:	58025444 	.word	0x58025444
 8105ea0:	58025458 	.word	0x58025458
 8105ea4:	5802546c 	.word	0x5802546c
 8105ea8:	58025480 	.word	0x58025480
 8105eac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8105eb0:	68fb      	ldr	r3, [r7, #12]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	68ba      	ldr	r2, [r7, #8]
 8105eb6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8105eb8:	68fb      	ldr	r3, [r7, #12]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	687a      	ldr	r2, [r7, #4]
 8105ebe:	60da      	str	r2, [r3, #12]
}
 8105ec0:	e04d      	b.n	8105f5e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8105ec2:	68fb      	ldr	r3, [r7, #12]
 8105ec4:	681b      	ldr	r3, [r3, #0]
 8105ec6:	4a29      	ldr	r2, [pc, #164]	; (8105f6c <DMA_SetConfig+0x338>)
 8105ec8:	4293      	cmp	r3, r2
 8105eca:	d022      	beq.n	8105f12 <DMA_SetConfig+0x2de>
 8105ecc:	68fb      	ldr	r3, [r7, #12]
 8105ece:	681b      	ldr	r3, [r3, #0]
 8105ed0:	4a27      	ldr	r2, [pc, #156]	; (8105f70 <DMA_SetConfig+0x33c>)
 8105ed2:	4293      	cmp	r3, r2
 8105ed4:	d01d      	beq.n	8105f12 <DMA_SetConfig+0x2de>
 8105ed6:	68fb      	ldr	r3, [r7, #12]
 8105ed8:	681b      	ldr	r3, [r3, #0]
 8105eda:	4a26      	ldr	r2, [pc, #152]	; (8105f74 <DMA_SetConfig+0x340>)
 8105edc:	4293      	cmp	r3, r2
 8105ede:	d018      	beq.n	8105f12 <DMA_SetConfig+0x2de>
 8105ee0:	68fb      	ldr	r3, [r7, #12]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	4a24      	ldr	r2, [pc, #144]	; (8105f78 <DMA_SetConfig+0x344>)
 8105ee6:	4293      	cmp	r3, r2
 8105ee8:	d013      	beq.n	8105f12 <DMA_SetConfig+0x2de>
 8105eea:	68fb      	ldr	r3, [r7, #12]
 8105eec:	681b      	ldr	r3, [r3, #0]
 8105eee:	4a23      	ldr	r2, [pc, #140]	; (8105f7c <DMA_SetConfig+0x348>)
 8105ef0:	4293      	cmp	r3, r2
 8105ef2:	d00e      	beq.n	8105f12 <DMA_SetConfig+0x2de>
 8105ef4:	68fb      	ldr	r3, [r7, #12]
 8105ef6:	681b      	ldr	r3, [r3, #0]
 8105ef8:	4a21      	ldr	r2, [pc, #132]	; (8105f80 <DMA_SetConfig+0x34c>)
 8105efa:	4293      	cmp	r3, r2
 8105efc:	d009      	beq.n	8105f12 <DMA_SetConfig+0x2de>
 8105efe:	68fb      	ldr	r3, [r7, #12]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	4a20      	ldr	r2, [pc, #128]	; (8105f84 <DMA_SetConfig+0x350>)
 8105f04:	4293      	cmp	r3, r2
 8105f06:	d004      	beq.n	8105f12 <DMA_SetConfig+0x2de>
 8105f08:	68fb      	ldr	r3, [r7, #12]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	4a1e      	ldr	r2, [pc, #120]	; (8105f88 <DMA_SetConfig+0x354>)
 8105f0e:	4293      	cmp	r3, r2
 8105f10:	d101      	bne.n	8105f16 <DMA_SetConfig+0x2e2>
 8105f12:	2301      	movs	r3, #1
 8105f14:	e000      	b.n	8105f18 <DMA_SetConfig+0x2e4>
 8105f16:	2300      	movs	r3, #0
 8105f18:	2b00      	cmp	r3, #0
 8105f1a:	d020      	beq.n	8105f5e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105f1c:	68fb      	ldr	r3, [r7, #12]
 8105f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105f20:	f003 031f 	and.w	r3, r3, #31
 8105f24:	2201      	movs	r2, #1
 8105f26:	409a      	lsls	r2, r3
 8105f28:	693b      	ldr	r3, [r7, #16]
 8105f2a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8105f2c:	68fb      	ldr	r3, [r7, #12]
 8105f2e:	681b      	ldr	r3, [r3, #0]
 8105f30:	683a      	ldr	r2, [r7, #0]
 8105f32:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105f34:	68fb      	ldr	r3, [r7, #12]
 8105f36:	689b      	ldr	r3, [r3, #8]
 8105f38:	2b40      	cmp	r3, #64	; 0x40
 8105f3a:	d108      	bne.n	8105f4e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8105f3c:	68fb      	ldr	r3, [r7, #12]
 8105f3e:	681b      	ldr	r3, [r3, #0]
 8105f40:	687a      	ldr	r2, [r7, #4]
 8105f42:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8105f44:	68fb      	ldr	r3, [r7, #12]
 8105f46:	681b      	ldr	r3, [r3, #0]
 8105f48:	68ba      	ldr	r2, [r7, #8]
 8105f4a:	60da      	str	r2, [r3, #12]
}
 8105f4c:	e007      	b.n	8105f5e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8105f4e:	68fb      	ldr	r3, [r7, #12]
 8105f50:	681b      	ldr	r3, [r3, #0]
 8105f52:	68ba      	ldr	r2, [r7, #8]
 8105f54:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8105f56:	68fb      	ldr	r3, [r7, #12]
 8105f58:	681b      	ldr	r3, [r3, #0]
 8105f5a:	687a      	ldr	r2, [r7, #4]
 8105f5c:	60da      	str	r2, [r3, #12]
}
 8105f5e:	bf00      	nop
 8105f60:	371c      	adds	r7, #28
 8105f62:	46bd      	mov	sp, r7
 8105f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f68:	4770      	bx	lr
 8105f6a:	bf00      	nop
 8105f6c:	58025408 	.word	0x58025408
 8105f70:	5802541c 	.word	0x5802541c
 8105f74:	58025430 	.word	0x58025430
 8105f78:	58025444 	.word	0x58025444
 8105f7c:	58025458 	.word	0x58025458
 8105f80:	5802546c 	.word	0x5802546c
 8105f84:	58025480 	.word	0x58025480
 8105f88:	58025494 	.word	0x58025494

08105f8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8105f8c:	b480      	push	{r7}
 8105f8e:	b085      	sub	sp, #20
 8105f90:	af00      	add	r7, sp, #0
 8105f92:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105f94:	687b      	ldr	r3, [r7, #4]
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	4a43      	ldr	r2, [pc, #268]	; (81060a8 <DMA_CalcBaseAndBitshift+0x11c>)
 8105f9a:	4293      	cmp	r3, r2
 8105f9c:	d04a      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	681b      	ldr	r3, [r3, #0]
 8105fa2:	4a42      	ldr	r2, [pc, #264]	; (81060ac <DMA_CalcBaseAndBitshift+0x120>)
 8105fa4:	4293      	cmp	r3, r2
 8105fa6:	d045      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105fa8:	687b      	ldr	r3, [r7, #4]
 8105faa:	681b      	ldr	r3, [r3, #0]
 8105fac:	4a40      	ldr	r2, [pc, #256]	; (81060b0 <DMA_CalcBaseAndBitshift+0x124>)
 8105fae:	4293      	cmp	r3, r2
 8105fb0:	d040      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105fb2:	687b      	ldr	r3, [r7, #4]
 8105fb4:	681b      	ldr	r3, [r3, #0]
 8105fb6:	4a3f      	ldr	r2, [pc, #252]	; (81060b4 <DMA_CalcBaseAndBitshift+0x128>)
 8105fb8:	4293      	cmp	r3, r2
 8105fba:	d03b      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	4a3d      	ldr	r2, [pc, #244]	; (81060b8 <DMA_CalcBaseAndBitshift+0x12c>)
 8105fc2:	4293      	cmp	r3, r2
 8105fc4:	d036      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	681b      	ldr	r3, [r3, #0]
 8105fca:	4a3c      	ldr	r2, [pc, #240]	; (81060bc <DMA_CalcBaseAndBitshift+0x130>)
 8105fcc:	4293      	cmp	r3, r2
 8105fce:	d031      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	681b      	ldr	r3, [r3, #0]
 8105fd4:	4a3a      	ldr	r2, [pc, #232]	; (81060c0 <DMA_CalcBaseAndBitshift+0x134>)
 8105fd6:	4293      	cmp	r3, r2
 8105fd8:	d02c      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	681b      	ldr	r3, [r3, #0]
 8105fde:	4a39      	ldr	r2, [pc, #228]	; (81060c4 <DMA_CalcBaseAndBitshift+0x138>)
 8105fe0:	4293      	cmp	r3, r2
 8105fe2:	d027      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	681b      	ldr	r3, [r3, #0]
 8105fe8:	4a37      	ldr	r2, [pc, #220]	; (81060c8 <DMA_CalcBaseAndBitshift+0x13c>)
 8105fea:	4293      	cmp	r3, r2
 8105fec:	d022      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	681b      	ldr	r3, [r3, #0]
 8105ff2:	4a36      	ldr	r2, [pc, #216]	; (81060cc <DMA_CalcBaseAndBitshift+0x140>)
 8105ff4:	4293      	cmp	r3, r2
 8105ff6:	d01d      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8105ff8:	687b      	ldr	r3, [r7, #4]
 8105ffa:	681b      	ldr	r3, [r3, #0]
 8105ffc:	4a34      	ldr	r2, [pc, #208]	; (81060d0 <DMA_CalcBaseAndBitshift+0x144>)
 8105ffe:	4293      	cmp	r3, r2
 8106000:	d018      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	4a33      	ldr	r2, [pc, #204]	; (81060d4 <DMA_CalcBaseAndBitshift+0x148>)
 8106008:	4293      	cmp	r3, r2
 810600a:	d013      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	681b      	ldr	r3, [r3, #0]
 8106010:	4a31      	ldr	r2, [pc, #196]	; (81060d8 <DMA_CalcBaseAndBitshift+0x14c>)
 8106012:	4293      	cmp	r3, r2
 8106014:	d00e      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8106016:	687b      	ldr	r3, [r7, #4]
 8106018:	681b      	ldr	r3, [r3, #0]
 810601a:	4a30      	ldr	r2, [pc, #192]	; (81060dc <DMA_CalcBaseAndBitshift+0x150>)
 810601c:	4293      	cmp	r3, r2
 810601e:	d009      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 8106020:	687b      	ldr	r3, [r7, #4]
 8106022:	681b      	ldr	r3, [r3, #0]
 8106024:	4a2e      	ldr	r2, [pc, #184]	; (81060e0 <DMA_CalcBaseAndBitshift+0x154>)
 8106026:	4293      	cmp	r3, r2
 8106028:	d004      	beq.n	8106034 <DMA_CalcBaseAndBitshift+0xa8>
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	681b      	ldr	r3, [r3, #0]
 810602e:	4a2d      	ldr	r2, [pc, #180]	; (81060e4 <DMA_CalcBaseAndBitshift+0x158>)
 8106030:	4293      	cmp	r3, r2
 8106032:	d101      	bne.n	8106038 <DMA_CalcBaseAndBitshift+0xac>
 8106034:	2301      	movs	r3, #1
 8106036:	e000      	b.n	810603a <DMA_CalcBaseAndBitshift+0xae>
 8106038:	2300      	movs	r3, #0
 810603a:	2b00      	cmp	r3, #0
 810603c:	d026      	beq.n	810608c <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810603e:	687b      	ldr	r3, [r7, #4]
 8106040:	681b      	ldr	r3, [r3, #0]
 8106042:	b2db      	uxtb	r3, r3
 8106044:	3b10      	subs	r3, #16
 8106046:	4a28      	ldr	r2, [pc, #160]	; (81060e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8106048:	fba2 2303 	umull	r2, r3, r2, r3
 810604c:	091b      	lsrs	r3, r3, #4
 810604e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106050:	68fb      	ldr	r3, [r7, #12]
 8106052:	f003 0307 	and.w	r3, r3, #7
 8106056:	4a25      	ldr	r2, [pc, #148]	; (81060ec <DMA_CalcBaseAndBitshift+0x160>)
 8106058:	5cd3      	ldrb	r3, [r2, r3]
 810605a:	461a      	mov	r2, r3
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106060:	68fb      	ldr	r3, [r7, #12]
 8106062:	2b03      	cmp	r3, #3
 8106064:	d909      	bls.n	810607a <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106066:	687b      	ldr	r3, [r7, #4]
 8106068:	681b      	ldr	r3, [r3, #0]
 810606a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810606e:	f023 0303 	bic.w	r3, r3, #3
 8106072:	1d1a      	adds	r2, r3, #4
 8106074:	687b      	ldr	r3, [r7, #4]
 8106076:	659a      	str	r2, [r3, #88]	; 0x58
 8106078:	e00e      	b.n	8106098 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810607a:	687b      	ldr	r3, [r7, #4]
 810607c:	681b      	ldr	r3, [r3, #0]
 810607e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106082:	f023 0303 	bic.w	r3, r3, #3
 8106086:	687a      	ldr	r2, [r7, #4]
 8106088:	6593      	str	r3, [r2, #88]	; 0x58
 810608a:	e005      	b.n	8106098 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 810608c:	687b      	ldr	r3, [r7, #4]
 810608e:	681b      	ldr	r3, [r3, #0]
 8106090:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106094:	687b      	ldr	r3, [r7, #4]
 8106096:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 810609c:	4618      	mov	r0, r3
 810609e:	3714      	adds	r7, #20
 81060a0:	46bd      	mov	sp, r7
 81060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060a6:	4770      	bx	lr
 81060a8:	40020010 	.word	0x40020010
 81060ac:	40020028 	.word	0x40020028
 81060b0:	40020040 	.word	0x40020040
 81060b4:	40020058 	.word	0x40020058
 81060b8:	40020070 	.word	0x40020070
 81060bc:	40020088 	.word	0x40020088
 81060c0:	400200a0 	.word	0x400200a0
 81060c4:	400200b8 	.word	0x400200b8
 81060c8:	40020410 	.word	0x40020410
 81060cc:	40020428 	.word	0x40020428
 81060d0:	40020440 	.word	0x40020440
 81060d4:	40020458 	.word	0x40020458
 81060d8:	40020470 	.word	0x40020470
 81060dc:	40020488 	.word	0x40020488
 81060e0:	400204a0 	.word	0x400204a0
 81060e4:	400204b8 	.word	0x400204b8
 81060e8:	aaaaaaab 	.word	0xaaaaaaab
 81060ec:	0810e9bc 	.word	0x0810e9bc

081060f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81060f0:	b480      	push	{r7}
 81060f2:	b085      	sub	sp, #20
 81060f4:	af00      	add	r7, sp, #0
 81060f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81060f8:	2300      	movs	r3, #0
 81060fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	699b      	ldr	r3, [r3, #24]
 8106100:	2b00      	cmp	r3, #0
 8106102:	d120      	bne.n	8106146 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106108:	2b03      	cmp	r3, #3
 810610a:	d858      	bhi.n	81061be <DMA_CheckFifoParam+0xce>
 810610c:	a201      	add	r2, pc, #4	; (adr r2, 8106114 <DMA_CheckFifoParam+0x24>)
 810610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106112:	bf00      	nop
 8106114:	08106125 	.word	0x08106125
 8106118:	08106137 	.word	0x08106137
 810611c:	08106125 	.word	0x08106125
 8106120:	081061bf 	.word	0x081061bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810612c:	2b00      	cmp	r3, #0
 810612e:	d048      	beq.n	81061c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106130:	2301      	movs	r3, #1
 8106132:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106134:	e045      	b.n	81061c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810613a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810613e:	d142      	bne.n	81061c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106140:	2301      	movs	r3, #1
 8106142:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106144:	e03f      	b.n	81061c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	699b      	ldr	r3, [r3, #24]
 810614a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810614e:	d123      	bne.n	8106198 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106150:	687b      	ldr	r3, [r7, #4]
 8106152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106154:	2b03      	cmp	r3, #3
 8106156:	d838      	bhi.n	81061ca <DMA_CheckFifoParam+0xda>
 8106158:	a201      	add	r2, pc, #4	; (adr r2, 8106160 <DMA_CheckFifoParam+0x70>)
 810615a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810615e:	bf00      	nop
 8106160:	08106171 	.word	0x08106171
 8106164:	08106177 	.word	0x08106177
 8106168:	08106171 	.word	0x08106171
 810616c:	08106189 	.word	0x08106189
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106170:	2301      	movs	r3, #1
 8106172:	73fb      	strb	r3, [r7, #15]
        break;
 8106174:	e030      	b.n	81061d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810617a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810617e:	2b00      	cmp	r3, #0
 8106180:	d025      	beq.n	81061ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106182:	2301      	movs	r3, #1
 8106184:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106186:	e022      	b.n	81061ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810618c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106190:	d11f      	bne.n	81061d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106192:	2301      	movs	r3, #1
 8106194:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106196:	e01c      	b.n	81061d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106198:	687b      	ldr	r3, [r7, #4]
 810619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810619c:	2b02      	cmp	r3, #2
 810619e:	d902      	bls.n	81061a6 <DMA_CheckFifoParam+0xb6>
 81061a0:	2b03      	cmp	r3, #3
 81061a2:	d003      	beq.n	81061ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81061a4:	e018      	b.n	81061d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81061a6:	2301      	movs	r3, #1
 81061a8:	73fb      	strb	r3, [r7, #15]
        break;
 81061aa:	e015      	b.n	81061d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81061ac:	687b      	ldr	r3, [r7, #4]
 81061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81061b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81061b4:	2b00      	cmp	r3, #0
 81061b6:	d00e      	beq.n	81061d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81061b8:	2301      	movs	r3, #1
 81061ba:	73fb      	strb	r3, [r7, #15]
    break;
 81061bc:	e00b      	b.n	81061d6 <DMA_CheckFifoParam+0xe6>
        break;
 81061be:	bf00      	nop
 81061c0:	e00a      	b.n	81061d8 <DMA_CheckFifoParam+0xe8>
        break;
 81061c2:	bf00      	nop
 81061c4:	e008      	b.n	81061d8 <DMA_CheckFifoParam+0xe8>
        break;
 81061c6:	bf00      	nop
 81061c8:	e006      	b.n	81061d8 <DMA_CheckFifoParam+0xe8>
        break;
 81061ca:	bf00      	nop
 81061cc:	e004      	b.n	81061d8 <DMA_CheckFifoParam+0xe8>
        break;
 81061ce:	bf00      	nop
 81061d0:	e002      	b.n	81061d8 <DMA_CheckFifoParam+0xe8>
        break;
 81061d2:	bf00      	nop
 81061d4:	e000      	b.n	81061d8 <DMA_CheckFifoParam+0xe8>
    break;
 81061d6:	bf00      	nop
    }
  }

  return status;
 81061d8:	7bfb      	ldrb	r3, [r7, #15]
}
 81061da:	4618      	mov	r0, r3
 81061dc:	3714      	adds	r7, #20
 81061de:	46bd      	mov	sp, r7
 81061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061e4:	4770      	bx	lr
 81061e6:	bf00      	nop

081061e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81061e8:	b480      	push	{r7}
 81061ea:	b085      	sub	sp, #20
 81061ec:	af00      	add	r7, sp, #0
 81061ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81061f0:	687b      	ldr	r3, [r7, #4]
 81061f2:	681b      	ldr	r3, [r3, #0]
 81061f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81061f6:	687b      	ldr	r3, [r7, #4]
 81061f8:	681b      	ldr	r3, [r3, #0]
 81061fa:	4a3a      	ldr	r2, [pc, #232]	; (81062e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81061fc:	4293      	cmp	r3, r2
 81061fe:	d022      	beq.n	8106246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	681b      	ldr	r3, [r3, #0]
 8106204:	4a38      	ldr	r2, [pc, #224]	; (81062e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106206:	4293      	cmp	r3, r2
 8106208:	d01d      	beq.n	8106246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	4a37      	ldr	r2, [pc, #220]	; (81062ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106210:	4293      	cmp	r3, r2
 8106212:	d018      	beq.n	8106246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106214:	687b      	ldr	r3, [r7, #4]
 8106216:	681b      	ldr	r3, [r3, #0]
 8106218:	4a35      	ldr	r2, [pc, #212]	; (81062f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810621a:	4293      	cmp	r3, r2
 810621c:	d013      	beq.n	8106246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810621e:	687b      	ldr	r3, [r7, #4]
 8106220:	681b      	ldr	r3, [r3, #0]
 8106222:	4a34      	ldr	r2, [pc, #208]	; (81062f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106224:	4293      	cmp	r3, r2
 8106226:	d00e      	beq.n	8106246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	681b      	ldr	r3, [r3, #0]
 810622c:	4a32      	ldr	r2, [pc, #200]	; (81062f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810622e:	4293      	cmp	r3, r2
 8106230:	d009      	beq.n	8106246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	681b      	ldr	r3, [r3, #0]
 8106236:	4a31      	ldr	r2, [pc, #196]	; (81062fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106238:	4293      	cmp	r3, r2
 810623a:	d004      	beq.n	8106246 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	681b      	ldr	r3, [r3, #0]
 8106240:	4a2f      	ldr	r2, [pc, #188]	; (8106300 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106242:	4293      	cmp	r3, r2
 8106244:	d101      	bne.n	810624a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106246:	2301      	movs	r3, #1
 8106248:	e000      	b.n	810624c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810624a:	2300      	movs	r3, #0
 810624c:	2b00      	cmp	r3, #0
 810624e:	d01c      	beq.n	810628a <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	b2db      	uxtb	r3, r3
 8106256:	3b08      	subs	r3, #8
 8106258:	4a2a      	ldr	r2, [pc, #168]	; (8106304 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810625a:	fba2 2303 	umull	r2, r3, r2, r3
 810625e:	091b      	lsrs	r3, r3, #4
 8106260:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106262:	68fb      	ldr	r3, [r7, #12]
 8106264:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8106268:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 810626c:	009b      	lsls	r3, r3, #2
 810626e:	461a      	mov	r2, r3
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	4a24      	ldr	r2, [pc, #144]	; (8106308 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106278:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810627a:	68fb      	ldr	r3, [r7, #12]
 810627c:	f003 031f 	and.w	r3, r3, #31
 8106280:	2201      	movs	r2, #1
 8106282:	409a      	lsls	r2, r3
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106288:	e026      	b.n	81062d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	681b      	ldr	r3, [r3, #0]
 810628e:	b2db      	uxtb	r3, r3
 8106290:	3b10      	subs	r3, #16
 8106292:	4a1e      	ldr	r2, [pc, #120]	; (810630c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106294:	fba2 2303 	umull	r2, r3, r2, r3
 8106298:	091b      	lsrs	r3, r3, #4
 810629a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 810629c:	68bb      	ldr	r3, [r7, #8]
 810629e:	4a1c      	ldr	r2, [pc, #112]	; (8106310 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81062a0:	4293      	cmp	r3, r2
 81062a2:	d806      	bhi.n	81062b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81062a4:	68bb      	ldr	r3, [r7, #8]
 81062a6:	4a1b      	ldr	r2, [pc, #108]	; (8106314 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81062a8:	4293      	cmp	r3, r2
 81062aa:	d902      	bls.n	81062b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81062ac:	68fb      	ldr	r3, [r7, #12]
 81062ae:	3308      	adds	r3, #8
 81062b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81062b2:	68fb      	ldr	r3, [r7, #12]
 81062b4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81062b8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81062bc:	009b      	lsls	r3, r3, #2
 81062be:	461a      	mov	r2, r3
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81062c4:	687b      	ldr	r3, [r7, #4]
 81062c6:	4a14      	ldr	r2, [pc, #80]	; (8106318 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81062c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81062ca:	68fb      	ldr	r3, [r7, #12]
 81062cc:	f003 031f 	and.w	r3, r3, #31
 81062d0:	2201      	movs	r2, #1
 81062d2:	409a      	lsls	r2, r3
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 81062d8:	bf00      	nop
 81062da:	3714      	adds	r7, #20
 81062dc:	46bd      	mov	sp, r7
 81062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062e2:	4770      	bx	lr
 81062e4:	58025408 	.word	0x58025408
 81062e8:	5802541c 	.word	0x5802541c
 81062ec:	58025430 	.word	0x58025430
 81062f0:	58025444 	.word	0x58025444
 81062f4:	58025458 	.word	0x58025458
 81062f8:	5802546c 	.word	0x5802546c
 81062fc:	58025480 	.word	0x58025480
 8106300:	58025494 	.word	0x58025494
 8106304:	cccccccd 	.word	0xcccccccd
 8106308:	58025880 	.word	0x58025880
 810630c:	aaaaaaab 	.word	0xaaaaaaab
 8106310:	400204b8 	.word	0x400204b8
 8106314:	4002040f 	.word	0x4002040f
 8106318:	40020880 	.word	0x40020880

0810631c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810631c:	b480      	push	{r7}
 810631e:	b085      	sub	sp, #20
 8106320:	af00      	add	r7, sp, #0
 8106322:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106324:	687b      	ldr	r3, [r7, #4]
 8106326:	685b      	ldr	r3, [r3, #4]
 8106328:	b2db      	uxtb	r3, r3
 810632a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 810632c:	68fb      	ldr	r3, [r7, #12]
 810632e:	2b00      	cmp	r3, #0
 8106330:	d04a      	beq.n	81063c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106332:	68fb      	ldr	r3, [r7, #12]
 8106334:	2b08      	cmp	r3, #8
 8106336:	d847      	bhi.n	81063c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	4a25      	ldr	r2, [pc, #148]	; (81063d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810633e:	4293      	cmp	r3, r2
 8106340:	d022      	beq.n	8106388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	681b      	ldr	r3, [r3, #0]
 8106346:	4a24      	ldr	r2, [pc, #144]	; (81063d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106348:	4293      	cmp	r3, r2
 810634a:	d01d      	beq.n	8106388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810634c:	687b      	ldr	r3, [r7, #4]
 810634e:	681b      	ldr	r3, [r3, #0]
 8106350:	4a22      	ldr	r2, [pc, #136]	; (81063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106352:	4293      	cmp	r3, r2
 8106354:	d018      	beq.n	8106388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	681b      	ldr	r3, [r3, #0]
 810635a:	4a21      	ldr	r2, [pc, #132]	; (81063e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 810635c:	4293      	cmp	r3, r2
 810635e:	d013      	beq.n	8106388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	681b      	ldr	r3, [r3, #0]
 8106364:	4a1f      	ldr	r2, [pc, #124]	; (81063e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106366:	4293      	cmp	r3, r2
 8106368:	d00e      	beq.n	8106388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810636a:	687b      	ldr	r3, [r7, #4]
 810636c:	681b      	ldr	r3, [r3, #0]
 810636e:	4a1e      	ldr	r2, [pc, #120]	; (81063e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106370:	4293      	cmp	r3, r2
 8106372:	d009      	beq.n	8106388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	681b      	ldr	r3, [r3, #0]
 8106378:	4a1c      	ldr	r2, [pc, #112]	; (81063ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810637a:	4293      	cmp	r3, r2
 810637c:	d004      	beq.n	8106388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810637e:	687b      	ldr	r3, [r7, #4]
 8106380:	681b      	ldr	r3, [r3, #0]
 8106382:	4a1b      	ldr	r2, [pc, #108]	; (81063f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106384:	4293      	cmp	r3, r2
 8106386:	d101      	bne.n	810638c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106388:	2301      	movs	r3, #1
 810638a:	e000      	b.n	810638e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 810638c:	2300      	movs	r3, #0
 810638e:	2b00      	cmp	r3, #0
 8106390:	d00a      	beq.n	81063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106392:	68fa      	ldr	r2, [r7, #12]
 8106394:	4b17      	ldr	r3, [pc, #92]	; (81063f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8106396:	4413      	add	r3, r2
 8106398:	009b      	lsls	r3, r3, #2
 810639a:	461a      	mov	r2, r3
 810639c:	687b      	ldr	r3, [r7, #4]
 810639e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	4a15      	ldr	r2, [pc, #84]	; (81063f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 81063a4:	671a      	str	r2, [r3, #112]	; 0x70
 81063a6:	e009      	b.n	81063bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81063a8:	68fa      	ldr	r2, [r7, #12]
 81063aa:	4b14      	ldr	r3, [pc, #80]	; (81063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81063ac:	4413      	add	r3, r2
 81063ae:	009b      	lsls	r3, r3, #2
 81063b0:	461a      	mov	r2, r3
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	4a11      	ldr	r2, [pc, #68]	; (8106400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81063ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81063bc:	68fb      	ldr	r3, [r7, #12]
 81063be:	3b01      	subs	r3, #1
 81063c0:	2201      	movs	r2, #1
 81063c2:	409a      	lsls	r2, r3
 81063c4:	687b      	ldr	r3, [r7, #4]
 81063c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81063c8:	bf00      	nop
 81063ca:	3714      	adds	r7, #20
 81063cc:	46bd      	mov	sp, r7
 81063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063d2:	4770      	bx	lr
 81063d4:	58025408 	.word	0x58025408
 81063d8:	5802541c 	.word	0x5802541c
 81063dc:	58025430 	.word	0x58025430
 81063e0:	58025444 	.word	0x58025444
 81063e4:	58025458 	.word	0x58025458
 81063e8:	5802546c 	.word	0x5802546c
 81063ec:	58025480 	.word	0x58025480
 81063f0:	58025494 	.word	0x58025494
 81063f4:	1600963f 	.word	0x1600963f
 81063f8:	58025940 	.word	0x58025940
 81063fc:	1000823f 	.word	0x1000823f
 8106400:	40020940 	.word	0x40020940

08106404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8106404:	b480      	push	{r7}
 8106406:	b089      	sub	sp, #36	; 0x24
 8106408:	af00      	add	r7, sp, #0
 810640a:	6078      	str	r0, [r7, #4]
 810640c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810640e:	2300      	movs	r3, #0
 8106410:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106412:	4b89      	ldr	r3, [pc, #548]	; (8106638 <HAL_GPIO_Init+0x234>)
 8106414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106416:	e194      	b.n	8106742 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106418:	683b      	ldr	r3, [r7, #0]
 810641a:	681a      	ldr	r2, [r3, #0]
 810641c:	2101      	movs	r1, #1
 810641e:	69fb      	ldr	r3, [r7, #28]
 8106420:	fa01 f303 	lsl.w	r3, r1, r3
 8106424:	4013      	ands	r3, r2
 8106426:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106428:	693b      	ldr	r3, [r7, #16]
 810642a:	2b00      	cmp	r3, #0
 810642c:	f000 8186 	beq.w	810673c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106430:	683b      	ldr	r3, [r7, #0]
 8106432:	685b      	ldr	r3, [r3, #4]
 8106434:	2b01      	cmp	r3, #1
 8106436:	d00b      	beq.n	8106450 <HAL_GPIO_Init+0x4c>
 8106438:	683b      	ldr	r3, [r7, #0]
 810643a:	685b      	ldr	r3, [r3, #4]
 810643c:	2b02      	cmp	r3, #2
 810643e:	d007      	beq.n	8106450 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106440:	683b      	ldr	r3, [r7, #0]
 8106442:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106444:	2b11      	cmp	r3, #17
 8106446:	d003      	beq.n	8106450 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106448:	683b      	ldr	r3, [r7, #0]
 810644a:	685b      	ldr	r3, [r3, #4]
 810644c:	2b12      	cmp	r3, #18
 810644e:	d130      	bne.n	81064b2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	689b      	ldr	r3, [r3, #8]
 8106454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106456:	69fb      	ldr	r3, [r7, #28]
 8106458:	005b      	lsls	r3, r3, #1
 810645a:	2203      	movs	r2, #3
 810645c:	fa02 f303 	lsl.w	r3, r2, r3
 8106460:	43db      	mvns	r3, r3
 8106462:	69ba      	ldr	r2, [r7, #24]
 8106464:	4013      	ands	r3, r2
 8106466:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106468:	683b      	ldr	r3, [r7, #0]
 810646a:	68da      	ldr	r2, [r3, #12]
 810646c:	69fb      	ldr	r3, [r7, #28]
 810646e:	005b      	lsls	r3, r3, #1
 8106470:	fa02 f303 	lsl.w	r3, r2, r3
 8106474:	69ba      	ldr	r2, [r7, #24]
 8106476:	4313      	orrs	r3, r2
 8106478:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	69ba      	ldr	r2, [r7, #24]
 810647e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	685b      	ldr	r3, [r3, #4]
 8106484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106486:	2201      	movs	r2, #1
 8106488:	69fb      	ldr	r3, [r7, #28]
 810648a:	fa02 f303 	lsl.w	r3, r2, r3
 810648e:	43db      	mvns	r3, r3
 8106490:	69ba      	ldr	r2, [r7, #24]
 8106492:	4013      	ands	r3, r2
 8106494:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8106496:	683b      	ldr	r3, [r7, #0]
 8106498:	685b      	ldr	r3, [r3, #4]
 810649a:	091b      	lsrs	r3, r3, #4
 810649c:	f003 0201 	and.w	r2, r3, #1
 81064a0:	69fb      	ldr	r3, [r7, #28]
 81064a2:	fa02 f303 	lsl.w	r3, r2, r3
 81064a6:	69ba      	ldr	r2, [r7, #24]
 81064a8:	4313      	orrs	r3, r2
 81064aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	69ba      	ldr	r2, [r7, #24]
 81064b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	68db      	ldr	r3, [r3, #12]
 81064b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81064b8:	69fb      	ldr	r3, [r7, #28]
 81064ba:	005b      	lsls	r3, r3, #1
 81064bc:	2203      	movs	r2, #3
 81064be:	fa02 f303 	lsl.w	r3, r2, r3
 81064c2:	43db      	mvns	r3, r3
 81064c4:	69ba      	ldr	r2, [r7, #24]
 81064c6:	4013      	ands	r3, r2
 81064c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81064ca:	683b      	ldr	r3, [r7, #0]
 81064cc:	689a      	ldr	r2, [r3, #8]
 81064ce:	69fb      	ldr	r3, [r7, #28]
 81064d0:	005b      	lsls	r3, r3, #1
 81064d2:	fa02 f303 	lsl.w	r3, r2, r3
 81064d6:	69ba      	ldr	r2, [r7, #24]
 81064d8:	4313      	orrs	r3, r2
 81064da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	69ba      	ldr	r2, [r7, #24]
 81064e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81064e2:	683b      	ldr	r3, [r7, #0]
 81064e4:	685b      	ldr	r3, [r3, #4]
 81064e6:	2b02      	cmp	r3, #2
 81064e8:	d003      	beq.n	81064f2 <HAL_GPIO_Init+0xee>
 81064ea:	683b      	ldr	r3, [r7, #0]
 81064ec:	685b      	ldr	r3, [r3, #4]
 81064ee:	2b12      	cmp	r3, #18
 81064f0:	d123      	bne.n	810653a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81064f2:	69fb      	ldr	r3, [r7, #28]
 81064f4:	08da      	lsrs	r2, r3, #3
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	3208      	adds	r2, #8
 81064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81064fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8106500:	69fb      	ldr	r3, [r7, #28]
 8106502:	f003 0307 	and.w	r3, r3, #7
 8106506:	009b      	lsls	r3, r3, #2
 8106508:	220f      	movs	r2, #15
 810650a:	fa02 f303 	lsl.w	r3, r2, r3
 810650e:	43db      	mvns	r3, r3
 8106510:	69ba      	ldr	r2, [r7, #24]
 8106512:	4013      	ands	r3, r2
 8106514:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106516:	683b      	ldr	r3, [r7, #0]
 8106518:	691a      	ldr	r2, [r3, #16]
 810651a:	69fb      	ldr	r3, [r7, #28]
 810651c:	f003 0307 	and.w	r3, r3, #7
 8106520:	009b      	lsls	r3, r3, #2
 8106522:	fa02 f303 	lsl.w	r3, r2, r3
 8106526:	69ba      	ldr	r2, [r7, #24]
 8106528:	4313      	orrs	r3, r2
 810652a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810652c:	69fb      	ldr	r3, [r7, #28]
 810652e:	08da      	lsrs	r2, r3, #3
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	3208      	adds	r2, #8
 8106534:	69b9      	ldr	r1, [r7, #24]
 8106536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106540:	69fb      	ldr	r3, [r7, #28]
 8106542:	005b      	lsls	r3, r3, #1
 8106544:	2203      	movs	r2, #3
 8106546:	fa02 f303 	lsl.w	r3, r2, r3
 810654a:	43db      	mvns	r3, r3
 810654c:	69ba      	ldr	r2, [r7, #24]
 810654e:	4013      	ands	r3, r2
 8106550:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106552:	683b      	ldr	r3, [r7, #0]
 8106554:	685b      	ldr	r3, [r3, #4]
 8106556:	f003 0203 	and.w	r2, r3, #3
 810655a:	69fb      	ldr	r3, [r7, #28]
 810655c:	005b      	lsls	r3, r3, #1
 810655e:	fa02 f303 	lsl.w	r3, r2, r3
 8106562:	69ba      	ldr	r2, [r7, #24]
 8106564:	4313      	orrs	r3, r2
 8106566:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	69ba      	ldr	r2, [r7, #24]
 810656c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810656e:	683b      	ldr	r3, [r7, #0]
 8106570:	685b      	ldr	r3, [r3, #4]
 8106572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106576:	2b00      	cmp	r3, #0
 8106578:	f000 80e0 	beq.w	810673c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810657c:	4b2f      	ldr	r3, [pc, #188]	; (810663c <HAL_GPIO_Init+0x238>)
 810657e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106582:	4a2e      	ldr	r2, [pc, #184]	; (810663c <HAL_GPIO_Init+0x238>)
 8106584:	f043 0302 	orr.w	r3, r3, #2
 8106588:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810658c:	4b2b      	ldr	r3, [pc, #172]	; (810663c <HAL_GPIO_Init+0x238>)
 810658e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106592:	f003 0302 	and.w	r3, r3, #2
 8106596:	60fb      	str	r3, [r7, #12]
 8106598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810659a:	4a29      	ldr	r2, [pc, #164]	; (8106640 <HAL_GPIO_Init+0x23c>)
 810659c:	69fb      	ldr	r3, [r7, #28]
 810659e:	089b      	lsrs	r3, r3, #2
 81065a0:	3302      	adds	r3, #2
 81065a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81065a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81065a8:	69fb      	ldr	r3, [r7, #28]
 81065aa:	f003 0303 	and.w	r3, r3, #3
 81065ae:	009b      	lsls	r3, r3, #2
 81065b0:	220f      	movs	r2, #15
 81065b2:	fa02 f303 	lsl.w	r3, r2, r3
 81065b6:	43db      	mvns	r3, r3
 81065b8:	69ba      	ldr	r2, [r7, #24]
 81065ba:	4013      	ands	r3, r2
 81065bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	4a20      	ldr	r2, [pc, #128]	; (8106644 <HAL_GPIO_Init+0x240>)
 81065c2:	4293      	cmp	r3, r2
 81065c4:	d052      	beq.n	810666c <HAL_GPIO_Init+0x268>
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	4a1f      	ldr	r2, [pc, #124]	; (8106648 <HAL_GPIO_Init+0x244>)
 81065ca:	4293      	cmp	r3, r2
 81065cc:	d031      	beq.n	8106632 <HAL_GPIO_Init+0x22e>
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	4a1e      	ldr	r2, [pc, #120]	; (810664c <HAL_GPIO_Init+0x248>)
 81065d2:	4293      	cmp	r3, r2
 81065d4:	d02b      	beq.n	810662e <HAL_GPIO_Init+0x22a>
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	4a1d      	ldr	r2, [pc, #116]	; (8106650 <HAL_GPIO_Init+0x24c>)
 81065da:	4293      	cmp	r3, r2
 81065dc:	d025      	beq.n	810662a <HAL_GPIO_Init+0x226>
 81065de:	687b      	ldr	r3, [r7, #4]
 81065e0:	4a1c      	ldr	r2, [pc, #112]	; (8106654 <HAL_GPIO_Init+0x250>)
 81065e2:	4293      	cmp	r3, r2
 81065e4:	d01f      	beq.n	8106626 <HAL_GPIO_Init+0x222>
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	4a1b      	ldr	r2, [pc, #108]	; (8106658 <HAL_GPIO_Init+0x254>)
 81065ea:	4293      	cmp	r3, r2
 81065ec:	d019      	beq.n	8106622 <HAL_GPIO_Init+0x21e>
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	4a1a      	ldr	r2, [pc, #104]	; (810665c <HAL_GPIO_Init+0x258>)
 81065f2:	4293      	cmp	r3, r2
 81065f4:	d013      	beq.n	810661e <HAL_GPIO_Init+0x21a>
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	4a19      	ldr	r2, [pc, #100]	; (8106660 <HAL_GPIO_Init+0x25c>)
 81065fa:	4293      	cmp	r3, r2
 81065fc:	d00d      	beq.n	810661a <HAL_GPIO_Init+0x216>
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	4a18      	ldr	r2, [pc, #96]	; (8106664 <HAL_GPIO_Init+0x260>)
 8106602:	4293      	cmp	r3, r2
 8106604:	d007      	beq.n	8106616 <HAL_GPIO_Init+0x212>
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	4a17      	ldr	r2, [pc, #92]	; (8106668 <HAL_GPIO_Init+0x264>)
 810660a:	4293      	cmp	r3, r2
 810660c:	d101      	bne.n	8106612 <HAL_GPIO_Init+0x20e>
 810660e:	2309      	movs	r3, #9
 8106610:	e02d      	b.n	810666e <HAL_GPIO_Init+0x26a>
 8106612:	230a      	movs	r3, #10
 8106614:	e02b      	b.n	810666e <HAL_GPIO_Init+0x26a>
 8106616:	2308      	movs	r3, #8
 8106618:	e029      	b.n	810666e <HAL_GPIO_Init+0x26a>
 810661a:	2307      	movs	r3, #7
 810661c:	e027      	b.n	810666e <HAL_GPIO_Init+0x26a>
 810661e:	2306      	movs	r3, #6
 8106620:	e025      	b.n	810666e <HAL_GPIO_Init+0x26a>
 8106622:	2305      	movs	r3, #5
 8106624:	e023      	b.n	810666e <HAL_GPIO_Init+0x26a>
 8106626:	2304      	movs	r3, #4
 8106628:	e021      	b.n	810666e <HAL_GPIO_Init+0x26a>
 810662a:	2303      	movs	r3, #3
 810662c:	e01f      	b.n	810666e <HAL_GPIO_Init+0x26a>
 810662e:	2302      	movs	r3, #2
 8106630:	e01d      	b.n	810666e <HAL_GPIO_Init+0x26a>
 8106632:	2301      	movs	r3, #1
 8106634:	e01b      	b.n	810666e <HAL_GPIO_Init+0x26a>
 8106636:	bf00      	nop
 8106638:	580000c0 	.word	0x580000c0
 810663c:	58024400 	.word	0x58024400
 8106640:	58000400 	.word	0x58000400
 8106644:	58020000 	.word	0x58020000
 8106648:	58020400 	.word	0x58020400
 810664c:	58020800 	.word	0x58020800
 8106650:	58020c00 	.word	0x58020c00
 8106654:	58021000 	.word	0x58021000
 8106658:	58021400 	.word	0x58021400
 810665c:	58021800 	.word	0x58021800
 8106660:	58021c00 	.word	0x58021c00
 8106664:	58022000 	.word	0x58022000
 8106668:	58022400 	.word	0x58022400
 810666c:	2300      	movs	r3, #0
 810666e:	69fa      	ldr	r2, [r7, #28]
 8106670:	f002 0203 	and.w	r2, r2, #3
 8106674:	0092      	lsls	r2, r2, #2
 8106676:	4093      	lsls	r3, r2
 8106678:	69ba      	ldr	r2, [r7, #24]
 810667a:	4313      	orrs	r3, r2
 810667c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810667e:	4938      	ldr	r1, [pc, #224]	; (8106760 <HAL_GPIO_Init+0x35c>)
 8106680:	69fb      	ldr	r3, [r7, #28]
 8106682:	089b      	lsrs	r3, r3, #2
 8106684:	3302      	adds	r3, #2
 8106686:	69ba      	ldr	r2, [r7, #24]
 8106688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810668c:	697b      	ldr	r3, [r7, #20]
 810668e:	681b      	ldr	r3, [r3, #0]
 8106690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106692:	693b      	ldr	r3, [r7, #16]
 8106694:	43db      	mvns	r3, r3
 8106696:	69ba      	ldr	r2, [r7, #24]
 8106698:	4013      	ands	r3, r2
 810669a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 810669c:	683b      	ldr	r3, [r7, #0]
 810669e:	685b      	ldr	r3, [r3, #4]
 81066a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81066a4:	2b00      	cmp	r3, #0
 81066a6:	d003      	beq.n	81066b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81066a8:	69ba      	ldr	r2, [r7, #24]
 81066aa:	693b      	ldr	r3, [r7, #16]
 81066ac:	4313      	orrs	r3, r2
 81066ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81066b0:	697b      	ldr	r3, [r7, #20]
 81066b2:	69ba      	ldr	r2, [r7, #24]
 81066b4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81066b6:	697b      	ldr	r3, [r7, #20]
 81066b8:	685b      	ldr	r3, [r3, #4]
 81066ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81066bc:	693b      	ldr	r3, [r7, #16]
 81066be:	43db      	mvns	r3, r3
 81066c0:	69ba      	ldr	r2, [r7, #24]
 81066c2:	4013      	ands	r3, r2
 81066c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81066c6:	683b      	ldr	r3, [r7, #0]
 81066c8:	685b      	ldr	r3, [r3, #4]
 81066ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81066ce:	2b00      	cmp	r3, #0
 81066d0:	d003      	beq.n	81066da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81066d2:	69ba      	ldr	r2, [r7, #24]
 81066d4:	693b      	ldr	r3, [r7, #16]
 81066d6:	4313      	orrs	r3, r2
 81066d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81066da:	697b      	ldr	r3, [r7, #20]
 81066dc:	69ba      	ldr	r2, [r7, #24]
 81066de:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81066e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81066e4:	681b      	ldr	r3, [r3, #0]
 81066e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81066e8:	693b      	ldr	r3, [r7, #16]
 81066ea:	43db      	mvns	r3, r3
 81066ec:	69ba      	ldr	r2, [r7, #24]
 81066ee:	4013      	ands	r3, r2
 81066f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81066f2:	683b      	ldr	r3, [r7, #0]
 81066f4:	685b      	ldr	r3, [r3, #4]
 81066f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81066fa:	2b00      	cmp	r3, #0
 81066fc:	d003      	beq.n	8106706 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81066fe:	69ba      	ldr	r2, [r7, #24]
 8106700:	693b      	ldr	r3, [r7, #16]
 8106702:	4313      	orrs	r3, r2
 8106704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8106706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810670a:	69bb      	ldr	r3, [r7, #24]
 810670c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810670e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106712:	685b      	ldr	r3, [r3, #4]
 8106714:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106716:	693b      	ldr	r3, [r7, #16]
 8106718:	43db      	mvns	r3, r3
 810671a:	69ba      	ldr	r2, [r7, #24]
 810671c:	4013      	ands	r3, r2
 810671e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8106720:	683b      	ldr	r3, [r7, #0]
 8106722:	685b      	ldr	r3, [r3, #4]
 8106724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106728:	2b00      	cmp	r3, #0
 810672a:	d003      	beq.n	8106734 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 810672c:	69ba      	ldr	r2, [r7, #24]
 810672e:	693b      	ldr	r3, [r7, #16]
 8106730:	4313      	orrs	r3, r2
 8106732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106734:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8106738:	69bb      	ldr	r3, [r7, #24]
 810673a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 810673c:	69fb      	ldr	r3, [r7, #28]
 810673e:	3301      	adds	r3, #1
 8106740:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106742:	683b      	ldr	r3, [r7, #0]
 8106744:	681a      	ldr	r2, [r3, #0]
 8106746:	69fb      	ldr	r3, [r7, #28]
 8106748:	fa22 f303 	lsr.w	r3, r2, r3
 810674c:	2b00      	cmp	r3, #0
 810674e:	f47f ae63 	bne.w	8106418 <HAL_GPIO_Init+0x14>
  }
}
 8106752:	bf00      	nop
 8106754:	bf00      	nop
 8106756:	3724      	adds	r7, #36	; 0x24
 8106758:	46bd      	mov	sp, r7
 810675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810675e:	4770      	bx	lr
 8106760:	58000400 	.word	0x58000400

08106764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106764:	b480      	push	{r7}
 8106766:	b083      	sub	sp, #12
 8106768:	af00      	add	r7, sp, #0
 810676a:	6078      	str	r0, [r7, #4]
 810676c:	460b      	mov	r3, r1
 810676e:	807b      	strh	r3, [r7, #2]
 8106770:	4613      	mov	r3, r2
 8106772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106774:	787b      	ldrb	r3, [r7, #1]
 8106776:	2b00      	cmp	r3, #0
 8106778:	d003      	beq.n	8106782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810677a:	887a      	ldrh	r2, [r7, #2]
 810677c:	687b      	ldr	r3, [r7, #4]
 810677e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106780:	e003      	b.n	810678a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106782:	887b      	ldrh	r3, [r7, #2]
 8106784:	041a      	lsls	r2, r3, #16
 8106786:	687b      	ldr	r3, [r7, #4]
 8106788:	619a      	str	r2, [r3, #24]
}
 810678a:	bf00      	nop
 810678c:	370c      	adds	r7, #12
 810678e:	46bd      	mov	sp, r7
 8106790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106794:	4770      	bx	lr
	...

08106798 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8106798:	b480      	push	{r7}
 810679a:	b083      	sub	sp, #12
 810679c:	af00      	add	r7, sp, #0
 810679e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 81067a0:	4a08      	ldr	r2, [pc, #32]	; (81067c4 <HAL_HSEM_FastTake+0x2c>)
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	3320      	adds	r3, #32
 81067a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81067aa:	4a07      	ldr	r2, [pc, #28]	; (81067c8 <HAL_HSEM_FastTake+0x30>)
 81067ac:	4293      	cmp	r3, r2
 81067ae:	d101      	bne.n	81067b4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81067b0:	2300      	movs	r3, #0
 81067b2:	e000      	b.n	81067b6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81067b4:	2301      	movs	r3, #1
}
 81067b6:	4618      	mov	r0, r3
 81067b8:	370c      	adds	r7, #12
 81067ba:	46bd      	mov	sp, r7
 81067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067c0:	4770      	bx	lr
 81067c2:	bf00      	nop
 81067c4:	58026400 	.word	0x58026400
 81067c8:	80000100 	.word	0x80000100

081067cc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81067cc:	b480      	push	{r7}
 81067ce:	b083      	sub	sp, #12
 81067d0:	af00      	add	r7, sp, #0
 81067d2:	6078      	str	r0, [r7, #4]
 81067d4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81067d6:	4906      	ldr	r1, [pc, #24]	; (81067f0 <HAL_HSEM_Release+0x24>)
 81067d8:	683b      	ldr	r3, [r7, #0]
 81067da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81067e4:	bf00      	nop
 81067e6:	370c      	adds	r7, #12
 81067e8:	46bd      	mov	sp, r7
 81067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067ee:	4770      	bx	lr
 81067f0:	58026400 	.word	0x58026400

081067f4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81067f4:	b480      	push	{r7}
 81067f6:	b083      	sub	sp, #12
 81067f8:	af00      	add	r7, sp, #0
 81067fa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81067fc:	4b05      	ldr	r3, [pc, #20]	; (8106814 <HAL_HSEM_ActivateNotification+0x20>)
 81067fe:	681a      	ldr	r2, [r3, #0]
 8106800:	4904      	ldr	r1, [pc, #16]	; (8106814 <HAL_HSEM_ActivateNotification+0x20>)
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	4313      	orrs	r3, r2
 8106806:	600b      	str	r3, [r1, #0]
#endif
}
 8106808:	bf00      	nop
 810680a:	370c      	adds	r7, #12
 810680c:	46bd      	mov	sp, r7
 810680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106812:	4770      	bx	lr
 8106814:	58026510 	.word	0x58026510

08106818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8106818:	b580      	push	{r7, lr}
 810681a:	b082      	sub	sp, #8
 810681c:	af00      	add	r7, sp, #0
 810681e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8106820:	687b      	ldr	r3, [r7, #4]
 8106822:	2b00      	cmp	r3, #0
 8106824:	d101      	bne.n	810682a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8106826:	2301      	movs	r3, #1
 8106828:	e081      	b.n	810692e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810682a:	687b      	ldr	r3, [r7, #4]
 810682c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106830:	b2db      	uxtb	r3, r3
 8106832:	2b00      	cmp	r3, #0
 8106834:	d106      	bne.n	8106844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	2200      	movs	r2, #0
 810683a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810683e:	6878      	ldr	r0, [r7, #4]
 8106840:	f7fb fad2 	bl	8101de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8106844:	687b      	ldr	r3, [r7, #4]
 8106846:	2224      	movs	r2, #36	; 0x24
 8106848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	681b      	ldr	r3, [r3, #0]
 8106850:	681a      	ldr	r2, [r3, #0]
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	681b      	ldr	r3, [r3, #0]
 8106856:	f022 0201 	bic.w	r2, r2, #1
 810685a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810685c:	687b      	ldr	r3, [r7, #4]
 810685e:	685a      	ldr	r2, [r3, #4]
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	681b      	ldr	r3, [r3, #0]
 8106864:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8106868:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810686a:	687b      	ldr	r3, [r7, #4]
 810686c:	681b      	ldr	r3, [r3, #0]
 810686e:	689a      	ldr	r2, [r3, #8]
 8106870:	687b      	ldr	r3, [r7, #4]
 8106872:	681b      	ldr	r3, [r3, #0]
 8106874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106878:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810687a:	687b      	ldr	r3, [r7, #4]
 810687c:	68db      	ldr	r3, [r3, #12]
 810687e:	2b01      	cmp	r3, #1
 8106880:	d107      	bne.n	8106892 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	689a      	ldr	r2, [r3, #8]
 8106886:	687b      	ldr	r3, [r7, #4]
 8106888:	681b      	ldr	r3, [r3, #0]
 810688a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810688e:	609a      	str	r2, [r3, #8]
 8106890:	e006      	b.n	81068a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8106892:	687b      	ldr	r3, [r7, #4]
 8106894:	689a      	ldr	r2, [r3, #8]
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810689e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	68db      	ldr	r3, [r3, #12]
 81068a4:	2b02      	cmp	r3, #2
 81068a6:	d104      	bne.n	81068b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	681b      	ldr	r3, [r3, #0]
 81068ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81068b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	681b      	ldr	r3, [r3, #0]
 81068b6:	685b      	ldr	r3, [r3, #4]
 81068b8:	687a      	ldr	r2, [r7, #4]
 81068ba:	6812      	ldr	r2, [r2, #0]
 81068bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81068c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81068c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	681b      	ldr	r3, [r3, #0]
 81068ca:	68da      	ldr	r2, [r3, #12]
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	681b      	ldr	r3, [r3, #0]
 81068d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81068d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81068d6:	687b      	ldr	r3, [r7, #4]
 81068d8:	691a      	ldr	r2, [r3, #16]
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	695b      	ldr	r3, [r3, #20]
 81068de:	ea42 0103 	orr.w	r1, r2, r3
 81068e2:	687b      	ldr	r3, [r7, #4]
 81068e4:	699b      	ldr	r3, [r3, #24]
 81068e6:	021a      	lsls	r2, r3, #8
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	681b      	ldr	r3, [r3, #0]
 81068ec:	430a      	orrs	r2, r1
 81068ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	69d9      	ldr	r1, [r3, #28]
 81068f4:	687b      	ldr	r3, [r7, #4]
 81068f6:	6a1a      	ldr	r2, [r3, #32]
 81068f8:	687b      	ldr	r3, [r7, #4]
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	430a      	orrs	r2, r1
 81068fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	681b      	ldr	r3, [r3, #0]
 8106904:	681a      	ldr	r2, [r3, #0]
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	681b      	ldr	r3, [r3, #0]
 810690a:	f042 0201 	orr.w	r2, r2, #1
 810690e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	2200      	movs	r2, #0
 8106914:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	2220      	movs	r2, #32
 810691a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	2200      	movs	r2, #0
 8106922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	2200      	movs	r2, #0
 8106928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 810692c:	2300      	movs	r3, #0
}
 810692e:	4618      	mov	r0, r3
 8106930:	3708      	adds	r7, #8
 8106932:	46bd      	mov	sp, r7
 8106934:	bd80      	pop	{r7, pc}
	...

08106938 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106938:	b580      	push	{r7, lr}
 810693a:	b088      	sub	sp, #32
 810693c:	af02      	add	r7, sp, #8
 810693e:	60f8      	str	r0, [r7, #12]
 8106940:	4608      	mov	r0, r1
 8106942:	4611      	mov	r1, r2
 8106944:	461a      	mov	r2, r3
 8106946:	4603      	mov	r3, r0
 8106948:	817b      	strh	r3, [r7, #10]
 810694a:	460b      	mov	r3, r1
 810694c:	813b      	strh	r3, [r7, #8]
 810694e:	4613      	mov	r3, r2
 8106950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106952:	68fb      	ldr	r3, [r7, #12]
 8106954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106958:	b2db      	uxtb	r3, r3
 810695a:	2b20      	cmp	r3, #32
 810695c:	f040 80fd 	bne.w	8106b5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8106960:	6a3b      	ldr	r3, [r7, #32]
 8106962:	2b00      	cmp	r3, #0
 8106964:	d002      	beq.n	810696c <HAL_I2C_Mem_Read+0x34>
 8106966:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8106968:	2b00      	cmp	r3, #0
 810696a:	d105      	bne.n	8106978 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810696c:	68fb      	ldr	r3, [r7, #12]
 810696e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106972:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106974:	2301      	movs	r3, #1
 8106976:	e0f1      	b.n	8106b5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106978:	68fb      	ldr	r3, [r7, #12]
 810697a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810697e:	2b01      	cmp	r3, #1
 8106980:	d101      	bne.n	8106986 <HAL_I2C_Mem_Read+0x4e>
 8106982:	2302      	movs	r3, #2
 8106984:	e0ea      	b.n	8106b5c <HAL_I2C_Mem_Read+0x224>
 8106986:	68fb      	ldr	r3, [r7, #12]
 8106988:	2201      	movs	r2, #1
 810698a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810698e:	f7fc fa9f 	bl	8102ed0 <HAL_GetTick>
 8106992:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106994:	697b      	ldr	r3, [r7, #20]
 8106996:	9300      	str	r3, [sp, #0]
 8106998:	2319      	movs	r3, #25
 810699a:	2201      	movs	r2, #1
 810699c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81069a0:	68f8      	ldr	r0, [r7, #12]
 81069a2:	f001 ff63 	bl	810886c <I2C_WaitOnFlagUntilTimeout>
 81069a6:	4603      	mov	r3, r0
 81069a8:	2b00      	cmp	r3, #0
 81069aa:	d001      	beq.n	81069b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81069ac:	2301      	movs	r3, #1
 81069ae:	e0d5      	b.n	8106b5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81069b0:	68fb      	ldr	r3, [r7, #12]
 81069b2:	2222      	movs	r2, #34	; 0x22
 81069b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81069b8:	68fb      	ldr	r3, [r7, #12]
 81069ba:	2240      	movs	r2, #64	; 0x40
 81069bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81069c0:	68fb      	ldr	r3, [r7, #12]
 81069c2:	2200      	movs	r2, #0
 81069c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81069c6:	68fb      	ldr	r3, [r7, #12]
 81069c8:	6a3a      	ldr	r2, [r7, #32]
 81069ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81069cc:	68fb      	ldr	r3, [r7, #12]
 81069ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81069d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81069d2:	68fb      	ldr	r3, [r7, #12]
 81069d4:	2200      	movs	r2, #0
 81069d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81069d8:	88f8      	ldrh	r0, [r7, #6]
 81069da:	893a      	ldrh	r2, [r7, #8]
 81069dc:	8979      	ldrh	r1, [r7, #10]
 81069de:	697b      	ldr	r3, [r7, #20]
 81069e0:	9301      	str	r3, [sp, #4]
 81069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069e4:	9300      	str	r3, [sp, #0]
 81069e6:	4603      	mov	r3, r0
 81069e8:	68f8      	ldr	r0, [r7, #12]
 81069ea:	f000 ffa9 	bl	8107940 <I2C_RequestMemoryRead>
 81069ee:	4603      	mov	r3, r0
 81069f0:	2b00      	cmp	r3, #0
 81069f2:	d005      	beq.n	8106a00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81069f4:	68fb      	ldr	r3, [r7, #12]
 81069f6:	2200      	movs	r2, #0
 81069f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81069fc:	2301      	movs	r3, #1
 81069fe:	e0ad      	b.n	8106b5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106a00:	68fb      	ldr	r3, [r7, #12]
 8106a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106a04:	b29b      	uxth	r3, r3
 8106a06:	2bff      	cmp	r3, #255	; 0xff
 8106a08:	d90e      	bls.n	8106a28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106a0a:	68fb      	ldr	r3, [r7, #12]
 8106a0c:	22ff      	movs	r2, #255	; 0xff
 8106a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8106a10:	68fb      	ldr	r3, [r7, #12]
 8106a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106a14:	b2da      	uxtb	r2, r3
 8106a16:	8979      	ldrh	r1, [r7, #10]
 8106a18:	4b52      	ldr	r3, [pc, #328]	; (8106b64 <HAL_I2C_Mem_Read+0x22c>)
 8106a1a:	9300      	str	r3, [sp, #0]
 8106a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106a20:	68f8      	ldr	r0, [r7, #12]
 8106a22:	f002 f845 	bl	8108ab0 <I2C_TransferConfig>
 8106a26:	e00f      	b.n	8106a48 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106a28:	68fb      	ldr	r3, [r7, #12]
 8106a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106a2c:	b29a      	uxth	r2, r3
 8106a2e:	68fb      	ldr	r3, [r7, #12]
 8106a30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8106a32:	68fb      	ldr	r3, [r7, #12]
 8106a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106a36:	b2da      	uxtb	r2, r3
 8106a38:	8979      	ldrh	r1, [r7, #10]
 8106a3a:	4b4a      	ldr	r3, [pc, #296]	; (8106b64 <HAL_I2C_Mem_Read+0x22c>)
 8106a3c:	9300      	str	r3, [sp, #0]
 8106a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106a42:	68f8      	ldr	r0, [r7, #12]
 8106a44:	f002 f834 	bl	8108ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8106a48:	697b      	ldr	r3, [r7, #20]
 8106a4a:	9300      	str	r3, [sp, #0]
 8106a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a4e:	2200      	movs	r2, #0
 8106a50:	2104      	movs	r1, #4
 8106a52:	68f8      	ldr	r0, [r7, #12]
 8106a54:	f001 ff0a 	bl	810886c <I2C_WaitOnFlagUntilTimeout>
 8106a58:	4603      	mov	r3, r0
 8106a5a:	2b00      	cmp	r3, #0
 8106a5c:	d001      	beq.n	8106a62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8106a5e:	2301      	movs	r3, #1
 8106a60:	e07c      	b.n	8106b5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8106a62:	68fb      	ldr	r3, [r7, #12]
 8106a64:	681b      	ldr	r3, [r3, #0]
 8106a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106a68:	68fb      	ldr	r3, [r7, #12]
 8106a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106a6c:	b2d2      	uxtb	r2, r2
 8106a6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106a70:	68fb      	ldr	r3, [r7, #12]
 8106a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106a74:	1c5a      	adds	r2, r3, #1
 8106a76:	68fb      	ldr	r3, [r7, #12]
 8106a78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8106a7a:	68fb      	ldr	r3, [r7, #12]
 8106a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106a7e:	3b01      	subs	r3, #1
 8106a80:	b29a      	uxth	r2, r3
 8106a82:	68fb      	ldr	r3, [r7, #12]
 8106a84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8106a86:	68fb      	ldr	r3, [r7, #12]
 8106a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106a8a:	b29b      	uxth	r3, r3
 8106a8c:	3b01      	subs	r3, #1
 8106a8e:	b29a      	uxth	r2, r3
 8106a90:	68fb      	ldr	r3, [r7, #12]
 8106a92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8106a94:	68fb      	ldr	r3, [r7, #12]
 8106a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106a98:	b29b      	uxth	r3, r3
 8106a9a:	2b00      	cmp	r3, #0
 8106a9c:	d034      	beq.n	8106b08 <HAL_I2C_Mem_Read+0x1d0>
 8106a9e:	68fb      	ldr	r3, [r7, #12]
 8106aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106aa2:	2b00      	cmp	r3, #0
 8106aa4:	d130      	bne.n	8106b08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8106aa6:	697b      	ldr	r3, [r7, #20]
 8106aa8:	9300      	str	r3, [sp, #0]
 8106aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106aac:	2200      	movs	r2, #0
 8106aae:	2180      	movs	r1, #128	; 0x80
 8106ab0:	68f8      	ldr	r0, [r7, #12]
 8106ab2:	f001 fedb 	bl	810886c <I2C_WaitOnFlagUntilTimeout>
 8106ab6:	4603      	mov	r3, r0
 8106ab8:	2b00      	cmp	r3, #0
 8106aba:	d001      	beq.n	8106ac0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8106abc:	2301      	movs	r3, #1
 8106abe:	e04d      	b.n	8106b5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106ac0:	68fb      	ldr	r3, [r7, #12]
 8106ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106ac4:	b29b      	uxth	r3, r3
 8106ac6:	2bff      	cmp	r3, #255	; 0xff
 8106ac8:	d90e      	bls.n	8106ae8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106aca:	68fb      	ldr	r3, [r7, #12]
 8106acc:	22ff      	movs	r2, #255	; 0xff
 8106ace:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106ad0:	68fb      	ldr	r3, [r7, #12]
 8106ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ad4:	b2da      	uxtb	r2, r3
 8106ad6:	8979      	ldrh	r1, [r7, #10]
 8106ad8:	2300      	movs	r3, #0
 8106ada:	9300      	str	r3, [sp, #0]
 8106adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106ae0:	68f8      	ldr	r0, [r7, #12]
 8106ae2:	f001 ffe5 	bl	8108ab0 <I2C_TransferConfig>
 8106ae6:	e00f      	b.n	8106b08 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106ae8:	68fb      	ldr	r3, [r7, #12]
 8106aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106aec:	b29a      	uxth	r2, r3
 8106aee:	68fb      	ldr	r3, [r7, #12]
 8106af0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8106af2:	68fb      	ldr	r3, [r7, #12]
 8106af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106af6:	b2da      	uxtb	r2, r3
 8106af8:	8979      	ldrh	r1, [r7, #10]
 8106afa:	2300      	movs	r3, #0
 8106afc:	9300      	str	r3, [sp, #0]
 8106afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106b02:	68f8      	ldr	r0, [r7, #12]
 8106b04:	f001 ffd4 	bl	8108ab0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8106b08:	68fb      	ldr	r3, [r7, #12]
 8106b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106b0c:	b29b      	uxth	r3, r3
 8106b0e:	2b00      	cmp	r3, #0
 8106b10:	d19a      	bne.n	8106a48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106b12:	697a      	ldr	r2, [r7, #20]
 8106b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106b16:	68f8      	ldr	r0, [r7, #12]
 8106b18:	f001 ff28 	bl	810896c <I2C_WaitOnSTOPFlagUntilTimeout>
 8106b1c:	4603      	mov	r3, r0
 8106b1e:	2b00      	cmp	r3, #0
 8106b20:	d001      	beq.n	8106b26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8106b22:	2301      	movs	r3, #1
 8106b24:	e01a      	b.n	8106b5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106b26:	68fb      	ldr	r3, [r7, #12]
 8106b28:	681b      	ldr	r3, [r3, #0]
 8106b2a:	2220      	movs	r2, #32
 8106b2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106b2e:	68fb      	ldr	r3, [r7, #12]
 8106b30:	681b      	ldr	r3, [r3, #0]
 8106b32:	6859      	ldr	r1, [r3, #4]
 8106b34:	68fb      	ldr	r3, [r7, #12]
 8106b36:	681a      	ldr	r2, [r3, #0]
 8106b38:	4b0b      	ldr	r3, [pc, #44]	; (8106b68 <HAL_I2C_Mem_Read+0x230>)
 8106b3a:	400b      	ands	r3, r1
 8106b3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106b3e:	68fb      	ldr	r3, [r7, #12]
 8106b40:	2220      	movs	r2, #32
 8106b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8106b46:	68fb      	ldr	r3, [r7, #12]
 8106b48:	2200      	movs	r2, #0
 8106b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106b4e:	68fb      	ldr	r3, [r7, #12]
 8106b50:	2200      	movs	r2, #0
 8106b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106b56:	2300      	movs	r3, #0
 8106b58:	e000      	b.n	8106b5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8106b5a:	2302      	movs	r3, #2
  }
}
 8106b5c:	4618      	mov	r0, r3
 8106b5e:	3718      	adds	r7, #24
 8106b60:	46bd      	mov	sp, r7
 8106b62:	bd80      	pop	{r7, pc}
 8106b64:	80002400 	.word	0x80002400
 8106b68:	fe00e800 	.word	0xfe00e800

08106b6c <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8106b6c:	b580      	push	{r7, lr}
 8106b6e:	b08a      	sub	sp, #40	; 0x28
 8106b70:	af02      	add	r7, sp, #8
 8106b72:	60f8      	str	r0, [r7, #12]
 8106b74:	4608      	mov	r0, r1
 8106b76:	4611      	mov	r1, r2
 8106b78:	461a      	mov	r2, r3
 8106b7a:	4603      	mov	r3, r0
 8106b7c:	817b      	strh	r3, [r7, #10]
 8106b7e:	460b      	mov	r3, r1
 8106b80:	813b      	strh	r3, [r7, #8]
 8106b82:	4613      	mov	r3, r2
 8106b84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106b86:	68fb      	ldr	r3, [r7, #12]
 8106b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106b8c:	b2db      	uxtb	r3, r3
 8106b8e:	2b20      	cmp	r3, #32
 8106b90:	f040 80d5 	bne.w	8106d3e <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8106b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b96:	2b00      	cmp	r3, #0
 8106b98:	d002      	beq.n	8106ba0 <HAL_I2C_Mem_Write_DMA+0x34>
 8106b9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8106b9c:	2b00      	cmp	r3, #0
 8106b9e:	d105      	bne.n	8106bac <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106ba0:	68fb      	ldr	r3, [r7, #12]
 8106ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106ba6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106ba8:	2301      	movs	r3, #1
 8106baa:	e0c9      	b.n	8106d40 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8106bac:	68fb      	ldr	r3, [r7, #12]
 8106bae:	681b      	ldr	r3, [r3, #0]
 8106bb0:	699b      	ldr	r3, [r3, #24]
 8106bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106bba:	d101      	bne.n	8106bc0 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8106bbc:	2302      	movs	r3, #2
 8106bbe:	e0bf      	b.n	8106d40 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106bc0:	68fb      	ldr	r3, [r7, #12]
 8106bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106bc6:	2b01      	cmp	r3, #1
 8106bc8:	d101      	bne.n	8106bce <HAL_I2C_Mem_Write_DMA+0x62>
 8106bca:	2302      	movs	r3, #2
 8106bcc:	e0b8      	b.n	8106d40 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8106bce:	68fb      	ldr	r3, [r7, #12]
 8106bd0:	2201      	movs	r2, #1
 8106bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106bd6:	f7fc f97b 	bl	8102ed0 <HAL_GetTick>
 8106bda:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8106bdc:	68fb      	ldr	r3, [r7, #12]
 8106bde:	2221      	movs	r2, #33	; 0x21
 8106be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8106be4:	68fb      	ldr	r3, [r7, #12]
 8106be6:	2240      	movs	r2, #64	; 0x40
 8106be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8106bec:	68fb      	ldr	r3, [r7, #12]
 8106bee:	2200      	movs	r2, #0
 8106bf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8106bf2:	68fb      	ldr	r3, [r7, #12]
 8106bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8106bf8:	68fb      	ldr	r3, [r7, #12]
 8106bfa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8106bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8106bfe:	68fb      	ldr	r3, [r7, #12]
 8106c00:	4a51      	ldr	r2, [pc, #324]	; (8106d48 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8106c02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8106c04:	68fb      	ldr	r3, [r7, #12]
 8106c06:	4a51      	ldr	r2, [pc, #324]	; (8106d4c <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8106c08:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106c0a:	68fb      	ldr	r3, [r7, #12]
 8106c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c0e:	b29b      	uxth	r3, r3
 8106c10:	2bff      	cmp	r3, #255	; 0xff
 8106c12:	d906      	bls.n	8106c22 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106c14:	68fb      	ldr	r3, [r7, #12]
 8106c16:	22ff      	movs	r2, #255	; 0xff
 8106c18:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8106c1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106c1e:	61fb      	str	r3, [r7, #28]
 8106c20:	e007      	b.n	8106c32 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106c22:	68fb      	ldr	r3, [r7, #12]
 8106c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c26:	b29a      	uxth	r2, r3
 8106c28:	68fb      	ldr	r3, [r7, #12]
 8106c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8106c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106c30:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8106c32:	88f8      	ldrh	r0, [r7, #6]
 8106c34:	893a      	ldrh	r2, [r7, #8]
 8106c36:	8979      	ldrh	r1, [r7, #10]
 8106c38:	69bb      	ldr	r3, [r7, #24]
 8106c3a:	9301      	str	r3, [sp, #4]
 8106c3c:	2319      	movs	r3, #25
 8106c3e:	9300      	str	r3, [sp, #0]
 8106c40:	4603      	mov	r3, r0
 8106c42:	68f8      	ldr	r0, [r7, #12]
 8106c44:	f000 fe28 	bl	8107898 <I2C_RequestMemoryWrite>
 8106c48:	4603      	mov	r3, r0
 8106c4a:	2b00      	cmp	r3, #0
 8106c4c:	d005      	beq.n	8106c5a <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106c4e:	68fb      	ldr	r3, [r7, #12]
 8106c50:	2200      	movs	r2, #0
 8106c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106c56:	2301      	movs	r3, #1
 8106c58:	e072      	b.n	8106d40 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8106c5a:	68fb      	ldr	r3, [r7, #12]
 8106c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c5e:	2b00      	cmp	r3, #0
 8106c60:	d020      	beq.n	8106ca4 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8106c62:	68fb      	ldr	r3, [r7, #12]
 8106c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c66:	4a3a      	ldr	r2, [pc, #232]	; (8106d50 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8106c68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8106c6a:	68fb      	ldr	r3, [r7, #12]
 8106c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c6e:	4a39      	ldr	r2, [pc, #228]	; (8106d54 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8106c70:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8106c72:	68fb      	ldr	r3, [r7, #12]
 8106c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c76:	2200      	movs	r2, #0
 8106c78:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8106c7a:	68fb      	ldr	r3, [r7, #12]
 8106c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c7e:	2200      	movs	r2, #0
 8106c80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8106c82:	68fb      	ldr	r3, [r7, #12]
 8106c84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8106c86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106c88:	68fb      	ldr	r3, [r7, #12]
 8106c8a:	681b      	ldr	r3, [r3, #0]
 8106c8c:	3328      	adds	r3, #40	; 0x28
 8106c8e:	461a      	mov	r2, r3
 8106c90:	68fb      	ldr	r3, [r7, #12]
 8106c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106c94:	f7fd f8bc 	bl	8103e10 <HAL_DMA_Start_IT>
 8106c98:	4603      	mov	r3, r0
 8106c9a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8106c9c:	7dfb      	ldrb	r3, [r7, #23]
 8106c9e:	2b00      	cmp	r3, #0
 8106ca0:	d139      	bne.n	8106d16 <HAL_I2C_Mem_Write_DMA+0x1aa>
 8106ca2:	e013      	b.n	8106ccc <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106ca4:	68fb      	ldr	r3, [r7, #12]
 8106ca6:	2220      	movs	r2, #32
 8106ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106cac:	68fb      	ldr	r3, [r7, #12]
 8106cae:	2200      	movs	r2, #0
 8106cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8106cb4:	68fb      	ldr	r3, [r7, #12]
 8106cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106cb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106cbc:	68fb      	ldr	r3, [r7, #12]
 8106cbe:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8106cc0:	68fb      	ldr	r3, [r7, #12]
 8106cc2:	2200      	movs	r2, #0
 8106cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106cc8:	2301      	movs	r3, #1
 8106cca:	e039      	b.n	8106d40 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8106ccc:	68fb      	ldr	r3, [r7, #12]
 8106cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106cd0:	b2da      	uxtb	r2, r3
 8106cd2:	8979      	ldrh	r1, [r7, #10]
 8106cd4:	2300      	movs	r3, #0
 8106cd6:	9300      	str	r3, [sp, #0]
 8106cd8:	69fb      	ldr	r3, [r7, #28]
 8106cda:	68f8      	ldr	r0, [r7, #12]
 8106cdc:	f001 fee8 	bl	8108ab0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8106ce0:	68fb      	ldr	r3, [r7, #12]
 8106ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106ce4:	b29a      	uxth	r2, r3
 8106ce6:	68fb      	ldr	r3, [r7, #12]
 8106ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106cea:	1ad3      	subs	r3, r2, r3
 8106cec:	b29a      	uxth	r2, r3
 8106cee:	68fb      	ldr	r3, [r7, #12]
 8106cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106cf2:	68fb      	ldr	r3, [r7, #12]
 8106cf4:	2200      	movs	r2, #0
 8106cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8106cfa:	2110      	movs	r1, #16
 8106cfc:	68f8      	ldr	r0, [r7, #12]
 8106cfe:	f001 ff05 	bl	8108b0c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8106d02:	68fb      	ldr	r3, [r7, #12]
 8106d04:	681b      	ldr	r3, [r3, #0]
 8106d06:	681a      	ldr	r2, [r3, #0]
 8106d08:	68fb      	ldr	r3, [r7, #12]
 8106d0a:	681b      	ldr	r3, [r3, #0]
 8106d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8106d10:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8106d12:	2300      	movs	r3, #0
 8106d14:	e014      	b.n	8106d40 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106d16:	68fb      	ldr	r3, [r7, #12]
 8106d18:	2220      	movs	r2, #32
 8106d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106d1e:	68fb      	ldr	r3, [r7, #12]
 8106d20:	2200      	movs	r2, #0
 8106d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8106d26:	68fb      	ldr	r3, [r7, #12]
 8106d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106d2a:	f043 0210 	orr.w	r2, r3, #16
 8106d2e:	68fb      	ldr	r3, [r7, #12]
 8106d30:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8106d32:	68fb      	ldr	r3, [r7, #12]
 8106d34:	2200      	movs	r2, #0
 8106d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106d3a:	2301      	movs	r3, #1
 8106d3c:	e000      	b.n	8106d40 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8106d3e:	2302      	movs	r3, #2
  }
}
 8106d40:	4618      	mov	r0, r3
 8106d42:	3720      	adds	r7, #32
 8106d44:	46bd      	mov	sp, r7
 8106d46:	bd80      	pop	{r7, pc}
 8106d48:	ffff0000 	.word	0xffff0000
 8106d4c:	081072ed 	.word	0x081072ed
 8106d50:	0810848f 	.word	0x0810848f
 8106d54:	081085bd 	.word	0x081085bd

08106d58 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8106d58:	b580      	push	{r7, lr}
 8106d5a:	b08a      	sub	sp, #40	; 0x28
 8106d5c:	af02      	add	r7, sp, #8
 8106d5e:	60f8      	str	r0, [r7, #12]
 8106d60:	4608      	mov	r0, r1
 8106d62:	4611      	mov	r1, r2
 8106d64:	461a      	mov	r2, r3
 8106d66:	4603      	mov	r3, r0
 8106d68:	817b      	strh	r3, [r7, #10]
 8106d6a:	460b      	mov	r3, r1
 8106d6c:	813b      	strh	r3, [r7, #8]
 8106d6e:	4613      	mov	r3, r2
 8106d70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106d72:	68fb      	ldr	r3, [r7, #12]
 8106d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106d78:	b2db      	uxtb	r3, r3
 8106d7a:	2b20      	cmp	r3, #32
 8106d7c:	f040 80d5 	bne.w	8106f2a <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8106d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d82:	2b00      	cmp	r3, #0
 8106d84:	d002      	beq.n	8106d8c <HAL_I2C_Mem_Read_DMA+0x34>
 8106d86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8106d88:	2b00      	cmp	r3, #0
 8106d8a:	d105      	bne.n	8106d98 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106d8c:	68fb      	ldr	r3, [r7, #12]
 8106d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106d92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106d94:	2301      	movs	r3, #1
 8106d96:	e0c9      	b.n	8106f2c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8106d98:	68fb      	ldr	r3, [r7, #12]
 8106d9a:	681b      	ldr	r3, [r3, #0]
 8106d9c:	699b      	ldr	r3, [r3, #24]
 8106d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106da6:	d101      	bne.n	8106dac <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8106da8:	2302      	movs	r3, #2
 8106daa:	e0bf      	b.n	8106f2c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106dac:	68fb      	ldr	r3, [r7, #12]
 8106dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106db2:	2b01      	cmp	r3, #1
 8106db4:	d101      	bne.n	8106dba <HAL_I2C_Mem_Read_DMA+0x62>
 8106db6:	2302      	movs	r3, #2
 8106db8:	e0b8      	b.n	8106f2c <HAL_I2C_Mem_Read_DMA+0x1d4>
 8106dba:	68fb      	ldr	r3, [r7, #12]
 8106dbc:	2201      	movs	r2, #1
 8106dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106dc2:	f7fc f885 	bl	8102ed0 <HAL_GetTick>
 8106dc6:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8106dc8:	68fb      	ldr	r3, [r7, #12]
 8106dca:	2222      	movs	r2, #34	; 0x22
 8106dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8106dd0:	68fb      	ldr	r3, [r7, #12]
 8106dd2:	2240      	movs	r2, #64	; 0x40
 8106dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8106dd8:	68fb      	ldr	r3, [r7, #12]
 8106dda:	2200      	movs	r2, #0
 8106ddc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8106dde:	68fb      	ldr	r3, [r7, #12]
 8106de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8106de4:	68fb      	ldr	r3, [r7, #12]
 8106de6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8106de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8106dea:	68fb      	ldr	r3, [r7, #12]
 8106dec:	4a51      	ldr	r2, [pc, #324]	; (8106f34 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8106dee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8106df0:	68fb      	ldr	r3, [r7, #12]
 8106df2:	4a51      	ldr	r2, [pc, #324]	; (8106f38 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8106df4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106df6:	68fb      	ldr	r3, [r7, #12]
 8106df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106dfa:	b29b      	uxth	r3, r3
 8106dfc:	2bff      	cmp	r3, #255	; 0xff
 8106dfe:	d906      	bls.n	8106e0e <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106e00:	68fb      	ldr	r3, [r7, #12]
 8106e02:	22ff      	movs	r2, #255	; 0xff
 8106e04:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8106e06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106e0a:	61fb      	str	r3, [r7, #28]
 8106e0c:	e007      	b.n	8106e1e <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106e0e:	68fb      	ldr	r3, [r7, #12]
 8106e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106e12:	b29a      	uxth	r2, r3
 8106e14:	68fb      	ldr	r3, [r7, #12]
 8106e16:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8106e18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106e1c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8106e1e:	88f8      	ldrh	r0, [r7, #6]
 8106e20:	893a      	ldrh	r2, [r7, #8]
 8106e22:	8979      	ldrh	r1, [r7, #10]
 8106e24:	69bb      	ldr	r3, [r7, #24]
 8106e26:	9301      	str	r3, [sp, #4]
 8106e28:	2319      	movs	r3, #25
 8106e2a:	9300      	str	r3, [sp, #0]
 8106e2c:	4603      	mov	r3, r0
 8106e2e:	68f8      	ldr	r0, [r7, #12]
 8106e30:	f000 fd86 	bl	8107940 <I2C_RequestMemoryRead>
 8106e34:	4603      	mov	r3, r0
 8106e36:	2b00      	cmp	r3, #0
 8106e38:	d005      	beq.n	8106e46 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106e3a:	68fb      	ldr	r3, [r7, #12]
 8106e3c:	2200      	movs	r2, #0
 8106e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106e42:	2301      	movs	r3, #1
 8106e44:	e072      	b.n	8106f2c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8106e46:	68fb      	ldr	r3, [r7, #12]
 8106e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e4a:	2b00      	cmp	r3, #0
 8106e4c:	d020      	beq.n	8106e90 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8106e4e:	68fb      	ldr	r3, [r7, #12]
 8106e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e52:	4a3a      	ldr	r2, [pc, #232]	; (8106f3c <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8106e54:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8106e56:	68fb      	ldr	r3, [r7, #12]
 8106e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e5a:	4a39      	ldr	r2, [pc, #228]	; (8106f40 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8106e5c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8106e5e:	68fb      	ldr	r3, [r7, #12]
 8106e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e62:	2200      	movs	r2, #0
 8106e64:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8106e66:	68fb      	ldr	r3, [r7, #12]
 8106e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e6a:	2200      	movs	r2, #0
 8106e6c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8106e6e:	68fb      	ldr	r3, [r7, #12]
 8106e70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8106e72:	68fb      	ldr	r3, [r7, #12]
 8106e74:	681b      	ldr	r3, [r3, #0]
 8106e76:	3324      	adds	r3, #36	; 0x24
 8106e78:	4619      	mov	r1, r3
 8106e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106e7c:	68fb      	ldr	r3, [r7, #12]
 8106e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106e80:	f7fc ffc6 	bl	8103e10 <HAL_DMA_Start_IT>
 8106e84:	4603      	mov	r3, r0
 8106e86:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8106e88:	7dfb      	ldrb	r3, [r7, #23]
 8106e8a:	2b00      	cmp	r3, #0
 8106e8c:	d139      	bne.n	8106f02 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8106e8e:	e013      	b.n	8106eb8 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106e90:	68fb      	ldr	r3, [r7, #12]
 8106e92:	2220      	movs	r2, #32
 8106e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106e98:	68fb      	ldr	r3, [r7, #12]
 8106e9a:	2200      	movs	r2, #0
 8106e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8106ea0:	68fb      	ldr	r3, [r7, #12]
 8106ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106ea4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106ea8:	68fb      	ldr	r3, [r7, #12]
 8106eaa:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8106eac:	68fb      	ldr	r3, [r7, #12]
 8106eae:	2200      	movs	r2, #0
 8106eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106eb4:	2301      	movs	r3, #1
 8106eb6:	e039      	b.n	8106f2c <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8106eb8:	68fb      	ldr	r3, [r7, #12]
 8106eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ebc:	b2da      	uxtb	r2, r3
 8106ebe:	8979      	ldrh	r1, [r7, #10]
 8106ec0:	4b20      	ldr	r3, [pc, #128]	; (8106f44 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8106ec2:	9300      	str	r3, [sp, #0]
 8106ec4:	69fb      	ldr	r3, [r7, #28]
 8106ec6:	68f8      	ldr	r0, [r7, #12]
 8106ec8:	f001 fdf2 	bl	8108ab0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8106ecc:	68fb      	ldr	r3, [r7, #12]
 8106ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106ed0:	b29a      	uxth	r2, r3
 8106ed2:	68fb      	ldr	r3, [r7, #12]
 8106ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ed6:	1ad3      	subs	r3, r2, r3
 8106ed8:	b29a      	uxth	r2, r3
 8106eda:	68fb      	ldr	r3, [r7, #12]
 8106edc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106ede:	68fb      	ldr	r3, [r7, #12]
 8106ee0:	2200      	movs	r2, #0
 8106ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8106ee6:	2110      	movs	r1, #16
 8106ee8:	68f8      	ldr	r0, [r7, #12]
 8106eea:	f001 fe0f 	bl	8108b0c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	681b      	ldr	r3, [r3, #0]
 8106ef2:	681a      	ldr	r2, [r3, #0]
 8106ef4:	68fb      	ldr	r3, [r7, #12]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106efc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8106efe:	2300      	movs	r3, #0
 8106f00:	e014      	b.n	8106f2c <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106f02:	68fb      	ldr	r3, [r7, #12]
 8106f04:	2220      	movs	r2, #32
 8106f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106f0a:	68fb      	ldr	r3, [r7, #12]
 8106f0c:	2200      	movs	r2, #0
 8106f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8106f12:	68fb      	ldr	r3, [r7, #12]
 8106f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106f16:	f043 0210 	orr.w	r2, r3, #16
 8106f1a:	68fb      	ldr	r3, [r7, #12]
 8106f1c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8106f1e:	68fb      	ldr	r3, [r7, #12]
 8106f20:	2200      	movs	r2, #0
 8106f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106f26:	2301      	movs	r3, #1
 8106f28:	e000      	b.n	8106f2c <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8106f2a:	2302      	movs	r3, #2
  }
}
 8106f2c:	4618      	mov	r0, r3
 8106f2e:	3720      	adds	r7, #32
 8106f30:	46bd      	mov	sp, r7
 8106f32:	bd80      	pop	{r7, pc}
 8106f34:	ffff0000 	.word	0xffff0000
 8106f38:	081072ed 	.word	0x081072ed
 8106f3c:	08108525 	.word	0x08108525
 8106f40:	081085bd 	.word	0x081085bd
 8106f44:	80002400 	.word	0x80002400

08106f48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8106f48:	b580      	push	{r7, lr}
 8106f4a:	b084      	sub	sp, #16
 8106f4c:	af00      	add	r7, sp, #0
 8106f4e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106f50:	687b      	ldr	r3, [r7, #4]
 8106f52:	681b      	ldr	r3, [r3, #0]
 8106f54:	699b      	ldr	r3, [r3, #24]
 8106f56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	681b      	ldr	r3, [r3, #0]
 8106f5e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8106f60:	687b      	ldr	r3, [r7, #4]
 8106f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106f64:	2b00      	cmp	r3, #0
 8106f66:	d005      	beq.n	8106f74 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8106f68:	687b      	ldr	r3, [r7, #4]
 8106f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106f6c:	68ba      	ldr	r2, [r7, #8]
 8106f6e:	68f9      	ldr	r1, [r7, #12]
 8106f70:	6878      	ldr	r0, [r7, #4]
 8106f72:	4798      	blx	r3
  }
}
 8106f74:	bf00      	nop
 8106f76:	3710      	adds	r7, #16
 8106f78:	46bd      	mov	sp, r7
 8106f7a:	bd80      	pop	{r7, pc}

08106f7c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8106f7c:	b580      	push	{r7, lr}
 8106f7e:	b086      	sub	sp, #24
 8106f80:	af00      	add	r7, sp, #0
 8106f82:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	681b      	ldr	r3, [r3, #0]
 8106f88:	699b      	ldr	r3, [r3, #24]
 8106f8a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	681b      	ldr	r3, [r3, #0]
 8106f90:	681b      	ldr	r3, [r3, #0]
 8106f92:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106f94:	697b      	ldr	r3, [r7, #20]
 8106f96:	0a1b      	lsrs	r3, r3, #8
 8106f98:	f003 0301 	and.w	r3, r3, #1
 8106f9c:	2b00      	cmp	r3, #0
 8106f9e:	d010      	beq.n	8106fc2 <HAL_I2C_ER_IRQHandler+0x46>
 8106fa0:	693b      	ldr	r3, [r7, #16]
 8106fa2:	09db      	lsrs	r3, r3, #7
 8106fa4:	f003 0301 	and.w	r3, r3, #1
 8106fa8:	2b00      	cmp	r3, #0
 8106faa:	d00a      	beq.n	8106fc2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106fb0:	f043 0201 	orr.w	r2, r3, #1
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8106fb8:	687b      	ldr	r3, [r7, #4]
 8106fba:	681b      	ldr	r3, [r3, #0]
 8106fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8106fc0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106fc2:	697b      	ldr	r3, [r7, #20]
 8106fc4:	0a9b      	lsrs	r3, r3, #10
 8106fc6:	f003 0301 	and.w	r3, r3, #1
 8106fca:	2b00      	cmp	r3, #0
 8106fcc:	d010      	beq.n	8106ff0 <HAL_I2C_ER_IRQHandler+0x74>
 8106fce:	693b      	ldr	r3, [r7, #16]
 8106fd0:	09db      	lsrs	r3, r3, #7
 8106fd2:	f003 0301 	and.w	r3, r3, #1
 8106fd6:	2b00      	cmp	r3, #0
 8106fd8:	d00a      	beq.n	8106ff0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8106fda:	687b      	ldr	r3, [r7, #4]
 8106fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106fde:	f043 0208 	orr.w	r2, r3, #8
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	681b      	ldr	r3, [r3, #0]
 8106fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8106fee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106ff0:	697b      	ldr	r3, [r7, #20]
 8106ff2:	0a5b      	lsrs	r3, r3, #9
 8106ff4:	f003 0301 	and.w	r3, r3, #1
 8106ff8:	2b00      	cmp	r3, #0
 8106ffa:	d010      	beq.n	810701e <HAL_I2C_ER_IRQHandler+0xa2>
 8106ffc:	693b      	ldr	r3, [r7, #16]
 8106ffe:	09db      	lsrs	r3, r3, #7
 8107000:	f003 0301 	and.w	r3, r3, #1
 8107004:	2b00      	cmp	r3, #0
 8107006:	d00a      	beq.n	810701e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8107008:	687b      	ldr	r3, [r7, #4]
 810700a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810700c:	f043 0202 	orr.w	r2, r3, #2
 8107010:	687b      	ldr	r3, [r7, #4]
 8107012:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	f44f 7200 	mov.w	r2, #512	; 0x200
 810701c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 810701e:	687b      	ldr	r3, [r7, #4]
 8107020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107022:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8107024:	68fb      	ldr	r3, [r7, #12]
 8107026:	f003 030b 	and.w	r3, r3, #11
 810702a:	2b00      	cmp	r3, #0
 810702c:	d003      	beq.n	8107036 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 810702e:	68f9      	ldr	r1, [r7, #12]
 8107030:	6878      	ldr	r0, [r7, #4]
 8107032:	f001 f911 	bl	8108258 <I2C_ITError>
  }
}
 8107036:	bf00      	nop
 8107038:	3718      	adds	r7, #24
 810703a:	46bd      	mov	sp, r7
 810703c:	bd80      	pop	{r7, pc}

0810703e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810703e:	b480      	push	{r7}
 8107040:	b083      	sub	sp, #12
 8107042:	af00      	add	r7, sp, #0
 8107044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8107046:	bf00      	nop
 8107048:	370c      	adds	r7, #12
 810704a:	46bd      	mov	sp, r7
 810704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107050:	4770      	bx	lr

08107052 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107052:	b480      	push	{r7}
 8107054:	b083      	sub	sp, #12
 8107056:	af00      	add	r7, sp, #0
 8107058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 810705a:	bf00      	nop
 810705c:	370c      	adds	r7, #12
 810705e:	46bd      	mov	sp, r7
 8107060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107064:	4770      	bx	lr

08107066 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107066:	b480      	push	{r7}
 8107068:	b083      	sub	sp, #12
 810706a:	af00      	add	r7, sp, #0
 810706c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 810706e:	bf00      	nop
 8107070:	370c      	adds	r7, #12
 8107072:	46bd      	mov	sp, r7
 8107074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107078:	4770      	bx	lr

0810707a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810707a:	b480      	push	{r7}
 810707c:	b083      	sub	sp, #12
 810707e:	af00      	add	r7, sp, #0
 8107080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8107082:	bf00      	nop
 8107084:	370c      	adds	r7, #12
 8107086:	46bd      	mov	sp, r7
 8107088:	f85d 7b04 	ldr.w	r7, [sp], #4
 810708c:	4770      	bx	lr

0810708e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 810708e:	b480      	push	{r7}
 8107090:	b083      	sub	sp, #12
 8107092:	af00      	add	r7, sp, #0
 8107094:	6078      	str	r0, [r7, #4]
 8107096:	460b      	mov	r3, r1
 8107098:	70fb      	strb	r3, [r7, #3]
 810709a:	4613      	mov	r3, r2
 810709c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 810709e:	bf00      	nop
 81070a0:	370c      	adds	r7, #12
 81070a2:	46bd      	mov	sp, r7
 81070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070a8:	4770      	bx	lr

081070aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81070aa:	b480      	push	{r7}
 81070ac:	b083      	sub	sp, #12
 81070ae:	af00      	add	r7, sp, #0
 81070b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 81070b2:	bf00      	nop
 81070b4:	370c      	adds	r7, #12
 81070b6:	46bd      	mov	sp, r7
 81070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070bc:	4770      	bx	lr

081070be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 81070be:	b480      	push	{r7}
 81070c0:	b083      	sub	sp, #12
 81070c2:	af00      	add	r7, sp, #0
 81070c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 81070c6:	bf00      	nop
 81070c8:	370c      	adds	r7, #12
 81070ca:	46bd      	mov	sp, r7
 81070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070d0:	4770      	bx	lr

081070d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81070d2:	b480      	push	{r7}
 81070d4:	b083      	sub	sp, #12
 81070d6:	af00      	add	r7, sp, #0
 81070d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 81070da:	bf00      	nop
 81070dc:	370c      	adds	r7, #12
 81070de:	46bd      	mov	sp, r7
 81070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070e4:	4770      	bx	lr

081070e6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 81070e6:	b580      	push	{r7, lr}
 81070e8:	b086      	sub	sp, #24
 81070ea:	af00      	add	r7, sp, #0
 81070ec:	60f8      	str	r0, [r7, #12]
 81070ee:	60b9      	str	r1, [r7, #8]
 81070f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 81070f2:	68fb      	ldr	r3, [r7, #12]
 81070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 81070f8:	68bb      	ldr	r3, [r7, #8]
 81070fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 81070fc:	68fb      	ldr	r3, [r7, #12]
 81070fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8107102:	2b01      	cmp	r3, #1
 8107104:	d101      	bne.n	810710a <I2C_Slave_ISR_IT+0x24>
 8107106:	2302      	movs	r3, #2
 8107108:	e0ec      	b.n	81072e4 <I2C_Slave_ISR_IT+0x1fe>
 810710a:	68fb      	ldr	r3, [r7, #12]
 810710c:	2201      	movs	r2, #1
 810710e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8107112:	693b      	ldr	r3, [r7, #16]
 8107114:	095b      	lsrs	r3, r3, #5
 8107116:	f003 0301 	and.w	r3, r3, #1
 810711a:	2b00      	cmp	r3, #0
 810711c:	d009      	beq.n	8107132 <I2C_Slave_ISR_IT+0x4c>
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	095b      	lsrs	r3, r3, #5
 8107122:	f003 0301 	and.w	r3, r3, #1
 8107126:	2b00      	cmp	r3, #0
 8107128:	d003      	beq.n	8107132 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 810712a:	6939      	ldr	r1, [r7, #16]
 810712c:	68f8      	ldr	r0, [r7, #12]
 810712e:	f000 fe45 	bl	8107dbc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8107132:	693b      	ldr	r3, [r7, #16]
 8107134:	091b      	lsrs	r3, r3, #4
 8107136:	f003 0301 	and.w	r3, r3, #1
 810713a:	2b00      	cmp	r3, #0
 810713c:	d04d      	beq.n	81071da <I2C_Slave_ISR_IT+0xf4>
 810713e:	687b      	ldr	r3, [r7, #4]
 8107140:	091b      	lsrs	r3, r3, #4
 8107142:	f003 0301 	and.w	r3, r3, #1
 8107146:	2b00      	cmp	r3, #0
 8107148:	d047      	beq.n	81071da <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 810714a:	68fb      	ldr	r3, [r7, #12]
 810714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810714e:	b29b      	uxth	r3, r3
 8107150:	2b00      	cmp	r3, #0
 8107152:	d128      	bne.n	81071a6 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8107154:	68fb      	ldr	r3, [r7, #12]
 8107156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810715a:	b2db      	uxtb	r3, r3
 810715c:	2b28      	cmp	r3, #40	; 0x28
 810715e:	d108      	bne.n	8107172 <I2C_Slave_ISR_IT+0x8c>
 8107160:	697b      	ldr	r3, [r7, #20]
 8107162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107166:	d104      	bne.n	8107172 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8107168:	6939      	ldr	r1, [r7, #16]
 810716a:	68f8      	ldr	r0, [r7, #12]
 810716c:	f001 f81e 	bl	81081ac <I2C_ITListenCplt>
 8107170:	e032      	b.n	81071d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8107172:	68fb      	ldr	r3, [r7, #12]
 8107174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107178:	b2db      	uxtb	r3, r3
 810717a:	2b29      	cmp	r3, #41	; 0x29
 810717c:	d10e      	bne.n	810719c <I2C_Slave_ISR_IT+0xb6>
 810717e:	697b      	ldr	r3, [r7, #20]
 8107180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107184:	d00a      	beq.n	810719c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107186:	68fb      	ldr	r3, [r7, #12]
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	2210      	movs	r2, #16
 810718c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 810718e:	68f8      	ldr	r0, [r7, #12]
 8107190:	f001 f959 	bl	8108446 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107194:	68f8      	ldr	r0, [r7, #12]
 8107196:	f000 fce8 	bl	8107b6a <I2C_ITSlaveSeqCplt>
 810719a:	e01d      	b.n	81071d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810719c:	68fb      	ldr	r3, [r7, #12]
 810719e:	681b      	ldr	r3, [r3, #0]
 81071a0:	2210      	movs	r2, #16
 81071a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 81071a4:	e096      	b.n	81072d4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81071a6:	68fb      	ldr	r3, [r7, #12]
 81071a8:	681b      	ldr	r3, [r3, #0]
 81071aa:	2210      	movs	r2, #16
 81071ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81071ae:	68fb      	ldr	r3, [r7, #12]
 81071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81071b2:	f043 0204 	orr.w	r2, r3, #4
 81071b6:	68fb      	ldr	r3, [r7, #12]
 81071b8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 81071ba:	697b      	ldr	r3, [r7, #20]
 81071bc:	2b00      	cmp	r3, #0
 81071be:	d004      	beq.n	81071ca <I2C_Slave_ISR_IT+0xe4>
 81071c0:	697b      	ldr	r3, [r7, #20]
 81071c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81071c6:	f040 8085 	bne.w	81072d4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 81071ca:	68fb      	ldr	r3, [r7, #12]
 81071cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81071ce:	4619      	mov	r1, r3
 81071d0:	68f8      	ldr	r0, [r7, #12]
 81071d2:	f001 f841 	bl	8108258 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 81071d6:	e07d      	b.n	81072d4 <I2C_Slave_ISR_IT+0x1ee>
 81071d8:	e07c      	b.n	81072d4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 81071da:	693b      	ldr	r3, [r7, #16]
 81071dc:	089b      	lsrs	r3, r3, #2
 81071de:	f003 0301 	and.w	r3, r3, #1
 81071e2:	2b00      	cmp	r3, #0
 81071e4:	d030      	beq.n	8107248 <I2C_Slave_ISR_IT+0x162>
 81071e6:	687b      	ldr	r3, [r7, #4]
 81071e8:	089b      	lsrs	r3, r3, #2
 81071ea:	f003 0301 	and.w	r3, r3, #1
 81071ee:	2b00      	cmp	r3, #0
 81071f0:	d02a      	beq.n	8107248 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 81071f2:	68fb      	ldr	r3, [r7, #12]
 81071f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81071f6:	b29b      	uxth	r3, r3
 81071f8:	2b00      	cmp	r3, #0
 81071fa:	d018      	beq.n	810722e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81071fc:	68fb      	ldr	r3, [r7, #12]
 81071fe:	681b      	ldr	r3, [r3, #0]
 8107200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107202:	68fb      	ldr	r3, [r7, #12]
 8107204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107206:	b2d2      	uxtb	r2, r2
 8107208:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810720a:	68fb      	ldr	r3, [r7, #12]
 810720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810720e:	1c5a      	adds	r2, r3, #1
 8107210:	68fb      	ldr	r3, [r7, #12]
 8107212:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8107214:	68fb      	ldr	r3, [r7, #12]
 8107216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107218:	3b01      	subs	r3, #1
 810721a:	b29a      	uxth	r2, r3
 810721c:	68fb      	ldr	r3, [r7, #12]
 810721e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107220:	68fb      	ldr	r3, [r7, #12]
 8107222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107224:	b29b      	uxth	r3, r3
 8107226:	3b01      	subs	r3, #1
 8107228:	b29a      	uxth	r2, r3
 810722a:	68fb      	ldr	r3, [r7, #12]
 810722c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 810722e:	68fb      	ldr	r3, [r7, #12]
 8107230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107232:	b29b      	uxth	r3, r3
 8107234:	2b00      	cmp	r3, #0
 8107236:	d14f      	bne.n	81072d8 <I2C_Slave_ISR_IT+0x1f2>
 8107238:	697b      	ldr	r3, [r7, #20]
 810723a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 810723e:	d04b      	beq.n	81072d8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8107240:	68f8      	ldr	r0, [r7, #12]
 8107242:	f000 fc92 	bl	8107b6a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8107246:	e047      	b.n	81072d8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107248:	693b      	ldr	r3, [r7, #16]
 810724a:	08db      	lsrs	r3, r3, #3
 810724c:	f003 0301 	and.w	r3, r3, #1
 8107250:	2b00      	cmp	r3, #0
 8107252:	d00a      	beq.n	810726a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8107254:	687b      	ldr	r3, [r7, #4]
 8107256:	08db      	lsrs	r3, r3, #3
 8107258:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 810725c:	2b00      	cmp	r3, #0
 810725e:	d004      	beq.n	810726a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8107260:	6939      	ldr	r1, [r7, #16]
 8107262:	68f8      	ldr	r0, [r7, #12]
 8107264:	f000 fbc0 	bl	81079e8 <I2C_ITAddrCplt>
 8107268:	e037      	b.n	81072da <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 810726a:	693b      	ldr	r3, [r7, #16]
 810726c:	085b      	lsrs	r3, r3, #1
 810726e:	f003 0301 	and.w	r3, r3, #1
 8107272:	2b00      	cmp	r3, #0
 8107274:	d031      	beq.n	81072da <I2C_Slave_ISR_IT+0x1f4>
 8107276:	687b      	ldr	r3, [r7, #4]
 8107278:	085b      	lsrs	r3, r3, #1
 810727a:	f003 0301 	and.w	r3, r3, #1
 810727e:	2b00      	cmp	r3, #0
 8107280:	d02b      	beq.n	81072da <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8107282:	68fb      	ldr	r3, [r7, #12]
 8107284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107286:	b29b      	uxth	r3, r3
 8107288:	2b00      	cmp	r3, #0
 810728a:	d018      	beq.n	81072be <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810728c:	68fb      	ldr	r3, [r7, #12]
 810728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107290:	781a      	ldrb	r2, [r3, #0]
 8107292:	68fb      	ldr	r3, [r7, #12]
 8107294:	681b      	ldr	r3, [r3, #0]
 8107296:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107298:	68fb      	ldr	r3, [r7, #12]
 810729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810729c:	1c5a      	adds	r2, r3, #1
 810729e:	68fb      	ldr	r3, [r7, #12]
 81072a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81072a2:	68fb      	ldr	r3, [r7, #12]
 81072a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81072a6:	b29b      	uxth	r3, r3
 81072a8:	3b01      	subs	r3, #1
 81072aa:	b29a      	uxth	r2, r3
 81072ac:	68fb      	ldr	r3, [r7, #12]
 81072ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81072b0:	68fb      	ldr	r3, [r7, #12]
 81072b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81072b4:	3b01      	subs	r3, #1
 81072b6:	b29a      	uxth	r2, r3
 81072b8:	68fb      	ldr	r3, [r7, #12]
 81072ba:	851a      	strh	r2, [r3, #40]	; 0x28
 81072bc:	e00d      	b.n	81072da <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 81072be:	697b      	ldr	r3, [r7, #20]
 81072c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81072c4:	d002      	beq.n	81072cc <I2C_Slave_ISR_IT+0x1e6>
 81072c6:	697b      	ldr	r3, [r7, #20]
 81072c8:	2b00      	cmp	r3, #0
 81072ca:	d106      	bne.n	81072da <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 81072cc:	68f8      	ldr	r0, [r7, #12]
 81072ce:	f000 fc4c 	bl	8107b6a <I2C_ITSlaveSeqCplt>
 81072d2:	e002      	b.n	81072da <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 81072d4:	bf00      	nop
 81072d6:	e000      	b.n	81072da <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 81072d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 81072da:	68fb      	ldr	r3, [r7, #12]
 81072dc:	2200      	movs	r2, #0
 81072de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 81072e2:	2300      	movs	r3, #0
}
 81072e4:	4618      	mov	r0, r3
 81072e6:	3718      	adds	r7, #24
 81072e8:	46bd      	mov	sp, r7
 81072ea:	bd80      	pop	{r7, pc}

081072ec <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 81072ec:	b580      	push	{r7, lr}
 81072ee:	b088      	sub	sp, #32
 81072f0:	af02      	add	r7, sp, #8
 81072f2:	60f8      	str	r0, [r7, #12]
 81072f4:	60b9      	str	r1, [r7, #8]
 81072f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 81072f8:	68fb      	ldr	r3, [r7, #12]
 81072fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81072fe:	2b01      	cmp	r3, #1
 8107300:	d101      	bne.n	8107306 <I2C_Master_ISR_DMA+0x1a>
 8107302:	2302      	movs	r3, #2
 8107304:	e0e1      	b.n	81074ca <I2C_Master_ISR_DMA+0x1de>
 8107306:	68fb      	ldr	r3, [r7, #12]
 8107308:	2201      	movs	r2, #1
 810730a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 810730e:	68bb      	ldr	r3, [r7, #8]
 8107310:	091b      	lsrs	r3, r3, #4
 8107312:	f003 0301 	and.w	r3, r3, #1
 8107316:	2b00      	cmp	r3, #0
 8107318:	d017      	beq.n	810734a <I2C_Master_ISR_DMA+0x5e>
 810731a:	687b      	ldr	r3, [r7, #4]
 810731c:	091b      	lsrs	r3, r3, #4
 810731e:	f003 0301 	and.w	r3, r3, #1
 8107322:	2b00      	cmp	r3, #0
 8107324:	d011      	beq.n	810734a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107326:	68fb      	ldr	r3, [r7, #12]
 8107328:	681b      	ldr	r3, [r3, #0]
 810732a:	2210      	movs	r2, #16
 810732c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810732e:	68fb      	ldr	r3, [r7, #12]
 8107330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107332:	f043 0204 	orr.w	r2, r3, #4
 8107336:	68fb      	ldr	r3, [r7, #12]
 8107338:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 810733a:	2120      	movs	r1, #32
 810733c:	68f8      	ldr	r0, [r7, #12]
 810733e:	f001 fbe5 	bl	8108b0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8107342:	68f8      	ldr	r0, [r7, #12]
 8107344:	f001 f87f 	bl	8108446 <I2C_Flush_TXDR>
 8107348:	e0ba      	b.n	81074c0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 810734a:	68bb      	ldr	r3, [r7, #8]
 810734c:	09db      	lsrs	r3, r3, #7
 810734e:	f003 0301 	and.w	r3, r3, #1
 8107352:	2b00      	cmp	r3, #0
 8107354:	d072      	beq.n	810743c <I2C_Master_ISR_DMA+0x150>
 8107356:	687b      	ldr	r3, [r7, #4]
 8107358:	099b      	lsrs	r3, r3, #6
 810735a:	f003 0301 	and.w	r3, r3, #1
 810735e:	2b00      	cmp	r3, #0
 8107360:	d06c      	beq.n	810743c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8107362:	68fb      	ldr	r3, [r7, #12]
 8107364:	681b      	ldr	r3, [r3, #0]
 8107366:	681a      	ldr	r2, [r3, #0]
 8107368:	68fb      	ldr	r3, [r7, #12]
 810736a:	681b      	ldr	r3, [r3, #0]
 810736c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8107370:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8107372:	68fb      	ldr	r3, [r7, #12]
 8107374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107376:	b29b      	uxth	r3, r3
 8107378:	2b00      	cmp	r3, #0
 810737a:	d04e      	beq.n	810741a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 810737c:	68fb      	ldr	r3, [r7, #12]
 810737e:	681b      	ldr	r3, [r3, #0]
 8107380:	685b      	ldr	r3, [r3, #4]
 8107382:	b29b      	uxth	r3, r3
 8107384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8107388:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810738a:	68fb      	ldr	r3, [r7, #12]
 810738c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810738e:	b29b      	uxth	r3, r3
 8107390:	2bff      	cmp	r3, #255	; 0xff
 8107392:	d906      	bls.n	81073a2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8107394:	68fb      	ldr	r3, [r7, #12]
 8107396:	22ff      	movs	r2, #255	; 0xff
 8107398:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 810739a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810739e:	617b      	str	r3, [r7, #20]
 81073a0:	e010      	b.n	81073c4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 81073a2:	68fb      	ldr	r3, [r7, #12]
 81073a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81073a6:	b29a      	uxth	r2, r3
 81073a8:	68fb      	ldr	r3, [r7, #12]
 81073aa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 81073ac:	68fb      	ldr	r3, [r7, #12]
 81073ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81073b4:	d003      	beq.n	81073be <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 81073b6:	68fb      	ldr	r3, [r7, #12]
 81073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073ba:	617b      	str	r3, [r7, #20]
 81073bc:	e002      	b.n	81073c4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 81073be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81073c2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 81073c4:	68fb      	ldr	r3, [r7, #12]
 81073c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81073c8:	b2da      	uxtb	r2, r3
 81073ca:	8a79      	ldrh	r1, [r7, #18]
 81073cc:	2300      	movs	r3, #0
 81073ce:	9300      	str	r3, [sp, #0]
 81073d0:	697b      	ldr	r3, [r7, #20]
 81073d2:	68f8      	ldr	r0, [r7, #12]
 81073d4:	f001 fb6c 	bl	8108ab0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 81073d8:	68fb      	ldr	r3, [r7, #12]
 81073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81073dc:	b29a      	uxth	r2, r3
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81073e2:	1ad3      	subs	r3, r2, r3
 81073e4:	b29a      	uxth	r2, r3
 81073e6:	68fb      	ldr	r3, [r7, #12]
 81073e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81073ea:	68fb      	ldr	r3, [r7, #12]
 81073ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81073f0:	b2db      	uxtb	r3, r3
 81073f2:	2b22      	cmp	r3, #34	; 0x22
 81073f4:	d108      	bne.n	8107408 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 81073f6:	68fb      	ldr	r3, [r7, #12]
 81073f8:	681b      	ldr	r3, [r3, #0]
 81073fa:	681a      	ldr	r2, [r3, #0]
 81073fc:	68fb      	ldr	r3, [r7, #12]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107404:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8107406:	e05b      	b.n	81074c0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	681b      	ldr	r3, [r3, #0]
 810740c:	681a      	ldr	r2, [r3, #0]
 810740e:	68fb      	ldr	r3, [r7, #12]
 8107410:	681b      	ldr	r3, [r3, #0]
 8107412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8107416:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8107418:	e052      	b.n	81074c0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 810741a:	68fb      	ldr	r3, [r7, #12]
 810741c:	681b      	ldr	r3, [r3, #0]
 810741e:	685b      	ldr	r3, [r3, #4]
 8107420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107428:	d003      	beq.n	8107432 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 810742a:	68f8      	ldr	r0, [r7, #12]
 810742c:	f000 fb60 	bl	8107af0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8107430:	e046      	b.n	81074c0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8107432:	2140      	movs	r1, #64	; 0x40
 8107434:	68f8      	ldr	r0, [r7, #12]
 8107436:	f000 ff0f 	bl	8108258 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 810743a:	e041      	b.n	81074c0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 810743c:	68bb      	ldr	r3, [r7, #8]
 810743e:	099b      	lsrs	r3, r3, #6
 8107440:	f003 0301 	and.w	r3, r3, #1
 8107444:	2b00      	cmp	r3, #0
 8107446:	d029      	beq.n	810749c <I2C_Master_ISR_DMA+0x1b0>
 8107448:	687b      	ldr	r3, [r7, #4]
 810744a:	099b      	lsrs	r3, r3, #6
 810744c:	f003 0301 	and.w	r3, r3, #1
 8107450:	2b00      	cmp	r3, #0
 8107452:	d023      	beq.n	810749c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8107454:	68fb      	ldr	r3, [r7, #12]
 8107456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107458:	b29b      	uxth	r3, r3
 810745a:	2b00      	cmp	r3, #0
 810745c:	d119      	bne.n	8107492 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 810745e:	68fb      	ldr	r3, [r7, #12]
 8107460:	681b      	ldr	r3, [r3, #0]
 8107462:	685b      	ldr	r3, [r3, #4]
 8107464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810746c:	d027      	beq.n	81074be <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 810746e:	68fb      	ldr	r3, [r7, #12]
 8107470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107472:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107476:	d108      	bne.n	810748a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8107478:	68fb      	ldr	r3, [r7, #12]
 810747a:	681b      	ldr	r3, [r3, #0]
 810747c:	685a      	ldr	r2, [r3, #4]
 810747e:	68fb      	ldr	r3, [r7, #12]
 8107480:	681b      	ldr	r3, [r3, #0]
 8107482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8107486:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8107488:	e019      	b.n	81074be <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 810748a:	68f8      	ldr	r0, [r7, #12]
 810748c:	f000 fb30 	bl	8107af0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8107490:	e015      	b.n	81074be <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8107492:	2140      	movs	r1, #64	; 0x40
 8107494:	68f8      	ldr	r0, [r7, #12]
 8107496:	f000 fedf 	bl	8108258 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 810749a:	e010      	b.n	81074be <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 810749c:	68bb      	ldr	r3, [r7, #8]
 810749e:	095b      	lsrs	r3, r3, #5
 81074a0:	f003 0301 	and.w	r3, r3, #1
 81074a4:	2b00      	cmp	r3, #0
 81074a6:	d00b      	beq.n	81074c0 <I2C_Master_ISR_DMA+0x1d4>
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	095b      	lsrs	r3, r3, #5
 81074ac:	f003 0301 	and.w	r3, r3, #1
 81074b0:	2b00      	cmp	r3, #0
 81074b2:	d005      	beq.n	81074c0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 81074b4:	68b9      	ldr	r1, [r7, #8]
 81074b6:	68f8      	ldr	r0, [r7, #12]
 81074b8:	f000 fbb6 	bl	8107c28 <I2C_ITMasterCplt>
 81074bc:	e000      	b.n	81074c0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 81074be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 81074c0:	68fb      	ldr	r3, [r7, #12]
 81074c2:	2200      	movs	r2, #0
 81074c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 81074c8:	2300      	movs	r3, #0
}
 81074ca:	4618      	mov	r0, r3
 81074cc:	3718      	adds	r7, #24
 81074ce:	46bd      	mov	sp, r7
 81074d0:	bd80      	pop	{r7, pc}
	...

081074d4 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 81074d4:	b580      	push	{r7, lr}
 81074d6:	b088      	sub	sp, #32
 81074d8:	af00      	add	r7, sp, #0
 81074da:	60f8      	str	r0, [r7, #12]
 81074dc:	60b9      	str	r1, [r7, #8]
 81074de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 81074e0:	68fb      	ldr	r3, [r7, #12]
 81074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81074e4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 81074e6:	2300      	movs	r3, #0
 81074e8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 81074ea:	68fb      	ldr	r3, [r7, #12]
 81074ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81074f0:	2b01      	cmp	r3, #1
 81074f2:	d101      	bne.n	81074f8 <I2C_Slave_ISR_DMA+0x24>
 81074f4:	2302      	movs	r3, #2
 81074f6:	e1ca      	b.n	810788e <I2C_Slave_ISR_DMA+0x3ba>
 81074f8:	68fb      	ldr	r3, [r7, #12]
 81074fa:	2201      	movs	r2, #1
 81074fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8107500:	68bb      	ldr	r3, [r7, #8]
 8107502:	095b      	lsrs	r3, r3, #5
 8107504:	f003 0301 	and.w	r3, r3, #1
 8107508:	2b00      	cmp	r3, #0
 810750a:	d009      	beq.n	8107520 <I2C_Slave_ISR_DMA+0x4c>
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	095b      	lsrs	r3, r3, #5
 8107510:	f003 0301 	and.w	r3, r3, #1
 8107514:	2b00      	cmp	r3, #0
 8107516:	d003      	beq.n	8107520 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8107518:	68b9      	ldr	r1, [r7, #8]
 810751a:	68f8      	ldr	r0, [r7, #12]
 810751c:	f000 fc4e 	bl	8107dbc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8107520:	68bb      	ldr	r3, [r7, #8]
 8107522:	091b      	lsrs	r3, r3, #4
 8107524:	f003 0301 	and.w	r3, r3, #1
 8107528:	2b00      	cmp	r3, #0
 810752a:	f000 819b 	beq.w	8107864 <I2C_Slave_ISR_DMA+0x390>
 810752e:	687b      	ldr	r3, [r7, #4]
 8107530:	091b      	lsrs	r3, r3, #4
 8107532:	f003 0301 	and.w	r3, r3, #1
 8107536:	2b00      	cmp	r3, #0
 8107538:	f000 8194 	beq.w	8107864 <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 810753c:	687b      	ldr	r3, [r7, #4]
 810753e:	0b9b      	lsrs	r3, r3, #14
 8107540:	f003 0301 	and.w	r3, r3, #1
 8107544:	2b00      	cmp	r3, #0
 8107546:	d106      	bne.n	8107556 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	0bdb      	lsrs	r3, r3, #15
 810754c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8107550:	2b00      	cmp	r3, #0
 8107552:	f000 8180 	beq.w	8107856 <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8107556:	68fb      	ldr	r3, [r7, #12]
 8107558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810755a:	2b00      	cmp	r3, #0
 810755c:	d07c      	beq.n	8107658 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 810755e:	687b      	ldr	r3, [r7, #4]
 8107560:	0bdb      	lsrs	r3, r3, #15
 8107562:	f003 0301 	and.w	r3, r3, #1
 8107566:	2b00      	cmp	r3, #0
 8107568:	d076      	beq.n	8107658 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 810756a:	68fb      	ldr	r3, [r7, #12]
 810756c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810756e:	681b      	ldr	r3, [r3, #0]
 8107570:	4a74      	ldr	r2, [pc, #464]	; (8107744 <I2C_Slave_ISR_DMA+0x270>)
 8107572:	4293      	cmp	r3, r2
 8107574:	d059      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 8107576:	68fb      	ldr	r3, [r7, #12]
 8107578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810757a:	681b      	ldr	r3, [r3, #0]
 810757c:	4a72      	ldr	r2, [pc, #456]	; (8107748 <I2C_Slave_ISR_DMA+0x274>)
 810757e:	4293      	cmp	r3, r2
 8107580:	d053      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 8107582:	68fb      	ldr	r3, [r7, #12]
 8107584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107586:	681b      	ldr	r3, [r3, #0]
 8107588:	4a70      	ldr	r2, [pc, #448]	; (810774c <I2C_Slave_ISR_DMA+0x278>)
 810758a:	4293      	cmp	r3, r2
 810758c:	d04d      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 810758e:	68fb      	ldr	r3, [r7, #12]
 8107590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107592:	681b      	ldr	r3, [r3, #0]
 8107594:	4a6e      	ldr	r2, [pc, #440]	; (8107750 <I2C_Slave_ISR_DMA+0x27c>)
 8107596:	4293      	cmp	r3, r2
 8107598:	d047      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 810759a:	68fb      	ldr	r3, [r7, #12]
 810759c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810759e:	681b      	ldr	r3, [r3, #0]
 81075a0:	4a6c      	ldr	r2, [pc, #432]	; (8107754 <I2C_Slave_ISR_DMA+0x280>)
 81075a2:	4293      	cmp	r3, r2
 81075a4:	d041      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 81075a6:	68fb      	ldr	r3, [r7, #12]
 81075a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075aa:	681b      	ldr	r3, [r3, #0]
 81075ac:	4a6a      	ldr	r2, [pc, #424]	; (8107758 <I2C_Slave_ISR_DMA+0x284>)
 81075ae:	4293      	cmp	r3, r2
 81075b0:	d03b      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 81075b2:	68fb      	ldr	r3, [r7, #12]
 81075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075b6:	681b      	ldr	r3, [r3, #0]
 81075b8:	4a68      	ldr	r2, [pc, #416]	; (810775c <I2C_Slave_ISR_DMA+0x288>)
 81075ba:	4293      	cmp	r3, r2
 81075bc:	d035      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 81075be:	68fb      	ldr	r3, [r7, #12]
 81075c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	4a66      	ldr	r2, [pc, #408]	; (8107760 <I2C_Slave_ISR_DMA+0x28c>)
 81075c6:	4293      	cmp	r3, r2
 81075c8:	d02f      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 81075ca:	68fb      	ldr	r3, [r7, #12]
 81075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075ce:	681b      	ldr	r3, [r3, #0]
 81075d0:	4a64      	ldr	r2, [pc, #400]	; (8107764 <I2C_Slave_ISR_DMA+0x290>)
 81075d2:	4293      	cmp	r3, r2
 81075d4:	d029      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075da:	681b      	ldr	r3, [r3, #0]
 81075dc:	4a62      	ldr	r2, [pc, #392]	; (8107768 <I2C_Slave_ISR_DMA+0x294>)
 81075de:	4293      	cmp	r3, r2
 81075e0:	d023      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 81075e2:	68fb      	ldr	r3, [r7, #12]
 81075e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075e6:	681b      	ldr	r3, [r3, #0]
 81075e8:	4a60      	ldr	r2, [pc, #384]	; (810776c <I2C_Slave_ISR_DMA+0x298>)
 81075ea:	4293      	cmp	r3, r2
 81075ec:	d01d      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 81075ee:	68fb      	ldr	r3, [r7, #12]
 81075f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075f2:	681b      	ldr	r3, [r3, #0]
 81075f4:	4a5e      	ldr	r2, [pc, #376]	; (8107770 <I2C_Slave_ISR_DMA+0x29c>)
 81075f6:	4293      	cmp	r3, r2
 81075f8:	d017      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 81075fa:	68fb      	ldr	r3, [r7, #12]
 81075fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075fe:	681b      	ldr	r3, [r3, #0]
 8107600:	4a5c      	ldr	r2, [pc, #368]	; (8107774 <I2C_Slave_ISR_DMA+0x2a0>)
 8107602:	4293      	cmp	r3, r2
 8107604:	d011      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 8107606:	68fb      	ldr	r3, [r7, #12]
 8107608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810760a:	681b      	ldr	r3, [r3, #0]
 810760c:	4a5a      	ldr	r2, [pc, #360]	; (8107778 <I2C_Slave_ISR_DMA+0x2a4>)
 810760e:	4293      	cmp	r3, r2
 8107610:	d00b      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 8107612:	68fb      	ldr	r3, [r7, #12]
 8107614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107616:	681b      	ldr	r3, [r3, #0]
 8107618:	4a58      	ldr	r2, [pc, #352]	; (810777c <I2C_Slave_ISR_DMA+0x2a8>)
 810761a:	4293      	cmp	r3, r2
 810761c:	d005      	beq.n	810762a <I2C_Slave_ISR_DMA+0x156>
 810761e:	68fb      	ldr	r3, [r7, #12]
 8107620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107622:	681b      	ldr	r3, [r3, #0]
 8107624:	4a56      	ldr	r2, [pc, #344]	; (8107780 <I2C_Slave_ISR_DMA+0x2ac>)
 8107626:	4293      	cmp	r3, r2
 8107628:	d109      	bne.n	810763e <I2C_Slave_ISR_DMA+0x16a>
 810762a:	68fb      	ldr	r3, [r7, #12]
 810762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810762e:	681b      	ldr	r3, [r3, #0]
 8107630:	685b      	ldr	r3, [r3, #4]
 8107632:	2b00      	cmp	r3, #0
 8107634:	bf0c      	ite	eq
 8107636:	2301      	moveq	r3, #1
 8107638:	2300      	movne	r3, #0
 810763a:	b2db      	uxtb	r3, r3
 810763c:	e008      	b.n	8107650 <I2C_Slave_ISR_DMA+0x17c>
 810763e:	68fb      	ldr	r3, [r7, #12]
 8107640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107642:	681b      	ldr	r3, [r3, #0]
 8107644:	685b      	ldr	r3, [r3, #4]
 8107646:	2b00      	cmp	r3, #0
 8107648:	bf0c      	ite	eq
 810764a:	2301      	moveq	r3, #1
 810764c:	2300      	movne	r3, #0
 810764e:	b2db      	uxtb	r3, r3
 8107650:	2b00      	cmp	r3, #0
 8107652:	d001      	beq.n	8107658 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8107654:	2301      	movs	r3, #1
 8107656:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8107658:	68fb      	ldr	r3, [r7, #12]
 810765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810765c:	2b00      	cmp	r3, #0
 810765e:	f000 809e 	beq.w	810779e <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8107662:	687b      	ldr	r3, [r7, #4]
 8107664:	0b9b      	lsrs	r3, r3, #14
 8107666:	f003 0301 	and.w	r3, r3, #1
 810766a:	2b00      	cmp	r3, #0
 810766c:	f000 8097 	beq.w	810779e <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8107670:	68fb      	ldr	r3, [r7, #12]
 8107672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107674:	681b      	ldr	r3, [r3, #0]
 8107676:	4a33      	ldr	r2, [pc, #204]	; (8107744 <I2C_Slave_ISR_DMA+0x270>)
 8107678:	4293      	cmp	r3, r2
 810767a:	d059      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 810767c:	68fb      	ldr	r3, [r7, #12]
 810767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107680:	681b      	ldr	r3, [r3, #0]
 8107682:	4a31      	ldr	r2, [pc, #196]	; (8107748 <I2C_Slave_ISR_DMA+0x274>)
 8107684:	4293      	cmp	r3, r2
 8107686:	d053      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 8107688:	68fb      	ldr	r3, [r7, #12]
 810768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810768c:	681b      	ldr	r3, [r3, #0]
 810768e:	4a2f      	ldr	r2, [pc, #188]	; (810774c <I2C_Slave_ISR_DMA+0x278>)
 8107690:	4293      	cmp	r3, r2
 8107692:	d04d      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 8107694:	68fb      	ldr	r3, [r7, #12]
 8107696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107698:	681b      	ldr	r3, [r3, #0]
 810769a:	4a2d      	ldr	r2, [pc, #180]	; (8107750 <I2C_Slave_ISR_DMA+0x27c>)
 810769c:	4293      	cmp	r3, r2
 810769e:	d047      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 81076a0:	68fb      	ldr	r3, [r7, #12]
 81076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076a4:	681b      	ldr	r3, [r3, #0]
 81076a6:	4a2b      	ldr	r2, [pc, #172]	; (8107754 <I2C_Slave_ISR_DMA+0x280>)
 81076a8:	4293      	cmp	r3, r2
 81076aa:	d041      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 81076ac:	68fb      	ldr	r3, [r7, #12]
 81076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076b0:	681b      	ldr	r3, [r3, #0]
 81076b2:	4a29      	ldr	r2, [pc, #164]	; (8107758 <I2C_Slave_ISR_DMA+0x284>)
 81076b4:	4293      	cmp	r3, r2
 81076b6:	d03b      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 81076b8:	68fb      	ldr	r3, [r7, #12]
 81076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076bc:	681b      	ldr	r3, [r3, #0]
 81076be:	4a27      	ldr	r2, [pc, #156]	; (810775c <I2C_Slave_ISR_DMA+0x288>)
 81076c0:	4293      	cmp	r3, r2
 81076c2:	d035      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 81076c4:	68fb      	ldr	r3, [r7, #12]
 81076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076c8:	681b      	ldr	r3, [r3, #0]
 81076ca:	4a25      	ldr	r2, [pc, #148]	; (8107760 <I2C_Slave_ISR_DMA+0x28c>)
 81076cc:	4293      	cmp	r3, r2
 81076ce:	d02f      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 81076d0:	68fb      	ldr	r3, [r7, #12]
 81076d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076d4:	681b      	ldr	r3, [r3, #0]
 81076d6:	4a23      	ldr	r2, [pc, #140]	; (8107764 <I2C_Slave_ISR_DMA+0x290>)
 81076d8:	4293      	cmp	r3, r2
 81076da:	d029      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 81076dc:	68fb      	ldr	r3, [r7, #12]
 81076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076e0:	681b      	ldr	r3, [r3, #0]
 81076e2:	4a21      	ldr	r2, [pc, #132]	; (8107768 <I2C_Slave_ISR_DMA+0x294>)
 81076e4:	4293      	cmp	r3, r2
 81076e6:	d023      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 81076e8:	68fb      	ldr	r3, [r7, #12]
 81076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076ec:	681b      	ldr	r3, [r3, #0]
 81076ee:	4a1f      	ldr	r2, [pc, #124]	; (810776c <I2C_Slave_ISR_DMA+0x298>)
 81076f0:	4293      	cmp	r3, r2
 81076f2:	d01d      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 81076f4:	68fb      	ldr	r3, [r7, #12]
 81076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076f8:	681b      	ldr	r3, [r3, #0]
 81076fa:	4a1d      	ldr	r2, [pc, #116]	; (8107770 <I2C_Slave_ISR_DMA+0x29c>)
 81076fc:	4293      	cmp	r3, r2
 81076fe:	d017      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 8107700:	68fb      	ldr	r3, [r7, #12]
 8107702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107704:	681b      	ldr	r3, [r3, #0]
 8107706:	4a1b      	ldr	r2, [pc, #108]	; (8107774 <I2C_Slave_ISR_DMA+0x2a0>)
 8107708:	4293      	cmp	r3, r2
 810770a:	d011      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 810770c:	68fb      	ldr	r3, [r7, #12]
 810770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107710:	681b      	ldr	r3, [r3, #0]
 8107712:	4a19      	ldr	r2, [pc, #100]	; (8107778 <I2C_Slave_ISR_DMA+0x2a4>)
 8107714:	4293      	cmp	r3, r2
 8107716:	d00b      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 8107718:	68fb      	ldr	r3, [r7, #12]
 810771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810771c:	681b      	ldr	r3, [r3, #0]
 810771e:	4a17      	ldr	r2, [pc, #92]	; (810777c <I2C_Slave_ISR_DMA+0x2a8>)
 8107720:	4293      	cmp	r3, r2
 8107722:	d005      	beq.n	8107730 <I2C_Slave_ISR_DMA+0x25c>
 8107724:	68fb      	ldr	r3, [r7, #12]
 8107726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107728:	681b      	ldr	r3, [r3, #0]
 810772a:	4a15      	ldr	r2, [pc, #84]	; (8107780 <I2C_Slave_ISR_DMA+0x2ac>)
 810772c:	4293      	cmp	r3, r2
 810772e:	d129      	bne.n	8107784 <I2C_Slave_ISR_DMA+0x2b0>
 8107730:	68fb      	ldr	r3, [r7, #12]
 8107732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107734:	681b      	ldr	r3, [r3, #0]
 8107736:	685b      	ldr	r3, [r3, #4]
 8107738:	2b00      	cmp	r3, #0
 810773a:	bf0c      	ite	eq
 810773c:	2301      	moveq	r3, #1
 810773e:	2300      	movne	r3, #0
 8107740:	b2db      	uxtb	r3, r3
 8107742:	e028      	b.n	8107796 <I2C_Slave_ISR_DMA+0x2c2>
 8107744:	40020010 	.word	0x40020010
 8107748:	40020028 	.word	0x40020028
 810774c:	40020040 	.word	0x40020040
 8107750:	40020058 	.word	0x40020058
 8107754:	40020070 	.word	0x40020070
 8107758:	40020088 	.word	0x40020088
 810775c:	400200a0 	.word	0x400200a0
 8107760:	400200b8 	.word	0x400200b8
 8107764:	40020410 	.word	0x40020410
 8107768:	40020428 	.word	0x40020428
 810776c:	40020440 	.word	0x40020440
 8107770:	40020458 	.word	0x40020458
 8107774:	40020470 	.word	0x40020470
 8107778:	40020488 	.word	0x40020488
 810777c:	400204a0 	.word	0x400204a0
 8107780:	400204b8 	.word	0x400204b8
 8107784:	68fb      	ldr	r3, [r7, #12]
 8107786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107788:	681b      	ldr	r3, [r3, #0]
 810778a:	685b      	ldr	r3, [r3, #4]
 810778c:	2b00      	cmp	r3, #0
 810778e:	bf0c      	ite	eq
 8107790:	2301      	moveq	r3, #1
 8107792:	2300      	movne	r3, #0
 8107794:	b2db      	uxtb	r3, r3
 8107796:	2b00      	cmp	r3, #0
 8107798:	d001      	beq.n	810779e <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
 810779a:	2301      	movs	r3, #1
 810779c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 810779e:	69fb      	ldr	r3, [r7, #28]
 81077a0:	2b01      	cmp	r3, #1
 81077a2:	d128      	bne.n	81077f6 <I2C_Slave_ISR_DMA+0x322>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81077a4:	68fb      	ldr	r3, [r7, #12]
 81077a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81077aa:	b2db      	uxtb	r3, r3
 81077ac:	2b28      	cmp	r3, #40	; 0x28
 81077ae:	d108      	bne.n	81077c2 <I2C_Slave_ISR_DMA+0x2ee>
 81077b0:	69bb      	ldr	r3, [r7, #24]
 81077b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81077b6:	d104      	bne.n	81077c2 <I2C_Slave_ISR_DMA+0x2ee>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 81077b8:	68b9      	ldr	r1, [r7, #8]
 81077ba:	68f8      	ldr	r0, [r7, #12]
 81077bc:	f000 fcf6 	bl	81081ac <I2C_ITListenCplt>
 81077c0:	e048      	b.n	8107854 <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81077c2:	68fb      	ldr	r3, [r7, #12]
 81077c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81077c8:	b2db      	uxtb	r3, r3
 81077ca:	2b29      	cmp	r3, #41	; 0x29
 81077cc:	d10e      	bne.n	81077ec <I2C_Slave_ISR_DMA+0x318>
 81077ce:	69bb      	ldr	r3, [r7, #24]
 81077d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81077d4:	d00a      	beq.n	81077ec <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077d6:	68fb      	ldr	r3, [r7, #12]
 81077d8:	681b      	ldr	r3, [r3, #0]
 81077da:	2210      	movs	r2, #16
 81077dc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 81077de:	68f8      	ldr	r0, [r7, #12]
 81077e0:	f000 fe31 	bl	8108446 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 81077e4:	68f8      	ldr	r0, [r7, #12]
 81077e6:	f000 f9c0 	bl	8107b6a <I2C_ITSlaveSeqCplt>
 81077ea:	e033      	b.n	8107854 <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077ec:	68fb      	ldr	r3, [r7, #12]
 81077ee:	681b      	ldr	r3, [r3, #0]
 81077f0:	2210      	movs	r2, #16
 81077f2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 81077f4:	e034      	b.n	8107860 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077f6:	68fb      	ldr	r3, [r7, #12]
 81077f8:	681b      	ldr	r3, [r3, #0]
 81077fa:	2210      	movs	r2, #16
 81077fc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81077fe:	68fb      	ldr	r3, [r7, #12]
 8107800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107802:	f043 0204 	orr.w	r2, r3, #4
 8107806:	68fb      	ldr	r3, [r7, #12]
 8107808:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 810780a:	68fb      	ldr	r3, [r7, #12]
 810780c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107810:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8107812:	69bb      	ldr	r3, [r7, #24]
 8107814:	2b00      	cmp	r3, #0
 8107816:	d003      	beq.n	8107820 <I2C_Slave_ISR_DMA+0x34c>
 8107818:	69bb      	ldr	r3, [r7, #24]
 810781a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810781e:	d11f      	bne.n	8107860 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107820:	7dfb      	ldrb	r3, [r7, #23]
 8107822:	2b21      	cmp	r3, #33	; 0x21
 8107824:	d002      	beq.n	810782c <I2C_Slave_ISR_DMA+0x358>
 8107826:	7dfb      	ldrb	r3, [r7, #23]
 8107828:	2b29      	cmp	r3, #41	; 0x29
 810782a:	d103      	bne.n	8107834 <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 810782c:	68fb      	ldr	r3, [r7, #12]
 810782e:	2221      	movs	r2, #33	; 0x21
 8107830:	631a      	str	r2, [r3, #48]	; 0x30
 8107832:	e008      	b.n	8107846 <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107834:	7dfb      	ldrb	r3, [r7, #23]
 8107836:	2b22      	cmp	r3, #34	; 0x22
 8107838:	d002      	beq.n	8107840 <I2C_Slave_ISR_DMA+0x36c>
 810783a:	7dfb      	ldrb	r3, [r7, #23]
 810783c:	2b2a      	cmp	r3, #42	; 0x2a
 810783e:	d102      	bne.n	8107846 <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107840:	68fb      	ldr	r3, [r7, #12]
 8107842:	2222      	movs	r2, #34	; 0x22
 8107844:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8107846:	68fb      	ldr	r3, [r7, #12]
 8107848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810784a:	4619      	mov	r1, r3
 810784c:	68f8      	ldr	r0, [r7, #12]
 810784e:	f000 fd03 	bl	8108258 <I2C_ITError>
      if (treatdmanack == 1U)
 8107852:	e005      	b.n	8107860 <I2C_Slave_ISR_DMA+0x38c>
 8107854:	e004      	b.n	8107860 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107856:	68fb      	ldr	r3, [r7, #12]
 8107858:	681b      	ldr	r3, [r3, #0]
 810785a:	2210      	movs	r2, #16
 810785c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 810785e:	e011      	b.n	8107884 <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
 8107860:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8107862:	e00f      	b.n	8107884 <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8107864:	68bb      	ldr	r3, [r7, #8]
 8107866:	08db      	lsrs	r3, r3, #3
 8107868:	f003 0301 	and.w	r3, r3, #1
 810786c:	2b00      	cmp	r3, #0
 810786e:	d009      	beq.n	8107884 <I2C_Slave_ISR_DMA+0x3b0>
 8107870:	687b      	ldr	r3, [r7, #4]
 8107872:	08db      	lsrs	r3, r3, #3
 8107874:	f003 0301 	and.w	r3, r3, #1
 8107878:	2b00      	cmp	r3, #0
 810787a:	d003      	beq.n	8107884 <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 810787c:	68b9      	ldr	r1, [r7, #8]
 810787e:	68f8      	ldr	r0, [r7, #12]
 8107880:	f000 f8b2 	bl	81079e8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107884:	68fb      	ldr	r3, [r7, #12]
 8107886:	2200      	movs	r2, #0
 8107888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 810788c:	2300      	movs	r3, #0
}
 810788e:	4618      	mov	r0, r3
 8107890:	3720      	adds	r7, #32
 8107892:	46bd      	mov	sp, r7
 8107894:	bd80      	pop	{r7, pc}
 8107896:	bf00      	nop

08107898 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107898:	b580      	push	{r7, lr}
 810789a:	b086      	sub	sp, #24
 810789c:	af02      	add	r7, sp, #8
 810789e:	60f8      	str	r0, [r7, #12]
 81078a0:	4608      	mov	r0, r1
 81078a2:	4611      	mov	r1, r2
 81078a4:	461a      	mov	r2, r3
 81078a6:	4603      	mov	r3, r0
 81078a8:	817b      	strh	r3, [r7, #10]
 81078aa:	460b      	mov	r3, r1
 81078ac:	813b      	strh	r3, [r7, #8]
 81078ae:	4613      	mov	r3, r2
 81078b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81078b2:	88fb      	ldrh	r3, [r7, #6]
 81078b4:	b2da      	uxtb	r2, r3
 81078b6:	8979      	ldrh	r1, [r7, #10]
 81078b8:	4b20      	ldr	r3, [pc, #128]	; (810793c <I2C_RequestMemoryWrite+0xa4>)
 81078ba:	9300      	str	r3, [sp, #0]
 81078bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81078c0:	68f8      	ldr	r0, [r7, #12]
 81078c2:	f001 f8f5 	bl	8108ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81078c6:	69fa      	ldr	r2, [r7, #28]
 81078c8:	69b9      	ldr	r1, [r7, #24]
 81078ca:	68f8      	ldr	r0, [r7, #12]
 81078cc:	f001 f80e 	bl	81088ec <I2C_WaitOnTXISFlagUntilTimeout>
 81078d0:	4603      	mov	r3, r0
 81078d2:	2b00      	cmp	r3, #0
 81078d4:	d001      	beq.n	81078da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81078d6:	2301      	movs	r3, #1
 81078d8:	e02c      	b.n	8107934 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81078da:	88fb      	ldrh	r3, [r7, #6]
 81078dc:	2b01      	cmp	r3, #1
 81078de:	d105      	bne.n	81078ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81078e0:	893b      	ldrh	r3, [r7, #8]
 81078e2:	b2da      	uxtb	r2, r3
 81078e4:	68fb      	ldr	r3, [r7, #12]
 81078e6:	681b      	ldr	r3, [r3, #0]
 81078e8:	629a      	str	r2, [r3, #40]	; 0x28
 81078ea:	e015      	b.n	8107918 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81078ec:	893b      	ldrh	r3, [r7, #8]
 81078ee:	0a1b      	lsrs	r3, r3, #8
 81078f0:	b29b      	uxth	r3, r3
 81078f2:	b2da      	uxtb	r2, r3
 81078f4:	68fb      	ldr	r3, [r7, #12]
 81078f6:	681b      	ldr	r3, [r3, #0]
 81078f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81078fa:	69fa      	ldr	r2, [r7, #28]
 81078fc:	69b9      	ldr	r1, [r7, #24]
 81078fe:	68f8      	ldr	r0, [r7, #12]
 8107900:	f000 fff4 	bl	81088ec <I2C_WaitOnTXISFlagUntilTimeout>
 8107904:	4603      	mov	r3, r0
 8107906:	2b00      	cmp	r3, #0
 8107908:	d001      	beq.n	810790e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810790a:	2301      	movs	r3, #1
 810790c:	e012      	b.n	8107934 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810790e:	893b      	ldrh	r3, [r7, #8]
 8107910:	b2da      	uxtb	r2, r3
 8107912:	68fb      	ldr	r3, [r7, #12]
 8107914:	681b      	ldr	r3, [r3, #0]
 8107916:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8107918:	69fb      	ldr	r3, [r7, #28]
 810791a:	9300      	str	r3, [sp, #0]
 810791c:	69bb      	ldr	r3, [r7, #24]
 810791e:	2200      	movs	r2, #0
 8107920:	2180      	movs	r1, #128	; 0x80
 8107922:	68f8      	ldr	r0, [r7, #12]
 8107924:	f000 ffa2 	bl	810886c <I2C_WaitOnFlagUntilTimeout>
 8107928:	4603      	mov	r3, r0
 810792a:	2b00      	cmp	r3, #0
 810792c:	d001      	beq.n	8107932 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810792e:	2301      	movs	r3, #1
 8107930:	e000      	b.n	8107934 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8107932:	2300      	movs	r3, #0
}
 8107934:	4618      	mov	r0, r3
 8107936:	3710      	adds	r7, #16
 8107938:	46bd      	mov	sp, r7
 810793a:	bd80      	pop	{r7, pc}
 810793c:	80002000 	.word	0x80002000

08107940 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107940:	b580      	push	{r7, lr}
 8107942:	b086      	sub	sp, #24
 8107944:	af02      	add	r7, sp, #8
 8107946:	60f8      	str	r0, [r7, #12]
 8107948:	4608      	mov	r0, r1
 810794a:	4611      	mov	r1, r2
 810794c:	461a      	mov	r2, r3
 810794e:	4603      	mov	r3, r0
 8107950:	817b      	strh	r3, [r7, #10]
 8107952:	460b      	mov	r3, r1
 8107954:	813b      	strh	r3, [r7, #8]
 8107956:	4613      	mov	r3, r2
 8107958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810795a:	88fb      	ldrh	r3, [r7, #6]
 810795c:	b2da      	uxtb	r2, r3
 810795e:	8979      	ldrh	r1, [r7, #10]
 8107960:	4b20      	ldr	r3, [pc, #128]	; (81079e4 <I2C_RequestMemoryRead+0xa4>)
 8107962:	9300      	str	r3, [sp, #0]
 8107964:	2300      	movs	r3, #0
 8107966:	68f8      	ldr	r0, [r7, #12]
 8107968:	f001 f8a2 	bl	8108ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810796c:	69fa      	ldr	r2, [r7, #28]
 810796e:	69b9      	ldr	r1, [r7, #24]
 8107970:	68f8      	ldr	r0, [r7, #12]
 8107972:	f000 ffbb 	bl	81088ec <I2C_WaitOnTXISFlagUntilTimeout>
 8107976:	4603      	mov	r3, r0
 8107978:	2b00      	cmp	r3, #0
 810797a:	d001      	beq.n	8107980 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810797c:	2301      	movs	r3, #1
 810797e:	e02c      	b.n	81079da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107980:	88fb      	ldrh	r3, [r7, #6]
 8107982:	2b01      	cmp	r3, #1
 8107984:	d105      	bne.n	8107992 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107986:	893b      	ldrh	r3, [r7, #8]
 8107988:	b2da      	uxtb	r2, r3
 810798a:	68fb      	ldr	r3, [r7, #12]
 810798c:	681b      	ldr	r3, [r3, #0]
 810798e:	629a      	str	r2, [r3, #40]	; 0x28
 8107990:	e015      	b.n	81079be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107992:	893b      	ldrh	r3, [r7, #8]
 8107994:	0a1b      	lsrs	r3, r3, #8
 8107996:	b29b      	uxth	r3, r3
 8107998:	b2da      	uxtb	r2, r3
 810799a:	68fb      	ldr	r3, [r7, #12]
 810799c:	681b      	ldr	r3, [r3, #0]
 810799e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81079a0:	69fa      	ldr	r2, [r7, #28]
 81079a2:	69b9      	ldr	r1, [r7, #24]
 81079a4:	68f8      	ldr	r0, [r7, #12]
 81079a6:	f000 ffa1 	bl	81088ec <I2C_WaitOnTXISFlagUntilTimeout>
 81079aa:	4603      	mov	r3, r0
 81079ac:	2b00      	cmp	r3, #0
 81079ae:	d001      	beq.n	81079b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81079b0:	2301      	movs	r3, #1
 81079b2:	e012      	b.n	81079da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81079b4:	893b      	ldrh	r3, [r7, #8]
 81079b6:	b2da      	uxtb	r2, r3
 81079b8:	68fb      	ldr	r3, [r7, #12]
 81079ba:	681b      	ldr	r3, [r3, #0]
 81079bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81079be:	69fb      	ldr	r3, [r7, #28]
 81079c0:	9300      	str	r3, [sp, #0]
 81079c2:	69bb      	ldr	r3, [r7, #24]
 81079c4:	2200      	movs	r2, #0
 81079c6:	2140      	movs	r1, #64	; 0x40
 81079c8:	68f8      	ldr	r0, [r7, #12]
 81079ca:	f000 ff4f 	bl	810886c <I2C_WaitOnFlagUntilTimeout>
 81079ce:	4603      	mov	r3, r0
 81079d0:	2b00      	cmp	r3, #0
 81079d2:	d001      	beq.n	81079d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81079d4:	2301      	movs	r3, #1
 81079d6:	e000      	b.n	81079da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81079d8:	2300      	movs	r3, #0
}
 81079da:	4618      	mov	r0, r3
 81079dc:	3710      	adds	r7, #16
 81079de:	46bd      	mov	sp, r7
 81079e0:	bd80      	pop	{r7, pc}
 81079e2:	bf00      	nop
 81079e4:	80002000 	.word	0x80002000

081079e8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81079e8:	b580      	push	{r7, lr}
 81079ea:	b084      	sub	sp, #16
 81079ec:	af00      	add	r7, sp, #0
 81079ee:	6078      	str	r0, [r7, #4]
 81079f0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81079f8:	b2db      	uxtb	r3, r3
 81079fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 81079fe:	2b28      	cmp	r3, #40	; 0x28
 8107a00:	d16a      	bne.n	8107ad8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8107a02:	687b      	ldr	r3, [r7, #4]
 8107a04:	681b      	ldr	r3, [r3, #0]
 8107a06:	699b      	ldr	r3, [r3, #24]
 8107a08:	0c1b      	lsrs	r3, r3, #16
 8107a0a:	b2db      	uxtb	r3, r3
 8107a0c:	f003 0301 	and.w	r3, r3, #1
 8107a10:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	681b      	ldr	r3, [r3, #0]
 8107a16:	699b      	ldr	r3, [r3, #24]
 8107a18:	0c1b      	lsrs	r3, r3, #16
 8107a1a:	b29b      	uxth	r3, r3
 8107a1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107a20:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8107a22:	687b      	ldr	r3, [r7, #4]
 8107a24:	681b      	ldr	r3, [r3, #0]
 8107a26:	689b      	ldr	r3, [r3, #8]
 8107a28:	b29b      	uxth	r3, r3
 8107a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8107a2e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	681b      	ldr	r3, [r3, #0]
 8107a34:	68db      	ldr	r3, [r3, #12]
 8107a36:	b29b      	uxth	r3, r3
 8107a38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107a3c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107a3e:	687b      	ldr	r3, [r7, #4]
 8107a40:	68db      	ldr	r3, [r3, #12]
 8107a42:	2b02      	cmp	r3, #2
 8107a44:	d138      	bne.n	8107ab8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8107a46:	897b      	ldrh	r3, [r7, #10]
 8107a48:	09db      	lsrs	r3, r3, #7
 8107a4a:	b29a      	uxth	r2, r3
 8107a4c:	89bb      	ldrh	r3, [r7, #12]
 8107a4e:	4053      	eors	r3, r2
 8107a50:	b29b      	uxth	r3, r3
 8107a52:	f003 0306 	and.w	r3, r3, #6
 8107a56:	2b00      	cmp	r3, #0
 8107a58:	d11c      	bne.n	8107a94 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8107a5a:	897b      	ldrh	r3, [r7, #10]
 8107a5c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8107a5e:	687b      	ldr	r3, [r7, #4]
 8107a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107a62:	1c5a      	adds	r2, r3, #1
 8107a64:	687b      	ldr	r3, [r7, #4]
 8107a66:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107a6c:	2b02      	cmp	r3, #2
 8107a6e:	d13b      	bne.n	8107ae8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107a70:	687b      	ldr	r3, [r7, #4]
 8107a72:	2200      	movs	r2, #0
 8107a74:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107a76:	687b      	ldr	r3, [r7, #4]
 8107a78:	681b      	ldr	r3, [r3, #0]
 8107a7a:	2208      	movs	r2, #8
 8107a7c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107a7e:	687b      	ldr	r3, [r7, #4]
 8107a80:	2200      	movs	r2, #0
 8107a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107a86:	89ba      	ldrh	r2, [r7, #12]
 8107a88:	7bfb      	ldrb	r3, [r7, #15]
 8107a8a:	4619      	mov	r1, r3
 8107a8c:	6878      	ldr	r0, [r7, #4]
 8107a8e:	f7ff fafe 	bl	810708e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107a92:	e029      	b.n	8107ae8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107a94:	893b      	ldrh	r3, [r7, #8]
 8107a96:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107a9c:	6878      	ldr	r0, [r7, #4]
 8107a9e:	f001 f899 	bl	8108bd4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107aa2:	687b      	ldr	r3, [r7, #4]
 8107aa4:	2200      	movs	r2, #0
 8107aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107aaa:	89ba      	ldrh	r2, [r7, #12]
 8107aac:	7bfb      	ldrb	r3, [r7, #15]
 8107aae:	4619      	mov	r1, r3
 8107ab0:	6878      	ldr	r0, [r7, #4]
 8107ab2:	f7ff faec 	bl	810708e <HAL_I2C_AddrCallback>
}
 8107ab6:	e017      	b.n	8107ae8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107abc:	6878      	ldr	r0, [r7, #4]
 8107abe:	f001 f889 	bl	8108bd4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107ac2:	687b      	ldr	r3, [r7, #4]
 8107ac4:	2200      	movs	r2, #0
 8107ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107aca:	89ba      	ldrh	r2, [r7, #12]
 8107acc:	7bfb      	ldrb	r3, [r7, #15]
 8107ace:	4619      	mov	r1, r3
 8107ad0:	6878      	ldr	r0, [r7, #4]
 8107ad2:	f7ff fadc 	bl	810708e <HAL_I2C_AddrCallback>
}
 8107ad6:	e007      	b.n	8107ae8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	681b      	ldr	r3, [r3, #0]
 8107adc:	2208      	movs	r2, #8
 8107ade:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	2200      	movs	r2, #0
 8107ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8107ae8:	bf00      	nop
 8107aea:	3710      	adds	r7, #16
 8107aec:	46bd      	mov	sp, r7
 8107aee:	bd80      	pop	{r7, pc}

08107af0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107af0:	b580      	push	{r7, lr}
 8107af2:	b082      	sub	sp, #8
 8107af4:	af00      	add	r7, sp, #0
 8107af6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	2200      	movs	r2, #0
 8107afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107b06:	b2db      	uxtb	r3, r3
 8107b08:	2b21      	cmp	r3, #33	; 0x21
 8107b0a:	d115      	bne.n	8107b38 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	2220      	movs	r2, #32
 8107b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8107b14:	687b      	ldr	r3, [r7, #4]
 8107b16:	2211      	movs	r2, #17
 8107b18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8107b1a:	687b      	ldr	r3, [r7, #4]
 8107b1c:	2200      	movs	r2, #0
 8107b1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107b20:	2101      	movs	r1, #1
 8107b22:	6878      	ldr	r0, [r7, #4]
 8107b24:	f001 f856 	bl	8108bd4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107b28:	687b      	ldr	r3, [r7, #4]
 8107b2a:	2200      	movs	r2, #0
 8107b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8107b30:	6878      	ldr	r0, [r7, #4]
 8107b32:	f7ff fa84 	bl	810703e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107b36:	e014      	b.n	8107b62 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8107b38:	687b      	ldr	r3, [r7, #4]
 8107b3a:	2220      	movs	r2, #32
 8107b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8107b40:	687b      	ldr	r3, [r7, #4]
 8107b42:	2212      	movs	r2, #18
 8107b44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8107b46:	687b      	ldr	r3, [r7, #4]
 8107b48:	2200      	movs	r2, #0
 8107b4a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107b4c:	2102      	movs	r1, #2
 8107b4e:	6878      	ldr	r0, [r7, #4]
 8107b50:	f001 f840 	bl	8108bd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107b54:	687b      	ldr	r3, [r7, #4]
 8107b56:	2200      	movs	r2, #0
 8107b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8107b5c:	6878      	ldr	r0, [r7, #4]
 8107b5e:	f7ff fa78 	bl	8107052 <HAL_I2C_MasterRxCpltCallback>
}
 8107b62:	bf00      	nop
 8107b64:	3708      	adds	r7, #8
 8107b66:	46bd      	mov	sp, r7
 8107b68:	bd80      	pop	{r7, pc}

08107b6a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107b6a:	b580      	push	{r7, lr}
 8107b6c:	b084      	sub	sp, #16
 8107b6e:	af00      	add	r7, sp, #0
 8107b70:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107b72:	687b      	ldr	r3, [r7, #4]
 8107b74:	681b      	ldr	r3, [r3, #0]
 8107b76:	681b      	ldr	r3, [r3, #0]
 8107b78:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	2200      	movs	r2, #0
 8107b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107b82:	68fb      	ldr	r3, [r7, #12]
 8107b84:	0b9b      	lsrs	r3, r3, #14
 8107b86:	f003 0301 	and.w	r3, r3, #1
 8107b8a:	2b00      	cmp	r3, #0
 8107b8c:	d008      	beq.n	8107ba0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	681a      	ldr	r2, [r3, #0]
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	681b      	ldr	r3, [r3, #0]
 8107b98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107b9c:	601a      	str	r2, [r3, #0]
 8107b9e:	e00d      	b.n	8107bbc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107ba0:	68fb      	ldr	r3, [r7, #12]
 8107ba2:	0bdb      	lsrs	r3, r3, #15
 8107ba4:	f003 0301 	and.w	r3, r3, #1
 8107ba8:	2b00      	cmp	r3, #0
 8107baa:	d007      	beq.n	8107bbc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	681b      	ldr	r3, [r3, #0]
 8107bb0:	681a      	ldr	r2, [r3, #0]
 8107bb2:	687b      	ldr	r3, [r7, #4]
 8107bb4:	681b      	ldr	r3, [r3, #0]
 8107bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107bba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107bc2:	b2db      	uxtb	r3, r3
 8107bc4:	2b29      	cmp	r3, #41	; 0x29
 8107bc6:	d112      	bne.n	8107bee <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107bc8:	687b      	ldr	r3, [r7, #4]
 8107bca:	2228      	movs	r2, #40	; 0x28
 8107bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107bd0:	687b      	ldr	r3, [r7, #4]
 8107bd2:	2221      	movs	r2, #33	; 0x21
 8107bd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107bd6:	2101      	movs	r1, #1
 8107bd8:	6878      	ldr	r0, [r7, #4]
 8107bda:	f000 fffb 	bl	8108bd4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	2200      	movs	r2, #0
 8107be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107be6:	6878      	ldr	r0, [r7, #4]
 8107be8:	f7ff fa3d 	bl	8107066 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107bec:	e017      	b.n	8107c1e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107bf4:	b2db      	uxtb	r3, r3
 8107bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8107bf8:	d111      	bne.n	8107c1e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107bfa:	687b      	ldr	r3, [r7, #4]
 8107bfc:	2228      	movs	r2, #40	; 0x28
 8107bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107c02:	687b      	ldr	r3, [r7, #4]
 8107c04:	2222      	movs	r2, #34	; 0x22
 8107c06:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107c08:	2102      	movs	r1, #2
 8107c0a:	6878      	ldr	r0, [r7, #4]
 8107c0c:	f000 ffe2 	bl	8108bd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	2200      	movs	r2, #0
 8107c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107c18:	6878      	ldr	r0, [r7, #4]
 8107c1a:	f7ff fa2e 	bl	810707a <HAL_I2C_SlaveRxCpltCallback>
}
 8107c1e:	bf00      	nop
 8107c20:	3710      	adds	r7, #16
 8107c22:	46bd      	mov	sp, r7
 8107c24:	bd80      	pop	{r7, pc}
	...

08107c28 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107c28:	b580      	push	{r7, lr}
 8107c2a:	b086      	sub	sp, #24
 8107c2c:	af00      	add	r7, sp, #0
 8107c2e:	6078      	str	r0, [r7, #4]
 8107c30:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8107c32:	683b      	ldr	r3, [r7, #0]
 8107c34:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107c36:	687b      	ldr	r3, [r7, #4]
 8107c38:	681b      	ldr	r3, [r3, #0]
 8107c3a:	2220      	movs	r2, #32
 8107c3c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107c44:	b2db      	uxtb	r3, r3
 8107c46:	2b21      	cmp	r3, #33	; 0x21
 8107c48:	d107      	bne.n	8107c5a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107c4a:	2101      	movs	r1, #1
 8107c4c:	6878      	ldr	r0, [r7, #4]
 8107c4e:	f000 ffc1 	bl	8108bd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8107c52:	687b      	ldr	r3, [r7, #4]
 8107c54:	2211      	movs	r2, #17
 8107c56:	631a      	str	r2, [r3, #48]	; 0x30
 8107c58:	e00c      	b.n	8107c74 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107c5a:	687b      	ldr	r3, [r7, #4]
 8107c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107c60:	b2db      	uxtb	r3, r3
 8107c62:	2b22      	cmp	r3, #34	; 0x22
 8107c64:	d106      	bne.n	8107c74 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107c66:	2102      	movs	r1, #2
 8107c68:	6878      	ldr	r0, [r7, #4]
 8107c6a:	f000 ffb3 	bl	8108bd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8107c6e:	687b      	ldr	r3, [r7, #4]
 8107c70:	2212      	movs	r2, #18
 8107c72:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107c74:	687b      	ldr	r3, [r7, #4]
 8107c76:	681b      	ldr	r3, [r3, #0]
 8107c78:	6859      	ldr	r1, [r3, #4]
 8107c7a:	687b      	ldr	r3, [r7, #4]
 8107c7c:	681a      	ldr	r2, [r3, #0]
 8107c7e:	4b4d      	ldr	r3, [pc, #308]	; (8107db4 <I2C_ITMasterCplt+0x18c>)
 8107c80:	400b      	ands	r3, r1
 8107c82:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8107c84:	687b      	ldr	r3, [r7, #4]
 8107c86:	2200      	movs	r2, #0
 8107c88:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8107c8a:	687b      	ldr	r3, [r7, #4]
 8107c8c:	4a4a      	ldr	r2, [pc, #296]	; (8107db8 <I2C_ITMasterCplt+0x190>)
 8107c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8107c90:	697b      	ldr	r3, [r7, #20]
 8107c92:	091b      	lsrs	r3, r3, #4
 8107c94:	f003 0301 	and.w	r3, r3, #1
 8107c98:	2b00      	cmp	r3, #0
 8107c9a:	d009      	beq.n	8107cb0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	681b      	ldr	r3, [r3, #0]
 8107ca0:	2210      	movs	r2, #16
 8107ca2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107ca8:	f043 0204 	orr.w	r2, r3, #4
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107cb6:	b2db      	uxtb	r3, r3
 8107cb8:	2b60      	cmp	r3, #96	; 0x60
 8107cba:	d10b      	bne.n	8107cd4 <I2C_ITMasterCplt+0xac>
 8107cbc:	697b      	ldr	r3, [r7, #20]
 8107cbe:	089b      	lsrs	r3, r3, #2
 8107cc0:	f003 0301 	and.w	r3, r3, #1
 8107cc4:	2b00      	cmp	r3, #0
 8107cc6:	d005      	beq.n	8107cd4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8107cc8:	687b      	ldr	r3, [r7, #4]
 8107cca:	681b      	ldr	r3, [r3, #0]
 8107ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107cce:	b2db      	uxtb	r3, r3
 8107cd0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8107cd2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107cd4:	6878      	ldr	r0, [r7, #4]
 8107cd6:	f000 fbb6 	bl	8108446 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107cde:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8107ce0:	687b      	ldr	r3, [r7, #4]
 8107ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107ce6:	b2db      	uxtb	r3, r3
 8107ce8:	2b60      	cmp	r3, #96	; 0x60
 8107cea:	d002      	beq.n	8107cf2 <I2C_ITMasterCplt+0xca>
 8107cec:	693b      	ldr	r3, [r7, #16]
 8107cee:	2b00      	cmp	r3, #0
 8107cf0:	d006      	beq.n	8107d00 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107cf2:	687b      	ldr	r3, [r7, #4]
 8107cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107cf6:	4619      	mov	r1, r3
 8107cf8:	6878      	ldr	r0, [r7, #4]
 8107cfa:	f000 faad 	bl	8108258 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107cfe:	e054      	b.n	8107daa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107d06:	b2db      	uxtb	r3, r3
 8107d08:	2b21      	cmp	r3, #33	; 0x21
 8107d0a:	d124      	bne.n	8107d56 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8107d0c:	687b      	ldr	r3, [r7, #4]
 8107d0e:	2220      	movs	r2, #32
 8107d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107d14:	687b      	ldr	r3, [r7, #4]
 8107d16:	2200      	movs	r2, #0
 8107d18:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8107d1a:	687b      	ldr	r3, [r7, #4]
 8107d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8107d20:	b2db      	uxtb	r3, r3
 8107d22:	2b40      	cmp	r3, #64	; 0x40
 8107d24:	d10b      	bne.n	8107d3e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	2200      	movs	r2, #0
 8107d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	2200      	movs	r2, #0
 8107d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8107d36:	6878      	ldr	r0, [r7, #4]
 8107d38:	f7fa fb8a 	bl	8102450 <HAL_I2C_MemTxCpltCallback>
}
 8107d3c:	e035      	b.n	8107daa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d3e:	687b      	ldr	r3, [r7, #4]
 8107d40:	2200      	movs	r2, #0
 8107d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8107d46:	687b      	ldr	r3, [r7, #4]
 8107d48:	2200      	movs	r2, #0
 8107d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8107d4e:	6878      	ldr	r0, [r7, #4]
 8107d50:	f7ff f975 	bl	810703e <HAL_I2C_MasterTxCpltCallback>
}
 8107d54:	e029      	b.n	8107daa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107d56:	687b      	ldr	r3, [r7, #4]
 8107d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107d5c:	b2db      	uxtb	r3, r3
 8107d5e:	2b22      	cmp	r3, #34	; 0x22
 8107d60:	d123      	bne.n	8107daa <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8107d62:	687b      	ldr	r3, [r7, #4]
 8107d64:	2220      	movs	r2, #32
 8107d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	2200      	movs	r2, #0
 8107d6e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8107d70:	687b      	ldr	r3, [r7, #4]
 8107d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8107d76:	b2db      	uxtb	r3, r3
 8107d78:	2b40      	cmp	r3, #64	; 0x40
 8107d7a:	d10b      	bne.n	8107d94 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d7c:	687b      	ldr	r3, [r7, #4]
 8107d7e:	2200      	movs	r2, #0
 8107d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	2200      	movs	r2, #0
 8107d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8107d8c:	6878      	ldr	r0, [r7, #4]
 8107d8e:	f7fa fb5d 	bl	810244c <HAL_I2C_MemRxCpltCallback>
}
 8107d92:	e00a      	b.n	8107daa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	2200      	movs	r2, #0
 8107d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	2200      	movs	r2, #0
 8107da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8107da4:	6878      	ldr	r0, [r7, #4]
 8107da6:	f7ff f954 	bl	8107052 <HAL_I2C_MasterRxCpltCallback>
}
 8107daa:	bf00      	nop
 8107dac:	3718      	adds	r7, #24
 8107dae:	46bd      	mov	sp, r7
 8107db0:	bd80      	pop	{r7, pc}
 8107db2:	bf00      	nop
 8107db4:	fe00e800 	.word	0xfe00e800
 8107db8:	ffff0000 	.word	0xffff0000

08107dbc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107dbc:	b580      	push	{r7, lr}
 8107dbe:	b086      	sub	sp, #24
 8107dc0:	af00      	add	r7, sp, #0
 8107dc2:	6078      	str	r0, [r7, #4]
 8107dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107dc6:	687b      	ldr	r3, [r7, #4]
 8107dc8:	681b      	ldr	r3, [r3, #0]
 8107dca:	681b      	ldr	r3, [r3, #0]
 8107dcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8107dce:	683b      	ldr	r3, [r7, #0]
 8107dd0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107dd2:	687b      	ldr	r3, [r7, #4]
 8107dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107dd8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107dda:	687b      	ldr	r3, [r7, #4]
 8107ddc:	681b      	ldr	r3, [r3, #0]
 8107dde:	2220      	movs	r2, #32
 8107de0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107de2:	7bfb      	ldrb	r3, [r7, #15]
 8107de4:	2b21      	cmp	r3, #33	; 0x21
 8107de6:	d002      	beq.n	8107dee <I2C_ITSlaveCplt+0x32>
 8107de8:	7bfb      	ldrb	r3, [r7, #15]
 8107dea:	2b29      	cmp	r3, #41	; 0x29
 8107dec:	d108      	bne.n	8107e00 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8107dee:	f248 0101 	movw	r1, #32769	; 0x8001
 8107df2:	6878      	ldr	r0, [r7, #4]
 8107df4:	f000 feee 	bl	8108bd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	2221      	movs	r2, #33	; 0x21
 8107dfc:	631a      	str	r2, [r3, #48]	; 0x30
 8107dfe:	e00d      	b.n	8107e1c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107e00:	7bfb      	ldrb	r3, [r7, #15]
 8107e02:	2b22      	cmp	r3, #34	; 0x22
 8107e04:	d002      	beq.n	8107e0c <I2C_ITSlaveCplt+0x50>
 8107e06:	7bfb      	ldrb	r3, [r7, #15]
 8107e08:	2b2a      	cmp	r3, #42	; 0x2a
 8107e0a:	d107      	bne.n	8107e1c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107e0c:	f248 0102 	movw	r1, #32770	; 0x8002
 8107e10:	6878      	ldr	r0, [r7, #4]
 8107e12:	f000 fedf 	bl	8108bd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	2222      	movs	r2, #34	; 0x22
 8107e1a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	681b      	ldr	r3, [r3, #0]
 8107e20:	685a      	ldr	r2, [r3, #4]
 8107e22:	687b      	ldr	r3, [r7, #4]
 8107e24:	681b      	ldr	r3, [r3, #0]
 8107e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107e2a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107e2c:	687b      	ldr	r3, [r7, #4]
 8107e2e:	681b      	ldr	r3, [r3, #0]
 8107e30:	6859      	ldr	r1, [r3, #4]
 8107e32:	687b      	ldr	r3, [r7, #4]
 8107e34:	681a      	ldr	r2, [r3, #0]
 8107e36:	4b80      	ldr	r3, [pc, #512]	; (8108038 <I2C_ITSlaveCplt+0x27c>)
 8107e38:	400b      	ands	r3, r1
 8107e3a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107e3c:	6878      	ldr	r0, [r7, #4]
 8107e3e:	f000 fb02 	bl	8108446 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107e42:	693b      	ldr	r3, [r7, #16]
 8107e44:	0b9b      	lsrs	r3, r3, #14
 8107e46:	f003 0301 	and.w	r3, r3, #1
 8107e4a:	2b00      	cmp	r3, #0
 8107e4c:	d07a      	beq.n	8107f44 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107e4e:	687b      	ldr	r3, [r7, #4]
 8107e50:	681b      	ldr	r3, [r3, #0]
 8107e52:	681a      	ldr	r2, [r3, #0]
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	681b      	ldr	r3, [r3, #0]
 8107e58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107e5c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8107e5e:	687b      	ldr	r3, [r7, #4]
 8107e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e62:	2b00      	cmp	r3, #0
 8107e64:	f000 8111 	beq.w	810808a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8107e68:	687b      	ldr	r3, [r7, #4]
 8107e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e6c:	681b      	ldr	r3, [r3, #0]
 8107e6e:	4a73      	ldr	r2, [pc, #460]	; (810803c <I2C_ITSlaveCplt+0x280>)
 8107e70:	4293      	cmp	r3, r2
 8107e72:	d059      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107e74:	687b      	ldr	r3, [r7, #4]
 8107e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e78:	681b      	ldr	r3, [r3, #0]
 8107e7a:	4a71      	ldr	r2, [pc, #452]	; (8108040 <I2C_ITSlaveCplt+0x284>)
 8107e7c:	4293      	cmp	r3, r2
 8107e7e:	d053      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e84:	681b      	ldr	r3, [r3, #0]
 8107e86:	4a6f      	ldr	r2, [pc, #444]	; (8108044 <I2C_ITSlaveCplt+0x288>)
 8107e88:	4293      	cmp	r3, r2
 8107e8a:	d04d      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107e8c:	687b      	ldr	r3, [r7, #4]
 8107e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e90:	681b      	ldr	r3, [r3, #0]
 8107e92:	4a6d      	ldr	r2, [pc, #436]	; (8108048 <I2C_ITSlaveCplt+0x28c>)
 8107e94:	4293      	cmp	r3, r2
 8107e96:	d047      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e9c:	681b      	ldr	r3, [r3, #0]
 8107e9e:	4a6b      	ldr	r2, [pc, #428]	; (810804c <I2C_ITSlaveCplt+0x290>)
 8107ea0:	4293      	cmp	r3, r2
 8107ea2:	d041      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107ea4:	687b      	ldr	r3, [r7, #4]
 8107ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ea8:	681b      	ldr	r3, [r3, #0]
 8107eaa:	4a69      	ldr	r2, [pc, #420]	; (8108050 <I2C_ITSlaveCplt+0x294>)
 8107eac:	4293      	cmp	r3, r2
 8107eae:	d03b      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107eb0:	687b      	ldr	r3, [r7, #4]
 8107eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107eb4:	681b      	ldr	r3, [r3, #0]
 8107eb6:	4a67      	ldr	r2, [pc, #412]	; (8108054 <I2C_ITSlaveCplt+0x298>)
 8107eb8:	4293      	cmp	r3, r2
 8107eba:	d035      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ec0:	681b      	ldr	r3, [r3, #0]
 8107ec2:	4a65      	ldr	r2, [pc, #404]	; (8108058 <I2C_ITSlaveCplt+0x29c>)
 8107ec4:	4293      	cmp	r3, r2
 8107ec6:	d02f      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107ec8:	687b      	ldr	r3, [r7, #4]
 8107eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ecc:	681b      	ldr	r3, [r3, #0]
 8107ece:	4a63      	ldr	r2, [pc, #396]	; (810805c <I2C_ITSlaveCplt+0x2a0>)
 8107ed0:	4293      	cmp	r3, r2
 8107ed2:	d029      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ed8:	681b      	ldr	r3, [r3, #0]
 8107eda:	4a61      	ldr	r2, [pc, #388]	; (8108060 <I2C_ITSlaveCplt+0x2a4>)
 8107edc:	4293      	cmp	r3, r2
 8107ede:	d023      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107ee0:	687b      	ldr	r3, [r7, #4]
 8107ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ee4:	681b      	ldr	r3, [r3, #0]
 8107ee6:	4a5f      	ldr	r2, [pc, #380]	; (8108064 <I2C_ITSlaveCplt+0x2a8>)
 8107ee8:	4293      	cmp	r3, r2
 8107eea:	d01d      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107eec:	687b      	ldr	r3, [r7, #4]
 8107eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ef0:	681b      	ldr	r3, [r3, #0]
 8107ef2:	4a5d      	ldr	r2, [pc, #372]	; (8108068 <I2C_ITSlaveCplt+0x2ac>)
 8107ef4:	4293      	cmp	r3, r2
 8107ef6:	d017      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107efc:	681b      	ldr	r3, [r3, #0]
 8107efe:	4a5b      	ldr	r2, [pc, #364]	; (810806c <I2C_ITSlaveCplt+0x2b0>)
 8107f00:	4293      	cmp	r3, r2
 8107f02:	d011      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107f04:	687b      	ldr	r3, [r7, #4]
 8107f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f08:	681b      	ldr	r3, [r3, #0]
 8107f0a:	4a59      	ldr	r2, [pc, #356]	; (8108070 <I2C_ITSlaveCplt+0x2b4>)
 8107f0c:	4293      	cmp	r3, r2
 8107f0e:	d00b      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107f10:	687b      	ldr	r3, [r7, #4]
 8107f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f14:	681b      	ldr	r3, [r3, #0]
 8107f16:	4a57      	ldr	r2, [pc, #348]	; (8108074 <I2C_ITSlaveCplt+0x2b8>)
 8107f18:	4293      	cmp	r3, r2
 8107f1a:	d005      	beq.n	8107f28 <I2C_ITSlaveCplt+0x16c>
 8107f1c:	687b      	ldr	r3, [r7, #4]
 8107f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f20:	681b      	ldr	r3, [r3, #0]
 8107f22:	4a55      	ldr	r2, [pc, #340]	; (8108078 <I2C_ITSlaveCplt+0x2bc>)
 8107f24:	4293      	cmp	r3, r2
 8107f26:	d105      	bne.n	8107f34 <I2C_ITSlaveCplt+0x178>
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f2c:	681b      	ldr	r3, [r3, #0]
 8107f2e:	685b      	ldr	r3, [r3, #4]
 8107f30:	b29b      	uxth	r3, r3
 8107f32:	e004      	b.n	8107f3e <I2C_ITSlaveCplt+0x182>
 8107f34:	687b      	ldr	r3, [r7, #4]
 8107f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f38:	681b      	ldr	r3, [r3, #0]
 8107f3a:	685b      	ldr	r3, [r3, #4]
 8107f3c:	b29b      	uxth	r3, r3
 8107f3e:	687a      	ldr	r2, [r7, #4]
 8107f40:	8553      	strh	r3, [r2, #42]	; 0x2a
 8107f42:	e0a2      	b.n	810808a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107f44:	693b      	ldr	r3, [r7, #16]
 8107f46:	0bdb      	lsrs	r3, r3, #15
 8107f48:	f003 0301 	and.w	r3, r3, #1
 8107f4c:	2b00      	cmp	r3, #0
 8107f4e:	f000 809c 	beq.w	810808a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	681b      	ldr	r3, [r3, #0]
 8107f56:	681a      	ldr	r2, [r3, #0]
 8107f58:	687b      	ldr	r3, [r7, #4]
 8107f5a:	681b      	ldr	r3, [r3, #0]
 8107f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107f60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107f62:	687b      	ldr	r3, [r7, #4]
 8107f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f66:	2b00      	cmp	r3, #0
 8107f68:	f000 808f 	beq.w	810808a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8107f6c:	687b      	ldr	r3, [r7, #4]
 8107f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f70:	681b      	ldr	r3, [r3, #0]
 8107f72:	4a32      	ldr	r2, [pc, #200]	; (810803c <I2C_ITSlaveCplt+0x280>)
 8107f74:	4293      	cmp	r3, r2
 8107f76:	d059      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f7c:	681b      	ldr	r3, [r3, #0]
 8107f7e:	4a30      	ldr	r2, [pc, #192]	; (8108040 <I2C_ITSlaveCplt+0x284>)
 8107f80:	4293      	cmp	r3, r2
 8107f82:	d053      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f88:	681b      	ldr	r3, [r3, #0]
 8107f8a:	4a2e      	ldr	r2, [pc, #184]	; (8108044 <I2C_ITSlaveCplt+0x288>)
 8107f8c:	4293      	cmp	r3, r2
 8107f8e:	d04d      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f94:	681b      	ldr	r3, [r3, #0]
 8107f96:	4a2c      	ldr	r2, [pc, #176]	; (8108048 <I2C_ITSlaveCplt+0x28c>)
 8107f98:	4293      	cmp	r3, r2
 8107f9a:	d047      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107f9c:	687b      	ldr	r3, [r7, #4]
 8107f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fa0:	681b      	ldr	r3, [r3, #0]
 8107fa2:	4a2a      	ldr	r2, [pc, #168]	; (810804c <I2C_ITSlaveCplt+0x290>)
 8107fa4:	4293      	cmp	r3, r2
 8107fa6:	d041      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fac:	681b      	ldr	r3, [r3, #0]
 8107fae:	4a28      	ldr	r2, [pc, #160]	; (8108050 <I2C_ITSlaveCplt+0x294>)
 8107fb0:	4293      	cmp	r3, r2
 8107fb2:	d03b      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107fb4:	687b      	ldr	r3, [r7, #4]
 8107fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fb8:	681b      	ldr	r3, [r3, #0]
 8107fba:	4a26      	ldr	r2, [pc, #152]	; (8108054 <I2C_ITSlaveCplt+0x298>)
 8107fbc:	4293      	cmp	r3, r2
 8107fbe:	d035      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107fc0:	687b      	ldr	r3, [r7, #4]
 8107fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fc4:	681b      	ldr	r3, [r3, #0]
 8107fc6:	4a24      	ldr	r2, [pc, #144]	; (8108058 <I2C_ITSlaveCplt+0x29c>)
 8107fc8:	4293      	cmp	r3, r2
 8107fca:	d02f      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fd0:	681b      	ldr	r3, [r3, #0]
 8107fd2:	4a22      	ldr	r2, [pc, #136]	; (810805c <I2C_ITSlaveCplt+0x2a0>)
 8107fd4:	4293      	cmp	r3, r2
 8107fd6:	d029      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fdc:	681b      	ldr	r3, [r3, #0]
 8107fde:	4a20      	ldr	r2, [pc, #128]	; (8108060 <I2C_ITSlaveCplt+0x2a4>)
 8107fe0:	4293      	cmp	r3, r2
 8107fe2:	d023      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107fe4:	687b      	ldr	r3, [r7, #4]
 8107fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fe8:	681b      	ldr	r3, [r3, #0]
 8107fea:	4a1e      	ldr	r2, [pc, #120]	; (8108064 <I2C_ITSlaveCplt+0x2a8>)
 8107fec:	4293      	cmp	r3, r2
 8107fee:	d01d      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ff4:	681b      	ldr	r3, [r3, #0]
 8107ff6:	4a1c      	ldr	r2, [pc, #112]	; (8108068 <I2C_ITSlaveCplt+0x2ac>)
 8107ff8:	4293      	cmp	r3, r2
 8107ffa:	d017      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108000:	681b      	ldr	r3, [r3, #0]
 8108002:	4a1a      	ldr	r2, [pc, #104]	; (810806c <I2C_ITSlaveCplt+0x2b0>)
 8108004:	4293      	cmp	r3, r2
 8108006:	d011      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810800c:	681b      	ldr	r3, [r3, #0]
 810800e:	4a18      	ldr	r2, [pc, #96]	; (8108070 <I2C_ITSlaveCplt+0x2b4>)
 8108010:	4293      	cmp	r3, r2
 8108012:	d00b      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108018:	681b      	ldr	r3, [r3, #0]
 810801a:	4a16      	ldr	r2, [pc, #88]	; (8108074 <I2C_ITSlaveCplt+0x2b8>)
 810801c:	4293      	cmp	r3, r2
 810801e:	d005      	beq.n	810802c <I2C_ITSlaveCplt+0x270>
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108024:	681b      	ldr	r3, [r3, #0]
 8108026:	4a14      	ldr	r2, [pc, #80]	; (8108078 <I2C_ITSlaveCplt+0x2bc>)
 8108028:	4293      	cmp	r3, r2
 810802a:	d127      	bne.n	810807c <I2C_ITSlaveCplt+0x2c0>
 810802c:	687b      	ldr	r3, [r7, #4]
 810802e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108030:	681b      	ldr	r3, [r3, #0]
 8108032:	685b      	ldr	r3, [r3, #4]
 8108034:	b29b      	uxth	r3, r3
 8108036:	e026      	b.n	8108086 <I2C_ITSlaveCplt+0x2ca>
 8108038:	fe00e800 	.word	0xfe00e800
 810803c:	40020010 	.word	0x40020010
 8108040:	40020028 	.word	0x40020028
 8108044:	40020040 	.word	0x40020040
 8108048:	40020058 	.word	0x40020058
 810804c:	40020070 	.word	0x40020070
 8108050:	40020088 	.word	0x40020088
 8108054:	400200a0 	.word	0x400200a0
 8108058:	400200b8 	.word	0x400200b8
 810805c:	40020410 	.word	0x40020410
 8108060:	40020428 	.word	0x40020428
 8108064:	40020440 	.word	0x40020440
 8108068:	40020458 	.word	0x40020458
 810806c:	40020470 	.word	0x40020470
 8108070:	40020488 	.word	0x40020488
 8108074:	400204a0 	.word	0x400204a0
 8108078:	400204b8 	.word	0x400204b8
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	685b      	ldr	r3, [r3, #4]
 8108084:	b29b      	uxth	r3, r3
 8108086:	687a      	ldr	r2, [r7, #4]
 8108088:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 810808a:	697b      	ldr	r3, [r7, #20]
 810808c:	089b      	lsrs	r3, r3, #2
 810808e:	f003 0301 	and.w	r3, r3, #1
 8108092:	2b00      	cmp	r3, #0
 8108094:	d020      	beq.n	81080d8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8108096:	697b      	ldr	r3, [r7, #20]
 8108098:	f023 0304 	bic.w	r3, r3, #4
 810809c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	681b      	ldr	r3, [r3, #0]
 81080a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81080a4:	687b      	ldr	r3, [r7, #4]
 81080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81080a8:	b2d2      	uxtb	r2, r2
 81080aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 81080ac:	687b      	ldr	r3, [r7, #4]
 81080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81080b0:	1c5a      	adds	r2, r3, #1
 81080b2:	687b      	ldr	r3, [r7, #4]
 81080b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 81080b6:	687b      	ldr	r3, [r7, #4]
 81080b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81080ba:	2b00      	cmp	r3, #0
 81080bc:	d00c      	beq.n	81080d8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81080c2:	3b01      	subs	r3, #1
 81080c4:	b29a      	uxth	r2, r3
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81080ca:	687b      	ldr	r3, [r7, #4]
 81080cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81080ce:	b29b      	uxth	r3, r3
 81080d0:	3b01      	subs	r3, #1
 81080d2:	b29a      	uxth	r2, r3
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 81080d8:	687b      	ldr	r3, [r7, #4]
 81080da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81080dc:	b29b      	uxth	r3, r3
 81080de:	2b00      	cmp	r3, #0
 81080e0:	d005      	beq.n	81080ee <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81080e2:	687b      	ldr	r3, [r7, #4]
 81080e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080e6:	f043 0204 	orr.w	r2, r3, #4
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 81080ee:	687b      	ldr	r3, [r7, #4]
 81080f0:	2200      	movs	r2, #0
 81080f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 81080f6:	687b      	ldr	r3, [r7, #4]
 81080f8:	2200      	movs	r2, #0
 81080fa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 81080fc:	687b      	ldr	r3, [r7, #4]
 81080fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108100:	2b00      	cmp	r3, #0
 8108102:	d010      	beq.n	8108126 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8108104:	687b      	ldr	r3, [r7, #4]
 8108106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108108:	4619      	mov	r1, r3
 810810a:	6878      	ldr	r0, [r7, #4]
 810810c:	f000 f8a4 	bl	8108258 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8108110:	687b      	ldr	r3, [r7, #4]
 8108112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108116:	b2db      	uxtb	r3, r3
 8108118:	2b28      	cmp	r3, #40	; 0x28
 810811a:	d141      	bne.n	81081a0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 810811c:	6979      	ldr	r1, [r7, #20]
 810811e:	6878      	ldr	r0, [r7, #4]
 8108120:	f000 f844 	bl	81081ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8108124:	e03c      	b.n	81081a0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810812a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 810812e:	d014      	beq.n	810815a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8108130:	6878      	ldr	r0, [r7, #4]
 8108132:	f7ff fd1a 	bl	8107b6a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	4a1b      	ldr	r2, [pc, #108]	; (81081a8 <I2C_ITSlaveCplt+0x3ec>)
 810813a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 810813c:	687b      	ldr	r3, [r7, #4]
 810813e:	2220      	movs	r2, #32
 8108140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	2200      	movs	r2, #0
 8108148:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 810814a:	687b      	ldr	r3, [r7, #4]
 810814c:	2200      	movs	r2, #0
 810814e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8108152:	6878      	ldr	r0, [r7, #4]
 8108154:	f7fe ffa9 	bl	81070aa <HAL_I2C_ListenCpltCallback>
}
 8108158:	e022      	b.n	81081a0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810815a:	687b      	ldr	r3, [r7, #4]
 810815c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108160:	b2db      	uxtb	r3, r3
 8108162:	2b22      	cmp	r3, #34	; 0x22
 8108164:	d10e      	bne.n	8108184 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8108166:	687b      	ldr	r3, [r7, #4]
 8108168:	2220      	movs	r2, #32
 810816a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810816e:	687b      	ldr	r3, [r7, #4]
 8108170:	2200      	movs	r2, #0
 8108172:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8108174:	687b      	ldr	r3, [r7, #4]
 8108176:	2200      	movs	r2, #0
 8108178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 810817c:	6878      	ldr	r0, [r7, #4]
 810817e:	f7fe ff7c 	bl	810707a <HAL_I2C_SlaveRxCpltCallback>
}
 8108182:	e00d      	b.n	81081a0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8108184:	687b      	ldr	r3, [r7, #4]
 8108186:	2220      	movs	r2, #32
 8108188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810818c:	687b      	ldr	r3, [r7, #4]
 810818e:	2200      	movs	r2, #0
 8108190:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8108192:	687b      	ldr	r3, [r7, #4]
 8108194:	2200      	movs	r2, #0
 8108196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 810819a:	6878      	ldr	r0, [r7, #4]
 810819c:	f7fe ff63 	bl	8107066 <HAL_I2C_SlaveTxCpltCallback>
}
 81081a0:	bf00      	nop
 81081a2:	3718      	adds	r7, #24
 81081a4:	46bd      	mov	sp, r7
 81081a6:	bd80      	pop	{r7, pc}
 81081a8:	ffff0000 	.word	0xffff0000

081081ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81081ac:	b580      	push	{r7, lr}
 81081ae:	b082      	sub	sp, #8
 81081b0:	af00      	add	r7, sp, #0
 81081b2:	6078      	str	r0, [r7, #4]
 81081b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 81081b6:	687b      	ldr	r3, [r7, #4]
 81081b8:	4a26      	ldr	r2, [pc, #152]	; (8108254 <I2C_ITListenCplt+0xa8>)
 81081ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 81081bc:	687b      	ldr	r3, [r7, #4]
 81081be:	2200      	movs	r2, #0
 81081c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 81081c2:	687b      	ldr	r3, [r7, #4]
 81081c4:	2220      	movs	r2, #32
 81081c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	2200      	movs	r2, #0
 81081ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 81081d2:	687b      	ldr	r3, [r7, #4]
 81081d4:	2200      	movs	r2, #0
 81081d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 81081d8:	683b      	ldr	r3, [r7, #0]
 81081da:	089b      	lsrs	r3, r3, #2
 81081dc:	f003 0301 	and.w	r3, r3, #1
 81081e0:	2b00      	cmp	r3, #0
 81081e2:	d022      	beq.n	810822a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81081e4:	687b      	ldr	r3, [r7, #4]
 81081e6:	681b      	ldr	r3, [r3, #0]
 81081e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81081ee:	b2d2      	uxtb	r2, r2
 81081f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 81081f2:	687b      	ldr	r3, [r7, #4]
 81081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81081f6:	1c5a      	adds	r2, r3, #1
 81081f8:	687b      	ldr	r3, [r7, #4]
 81081fa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108200:	2b00      	cmp	r3, #0
 8108202:	d012      	beq.n	810822a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8108204:	687b      	ldr	r3, [r7, #4]
 8108206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108208:	3b01      	subs	r3, #1
 810820a:	b29a      	uxth	r2, r3
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108214:	b29b      	uxth	r3, r3
 8108216:	3b01      	subs	r3, #1
 8108218:	b29a      	uxth	r2, r3
 810821a:	687b      	ldr	r3, [r7, #4]
 810821c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810821e:	687b      	ldr	r3, [r7, #4]
 8108220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108222:	f043 0204 	orr.w	r2, r3, #4
 8108226:	687b      	ldr	r3, [r7, #4]
 8108228:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 810822a:	f248 0103 	movw	r1, #32771	; 0x8003
 810822e:	6878      	ldr	r0, [r7, #4]
 8108230:	f000 fcd0 	bl	8108bd4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108234:	687b      	ldr	r3, [r7, #4]
 8108236:	681b      	ldr	r3, [r3, #0]
 8108238:	2210      	movs	r2, #16
 810823a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810823c:	687b      	ldr	r3, [r7, #4]
 810823e:	2200      	movs	r2, #0
 8108240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8108244:	6878      	ldr	r0, [r7, #4]
 8108246:	f7fe ff30 	bl	81070aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 810824a:	bf00      	nop
 810824c:	3708      	adds	r7, #8
 810824e:	46bd      	mov	sp, r7
 8108250:	bd80      	pop	{r7, pc}
 8108252:	bf00      	nop
 8108254:	ffff0000 	.word	0xffff0000

08108258 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8108258:	b580      	push	{r7, lr}
 810825a:	b084      	sub	sp, #16
 810825c:	af00      	add	r7, sp, #0
 810825e:	6078      	str	r0, [r7, #4]
 8108260:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8108262:	687b      	ldr	r3, [r7, #4]
 8108264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 810826a:	687b      	ldr	r3, [r7, #4]
 810826c:	2200      	movs	r2, #0
 810826e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8108272:	687b      	ldr	r3, [r7, #4]
 8108274:	4a5d      	ldr	r2, [pc, #372]	; (81083ec <I2C_ITError+0x194>)
 8108276:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8108278:	687b      	ldr	r3, [r7, #4]
 810827a:	2200      	movs	r2, #0
 810827c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 810827e:	687b      	ldr	r3, [r7, #4]
 8108280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108282:	683b      	ldr	r3, [r7, #0]
 8108284:	431a      	orrs	r2, r3
 8108286:	687b      	ldr	r3, [r7, #4]
 8108288:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 810828a:	7bfb      	ldrb	r3, [r7, #15]
 810828c:	2b28      	cmp	r3, #40	; 0x28
 810828e:	d005      	beq.n	810829c <I2C_ITError+0x44>
 8108290:	7bfb      	ldrb	r3, [r7, #15]
 8108292:	2b29      	cmp	r3, #41	; 0x29
 8108294:	d002      	beq.n	810829c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8108296:	7bfb      	ldrb	r3, [r7, #15]
 8108298:	2b2a      	cmp	r3, #42	; 0x2a
 810829a:	d10b      	bne.n	81082b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 810829c:	2103      	movs	r1, #3
 810829e:	6878      	ldr	r0, [r7, #4]
 81082a0:	f000 fc98 	bl	8108bd4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	2228      	movs	r2, #40	; 0x28
 81082a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 81082ac:	687b      	ldr	r3, [r7, #4]
 81082ae:	4a50      	ldr	r2, [pc, #320]	; (81083f0 <I2C_ITError+0x198>)
 81082b0:	635a      	str	r2, [r3, #52]	; 0x34
 81082b2:	e011      	b.n	81082d8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81082b4:	f248 0103 	movw	r1, #32771	; 0x8003
 81082b8:	6878      	ldr	r0, [r7, #4]
 81082ba:	f000 fc8b 	bl	8108bd4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 81082be:	687b      	ldr	r3, [r7, #4]
 81082c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81082c4:	b2db      	uxtb	r3, r3
 81082c6:	2b60      	cmp	r3, #96	; 0x60
 81082c8:	d003      	beq.n	81082d2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 81082ca:	687b      	ldr	r3, [r7, #4]
 81082cc:	2220      	movs	r2, #32
 81082ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 81082d2:	687b      	ldr	r3, [r7, #4]
 81082d4:	2200      	movs	r2, #0
 81082d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81082dc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 81082de:	687b      	ldr	r3, [r7, #4]
 81082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81082e2:	2b00      	cmp	r3, #0
 81082e4:	d039      	beq.n	810835a <I2C_ITError+0x102>
 81082e6:	68bb      	ldr	r3, [r7, #8]
 81082e8:	2b11      	cmp	r3, #17
 81082ea:	d002      	beq.n	81082f2 <I2C_ITError+0x9a>
 81082ec:	68bb      	ldr	r3, [r7, #8]
 81082ee:	2b21      	cmp	r3, #33	; 0x21
 81082f0:	d133      	bne.n	810835a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 81082f2:	687b      	ldr	r3, [r7, #4]
 81082f4:	681b      	ldr	r3, [r3, #0]
 81082f6:	681b      	ldr	r3, [r3, #0]
 81082f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81082fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108300:	d107      	bne.n	8108312 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8108302:	687b      	ldr	r3, [r7, #4]
 8108304:	681b      	ldr	r3, [r3, #0]
 8108306:	681a      	ldr	r2, [r3, #0]
 8108308:	687b      	ldr	r3, [r7, #4]
 810830a:	681b      	ldr	r3, [r3, #0]
 810830c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8108310:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108312:	687b      	ldr	r3, [r7, #4]
 8108314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108316:	4618      	mov	r0, r3
 8108318:	f7fd fc72 	bl	8105c00 <HAL_DMA_GetState>
 810831c:	4603      	mov	r3, r0
 810831e:	2b01      	cmp	r3, #1
 8108320:	d017      	beq.n	8108352 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8108322:	687b      	ldr	r3, [r7, #4]
 8108324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108326:	4a33      	ldr	r2, [pc, #204]	; (81083f4 <I2C_ITError+0x19c>)
 8108328:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810832a:	687b      	ldr	r3, [r7, #4]
 810832c:	2200      	movs	r2, #0
 810832e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8108332:	687b      	ldr	r3, [r7, #4]
 8108334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108336:	4618      	mov	r0, r3
 8108338:	f7fc faf2 	bl	8104920 <HAL_DMA_Abort_IT>
 810833c:	4603      	mov	r3, r0
 810833e:	2b00      	cmp	r3, #0
 8108340:	d04d      	beq.n	81083de <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8108342:	687b      	ldr	r3, [r7, #4]
 8108344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108348:	687a      	ldr	r2, [r7, #4]
 810834a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 810834c:	4610      	mov	r0, r2
 810834e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108350:	e045      	b.n	81083de <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8108352:	6878      	ldr	r0, [r7, #4]
 8108354:	f000 f850 	bl	81083f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108358:	e041      	b.n	81083de <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 810835a:	687b      	ldr	r3, [r7, #4]
 810835c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810835e:	2b00      	cmp	r3, #0
 8108360:	d039      	beq.n	81083d6 <I2C_ITError+0x17e>
 8108362:	68bb      	ldr	r3, [r7, #8]
 8108364:	2b12      	cmp	r3, #18
 8108366:	d002      	beq.n	810836e <I2C_ITError+0x116>
 8108368:	68bb      	ldr	r3, [r7, #8]
 810836a:	2b22      	cmp	r3, #34	; 0x22
 810836c:	d133      	bne.n	81083d6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	681b      	ldr	r3, [r3, #0]
 8108374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8108378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810837c:	d107      	bne.n	810838e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 810837e:	687b      	ldr	r3, [r7, #4]
 8108380:	681b      	ldr	r3, [r3, #0]
 8108382:	681a      	ldr	r2, [r3, #0]
 8108384:	687b      	ldr	r3, [r7, #4]
 8108386:	681b      	ldr	r3, [r3, #0]
 8108388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810838c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810838e:	687b      	ldr	r3, [r7, #4]
 8108390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108392:	4618      	mov	r0, r3
 8108394:	f7fd fc34 	bl	8105c00 <HAL_DMA_GetState>
 8108398:	4603      	mov	r3, r0
 810839a:	2b01      	cmp	r3, #1
 810839c:	d017      	beq.n	81083ce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 810839e:	687b      	ldr	r3, [r7, #4]
 81083a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81083a2:	4a14      	ldr	r2, [pc, #80]	; (81083f4 <I2C_ITError+0x19c>)
 81083a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81083a6:	687b      	ldr	r3, [r7, #4]
 81083a8:	2200      	movs	r2, #0
 81083aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81083b2:	4618      	mov	r0, r3
 81083b4:	f7fc fab4 	bl	8104920 <HAL_DMA_Abort_IT>
 81083b8:	4603      	mov	r3, r0
 81083ba:	2b00      	cmp	r3, #0
 81083bc:	d011      	beq.n	81083e2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81083c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81083c4:	687a      	ldr	r2, [r7, #4]
 81083c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81083c8:	4610      	mov	r0, r2
 81083ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81083cc:	e009      	b.n	81083e2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81083ce:	6878      	ldr	r0, [r7, #4]
 81083d0:	f000 f812 	bl	81083f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81083d4:	e005      	b.n	81083e2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 81083d6:	6878      	ldr	r0, [r7, #4]
 81083d8:	f000 f80e 	bl	81083f8 <I2C_TreatErrorCallback>
  }
}
 81083dc:	e002      	b.n	81083e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81083de:	bf00      	nop
 81083e0:	e000      	b.n	81083e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81083e2:	bf00      	nop
}
 81083e4:	bf00      	nop
 81083e6:	3710      	adds	r7, #16
 81083e8:	46bd      	mov	sp, r7
 81083ea:	bd80      	pop	{r7, pc}
 81083ec:	ffff0000 	.word	0xffff0000
 81083f0:	081070e7 	.word	0x081070e7
 81083f4:	08108831 	.word	0x08108831

081083f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 81083f8:	b580      	push	{r7, lr}
 81083fa:	b082      	sub	sp, #8
 81083fc:	af00      	add	r7, sp, #0
 81083fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8108400:	687b      	ldr	r3, [r7, #4]
 8108402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108406:	b2db      	uxtb	r3, r3
 8108408:	2b60      	cmp	r3, #96	; 0x60
 810840a:	d10e      	bne.n	810842a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 810840c:	687b      	ldr	r3, [r7, #4]
 810840e:	2220      	movs	r2, #32
 8108410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108414:	687b      	ldr	r3, [r7, #4]
 8108416:	2200      	movs	r2, #0
 8108418:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810841a:	687b      	ldr	r3, [r7, #4]
 810841c:	2200      	movs	r2, #0
 810841e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8108422:	6878      	ldr	r0, [r7, #4]
 8108424:	f7fe fe55 	bl	81070d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8108428:	e009      	b.n	810843e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 810842a:	687b      	ldr	r3, [r7, #4]
 810842c:	2200      	movs	r2, #0
 810842e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	2200      	movs	r2, #0
 8108434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8108438:	6878      	ldr	r0, [r7, #4]
 810843a:	f7fe fe40 	bl	81070be <HAL_I2C_ErrorCallback>
}
 810843e:	bf00      	nop
 8108440:	3708      	adds	r7, #8
 8108442:	46bd      	mov	sp, r7
 8108444:	bd80      	pop	{r7, pc}

08108446 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8108446:	b480      	push	{r7}
 8108448:	b083      	sub	sp, #12
 810844a:	af00      	add	r7, sp, #0
 810844c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	681b      	ldr	r3, [r3, #0]
 8108452:	699b      	ldr	r3, [r3, #24]
 8108454:	f003 0302 	and.w	r3, r3, #2
 8108458:	2b02      	cmp	r3, #2
 810845a:	d103      	bne.n	8108464 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810845c:	687b      	ldr	r3, [r7, #4]
 810845e:	681b      	ldr	r3, [r3, #0]
 8108460:	2200      	movs	r2, #0
 8108462:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8108464:	687b      	ldr	r3, [r7, #4]
 8108466:	681b      	ldr	r3, [r3, #0]
 8108468:	699b      	ldr	r3, [r3, #24]
 810846a:	f003 0301 	and.w	r3, r3, #1
 810846e:	2b01      	cmp	r3, #1
 8108470:	d007      	beq.n	8108482 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8108472:	687b      	ldr	r3, [r7, #4]
 8108474:	681b      	ldr	r3, [r3, #0]
 8108476:	699a      	ldr	r2, [r3, #24]
 8108478:	687b      	ldr	r3, [r7, #4]
 810847a:	681b      	ldr	r3, [r3, #0]
 810847c:	f042 0201 	orr.w	r2, r2, #1
 8108480:	619a      	str	r2, [r3, #24]
  }
}
 8108482:	bf00      	nop
 8108484:	370c      	adds	r7, #12
 8108486:	46bd      	mov	sp, r7
 8108488:	f85d 7b04 	ldr.w	r7, [sp], #4
 810848c:	4770      	bx	lr

0810848e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 810848e:	b580      	push	{r7, lr}
 8108490:	b084      	sub	sp, #16
 8108492:	af00      	add	r7, sp, #0
 8108494:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810849a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810849c:	68fb      	ldr	r3, [r7, #12]
 810849e:	681b      	ldr	r3, [r3, #0]
 81084a0:	681a      	ldr	r2, [r3, #0]
 81084a2:	68fb      	ldr	r3, [r7, #12]
 81084a4:	681b      	ldr	r3, [r3, #0]
 81084a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81084aa:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 81084ac:	68fb      	ldr	r3, [r7, #12]
 81084ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81084b0:	b29b      	uxth	r3, r3
 81084b2:	2b00      	cmp	r3, #0
 81084b4:	d104      	bne.n	81084c0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 81084b6:	2120      	movs	r1, #32
 81084b8:	68f8      	ldr	r0, [r7, #12]
 81084ba:	f000 fb27 	bl	8108b0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 81084be:	e02d      	b.n	810851c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 81084c0:	68fb      	ldr	r3, [r7, #12]
 81084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81084c4:	68fa      	ldr	r2, [r7, #12]
 81084c6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 81084c8:	441a      	add	r2, r3
 81084ca:	68fb      	ldr	r3, [r7, #12]
 81084cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81084ce:	68fb      	ldr	r3, [r7, #12]
 81084d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81084d2:	b29b      	uxth	r3, r3
 81084d4:	2bff      	cmp	r3, #255	; 0xff
 81084d6:	d903      	bls.n	81084e0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81084d8:	68fb      	ldr	r3, [r7, #12]
 81084da:	22ff      	movs	r2, #255	; 0xff
 81084dc:	851a      	strh	r2, [r3, #40]	; 0x28
 81084de:	e004      	b.n	81084ea <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 81084e0:	68fb      	ldr	r3, [r7, #12]
 81084e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81084e4:	b29a      	uxth	r2, r3
 81084e6:	68fb      	ldr	r3, [r7, #12]
 81084e8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 81084ea:	68fb      	ldr	r3, [r7, #12]
 81084ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 81084ee:	68fb      	ldr	r3, [r7, #12]
 81084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81084f2:	4619      	mov	r1, r3
 81084f4:	68fb      	ldr	r3, [r7, #12]
 81084f6:	681b      	ldr	r3, [r3, #0]
 81084f8:	3328      	adds	r3, #40	; 0x28
 81084fa:	461a      	mov	r2, r3
 81084fc:	68fb      	ldr	r3, [r7, #12]
 81084fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108500:	f7fb fc86 	bl	8103e10 <HAL_DMA_Start_IT>
 8108504:	4603      	mov	r3, r0
 8108506:	2b00      	cmp	r3, #0
 8108508:	d004      	beq.n	8108514 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 810850a:	2110      	movs	r1, #16
 810850c:	68f8      	ldr	r0, [r7, #12]
 810850e:	f7ff fea3 	bl	8108258 <I2C_ITError>
}
 8108512:	e003      	b.n	810851c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8108514:	2140      	movs	r1, #64	; 0x40
 8108516:	68f8      	ldr	r0, [r7, #12]
 8108518:	f000 faf8 	bl	8108b0c <I2C_Enable_IRQ>
}
 810851c:	bf00      	nop
 810851e:	3710      	adds	r7, #16
 8108520:	46bd      	mov	sp, r7
 8108522:	bd80      	pop	{r7, pc}

08108524 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8108524:	b580      	push	{r7, lr}
 8108526:	b084      	sub	sp, #16
 8108528:	af00      	add	r7, sp, #0
 810852a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 810852c:	687b      	ldr	r3, [r7, #4]
 810852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108530:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108532:	68fb      	ldr	r3, [r7, #12]
 8108534:	681b      	ldr	r3, [r3, #0]
 8108536:	681a      	ldr	r2, [r3, #0]
 8108538:	68fb      	ldr	r3, [r7, #12]
 810853a:	681b      	ldr	r3, [r3, #0]
 810853c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8108540:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8108542:	68fb      	ldr	r3, [r7, #12]
 8108544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108546:	b29b      	uxth	r3, r3
 8108548:	2b00      	cmp	r3, #0
 810854a:	d104      	bne.n	8108556 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 810854c:	2120      	movs	r1, #32
 810854e:	68f8      	ldr	r0, [r7, #12]
 8108550:	f000 fadc 	bl	8108b0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8108554:	e02d      	b.n	81085b2 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8108556:	68fb      	ldr	r3, [r7, #12]
 8108558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810855a:	68fa      	ldr	r2, [r7, #12]
 810855c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 810855e:	441a      	add	r2, r3
 8108560:	68fb      	ldr	r3, [r7, #12]
 8108562:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8108564:	68fb      	ldr	r3, [r7, #12]
 8108566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108568:	b29b      	uxth	r3, r3
 810856a:	2bff      	cmp	r3, #255	; 0xff
 810856c:	d903      	bls.n	8108576 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810856e:	68fb      	ldr	r3, [r7, #12]
 8108570:	22ff      	movs	r2, #255	; 0xff
 8108572:	851a      	strh	r2, [r3, #40]	; 0x28
 8108574:	e004      	b.n	8108580 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8108576:	68fb      	ldr	r3, [r7, #12]
 8108578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810857a:	b29a      	uxth	r2, r3
 810857c:	68fb      	ldr	r3, [r7, #12]
 810857e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8108580:	68fb      	ldr	r3, [r7, #12]
 8108582:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8108584:	68fb      	ldr	r3, [r7, #12]
 8108586:	681b      	ldr	r3, [r3, #0]
 8108588:	3324      	adds	r3, #36	; 0x24
 810858a:	4619      	mov	r1, r3
 810858c:	68fb      	ldr	r3, [r7, #12]
 810858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108590:	461a      	mov	r2, r3
 8108592:	68fb      	ldr	r3, [r7, #12]
 8108594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108596:	f7fb fc3b 	bl	8103e10 <HAL_DMA_Start_IT>
 810859a:	4603      	mov	r3, r0
 810859c:	2b00      	cmp	r3, #0
 810859e:	d004      	beq.n	81085aa <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 81085a0:	2110      	movs	r1, #16
 81085a2:	68f8      	ldr	r0, [r7, #12]
 81085a4:	f7ff fe58 	bl	8108258 <I2C_ITError>
}
 81085a8:	e003      	b.n	81085b2 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 81085aa:	2140      	movs	r1, #64	; 0x40
 81085ac:	68f8      	ldr	r0, [r7, #12]
 81085ae:	f000 faad 	bl	8108b0c <I2C_Enable_IRQ>
}
 81085b2:	bf00      	nop
 81085b4:	3710      	adds	r7, #16
 81085b6:	46bd      	mov	sp, r7
 81085b8:	bd80      	pop	{r7, pc}
	...

081085bc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 81085bc:	b580      	push	{r7, lr}
 81085be:	b084      	sub	sp, #16
 81085c0:	af00      	add	r7, sp, #0
 81085c2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 81085c4:	2300      	movs	r3, #0
 81085c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 81085c8:	687b      	ldr	r3, [r7, #4]
 81085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085cc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 81085ce:	68bb      	ldr	r3, [r7, #8]
 81085d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085d2:	2b00      	cmp	r3, #0
 81085d4:	d076      	beq.n	81086c4 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 81085d6:	68bb      	ldr	r3, [r7, #8]
 81085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085da:	681b      	ldr	r3, [r3, #0]
 81085dc:	4a71      	ldr	r2, [pc, #452]	; (81087a4 <I2C_DMAError+0x1e8>)
 81085de:	4293      	cmp	r3, r2
 81085e0:	d059      	beq.n	8108696 <I2C_DMAError+0xda>
 81085e2:	68bb      	ldr	r3, [r7, #8]
 81085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085e6:	681b      	ldr	r3, [r3, #0]
 81085e8:	4a6f      	ldr	r2, [pc, #444]	; (81087a8 <I2C_DMAError+0x1ec>)
 81085ea:	4293      	cmp	r3, r2
 81085ec:	d053      	beq.n	8108696 <I2C_DMAError+0xda>
 81085ee:	68bb      	ldr	r3, [r7, #8]
 81085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085f2:	681b      	ldr	r3, [r3, #0]
 81085f4:	4a6d      	ldr	r2, [pc, #436]	; (81087ac <I2C_DMAError+0x1f0>)
 81085f6:	4293      	cmp	r3, r2
 81085f8:	d04d      	beq.n	8108696 <I2C_DMAError+0xda>
 81085fa:	68bb      	ldr	r3, [r7, #8]
 81085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085fe:	681b      	ldr	r3, [r3, #0]
 8108600:	4a6b      	ldr	r2, [pc, #428]	; (81087b0 <I2C_DMAError+0x1f4>)
 8108602:	4293      	cmp	r3, r2
 8108604:	d047      	beq.n	8108696 <I2C_DMAError+0xda>
 8108606:	68bb      	ldr	r3, [r7, #8]
 8108608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810860a:	681b      	ldr	r3, [r3, #0]
 810860c:	4a69      	ldr	r2, [pc, #420]	; (81087b4 <I2C_DMAError+0x1f8>)
 810860e:	4293      	cmp	r3, r2
 8108610:	d041      	beq.n	8108696 <I2C_DMAError+0xda>
 8108612:	68bb      	ldr	r3, [r7, #8]
 8108614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108616:	681b      	ldr	r3, [r3, #0]
 8108618:	4a67      	ldr	r2, [pc, #412]	; (81087b8 <I2C_DMAError+0x1fc>)
 810861a:	4293      	cmp	r3, r2
 810861c:	d03b      	beq.n	8108696 <I2C_DMAError+0xda>
 810861e:	68bb      	ldr	r3, [r7, #8]
 8108620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108622:	681b      	ldr	r3, [r3, #0]
 8108624:	4a65      	ldr	r2, [pc, #404]	; (81087bc <I2C_DMAError+0x200>)
 8108626:	4293      	cmp	r3, r2
 8108628:	d035      	beq.n	8108696 <I2C_DMAError+0xda>
 810862a:	68bb      	ldr	r3, [r7, #8]
 810862c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810862e:	681b      	ldr	r3, [r3, #0]
 8108630:	4a63      	ldr	r2, [pc, #396]	; (81087c0 <I2C_DMAError+0x204>)
 8108632:	4293      	cmp	r3, r2
 8108634:	d02f      	beq.n	8108696 <I2C_DMAError+0xda>
 8108636:	68bb      	ldr	r3, [r7, #8]
 8108638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810863a:	681b      	ldr	r3, [r3, #0]
 810863c:	4a61      	ldr	r2, [pc, #388]	; (81087c4 <I2C_DMAError+0x208>)
 810863e:	4293      	cmp	r3, r2
 8108640:	d029      	beq.n	8108696 <I2C_DMAError+0xda>
 8108642:	68bb      	ldr	r3, [r7, #8]
 8108644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108646:	681b      	ldr	r3, [r3, #0]
 8108648:	4a5f      	ldr	r2, [pc, #380]	; (81087c8 <I2C_DMAError+0x20c>)
 810864a:	4293      	cmp	r3, r2
 810864c:	d023      	beq.n	8108696 <I2C_DMAError+0xda>
 810864e:	68bb      	ldr	r3, [r7, #8]
 8108650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108652:	681b      	ldr	r3, [r3, #0]
 8108654:	4a5d      	ldr	r2, [pc, #372]	; (81087cc <I2C_DMAError+0x210>)
 8108656:	4293      	cmp	r3, r2
 8108658:	d01d      	beq.n	8108696 <I2C_DMAError+0xda>
 810865a:	68bb      	ldr	r3, [r7, #8]
 810865c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810865e:	681b      	ldr	r3, [r3, #0]
 8108660:	4a5b      	ldr	r2, [pc, #364]	; (81087d0 <I2C_DMAError+0x214>)
 8108662:	4293      	cmp	r3, r2
 8108664:	d017      	beq.n	8108696 <I2C_DMAError+0xda>
 8108666:	68bb      	ldr	r3, [r7, #8]
 8108668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810866a:	681b      	ldr	r3, [r3, #0]
 810866c:	4a59      	ldr	r2, [pc, #356]	; (81087d4 <I2C_DMAError+0x218>)
 810866e:	4293      	cmp	r3, r2
 8108670:	d011      	beq.n	8108696 <I2C_DMAError+0xda>
 8108672:	68bb      	ldr	r3, [r7, #8]
 8108674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108676:	681b      	ldr	r3, [r3, #0]
 8108678:	4a57      	ldr	r2, [pc, #348]	; (81087d8 <I2C_DMAError+0x21c>)
 810867a:	4293      	cmp	r3, r2
 810867c:	d00b      	beq.n	8108696 <I2C_DMAError+0xda>
 810867e:	68bb      	ldr	r3, [r7, #8]
 8108680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108682:	681b      	ldr	r3, [r3, #0]
 8108684:	4a55      	ldr	r2, [pc, #340]	; (81087dc <I2C_DMAError+0x220>)
 8108686:	4293      	cmp	r3, r2
 8108688:	d005      	beq.n	8108696 <I2C_DMAError+0xda>
 810868a:	68bb      	ldr	r3, [r7, #8]
 810868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810868e:	681b      	ldr	r3, [r3, #0]
 8108690:	4a53      	ldr	r2, [pc, #332]	; (81087e0 <I2C_DMAError+0x224>)
 8108692:	4293      	cmp	r3, r2
 8108694:	d109      	bne.n	81086aa <I2C_DMAError+0xee>
 8108696:	68bb      	ldr	r3, [r7, #8]
 8108698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810869a:	681b      	ldr	r3, [r3, #0]
 810869c:	685b      	ldr	r3, [r3, #4]
 810869e:	2b00      	cmp	r3, #0
 81086a0:	bf0c      	ite	eq
 81086a2:	2301      	moveq	r3, #1
 81086a4:	2300      	movne	r3, #0
 81086a6:	b2db      	uxtb	r3, r3
 81086a8:	e008      	b.n	81086bc <I2C_DMAError+0x100>
 81086aa:	68bb      	ldr	r3, [r7, #8]
 81086ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81086ae:	681b      	ldr	r3, [r3, #0]
 81086b0:	685b      	ldr	r3, [r3, #4]
 81086b2:	2b00      	cmp	r3, #0
 81086b4:	bf0c      	ite	eq
 81086b6:	2301      	moveq	r3, #1
 81086b8:	2300      	movne	r3, #0
 81086ba:	b2db      	uxtb	r3, r3
 81086bc:	2b00      	cmp	r3, #0
 81086be:	d001      	beq.n	81086c4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 81086c0:	2301      	movs	r3, #1
 81086c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 81086c4:	68bb      	ldr	r3, [r7, #8]
 81086c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086c8:	2b00      	cmp	r3, #0
 81086ca:	f000 8098 	beq.w	81087fe <I2C_DMAError+0x242>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 81086ce:	68bb      	ldr	r3, [r7, #8]
 81086d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086d2:	681b      	ldr	r3, [r3, #0]
 81086d4:	4a33      	ldr	r2, [pc, #204]	; (81087a4 <I2C_DMAError+0x1e8>)
 81086d6:	4293      	cmp	r3, r2
 81086d8:	d059      	beq.n	810878e <I2C_DMAError+0x1d2>
 81086da:	68bb      	ldr	r3, [r7, #8]
 81086dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086de:	681b      	ldr	r3, [r3, #0]
 81086e0:	4a31      	ldr	r2, [pc, #196]	; (81087a8 <I2C_DMAError+0x1ec>)
 81086e2:	4293      	cmp	r3, r2
 81086e4:	d053      	beq.n	810878e <I2C_DMAError+0x1d2>
 81086e6:	68bb      	ldr	r3, [r7, #8]
 81086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086ea:	681b      	ldr	r3, [r3, #0]
 81086ec:	4a2f      	ldr	r2, [pc, #188]	; (81087ac <I2C_DMAError+0x1f0>)
 81086ee:	4293      	cmp	r3, r2
 81086f0:	d04d      	beq.n	810878e <I2C_DMAError+0x1d2>
 81086f2:	68bb      	ldr	r3, [r7, #8]
 81086f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086f6:	681b      	ldr	r3, [r3, #0]
 81086f8:	4a2d      	ldr	r2, [pc, #180]	; (81087b0 <I2C_DMAError+0x1f4>)
 81086fa:	4293      	cmp	r3, r2
 81086fc:	d047      	beq.n	810878e <I2C_DMAError+0x1d2>
 81086fe:	68bb      	ldr	r3, [r7, #8]
 8108700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108702:	681b      	ldr	r3, [r3, #0]
 8108704:	4a2b      	ldr	r2, [pc, #172]	; (81087b4 <I2C_DMAError+0x1f8>)
 8108706:	4293      	cmp	r3, r2
 8108708:	d041      	beq.n	810878e <I2C_DMAError+0x1d2>
 810870a:	68bb      	ldr	r3, [r7, #8]
 810870c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810870e:	681b      	ldr	r3, [r3, #0]
 8108710:	4a29      	ldr	r2, [pc, #164]	; (81087b8 <I2C_DMAError+0x1fc>)
 8108712:	4293      	cmp	r3, r2
 8108714:	d03b      	beq.n	810878e <I2C_DMAError+0x1d2>
 8108716:	68bb      	ldr	r3, [r7, #8]
 8108718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810871a:	681b      	ldr	r3, [r3, #0]
 810871c:	4a27      	ldr	r2, [pc, #156]	; (81087bc <I2C_DMAError+0x200>)
 810871e:	4293      	cmp	r3, r2
 8108720:	d035      	beq.n	810878e <I2C_DMAError+0x1d2>
 8108722:	68bb      	ldr	r3, [r7, #8]
 8108724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108726:	681b      	ldr	r3, [r3, #0]
 8108728:	4a25      	ldr	r2, [pc, #148]	; (81087c0 <I2C_DMAError+0x204>)
 810872a:	4293      	cmp	r3, r2
 810872c:	d02f      	beq.n	810878e <I2C_DMAError+0x1d2>
 810872e:	68bb      	ldr	r3, [r7, #8]
 8108730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108732:	681b      	ldr	r3, [r3, #0]
 8108734:	4a23      	ldr	r2, [pc, #140]	; (81087c4 <I2C_DMAError+0x208>)
 8108736:	4293      	cmp	r3, r2
 8108738:	d029      	beq.n	810878e <I2C_DMAError+0x1d2>
 810873a:	68bb      	ldr	r3, [r7, #8]
 810873c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810873e:	681b      	ldr	r3, [r3, #0]
 8108740:	4a21      	ldr	r2, [pc, #132]	; (81087c8 <I2C_DMAError+0x20c>)
 8108742:	4293      	cmp	r3, r2
 8108744:	d023      	beq.n	810878e <I2C_DMAError+0x1d2>
 8108746:	68bb      	ldr	r3, [r7, #8]
 8108748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810874a:	681b      	ldr	r3, [r3, #0]
 810874c:	4a1f      	ldr	r2, [pc, #124]	; (81087cc <I2C_DMAError+0x210>)
 810874e:	4293      	cmp	r3, r2
 8108750:	d01d      	beq.n	810878e <I2C_DMAError+0x1d2>
 8108752:	68bb      	ldr	r3, [r7, #8]
 8108754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108756:	681b      	ldr	r3, [r3, #0]
 8108758:	4a1d      	ldr	r2, [pc, #116]	; (81087d0 <I2C_DMAError+0x214>)
 810875a:	4293      	cmp	r3, r2
 810875c:	d017      	beq.n	810878e <I2C_DMAError+0x1d2>
 810875e:	68bb      	ldr	r3, [r7, #8]
 8108760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108762:	681b      	ldr	r3, [r3, #0]
 8108764:	4a1b      	ldr	r2, [pc, #108]	; (81087d4 <I2C_DMAError+0x218>)
 8108766:	4293      	cmp	r3, r2
 8108768:	d011      	beq.n	810878e <I2C_DMAError+0x1d2>
 810876a:	68bb      	ldr	r3, [r7, #8]
 810876c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810876e:	681b      	ldr	r3, [r3, #0]
 8108770:	4a19      	ldr	r2, [pc, #100]	; (81087d8 <I2C_DMAError+0x21c>)
 8108772:	4293      	cmp	r3, r2
 8108774:	d00b      	beq.n	810878e <I2C_DMAError+0x1d2>
 8108776:	68bb      	ldr	r3, [r7, #8]
 8108778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810877a:	681b      	ldr	r3, [r3, #0]
 810877c:	4a17      	ldr	r2, [pc, #92]	; (81087dc <I2C_DMAError+0x220>)
 810877e:	4293      	cmp	r3, r2
 8108780:	d005      	beq.n	810878e <I2C_DMAError+0x1d2>
 8108782:	68bb      	ldr	r3, [r7, #8]
 8108784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108786:	681b      	ldr	r3, [r3, #0]
 8108788:	4a15      	ldr	r2, [pc, #84]	; (81087e0 <I2C_DMAError+0x224>)
 810878a:	4293      	cmp	r3, r2
 810878c:	d12a      	bne.n	81087e4 <I2C_DMAError+0x228>
 810878e:	68bb      	ldr	r3, [r7, #8]
 8108790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108792:	681b      	ldr	r3, [r3, #0]
 8108794:	685b      	ldr	r3, [r3, #4]
 8108796:	2b00      	cmp	r3, #0
 8108798:	bf0c      	ite	eq
 810879a:	2301      	moveq	r3, #1
 810879c:	2300      	movne	r3, #0
 810879e:	b2db      	uxtb	r3, r3
 81087a0:	e029      	b.n	81087f6 <I2C_DMAError+0x23a>
 81087a2:	bf00      	nop
 81087a4:	40020010 	.word	0x40020010
 81087a8:	40020028 	.word	0x40020028
 81087ac:	40020040 	.word	0x40020040
 81087b0:	40020058 	.word	0x40020058
 81087b4:	40020070 	.word	0x40020070
 81087b8:	40020088 	.word	0x40020088
 81087bc:	400200a0 	.word	0x400200a0
 81087c0:	400200b8 	.word	0x400200b8
 81087c4:	40020410 	.word	0x40020410
 81087c8:	40020428 	.word	0x40020428
 81087cc:	40020440 	.word	0x40020440
 81087d0:	40020458 	.word	0x40020458
 81087d4:	40020470 	.word	0x40020470
 81087d8:	40020488 	.word	0x40020488
 81087dc:	400204a0 	.word	0x400204a0
 81087e0:	400204b8 	.word	0x400204b8
 81087e4:	68bb      	ldr	r3, [r7, #8]
 81087e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81087e8:	681b      	ldr	r3, [r3, #0]
 81087ea:	685b      	ldr	r3, [r3, #4]
 81087ec:	2b00      	cmp	r3, #0
 81087ee:	bf0c      	ite	eq
 81087f0:	2301      	moveq	r3, #1
 81087f2:	2300      	movne	r3, #0
 81087f4:	b2db      	uxtb	r3, r3
 81087f6:	2b00      	cmp	r3, #0
 81087f8:	d001      	beq.n	81087fe <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 81087fa:	2301      	movs	r3, #1
 81087fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 81087fe:	6878      	ldr	r0, [r7, #4]
 8108800:	f7fd fa0c 	bl	8105c1c <HAL_DMA_GetError>
 8108804:	4603      	mov	r3, r0
 8108806:	2b02      	cmp	r3, #2
 8108808:	d00e      	beq.n	8108828 <I2C_DMAError+0x26c>
 810880a:	68fb      	ldr	r3, [r7, #12]
 810880c:	2b00      	cmp	r3, #0
 810880e:	d00b      	beq.n	8108828 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8108810:	68bb      	ldr	r3, [r7, #8]
 8108812:	681b      	ldr	r3, [r3, #0]
 8108814:	685a      	ldr	r2, [r3, #4]
 8108816:	68bb      	ldr	r3, [r7, #8]
 8108818:	681b      	ldr	r3, [r3, #0]
 810881a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810881e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8108820:	2110      	movs	r1, #16
 8108822:	68b8      	ldr	r0, [r7, #8]
 8108824:	f7ff fd18 	bl	8108258 <I2C_ITError>
  }
}
 8108828:	bf00      	nop
 810882a:	3710      	adds	r7, #16
 810882c:	46bd      	mov	sp, r7
 810882e:	bd80      	pop	{r7, pc}

08108830 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8108830:	b580      	push	{r7, lr}
 8108832:	b084      	sub	sp, #16
 8108834:	af00      	add	r7, sp, #0
 8108836:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810883c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 810883e:	68fb      	ldr	r3, [r7, #12]
 8108840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108842:	2b00      	cmp	r3, #0
 8108844:	d003      	beq.n	810884e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8108846:	68fb      	ldr	r3, [r7, #12]
 8108848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810884a:	2200      	movs	r2, #0
 810884c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 810884e:	68fb      	ldr	r3, [r7, #12]
 8108850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108852:	2b00      	cmp	r3, #0
 8108854:	d003      	beq.n	810885e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8108856:	68fb      	ldr	r3, [r7, #12]
 8108858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810885a:	2200      	movs	r2, #0
 810885c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 810885e:	68f8      	ldr	r0, [r7, #12]
 8108860:	f7ff fdca 	bl	81083f8 <I2C_TreatErrorCallback>
}
 8108864:	bf00      	nop
 8108866:	3710      	adds	r7, #16
 8108868:	46bd      	mov	sp, r7
 810886a:	bd80      	pop	{r7, pc}

0810886c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 810886c:	b580      	push	{r7, lr}
 810886e:	b084      	sub	sp, #16
 8108870:	af00      	add	r7, sp, #0
 8108872:	60f8      	str	r0, [r7, #12]
 8108874:	60b9      	str	r1, [r7, #8]
 8108876:	603b      	str	r3, [r7, #0]
 8108878:	4613      	mov	r3, r2
 810887a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810887c:	e022      	b.n	81088c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810887e:	683b      	ldr	r3, [r7, #0]
 8108880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108884:	d01e      	beq.n	81088c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108886:	f7fa fb23 	bl	8102ed0 <HAL_GetTick>
 810888a:	4602      	mov	r2, r0
 810888c:	69bb      	ldr	r3, [r7, #24]
 810888e:	1ad3      	subs	r3, r2, r3
 8108890:	683a      	ldr	r2, [r7, #0]
 8108892:	429a      	cmp	r2, r3
 8108894:	d302      	bcc.n	810889c <I2C_WaitOnFlagUntilTimeout+0x30>
 8108896:	683b      	ldr	r3, [r7, #0]
 8108898:	2b00      	cmp	r3, #0
 810889a:	d113      	bne.n	81088c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810889c:	68fb      	ldr	r3, [r7, #12]
 810889e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81088a0:	f043 0220 	orr.w	r2, r3, #32
 81088a4:	68fb      	ldr	r3, [r7, #12]
 81088a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81088a8:	68fb      	ldr	r3, [r7, #12]
 81088aa:	2220      	movs	r2, #32
 81088ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81088b0:	68fb      	ldr	r3, [r7, #12]
 81088b2:	2200      	movs	r2, #0
 81088b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81088b8:	68fb      	ldr	r3, [r7, #12]
 81088ba:	2200      	movs	r2, #0
 81088bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81088c0:	2301      	movs	r3, #1
 81088c2:	e00f      	b.n	81088e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81088c4:	68fb      	ldr	r3, [r7, #12]
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	699a      	ldr	r2, [r3, #24]
 81088ca:	68bb      	ldr	r3, [r7, #8]
 81088cc:	4013      	ands	r3, r2
 81088ce:	68ba      	ldr	r2, [r7, #8]
 81088d0:	429a      	cmp	r2, r3
 81088d2:	bf0c      	ite	eq
 81088d4:	2301      	moveq	r3, #1
 81088d6:	2300      	movne	r3, #0
 81088d8:	b2db      	uxtb	r3, r3
 81088da:	461a      	mov	r2, r3
 81088dc:	79fb      	ldrb	r3, [r7, #7]
 81088de:	429a      	cmp	r2, r3
 81088e0:	d0cd      	beq.n	810887e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81088e2:	2300      	movs	r3, #0
}
 81088e4:	4618      	mov	r0, r3
 81088e6:	3710      	adds	r7, #16
 81088e8:	46bd      	mov	sp, r7
 81088ea:	bd80      	pop	{r7, pc}

081088ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81088ec:	b580      	push	{r7, lr}
 81088ee:	b084      	sub	sp, #16
 81088f0:	af00      	add	r7, sp, #0
 81088f2:	60f8      	str	r0, [r7, #12]
 81088f4:	60b9      	str	r1, [r7, #8]
 81088f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81088f8:	e02c      	b.n	8108954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81088fa:	687a      	ldr	r2, [r7, #4]
 81088fc:	68b9      	ldr	r1, [r7, #8]
 81088fe:	68f8      	ldr	r0, [r7, #12]
 8108900:	f000 f870 	bl	81089e4 <I2C_IsAcknowledgeFailed>
 8108904:	4603      	mov	r3, r0
 8108906:	2b00      	cmp	r3, #0
 8108908:	d001      	beq.n	810890e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810890a:	2301      	movs	r3, #1
 810890c:	e02a      	b.n	8108964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810890e:	68bb      	ldr	r3, [r7, #8]
 8108910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108914:	d01e      	beq.n	8108954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108916:	f7fa fadb 	bl	8102ed0 <HAL_GetTick>
 810891a:	4602      	mov	r2, r0
 810891c:	687b      	ldr	r3, [r7, #4]
 810891e:	1ad3      	subs	r3, r2, r3
 8108920:	68ba      	ldr	r2, [r7, #8]
 8108922:	429a      	cmp	r2, r3
 8108924:	d302      	bcc.n	810892c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8108926:	68bb      	ldr	r3, [r7, #8]
 8108928:	2b00      	cmp	r3, #0
 810892a:	d113      	bne.n	8108954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810892c:	68fb      	ldr	r3, [r7, #12]
 810892e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108930:	f043 0220 	orr.w	r2, r3, #32
 8108934:	68fb      	ldr	r3, [r7, #12]
 8108936:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8108938:	68fb      	ldr	r3, [r7, #12]
 810893a:	2220      	movs	r2, #32
 810893c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8108940:	68fb      	ldr	r3, [r7, #12]
 8108942:	2200      	movs	r2, #0
 8108944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8108948:	68fb      	ldr	r3, [r7, #12]
 810894a:	2200      	movs	r2, #0
 810894c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8108950:	2301      	movs	r3, #1
 8108952:	e007      	b.n	8108964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8108954:	68fb      	ldr	r3, [r7, #12]
 8108956:	681b      	ldr	r3, [r3, #0]
 8108958:	699b      	ldr	r3, [r3, #24]
 810895a:	f003 0302 	and.w	r3, r3, #2
 810895e:	2b02      	cmp	r3, #2
 8108960:	d1cb      	bne.n	81088fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8108962:	2300      	movs	r3, #0
}
 8108964:	4618      	mov	r0, r3
 8108966:	3710      	adds	r7, #16
 8108968:	46bd      	mov	sp, r7
 810896a:	bd80      	pop	{r7, pc}

0810896c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810896c:	b580      	push	{r7, lr}
 810896e:	b084      	sub	sp, #16
 8108970:	af00      	add	r7, sp, #0
 8108972:	60f8      	str	r0, [r7, #12]
 8108974:	60b9      	str	r1, [r7, #8]
 8108976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108978:	e028      	b.n	81089cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810897a:	687a      	ldr	r2, [r7, #4]
 810897c:	68b9      	ldr	r1, [r7, #8]
 810897e:	68f8      	ldr	r0, [r7, #12]
 8108980:	f000 f830 	bl	81089e4 <I2C_IsAcknowledgeFailed>
 8108984:	4603      	mov	r3, r0
 8108986:	2b00      	cmp	r3, #0
 8108988:	d001      	beq.n	810898e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810898a:	2301      	movs	r3, #1
 810898c:	e026      	b.n	81089dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810898e:	f7fa fa9f 	bl	8102ed0 <HAL_GetTick>
 8108992:	4602      	mov	r2, r0
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	1ad3      	subs	r3, r2, r3
 8108998:	68ba      	ldr	r2, [r7, #8]
 810899a:	429a      	cmp	r2, r3
 810899c:	d302      	bcc.n	81089a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810899e:	68bb      	ldr	r3, [r7, #8]
 81089a0:	2b00      	cmp	r3, #0
 81089a2:	d113      	bne.n	81089cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81089a4:	68fb      	ldr	r3, [r7, #12]
 81089a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81089a8:	f043 0220 	orr.w	r2, r3, #32
 81089ac:	68fb      	ldr	r3, [r7, #12]
 81089ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81089b0:	68fb      	ldr	r3, [r7, #12]
 81089b2:	2220      	movs	r2, #32
 81089b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81089b8:	68fb      	ldr	r3, [r7, #12]
 81089ba:	2200      	movs	r2, #0
 81089bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81089c0:	68fb      	ldr	r3, [r7, #12]
 81089c2:	2200      	movs	r2, #0
 81089c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81089c8:	2301      	movs	r3, #1
 81089ca:	e007      	b.n	81089dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81089cc:	68fb      	ldr	r3, [r7, #12]
 81089ce:	681b      	ldr	r3, [r3, #0]
 81089d0:	699b      	ldr	r3, [r3, #24]
 81089d2:	f003 0320 	and.w	r3, r3, #32
 81089d6:	2b20      	cmp	r3, #32
 81089d8:	d1cf      	bne.n	810897a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81089da:	2300      	movs	r3, #0
}
 81089dc:	4618      	mov	r0, r3
 81089de:	3710      	adds	r7, #16
 81089e0:	46bd      	mov	sp, r7
 81089e2:	bd80      	pop	{r7, pc}

081089e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81089e4:	b580      	push	{r7, lr}
 81089e6:	b084      	sub	sp, #16
 81089e8:	af00      	add	r7, sp, #0
 81089ea:	60f8      	str	r0, [r7, #12]
 81089ec:	60b9      	str	r1, [r7, #8]
 81089ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81089f0:	68fb      	ldr	r3, [r7, #12]
 81089f2:	681b      	ldr	r3, [r3, #0]
 81089f4:	699b      	ldr	r3, [r3, #24]
 81089f6:	f003 0310 	and.w	r3, r3, #16
 81089fa:	2b10      	cmp	r3, #16
 81089fc:	d151      	bne.n	8108aa2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81089fe:	e022      	b.n	8108a46 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8108a00:	68bb      	ldr	r3, [r7, #8]
 8108a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108a06:	d01e      	beq.n	8108a46 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108a08:	f7fa fa62 	bl	8102ed0 <HAL_GetTick>
 8108a0c:	4602      	mov	r2, r0
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	1ad3      	subs	r3, r2, r3
 8108a12:	68ba      	ldr	r2, [r7, #8]
 8108a14:	429a      	cmp	r2, r3
 8108a16:	d302      	bcc.n	8108a1e <I2C_IsAcknowledgeFailed+0x3a>
 8108a18:	68bb      	ldr	r3, [r7, #8]
 8108a1a:	2b00      	cmp	r3, #0
 8108a1c:	d113      	bne.n	8108a46 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108a1e:	68fb      	ldr	r3, [r7, #12]
 8108a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108a22:	f043 0220 	orr.w	r2, r3, #32
 8108a26:	68fb      	ldr	r3, [r7, #12]
 8108a28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8108a2a:	68fb      	ldr	r3, [r7, #12]
 8108a2c:	2220      	movs	r2, #32
 8108a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8108a32:	68fb      	ldr	r3, [r7, #12]
 8108a34:	2200      	movs	r2, #0
 8108a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8108a3a:	68fb      	ldr	r3, [r7, #12]
 8108a3c:	2200      	movs	r2, #0
 8108a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8108a42:	2301      	movs	r3, #1
 8108a44:	e02e      	b.n	8108aa4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108a46:	68fb      	ldr	r3, [r7, #12]
 8108a48:	681b      	ldr	r3, [r3, #0]
 8108a4a:	699b      	ldr	r3, [r3, #24]
 8108a4c:	f003 0320 	and.w	r3, r3, #32
 8108a50:	2b20      	cmp	r3, #32
 8108a52:	d1d5      	bne.n	8108a00 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108a54:	68fb      	ldr	r3, [r7, #12]
 8108a56:	681b      	ldr	r3, [r3, #0]
 8108a58:	2210      	movs	r2, #16
 8108a5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8108a5c:	68fb      	ldr	r3, [r7, #12]
 8108a5e:	681b      	ldr	r3, [r3, #0]
 8108a60:	2220      	movs	r2, #32
 8108a62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8108a64:	68f8      	ldr	r0, [r7, #12]
 8108a66:	f7ff fcee 	bl	8108446 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8108a6a:	68fb      	ldr	r3, [r7, #12]
 8108a6c:	681b      	ldr	r3, [r3, #0]
 8108a6e:	6859      	ldr	r1, [r3, #4]
 8108a70:	68fb      	ldr	r3, [r7, #12]
 8108a72:	681a      	ldr	r2, [r3, #0]
 8108a74:	4b0d      	ldr	r3, [pc, #52]	; (8108aac <I2C_IsAcknowledgeFailed+0xc8>)
 8108a76:	400b      	ands	r3, r1
 8108a78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8108a7a:	68fb      	ldr	r3, [r7, #12]
 8108a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108a7e:	f043 0204 	orr.w	r2, r3, #4
 8108a82:	68fb      	ldr	r3, [r7, #12]
 8108a84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8108a86:	68fb      	ldr	r3, [r7, #12]
 8108a88:	2220      	movs	r2, #32
 8108a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8108a8e:	68fb      	ldr	r3, [r7, #12]
 8108a90:	2200      	movs	r2, #0
 8108a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108a96:	68fb      	ldr	r3, [r7, #12]
 8108a98:	2200      	movs	r2, #0
 8108a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8108a9e:	2301      	movs	r3, #1
 8108aa0:	e000      	b.n	8108aa4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8108aa2:	2300      	movs	r3, #0
}
 8108aa4:	4618      	mov	r0, r3
 8108aa6:	3710      	adds	r7, #16
 8108aa8:	46bd      	mov	sp, r7
 8108aaa:	bd80      	pop	{r7, pc}
 8108aac:	fe00e800 	.word	0xfe00e800

08108ab0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8108ab0:	b480      	push	{r7}
 8108ab2:	b085      	sub	sp, #20
 8108ab4:	af00      	add	r7, sp, #0
 8108ab6:	60f8      	str	r0, [r7, #12]
 8108ab8:	607b      	str	r3, [r7, #4]
 8108aba:	460b      	mov	r3, r1
 8108abc:	817b      	strh	r3, [r7, #10]
 8108abe:	4613      	mov	r3, r2
 8108ac0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8108ac2:	68fb      	ldr	r3, [r7, #12]
 8108ac4:	681b      	ldr	r3, [r3, #0]
 8108ac6:	685a      	ldr	r2, [r3, #4]
 8108ac8:	69bb      	ldr	r3, [r7, #24]
 8108aca:	0d5b      	lsrs	r3, r3, #21
 8108acc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8108ad0:	4b0d      	ldr	r3, [pc, #52]	; (8108b08 <I2C_TransferConfig+0x58>)
 8108ad2:	430b      	orrs	r3, r1
 8108ad4:	43db      	mvns	r3, r3
 8108ad6:	ea02 0103 	and.w	r1, r2, r3
 8108ada:	897b      	ldrh	r3, [r7, #10]
 8108adc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8108ae0:	7a7b      	ldrb	r3, [r7, #9]
 8108ae2:	041b      	lsls	r3, r3, #16
 8108ae4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8108ae8:	431a      	orrs	r2, r3
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	431a      	orrs	r2, r3
 8108aee:	69bb      	ldr	r3, [r7, #24]
 8108af0:	431a      	orrs	r2, r3
 8108af2:	68fb      	ldr	r3, [r7, #12]
 8108af4:	681b      	ldr	r3, [r3, #0]
 8108af6:	430a      	orrs	r2, r1
 8108af8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8108afa:	bf00      	nop
 8108afc:	3714      	adds	r7, #20
 8108afe:	46bd      	mov	sp, r7
 8108b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b04:	4770      	bx	lr
 8108b06:	bf00      	nop
 8108b08:	03ff63ff 	.word	0x03ff63ff

08108b0c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108b0c:	b480      	push	{r7}
 8108b0e:	b085      	sub	sp, #20
 8108b10:	af00      	add	r7, sp, #0
 8108b12:	6078      	str	r0, [r7, #4]
 8108b14:	460b      	mov	r3, r1
 8108b16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108b18:	2300      	movs	r3, #0
 8108b1a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8108b1c:	687b      	ldr	r3, [r7, #4]
 8108b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108b20:	4a2a      	ldr	r2, [pc, #168]	; (8108bcc <I2C_Enable_IRQ+0xc0>)
 8108b22:	4293      	cmp	r3, r2
 8108b24:	d004      	beq.n	8108b30 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8108b26:	687b      	ldr	r3, [r7, #4]
 8108b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8108b2a:	4a29      	ldr	r2, [pc, #164]	; (8108bd0 <I2C_Enable_IRQ+0xc4>)
 8108b2c:	4293      	cmp	r3, r2
 8108b2e:	d11d      	bne.n	8108b6c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108b30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108b34:	2b00      	cmp	r3, #0
 8108b36:	da03      	bge.n	8108b40 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108b38:	68fb      	ldr	r3, [r7, #12]
 8108b3a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8108b3e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108b40:	887b      	ldrh	r3, [r7, #2]
 8108b42:	2b10      	cmp	r3, #16
 8108b44:	d103      	bne.n	8108b4e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108b46:	68fb      	ldr	r3, [r7, #12]
 8108b48:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8108b4c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108b4e:	887b      	ldrh	r3, [r7, #2]
 8108b50:	2b20      	cmp	r3, #32
 8108b52:	d103      	bne.n	8108b5c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8108b54:	68fb      	ldr	r3, [r7, #12]
 8108b56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8108b5a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108b5c:	887b      	ldrh	r3, [r7, #2]
 8108b5e:	2b40      	cmp	r3, #64	; 0x40
 8108b60:	d125      	bne.n	8108bae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8108b62:	68fb      	ldr	r3, [r7, #12]
 8108b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108b68:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108b6a:	e020      	b.n	8108bae <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108b6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108b70:	2b00      	cmp	r3, #0
 8108b72:	da03      	bge.n	8108b7c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108b74:	68fb      	ldr	r3, [r7, #12]
 8108b76:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8108b7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108b7c:	887b      	ldrh	r3, [r7, #2]
 8108b7e:	f003 0301 	and.w	r3, r3, #1
 8108b82:	2b00      	cmp	r3, #0
 8108b84:	d003      	beq.n	8108b8e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8108b86:	68fb      	ldr	r3, [r7, #12]
 8108b88:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8108b8c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108b8e:	887b      	ldrh	r3, [r7, #2]
 8108b90:	f003 0302 	and.w	r3, r3, #2
 8108b94:	2b00      	cmp	r3, #0
 8108b96:	d003      	beq.n	8108ba0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8108b98:	68fb      	ldr	r3, [r7, #12]
 8108b9a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8108b9e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108ba0:	887b      	ldrh	r3, [r7, #2]
 8108ba2:	2b20      	cmp	r3, #32
 8108ba4:	d103      	bne.n	8108bae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8108ba6:	68fb      	ldr	r3, [r7, #12]
 8108ba8:	f043 0320 	orr.w	r3, r3, #32
 8108bac:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	681b      	ldr	r3, [r3, #0]
 8108bb2:	6819      	ldr	r1, [r3, #0]
 8108bb4:	687b      	ldr	r3, [r7, #4]
 8108bb6:	681b      	ldr	r3, [r3, #0]
 8108bb8:	68fa      	ldr	r2, [r7, #12]
 8108bba:	430a      	orrs	r2, r1
 8108bbc:	601a      	str	r2, [r3, #0]
}
 8108bbe:	bf00      	nop
 8108bc0:	3714      	adds	r7, #20
 8108bc2:	46bd      	mov	sp, r7
 8108bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bc8:	4770      	bx	lr
 8108bca:	bf00      	nop
 8108bcc:	081072ed 	.word	0x081072ed
 8108bd0:	081074d5 	.word	0x081074d5

08108bd4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108bd4:	b480      	push	{r7}
 8108bd6:	b085      	sub	sp, #20
 8108bd8:	af00      	add	r7, sp, #0
 8108bda:	6078      	str	r0, [r7, #4]
 8108bdc:	460b      	mov	r3, r1
 8108bde:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108be0:	2300      	movs	r3, #0
 8108be2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108be4:	887b      	ldrh	r3, [r7, #2]
 8108be6:	f003 0301 	and.w	r3, r3, #1
 8108bea:	2b00      	cmp	r3, #0
 8108bec:	d00f      	beq.n	8108c0e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8108bee:	68fb      	ldr	r3, [r7, #12]
 8108bf0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8108bf4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108bf6:	687b      	ldr	r3, [r7, #4]
 8108bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108bfc:	b2db      	uxtb	r3, r3
 8108bfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108c02:	2b28      	cmp	r3, #40	; 0x28
 8108c04:	d003      	beq.n	8108c0e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108c06:	68fb      	ldr	r3, [r7, #12]
 8108c08:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8108c0c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108c0e:	887b      	ldrh	r3, [r7, #2]
 8108c10:	f003 0302 	and.w	r3, r3, #2
 8108c14:	2b00      	cmp	r3, #0
 8108c16:	d00f      	beq.n	8108c38 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8108c18:	68fb      	ldr	r3, [r7, #12]
 8108c1a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8108c1e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108c20:	687b      	ldr	r3, [r7, #4]
 8108c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108c26:	b2db      	uxtb	r3, r3
 8108c28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108c2c:	2b28      	cmp	r3, #40	; 0x28
 8108c2e:	d003      	beq.n	8108c38 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108c30:	68fb      	ldr	r3, [r7, #12]
 8108c32:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8108c36:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108c38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108c3c:	2b00      	cmp	r3, #0
 8108c3e:	da03      	bge.n	8108c48 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108c40:	68fb      	ldr	r3, [r7, #12]
 8108c42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8108c46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108c48:	887b      	ldrh	r3, [r7, #2]
 8108c4a:	2b10      	cmp	r3, #16
 8108c4c:	d103      	bne.n	8108c56 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108c4e:	68fb      	ldr	r3, [r7, #12]
 8108c50:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8108c54:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108c56:	887b      	ldrh	r3, [r7, #2]
 8108c58:	2b20      	cmp	r3, #32
 8108c5a:	d103      	bne.n	8108c64 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8108c5c:	68fb      	ldr	r3, [r7, #12]
 8108c5e:	f043 0320 	orr.w	r3, r3, #32
 8108c62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108c64:	887b      	ldrh	r3, [r7, #2]
 8108c66:	2b40      	cmp	r3, #64	; 0x40
 8108c68:	d103      	bne.n	8108c72 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8108c6a:	68fb      	ldr	r3, [r7, #12]
 8108c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108c70:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8108c72:	687b      	ldr	r3, [r7, #4]
 8108c74:	681b      	ldr	r3, [r3, #0]
 8108c76:	6819      	ldr	r1, [r3, #0]
 8108c78:	68fb      	ldr	r3, [r7, #12]
 8108c7a:	43da      	mvns	r2, r3
 8108c7c:	687b      	ldr	r3, [r7, #4]
 8108c7e:	681b      	ldr	r3, [r3, #0]
 8108c80:	400a      	ands	r2, r1
 8108c82:	601a      	str	r2, [r3, #0]
}
 8108c84:	bf00      	nop
 8108c86:	3714      	adds	r7, #20
 8108c88:	46bd      	mov	sp, r7
 8108c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c8e:	4770      	bx	lr

08108c90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8108c90:	b480      	push	{r7}
 8108c92:	b083      	sub	sp, #12
 8108c94:	af00      	add	r7, sp, #0
 8108c96:	6078      	str	r0, [r7, #4]
 8108c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108c9a:	687b      	ldr	r3, [r7, #4]
 8108c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108ca0:	b2db      	uxtb	r3, r3
 8108ca2:	2b20      	cmp	r3, #32
 8108ca4:	d138      	bne.n	8108d18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108ca6:	687b      	ldr	r3, [r7, #4]
 8108ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108cac:	2b01      	cmp	r3, #1
 8108cae:	d101      	bne.n	8108cb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8108cb0:	2302      	movs	r3, #2
 8108cb2:	e032      	b.n	8108d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8108cb4:	687b      	ldr	r3, [r7, #4]
 8108cb6:	2201      	movs	r2, #1
 8108cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108cbc:	687b      	ldr	r3, [r7, #4]
 8108cbe:	2224      	movs	r2, #36	; 0x24
 8108cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108cc4:	687b      	ldr	r3, [r7, #4]
 8108cc6:	681b      	ldr	r3, [r3, #0]
 8108cc8:	681a      	ldr	r2, [r3, #0]
 8108cca:	687b      	ldr	r3, [r7, #4]
 8108ccc:	681b      	ldr	r3, [r3, #0]
 8108cce:	f022 0201 	bic.w	r2, r2, #1
 8108cd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8108cd4:	687b      	ldr	r3, [r7, #4]
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	681a      	ldr	r2, [r3, #0]
 8108cda:	687b      	ldr	r3, [r7, #4]
 8108cdc:	681b      	ldr	r3, [r3, #0]
 8108cde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8108ce2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8108ce4:	687b      	ldr	r3, [r7, #4]
 8108ce6:	681b      	ldr	r3, [r3, #0]
 8108ce8:	6819      	ldr	r1, [r3, #0]
 8108cea:	687b      	ldr	r3, [r7, #4]
 8108cec:	681b      	ldr	r3, [r3, #0]
 8108cee:	683a      	ldr	r2, [r7, #0]
 8108cf0:	430a      	orrs	r2, r1
 8108cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	681b      	ldr	r3, [r3, #0]
 8108cf8:	681a      	ldr	r2, [r3, #0]
 8108cfa:	687b      	ldr	r3, [r7, #4]
 8108cfc:	681b      	ldr	r3, [r3, #0]
 8108cfe:	f042 0201 	orr.w	r2, r2, #1
 8108d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	2220      	movs	r2, #32
 8108d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108d0c:	687b      	ldr	r3, [r7, #4]
 8108d0e:	2200      	movs	r2, #0
 8108d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108d14:	2300      	movs	r3, #0
 8108d16:	e000      	b.n	8108d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8108d18:	2302      	movs	r3, #2
  }
}
 8108d1a:	4618      	mov	r0, r3
 8108d1c:	370c      	adds	r7, #12
 8108d1e:	46bd      	mov	sp, r7
 8108d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d24:	4770      	bx	lr

08108d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8108d26:	b480      	push	{r7}
 8108d28:	b085      	sub	sp, #20
 8108d2a:	af00      	add	r7, sp, #0
 8108d2c:	6078      	str	r0, [r7, #4]
 8108d2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108d30:	687b      	ldr	r3, [r7, #4]
 8108d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108d36:	b2db      	uxtb	r3, r3
 8108d38:	2b20      	cmp	r3, #32
 8108d3a:	d139      	bne.n	8108db0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108d3c:	687b      	ldr	r3, [r7, #4]
 8108d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108d42:	2b01      	cmp	r3, #1
 8108d44:	d101      	bne.n	8108d4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8108d46:	2302      	movs	r3, #2
 8108d48:	e033      	b.n	8108db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8108d4a:	687b      	ldr	r3, [r7, #4]
 8108d4c:	2201      	movs	r2, #1
 8108d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108d52:	687b      	ldr	r3, [r7, #4]
 8108d54:	2224      	movs	r2, #36	; 0x24
 8108d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108d5a:	687b      	ldr	r3, [r7, #4]
 8108d5c:	681b      	ldr	r3, [r3, #0]
 8108d5e:	681a      	ldr	r2, [r3, #0]
 8108d60:	687b      	ldr	r3, [r7, #4]
 8108d62:	681b      	ldr	r3, [r3, #0]
 8108d64:	f022 0201 	bic.w	r2, r2, #1
 8108d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8108d6a:	687b      	ldr	r3, [r7, #4]
 8108d6c:	681b      	ldr	r3, [r3, #0]
 8108d6e:	681b      	ldr	r3, [r3, #0]
 8108d70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8108d72:	68fb      	ldr	r3, [r7, #12]
 8108d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8108d78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8108d7a:	683b      	ldr	r3, [r7, #0]
 8108d7c:	021b      	lsls	r3, r3, #8
 8108d7e:	68fa      	ldr	r2, [r7, #12]
 8108d80:	4313      	orrs	r3, r2
 8108d82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8108d84:	687b      	ldr	r3, [r7, #4]
 8108d86:	681b      	ldr	r3, [r3, #0]
 8108d88:	68fa      	ldr	r2, [r7, #12]
 8108d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108d8c:	687b      	ldr	r3, [r7, #4]
 8108d8e:	681b      	ldr	r3, [r3, #0]
 8108d90:	681a      	ldr	r2, [r3, #0]
 8108d92:	687b      	ldr	r3, [r7, #4]
 8108d94:	681b      	ldr	r3, [r3, #0]
 8108d96:	f042 0201 	orr.w	r2, r2, #1
 8108d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108d9c:	687b      	ldr	r3, [r7, #4]
 8108d9e:	2220      	movs	r2, #32
 8108da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	2200      	movs	r2, #0
 8108da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108dac:	2300      	movs	r3, #0
 8108dae:	e000      	b.n	8108db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8108db0:	2302      	movs	r3, #2
  }
}
 8108db2:	4618      	mov	r0, r3
 8108db4:	3714      	adds	r7, #20
 8108db6:	46bd      	mov	sp, r7
 8108db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dbc:	4770      	bx	lr
	...

08108dc0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8108dc0:	b580      	push	{r7, lr}
 8108dc2:	b084      	sub	sp, #16
 8108dc4:	af00      	add	r7, sp, #0
 8108dc6:	60f8      	str	r0, [r7, #12]
 8108dc8:	460b      	mov	r3, r1
 8108dca:	607a      	str	r2, [r7, #4]
 8108dcc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8108dce:	4b37      	ldr	r3, [pc, #220]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108dd0:	681b      	ldr	r3, [r3, #0]
 8108dd2:	f023 0201 	bic.w	r2, r3, #1
 8108dd6:	4935      	ldr	r1, [pc, #212]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108dd8:	68fb      	ldr	r3, [r7, #12]
 8108dda:	4313      	orrs	r3, r2
 8108ddc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8108dde:	687b      	ldr	r3, [r7, #4]
 8108de0:	2b00      	cmp	r3, #0
 8108de2:	d123      	bne.n	8108e2c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8108de4:	f7fa fca6 	bl	8103734 <HAL_GetCurrentCPUID>
 8108de8:	4603      	mov	r3, r0
 8108dea:	2b03      	cmp	r3, #3
 8108dec:	d158      	bne.n	8108ea0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8108dee:	4b2f      	ldr	r3, [pc, #188]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108df0:	691b      	ldr	r3, [r3, #16]
 8108df2:	4a2e      	ldr	r2, [pc, #184]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108df4:	f023 0301 	bic.w	r3, r3, #1
 8108df8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108dfa:	4b2d      	ldr	r3, [pc, #180]	; (8108eb0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108dfc:	691b      	ldr	r3, [r3, #16]
 8108dfe:	4a2c      	ldr	r2, [pc, #176]	; (8108eb0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e00:	f043 0304 	orr.w	r3, r3, #4
 8108e04:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8108e06:	f3bf 8f4f 	dsb	sy
}
 8108e0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108e0c:	f3bf 8f6f 	isb	sy
}
 8108e10:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108e12:	7afb      	ldrb	r3, [r7, #11]
 8108e14:	2b01      	cmp	r3, #1
 8108e16:	d101      	bne.n	8108e1c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108e18:	bf30      	wfi
 8108e1a:	e000      	b.n	8108e1e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108e1c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108e1e:	4b24      	ldr	r3, [pc, #144]	; (8108eb0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e20:	691b      	ldr	r3, [r3, #16]
 8108e22:	4a23      	ldr	r2, [pc, #140]	; (8108eb0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e24:	f023 0304 	bic.w	r3, r3, #4
 8108e28:	6113      	str	r3, [r2, #16]
 8108e2a:	e03c      	b.n	8108ea6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	2b01      	cmp	r3, #1
 8108e30:	d123      	bne.n	8108e7a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8108e32:	f7fa fc7f 	bl	8103734 <HAL_GetCurrentCPUID>
 8108e36:	4603      	mov	r3, r0
 8108e38:	2b01      	cmp	r3, #1
 8108e3a:	d133      	bne.n	8108ea4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8108e3c:	4b1b      	ldr	r3, [pc, #108]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e3e:	695b      	ldr	r3, [r3, #20]
 8108e40:	4a1a      	ldr	r2, [pc, #104]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e42:	f023 0302 	bic.w	r3, r3, #2
 8108e46:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108e48:	4b19      	ldr	r3, [pc, #100]	; (8108eb0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e4a:	691b      	ldr	r3, [r3, #16]
 8108e4c:	4a18      	ldr	r2, [pc, #96]	; (8108eb0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e4e:	f043 0304 	orr.w	r3, r3, #4
 8108e52:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8108e54:	f3bf 8f4f 	dsb	sy
}
 8108e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108e5a:	f3bf 8f6f 	isb	sy
}
 8108e5e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108e60:	7afb      	ldrb	r3, [r7, #11]
 8108e62:	2b01      	cmp	r3, #1
 8108e64:	d101      	bne.n	8108e6a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108e66:	bf30      	wfi
 8108e68:	e000      	b.n	8108e6c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108e6a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108e6c:	4b10      	ldr	r3, [pc, #64]	; (8108eb0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e6e:	691b      	ldr	r3, [r3, #16]
 8108e70:	4a0f      	ldr	r2, [pc, #60]	; (8108eb0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e72:	f023 0304 	bic.w	r3, r3, #4
 8108e76:	6113      	str	r3, [r2, #16]
 8108e78:	e015      	b.n	8108ea6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108e7a:	f7fa fc5b 	bl	8103734 <HAL_GetCurrentCPUID>
 8108e7e:	4603      	mov	r3, r0
 8108e80:	2b03      	cmp	r3, #3
 8108e82:	d106      	bne.n	8108e92 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8108e84:	4b09      	ldr	r3, [pc, #36]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e86:	691b      	ldr	r3, [r3, #16]
 8108e88:	4a08      	ldr	r2, [pc, #32]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e8a:	f023 0304 	bic.w	r3, r3, #4
 8108e8e:	6113      	str	r3, [r2, #16]
 8108e90:	e009      	b.n	8108ea6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8108e92:	4b06      	ldr	r3, [pc, #24]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e94:	695b      	ldr	r3, [r3, #20]
 8108e96:	4a05      	ldr	r2, [pc, #20]	; (8108eac <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e98:	f023 0304 	bic.w	r3, r3, #4
 8108e9c:	6153      	str	r3, [r2, #20]
 8108e9e:	e002      	b.n	8108ea6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108ea0:	bf00      	nop
 8108ea2:	e000      	b.n	8108ea6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108ea4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8108ea6:	3710      	adds	r7, #16
 8108ea8:	46bd      	mov	sp, r7
 8108eaa:	bd80      	pop	{r7, pc}
 8108eac:	58024800 	.word	0x58024800
 8108eb0:	e000ed00 	.word	0xe000ed00

08108eb4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8108eb4:	b580      	push	{r7, lr}
 8108eb6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108eb8:	f7fa fc3c 	bl	8103734 <HAL_GetCurrentCPUID>
 8108ebc:	4603      	mov	r3, r0
 8108ebe:	2b03      	cmp	r3, #3
 8108ec0:	d101      	bne.n	8108ec6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8108ec2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8108ec4:	e001      	b.n	8108eca <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8108ec6:	bf40      	sev
    __WFE ();
 8108ec8:	bf20      	wfe
}
 8108eca:	bf00      	nop
 8108ecc:	bd80      	pop	{r7, pc}
	...

08108ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8108ed0:	b480      	push	{r7}
 8108ed2:	b089      	sub	sp, #36	; 0x24
 8108ed4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8108ed6:	4bb3      	ldr	r3, [pc, #716]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ed8:	691b      	ldr	r3, [r3, #16]
 8108eda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108ede:	2b18      	cmp	r3, #24
 8108ee0:	f200 8155 	bhi.w	810918e <HAL_RCC_GetSysClockFreq+0x2be>
 8108ee4:	a201      	add	r2, pc, #4	; (adr r2, 8108eec <HAL_RCC_GetSysClockFreq+0x1c>)
 8108ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108eea:	bf00      	nop
 8108eec:	08108f51 	.word	0x08108f51
 8108ef0:	0810918f 	.word	0x0810918f
 8108ef4:	0810918f 	.word	0x0810918f
 8108ef8:	0810918f 	.word	0x0810918f
 8108efc:	0810918f 	.word	0x0810918f
 8108f00:	0810918f 	.word	0x0810918f
 8108f04:	0810918f 	.word	0x0810918f
 8108f08:	0810918f 	.word	0x0810918f
 8108f0c:	08108f77 	.word	0x08108f77
 8108f10:	0810918f 	.word	0x0810918f
 8108f14:	0810918f 	.word	0x0810918f
 8108f18:	0810918f 	.word	0x0810918f
 8108f1c:	0810918f 	.word	0x0810918f
 8108f20:	0810918f 	.word	0x0810918f
 8108f24:	0810918f 	.word	0x0810918f
 8108f28:	0810918f 	.word	0x0810918f
 8108f2c:	08108f7d 	.word	0x08108f7d
 8108f30:	0810918f 	.word	0x0810918f
 8108f34:	0810918f 	.word	0x0810918f
 8108f38:	0810918f 	.word	0x0810918f
 8108f3c:	0810918f 	.word	0x0810918f
 8108f40:	0810918f 	.word	0x0810918f
 8108f44:	0810918f 	.word	0x0810918f
 8108f48:	0810918f 	.word	0x0810918f
 8108f4c:	08108f83 	.word	0x08108f83
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108f50:	4b94      	ldr	r3, [pc, #592]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f52:	681b      	ldr	r3, [r3, #0]
 8108f54:	f003 0320 	and.w	r3, r3, #32
 8108f58:	2b00      	cmp	r3, #0
 8108f5a:	d009      	beq.n	8108f70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108f5c:	4b91      	ldr	r3, [pc, #580]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f5e:	681b      	ldr	r3, [r3, #0]
 8108f60:	08db      	lsrs	r3, r3, #3
 8108f62:	f003 0303 	and.w	r3, r3, #3
 8108f66:	4a90      	ldr	r2, [pc, #576]	; (81091a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108f68:	fa22 f303 	lsr.w	r3, r2, r3
 8108f6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8108f6e:	e111      	b.n	8109194 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8108f70:	4b8d      	ldr	r3, [pc, #564]	; (81091a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108f72:	61bb      	str	r3, [r7, #24]
    break;
 8108f74:	e10e      	b.n	8109194 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8108f76:	4b8d      	ldr	r3, [pc, #564]	; (81091ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108f78:	61bb      	str	r3, [r7, #24]
    break;
 8108f7a:	e10b      	b.n	8109194 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8108f7c:	4b8c      	ldr	r3, [pc, #560]	; (81091b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8108f7e:	61bb      	str	r3, [r7, #24]
    break;
 8108f80:	e108      	b.n	8109194 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108f82:	4b88      	ldr	r3, [pc, #544]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f86:	f003 0303 	and.w	r3, r3, #3
 8108f8a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8108f8c:	4b85      	ldr	r3, [pc, #532]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f90:	091b      	lsrs	r3, r3, #4
 8108f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108f96:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8108f98:	4b82      	ldr	r3, [pc, #520]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108f9c:	f003 0301 	and.w	r3, r3, #1
 8108fa0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8108fa2:	4b80      	ldr	r3, [pc, #512]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108fa6:	08db      	lsrs	r3, r3, #3
 8108fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108fac:	68fa      	ldr	r2, [r7, #12]
 8108fae:	fb02 f303 	mul.w	r3, r2, r3
 8108fb2:	ee07 3a90 	vmov	s15, r3
 8108fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108fba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8108fbe:	693b      	ldr	r3, [r7, #16]
 8108fc0:	2b00      	cmp	r3, #0
 8108fc2:	f000 80e1 	beq.w	8109188 <HAL_RCC_GetSysClockFreq+0x2b8>
 8108fc6:	697b      	ldr	r3, [r7, #20]
 8108fc8:	2b02      	cmp	r3, #2
 8108fca:	f000 8083 	beq.w	81090d4 <HAL_RCC_GetSysClockFreq+0x204>
 8108fce:	697b      	ldr	r3, [r7, #20]
 8108fd0:	2b02      	cmp	r3, #2
 8108fd2:	f200 80a1 	bhi.w	8109118 <HAL_RCC_GetSysClockFreq+0x248>
 8108fd6:	697b      	ldr	r3, [r7, #20]
 8108fd8:	2b00      	cmp	r3, #0
 8108fda:	d003      	beq.n	8108fe4 <HAL_RCC_GetSysClockFreq+0x114>
 8108fdc:	697b      	ldr	r3, [r7, #20]
 8108fde:	2b01      	cmp	r3, #1
 8108fe0:	d056      	beq.n	8109090 <HAL_RCC_GetSysClockFreq+0x1c0>
 8108fe2:	e099      	b.n	8109118 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108fe4:	4b6f      	ldr	r3, [pc, #444]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108fe6:	681b      	ldr	r3, [r3, #0]
 8108fe8:	f003 0320 	and.w	r3, r3, #32
 8108fec:	2b00      	cmp	r3, #0
 8108fee:	d02d      	beq.n	810904c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108ff0:	4b6c      	ldr	r3, [pc, #432]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ff2:	681b      	ldr	r3, [r3, #0]
 8108ff4:	08db      	lsrs	r3, r3, #3
 8108ff6:	f003 0303 	and.w	r3, r3, #3
 8108ffa:	4a6b      	ldr	r2, [pc, #428]	; (81091a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8109000:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109002:	687b      	ldr	r3, [r7, #4]
 8109004:	ee07 3a90 	vmov	s15, r3
 8109008:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810900c:	693b      	ldr	r3, [r7, #16]
 810900e:	ee07 3a90 	vmov	s15, r3
 8109012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810901a:	4b62      	ldr	r3, [pc, #392]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810901c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810901e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109022:	ee07 3a90 	vmov	s15, r3
 8109026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810902a:	ed97 6a02 	vldr	s12, [r7, #8]
 810902e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81091b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810903a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810903e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109046:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810904a:	e087      	b.n	810915c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810904c:	693b      	ldr	r3, [r7, #16]
 810904e:	ee07 3a90 	vmov	s15, r3
 8109052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109056:	eddf 6a58 	vldr	s13, [pc, #352]	; 81091b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810905a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810905e:	4b51      	ldr	r3, [pc, #324]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109066:	ee07 3a90 	vmov	s15, r3
 810906a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810906e:	ed97 6a02 	vldr	s12, [r7, #8]
 8109072:	eddf 5a50 	vldr	s11, [pc, #320]	; 81091b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810907a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810907e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109086:	ee67 7a27 	vmul.f32	s15, s14, s15
 810908a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810908e:	e065      	b.n	810915c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109090:	693b      	ldr	r3, [r7, #16]
 8109092:	ee07 3a90 	vmov	s15, r3
 8109096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810909a:	eddf 6a48 	vldr	s13, [pc, #288]	; 81091bc <HAL_RCC_GetSysClockFreq+0x2ec>
 810909e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81090a2:	4b40      	ldr	r3, [pc, #256]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81090a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81090a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81090aa:	ee07 3a90 	vmov	s15, r3
 81090ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81090b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81090b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81091b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81090ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81090be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81090c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81090c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81090ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81090ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81090d2:	e043      	b.n	810915c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81090d4:	693b      	ldr	r3, [r7, #16]
 81090d6:	ee07 3a90 	vmov	s15, r3
 81090da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81090de:	eddf 6a38 	vldr	s13, [pc, #224]	; 81091c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81090e6:	4b2f      	ldr	r3, [pc, #188]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81090e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81090ee:	ee07 3a90 	vmov	s15, r3
 81090f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81090f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81090fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81091b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81090fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109116:	e021      	b.n	810915c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109118:	693b      	ldr	r3, [r7, #16]
 810911a:	ee07 3a90 	vmov	s15, r3
 810911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109122:	eddf 6a26 	vldr	s13, [pc, #152]	; 81091bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8109126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810912a:	4b1e      	ldr	r3, [pc, #120]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810912c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109132:	ee07 3a90 	vmov	s15, r3
 8109136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810913a:	ed97 6a02 	vldr	s12, [r7, #8]
 810913e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81091b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810914a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810915a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810915c:	4b11      	ldr	r3, [pc, #68]	; (81091a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109160:	0a5b      	lsrs	r3, r3, #9
 8109162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109166:	3301      	adds	r3, #1
 8109168:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810916a:	683b      	ldr	r3, [r7, #0]
 810916c:	ee07 3a90 	vmov	s15, r3
 8109170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8109174:	edd7 6a07 	vldr	s13, [r7, #28]
 8109178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810917c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109180:	ee17 3a90 	vmov	r3, s15
 8109184:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8109186:	e005      	b.n	8109194 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8109188:	2300      	movs	r3, #0
 810918a:	61bb      	str	r3, [r7, #24]
    break;
 810918c:	e002      	b.n	8109194 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810918e:	4b07      	ldr	r3, [pc, #28]	; (81091ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109190:	61bb      	str	r3, [r7, #24]
    break;
 8109192:	bf00      	nop
  }

  return sysclockfreq;
 8109194:	69bb      	ldr	r3, [r7, #24]
}
 8109196:	4618      	mov	r0, r3
 8109198:	3724      	adds	r7, #36	; 0x24
 810919a:	46bd      	mov	sp, r7
 810919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091a0:	4770      	bx	lr
 81091a2:	bf00      	nop
 81091a4:	58024400 	.word	0x58024400
 81091a8:	03d09000 	.word	0x03d09000
 81091ac:	003d0900 	.word	0x003d0900
 81091b0:	00f42400 	.word	0x00f42400
 81091b4:	46000000 	.word	0x46000000
 81091b8:	4c742400 	.word	0x4c742400
 81091bc:	4a742400 	.word	0x4a742400
 81091c0:	4b742400 	.word	0x4b742400

081091c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81091c4:	b580      	push	{r7, lr}
 81091c6:	b082      	sub	sp, #8
 81091c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81091ca:	f7ff fe81 	bl	8108ed0 <HAL_RCC_GetSysClockFreq>
 81091ce:	4602      	mov	r2, r0
 81091d0:	4b11      	ldr	r3, [pc, #68]	; (8109218 <HAL_RCC_GetHCLKFreq+0x54>)
 81091d2:	699b      	ldr	r3, [r3, #24]
 81091d4:	0a1b      	lsrs	r3, r3, #8
 81091d6:	f003 030f 	and.w	r3, r3, #15
 81091da:	4910      	ldr	r1, [pc, #64]	; (810921c <HAL_RCC_GetHCLKFreq+0x58>)
 81091dc:	5ccb      	ldrb	r3, [r1, r3]
 81091de:	f003 031f 	and.w	r3, r3, #31
 81091e2:	fa22 f303 	lsr.w	r3, r2, r3
 81091e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81091e8:	4b0b      	ldr	r3, [pc, #44]	; (8109218 <HAL_RCC_GetHCLKFreq+0x54>)
 81091ea:	699b      	ldr	r3, [r3, #24]
 81091ec:	f003 030f 	and.w	r3, r3, #15
 81091f0:	4a0a      	ldr	r2, [pc, #40]	; (810921c <HAL_RCC_GetHCLKFreq+0x58>)
 81091f2:	5cd3      	ldrb	r3, [r2, r3]
 81091f4:	f003 031f 	and.w	r3, r3, #31
 81091f8:	687a      	ldr	r2, [r7, #4]
 81091fa:	fa22 f303 	lsr.w	r3, r2, r3
 81091fe:	4a08      	ldr	r2, [pc, #32]	; (8109220 <HAL_RCC_GetHCLKFreq+0x5c>)
 8109200:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8109202:	4b07      	ldr	r3, [pc, #28]	; (8109220 <HAL_RCC_GetHCLKFreq+0x5c>)
 8109204:	681b      	ldr	r3, [r3, #0]
 8109206:	4a07      	ldr	r2, [pc, #28]	; (8109224 <HAL_RCC_GetHCLKFreq+0x60>)
 8109208:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810920a:	4b05      	ldr	r3, [pc, #20]	; (8109220 <HAL_RCC_GetHCLKFreq+0x5c>)
 810920c:	681b      	ldr	r3, [r3, #0]
}
 810920e:	4618      	mov	r0, r3
 8109210:	3708      	adds	r7, #8
 8109212:	46bd      	mov	sp, r7
 8109214:	bd80      	pop	{r7, pc}
 8109216:	bf00      	nop
 8109218:	58024400 	.word	0x58024400
 810921c:	0810e928 	.word	0x0810e928
 8109220:	10000004 	.word	0x10000004
 8109224:	10000000 	.word	0x10000000

08109228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8109228:	b580      	push	{r7, lr}
 810922a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810922c:	f7ff ffca 	bl	81091c4 <HAL_RCC_GetHCLKFreq>
 8109230:	4602      	mov	r2, r0
 8109232:	4b06      	ldr	r3, [pc, #24]	; (810924c <HAL_RCC_GetPCLK1Freq+0x24>)
 8109234:	69db      	ldr	r3, [r3, #28]
 8109236:	091b      	lsrs	r3, r3, #4
 8109238:	f003 0307 	and.w	r3, r3, #7
 810923c:	4904      	ldr	r1, [pc, #16]	; (8109250 <HAL_RCC_GetPCLK1Freq+0x28>)
 810923e:	5ccb      	ldrb	r3, [r1, r3]
 8109240:	f003 031f 	and.w	r3, r3, #31
 8109244:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8109248:	4618      	mov	r0, r3
 810924a:	bd80      	pop	{r7, pc}
 810924c:	58024400 	.word	0x58024400
 8109250:	0810e928 	.word	0x0810e928

08109254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8109254:	b580      	push	{r7, lr}
 8109256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8109258:	f7ff ffb4 	bl	81091c4 <HAL_RCC_GetHCLKFreq>
 810925c:	4602      	mov	r2, r0
 810925e:	4b06      	ldr	r3, [pc, #24]	; (8109278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8109260:	69db      	ldr	r3, [r3, #28]
 8109262:	0a1b      	lsrs	r3, r3, #8
 8109264:	f003 0307 	and.w	r3, r3, #7
 8109268:	4904      	ldr	r1, [pc, #16]	; (810927c <HAL_RCC_GetPCLK2Freq+0x28>)
 810926a:	5ccb      	ldrb	r3, [r1, r3]
 810926c:	f003 031f 	and.w	r3, r3, #31
 8109270:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8109274:	4618      	mov	r0, r3
 8109276:	bd80      	pop	{r7, pc}
 8109278:	58024400 	.word	0x58024400
 810927c:	0810e928 	.word	0x0810e928

08109280 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8109280:	b580      	push	{r7, lr}
 8109282:	b086      	sub	sp, #24
 8109284:	af00      	add	r7, sp, #0
 8109286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8109288:	2300      	movs	r3, #0
 810928a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810928c:	2300      	movs	r3, #0
 810928e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	681b      	ldr	r3, [r3, #0]
 8109294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109298:	2b00      	cmp	r3, #0
 810929a:	d03f      	beq.n	810931c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810929c:	687b      	ldr	r3, [r7, #4]
 810929e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81092a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81092a4:	d02a      	beq.n	81092fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81092a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81092aa:	d824      	bhi.n	81092f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81092ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81092b0:	d018      	beq.n	81092e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81092b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81092b6:	d81e      	bhi.n	81092f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81092b8:	2b00      	cmp	r3, #0
 81092ba:	d003      	beq.n	81092c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81092bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81092c0:	d007      	beq.n	81092d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 81092c2:	e018      	b.n	81092f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81092c4:	4ba3      	ldr	r3, [pc, #652]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81092c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81092c8:	4aa2      	ldr	r2, [pc, #648]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81092ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81092ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81092d0:	e015      	b.n	81092fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81092d2:	687b      	ldr	r3, [r7, #4]
 81092d4:	3304      	adds	r3, #4
 81092d6:	2102      	movs	r1, #2
 81092d8:	4618      	mov	r0, r3
 81092da:	f001 f9d5 	bl	810a688 <RCCEx_PLL2_Config>
 81092de:	4603      	mov	r3, r0
 81092e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81092e2:	e00c      	b.n	81092fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81092e4:	687b      	ldr	r3, [r7, #4]
 81092e6:	3324      	adds	r3, #36	; 0x24
 81092e8:	2102      	movs	r1, #2
 81092ea:	4618      	mov	r0, r3
 81092ec:	f001 fa7e 	bl	810a7ec <RCCEx_PLL3_Config>
 81092f0:	4603      	mov	r3, r0
 81092f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81092f4:	e003      	b.n	81092fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81092f6:	2301      	movs	r3, #1
 81092f8:	75fb      	strb	r3, [r7, #23]
      break;
 81092fa:	e000      	b.n	81092fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81092fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81092fe:	7dfb      	ldrb	r3, [r7, #23]
 8109300:	2b00      	cmp	r3, #0
 8109302:	d109      	bne.n	8109318 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8109304:	4b93      	ldr	r3, [pc, #588]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8109306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109308:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810930c:	687b      	ldr	r3, [r7, #4]
 810930e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109310:	4990      	ldr	r1, [pc, #576]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8109312:	4313      	orrs	r3, r2
 8109314:	650b      	str	r3, [r1, #80]	; 0x50
 8109316:	e001      	b.n	810931c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109318:	7dfb      	ldrb	r3, [r7, #23]
 810931a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	681b      	ldr	r3, [r3, #0]
 8109320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109324:	2b00      	cmp	r3, #0
 8109326:	d03d      	beq.n	81093a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8109328:	687b      	ldr	r3, [r7, #4]
 810932a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810932c:	2b04      	cmp	r3, #4
 810932e:	d826      	bhi.n	810937e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8109330:	a201      	add	r2, pc, #4	; (adr r2, 8109338 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8109332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109336:	bf00      	nop
 8109338:	0810934d 	.word	0x0810934d
 810933c:	0810935b 	.word	0x0810935b
 8109340:	0810936d 	.word	0x0810936d
 8109344:	08109385 	.word	0x08109385
 8109348:	08109385 	.word	0x08109385
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810934c:	4b81      	ldr	r3, [pc, #516]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109350:	4a80      	ldr	r2, [pc, #512]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8109352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109356:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109358:	e015      	b.n	8109386 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	3304      	adds	r3, #4
 810935e:	2100      	movs	r1, #0
 8109360:	4618      	mov	r0, r3
 8109362:	f001 f991 	bl	810a688 <RCCEx_PLL2_Config>
 8109366:	4603      	mov	r3, r0
 8109368:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810936a:	e00c      	b.n	8109386 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810936c:	687b      	ldr	r3, [r7, #4]
 810936e:	3324      	adds	r3, #36	; 0x24
 8109370:	2100      	movs	r1, #0
 8109372:	4618      	mov	r0, r3
 8109374:	f001 fa3a 	bl	810a7ec <RCCEx_PLL3_Config>
 8109378:	4603      	mov	r3, r0
 810937a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810937c:	e003      	b.n	8109386 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810937e:	2301      	movs	r3, #1
 8109380:	75fb      	strb	r3, [r7, #23]
      break;
 8109382:	e000      	b.n	8109386 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8109384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109386:	7dfb      	ldrb	r3, [r7, #23]
 8109388:	2b00      	cmp	r3, #0
 810938a:	d109      	bne.n	81093a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810938c:	4b71      	ldr	r3, [pc, #452]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810938e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109390:	f023 0207 	bic.w	r2, r3, #7
 8109394:	687b      	ldr	r3, [r7, #4]
 8109396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109398:	496e      	ldr	r1, [pc, #440]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810939a:	4313      	orrs	r3, r2
 810939c:	650b      	str	r3, [r1, #80]	; 0x50
 810939e:	e001      	b.n	81093a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81093a0:	7dfb      	ldrb	r3, [r7, #23]
 81093a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81093a4:	687b      	ldr	r3, [r7, #4]
 81093a6:	681b      	ldr	r3, [r3, #0]
 81093a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81093ac:	2b00      	cmp	r3, #0
 81093ae:	d042      	beq.n	8109436 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81093b0:	687b      	ldr	r3, [r7, #4]
 81093b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81093b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81093b8:	d02b      	beq.n	8109412 <HAL_RCCEx_PeriphCLKConfig+0x192>
 81093ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81093be:	d825      	bhi.n	810940c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81093c0:	2bc0      	cmp	r3, #192	; 0xc0
 81093c2:	d028      	beq.n	8109416 <HAL_RCCEx_PeriphCLKConfig+0x196>
 81093c4:	2bc0      	cmp	r3, #192	; 0xc0
 81093c6:	d821      	bhi.n	810940c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81093c8:	2b80      	cmp	r3, #128	; 0x80
 81093ca:	d016      	beq.n	81093fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81093cc:	2b80      	cmp	r3, #128	; 0x80
 81093ce:	d81d      	bhi.n	810940c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81093d0:	2b00      	cmp	r3, #0
 81093d2:	d002      	beq.n	81093da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81093d4:	2b40      	cmp	r3, #64	; 0x40
 81093d6:	d007      	beq.n	81093e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81093d8:	e018      	b.n	810940c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81093da:	4b5e      	ldr	r3, [pc, #376]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81093de:	4a5d      	ldr	r2, [pc, #372]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81093e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81093e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81093e6:	e017      	b.n	8109418 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81093e8:	687b      	ldr	r3, [r7, #4]
 81093ea:	3304      	adds	r3, #4
 81093ec:	2100      	movs	r1, #0
 81093ee:	4618      	mov	r0, r3
 81093f0:	f001 f94a 	bl	810a688 <RCCEx_PLL2_Config>
 81093f4:	4603      	mov	r3, r0
 81093f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81093f8:	e00e      	b.n	8109418 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81093fa:	687b      	ldr	r3, [r7, #4]
 81093fc:	3324      	adds	r3, #36	; 0x24
 81093fe:	2100      	movs	r1, #0
 8109400:	4618      	mov	r0, r3
 8109402:	f001 f9f3 	bl	810a7ec <RCCEx_PLL3_Config>
 8109406:	4603      	mov	r3, r0
 8109408:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810940a:	e005      	b.n	8109418 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810940c:	2301      	movs	r3, #1
 810940e:	75fb      	strb	r3, [r7, #23]
      break;
 8109410:	e002      	b.n	8109418 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8109412:	bf00      	nop
 8109414:	e000      	b.n	8109418 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8109416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109418:	7dfb      	ldrb	r3, [r7, #23]
 810941a:	2b00      	cmp	r3, #0
 810941c:	d109      	bne.n	8109432 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810941e:	4b4d      	ldr	r3, [pc, #308]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8109420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109422:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8109426:	687b      	ldr	r3, [r7, #4]
 8109428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810942a:	494a      	ldr	r1, [pc, #296]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810942c:	4313      	orrs	r3, r2
 810942e:	650b      	str	r3, [r1, #80]	; 0x50
 8109430:	e001      	b.n	8109436 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109432:	7dfb      	ldrb	r3, [r7, #23]
 8109434:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8109436:	687b      	ldr	r3, [r7, #4]
 8109438:	681b      	ldr	r3, [r3, #0]
 810943a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810943e:	2b00      	cmp	r3, #0
 8109440:	d049      	beq.n	81094d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8109442:	687b      	ldr	r3, [r7, #4]
 8109444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8109448:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810944c:	d030      	beq.n	81094b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 810944e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8109452:	d82a      	bhi.n	81094aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109454:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8109458:	d02c      	beq.n	81094b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810945a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810945e:	d824      	bhi.n	81094aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109464:	d018      	beq.n	8109498 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8109466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810946a:	d81e      	bhi.n	81094aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810946c:	2b00      	cmp	r3, #0
 810946e:	d003      	beq.n	8109478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8109470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109474:	d007      	beq.n	8109486 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8109476:	e018      	b.n	81094aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109478:	4b36      	ldr	r3, [pc, #216]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810947c:	4a35      	ldr	r2, [pc, #212]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810947e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109484:	e017      	b.n	81094b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109486:	687b      	ldr	r3, [r7, #4]
 8109488:	3304      	adds	r3, #4
 810948a:	2100      	movs	r1, #0
 810948c:	4618      	mov	r0, r3
 810948e:	f001 f8fb 	bl	810a688 <RCCEx_PLL2_Config>
 8109492:	4603      	mov	r3, r0
 8109494:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8109496:	e00e      	b.n	81094b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109498:	687b      	ldr	r3, [r7, #4]
 810949a:	3324      	adds	r3, #36	; 0x24
 810949c:	2100      	movs	r1, #0
 810949e:	4618      	mov	r0, r3
 81094a0:	f001 f9a4 	bl	810a7ec <RCCEx_PLL3_Config>
 81094a4:	4603      	mov	r3, r0
 81094a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81094a8:	e005      	b.n	81094b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81094aa:	2301      	movs	r3, #1
 81094ac:	75fb      	strb	r3, [r7, #23]
      break;
 81094ae:	e002      	b.n	81094b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81094b0:	bf00      	nop
 81094b2:	e000      	b.n	81094b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81094b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81094b6:	7dfb      	ldrb	r3, [r7, #23]
 81094b8:	2b00      	cmp	r3, #0
 81094ba:	d10a      	bne.n	81094d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81094bc:	4b25      	ldr	r3, [pc, #148]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81094be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81094c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81094c4:	687b      	ldr	r3, [r7, #4]
 81094c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81094ca:	4922      	ldr	r1, [pc, #136]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81094cc:	4313      	orrs	r3, r2
 81094ce:	658b      	str	r3, [r1, #88]	; 0x58
 81094d0:	e001      	b.n	81094d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81094d2:	7dfb      	ldrb	r3, [r7, #23]
 81094d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81094d6:	687b      	ldr	r3, [r7, #4]
 81094d8:	681b      	ldr	r3, [r3, #0]
 81094da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81094de:	2b00      	cmp	r3, #0
 81094e0:	d04b      	beq.n	810957a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81094e2:	687b      	ldr	r3, [r7, #4]
 81094e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81094e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81094ec:	d030      	beq.n	8109550 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81094ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81094f2:	d82a      	bhi.n	810954a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81094f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81094f8:	d02e      	beq.n	8109558 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81094fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81094fe:	d824      	bhi.n	810954a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8109500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109504:	d018      	beq.n	8109538 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8109506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810950a:	d81e      	bhi.n	810954a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810950c:	2b00      	cmp	r3, #0
 810950e:	d003      	beq.n	8109518 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8109510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8109514:	d007      	beq.n	8109526 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8109516:	e018      	b.n	810954a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109518:	4b0e      	ldr	r3, [pc, #56]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810951c:	4a0d      	ldr	r2, [pc, #52]	; (8109554 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810951e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109522:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109524:	e019      	b.n	810955a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109526:	687b      	ldr	r3, [r7, #4]
 8109528:	3304      	adds	r3, #4
 810952a:	2100      	movs	r1, #0
 810952c:	4618      	mov	r0, r3
 810952e:	f001 f8ab 	bl	810a688 <RCCEx_PLL2_Config>
 8109532:	4603      	mov	r3, r0
 8109534:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8109536:	e010      	b.n	810955a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109538:	687b      	ldr	r3, [r7, #4]
 810953a:	3324      	adds	r3, #36	; 0x24
 810953c:	2100      	movs	r1, #0
 810953e:	4618      	mov	r0, r3
 8109540:	f001 f954 	bl	810a7ec <RCCEx_PLL3_Config>
 8109544:	4603      	mov	r3, r0
 8109546:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109548:	e007      	b.n	810955a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810954a:	2301      	movs	r3, #1
 810954c:	75fb      	strb	r3, [r7, #23]
      break;
 810954e:	e004      	b.n	810955a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8109550:	bf00      	nop
 8109552:	e002      	b.n	810955a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8109554:	58024400 	.word	0x58024400
      break;
 8109558:	bf00      	nop
    }

    if(ret == HAL_OK)
 810955a:	7dfb      	ldrb	r3, [r7, #23]
 810955c:	2b00      	cmp	r3, #0
 810955e:	d10a      	bne.n	8109576 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8109560:	4b99      	ldr	r3, [pc, #612]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109564:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8109568:	687b      	ldr	r3, [r7, #4]
 810956a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810956e:	4996      	ldr	r1, [pc, #600]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109570:	4313      	orrs	r3, r2
 8109572:	658b      	str	r3, [r1, #88]	; 0x58
 8109574:	e001      	b.n	810957a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109576:	7dfb      	ldrb	r3, [r7, #23]
 8109578:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810957a:	687b      	ldr	r3, [r7, #4]
 810957c:	681b      	ldr	r3, [r3, #0]
 810957e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109582:	2b00      	cmp	r3, #0
 8109584:	d032      	beq.n	81095ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8109586:	687b      	ldr	r3, [r7, #4]
 8109588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810958a:	2b30      	cmp	r3, #48	; 0x30
 810958c:	d01c      	beq.n	81095c8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 810958e:	2b30      	cmp	r3, #48	; 0x30
 8109590:	d817      	bhi.n	81095c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8109592:	2b20      	cmp	r3, #32
 8109594:	d00c      	beq.n	81095b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8109596:	2b20      	cmp	r3, #32
 8109598:	d813      	bhi.n	81095c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 810959a:	2b00      	cmp	r3, #0
 810959c:	d016      	beq.n	81095cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 810959e:	2b10      	cmp	r3, #16
 81095a0:	d10f      	bne.n	81095c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81095a2:	4b89      	ldr	r3, [pc, #548]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81095a6:	4a88      	ldr	r2, [pc, #544]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81095a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81095ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81095ae:	e00e      	b.n	81095ce <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	3304      	adds	r3, #4
 81095b4:	2102      	movs	r1, #2
 81095b6:	4618      	mov	r0, r3
 81095b8:	f001 f866 	bl	810a688 <RCCEx_PLL2_Config>
 81095bc:	4603      	mov	r3, r0
 81095be:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81095c0:	e005      	b.n	81095ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81095c2:	2301      	movs	r3, #1
 81095c4:	75fb      	strb	r3, [r7, #23]
      break;
 81095c6:	e002      	b.n	81095ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81095c8:	bf00      	nop
 81095ca:	e000      	b.n	81095ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81095cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81095ce:	7dfb      	ldrb	r3, [r7, #23]
 81095d0:	2b00      	cmp	r3, #0
 81095d2:	d109      	bne.n	81095e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81095d4:	4b7c      	ldr	r3, [pc, #496]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81095d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81095d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81095dc:	687b      	ldr	r3, [r7, #4]
 81095de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81095e0:	4979      	ldr	r1, [pc, #484]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81095e2:	4313      	orrs	r3, r2
 81095e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 81095e6:	e001      	b.n	81095ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81095e8:	7dfb      	ldrb	r3, [r7, #23]
 81095ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81095ec:	687b      	ldr	r3, [r7, #4]
 81095ee:	681b      	ldr	r3, [r3, #0]
 81095f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81095f4:	2b00      	cmp	r3, #0
 81095f6:	d047      	beq.n	8109688 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81095f8:	687b      	ldr	r3, [r7, #4]
 81095fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81095fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109600:	d030      	beq.n	8109664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8109602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109606:	d82a      	bhi.n	810965e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8109608:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810960c:	d02c      	beq.n	8109668 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 810960e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8109612:	d824      	bhi.n	810965e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8109614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109618:	d018      	beq.n	810964c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 810961a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810961e:	d81e      	bhi.n	810965e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8109620:	2b00      	cmp	r3, #0
 8109622:	d003      	beq.n	810962c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8109624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109628:	d007      	beq.n	810963a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 810962a:	e018      	b.n	810965e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810962c:	4b66      	ldr	r3, [pc, #408]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109630:	4a65      	ldr	r2, [pc, #404]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8109638:	e017      	b.n	810966a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	3304      	adds	r3, #4
 810963e:	2100      	movs	r1, #0
 8109640:	4618      	mov	r0, r3
 8109642:	f001 f821 	bl	810a688 <RCCEx_PLL2_Config>
 8109646:	4603      	mov	r3, r0
 8109648:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810964a:	e00e      	b.n	810966a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810964c:	687b      	ldr	r3, [r7, #4]
 810964e:	3324      	adds	r3, #36	; 0x24
 8109650:	2100      	movs	r1, #0
 8109652:	4618      	mov	r0, r3
 8109654:	f001 f8ca 	bl	810a7ec <RCCEx_PLL3_Config>
 8109658:	4603      	mov	r3, r0
 810965a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810965c:	e005      	b.n	810966a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810965e:	2301      	movs	r3, #1
 8109660:	75fb      	strb	r3, [r7, #23]
      break;
 8109662:	e002      	b.n	810966a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8109664:	bf00      	nop
 8109666:	e000      	b.n	810966a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8109668:	bf00      	nop
    }

    if(ret == HAL_OK)
 810966a:	7dfb      	ldrb	r3, [r7, #23]
 810966c:	2b00      	cmp	r3, #0
 810966e:	d109      	bne.n	8109684 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8109670:	4b55      	ldr	r3, [pc, #340]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109674:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810967c:	4952      	ldr	r1, [pc, #328]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810967e:	4313      	orrs	r3, r2
 8109680:	650b      	str	r3, [r1, #80]	; 0x50
 8109682:	e001      	b.n	8109688 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109684:	7dfb      	ldrb	r3, [r7, #23]
 8109686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8109688:	687b      	ldr	r3, [r7, #4]
 810968a:	681b      	ldr	r3, [r3, #0]
 810968c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8109690:	2b00      	cmp	r3, #0
 8109692:	d049      	beq.n	8109728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8109694:	687b      	ldr	r3, [r7, #4]
 8109696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810969c:	d02e      	beq.n	81096fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 810969e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81096a2:	d828      	bhi.n	81096f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81096a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81096a8:	d02a      	beq.n	8109700 <HAL_RCCEx_PeriphCLKConfig+0x480>
 81096aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81096ae:	d822      	bhi.n	81096f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81096b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81096b4:	d026      	beq.n	8109704 <HAL_RCCEx_PeriphCLKConfig+0x484>
 81096b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81096ba:	d81c      	bhi.n	81096f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81096bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81096c0:	d010      	beq.n	81096e4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 81096c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81096c6:	d816      	bhi.n	81096f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81096c8:	2b00      	cmp	r3, #0
 81096ca:	d01d      	beq.n	8109708 <HAL_RCCEx_PeriphCLKConfig+0x488>
 81096cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81096d0:	d111      	bne.n	81096f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81096d2:	687b      	ldr	r3, [r7, #4]
 81096d4:	3304      	adds	r3, #4
 81096d6:	2101      	movs	r1, #1
 81096d8:	4618      	mov	r0, r3
 81096da:	f000 ffd5 	bl	810a688 <RCCEx_PLL2_Config>
 81096de:	4603      	mov	r3, r0
 81096e0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81096e2:	e012      	b.n	810970a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81096e4:	687b      	ldr	r3, [r7, #4]
 81096e6:	3324      	adds	r3, #36	; 0x24
 81096e8:	2101      	movs	r1, #1
 81096ea:	4618      	mov	r0, r3
 81096ec:	f001 f87e 	bl	810a7ec <RCCEx_PLL3_Config>
 81096f0:	4603      	mov	r3, r0
 81096f2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81096f4:	e009      	b.n	810970a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81096f6:	2301      	movs	r3, #1
 81096f8:	75fb      	strb	r3, [r7, #23]
      break;
 81096fa:	e006      	b.n	810970a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81096fc:	bf00      	nop
 81096fe:	e004      	b.n	810970a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8109700:	bf00      	nop
 8109702:	e002      	b.n	810970a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8109704:	bf00      	nop
 8109706:	e000      	b.n	810970a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8109708:	bf00      	nop
    }

    if(ret == HAL_OK)
 810970a:	7dfb      	ldrb	r3, [r7, #23]
 810970c:	2b00      	cmp	r3, #0
 810970e:	d109      	bne.n	8109724 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8109710:	4b2d      	ldr	r3, [pc, #180]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109714:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810971c:	492a      	ldr	r1, [pc, #168]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810971e:	4313      	orrs	r3, r2
 8109720:	650b      	str	r3, [r1, #80]	; 0x50
 8109722:	e001      	b.n	8109728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109724:	7dfb      	ldrb	r3, [r7, #23]
 8109726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8109728:	687b      	ldr	r3, [r7, #4]
 810972a:	681b      	ldr	r3, [r3, #0]
 810972c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8109730:	2b00      	cmp	r3, #0
 8109732:	d04d      	beq.n	81097d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8109734:	687b      	ldr	r3, [r7, #4]
 8109736:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810973a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810973e:	d02e      	beq.n	810979e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8109740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109744:	d828      	bhi.n	8109798 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8109746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810974a:	d02a      	beq.n	81097a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 810974c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109750:	d822      	bhi.n	8109798 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8109752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109756:	d026      	beq.n	81097a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8109758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810975c:	d81c      	bhi.n	8109798 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810975e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109762:	d010      	beq.n	8109786 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8109764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109768:	d816      	bhi.n	8109798 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810976a:	2b00      	cmp	r3, #0
 810976c:	d01d      	beq.n	81097aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 810976e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109772:	d111      	bne.n	8109798 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109774:	687b      	ldr	r3, [r7, #4]
 8109776:	3304      	adds	r3, #4
 8109778:	2101      	movs	r1, #1
 810977a:	4618      	mov	r0, r3
 810977c:	f000 ff84 	bl	810a688 <RCCEx_PLL2_Config>
 8109780:	4603      	mov	r3, r0
 8109782:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8109784:	e012      	b.n	81097ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109786:	687b      	ldr	r3, [r7, #4]
 8109788:	3324      	adds	r3, #36	; 0x24
 810978a:	2101      	movs	r1, #1
 810978c:	4618      	mov	r0, r3
 810978e:	f001 f82d 	bl	810a7ec <RCCEx_PLL3_Config>
 8109792:	4603      	mov	r3, r0
 8109794:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8109796:	e009      	b.n	81097ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8109798:	2301      	movs	r3, #1
 810979a:	75fb      	strb	r3, [r7, #23]
      break;
 810979c:	e006      	b.n	81097ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810979e:	bf00      	nop
 81097a0:	e004      	b.n	81097ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81097a2:	bf00      	nop
 81097a4:	e002      	b.n	81097ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81097a6:	bf00      	nop
 81097a8:	e000      	b.n	81097ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 81097aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81097ac:	7dfb      	ldrb	r3, [r7, #23]
 81097ae:	2b00      	cmp	r3, #0
 81097b0:	d10c      	bne.n	81097cc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81097b2:	4b05      	ldr	r3, [pc, #20]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81097b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81097b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81097ba:	687b      	ldr	r3, [r7, #4]
 81097bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81097c0:	4901      	ldr	r1, [pc, #4]	; (81097c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81097c2:	4313      	orrs	r3, r2
 81097c4:	658b      	str	r3, [r1, #88]	; 0x58
 81097c6:	e003      	b.n	81097d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 81097c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81097cc:	7dfb      	ldrb	r3, [r7, #23]
 81097ce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81097d0:	687b      	ldr	r3, [r7, #4]
 81097d2:	681b      	ldr	r3, [r3, #0]
 81097d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81097d8:	2b00      	cmp	r3, #0
 81097da:	d02f      	beq.n	810983c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81097dc:	687b      	ldr	r3, [r7, #4]
 81097de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81097e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81097e4:	d00e      	beq.n	8109804 <HAL_RCCEx_PeriphCLKConfig+0x584>
 81097e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81097ea:	d814      	bhi.n	8109816 <HAL_RCCEx_PeriphCLKConfig+0x596>
 81097ec:	2b00      	cmp	r3, #0
 81097ee:	d015      	beq.n	810981c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 81097f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81097f4:	d10f      	bne.n	8109816 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81097f6:	4bb0      	ldr	r3, [pc, #704]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81097f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81097fa:	4aaf      	ldr	r2, [pc, #700]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81097fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8109802:	e00c      	b.n	810981e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109804:	687b      	ldr	r3, [r7, #4]
 8109806:	3304      	adds	r3, #4
 8109808:	2101      	movs	r1, #1
 810980a:	4618      	mov	r0, r3
 810980c:	f000 ff3c 	bl	810a688 <RCCEx_PLL2_Config>
 8109810:	4603      	mov	r3, r0
 8109812:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8109814:	e003      	b.n	810981e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109816:	2301      	movs	r3, #1
 8109818:	75fb      	strb	r3, [r7, #23]
      break;
 810981a:	e000      	b.n	810981e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 810981c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810981e:	7dfb      	ldrb	r3, [r7, #23]
 8109820:	2b00      	cmp	r3, #0
 8109822:	d109      	bne.n	8109838 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8109824:	4ba4      	ldr	r3, [pc, #656]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109828:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810982c:	687b      	ldr	r3, [r7, #4]
 810982e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109830:	49a1      	ldr	r1, [pc, #644]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109832:	4313      	orrs	r3, r2
 8109834:	650b      	str	r3, [r1, #80]	; 0x50
 8109836:	e001      	b.n	810983c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109838:	7dfb      	ldrb	r3, [r7, #23]
 810983a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810983c:	687b      	ldr	r3, [r7, #4]
 810983e:	681b      	ldr	r3, [r3, #0]
 8109840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8109844:	2b00      	cmp	r3, #0
 8109846:	d032      	beq.n	81098ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8109848:	687b      	ldr	r3, [r7, #4]
 810984a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810984c:	2b03      	cmp	r3, #3
 810984e:	d81b      	bhi.n	8109888 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8109850:	a201      	add	r2, pc, #4	; (adr r2, 8109858 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8109852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109856:	bf00      	nop
 8109858:	0810988f 	.word	0x0810988f
 810985c:	08109869 	.word	0x08109869
 8109860:	08109877 	.word	0x08109877
 8109864:	0810988f 	.word	0x0810988f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109868:	4b93      	ldr	r3, [pc, #588]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810986c:	4a92      	ldr	r2, [pc, #584]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810986e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109872:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8109874:	e00c      	b.n	8109890 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109876:	687b      	ldr	r3, [r7, #4]
 8109878:	3304      	adds	r3, #4
 810987a:	2102      	movs	r1, #2
 810987c:	4618      	mov	r0, r3
 810987e:	f000 ff03 	bl	810a688 <RCCEx_PLL2_Config>
 8109882:	4603      	mov	r3, r0
 8109884:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8109886:	e003      	b.n	8109890 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8109888:	2301      	movs	r3, #1
 810988a:	75fb      	strb	r3, [r7, #23]
      break;
 810988c:	e000      	b.n	8109890 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810988e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109890:	7dfb      	ldrb	r3, [r7, #23]
 8109892:	2b00      	cmp	r3, #0
 8109894:	d109      	bne.n	81098aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8109896:	4b88      	ldr	r3, [pc, #544]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810989a:	f023 0203 	bic.w	r2, r3, #3
 810989e:	687b      	ldr	r3, [r7, #4]
 81098a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81098a2:	4985      	ldr	r1, [pc, #532]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81098a4:	4313      	orrs	r3, r2
 81098a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81098a8:	e001      	b.n	81098ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81098aa:	7dfb      	ldrb	r3, [r7, #23]
 81098ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81098ae:	687b      	ldr	r3, [r7, #4]
 81098b0:	681b      	ldr	r3, [r3, #0]
 81098b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81098b6:	2b00      	cmp	r3, #0
 81098b8:	f000 8088 	beq.w	81099cc <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81098bc:	4b7f      	ldr	r3, [pc, #508]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81098be:	681b      	ldr	r3, [r3, #0]
 81098c0:	4a7e      	ldr	r2, [pc, #504]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81098c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81098c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81098c8:	f7f9 fb02 	bl	8102ed0 <HAL_GetTick>
 81098cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81098ce:	e009      	b.n	81098e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81098d0:	f7f9 fafe 	bl	8102ed0 <HAL_GetTick>
 81098d4:	4602      	mov	r2, r0
 81098d6:	693b      	ldr	r3, [r7, #16]
 81098d8:	1ad3      	subs	r3, r2, r3
 81098da:	2b64      	cmp	r3, #100	; 0x64
 81098dc:	d902      	bls.n	81098e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81098de:	2303      	movs	r3, #3
 81098e0:	75fb      	strb	r3, [r7, #23]
        break;
 81098e2:	e005      	b.n	81098f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81098e4:	4b75      	ldr	r3, [pc, #468]	; (8109abc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81098e6:	681b      	ldr	r3, [r3, #0]
 81098e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81098ec:	2b00      	cmp	r3, #0
 81098ee:	d0ef      	beq.n	81098d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81098f0:	7dfb      	ldrb	r3, [r7, #23]
 81098f2:	2b00      	cmp	r3, #0
 81098f4:	d168      	bne.n	81099c8 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81098f6:	4b70      	ldr	r3, [pc, #448]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81098f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81098fa:	687b      	ldr	r3, [r7, #4]
 81098fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109900:	4053      	eors	r3, r2
 8109902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8109906:	2b00      	cmp	r3, #0
 8109908:	d013      	beq.n	8109932 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810990a:	4b6b      	ldr	r3, [pc, #428]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810990c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810990e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109912:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8109914:	4b68      	ldr	r3, [pc, #416]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109918:	4a67      	ldr	r2, [pc, #412]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810991a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810991e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8109920:	4b65      	ldr	r3, [pc, #404]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109924:	4a64      	ldr	r2, [pc, #400]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810992a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810992c:	4a62      	ldr	r2, [pc, #392]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810992e:	68fb      	ldr	r3, [r7, #12]
 8109930:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8109932:	687b      	ldr	r3, [r7, #4]
 8109934:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810993c:	d115      	bne.n	810996a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810993e:	f7f9 fac7 	bl	8102ed0 <HAL_GetTick>
 8109942:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109944:	e00b      	b.n	810995e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8109946:	f7f9 fac3 	bl	8102ed0 <HAL_GetTick>
 810994a:	4602      	mov	r2, r0
 810994c:	693b      	ldr	r3, [r7, #16]
 810994e:	1ad3      	subs	r3, r2, r3
 8109950:	f241 3288 	movw	r2, #5000	; 0x1388
 8109954:	4293      	cmp	r3, r2
 8109956:	d902      	bls.n	810995e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8109958:	2303      	movs	r3, #3
 810995a:	75fb      	strb	r3, [r7, #23]
            break;
 810995c:	e005      	b.n	810996a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810995e:	4b56      	ldr	r3, [pc, #344]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109962:	f003 0302 	and.w	r3, r3, #2
 8109966:	2b00      	cmp	r3, #0
 8109968:	d0ed      	beq.n	8109946 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810996a:	7dfb      	ldrb	r3, [r7, #23]
 810996c:	2b00      	cmp	r3, #0
 810996e:	d128      	bne.n	81099c2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8109970:	687b      	ldr	r3, [r7, #4]
 8109972:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810997a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810997e:	d10f      	bne.n	81099a0 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8109980:	4b4d      	ldr	r3, [pc, #308]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109982:	691b      	ldr	r3, [r3, #16]
 8109984:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8109988:	687b      	ldr	r3, [r7, #4]
 810998a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810998e:	091b      	lsrs	r3, r3, #4
 8109990:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8109994:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8109998:	4947      	ldr	r1, [pc, #284]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810999a:	4313      	orrs	r3, r2
 810999c:	610b      	str	r3, [r1, #16]
 810999e:	e005      	b.n	81099ac <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81099a0:	4b45      	ldr	r3, [pc, #276]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81099a2:	691b      	ldr	r3, [r3, #16]
 81099a4:	4a44      	ldr	r2, [pc, #272]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81099a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81099aa:	6113      	str	r3, [r2, #16]
 81099ac:	4b42      	ldr	r3, [pc, #264]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81099ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81099b0:	687b      	ldr	r3, [r7, #4]
 81099b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81099b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81099ba:	493f      	ldr	r1, [pc, #252]	; (8109ab8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81099bc:	4313      	orrs	r3, r2
 81099be:	670b      	str	r3, [r1, #112]	; 0x70
 81099c0:	e004      	b.n	81099cc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81099c2:	7dfb      	ldrb	r3, [r7, #23]
 81099c4:	75bb      	strb	r3, [r7, #22]
 81099c6:	e001      	b.n	81099cc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81099c8:	7dfb      	ldrb	r3, [r7, #23]
 81099ca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81099cc:	687b      	ldr	r3, [r7, #4]
 81099ce:	681b      	ldr	r3, [r3, #0]
 81099d0:	f003 0301 	and.w	r3, r3, #1
 81099d4:	2b00      	cmp	r3, #0
 81099d6:	f000 8083 	beq.w	8109ae0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81099da:	687b      	ldr	r3, [r7, #4]
 81099dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81099de:	2b28      	cmp	r3, #40	; 0x28
 81099e0:	d866      	bhi.n	8109ab0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81099e2:	a201      	add	r2, pc, #4	; (adr r2, 81099e8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81099e8:	08109ac1 	.word	0x08109ac1
 81099ec:	08109ab1 	.word	0x08109ab1
 81099f0:	08109ab1 	.word	0x08109ab1
 81099f4:	08109ab1 	.word	0x08109ab1
 81099f8:	08109ab1 	.word	0x08109ab1
 81099fc:	08109ab1 	.word	0x08109ab1
 8109a00:	08109ab1 	.word	0x08109ab1
 8109a04:	08109ab1 	.word	0x08109ab1
 8109a08:	08109a8d 	.word	0x08109a8d
 8109a0c:	08109ab1 	.word	0x08109ab1
 8109a10:	08109ab1 	.word	0x08109ab1
 8109a14:	08109ab1 	.word	0x08109ab1
 8109a18:	08109ab1 	.word	0x08109ab1
 8109a1c:	08109ab1 	.word	0x08109ab1
 8109a20:	08109ab1 	.word	0x08109ab1
 8109a24:	08109ab1 	.word	0x08109ab1
 8109a28:	08109a9f 	.word	0x08109a9f
 8109a2c:	08109ab1 	.word	0x08109ab1
 8109a30:	08109ab1 	.word	0x08109ab1
 8109a34:	08109ab1 	.word	0x08109ab1
 8109a38:	08109ab1 	.word	0x08109ab1
 8109a3c:	08109ab1 	.word	0x08109ab1
 8109a40:	08109ab1 	.word	0x08109ab1
 8109a44:	08109ab1 	.word	0x08109ab1
 8109a48:	08109ac1 	.word	0x08109ac1
 8109a4c:	08109ab1 	.word	0x08109ab1
 8109a50:	08109ab1 	.word	0x08109ab1
 8109a54:	08109ab1 	.word	0x08109ab1
 8109a58:	08109ab1 	.word	0x08109ab1
 8109a5c:	08109ab1 	.word	0x08109ab1
 8109a60:	08109ab1 	.word	0x08109ab1
 8109a64:	08109ab1 	.word	0x08109ab1
 8109a68:	08109ac1 	.word	0x08109ac1
 8109a6c:	08109ab1 	.word	0x08109ab1
 8109a70:	08109ab1 	.word	0x08109ab1
 8109a74:	08109ab1 	.word	0x08109ab1
 8109a78:	08109ab1 	.word	0x08109ab1
 8109a7c:	08109ab1 	.word	0x08109ab1
 8109a80:	08109ab1 	.word	0x08109ab1
 8109a84:	08109ab1 	.word	0x08109ab1
 8109a88:	08109ac1 	.word	0x08109ac1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109a8c:	687b      	ldr	r3, [r7, #4]
 8109a8e:	3304      	adds	r3, #4
 8109a90:	2101      	movs	r1, #1
 8109a92:	4618      	mov	r0, r3
 8109a94:	f000 fdf8 	bl	810a688 <RCCEx_PLL2_Config>
 8109a98:	4603      	mov	r3, r0
 8109a9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8109a9c:	e011      	b.n	8109ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109a9e:	687b      	ldr	r3, [r7, #4]
 8109aa0:	3324      	adds	r3, #36	; 0x24
 8109aa2:	2101      	movs	r1, #1
 8109aa4:	4618      	mov	r0, r3
 8109aa6:	f000 fea1 	bl	810a7ec <RCCEx_PLL3_Config>
 8109aaa:	4603      	mov	r3, r0
 8109aac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8109aae:	e008      	b.n	8109ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109ab0:	2301      	movs	r3, #1
 8109ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8109ab4:	e005      	b.n	8109ac2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8109ab6:	bf00      	nop
 8109ab8:	58024400 	.word	0x58024400
 8109abc:	58024800 	.word	0x58024800
      break;
 8109ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109ac2:	7dfb      	ldrb	r3, [r7, #23]
 8109ac4:	2b00      	cmp	r3, #0
 8109ac6:	d109      	bne.n	8109adc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8109ac8:	4b96      	ldr	r3, [pc, #600]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109acc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8109ad0:	687b      	ldr	r3, [r7, #4]
 8109ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109ad4:	4993      	ldr	r1, [pc, #588]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109ad6:	4313      	orrs	r3, r2
 8109ad8:	654b      	str	r3, [r1, #84]	; 0x54
 8109ada:	e001      	b.n	8109ae0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109adc:	7dfb      	ldrb	r3, [r7, #23]
 8109ade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8109ae0:	687b      	ldr	r3, [r7, #4]
 8109ae2:	681b      	ldr	r3, [r3, #0]
 8109ae4:	f003 0302 	and.w	r3, r3, #2
 8109ae8:	2b00      	cmp	r3, #0
 8109aea:	d038      	beq.n	8109b5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8109aec:	687b      	ldr	r3, [r7, #4]
 8109aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109af0:	2b05      	cmp	r3, #5
 8109af2:	d821      	bhi.n	8109b38 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8109af4:	a201      	add	r2, pc, #4	; (adr r2, 8109afc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8109af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109afa:	bf00      	nop
 8109afc:	08109b3f 	.word	0x08109b3f
 8109b00:	08109b15 	.word	0x08109b15
 8109b04:	08109b27 	.word	0x08109b27
 8109b08:	08109b3f 	.word	0x08109b3f
 8109b0c:	08109b3f 	.word	0x08109b3f
 8109b10:	08109b3f 	.word	0x08109b3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109b14:	687b      	ldr	r3, [r7, #4]
 8109b16:	3304      	adds	r3, #4
 8109b18:	2101      	movs	r1, #1
 8109b1a:	4618      	mov	r0, r3
 8109b1c:	f000 fdb4 	bl	810a688 <RCCEx_PLL2_Config>
 8109b20:	4603      	mov	r3, r0
 8109b22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8109b24:	e00c      	b.n	8109b40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109b26:	687b      	ldr	r3, [r7, #4]
 8109b28:	3324      	adds	r3, #36	; 0x24
 8109b2a:	2101      	movs	r1, #1
 8109b2c:	4618      	mov	r0, r3
 8109b2e:	f000 fe5d 	bl	810a7ec <RCCEx_PLL3_Config>
 8109b32:	4603      	mov	r3, r0
 8109b34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8109b36:	e003      	b.n	8109b40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109b38:	2301      	movs	r3, #1
 8109b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8109b3c:	e000      	b.n	8109b40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8109b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109b40:	7dfb      	ldrb	r3, [r7, #23]
 8109b42:	2b00      	cmp	r3, #0
 8109b44:	d109      	bne.n	8109b5a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8109b46:	4b77      	ldr	r3, [pc, #476]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109b4a:	f023 0207 	bic.w	r2, r3, #7
 8109b4e:	687b      	ldr	r3, [r7, #4]
 8109b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109b52:	4974      	ldr	r1, [pc, #464]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109b54:	4313      	orrs	r3, r2
 8109b56:	654b      	str	r3, [r1, #84]	; 0x54
 8109b58:	e001      	b.n	8109b5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109b5a:	7dfb      	ldrb	r3, [r7, #23]
 8109b5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8109b5e:	687b      	ldr	r3, [r7, #4]
 8109b60:	681b      	ldr	r3, [r3, #0]
 8109b62:	f003 0304 	and.w	r3, r3, #4
 8109b66:	2b00      	cmp	r3, #0
 8109b68:	d03a      	beq.n	8109be0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8109b6a:	687b      	ldr	r3, [r7, #4]
 8109b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109b70:	2b05      	cmp	r3, #5
 8109b72:	d821      	bhi.n	8109bb8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8109b74:	a201      	add	r2, pc, #4	; (adr r2, 8109b7c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8109b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109b7a:	bf00      	nop
 8109b7c:	08109bbf 	.word	0x08109bbf
 8109b80:	08109b95 	.word	0x08109b95
 8109b84:	08109ba7 	.word	0x08109ba7
 8109b88:	08109bbf 	.word	0x08109bbf
 8109b8c:	08109bbf 	.word	0x08109bbf
 8109b90:	08109bbf 	.word	0x08109bbf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109b94:	687b      	ldr	r3, [r7, #4]
 8109b96:	3304      	adds	r3, #4
 8109b98:	2101      	movs	r1, #1
 8109b9a:	4618      	mov	r0, r3
 8109b9c:	f000 fd74 	bl	810a688 <RCCEx_PLL2_Config>
 8109ba0:	4603      	mov	r3, r0
 8109ba2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8109ba4:	e00c      	b.n	8109bc0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109ba6:	687b      	ldr	r3, [r7, #4]
 8109ba8:	3324      	adds	r3, #36	; 0x24
 8109baa:	2101      	movs	r1, #1
 8109bac:	4618      	mov	r0, r3
 8109bae:	f000 fe1d 	bl	810a7ec <RCCEx_PLL3_Config>
 8109bb2:	4603      	mov	r3, r0
 8109bb4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8109bb6:	e003      	b.n	8109bc0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109bb8:	2301      	movs	r3, #1
 8109bba:	75fb      	strb	r3, [r7, #23]
      break;
 8109bbc:	e000      	b.n	8109bc0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8109bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109bc0:	7dfb      	ldrb	r3, [r7, #23]
 8109bc2:	2b00      	cmp	r3, #0
 8109bc4:	d10a      	bne.n	8109bdc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8109bc6:	4b57      	ldr	r3, [pc, #348]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109bca:	f023 0207 	bic.w	r2, r3, #7
 8109bce:	687b      	ldr	r3, [r7, #4]
 8109bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109bd4:	4953      	ldr	r1, [pc, #332]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109bd6:	4313      	orrs	r3, r2
 8109bd8:	658b      	str	r3, [r1, #88]	; 0x58
 8109bda:	e001      	b.n	8109be0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109bdc:	7dfb      	ldrb	r3, [r7, #23]
 8109bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8109be0:	687b      	ldr	r3, [r7, #4]
 8109be2:	681b      	ldr	r3, [r3, #0]
 8109be4:	f003 0320 	and.w	r3, r3, #32
 8109be8:	2b00      	cmp	r3, #0
 8109bea:	d04b      	beq.n	8109c84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8109bec:	687b      	ldr	r3, [r7, #4]
 8109bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109bf6:	d02e      	beq.n	8109c56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8109bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109bfc:	d828      	bhi.n	8109c50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8109bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109c02:	d02a      	beq.n	8109c5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8109c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109c08:	d822      	bhi.n	8109c50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8109c0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109c0e:	d026      	beq.n	8109c5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8109c10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109c14:	d81c      	bhi.n	8109c50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8109c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109c1a:	d010      	beq.n	8109c3e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8109c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109c20:	d816      	bhi.n	8109c50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8109c22:	2b00      	cmp	r3, #0
 8109c24:	d01d      	beq.n	8109c62 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8109c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109c2a:	d111      	bne.n	8109c50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109c2c:	687b      	ldr	r3, [r7, #4]
 8109c2e:	3304      	adds	r3, #4
 8109c30:	2100      	movs	r1, #0
 8109c32:	4618      	mov	r0, r3
 8109c34:	f000 fd28 	bl	810a688 <RCCEx_PLL2_Config>
 8109c38:	4603      	mov	r3, r0
 8109c3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8109c3c:	e012      	b.n	8109c64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109c3e:	687b      	ldr	r3, [r7, #4]
 8109c40:	3324      	adds	r3, #36	; 0x24
 8109c42:	2102      	movs	r1, #2
 8109c44:	4618      	mov	r0, r3
 8109c46:	f000 fdd1 	bl	810a7ec <RCCEx_PLL3_Config>
 8109c4a:	4603      	mov	r3, r0
 8109c4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8109c4e:	e009      	b.n	8109c64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109c50:	2301      	movs	r3, #1
 8109c52:	75fb      	strb	r3, [r7, #23]
      break;
 8109c54:	e006      	b.n	8109c64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8109c56:	bf00      	nop
 8109c58:	e004      	b.n	8109c64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8109c5a:	bf00      	nop
 8109c5c:	e002      	b.n	8109c64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8109c5e:	bf00      	nop
 8109c60:	e000      	b.n	8109c64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8109c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109c64:	7dfb      	ldrb	r3, [r7, #23]
 8109c66:	2b00      	cmp	r3, #0
 8109c68:	d10a      	bne.n	8109c80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8109c6a:	4b2e      	ldr	r3, [pc, #184]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109c6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8109c72:	687b      	ldr	r3, [r7, #4]
 8109c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109c78:	492a      	ldr	r1, [pc, #168]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109c7a:	4313      	orrs	r3, r2
 8109c7c:	654b      	str	r3, [r1, #84]	; 0x54
 8109c7e:	e001      	b.n	8109c84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109c80:	7dfb      	ldrb	r3, [r7, #23]
 8109c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8109c84:	687b      	ldr	r3, [r7, #4]
 8109c86:	681b      	ldr	r3, [r3, #0]
 8109c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109c8c:	2b00      	cmp	r3, #0
 8109c8e:	d04d      	beq.n	8109d2c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8109c90:	687b      	ldr	r3, [r7, #4]
 8109c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8109c96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8109c9a:	d02e      	beq.n	8109cfa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8109c9c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8109ca0:	d828      	bhi.n	8109cf4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8109ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109ca6:	d02a      	beq.n	8109cfe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8109ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109cac:	d822      	bhi.n	8109cf4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8109cae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8109cb2:	d026      	beq.n	8109d02 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8109cb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8109cb8:	d81c      	bhi.n	8109cf4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8109cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109cbe:	d010      	beq.n	8109ce2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8109cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109cc4:	d816      	bhi.n	8109cf4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8109cc6:	2b00      	cmp	r3, #0
 8109cc8:	d01d      	beq.n	8109d06 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8109cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109cce:	d111      	bne.n	8109cf4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109cd0:	687b      	ldr	r3, [r7, #4]
 8109cd2:	3304      	adds	r3, #4
 8109cd4:	2100      	movs	r1, #0
 8109cd6:	4618      	mov	r0, r3
 8109cd8:	f000 fcd6 	bl	810a688 <RCCEx_PLL2_Config>
 8109cdc:	4603      	mov	r3, r0
 8109cde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8109ce0:	e012      	b.n	8109d08 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109ce2:	687b      	ldr	r3, [r7, #4]
 8109ce4:	3324      	adds	r3, #36	; 0x24
 8109ce6:	2102      	movs	r1, #2
 8109ce8:	4618      	mov	r0, r3
 8109cea:	f000 fd7f 	bl	810a7ec <RCCEx_PLL3_Config>
 8109cee:	4603      	mov	r3, r0
 8109cf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8109cf2:	e009      	b.n	8109d08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109cf4:	2301      	movs	r3, #1
 8109cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8109cf8:	e006      	b.n	8109d08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8109cfa:	bf00      	nop
 8109cfc:	e004      	b.n	8109d08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8109cfe:	bf00      	nop
 8109d00:	e002      	b.n	8109d08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8109d02:	bf00      	nop
 8109d04:	e000      	b.n	8109d08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8109d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109d08:	7dfb      	ldrb	r3, [r7, #23]
 8109d0a:	2b00      	cmp	r3, #0
 8109d0c:	d10c      	bne.n	8109d28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8109d0e:	4b05      	ldr	r3, [pc, #20]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109d12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8109d16:	687b      	ldr	r3, [r7, #4]
 8109d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8109d1c:	4901      	ldr	r1, [pc, #4]	; (8109d24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109d1e:	4313      	orrs	r3, r2
 8109d20:	658b      	str	r3, [r1, #88]	; 0x58
 8109d22:	e003      	b.n	8109d2c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8109d24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109d28:	7dfb      	ldrb	r3, [r7, #23]
 8109d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8109d2c:	687b      	ldr	r3, [r7, #4]
 8109d2e:	681b      	ldr	r3, [r3, #0]
 8109d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109d34:	2b00      	cmp	r3, #0
 8109d36:	d04b      	beq.n	8109dd0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8109d38:	687b      	ldr	r3, [r7, #4]
 8109d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8109d3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8109d42:	d02e      	beq.n	8109da2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8109d44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8109d48:	d828      	bhi.n	8109d9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8109d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109d4e:	d02a      	beq.n	8109da6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8109d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109d54:	d822      	bhi.n	8109d9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8109d56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8109d5a:	d026      	beq.n	8109daa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8109d5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8109d60:	d81c      	bhi.n	8109d9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8109d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109d66:	d010      	beq.n	8109d8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8109d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109d6c:	d816      	bhi.n	8109d9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8109d6e:	2b00      	cmp	r3, #0
 8109d70:	d01d      	beq.n	8109dae <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8109d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109d76:	d111      	bne.n	8109d9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109d78:	687b      	ldr	r3, [r7, #4]
 8109d7a:	3304      	adds	r3, #4
 8109d7c:	2100      	movs	r1, #0
 8109d7e:	4618      	mov	r0, r3
 8109d80:	f000 fc82 	bl	810a688 <RCCEx_PLL2_Config>
 8109d84:	4603      	mov	r3, r0
 8109d86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8109d88:	e012      	b.n	8109db0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109d8a:	687b      	ldr	r3, [r7, #4]
 8109d8c:	3324      	adds	r3, #36	; 0x24
 8109d8e:	2102      	movs	r1, #2
 8109d90:	4618      	mov	r0, r3
 8109d92:	f000 fd2b 	bl	810a7ec <RCCEx_PLL3_Config>
 8109d96:	4603      	mov	r3, r0
 8109d98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8109d9a:	e009      	b.n	8109db0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109d9c:	2301      	movs	r3, #1
 8109d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8109da0:	e006      	b.n	8109db0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8109da2:	bf00      	nop
 8109da4:	e004      	b.n	8109db0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8109da6:	bf00      	nop
 8109da8:	e002      	b.n	8109db0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8109daa:	bf00      	nop
 8109dac:	e000      	b.n	8109db0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8109dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109db0:	7dfb      	ldrb	r3, [r7, #23]
 8109db2:	2b00      	cmp	r3, #0
 8109db4:	d10a      	bne.n	8109dcc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8109db6:	4b9d      	ldr	r3, [pc, #628]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8109dbe:	687b      	ldr	r3, [r7, #4]
 8109dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8109dc4:	4999      	ldr	r1, [pc, #612]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109dc6:	4313      	orrs	r3, r2
 8109dc8:	658b      	str	r3, [r1, #88]	; 0x58
 8109dca:	e001      	b.n	8109dd0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109dcc:	7dfb      	ldrb	r3, [r7, #23]
 8109dce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8109dd0:	687b      	ldr	r3, [r7, #4]
 8109dd2:	681b      	ldr	r3, [r3, #0]
 8109dd4:	f003 0308 	and.w	r3, r3, #8
 8109dd8:	2b00      	cmp	r3, #0
 8109dda:	d01a      	beq.n	8109e12 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8109ddc:	687b      	ldr	r3, [r7, #4]
 8109dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109de6:	d10a      	bne.n	8109dfe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8109de8:	687b      	ldr	r3, [r7, #4]
 8109dea:	3324      	adds	r3, #36	; 0x24
 8109dec:	2102      	movs	r1, #2
 8109dee:	4618      	mov	r0, r3
 8109df0:	f000 fcfc 	bl	810a7ec <RCCEx_PLL3_Config>
 8109df4:	4603      	mov	r3, r0
 8109df6:	2b00      	cmp	r3, #0
 8109df8:	d001      	beq.n	8109dfe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8109dfa:	2301      	movs	r3, #1
 8109dfc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8109dfe:	4b8b      	ldr	r3, [pc, #556]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109e02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8109e06:	687b      	ldr	r3, [r7, #4]
 8109e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109e0c:	4987      	ldr	r1, [pc, #540]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109e0e:	4313      	orrs	r3, r2
 8109e10:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8109e12:	687b      	ldr	r3, [r7, #4]
 8109e14:	681b      	ldr	r3, [r3, #0]
 8109e16:	f003 0310 	and.w	r3, r3, #16
 8109e1a:	2b00      	cmp	r3, #0
 8109e1c:	d01a      	beq.n	8109e54 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8109e1e:	687b      	ldr	r3, [r7, #4]
 8109e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8109e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109e28:	d10a      	bne.n	8109e40 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8109e2a:	687b      	ldr	r3, [r7, #4]
 8109e2c:	3324      	adds	r3, #36	; 0x24
 8109e2e:	2102      	movs	r1, #2
 8109e30:	4618      	mov	r0, r3
 8109e32:	f000 fcdb 	bl	810a7ec <RCCEx_PLL3_Config>
 8109e36:	4603      	mov	r3, r0
 8109e38:	2b00      	cmp	r3, #0
 8109e3a:	d001      	beq.n	8109e40 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8109e3c:	2301      	movs	r3, #1
 8109e3e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8109e40:	4b7a      	ldr	r3, [pc, #488]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109e48:	687b      	ldr	r3, [r7, #4]
 8109e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8109e4e:	4977      	ldr	r1, [pc, #476]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109e50:	4313      	orrs	r3, r2
 8109e52:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8109e54:	687b      	ldr	r3, [r7, #4]
 8109e56:	681b      	ldr	r3, [r3, #0]
 8109e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8109e5c:	2b00      	cmp	r3, #0
 8109e5e:	d034      	beq.n	8109eca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8109e60:	687b      	ldr	r3, [r7, #4]
 8109e62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8109e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109e6a:	d01d      	beq.n	8109ea8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8109e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109e70:	d817      	bhi.n	8109ea2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8109e72:	2b00      	cmp	r3, #0
 8109e74:	d003      	beq.n	8109e7e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8109e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109e7a:	d009      	beq.n	8109e90 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8109e7c:	e011      	b.n	8109ea2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109e7e:	687b      	ldr	r3, [r7, #4]
 8109e80:	3304      	adds	r3, #4
 8109e82:	2100      	movs	r1, #0
 8109e84:	4618      	mov	r0, r3
 8109e86:	f000 fbff 	bl	810a688 <RCCEx_PLL2_Config>
 8109e8a:	4603      	mov	r3, r0
 8109e8c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8109e8e:	e00c      	b.n	8109eaa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109e90:	687b      	ldr	r3, [r7, #4]
 8109e92:	3324      	adds	r3, #36	; 0x24
 8109e94:	2102      	movs	r1, #2
 8109e96:	4618      	mov	r0, r3
 8109e98:	f000 fca8 	bl	810a7ec <RCCEx_PLL3_Config>
 8109e9c:	4603      	mov	r3, r0
 8109e9e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8109ea0:	e003      	b.n	8109eaa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109ea2:	2301      	movs	r3, #1
 8109ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8109ea6:	e000      	b.n	8109eaa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8109ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109eaa:	7dfb      	ldrb	r3, [r7, #23]
 8109eac:	2b00      	cmp	r3, #0
 8109eae:	d10a      	bne.n	8109ec6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8109eb0:	4b5e      	ldr	r3, [pc, #376]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8109eb8:	687b      	ldr	r3, [r7, #4]
 8109eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8109ebe:	495b      	ldr	r1, [pc, #364]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109ec0:	4313      	orrs	r3, r2
 8109ec2:	658b      	str	r3, [r1, #88]	; 0x58
 8109ec4:	e001      	b.n	8109eca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109ec6:	7dfb      	ldrb	r3, [r7, #23]
 8109ec8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8109eca:	687b      	ldr	r3, [r7, #4]
 8109ecc:	681b      	ldr	r3, [r3, #0]
 8109ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8109ed2:	2b00      	cmp	r3, #0
 8109ed4:	d033      	beq.n	8109f3e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8109ed6:	687b      	ldr	r3, [r7, #4]
 8109ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109edc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109ee0:	d01c      	beq.n	8109f1c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8109ee2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109ee6:	d816      	bhi.n	8109f16 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8109ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109eec:	d003      	beq.n	8109ef6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8109eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109ef2:	d007      	beq.n	8109f04 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8109ef4:	e00f      	b.n	8109f16 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109ef6:	4b4d      	ldr	r3, [pc, #308]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109efa:	4a4c      	ldr	r2, [pc, #304]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8109f02:	e00c      	b.n	8109f1e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109f04:	687b      	ldr	r3, [r7, #4]
 8109f06:	3324      	adds	r3, #36	; 0x24
 8109f08:	2101      	movs	r1, #1
 8109f0a:	4618      	mov	r0, r3
 8109f0c:	f000 fc6e 	bl	810a7ec <RCCEx_PLL3_Config>
 8109f10:	4603      	mov	r3, r0
 8109f12:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8109f14:	e003      	b.n	8109f1e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109f16:	2301      	movs	r3, #1
 8109f18:	75fb      	strb	r3, [r7, #23]
      break;
 8109f1a:	e000      	b.n	8109f1e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8109f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109f1e:	7dfb      	ldrb	r3, [r7, #23]
 8109f20:	2b00      	cmp	r3, #0
 8109f22:	d10a      	bne.n	8109f3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8109f24:	4b41      	ldr	r3, [pc, #260]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109f28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109f2c:	687b      	ldr	r3, [r7, #4]
 8109f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109f32:	493e      	ldr	r1, [pc, #248]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f34:	4313      	orrs	r3, r2
 8109f36:	654b      	str	r3, [r1, #84]	; 0x54
 8109f38:	e001      	b.n	8109f3e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109f3a:	7dfb      	ldrb	r3, [r7, #23]
 8109f3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8109f3e:	687b      	ldr	r3, [r7, #4]
 8109f40:	681b      	ldr	r3, [r3, #0]
 8109f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109f46:	2b00      	cmp	r3, #0
 8109f48:	d029      	beq.n	8109f9e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8109f4a:	687b      	ldr	r3, [r7, #4]
 8109f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109f4e:	2b00      	cmp	r3, #0
 8109f50:	d003      	beq.n	8109f5a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8109f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109f56:	d007      	beq.n	8109f68 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8109f58:	e00f      	b.n	8109f7a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109f5a:	4b34      	ldr	r3, [pc, #208]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f5e:	4a33      	ldr	r2, [pc, #204]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109f64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109f66:	e00b      	b.n	8109f80 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109f68:	687b      	ldr	r3, [r7, #4]
 8109f6a:	3304      	adds	r3, #4
 8109f6c:	2102      	movs	r1, #2
 8109f6e:	4618      	mov	r0, r3
 8109f70:	f000 fb8a 	bl	810a688 <RCCEx_PLL2_Config>
 8109f74:	4603      	mov	r3, r0
 8109f76:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109f78:	e002      	b.n	8109f80 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8109f7a:	2301      	movs	r3, #1
 8109f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8109f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109f80:	7dfb      	ldrb	r3, [r7, #23]
 8109f82:	2b00      	cmp	r3, #0
 8109f84:	d109      	bne.n	8109f9a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8109f86:	4b29      	ldr	r3, [pc, #164]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8109f8e:	687b      	ldr	r3, [r7, #4]
 8109f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109f92:	4926      	ldr	r1, [pc, #152]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f94:	4313      	orrs	r3, r2
 8109f96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109f98:	e001      	b.n	8109f9e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109f9a:	7dfb      	ldrb	r3, [r7, #23]
 8109f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8109f9e:	687b      	ldr	r3, [r7, #4]
 8109fa0:	681b      	ldr	r3, [r3, #0]
 8109fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109fa6:	2b00      	cmp	r3, #0
 8109fa8:	d00a      	beq.n	8109fc0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8109faa:	687b      	ldr	r3, [r7, #4]
 8109fac:	3324      	adds	r3, #36	; 0x24
 8109fae:	2102      	movs	r1, #2
 8109fb0:	4618      	mov	r0, r3
 8109fb2:	f000 fc1b 	bl	810a7ec <RCCEx_PLL3_Config>
 8109fb6:	4603      	mov	r3, r0
 8109fb8:	2b00      	cmp	r3, #0
 8109fba:	d001      	beq.n	8109fc0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8109fbc:	2301      	movs	r3, #1
 8109fbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8109fc0:	687b      	ldr	r3, [r7, #4]
 8109fc2:	681b      	ldr	r3, [r3, #0]
 8109fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8109fc8:	2b00      	cmp	r3, #0
 8109fca:	d033      	beq.n	810a034 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8109fcc:	687b      	ldr	r3, [r7, #4]
 8109fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109fd4:	d017      	beq.n	810a006 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8109fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109fda:	d811      	bhi.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8109fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109fe0:	d013      	beq.n	810a00a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8109fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109fe6:	d80b      	bhi.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8109fe8:	2b00      	cmp	r3, #0
 8109fea:	d010      	beq.n	810a00e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8109fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109ff0:	d106      	bne.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109ff2:	4b0e      	ldr	r3, [pc, #56]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109ff6:	4a0d      	ldr	r2, [pc, #52]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8109ffe:	e007      	b.n	810a010 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810a000:	2301      	movs	r3, #1
 810a002:	75fb      	strb	r3, [r7, #23]
      break;
 810a004:	e004      	b.n	810a010 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810a006:	bf00      	nop
 810a008:	e002      	b.n	810a010 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810a00a:	bf00      	nop
 810a00c:	e000      	b.n	810a010 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810a00e:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a010:	7dfb      	ldrb	r3, [r7, #23]
 810a012:	2b00      	cmp	r3, #0
 810a014:	d10c      	bne.n	810a030 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810a016:	4b05      	ldr	r3, [pc, #20]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810a018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a01a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810a01e:	687b      	ldr	r3, [r7, #4]
 810a020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a022:	4902      	ldr	r1, [pc, #8]	; (810a02c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810a024:	4313      	orrs	r3, r2
 810a026:	654b      	str	r3, [r1, #84]	; 0x54
 810a028:	e004      	b.n	810a034 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810a02a:	bf00      	nop
 810a02c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a030:	7dfb      	ldrb	r3, [r7, #23]
 810a032:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810a034:	687b      	ldr	r3, [r7, #4]
 810a036:	681b      	ldr	r3, [r3, #0]
 810a038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810a03c:	2b00      	cmp	r3, #0
 810a03e:	d008      	beq.n	810a052 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810a040:	4b31      	ldr	r3, [pc, #196]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a044:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810a048:	687b      	ldr	r3, [r7, #4]
 810a04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a04c:	492e      	ldr	r1, [pc, #184]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a04e:	4313      	orrs	r3, r2
 810a050:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810a052:	687b      	ldr	r3, [r7, #4]
 810a054:	681b      	ldr	r3, [r3, #0]
 810a056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810a05a:	2b00      	cmp	r3, #0
 810a05c:	d009      	beq.n	810a072 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810a05e:	4b2a      	ldr	r3, [pc, #168]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a060:	691b      	ldr	r3, [r3, #16]
 810a062:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810a066:	687b      	ldr	r3, [r7, #4]
 810a068:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810a06c:	4926      	ldr	r1, [pc, #152]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a06e:	4313      	orrs	r3, r2
 810a070:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810a072:	687b      	ldr	r3, [r7, #4]
 810a074:	681b      	ldr	r3, [r3, #0]
 810a076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810a07a:	2b00      	cmp	r3, #0
 810a07c:	d008      	beq.n	810a090 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810a07e:	4b22      	ldr	r3, [pc, #136]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a082:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810a086:	687b      	ldr	r3, [r7, #4]
 810a088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810a08a:	491f      	ldr	r1, [pc, #124]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a08c:	4313      	orrs	r3, r2
 810a08e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810a090:	687b      	ldr	r3, [r7, #4]
 810a092:	681b      	ldr	r3, [r3, #0]
 810a094:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810a098:	2b00      	cmp	r3, #0
 810a09a:	d00d      	beq.n	810a0b8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810a09c:	4b1a      	ldr	r3, [pc, #104]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a09e:	691b      	ldr	r3, [r3, #16]
 810a0a0:	4a19      	ldr	r2, [pc, #100]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810a0a6:	6113      	str	r3, [r2, #16]
 810a0a8:	4b17      	ldr	r3, [pc, #92]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0aa:	691a      	ldr	r2, [r3, #16]
 810a0ac:	687b      	ldr	r3, [r7, #4]
 810a0ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810a0b2:	4915      	ldr	r1, [pc, #84]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0b4:	4313      	orrs	r3, r2
 810a0b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810a0b8:	687b      	ldr	r3, [r7, #4]
 810a0ba:	681b      	ldr	r3, [r3, #0]
 810a0bc:	2b00      	cmp	r3, #0
 810a0be:	da08      	bge.n	810a0d2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810a0c0:	4b11      	ldr	r3, [pc, #68]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a0c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810a0c8:	687b      	ldr	r3, [r7, #4]
 810a0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a0cc:	490e      	ldr	r1, [pc, #56]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0ce:	4313      	orrs	r3, r2
 810a0d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810a0d2:	687b      	ldr	r3, [r7, #4]
 810a0d4:	681b      	ldr	r3, [r3, #0]
 810a0d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810a0da:	2b00      	cmp	r3, #0
 810a0dc:	d009      	beq.n	810a0f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810a0de:	4b0a      	ldr	r3, [pc, #40]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a0e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810a0e6:	687b      	ldr	r3, [r7, #4]
 810a0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810a0ec:	4906      	ldr	r1, [pc, #24]	; (810a108 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0ee:	4313      	orrs	r3, r2
 810a0f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810a0f2:	7dbb      	ldrb	r3, [r7, #22]
 810a0f4:	2b00      	cmp	r3, #0
 810a0f6:	d101      	bne.n	810a0fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 810a0f8:	2300      	movs	r3, #0
 810a0fa:	e000      	b.n	810a0fe <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 810a0fc:	2301      	movs	r3, #1
}
 810a0fe:	4618      	mov	r0, r3
 810a100:	3718      	adds	r7, #24
 810a102:	46bd      	mov	sp, r7
 810a104:	bd80      	pop	{r7, pc}
 810a106:	bf00      	nop
 810a108:	58024400 	.word	0x58024400

0810a10c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810a10c:	b580      	push	{r7, lr}
 810a10e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810a110:	f7ff f858 	bl	81091c4 <HAL_RCC_GetHCLKFreq>
 810a114:	4602      	mov	r2, r0
 810a116:	4b06      	ldr	r3, [pc, #24]	; (810a130 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810a118:	6a1b      	ldr	r3, [r3, #32]
 810a11a:	091b      	lsrs	r3, r3, #4
 810a11c:	f003 0307 	and.w	r3, r3, #7
 810a120:	4904      	ldr	r1, [pc, #16]	; (810a134 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810a122:	5ccb      	ldrb	r3, [r1, r3]
 810a124:	f003 031f 	and.w	r3, r3, #31
 810a128:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810a12c:	4618      	mov	r0, r3
 810a12e:	bd80      	pop	{r7, pc}
 810a130:	58024400 	.word	0x58024400
 810a134:	0810e928 	.word	0x0810e928

0810a138 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810a138:	b480      	push	{r7}
 810a13a:	b089      	sub	sp, #36	; 0x24
 810a13c:	af00      	add	r7, sp, #0
 810a13e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a140:	4ba1      	ldr	r3, [pc, #644]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a144:	f003 0303 	and.w	r3, r3, #3
 810a148:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810a14a:	4b9f      	ldr	r3, [pc, #636]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a14e:	0b1b      	lsrs	r3, r3, #12
 810a150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810a154:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810a156:	4b9c      	ldr	r3, [pc, #624]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a15a:	091b      	lsrs	r3, r3, #4
 810a15c:	f003 0301 	and.w	r3, r3, #1
 810a160:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810a162:	4b99      	ldr	r3, [pc, #612]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a166:	08db      	lsrs	r3, r3, #3
 810a168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a16c:	693a      	ldr	r2, [r7, #16]
 810a16e:	fb02 f303 	mul.w	r3, r2, r3
 810a172:	ee07 3a90 	vmov	s15, r3
 810a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a17a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810a17e:	697b      	ldr	r3, [r7, #20]
 810a180:	2b00      	cmp	r3, #0
 810a182:	f000 8111 	beq.w	810a3a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810a186:	69bb      	ldr	r3, [r7, #24]
 810a188:	2b02      	cmp	r3, #2
 810a18a:	f000 8083 	beq.w	810a294 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810a18e:	69bb      	ldr	r3, [r7, #24]
 810a190:	2b02      	cmp	r3, #2
 810a192:	f200 80a1 	bhi.w	810a2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810a196:	69bb      	ldr	r3, [r7, #24]
 810a198:	2b00      	cmp	r3, #0
 810a19a:	d003      	beq.n	810a1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810a19c:	69bb      	ldr	r3, [r7, #24]
 810a19e:	2b01      	cmp	r3, #1
 810a1a0:	d056      	beq.n	810a250 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810a1a2:	e099      	b.n	810a2d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a1a4:	4b88      	ldr	r3, [pc, #544]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a1a6:	681b      	ldr	r3, [r3, #0]
 810a1a8:	f003 0320 	and.w	r3, r3, #32
 810a1ac:	2b00      	cmp	r3, #0
 810a1ae:	d02d      	beq.n	810a20c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810a1b0:	4b85      	ldr	r3, [pc, #532]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a1b2:	681b      	ldr	r3, [r3, #0]
 810a1b4:	08db      	lsrs	r3, r3, #3
 810a1b6:	f003 0303 	and.w	r3, r3, #3
 810a1ba:	4a84      	ldr	r2, [pc, #528]	; (810a3cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810a1bc:	fa22 f303 	lsr.w	r3, r2, r3
 810a1c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a1c2:	68bb      	ldr	r3, [r7, #8]
 810a1c4:	ee07 3a90 	vmov	s15, r3
 810a1c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a1cc:	697b      	ldr	r3, [r7, #20]
 810a1ce:	ee07 3a90 	vmov	s15, r3
 810a1d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a1da:	4b7b      	ldr	r3, [pc, #492]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a1e2:	ee07 3a90 	vmov	s15, r3
 810a1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 810a1ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 810a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a202:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a206:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810a20a:	e087      	b.n	810a31c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a20c:	697b      	ldr	r3, [r7, #20]
 810a20e:	ee07 3a90 	vmov	s15, r3
 810a212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a216:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810a3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810a21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a21e:	4b6a      	ldr	r3, [pc, #424]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a226:	ee07 3a90 	vmov	s15, r3
 810a22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a22e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a232:	eddf 5a67 	vldr	s11, [pc, #412]	; 810a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a246:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a24a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a24e:	e065      	b.n	810a31c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a250:	697b      	ldr	r3, [r7, #20]
 810a252:	ee07 3a90 	vmov	s15, r3
 810a256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a25a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810a3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810a25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a262:	4b59      	ldr	r3, [pc, #356]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a26a:	ee07 3a90 	vmov	s15, r3
 810a26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a272:	ed97 6a03 	vldr	s12, [r7, #12]
 810a276:	eddf 5a56 	vldr	s11, [pc, #344]	; 810a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a28e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a292:	e043      	b.n	810a31c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a294:	697b      	ldr	r3, [r7, #20]
 810a296:	ee07 3a90 	vmov	s15, r3
 810a29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a29e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810a3dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810a2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a2a6:	4b48      	ldr	r3, [pc, #288]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a2ae:	ee07 3a90 	vmov	s15, r3
 810a2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 810a2ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 810a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a2d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a2d6:	e021      	b.n	810a31c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a2d8:	697b      	ldr	r3, [r7, #20]
 810a2da:	ee07 3a90 	vmov	s15, r3
 810a2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a2e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810a3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810a2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a2ea:	4b37      	ldr	r3, [pc, #220]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a2f2:	ee07 3a90 	vmov	s15, r3
 810a2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 810a2fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 810a3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a30a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a312:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a316:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a31a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810a31c:	4b2a      	ldr	r3, [pc, #168]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a320:	0a5b      	lsrs	r3, r3, #9
 810a322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a326:	ee07 3a90 	vmov	s15, r3
 810a32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a32e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a332:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a336:	edd7 6a07 	vldr	s13, [r7, #28]
 810a33a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a33e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a342:	ee17 2a90 	vmov	r2, s15
 810a346:	687b      	ldr	r3, [r7, #4]
 810a348:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810a34a:	4b1f      	ldr	r3, [pc, #124]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a34e:	0c1b      	lsrs	r3, r3, #16
 810a350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a354:	ee07 3a90 	vmov	s15, r3
 810a358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a35c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a360:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a364:	edd7 6a07 	vldr	s13, [r7, #28]
 810a368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a36c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a370:	ee17 2a90 	vmov	r2, s15
 810a374:	687b      	ldr	r3, [r7, #4]
 810a376:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810a378:	4b13      	ldr	r3, [pc, #76]	; (810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a37c:	0e1b      	lsrs	r3, r3, #24
 810a37e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a382:	ee07 3a90 	vmov	s15, r3
 810a386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a38a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a38e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a392:	edd7 6a07 	vldr	s13, [r7, #28]
 810a396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a39a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a39e:	ee17 2a90 	vmov	r2, s15
 810a3a2:	687b      	ldr	r3, [r7, #4]
 810a3a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810a3a6:	e008      	b.n	810a3ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810a3a8:	687b      	ldr	r3, [r7, #4]
 810a3aa:	2200      	movs	r2, #0
 810a3ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810a3ae:	687b      	ldr	r3, [r7, #4]
 810a3b0:	2200      	movs	r2, #0
 810a3b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810a3b4:	687b      	ldr	r3, [r7, #4]
 810a3b6:	2200      	movs	r2, #0
 810a3b8:	609a      	str	r2, [r3, #8]
}
 810a3ba:	bf00      	nop
 810a3bc:	3724      	adds	r7, #36	; 0x24
 810a3be:	46bd      	mov	sp, r7
 810a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3c4:	4770      	bx	lr
 810a3c6:	bf00      	nop
 810a3c8:	58024400 	.word	0x58024400
 810a3cc:	03d09000 	.word	0x03d09000
 810a3d0:	46000000 	.word	0x46000000
 810a3d4:	4c742400 	.word	0x4c742400
 810a3d8:	4a742400 	.word	0x4a742400
 810a3dc:	4b742400 	.word	0x4b742400

0810a3e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810a3e0:	b480      	push	{r7}
 810a3e2:	b089      	sub	sp, #36	; 0x24
 810a3e4:	af00      	add	r7, sp, #0
 810a3e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a3e8:	4ba1      	ldr	r3, [pc, #644]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a3ec:	f003 0303 	and.w	r3, r3, #3
 810a3f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810a3f2:	4b9f      	ldr	r3, [pc, #636]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a3f6:	0d1b      	lsrs	r3, r3, #20
 810a3f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810a3fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810a3fe:	4b9c      	ldr	r3, [pc, #624]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a402:	0a1b      	lsrs	r3, r3, #8
 810a404:	f003 0301 	and.w	r3, r3, #1
 810a408:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810a40a:	4b99      	ldr	r3, [pc, #612]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a40e:	08db      	lsrs	r3, r3, #3
 810a410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a414:	693a      	ldr	r2, [r7, #16]
 810a416:	fb02 f303 	mul.w	r3, r2, r3
 810a41a:	ee07 3a90 	vmov	s15, r3
 810a41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a422:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810a426:	697b      	ldr	r3, [r7, #20]
 810a428:	2b00      	cmp	r3, #0
 810a42a:	f000 8111 	beq.w	810a650 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810a42e:	69bb      	ldr	r3, [r7, #24]
 810a430:	2b02      	cmp	r3, #2
 810a432:	f000 8083 	beq.w	810a53c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810a436:	69bb      	ldr	r3, [r7, #24]
 810a438:	2b02      	cmp	r3, #2
 810a43a:	f200 80a1 	bhi.w	810a580 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810a43e:	69bb      	ldr	r3, [r7, #24]
 810a440:	2b00      	cmp	r3, #0
 810a442:	d003      	beq.n	810a44c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810a444:	69bb      	ldr	r3, [r7, #24]
 810a446:	2b01      	cmp	r3, #1
 810a448:	d056      	beq.n	810a4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810a44a:	e099      	b.n	810a580 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a44c:	4b88      	ldr	r3, [pc, #544]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a44e:	681b      	ldr	r3, [r3, #0]
 810a450:	f003 0320 	and.w	r3, r3, #32
 810a454:	2b00      	cmp	r3, #0
 810a456:	d02d      	beq.n	810a4b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810a458:	4b85      	ldr	r3, [pc, #532]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a45a:	681b      	ldr	r3, [r3, #0]
 810a45c:	08db      	lsrs	r3, r3, #3
 810a45e:	f003 0303 	and.w	r3, r3, #3
 810a462:	4a84      	ldr	r2, [pc, #528]	; (810a674 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810a464:	fa22 f303 	lsr.w	r3, r2, r3
 810a468:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a46a:	68bb      	ldr	r3, [r7, #8]
 810a46c:	ee07 3a90 	vmov	s15, r3
 810a470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a474:	697b      	ldr	r3, [r7, #20]
 810a476:	ee07 3a90 	vmov	s15, r3
 810a47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a47e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a482:	4b7b      	ldr	r3, [pc, #492]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a48a:	ee07 3a90 	vmov	s15, r3
 810a48e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a492:	ed97 6a03 	vldr	s12, [r7, #12]
 810a496:	eddf 5a78 	vldr	s11, [pc, #480]	; 810a678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a49a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a49e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a4a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a4a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a4aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a4ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810a4b2:	e087      	b.n	810a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a4b4:	697b      	ldr	r3, [r7, #20]
 810a4b6:	ee07 3a90 	vmov	s15, r3
 810a4ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a4be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810a67c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810a4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a4c6:	4b6a      	ldr	r3, [pc, #424]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a4ce:	ee07 3a90 	vmov	s15, r3
 810a4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a4d6:	ed97 6a03 	vldr	s12, [r7, #12]
 810a4da:	eddf 5a67 	vldr	s11, [pc, #412]	; 810a678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a4f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a4f6:	e065      	b.n	810a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a4f8:	697b      	ldr	r3, [r7, #20]
 810a4fa:	ee07 3a90 	vmov	s15, r3
 810a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a502:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810a680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a50a:	4b59      	ldr	r3, [pc, #356]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a512:	ee07 3a90 	vmov	s15, r3
 810a516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a51a:	ed97 6a03 	vldr	s12, [r7, #12]
 810a51e:	eddf 5a56 	vldr	s11, [pc, #344]	; 810a678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a532:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a536:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a53a:	e043      	b.n	810a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a53c:	697b      	ldr	r3, [r7, #20]
 810a53e:	ee07 3a90 	vmov	s15, r3
 810a542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a546:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810a684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810a54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a54e:	4b48      	ldr	r3, [pc, #288]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a556:	ee07 3a90 	vmov	s15, r3
 810a55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a55e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a562:	eddf 5a45 	vldr	s11, [pc, #276]	; 810a678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a576:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a57a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a57e:	e021      	b.n	810a5c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a580:	697b      	ldr	r3, [r7, #20]
 810a582:	ee07 3a90 	vmov	s15, r3
 810a586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a58a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810a680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a592:	4b37      	ldr	r3, [pc, #220]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a59a:	ee07 3a90 	vmov	s15, r3
 810a59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a5a2:	ed97 6a03 	vldr	s12, [r7, #12]
 810a5a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 810a678 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a5be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a5c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810a5c4:	4b2a      	ldr	r3, [pc, #168]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a5c8:	0a5b      	lsrs	r3, r3, #9
 810a5ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a5ce:	ee07 3a90 	vmov	s15, r3
 810a5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a5d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a5da:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a5de:	edd7 6a07 	vldr	s13, [r7, #28]
 810a5e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a5e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a5ea:	ee17 2a90 	vmov	r2, s15
 810a5ee:	687b      	ldr	r3, [r7, #4]
 810a5f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810a5f2:	4b1f      	ldr	r3, [pc, #124]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a5f6:	0c1b      	lsrs	r3, r3, #16
 810a5f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a5fc:	ee07 3a90 	vmov	s15, r3
 810a600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a608:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a60c:	edd7 6a07 	vldr	s13, [r7, #28]
 810a610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a618:	ee17 2a90 	vmov	r2, s15
 810a61c:	687b      	ldr	r3, [r7, #4]
 810a61e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810a620:	4b13      	ldr	r3, [pc, #76]	; (810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a624:	0e1b      	lsrs	r3, r3, #24
 810a626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a62a:	ee07 3a90 	vmov	s15, r3
 810a62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a636:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a63a:	edd7 6a07 	vldr	s13, [r7, #28]
 810a63e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a646:	ee17 2a90 	vmov	r2, s15
 810a64a:	687b      	ldr	r3, [r7, #4]
 810a64c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810a64e:	e008      	b.n	810a662 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810a650:	687b      	ldr	r3, [r7, #4]
 810a652:	2200      	movs	r2, #0
 810a654:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	2200      	movs	r2, #0
 810a65a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810a65c:	687b      	ldr	r3, [r7, #4]
 810a65e:	2200      	movs	r2, #0
 810a660:	609a      	str	r2, [r3, #8]
}
 810a662:	bf00      	nop
 810a664:	3724      	adds	r7, #36	; 0x24
 810a666:	46bd      	mov	sp, r7
 810a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a66c:	4770      	bx	lr
 810a66e:	bf00      	nop
 810a670:	58024400 	.word	0x58024400
 810a674:	03d09000 	.word	0x03d09000
 810a678:	46000000 	.word	0x46000000
 810a67c:	4c742400 	.word	0x4c742400
 810a680:	4a742400 	.word	0x4a742400
 810a684:	4b742400 	.word	0x4b742400

0810a688 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810a688:	b580      	push	{r7, lr}
 810a68a:	b084      	sub	sp, #16
 810a68c:	af00      	add	r7, sp, #0
 810a68e:	6078      	str	r0, [r7, #4]
 810a690:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a692:	2300      	movs	r3, #0
 810a694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a696:	4b54      	ldr	r3, [pc, #336]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a69a:	f003 0303 	and.w	r3, r3, #3
 810a69e:	2b03      	cmp	r3, #3
 810a6a0:	d101      	bne.n	810a6a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810a6a2:	2301      	movs	r3, #1
 810a6a4:	e09b      	b.n	810a7de <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810a6a6:	4b50      	ldr	r3, [pc, #320]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a6a8:	681b      	ldr	r3, [r3, #0]
 810a6aa:	4a4f      	ldr	r2, [pc, #316]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a6ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810a6b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a6b2:	f7f8 fc0d 	bl	8102ed0 <HAL_GetTick>
 810a6b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a6b8:	e008      	b.n	810a6cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a6ba:	f7f8 fc09 	bl	8102ed0 <HAL_GetTick>
 810a6be:	4602      	mov	r2, r0
 810a6c0:	68bb      	ldr	r3, [r7, #8]
 810a6c2:	1ad3      	subs	r3, r2, r3
 810a6c4:	2b02      	cmp	r3, #2
 810a6c6:	d901      	bls.n	810a6cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a6c8:	2303      	movs	r3, #3
 810a6ca:	e088      	b.n	810a7de <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a6cc:	4b46      	ldr	r3, [pc, #280]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a6ce:	681b      	ldr	r3, [r3, #0]
 810a6d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a6d4:	2b00      	cmp	r3, #0
 810a6d6:	d1f0      	bne.n	810a6ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810a6d8:	4b43      	ldr	r3, [pc, #268]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a6dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810a6e0:	687b      	ldr	r3, [r7, #4]
 810a6e2:	681b      	ldr	r3, [r3, #0]
 810a6e4:	031b      	lsls	r3, r3, #12
 810a6e6:	4940      	ldr	r1, [pc, #256]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a6e8:	4313      	orrs	r3, r2
 810a6ea:	628b      	str	r3, [r1, #40]	; 0x28
 810a6ec:	687b      	ldr	r3, [r7, #4]
 810a6ee:	685b      	ldr	r3, [r3, #4]
 810a6f0:	3b01      	subs	r3, #1
 810a6f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a6f6:	687b      	ldr	r3, [r7, #4]
 810a6f8:	689b      	ldr	r3, [r3, #8]
 810a6fa:	3b01      	subs	r3, #1
 810a6fc:	025b      	lsls	r3, r3, #9
 810a6fe:	b29b      	uxth	r3, r3
 810a700:	431a      	orrs	r2, r3
 810a702:	687b      	ldr	r3, [r7, #4]
 810a704:	68db      	ldr	r3, [r3, #12]
 810a706:	3b01      	subs	r3, #1
 810a708:	041b      	lsls	r3, r3, #16
 810a70a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a70e:	431a      	orrs	r2, r3
 810a710:	687b      	ldr	r3, [r7, #4]
 810a712:	691b      	ldr	r3, [r3, #16]
 810a714:	3b01      	subs	r3, #1
 810a716:	061b      	lsls	r3, r3, #24
 810a718:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a71c:	4932      	ldr	r1, [pc, #200]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a71e:	4313      	orrs	r3, r2
 810a720:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810a722:	4b31      	ldr	r3, [pc, #196]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a726:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810a72a:	687b      	ldr	r3, [r7, #4]
 810a72c:	695b      	ldr	r3, [r3, #20]
 810a72e:	492e      	ldr	r1, [pc, #184]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a730:	4313      	orrs	r3, r2
 810a732:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810a734:	4b2c      	ldr	r3, [pc, #176]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a738:	f023 0220 	bic.w	r2, r3, #32
 810a73c:	687b      	ldr	r3, [r7, #4]
 810a73e:	699b      	ldr	r3, [r3, #24]
 810a740:	4929      	ldr	r1, [pc, #164]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a742:	4313      	orrs	r3, r2
 810a744:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810a746:	4b28      	ldr	r3, [pc, #160]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a74a:	4a27      	ldr	r2, [pc, #156]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a74c:	f023 0310 	bic.w	r3, r3, #16
 810a750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810a752:	4b25      	ldr	r3, [pc, #148]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a75a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a75e:	687a      	ldr	r2, [r7, #4]
 810a760:	69d2      	ldr	r2, [r2, #28]
 810a762:	00d2      	lsls	r2, r2, #3
 810a764:	4920      	ldr	r1, [pc, #128]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a766:	4313      	orrs	r3, r2
 810a768:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810a76a:	4b1f      	ldr	r3, [pc, #124]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a76e:	4a1e      	ldr	r2, [pc, #120]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a770:	f043 0310 	orr.w	r3, r3, #16
 810a774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a776:	683b      	ldr	r3, [r7, #0]
 810a778:	2b00      	cmp	r3, #0
 810a77a:	d106      	bne.n	810a78a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810a77c:	4b1a      	ldr	r3, [pc, #104]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a780:	4a19      	ldr	r2, [pc, #100]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810a786:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a788:	e00f      	b.n	810a7aa <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a78a:	683b      	ldr	r3, [r7, #0]
 810a78c:	2b01      	cmp	r3, #1
 810a78e:	d106      	bne.n	810a79e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810a790:	4b15      	ldr	r3, [pc, #84]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a794:	4a14      	ldr	r2, [pc, #80]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810a79a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a79c:	e005      	b.n	810a7aa <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810a79e:	4b12      	ldr	r3, [pc, #72]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a7a2:	4a11      	ldr	r2, [pc, #68]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a7a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810a7a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810a7aa:	4b0f      	ldr	r3, [pc, #60]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a7ac:	681b      	ldr	r3, [r3, #0]
 810a7ae:	4a0e      	ldr	r2, [pc, #56]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a7b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810a7b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a7b6:	f7f8 fb8b 	bl	8102ed0 <HAL_GetTick>
 810a7ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a7bc:	e008      	b.n	810a7d0 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a7be:	f7f8 fb87 	bl	8102ed0 <HAL_GetTick>
 810a7c2:	4602      	mov	r2, r0
 810a7c4:	68bb      	ldr	r3, [r7, #8]
 810a7c6:	1ad3      	subs	r3, r2, r3
 810a7c8:	2b02      	cmp	r3, #2
 810a7ca:	d901      	bls.n	810a7d0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a7cc:	2303      	movs	r3, #3
 810a7ce:	e006      	b.n	810a7de <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a7d0:	4b05      	ldr	r3, [pc, #20]	; (810a7e8 <RCCEx_PLL2_Config+0x160>)
 810a7d2:	681b      	ldr	r3, [r3, #0]
 810a7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a7d8:	2b00      	cmp	r3, #0
 810a7da:	d0f0      	beq.n	810a7be <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810a7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 810a7de:	4618      	mov	r0, r3
 810a7e0:	3710      	adds	r7, #16
 810a7e2:	46bd      	mov	sp, r7
 810a7e4:	bd80      	pop	{r7, pc}
 810a7e6:	bf00      	nop
 810a7e8:	58024400 	.word	0x58024400

0810a7ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810a7ec:	b580      	push	{r7, lr}
 810a7ee:	b084      	sub	sp, #16
 810a7f0:	af00      	add	r7, sp, #0
 810a7f2:	6078      	str	r0, [r7, #4]
 810a7f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a7f6:	2300      	movs	r3, #0
 810a7f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a7fa:	4b54      	ldr	r3, [pc, #336]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a7fe:	f003 0303 	and.w	r3, r3, #3
 810a802:	2b03      	cmp	r3, #3
 810a804:	d101      	bne.n	810a80a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810a806:	2301      	movs	r3, #1
 810a808:	e09b      	b.n	810a942 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810a80a:	4b50      	ldr	r3, [pc, #320]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a80c:	681b      	ldr	r3, [r3, #0]
 810a80e:	4a4f      	ldr	r2, [pc, #316]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a816:	f7f8 fb5b 	bl	8102ed0 <HAL_GetTick>
 810a81a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a81c:	e008      	b.n	810a830 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a81e:	f7f8 fb57 	bl	8102ed0 <HAL_GetTick>
 810a822:	4602      	mov	r2, r0
 810a824:	68bb      	ldr	r3, [r7, #8]
 810a826:	1ad3      	subs	r3, r2, r3
 810a828:	2b02      	cmp	r3, #2
 810a82a:	d901      	bls.n	810a830 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a82c:	2303      	movs	r3, #3
 810a82e:	e088      	b.n	810a942 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a830:	4b46      	ldr	r3, [pc, #280]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a832:	681b      	ldr	r3, [r3, #0]
 810a834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a838:	2b00      	cmp	r3, #0
 810a83a:	d1f0      	bne.n	810a81e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810a83c:	4b43      	ldr	r3, [pc, #268]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a840:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	681b      	ldr	r3, [r3, #0]
 810a848:	051b      	lsls	r3, r3, #20
 810a84a:	4940      	ldr	r1, [pc, #256]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a84c:	4313      	orrs	r3, r2
 810a84e:	628b      	str	r3, [r1, #40]	; 0x28
 810a850:	687b      	ldr	r3, [r7, #4]
 810a852:	685b      	ldr	r3, [r3, #4]
 810a854:	3b01      	subs	r3, #1
 810a856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a85a:	687b      	ldr	r3, [r7, #4]
 810a85c:	689b      	ldr	r3, [r3, #8]
 810a85e:	3b01      	subs	r3, #1
 810a860:	025b      	lsls	r3, r3, #9
 810a862:	b29b      	uxth	r3, r3
 810a864:	431a      	orrs	r2, r3
 810a866:	687b      	ldr	r3, [r7, #4]
 810a868:	68db      	ldr	r3, [r3, #12]
 810a86a:	3b01      	subs	r3, #1
 810a86c:	041b      	lsls	r3, r3, #16
 810a86e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a872:	431a      	orrs	r2, r3
 810a874:	687b      	ldr	r3, [r7, #4]
 810a876:	691b      	ldr	r3, [r3, #16]
 810a878:	3b01      	subs	r3, #1
 810a87a:	061b      	lsls	r3, r3, #24
 810a87c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a880:	4932      	ldr	r1, [pc, #200]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a882:	4313      	orrs	r3, r2
 810a884:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810a886:	4b31      	ldr	r3, [pc, #196]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a88a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810a88e:	687b      	ldr	r3, [r7, #4]
 810a890:	695b      	ldr	r3, [r3, #20]
 810a892:	492e      	ldr	r1, [pc, #184]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a894:	4313      	orrs	r3, r2
 810a896:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810a898:	4b2c      	ldr	r3, [pc, #176]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a89c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810a8a0:	687b      	ldr	r3, [r7, #4]
 810a8a2:	699b      	ldr	r3, [r3, #24]
 810a8a4:	4929      	ldr	r1, [pc, #164]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8a6:	4313      	orrs	r3, r2
 810a8a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810a8aa:	4b28      	ldr	r3, [pc, #160]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8ae:	4a27      	ldr	r2, [pc, #156]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a8b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810a8b6:	4b25      	ldr	r3, [pc, #148]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a8ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a8be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a8c2:	687a      	ldr	r2, [r7, #4]
 810a8c4:	69d2      	ldr	r2, [r2, #28]
 810a8c6:	00d2      	lsls	r2, r2, #3
 810a8c8:	4920      	ldr	r1, [pc, #128]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8ca:	4313      	orrs	r3, r2
 810a8cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810a8ce:	4b1f      	ldr	r3, [pc, #124]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8d2:	4a1e      	ldr	r2, [pc, #120]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810a8d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a8da:	683b      	ldr	r3, [r7, #0]
 810a8dc:	2b00      	cmp	r3, #0
 810a8de:	d106      	bne.n	810a8ee <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810a8e0:	4b1a      	ldr	r3, [pc, #104]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8e4:	4a19      	ldr	r2, [pc, #100]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810a8ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a8ec:	e00f      	b.n	810a90e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a8ee:	683b      	ldr	r3, [r7, #0]
 810a8f0:	2b01      	cmp	r3, #1
 810a8f2:	d106      	bne.n	810a902 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810a8f4:	4b15      	ldr	r3, [pc, #84]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8f8:	4a14      	ldr	r2, [pc, #80]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a8fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810a8fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a900:	e005      	b.n	810a90e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810a902:	4b12      	ldr	r3, [pc, #72]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a906:	4a11      	ldr	r2, [pc, #68]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810a90c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810a90e:	4b0f      	ldr	r3, [pc, #60]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a910:	681b      	ldr	r3, [r3, #0]
 810a912:	4a0e      	ldr	r2, [pc, #56]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810a918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a91a:	f7f8 fad9 	bl	8102ed0 <HAL_GetTick>
 810a91e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a920:	e008      	b.n	810a934 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a922:	f7f8 fad5 	bl	8102ed0 <HAL_GetTick>
 810a926:	4602      	mov	r2, r0
 810a928:	68bb      	ldr	r3, [r7, #8]
 810a92a:	1ad3      	subs	r3, r2, r3
 810a92c:	2b02      	cmp	r3, #2
 810a92e:	d901      	bls.n	810a934 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a930:	2303      	movs	r3, #3
 810a932:	e006      	b.n	810a942 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a934:	4b05      	ldr	r3, [pc, #20]	; (810a94c <RCCEx_PLL3_Config+0x160>)
 810a936:	681b      	ldr	r3, [r3, #0]
 810a938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a93c:	2b00      	cmp	r3, #0
 810a93e:	d0f0      	beq.n	810a922 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810a940:	7bfb      	ldrb	r3, [r7, #15]
}
 810a942:	4618      	mov	r0, r3
 810a944:	3710      	adds	r7, #16
 810a946:	46bd      	mov	sp, r7
 810a948:	bd80      	pop	{r7, pc}
 810a94a:	bf00      	nop
 810a94c:	58024400 	.word	0x58024400

0810a950 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810a950:	b580      	push	{r7, lr}
 810a952:	b084      	sub	sp, #16
 810a954:	af00      	add	r7, sp, #0
 810a956:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810a958:	2300      	movs	r3, #0
 810a95a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810a95c:	687b      	ldr	r3, [r7, #4]
 810a95e:	2b00      	cmp	r3, #0
 810a960:	d101      	bne.n	810a966 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810a962:	2301      	movs	r3, #1
 810a964:	e0eb      	b.n	810ab3e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810a966:	687b      	ldr	r3, [r7, #4]
 810a968:	2200      	movs	r2, #0
 810a96a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810a96c:	687b      	ldr	r3, [r7, #4]
 810a96e:	681b      	ldr	r3, [r3, #0]
 810a970:	4a75      	ldr	r2, [pc, #468]	; (810ab48 <HAL_SPI_Init+0x1f8>)
 810a972:	4293      	cmp	r3, r2
 810a974:	d00f      	beq.n	810a996 <HAL_SPI_Init+0x46>
 810a976:	687b      	ldr	r3, [r7, #4]
 810a978:	681b      	ldr	r3, [r3, #0]
 810a97a:	4a74      	ldr	r2, [pc, #464]	; (810ab4c <HAL_SPI_Init+0x1fc>)
 810a97c:	4293      	cmp	r3, r2
 810a97e:	d00a      	beq.n	810a996 <HAL_SPI_Init+0x46>
 810a980:	687b      	ldr	r3, [r7, #4]
 810a982:	681b      	ldr	r3, [r3, #0]
 810a984:	4a72      	ldr	r2, [pc, #456]	; (810ab50 <HAL_SPI_Init+0x200>)
 810a986:	4293      	cmp	r3, r2
 810a988:	d005      	beq.n	810a996 <HAL_SPI_Init+0x46>
 810a98a:	687b      	ldr	r3, [r7, #4]
 810a98c:	68db      	ldr	r3, [r3, #12]
 810a98e:	2b0f      	cmp	r3, #15
 810a990:	d901      	bls.n	810a996 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810a992:	2301      	movs	r3, #1
 810a994:	e0d3      	b.n	810ab3e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810a996:	6878      	ldr	r0, [r7, #4]
 810a998:	f001 fa94 	bl	810bec4 <SPI_GetPacketSize>
 810a99c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a99e:	687b      	ldr	r3, [r7, #4]
 810a9a0:	681b      	ldr	r3, [r3, #0]
 810a9a2:	4a69      	ldr	r2, [pc, #420]	; (810ab48 <HAL_SPI_Init+0x1f8>)
 810a9a4:	4293      	cmp	r3, r2
 810a9a6:	d00c      	beq.n	810a9c2 <HAL_SPI_Init+0x72>
 810a9a8:	687b      	ldr	r3, [r7, #4]
 810a9aa:	681b      	ldr	r3, [r3, #0]
 810a9ac:	4a67      	ldr	r2, [pc, #412]	; (810ab4c <HAL_SPI_Init+0x1fc>)
 810a9ae:	4293      	cmp	r3, r2
 810a9b0:	d007      	beq.n	810a9c2 <HAL_SPI_Init+0x72>
 810a9b2:	687b      	ldr	r3, [r7, #4]
 810a9b4:	681b      	ldr	r3, [r3, #0]
 810a9b6:	4a66      	ldr	r2, [pc, #408]	; (810ab50 <HAL_SPI_Init+0x200>)
 810a9b8:	4293      	cmp	r3, r2
 810a9ba:	d002      	beq.n	810a9c2 <HAL_SPI_Init+0x72>
 810a9bc:	68bb      	ldr	r3, [r7, #8]
 810a9be:	2b08      	cmp	r3, #8
 810a9c0:	d811      	bhi.n	810a9e6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a9c2:	687b      	ldr	r3, [r7, #4]
 810a9c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a9c6:	4a60      	ldr	r2, [pc, #384]	; (810ab48 <HAL_SPI_Init+0x1f8>)
 810a9c8:	4293      	cmp	r3, r2
 810a9ca:	d009      	beq.n	810a9e0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a9cc:	687b      	ldr	r3, [r7, #4]
 810a9ce:	681b      	ldr	r3, [r3, #0]
 810a9d0:	4a5e      	ldr	r2, [pc, #376]	; (810ab4c <HAL_SPI_Init+0x1fc>)
 810a9d2:	4293      	cmp	r3, r2
 810a9d4:	d004      	beq.n	810a9e0 <HAL_SPI_Init+0x90>
 810a9d6:	687b      	ldr	r3, [r7, #4]
 810a9d8:	681b      	ldr	r3, [r3, #0]
 810a9da:	4a5d      	ldr	r2, [pc, #372]	; (810ab50 <HAL_SPI_Init+0x200>)
 810a9dc:	4293      	cmp	r3, r2
 810a9de:	d104      	bne.n	810a9ea <HAL_SPI_Init+0x9a>
 810a9e0:	68bb      	ldr	r3, [r7, #8]
 810a9e2:	2b10      	cmp	r3, #16
 810a9e4:	d901      	bls.n	810a9ea <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810a9e6:	2301      	movs	r3, #1
 810a9e8:	e0a9      	b.n	810ab3e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810a9ea:	687b      	ldr	r3, [r7, #4]
 810a9ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a9f0:	b2db      	uxtb	r3, r3
 810a9f2:	2b00      	cmp	r3, #0
 810a9f4:	d106      	bne.n	810aa04 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810a9f6:	687b      	ldr	r3, [r7, #4]
 810a9f8:	2200      	movs	r2, #0
 810a9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810a9fe:	6878      	ldr	r0, [r7, #4]
 810aa00:	f7f7 fdc6 	bl	8102590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810aa04:	687b      	ldr	r3, [r7, #4]
 810aa06:	2202      	movs	r2, #2
 810aa08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810aa0c:	687b      	ldr	r3, [r7, #4]
 810aa0e:	681b      	ldr	r3, [r3, #0]
 810aa10:	681a      	ldr	r2, [r3, #0]
 810aa12:	687b      	ldr	r3, [r7, #4]
 810aa14:	681b      	ldr	r3, [r3, #0]
 810aa16:	f022 0201 	bic.w	r2, r2, #1
 810aa1a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810aa1c:	687b      	ldr	r3, [r7, #4]
 810aa1e:	699b      	ldr	r3, [r3, #24]
 810aa20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810aa24:	d119      	bne.n	810aa5a <HAL_SPI_Init+0x10a>
 810aa26:	687b      	ldr	r3, [r7, #4]
 810aa28:	685b      	ldr	r3, [r3, #4]
 810aa2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810aa2e:	d103      	bne.n	810aa38 <HAL_SPI_Init+0xe8>
 810aa30:	687b      	ldr	r3, [r7, #4]
 810aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810aa34:	2b00      	cmp	r3, #0
 810aa36:	d008      	beq.n	810aa4a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810aa38:	687b      	ldr	r3, [r7, #4]
 810aa3a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810aa3c:	2b00      	cmp	r3, #0
 810aa3e:	d10c      	bne.n	810aa5a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810aa40:	687b      	ldr	r3, [r7, #4]
 810aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810aa44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810aa48:	d107      	bne.n	810aa5a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810aa4a:	687b      	ldr	r3, [r7, #4]
 810aa4c:	681b      	ldr	r3, [r3, #0]
 810aa4e:	681a      	ldr	r2, [r3, #0]
 810aa50:	687b      	ldr	r3, [r7, #4]
 810aa52:	681b      	ldr	r3, [r3, #0]
 810aa54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810aa58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810aa5a:	687b      	ldr	r3, [r7, #4]
 810aa5c:	69da      	ldr	r2, [r3, #28]
 810aa5e:	687b      	ldr	r3, [r7, #4]
 810aa60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa62:	431a      	orrs	r2, r3
 810aa64:	68fb      	ldr	r3, [r7, #12]
 810aa66:	431a      	orrs	r2, r3
 810aa68:	687b      	ldr	r3, [r7, #4]
 810aa6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810aa6c:	ea42 0103 	orr.w	r1, r2, r3
 810aa70:	687b      	ldr	r3, [r7, #4]
 810aa72:	68da      	ldr	r2, [r3, #12]
 810aa74:	687b      	ldr	r3, [r7, #4]
 810aa76:	681b      	ldr	r3, [r3, #0]
 810aa78:	430a      	orrs	r2, r1
 810aa7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810aa7c:	687b      	ldr	r3, [r7, #4]
 810aa7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810aa80:	687b      	ldr	r3, [r7, #4]
 810aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810aa84:	431a      	orrs	r2, r3
 810aa86:	687b      	ldr	r3, [r7, #4]
 810aa88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810aa8a:	431a      	orrs	r2, r3
 810aa8c:	687b      	ldr	r3, [r7, #4]
 810aa8e:	699b      	ldr	r3, [r3, #24]
 810aa90:	431a      	orrs	r2, r3
 810aa92:	687b      	ldr	r3, [r7, #4]
 810aa94:	691b      	ldr	r3, [r3, #16]
 810aa96:	431a      	orrs	r2, r3
 810aa98:	687b      	ldr	r3, [r7, #4]
 810aa9a:	695b      	ldr	r3, [r3, #20]
 810aa9c:	431a      	orrs	r2, r3
 810aa9e:	687b      	ldr	r3, [r7, #4]
 810aaa0:	6a1b      	ldr	r3, [r3, #32]
 810aaa2:	431a      	orrs	r2, r3
 810aaa4:	687b      	ldr	r3, [r7, #4]
 810aaa6:	685b      	ldr	r3, [r3, #4]
 810aaa8:	431a      	orrs	r2, r3
 810aaaa:	687b      	ldr	r3, [r7, #4]
 810aaac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810aaae:	431a      	orrs	r2, r3
 810aab0:	687b      	ldr	r3, [r7, #4]
 810aab2:	689b      	ldr	r3, [r3, #8]
 810aab4:	431a      	orrs	r2, r3
 810aab6:	687b      	ldr	r3, [r7, #4]
 810aab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aaba:	ea42 0103 	orr.w	r1, r2, r3
 810aabe:	687b      	ldr	r3, [r7, #4]
 810aac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810aac2:	687b      	ldr	r3, [r7, #4]
 810aac4:	681b      	ldr	r3, [r3, #0]
 810aac6:	430a      	orrs	r2, r1
 810aac8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810aaca:	687b      	ldr	r3, [r7, #4]
 810aacc:	685b      	ldr	r3, [r3, #4]
 810aace:	2b00      	cmp	r3, #0
 810aad0:	d113      	bne.n	810aafa <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810aad2:	687b      	ldr	r3, [r7, #4]
 810aad4:	681b      	ldr	r3, [r3, #0]
 810aad6:	689b      	ldr	r3, [r3, #8]
 810aad8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810aadc:	687b      	ldr	r3, [r7, #4]
 810aade:	681b      	ldr	r3, [r3, #0]
 810aae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810aae4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810aae6:	687b      	ldr	r3, [r7, #4]
 810aae8:	681b      	ldr	r3, [r3, #0]
 810aaea:	689b      	ldr	r3, [r3, #8]
 810aaec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810aaf0:	687b      	ldr	r3, [r7, #4]
 810aaf2:	681b      	ldr	r3, [r3, #0]
 810aaf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810aaf8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810aafa:	687b      	ldr	r3, [r7, #4]
 810aafc:	681b      	ldr	r3, [r3, #0]
 810aafe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810ab00:	687b      	ldr	r3, [r7, #4]
 810ab02:	681b      	ldr	r3, [r3, #0]
 810ab04:	f022 0201 	bic.w	r2, r2, #1
 810ab08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810ab0a:	687b      	ldr	r3, [r7, #4]
 810ab0c:	685b      	ldr	r3, [r3, #4]
 810ab0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810ab12:	2b00      	cmp	r3, #0
 810ab14:	d00a      	beq.n	810ab2c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810ab16:	687b      	ldr	r3, [r7, #4]
 810ab18:	681b      	ldr	r3, [r3, #0]
 810ab1a:	68db      	ldr	r3, [r3, #12]
 810ab1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810ab20:	687b      	ldr	r3, [r7, #4]
 810ab22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810ab24:	687b      	ldr	r3, [r7, #4]
 810ab26:	681b      	ldr	r3, [r3, #0]
 810ab28:	430a      	orrs	r2, r1
 810ab2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810ab2c:	687b      	ldr	r3, [r7, #4]
 810ab2e:	2200      	movs	r2, #0
 810ab30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810ab34:	687b      	ldr	r3, [r7, #4]
 810ab36:	2201      	movs	r2, #1
 810ab38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810ab3c:	2300      	movs	r3, #0
}
 810ab3e:	4618      	mov	r0, r3
 810ab40:	3710      	adds	r7, #16
 810ab42:	46bd      	mov	sp, r7
 810ab44:	bd80      	pop	{r7, pc}
 810ab46:	bf00      	nop
 810ab48:	40013000 	.word	0x40013000
 810ab4c:	40003800 	.word	0x40003800
 810ab50:	40003c00 	.word	0x40003c00

0810ab54 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810ab54:	b580      	push	{r7, lr}
 810ab56:	b08a      	sub	sp, #40	; 0x28
 810ab58:	af02      	add	r7, sp, #8
 810ab5a:	60f8      	str	r0, [r7, #12]
 810ab5c:	60b9      	str	r1, [r7, #8]
 810ab5e:	603b      	str	r3, [r7, #0]
 810ab60:	4613      	mov	r3, r2
 810ab62:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810ab64:	68fb      	ldr	r3, [r7, #12]
 810ab66:	681b      	ldr	r3, [r3, #0]
 810ab68:	3320      	adds	r3, #32
 810ab6a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810ab6c:	2300      	movs	r3, #0
 810ab6e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 810ab70:	68fb      	ldr	r3, [r7, #12]
 810ab72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810ab76:	2b01      	cmp	r3, #1
 810ab78:	d101      	bne.n	810ab7e <HAL_SPI_Transmit+0x2a>
 810ab7a:	2302      	movs	r3, #2
 810ab7c:	e1d4      	b.n	810af28 <HAL_SPI_Transmit+0x3d4>
 810ab7e:	68fb      	ldr	r3, [r7, #12]
 810ab80:	2201      	movs	r2, #1
 810ab82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810ab86:	f7f8 f9a3 	bl	8102ed0 <HAL_GetTick>
 810ab8a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 810ab8c:	68fb      	ldr	r3, [r7, #12]
 810ab8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810ab92:	b2db      	uxtb	r3, r3
 810ab94:	2b01      	cmp	r3, #1
 810ab96:	d007      	beq.n	810aba8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 810ab98:	2302      	movs	r3, #2
 810ab9a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810ab9c:	68fb      	ldr	r3, [r7, #12]
 810ab9e:	2200      	movs	r2, #0
 810aba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810aba4:	7efb      	ldrb	r3, [r7, #27]
 810aba6:	e1bf      	b.n	810af28 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 810aba8:	68bb      	ldr	r3, [r7, #8]
 810abaa:	2b00      	cmp	r3, #0
 810abac:	d002      	beq.n	810abb4 <HAL_SPI_Transmit+0x60>
 810abae:	88fb      	ldrh	r3, [r7, #6]
 810abb0:	2b00      	cmp	r3, #0
 810abb2:	d107      	bne.n	810abc4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 810abb4:	2301      	movs	r3, #1
 810abb6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810abb8:	68fb      	ldr	r3, [r7, #12]
 810abba:	2200      	movs	r2, #0
 810abbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810abc0:	7efb      	ldrb	r3, [r7, #27]
 810abc2:	e1b1      	b.n	810af28 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 810abc4:	68fb      	ldr	r3, [r7, #12]
 810abc6:	2203      	movs	r2, #3
 810abc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810abcc:	68fb      	ldr	r3, [r7, #12]
 810abce:	2200      	movs	r2, #0
 810abd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 810abd4:	68fb      	ldr	r3, [r7, #12]
 810abd6:	68ba      	ldr	r2, [r7, #8]
 810abd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810abda:	68fb      	ldr	r3, [r7, #12]
 810abdc:	88fa      	ldrh	r2, [r7, #6]
 810abde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810abe2:	68fb      	ldr	r3, [r7, #12]
 810abe4:	88fa      	ldrh	r2, [r7, #6]
 810abe6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 810abea:	68fb      	ldr	r3, [r7, #12]
 810abec:	2200      	movs	r2, #0
 810abee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 810abf0:	68fb      	ldr	r3, [r7, #12]
 810abf2:	2200      	movs	r2, #0
 810abf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 810abf8:	68fb      	ldr	r3, [r7, #12]
 810abfa:	2200      	movs	r2, #0
 810abfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 810ac00:	68fb      	ldr	r3, [r7, #12]
 810ac02:	2200      	movs	r2, #0
 810ac04:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 810ac06:	68fb      	ldr	r3, [r7, #12]
 810ac08:	2200      	movs	r2, #0
 810ac0a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810ac0c:	68fb      	ldr	r3, [r7, #12]
 810ac0e:	689b      	ldr	r3, [r3, #8]
 810ac10:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810ac14:	d107      	bne.n	810ac26 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 810ac16:	68fb      	ldr	r3, [r7, #12]
 810ac18:	681b      	ldr	r3, [r3, #0]
 810ac1a:	681a      	ldr	r2, [r3, #0]
 810ac1c:	68fb      	ldr	r3, [r7, #12]
 810ac1e:	681b      	ldr	r3, [r3, #0]
 810ac20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810ac24:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810ac26:	68fb      	ldr	r3, [r7, #12]
 810ac28:	681b      	ldr	r3, [r3, #0]
 810ac2a:	685b      	ldr	r3, [r3, #4]
 810ac2c:	0c1b      	lsrs	r3, r3, #16
 810ac2e:	041b      	lsls	r3, r3, #16
 810ac30:	88f9      	ldrh	r1, [r7, #6]
 810ac32:	68fa      	ldr	r2, [r7, #12]
 810ac34:	6812      	ldr	r2, [r2, #0]
 810ac36:	430b      	orrs	r3, r1
 810ac38:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810ac3a:	68fb      	ldr	r3, [r7, #12]
 810ac3c:	681b      	ldr	r3, [r3, #0]
 810ac3e:	681a      	ldr	r2, [r3, #0]
 810ac40:	68fb      	ldr	r3, [r7, #12]
 810ac42:	681b      	ldr	r3, [r3, #0]
 810ac44:	f042 0201 	orr.w	r2, r2, #1
 810ac48:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810ac4a:	68fb      	ldr	r3, [r7, #12]
 810ac4c:	685b      	ldr	r3, [r3, #4]
 810ac4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810ac52:	d107      	bne.n	810ac64 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810ac54:	68fb      	ldr	r3, [r7, #12]
 810ac56:	681b      	ldr	r3, [r3, #0]
 810ac58:	681a      	ldr	r2, [r3, #0]
 810ac5a:	68fb      	ldr	r3, [r7, #12]
 810ac5c:	681b      	ldr	r3, [r3, #0]
 810ac5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810ac62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810ac64:	68fb      	ldr	r3, [r7, #12]
 810ac66:	68db      	ldr	r3, [r3, #12]
 810ac68:	2b0f      	cmp	r3, #15
 810ac6a:	d947      	bls.n	810acfc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810ac6c:	e03f      	b.n	810acee <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810ac6e:	68fb      	ldr	r3, [r7, #12]
 810ac70:	681b      	ldr	r3, [r3, #0]
 810ac72:	695b      	ldr	r3, [r3, #20]
 810ac74:	f003 0302 	and.w	r3, r3, #2
 810ac78:	2b02      	cmp	r3, #2
 810ac7a:	d114      	bne.n	810aca6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810ac7c:	68fb      	ldr	r3, [r7, #12]
 810ac7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810ac80:	68fb      	ldr	r3, [r7, #12]
 810ac82:	681b      	ldr	r3, [r3, #0]
 810ac84:	6812      	ldr	r2, [r2, #0]
 810ac86:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810ac88:	68fb      	ldr	r3, [r7, #12]
 810ac8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ac8c:	1d1a      	adds	r2, r3, #4
 810ac8e:	68fb      	ldr	r3, [r7, #12]
 810ac90:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 810ac92:	68fb      	ldr	r3, [r7, #12]
 810ac94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ac98:	b29b      	uxth	r3, r3
 810ac9a:	3b01      	subs	r3, #1
 810ac9c:	b29a      	uxth	r2, r3
 810ac9e:	68fb      	ldr	r3, [r7, #12]
 810aca0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810aca4:	e023      	b.n	810acee <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810aca6:	f7f8 f913 	bl	8102ed0 <HAL_GetTick>
 810acaa:	4602      	mov	r2, r0
 810acac:	697b      	ldr	r3, [r7, #20]
 810acae:	1ad3      	subs	r3, r2, r3
 810acb0:	683a      	ldr	r2, [r7, #0]
 810acb2:	429a      	cmp	r2, r3
 810acb4:	d803      	bhi.n	810acbe <HAL_SPI_Transmit+0x16a>
 810acb6:	683b      	ldr	r3, [r7, #0]
 810acb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810acbc:	d102      	bne.n	810acc4 <HAL_SPI_Transmit+0x170>
 810acbe:	683b      	ldr	r3, [r7, #0]
 810acc0:	2b00      	cmp	r3, #0
 810acc2:	d114      	bne.n	810acee <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810acc4:	68f8      	ldr	r0, [r7, #12]
 810acc6:	f001 f82f 	bl	810bd28 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810acca:	68fb      	ldr	r3, [r7, #12]
 810accc:	2200      	movs	r2, #0
 810acce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810acd2:	68fb      	ldr	r3, [r7, #12]
 810acd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810acd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810acdc:	68fb      	ldr	r3, [r7, #12]
 810acde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810ace2:	68fb      	ldr	r3, [r7, #12]
 810ace4:	2201      	movs	r2, #1
 810ace6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810acea:	2301      	movs	r3, #1
 810acec:	e11c      	b.n	810af28 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810acee:	68fb      	ldr	r3, [r7, #12]
 810acf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810acf4:	b29b      	uxth	r3, r3
 810acf6:	2b00      	cmp	r3, #0
 810acf8:	d1b9      	bne.n	810ac6e <HAL_SPI_Transmit+0x11a>
 810acfa:	e0ef      	b.n	810aedc <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810acfc:	68fb      	ldr	r3, [r7, #12]
 810acfe:	68db      	ldr	r3, [r3, #12]
 810ad00:	2b07      	cmp	r3, #7
 810ad02:	f240 80e4 	bls.w	810aece <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810ad06:	e05d      	b.n	810adc4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810ad08:	68fb      	ldr	r3, [r7, #12]
 810ad0a:	681b      	ldr	r3, [r3, #0]
 810ad0c:	695b      	ldr	r3, [r3, #20]
 810ad0e:	f003 0302 	and.w	r3, r3, #2
 810ad12:	2b02      	cmp	r3, #2
 810ad14:	d132      	bne.n	810ad7c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810ad16:	68fb      	ldr	r3, [r7, #12]
 810ad18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ad1c:	b29b      	uxth	r3, r3
 810ad1e:	2b01      	cmp	r3, #1
 810ad20:	d918      	bls.n	810ad54 <HAL_SPI_Transmit+0x200>
 810ad22:	68fb      	ldr	r3, [r7, #12]
 810ad24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ad26:	2b00      	cmp	r3, #0
 810ad28:	d014      	beq.n	810ad54 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810ad2a:	68fb      	ldr	r3, [r7, #12]
 810ad2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810ad2e:	68fb      	ldr	r3, [r7, #12]
 810ad30:	681b      	ldr	r3, [r3, #0]
 810ad32:	6812      	ldr	r2, [r2, #0]
 810ad34:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810ad36:	68fb      	ldr	r3, [r7, #12]
 810ad38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ad3a:	1d1a      	adds	r2, r3, #4
 810ad3c:	68fb      	ldr	r3, [r7, #12]
 810ad3e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810ad40:	68fb      	ldr	r3, [r7, #12]
 810ad42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ad46:	b29b      	uxth	r3, r3
 810ad48:	3b02      	subs	r3, #2
 810ad4a:	b29a      	uxth	r2, r3
 810ad4c:	68fb      	ldr	r3, [r7, #12]
 810ad4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ad52:	e037      	b.n	810adc4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810ad54:	68fb      	ldr	r3, [r7, #12]
 810ad56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ad58:	881a      	ldrh	r2, [r3, #0]
 810ad5a:	69fb      	ldr	r3, [r7, #28]
 810ad5c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810ad5e:	68fb      	ldr	r3, [r7, #12]
 810ad60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ad62:	1c9a      	adds	r2, r3, #2
 810ad64:	68fb      	ldr	r3, [r7, #12]
 810ad66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810ad68:	68fb      	ldr	r3, [r7, #12]
 810ad6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ad6e:	b29b      	uxth	r3, r3
 810ad70:	3b01      	subs	r3, #1
 810ad72:	b29a      	uxth	r2, r3
 810ad74:	68fb      	ldr	r3, [r7, #12]
 810ad76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ad7a:	e023      	b.n	810adc4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810ad7c:	f7f8 f8a8 	bl	8102ed0 <HAL_GetTick>
 810ad80:	4602      	mov	r2, r0
 810ad82:	697b      	ldr	r3, [r7, #20]
 810ad84:	1ad3      	subs	r3, r2, r3
 810ad86:	683a      	ldr	r2, [r7, #0]
 810ad88:	429a      	cmp	r2, r3
 810ad8a:	d803      	bhi.n	810ad94 <HAL_SPI_Transmit+0x240>
 810ad8c:	683b      	ldr	r3, [r7, #0]
 810ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ad92:	d102      	bne.n	810ad9a <HAL_SPI_Transmit+0x246>
 810ad94:	683b      	ldr	r3, [r7, #0]
 810ad96:	2b00      	cmp	r3, #0
 810ad98:	d114      	bne.n	810adc4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810ad9a:	68f8      	ldr	r0, [r7, #12]
 810ad9c:	f000 ffc4 	bl	810bd28 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810ada0:	68fb      	ldr	r3, [r7, #12]
 810ada2:	2200      	movs	r2, #0
 810ada4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810ada8:	68fb      	ldr	r3, [r7, #12]
 810adaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810adae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810adb2:	68fb      	ldr	r3, [r7, #12]
 810adb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810adb8:	68fb      	ldr	r3, [r7, #12]
 810adba:	2201      	movs	r2, #1
 810adbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810adc0:	2301      	movs	r3, #1
 810adc2:	e0b1      	b.n	810af28 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810adc4:	68fb      	ldr	r3, [r7, #12]
 810adc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810adca:	b29b      	uxth	r3, r3
 810adcc:	2b00      	cmp	r3, #0
 810adce:	d19b      	bne.n	810ad08 <HAL_SPI_Transmit+0x1b4>
 810add0:	e084      	b.n	810aedc <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810add2:	68fb      	ldr	r3, [r7, #12]
 810add4:	681b      	ldr	r3, [r3, #0]
 810add6:	695b      	ldr	r3, [r3, #20]
 810add8:	f003 0302 	and.w	r3, r3, #2
 810addc:	2b02      	cmp	r3, #2
 810adde:	d152      	bne.n	810ae86 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810ade0:	68fb      	ldr	r3, [r7, #12]
 810ade2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ade6:	b29b      	uxth	r3, r3
 810ade8:	2b03      	cmp	r3, #3
 810adea:	d918      	bls.n	810ae1e <HAL_SPI_Transmit+0x2ca>
 810adec:	68fb      	ldr	r3, [r7, #12]
 810adee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810adf0:	2b40      	cmp	r3, #64	; 0x40
 810adf2:	d914      	bls.n	810ae1e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810adf4:	68fb      	ldr	r3, [r7, #12]
 810adf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810adf8:	68fb      	ldr	r3, [r7, #12]
 810adfa:	681b      	ldr	r3, [r3, #0]
 810adfc:	6812      	ldr	r2, [r2, #0]
 810adfe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810ae00:	68fb      	ldr	r3, [r7, #12]
 810ae02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ae04:	1d1a      	adds	r2, r3, #4
 810ae06:	68fb      	ldr	r3, [r7, #12]
 810ae08:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810ae0a:	68fb      	ldr	r3, [r7, #12]
 810ae0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ae10:	b29b      	uxth	r3, r3
 810ae12:	3b04      	subs	r3, #4
 810ae14:	b29a      	uxth	r2, r3
 810ae16:	68fb      	ldr	r3, [r7, #12]
 810ae18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ae1c:	e057      	b.n	810aece <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810ae1e:	68fb      	ldr	r3, [r7, #12]
 810ae20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ae24:	b29b      	uxth	r3, r3
 810ae26:	2b01      	cmp	r3, #1
 810ae28:	d917      	bls.n	810ae5a <HAL_SPI_Transmit+0x306>
 810ae2a:	68fb      	ldr	r3, [r7, #12]
 810ae2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ae2e:	2b00      	cmp	r3, #0
 810ae30:	d013      	beq.n	810ae5a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810ae32:	68fb      	ldr	r3, [r7, #12]
 810ae34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ae36:	881a      	ldrh	r2, [r3, #0]
 810ae38:	69fb      	ldr	r3, [r7, #28]
 810ae3a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810ae3c:	68fb      	ldr	r3, [r7, #12]
 810ae3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ae40:	1c9a      	adds	r2, r3, #2
 810ae42:	68fb      	ldr	r3, [r7, #12]
 810ae44:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810ae46:	68fb      	ldr	r3, [r7, #12]
 810ae48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ae4c:	b29b      	uxth	r3, r3
 810ae4e:	3b02      	subs	r3, #2
 810ae50:	b29a      	uxth	r2, r3
 810ae52:	68fb      	ldr	r3, [r7, #12]
 810ae54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ae58:	e039      	b.n	810aece <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810ae5a:	68fb      	ldr	r3, [r7, #12]
 810ae5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810ae5e:	68fb      	ldr	r3, [r7, #12]
 810ae60:	681b      	ldr	r3, [r3, #0]
 810ae62:	3320      	adds	r3, #32
 810ae64:	7812      	ldrb	r2, [r2, #0]
 810ae66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810ae68:	68fb      	ldr	r3, [r7, #12]
 810ae6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ae6c:	1c5a      	adds	r2, r3, #1
 810ae6e:	68fb      	ldr	r3, [r7, #12]
 810ae70:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810ae72:	68fb      	ldr	r3, [r7, #12]
 810ae74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ae78:	b29b      	uxth	r3, r3
 810ae7a:	3b01      	subs	r3, #1
 810ae7c:	b29a      	uxth	r2, r3
 810ae7e:	68fb      	ldr	r3, [r7, #12]
 810ae80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ae84:	e023      	b.n	810aece <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810ae86:	f7f8 f823 	bl	8102ed0 <HAL_GetTick>
 810ae8a:	4602      	mov	r2, r0
 810ae8c:	697b      	ldr	r3, [r7, #20]
 810ae8e:	1ad3      	subs	r3, r2, r3
 810ae90:	683a      	ldr	r2, [r7, #0]
 810ae92:	429a      	cmp	r2, r3
 810ae94:	d803      	bhi.n	810ae9e <HAL_SPI_Transmit+0x34a>
 810ae96:	683b      	ldr	r3, [r7, #0]
 810ae98:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ae9c:	d102      	bne.n	810aea4 <HAL_SPI_Transmit+0x350>
 810ae9e:	683b      	ldr	r3, [r7, #0]
 810aea0:	2b00      	cmp	r3, #0
 810aea2:	d114      	bne.n	810aece <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810aea4:	68f8      	ldr	r0, [r7, #12]
 810aea6:	f000 ff3f 	bl	810bd28 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810aeaa:	68fb      	ldr	r3, [r7, #12]
 810aeac:	2200      	movs	r2, #0
 810aeae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810aeb2:	68fb      	ldr	r3, [r7, #12]
 810aeb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aeb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810aebc:	68fb      	ldr	r3, [r7, #12]
 810aebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810aec2:	68fb      	ldr	r3, [r7, #12]
 810aec4:	2201      	movs	r2, #1
 810aec6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810aeca:	2301      	movs	r3, #1
 810aecc:	e02c      	b.n	810af28 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810aece:	68fb      	ldr	r3, [r7, #12]
 810aed0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810aed4:	b29b      	uxth	r3, r3
 810aed6:	2b00      	cmp	r3, #0
 810aed8:	f47f af7b 	bne.w	810add2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810aedc:	683b      	ldr	r3, [r7, #0]
 810aede:	9300      	str	r3, [sp, #0]
 810aee0:	697b      	ldr	r3, [r7, #20]
 810aee2:	2200      	movs	r2, #0
 810aee4:	2108      	movs	r1, #8
 810aee6:	68f8      	ldr	r0, [r7, #12]
 810aee8:	f000 ffbe 	bl	810be68 <SPI_WaitOnFlagUntilTimeout>
 810aeec:	4603      	mov	r3, r0
 810aeee:	2b00      	cmp	r3, #0
 810aef0:	d007      	beq.n	810af02 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810aef2:	68fb      	ldr	r3, [r7, #12]
 810aef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aef8:	f043 0220 	orr.w	r2, r3, #32
 810aefc:	68fb      	ldr	r3, [r7, #12]
 810aefe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810af02:	68f8      	ldr	r0, [r7, #12]
 810af04:	f000 ff10 	bl	810bd28 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810af08:	68fb      	ldr	r3, [r7, #12]
 810af0a:	2200      	movs	r2, #0
 810af0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810af10:	68fb      	ldr	r3, [r7, #12]
 810af12:	2201      	movs	r2, #1
 810af14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810af18:	68fb      	ldr	r3, [r7, #12]
 810af1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810af1e:	2b00      	cmp	r3, #0
 810af20:	d001      	beq.n	810af26 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 810af22:	2301      	movs	r3, #1
 810af24:	e000      	b.n	810af28 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 810af26:	7efb      	ldrb	r3, [r7, #27]
}
 810af28:	4618      	mov	r0, r3
 810af2a:	3720      	adds	r7, #32
 810af2c:	46bd      	mov	sp, r7
 810af2e:	bd80      	pop	{r7, pc}

0810af30 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810af30:	b580      	push	{r7, lr}
 810af32:	b08a      	sub	sp, #40	; 0x28
 810af34:	af02      	add	r7, sp, #8
 810af36:	60f8      	str	r0, [r7, #12]
 810af38:	60b9      	str	r1, [r7, #8]
 810af3a:	603b      	str	r3, [r7, #0]
 810af3c:	4613      	mov	r3, r2
 810af3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810af40:	2300      	movs	r3, #0
 810af42:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810af44:	68fb      	ldr	r3, [r7, #12]
 810af46:	681b      	ldr	r3, [r3, #0]
 810af48:	3330      	adds	r3, #48	; 0x30
 810af4a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 810af4c:	68fb      	ldr	r3, [r7, #12]
 810af4e:	685b      	ldr	r3, [r3, #4]
 810af50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810af54:	d112      	bne.n	810af7c <HAL_SPI_Receive+0x4c>
 810af56:	68fb      	ldr	r3, [r7, #12]
 810af58:	689b      	ldr	r3, [r3, #8]
 810af5a:	2b00      	cmp	r3, #0
 810af5c:	d10e      	bne.n	810af7c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 810af5e:	68fb      	ldr	r3, [r7, #12]
 810af60:	2204      	movs	r2, #4
 810af62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 810af66:	88fa      	ldrh	r2, [r7, #6]
 810af68:	683b      	ldr	r3, [r7, #0]
 810af6a:	9300      	str	r3, [sp, #0]
 810af6c:	4613      	mov	r3, r2
 810af6e:	68ba      	ldr	r2, [r7, #8]
 810af70:	68b9      	ldr	r1, [r7, #8]
 810af72:	68f8      	ldr	r0, [r7, #12]
 810af74:	f000 f9cc 	bl	810b310 <HAL_SPI_TransmitReceive>
 810af78:	4603      	mov	r3, r0
 810af7a:	e1c5      	b.n	810b308 <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 810af7c:	68fb      	ldr	r3, [r7, #12]
 810af7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810af82:	2b01      	cmp	r3, #1
 810af84:	d101      	bne.n	810af8a <HAL_SPI_Receive+0x5a>
 810af86:	2302      	movs	r3, #2
 810af88:	e1be      	b.n	810b308 <HAL_SPI_Receive+0x3d8>
 810af8a:	68fb      	ldr	r3, [r7, #12]
 810af8c:	2201      	movs	r2, #1
 810af8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810af92:	f7f7 ff9d 	bl	8102ed0 <HAL_GetTick>
 810af96:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 810af98:	68fb      	ldr	r3, [r7, #12]
 810af9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810af9e:	b2db      	uxtb	r3, r3
 810afa0:	2b01      	cmp	r3, #1
 810afa2:	d007      	beq.n	810afb4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 810afa4:	2302      	movs	r3, #2
 810afa6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 810afa8:	68fb      	ldr	r3, [r7, #12]
 810afaa:	2200      	movs	r2, #0
 810afac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810afb0:	7ffb      	ldrb	r3, [r7, #31]
 810afb2:	e1a9      	b.n	810b308 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 810afb4:	68bb      	ldr	r3, [r7, #8]
 810afb6:	2b00      	cmp	r3, #0
 810afb8:	d002      	beq.n	810afc0 <HAL_SPI_Receive+0x90>
 810afba:	88fb      	ldrh	r3, [r7, #6]
 810afbc:	2b00      	cmp	r3, #0
 810afbe:	d107      	bne.n	810afd0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 810afc0:	2301      	movs	r3, #1
 810afc2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 810afc4:	68fb      	ldr	r3, [r7, #12]
 810afc6:	2200      	movs	r2, #0
 810afc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810afcc:	7ffb      	ldrb	r3, [r7, #31]
 810afce:	e19b      	b.n	810b308 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 810afd0:	68fb      	ldr	r3, [r7, #12]
 810afd2:	2204      	movs	r2, #4
 810afd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810afd8:	68fb      	ldr	r3, [r7, #12]
 810afda:	2200      	movs	r2, #0
 810afdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 810afe0:	68fb      	ldr	r3, [r7, #12]
 810afe2:	68ba      	ldr	r2, [r7, #8]
 810afe4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 810afe6:	68fb      	ldr	r3, [r7, #12]
 810afe8:	88fa      	ldrh	r2, [r7, #6]
 810afea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810afee:	68fb      	ldr	r3, [r7, #12]
 810aff0:	88fa      	ldrh	r2, [r7, #6]
 810aff2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 810aff6:	68fb      	ldr	r3, [r7, #12]
 810aff8:	2200      	movs	r2, #0
 810affa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 810affc:	68fb      	ldr	r3, [r7, #12]
 810affe:	2200      	movs	r2, #0
 810b000:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 810b004:	68fb      	ldr	r3, [r7, #12]
 810b006:	2200      	movs	r2, #0
 810b008:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 810b00c:	68fb      	ldr	r3, [r7, #12]
 810b00e:	2200      	movs	r2, #0
 810b010:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810b012:	68fb      	ldr	r3, [r7, #12]
 810b014:	2200      	movs	r2, #0
 810b016:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810b018:	68fb      	ldr	r3, [r7, #12]
 810b01a:	689b      	ldr	r3, [r3, #8]
 810b01c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810b020:	d107      	bne.n	810b032 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 810b022:	68fb      	ldr	r3, [r7, #12]
 810b024:	681b      	ldr	r3, [r3, #0]
 810b026:	681a      	ldr	r2, [r3, #0]
 810b028:	68fb      	ldr	r3, [r7, #12]
 810b02a:	681b      	ldr	r3, [r3, #0]
 810b02c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 810b030:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810b032:	68fb      	ldr	r3, [r7, #12]
 810b034:	681b      	ldr	r3, [r3, #0]
 810b036:	685b      	ldr	r3, [r3, #4]
 810b038:	0c1b      	lsrs	r3, r3, #16
 810b03a:	041b      	lsls	r3, r3, #16
 810b03c:	88f9      	ldrh	r1, [r7, #6]
 810b03e:	68fa      	ldr	r2, [r7, #12]
 810b040:	6812      	ldr	r2, [r2, #0]
 810b042:	430b      	orrs	r3, r1
 810b044:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810b046:	68fb      	ldr	r3, [r7, #12]
 810b048:	681b      	ldr	r3, [r3, #0]
 810b04a:	681a      	ldr	r2, [r3, #0]
 810b04c:	68fb      	ldr	r3, [r7, #12]
 810b04e:	681b      	ldr	r3, [r3, #0]
 810b050:	f042 0201 	orr.w	r2, r2, #1
 810b054:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810b056:	68fb      	ldr	r3, [r7, #12]
 810b058:	685b      	ldr	r3, [r3, #4]
 810b05a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b05e:	d107      	bne.n	810b070 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810b060:	68fb      	ldr	r3, [r7, #12]
 810b062:	681b      	ldr	r3, [r3, #0]
 810b064:	681a      	ldr	r2, [r3, #0]
 810b066:	68fb      	ldr	r3, [r7, #12]
 810b068:	681b      	ldr	r3, [r3, #0]
 810b06a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810b06e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810b070:	68fb      	ldr	r3, [r7, #12]
 810b072:	68db      	ldr	r3, [r3, #12]
 810b074:	2b0f      	cmp	r3, #15
 810b076:	d948      	bls.n	810b10a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 810b078:	e040      	b.n	810b0fc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 810b07a:	68fb      	ldr	r3, [r7, #12]
 810b07c:	681b      	ldr	r3, [r3, #0]
 810b07e:	695a      	ldr	r2, [r3, #20]
 810b080:	f248 0308 	movw	r3, #32776	; 0x8008
 810b084:	4013      	ands	r3, r2
 810b086:	2b00      	cmp	r3, #0
 810b088:	d014      	beq.n	810b0b4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b08a:	68fb      	ldr	r3, [r7, #12]
 810b08c:	681a      	ldr	r2, [r3, #0]
 810b08e:	68fb      	ldr	r3, [r7, #12]
 810b090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b092:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b094:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810b096:	68fb      	ldr	r3, [r7, #12]
 810b098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b09a:	1d1a      	adds	r2, r3, #4
 810b09c:	68fb      	ldr	r3, [r7, #12]
 810b09e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810b0a0:	68fb      	ldr	r3, [r7, #12]
 810b0a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b0a6:	b29b      	uxth	r3, r3
 810b0a8:	3b01      	subs	r3, #1
 810b0aa:	b29a      	uxth	r2, r3
 810b0ac:	68fb      	ldr	r3, [r7, #12]
 810b0ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b0b2:	e023      	b.n	810b0fc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b0b4:	f7f7 ff0c 	bl	8102ed0 <HAL_GetTick>
 810b0b8:	4602      	mov	r2, r0
 810b0ba:	697b      	ldr	r3, [r7, #20]
 810b0bc:	1ad3      	subs	r3, r2, r3
 810b0be:	683a      	ldr	r2, [r7, #0]
 810b0c0:	429a      	cmp	r2, r3
 810b0c2:	d803      	bhi.n	810b0cc <HAL_SPI_Receive+0x19c>
 810b0c4:	683b      	ldr	r3, [r7, #0]
 810b0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b0ca:	d102      	bne.n	810b0d2 <HAL_SPI_Receive+0x1a2>
 810b0cc:	683b      	ldr	r3, [r7, #0]
 810b0ce:	2b00      	cmp	r3, #0
 810b0d0:	d114      	bne.n	810b0fc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810b0d2:	68f8      	ldr	r0, [r7, #12]
 810b0d4:	f000 fe28 	bl	810bd28 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810b0d8:	68fb      	ldr	r3, [r7, #12]
 810b0da:	2200      	movs	r2, #0
 810b0dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b0e0:	68fb      	ldr	r3, [r7, #12]
 810b0e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b0e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b0ea:	68fb      	ldr	r3, [r7, #12]
 810b0ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810b0f0:	68fb      	ldr	r3, [r7, #12]
 810b0f2:	2201      	movs	r2, #1
 810b0f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810b0f8:	2301      	movs	r3, #1
 810b0fa:	e105      	b.n	810b308 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810b0fc:	68fb      	ldr	r3, [r7, #12]
 810b0fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b102:	b29b      	uxth	r3, r3
 810b104:	2b00      	cmp	r3, #0
 810b106:	d1b8      	bne.n	810b07a <HAL_SPI_Receive+0x14a>
 810b108:	e0eb      	b.n	810b2e2 <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810b10a:	68fb      	ldr	r3, [r7, #12]
 810b10c:	68db      	ldr	r3, [r3, #12]
 810b10e:	2b07      	cmp	r3, #7
 810b110:	f240 80e0 	bls.w	810b2d4 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 810b114:	e05b      	b.n	810b1ce <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 810b116:	68fb      	ldr	r3, [r7, #12]
 810b118:	681b      	ldr	r3, [r3, #0]
 810b11a:	695b      	ldr	r3, [r3, #20]
 810b11c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b120:	2b00      	cmp	r3, #0
 810b122:	d030      	beq.n	810b186 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810b124:	68fb      	ldr	r3, [r7, #12]
 810b126:	681b      	ldr	r3, [r3, #0]
 810b128:	695b      	ldr	r3, [r3, #20]
 810b12a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b12e:	2b00      	cmp	r3, #0
 810b130:	d014      	beq.n	810b15c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b132:	68fb      	ldr	r3, [r7, #12]
 810b134:	681a      	ldr	r2, [r3, #0]
 810b136:	68fb      	ldr	r3, [r7, #12]
 810b138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b13a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b13c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b13e:	68fb      	ldr	r3, [r7, #12]
 810b140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b142:	1d1a      	adds	r2, r3, #4
 810b144:	68fb      	ldr	r3, [r7, #12]
 810b146:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b148:	68fb      	ldr	r3, [r7, #12]
 810b14a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b14e:	b29b      	uxth	r3, r3
 810b150:	3b02      	subs	r3, #2
 810b152:	b29a      	uxth	r2, r3
 810b154:	68fb      	ldr	r3, [r7, #12]
 810b156:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b15a:	e038      	b.n	810b1ce <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b15c:	68fb      	ldr	r3, [r7, #12]
 810b15e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b160:	69ba      	ldr	r2, [r7, #24]
 810b162:	8812      	ldrh	r2, [r2, #0]
 810b164:	b292      	uxth	r2, r2
 810b166:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b168:	68fb      	ldr	r3, [r7, #12]
 810b16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b16c:	1c9a      	adds	r2, r3, #2
 810b16e:	68fb      	ldr	r3, [r7, #12]
 810b170:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b172:	68fb      	ldr	r3, [r7, #12]
 810b174:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b178:	b29b      	uxth	r3, r3
 810b17a:	3b01      	subs	r3, #1
 810b17c:	b29a      	uxth	r2, r3
 810b17e:	68fb      	ldr	r3, [r7, #12]
 810b180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b184:	e023      	b.n	810b1ce <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b186:	f7f7 fea3 	bl	8102ed0 <HAL_GetTick>
 810b18a:	4602      	mov	r2, r0
 810b18c:	697b      	ldr	r3, [r7, #20]
 810b18e:	1ad3      	subs	r3, r2, r3
 810b190:	683a      	ldr	r2, [r7, #0]
 810b192:	429a      	cmp	r2, r3
 810b194:	d803      	bhi.n	810b19e <HAL_SPI_Receive+0x26e>
 810b196:	683b      	ldr	r3, [r7, #0]
 810b198:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b19c:	d102      	bne.n	810b1a4 <HAL_SPI_Receive+0x274>
 810b19e:	683b      	ldr	r3, [r7, #0]
 810b1a0:	2b00      	cmp	r3, #0
 810b1a2:	d114      	bne.n	810b1ce <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810b1a4:	68f8      	ldr	r0, [r7, #12]
 810b1a6:	f000 fdbf 	bl	810bd28 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810b1aa:	68fb      	ldr	r3, [r7, #12]
 810b1ac:	2200      	movs	r2, #0
 810b1ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b1b2:	68fb      	ldr	r3, [r7, #12]
 810b1b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b1b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b1bc:	68fb      	ldr	r3, [r7, #12]
 810b1be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810b1c2:	68fb      	ldr	r3, [r7, #12]
 810b1c4:	2201      	movs	r2, #1
 810b1c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810b1ca:	2301      	movs	r3, #1
 810b1cc:	e09c      	b.n	810b308 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810b1ce:	68fb      	ldr	r3, [r7, #12]
 810b1d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b1d4:	b29b      	uxth	r3, r3
 810b1d6:	2b00      	cmp	r3, #0
 810b1d8:	d19d      	bne.n	810b116 <HAL_SPI_Receive+0x1e6>
 810b1da:	e082      	b.n	810b2e2 <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 810b1dc:	68fb      	ldr	r3, [r7, #12]
 810b1de:	681b      	ldr	r3, [r3, #0]
 810b1e0:	695b      	ldr	r3, [r3, #20]
 810b1e2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b1e6:	2b00      	cmp	r3, #0
 810b1e8:	d050      	beq.n	810b28c <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810b1ea:	68fb      	ldr	r3, [r7, #12]
 810b1ec:	681b      	ldr	r3, [r3, #0]
 810b1ee:	695b      	ldr	r3, [r3, #20]
 810b1f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b1f4:	2b00      	cmp	r3, #0
 810b1f6:	d014      	beq.n	810b222 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b1f8:	68fb      	ldr	r3, [r7, #12]
 810b1fa:	681a      	ldr	r2, [r3, #0]
 810b1fc:	68fb      	ldr	r3, [r7, #12]
 810b1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b200:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b202:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b204:	68fb      	ldr	r3, [r7, #12]
 810b206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b208:	1d1a      	adds	r2, r3, #4
 810b20a:	68fb      	ldr	r3, [r7, #12]
 810b20c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810b20e:	68fb      	ldr	r3, [r7, #12]
 810b210:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b214:	b29b      	uxth	r3, r3
 810b216:	3b04      	subs	r3, #4
 810b218:	b29a      	uxth	r2, r3
 810b21a:	68fb      	ldr	r3, [r7, #12]
 810b21c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b220:	e058      	b.n	810b2d4 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 810b222:	68fb      	ldr	r3, [r7, #12]
 810b224:	681b      	ldr	r3, [r3, #0]
 810b226:	695b      	ldr	r3, [r3, #20]
 810b228:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810b22c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b230:	d914      	bls.n	810b25c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b232:	68fb      	ldr	r3, [r7, #12]
 810b234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b236:	69ba      	ldr	r2, [r7, #24]
 810b238:	8812      	ldrh	r2, [r2, #0]
 810b23a:	b292      	uxth	r2, r2
 810b23c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b23e:	68fb      	ldr	r3, [r7, #12]
 810b240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b242:	1c9a      	adds	r2, r3, #2
 810b244:	68fb      	ldr	r3, [r7, #12]
 810b246:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b248:	68fb      	ldr	r3, [r7, #12]
 810b24a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b24e:	b29b      	uxth	r3, r3
 810b250:	3b02      	subs	r3, #2
 810b252:	b29a      	uxth	r2, r3
 810b254:	68fb      	ldr	r3, [r7, #12]
 810b256:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b25a:	e03b      	b.n	810b2d4 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b25c:	68fb      	ldr	r3, [r7, #12]
 810b25e:	681b      	ldr	r3, [r3, #0]
 810b260:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810b264:	68fb      	ldr	r3, [r7, #12]
 810b266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b268:	7812      	ldrb	r2, [r2, #0]
 810b26a:	b2d2      	uxtb	r2, r2
 810b26c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b26e:	68fb      	ldr	r3, [r7, #12]
 810b270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b272:	1c5a      	adds	r2, r3, #1
 810b274:	68fb      	ldr	r3, [r7, #12]
 810b276:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b278:	68fb      	ldr	r3, [r7, #12]
 810b27a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b27e:	b29b      	uxth	r3, r3
 810b280:	3b01      	subs	r3, #1
 810b282:	b29a      	uxth	r2, r3
 810b284:	68fb      	ldr	r3, [r7, #12]
 810b286:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b28a:	e023      	b.n	810b2d4 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b28c:	f7f7 fe20 	bl	8102ed0 <HAL_GetTick>
 810b290:	4602      	mov	r2, r0
 810b292:	697b      	ldr	r3, [r7, #20]
 810b294:	1ad3      	subs	r3, r2, r3
 810b296:	683a      	ldr	r2, [r7, #0]
 810b298:	429a      	cmp	r2, r3
 810b29a:	d803      	bhi.n	810b2a4 <HAL_SPI_Receive+0x374>
 810b29c:	683b      	ldr	r3, [r7, #0]
 810b29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b2a2:	d102      	bne.n	810b2aa <HAL_SPI_Receive+0x37a>
 810b2a4:	683b      	ldr	r3, [r7, #0]
 810b2a6:	2b00      	cmp	r3, #0
 810b2a8:	d114      	bne.n	810b2d4 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810b2aa:	68f8      	ldr	r0, [r7, #12]
 810b2ac:	f000 fd3c 	bl	810bd28 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810b2b0:	68fb      	ldr	r3, [r7, #12]
 810b2b2:	2200      	movs	r2, #0
 810b2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b2b8:	68fb      	ldr	r3, [r7, #12]
 810b2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b2be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b2c2:	68fb      	ldr	r3, [r7, #12]
 810b2c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810b2c8:	68fb      	ldr	r3, [r7, #12]
 810b2ca:	2201      	movs	r2, #1
 810b2cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810b2d0:	2301      	movs	r3, #1
 810b2d2:	e019      	b.n	810b308 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810b2d4:	68fb      	ldr	r3, [r7, #12]
 810b2d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b2da:	b29b      	uxth	r3, r3
 810b2dc:	2b00      	cmp	r3, #0
 810b2de:	f47f af7d 	bne.w	810b1dc <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810b2e2:	68f8      	ldr	r0, [r7, #12]
 810b2e4:	f000 fd20 	bl	810bd28 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810b2e8:	68fb      	ldr	r3, [r7, #12]
 810b2ea:	2200      	movs	r2, #0
 810b2ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810b2f0:	68fb      	ldr	r3, [r7, #12]
 810b2f2:	2201      	movs	r2, #1
 810b2f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810b2f8:	68fb      	ldr	r3, [r7, #12]
 810b2fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b2fe:	2b00      	cmp	r3, #0
 810b300:	d001      	beq.n	810b306 <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 810b302:	2301      	movs	r3, #1
 810b304:	e000      	b.n	810b308 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 810b306:	7ffb      	ldrb	r3, [r7, #31]
}
 810b308:	4618      	mov	r0, r3
 810b30a:	3720      	adds	r7, #32
 810b30c:	46bd      	mov	sp, r7
 810b30e:	bd80      	pop	{r7, pc}

0810b310 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 810b310:	b580      	push	{r7, lr}
 810b312:	b08e      	sub	sp, #56	; 0x38
 810b314:	af02      	add	r7, sp, #8
 810b316:	60f8      	str	r0, [r7, #12]
 810b318:	60b9      	str	r1, [r7, #8]
 810b31a:	607a      	str	r2, [r7, #4]
 810b31c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810b31e:	2300      	movs	r3, #0
 810b320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810b324:	68fb      	ldr	r3, [r7, #12]
 810b326:	681b      	ldr	r3, [r3, #0]
 810b328:	3320      	adds	r3, #32
 810b32a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810b32c:	68fb      	ldr	r3, [r7, #12]
 810b32e:	681b      	ldr	r3, [r3, #0]
 810b330:	3330      	adds	r3, #48	; 0x30
 810b332:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 810b334:	68fb      	ldr	r3, [r7, #12]
 810b336:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b33a:	2b01      	cmp	r3, #1
 810b33c:	d101      	bne.n	810b342 <HAL_SPI_TransmitReceive+0x32>
 810b33e:	2302      	movs	r3, #2
 810b340:	e2cb      	b.n	810b8da <HAL_SPI_TransmitReceive+0x5ca>
 810b342:	68fb      	ldr	r3, [r7, #12]
 810b344:	2201      	movs	r2, #1
 810b346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810b34a:	f7f7 fdc1 	bl	8102ed0 <HAL_GetTick>
 810b34e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 810b350:	887b      	ldrh	r3, [r7, #2]
 810b352:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 810b354:	887b      	ldrh	r3, [r7, #2]
 810b356:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 810b358:	68fb      	ldr	r3, [r7, #12]
 810b35a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b35e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 810b360:	68fb      	ldr	r3, [r7, #12]
 810b362:	685b      	ldr	r3, [r3, #4]
 810b364:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 810b366:	7efb      	ldrb	r3, [r7, #27]
 810b368:	2b01      	cmp	r3, #1
 810b36a:	d014      	beq.n	810b396 <HAL_SPI_TransmitReceive+0x86>
 810b36c:	697b      	ldr	r3, [r7, #20]
 810b36e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b372:	d106      	bne.n	810b382 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 810b374:	68fb      	ldr	r3, [r7, #12]
 810b376:	689b      	ldr	r3, [r3, #8]
 810b378:	2b00      	cmp	r3, #0
 810b37a:	d102      	bne.n	810b382 <HAL_SPI_TransmitReceive+0x72>
 810b37c:	7efb      	ldrb	r3, [r7, #27]
 810b37e:	2b04      	cmp	r3, #4
 810b380:	d009      	beq.n	810b396 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 810b382:	2302      	movs	r3, #2
 810b384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810b388:	68fb      	ldr	r3, [r7, #12]
 810b38a:	2200      	movs	r2, #0
 810b38c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810b390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810b394:	e2a1      	b.n	810b8da <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810b396:	68bb      	ldr	r3, [r7, #8]
 810b398:	2b00      	cmp	r3, #0
 810b39a:	d005      	beq.n	810b3a8 <HAL_SPI_TransmitReceive+0x98>
 810b39c:	687b      	ldr	r3, [r7, #4]
 810b39e:	2b00      	cmp	r3, #0
 810b3a0:	d002      	beq.n	810b3a8 <HAL_SPI_TransmitReceive+0x98>
 810b3a2:	887b      	ldrh	r3, [r7, #2]
 810b3a4:	2b00      	cmp	r3, #0
 810b3a6:	d109      	bne.n	810b3bc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 810b3a8:	2301      	movs	r3, #1
 810b3aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810b3ae:	68fb      	ldr	r3, [r7, #12]
 810b3b0:	2200      	movs	r2, #0
 810b3b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810b3b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810b3ba:	e28e      	b.n	810b8da <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810b3bc:	68fb      	ldr	r3, [r7, #12]
 810b3be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b3c2:	b2db      	uxtb	r3, r3
 810b3c4:	2b04      	cmp	r3, #4
 810b3c6:	d003      	beq.n	810b3d0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 810b3c8:	68fb      	ldr	r3, [r7, #12]
 810b3ca:	2205      	movs	r2, #5
 810b3cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810b3d0:	68fb      	ldr	r3, [r7, #12]
 810b3d2:	2200      	movs	r2, #0
 810b3d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810b3d8:	68fb      	ldr	r3, [r7, #12]
 810b3da:	687a      	ldr	r2, [r7, #4]
 810b3dc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 810b3de:	68fb      	ldr	r3, [r7, #12]
 810b3e0:	887a      	ldrh	r2, [r7, #2]
 810b3e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 810b3e6:	68fb      	ldr	r3, [r7, #12]
 810b3e8:	887a      	ldrh	r2, [r7, #2]
 810b3ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810b3ee:	68fb      	ldr	r3, [r7, #12]
 810b3f0:	68ba      	ldr	r2, [r7, #8]
 810b3f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 810b3f4:	68fb      	ldr	r3, [r7, #12]
 810b3f6:	887a      	ldrh	r2, [r7, #2]
 810b3f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 810b3fc:	68fb      	ldr	r3, [r7, #12]
 810b3fe:	887a      	ldrh	r2, [r7, #2]
 810b400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810b404:	68fb      	ldr	r3, [r7, #12]
 810b406:	2200      	movs	r2, #0
 810b408:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810b40a:	68fb      	ldr	r3, [r7, #12]
 810b40c:	2200      	movs	r2, #0
 810b40e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810b410:	68fb      	ldr	r3, [r7, #12]
 810b412:	681b      	ldr	r3, [r3, #0]
 810b414:	685b      	ldr	r3, [r3, #4]
 810b416:	0c1b      	lsrs	r3, r3, #16
 810b418:	041b      	lsls	r3, r3, #16
 810b41a:	8879      	ldrh	r1, [r7, #2]
 810b41c:	68fa      	ldr	r2, [r7, #12]
 810b41e:	6812      	ldr	r2, [r2, #0]
 810b420:	430b      	orrs	r3, r1
 810b422:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 810b424:	68fb      	ldr	r3, [r7, #12]
 810b426:	681b      	ldr	r3, [r3, #0]
 810b428:	681a      	ldr	r2, [r3, #0]
 810b42a:	68fb      	ldr	r3, [r7, #12]
 810b42c:	681b      	ldr	r3, [r3, #0]
 810b42e:	f042 0201 	orr.w	r2, r2, #1
 810b432:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810b434:	68fb      	ldr	r3, [r7, #12]
 810b436:	685b      	ldr	r3, [r3, #4]
 810b438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b43c:	d107      	bne.n	810b44e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810b43e:	68fb      	ldr	r3, [r7, #12]
 810b440:	681b      	ldr	r3, [r3, #0]
 810b442:	681a      	ldr	r2, [r3, #0]
 810b444:	68fb      	ldr	r3, [r7, #12]
 810b446:	681b      	ldr	r3, [r3, #0]
 810b448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810b44c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810b44e:	68fb      	ldr	r3, [r7, #12]
 810b450:	68db      	ldr	r3, [r3, #12]
 810b452:	2b0f      	cmp	r3, #15
 810b454:	d970      	bls.n	810b538 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b456:	e068      	b.n	810b52a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810b458:	68fb      	ldr	r3, [r7, #12]
 810b45a:	681b      	ldr	r3, [r3, #0]
 810b45c:	695b      	ldr	r3, [r3, #20]
 810b45e:	f003 0302 	and.w	r3, r3, #2
 810b462:	2b02      	cmp	r3, #2
 810b464:	d11a      	bne.n	810b49c <HAL_SPI_TransmitReceive+0x18c>
 810b466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b468:	2b00      	cmp	r3, #0
 810b46a:	d017      	beq.n	810b49c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810b46c:	68fb      	ldr	r3, [r7, #12]
 810b46e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b470:	68fb      	ldr	r3, [r7, #12]
 810b472:	681b      	ldr	r3, [r3, #0]
 810b474:	6812      	ldr	r2, [r2, #0]
 810b476:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810b478:	68fb      	ldr	r3, [r7, #12]
 810b47a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b47c:	1d1a      	adds	r2, r3, #4
 810b47e:	68fb      	ldr	r3, [r7, #12]
 810b480:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 810b482:	68fb      	ldr	r3, [r7, #12]
 810b484:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b488:	b29b      	uxth	r3, r3
 810b48a:	3b01      	subs	r3, #1
 810b48c:	b29a      	uxth	r2, r3
 810b48e:	68fb      	ldr	r3, [r7, #12]
 810b490:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810b494:	68fb      	ldr	r3, [r7, #12]
 810b496:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b49a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 810b49c:	68fb      	ldr	r3, [r7, #12]
 810b49e:	681b      	ldr	r3, [r3, #0]
 810b4a0:	695a      	ldr	r2, [r3, #20]
 810b4a2:	f248 0308 	movw	r3, #32776	; 0x8008
 810b4a6:	4013      	ands	r3, r2
 810b4a8:	2b00      	cmp	r3, #0
 810b4aa:	d01a      	beq.n	810b4e2 <HAL_SPI_TransmitReceive+0x1d2>
 810b4ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b4ae:	2b00      	cmp	r3, #0
 810b4b0:	d017      	beq.n	810b4e2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b4b2:	68fb      	ldr	r3, [r7, #12]
 810b4b4:	681a      	ldr	r2, [r3, #0]
 810b4b6:	68fb      	ldr	r3, [r7, #12]
 810b4b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b4ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b4bc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810b4be:	68fb      	ldr	r3, [r7, #12]
 810b4c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b4c2:	1d1a      	adds	r2, r3, #4
 810b4c4:	68fb      	ldr	r3, [r7, #12]
 810b4c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 810b4c8:	68fb      	ldr	r3, [r7, #12]
 810b4ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b4ce:	b29b      	uxth	r3, r3
 810b4d0:	3b01      	subs	r3, #1
 810b4d2:	b29a      	uxth	r2, r3
 810b4d4:	68fb      	ldr	r3, [r7, #12]
 810b4d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 810b4da:	68fb      	ldr	r3, [r7, #12]
 810b4dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b4e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b4e2:	f7f7 fcf5 	bl	8102ed0 <HAL_GetTick>
 810b4e6:	4602      	mov	r2, r0
 810b4e8:	69fb      	ldr	r3, [r7, #28]
 810b4ea:	1ad3      	subs	r3, r2, r3
 810b4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810b4ee:	429a      	cmp	r2, r3
 810b4f0:	d803      	bhi.n	810b4fa <HAL_SPI_TransmitReceive+0x1ea>
 810b4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b4f8:	d102      	bne.n	810b500 <HAL_SPI_TransmitReceive+0x1f0>
 810b4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b4fc:	2b00      	cmp	r3, #0
 810b4fe:	d114      	bne.n	810b52a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810b500:	68f8      	ldr	r0, [r7, #12]
 810b502:	f000 fc11 	bl	810bd28 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 810b506:	68fb      	ldr	r3, [r7, #12]
 810b508:	2200      	movs	r2, #0
 810b50a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b50e:	68fb      	ldr	r3, [r7, #12]
 810b510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b514:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b518:	68fb      	ldr	r3, [r7, #12]
 810b51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810b51e:	68fb      	ldr	r3, [r7, #12]
 810b520:	2201      	movs	r2, #1
 810b522:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 810b526:	2301      	movs	r3, #1
 810b528:	e1d7      	b.n	810b8da <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b52a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b52c:	2b00      	cmp	r3, #0
 810b52e:	d193      	bne.n	810b458 <HAL_SPI_TransmitReceive+0x148>
 810b530:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b532:	2b00      	cmp	r3, #0
 810b534:	d190      	bne.n	810b458 <HAL_SPI_TransmitReceive+0x148>
 810b536:	e1a9      	b.n	810b88c <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810b538:	68fb      	ldr	r3, [r7, #12]
 810b53a:	68db      	ldr	r3, [r3, #12]
 810b53c:	2b07      	cmp	r3, #7
 810b53e:	f240 819d 	bls.w	810b87c <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b542:	e0a6      	b.n	810b692 <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 810b544:	68fb      	ldr	r3, [r7, #12]
 810b546:	681b      	ldr	r3, [r3, #0]
 810b548:	695b      	ldr	r3, [r3, #20]
 810b54a:	f003 0302 	and.w	r3, r3, #2
 810b54e:	2b02      	cmp	r3, #2
 810b550:	d139      	bne.n	810b5c6 <HAL_SPI_TransmitReceive+0x2b6>
 810b552:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b554:	2b00      	cmp	r3, #0
 810b556:	d036      	beq.n	810b5c6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810b558:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b55a:	2b01      	cmp	r3, #1
 810b55c:	d91c      	bls.n	810b598 <HAL_SPI_TransmitReceive+0x288>
 810b55e:	68fb      	ldr	r3, [r7, #12]
 810b560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b562:	2b00      	cmp	r3, #0
 810b564:	d018      	beq.n	810b598 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810b566:	68fb      	ldr	r3, [r7, #12]
 810b568:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b56a:	68fb      	ldr	r3, [r7, #12]
 810b56c:	681b      	ldr	r3, [r3, #0]
 810b56e:	6812      	ldr	r2, [r2, #0]
 810b570:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810b572:	68fb      	ldr	r3, [r7, #12]
 810b574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b576:	1d1a      	adds	r2, r3, #4
 810b578:	68fb      	ldr	r3, [r7, #12]
 810b57a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810b57c:	68fb      	ldr	r3, [r7, #12]
 810b57e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b582:	b29b      	uxth	r3, r3
 810b584:	3b02      	subs	r3, #2
 810b586:	b29a      	uxth	r2, r3
 810b588:	68fb      	ldr	r3, [r7, #12]
 810b58a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b58e:	68fb      	ldr	r3, [r7, #12]
 810b590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b594:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810b596:	e016      	b.n	810b5c6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810b598:	68fb      	ldr	r3, [r7, #12]
 810b59a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b59c:	881a      	ldrh	r2, [r3, #0]
 810b59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b5a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810b5a2:	68fb      	ldr	r3, [r7, #12]
 810b5a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b5a6:	1c9a      	adds	r2, r3, #2
 810b5a8:	68fb      	ldr	r3, [r7, #12]
 810b5aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810b5ac:	68fb      	ldr	r3, [r7, #12]
 810b5ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b5b2:	b29b      	uxth	r3, r3
 810b5b4:	3b01      	subs	r3, #1
 810b5b6:	b29a      	uxth	r2, r3
 810b5b8:	68fb      	ldr	r3, [r7, #12]
 810b5ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b5be:	68fb      	ldr	r3, [r7, #12]
 810b5c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b5c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 810b5c6:	68fb      	ldr	r3, [r7, #12]
 810b5c8:	681b      	ldr	r3, [r3, #0]
 810b5ca:	695b      	ldr	r3, [r3, #20]
 810b5cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b5d0:	2b00      	cmp	r3, #0
 810b5d2:	d03a      	beq.n	810b64a <HAL_SPI_TransmitReceive+0x33a>
 810b5d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b5d6:	2b00      	cmp	r3, #0
 810b5d8:	d037      	beq.n	810b64a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810b5da:	68fb      	ldr	r3, [r7, #12]
 810b5dc:	681b      	ldr	r3, [r3, #0]
 810b5de:	695b      	ldr	r3, [r3, #20]
 810b5e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b5e4:	2b00      	cmp	r3, #0
 810b5e6:	d018      	beq.n	810b61a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b5e8:	68fb      	ldr	r3, [r7, #12]
 810b5ea:	681a      	ldr	r2, [r3, #0]
 810b5ec:	68fb      	ldr	r3, [r7, #12]
 810b5ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b5f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b5f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b5f4:	68fb      	ldr	r3, [r7, #12]
 810b5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b5f8:	1d1a      	adds	r2, r3, #4
 810b5fa:	68fb      	ldr	r3, [r7, #12]
 810b5fc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b5fe:	68fb      	ldr	r3, [r7, #12]
 810b600:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b604:	b29b      	uxth	r3, r3
 810b606:	3b02      	subs	r3, #2
 810b608:	b29a      	uxth	r2, r3
 810b60a:	68fb      	ldr	r3, [r7, #12]
 810b60c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b610:	68fb      	ldr	r3, [r7, #12]
 810b612:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b616:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810b618:	e017      	b.n	810b64a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b61a:	68fb      	ldr	r3, [r7, #12]
 810b61c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b61e:	6a3a      	ldr	r2, [r7, #32]
 810b620:	8812      	ldrh	r2, [r2, #0]
 810b622:	b292      	uxth	r2, r2
 810b624:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b626:	68fb      	ldr	r3, [r7, #12]
 810b628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b62a:	1c9a      	adds	r2, r3, #2
 810b62c:	68fb      	ldr	r3, [r7, #12]
 810b62e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b630:	68fb      	ldr	r3, [r7, #12]
 810b632:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b636:	b29b      	uxth	r3, r3
 810b638:	3b01      	subs	r3, #1
 810b63a:	b29a      	uxth	r2, r3
 810b63c:	68fb      	ldr	r3, [r7, #12]
 810b63e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b642:	68fb      	ldr	r3, [r7, #12]
 810b644:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b648:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b64a:	f7f7 fc41 	bl	8102ed0 <HAL_GetTick>
 810b64e:	4602      	mov	r2, r0
 810b650:	69fb      	ldr	r3, [r7, #28]
 810b652:	1ad3      	subs	r3, r2, r3
 810b654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810b656:	429a      	cmp	r2, r3
 810b658:	d803      	bhi.n	810b662 <HAL_SPI_TransmitReceive+0x352>
 810b65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b660:	d102      	bne.n	810b668 <HAL_SPI_TransmitReceive+0x358>
 810b662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b664:	2b00      	cmp	r3, #0
 810b666:	d114      	bne.n	810b692 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810b668:	68f8      	ldr	r0, [r7, #12]
 810b66a:	f000 fb5d 	bl	810bd28 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 810b66e:	68fb      	ldr	r3, [r7, #12]
 810b670:	2200      	movs	r2, #0
 810b672:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b676:	68fb      	ldr	r3, [r7, #12]
 810b678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b67c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b680:	68fb      	ldr	r3, [r7, #12]
 810b682:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810b686:	68fb      	ldr	r3, [r7, #12]
 810b688:	2201      	movs	r2, #1
 810b68a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 810b68e:	2301      	movs	r3, #1
 810b690:	e123      	b.n	810b8da <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b692:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b694:	2b00      	cmp	r3, #0
 810b696:	f47f af55 	bne.w	810b544 <HAL_SPI_TransmitReceive+0x234>
 810b69a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b69c:	2b00      	cmp	r3, #0
 810b69e:	f47f af51 	bne.w	810b544 <HAL_SPI_TransmitReceive+0x234>
 810b6a2:	e0f3      	b.n	810b88c <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810b6a4:	68fb      	ldr	r3, [r7, #12]
 810b6a6:	681b      	ldr	r3, [r3, #0]
 810b6a8:	695b      	ldr	r3, [r3, #20]
 810b6aa:	f003 0302 	and.w	r3, r3, #2
 810b6ae:	2b02      	cmp	r3, #2
 810b6b0:	d15a      	bne.n	810b768 <HAL_SPI_TransmitReceive+0x458>
 810b6b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b6b4:	2b00      	cmp	r3, #0
 810b6b6:	d057      	beq.n	810b768 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810b6b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b6ba:	2b03      	cmp	r3, #3
 810b6bc:	d91c      	bls.n	810b6f8 <HAL_SPI_TransmitReceive+0x3e8>
 810b6be:	68fb      	ldr	r3, [r7, #12]
 810b6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b6c2:	2b40      	cmp	r3, #64	; 0x40
 810b6c4:	d918      	bls.n	810b6f8 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810b6c6:	68fb      	ldr	r3, [r7, #12]
 810b6c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b6ca:	68fb      	ldr	r3, [r7, #12]
 810b6cc:	681b      	ldr	r3, [r3, #0]
 810b6ce:	6812      	ldr	r2, [r2, #0]
 810b6d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810b6d2:	68fb      	ldr	r3, [r7, #12]
 810b6d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b6d6:	1d1a      	adds	r2, r3, #4
 810b6d8:	68fb      	ldr	r3, [r7, #12]
 810b6da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810b6dc:	68fb      	ldr	r3, [r7, #12]
 810b6de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b6e2:	b29b      	uxth	r3, r3
 810b6e4:	3b04      	subs	r3, #4
 810b6e6:	b29a      	uxth	r2, r3
 810b6e8:	68fb      	ldr	r3, [r7, #12]
 810b6ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b6ee:	68fb      	ldr	r3, [r7, #12]
 810b6f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b6f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810b6f6:	e037      	b.n	810b768 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810b6f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b6fa:	2b01      	cmp	r3, #1
 810b6fc:	d91b      	bls.n	810b736 <HAL_SPI_TransmitReceive+0x426>
 810b6fe:	68fb      	ldr	r3, [r7, #12]
 810b700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b702:	2b00      	cmp	r3, #0
 810b704:	d017      	beq.n	810b736 <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810b706:	68fb      	ldr	r3, [r7, #12]
 810b708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b70a:	881a      	ldrh	r2, [r3, #0]
 810b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b70e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810b710:	68fb      	ldr	r3, [r7, #12]
 810b712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b714:	1c9a      	adds	r2, r3, #2
 810b716:	68fb      	ldr	r3, [r7, #12]
 810b718:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810b71a:	68fb      	ldr	r3, [r7, #12]
 810b71c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b720:	b29b      	uxth	r3, r3
 810b722:	3b02      	subs	r3, #2
 810b724:	b29a      	uxth	r2, r3
 810b726:	68fb      	ldr	r3, [r7, #12]
 810b728:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b72c:	68fb      	ldr	r3, [r7, #12]
 810b72e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b732:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810b734:	e018      	b.n	810b768 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810b736:	68fb      	ldr	r3, [r7, #12]
 810b738:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b73a:	68fb      	ldr	r3, [r7, #12]
 810b73c:	681b      	ldr	r3, [r3, #0]
 810b73e:	3320      	adds	r3, #32
 810b740:	7812      	ldrb	r2, [r2, #0]
 810b742:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810b744:	68fb      	ldr	r3, [r7, #12]
 810b746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b748:	1c5a      	adds	r2, r3, #1
 810b74a:	68fb      	ldr	r3, [r7, #12]
 810b74c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810b74e:	68fb      	ldr	r3, [r7, #12]
 810b750:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b754:	b29b      	uxth	r3, r3
 810b756:	3b01      	subs	r3, #1
 810b758:	b29a      	uxth	r2, r3
 810b75a:	68fb      	ldr	r3, [r7, #12]
 810b75c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b760:	68fb      	ldr	r3, [r7, #12]
 810b762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b766:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 810b768:	68fb      	ldr	r3, [r7, #12]
 810b76a:	681b      	ldr	r3, [r3, #0]
 810b76c:	695b      	ldr	r3, [r3, #20]
 810b76e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b772:	2b00      	cmp	r3, #0
 810b774:	d05e      	beq.n	810b834 <HAL_SPI_TransmitReceive+0x524>
 810b776:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b778:	2b00      	cmp	r3, #0
 810b77a:	d05b      	beq.n	810b834 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810b77c:	68fb      	ldr	r3, [r7, #12]
 810b77e:	681b      	ldr	r3, [r3, #0]
 810b780:	695b      	ldr	r3, [r3, #20]
 810b782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b786:	2b00      	cmp	r3, #0
 810b788:	d018      	beq.n	810b7bc <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b78a:	68fb      	ldr	r3, [r7, #12]
 810b78c:	681a      	ldr	r2, [r3, #0]
 810b78e:	68fb      	ldr	r3, [r7, #12]
 810b790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b792:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b794:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b796:	68fb      	ldr	r3, [r7, #12]
 810b798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b79a:	1d1a      	adds	r2, r3, #4
 810b79c:	68fb      	ldr	r3, [r7, #12]
 810b79e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810b7a0:	68fb      	ldr	r3, [r7, #12]
 810b7a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b7a6:	b29b      	uxth	r3, r3
 810b7a8:	3b04      	subs	r3, #4
 810b7aa:	b29a      	uxth	r2, r3
 810b7ac:	68fb      	ldr	r3, [r7, #12]
 810b7ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b7b2:	68fb      	ldr	r3, [r7, #12]
 810b7b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b7b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810b7ba:	e03b      	b.n	810b834 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 810b7bc:	68fb      	ldr	r3, [r7, #12]
 810b7be:	681b      	ldr	r3, [r3, #0]
 810b7c0:	695b      	ldr	r3, [r3, #20]
 810b7c2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810b7c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b7ca:	d918      	bls.n	810b7fe <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b7cc:	68fb      	ldr	r3, [r7, #12]
 810b7ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b7d0:	6a3a      	ldr	r2, [r7, #32]
 810b7d2:	8812      	ldrh	r2, [r2, #0]
 810b7d4:	b292      	uxth	r2, r2
 810b7d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b7d8:	68fb      	ldr	r3, [r7, #12]
 810b7da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b7dc:	1c9a      	adds	r2, r3, #2
 810b7de:	68fb      	ldr	r3, [r7, #12]
 810b7e0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b7e2:	68fb      	ldr	r3, [r7, #12]
 810b7e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b7e8:	b29b      	uxth	r3, r3
 810b7ea:	3b02      	subs	r3, #2
 810b7ec:	b29a      	uxth	r2, r3
 810b7ee:	68fb      	ldr	r3, [r7, #12]
 810b7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b7f4:	68fb      	ldr	r3, [r7, #12]
 810b7f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b7fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810b7fc:	e01a      	b.n	810b834 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b7fe:	68fb      	ldr	r3, [r7, #12]
 810b800:	681b      	ldr	r3, [r3, #0]
 810b802:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810b806:	68fb      	ldr	r3, [r7, #12]
 810b808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b80a:	7812      	ldrb	r2, [r2, #0]
 810b80c:	b2d2      	uxtb	r2, r2
 810b80e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b810:	68fb      	ldr	r3, [r7, #12]
 810b812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b814:	1c5a      	adds	r2, r3, #1
 810b816:	68fb      	ldr	r3, [r7, #12]
 810b818:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b81a:	68fb      	ldr	r3, [r7, #12]
 810b81c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b820:	b29b      	uxth	r3, r3
 810b822:	3b01      	subs	r3, #1
 810b824:	b29a      	uxth	r2, r3
 810b826:	68fb      	ldr	r3, [r7, #12]
 810b828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b82c:	68fb      	ldr	r3, [r7, #12]
 810b82e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b832:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b834:	f7f7 fb4c 	bl	8102ed0 <HAL_GetTick>
 810b838:	4602      	mov	r2, r0
 810b83a:	69fb      	ldr	r3, [r7, #28]
 810b83c:	1ad3      	subs	r3, r2, r3
 810b83e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810b840:	429a      	cmp	r2, r3
 810b842:	d803      	bhi.n	810b84c <HAL_SPI_TransmitReceive+0x53c>
 810b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b846:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b84a:	d102      	bne.n	810b852 <HAL_SPI_TransmitReceive+0x542>
 810b84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b84e:	2b00      	cmp	r3, #0
 810b850:	d114      	bne.n	810b87c <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810b852:	68f8      	ldr	r0, [r7, #12]
 810b854:	f000 fa68 	bl	810bd28 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 810b858:	68fb      	ldr	r3, [r7, #12]
 810b85a:	2200      	movs	r2, #0
 810b85c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b860:	68fb      	ldr	r3, [r7, #12]
 810b862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b866:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b86a:	68fb      	ldr	r3, [r7, #12]
 810b86c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810b870:	68fb      	ldr	r3, [r7, #12]
 810b872:	2201      	movs	r2, #1
 810b874:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 810b878:	2301      	movs	r3, #1
 810b87a:	e02e      	b.n	810b8da <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b87c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b87e:	2b00      	cmp	r3, #0
 810b880:	f47f af10 	bne.w	810b6a4 <HAL_SPI_TransmitReceive+0x394>
 810b884:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b886:	2b00      	cmp	r3, #0
 810b888:	f47f af0c 	bne.w	810b6a4 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810b88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b88e:	9300      	str	r3, [sp, #0]
 810b890:	69fb      	ldr	r3, [r7, #28]
 810b892:	2200      	movs	r2, #0
 810b894:	2108      	movs	r1, #8
 810b896:	68f8      	ldr	r0, [r7, #12]
 810b898:	f000 fae6 	bl	810be68 <SPI_WaitOnFlagUntilTimeout>
 810b89c:	4603      	mov	r3, r0
 810b89e:	2b00      	cmp	r3, #0
 810b8a0:	d007      	beq.n	810b8b2 <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810b8a2:	68fb      	ldr	r3, [r7, #12]
 810b8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b8a8:	f043 0220 	orr.w	r2, r3, #32
 810b8ac:	68fb      	ldr	r3, [r7, #12]
 810b8ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810b8b2:	68f8      	ldr	r0, [r7, #12]
 810b8b4:	f000 fa38 	bl	810bd28 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810b8b8:	68fb      	ldr	r3, [r7, #12]
 810b8ba:	2200      	movs	r2, #0
 810b8bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810b8c0:	68fb      	ldr	r3, [r7, #12]
 810b8c2:	2201      	movs	r2, #1
 810b8c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810b8c8:	68fb      	ldr	r3, [r7, #12]
 810b8ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b8ce:	2b00      	cmp	r3, #0
 810b8d0:	d001      	beq.n	810b8d6 <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 810b8d2:	2301      	movs	r3, #1
 810b8d4:	e001      	b.n	810b8da <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 810b8d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 810b8da:	4618      	mov	r0, r3
 810b8dc:	3730      	adds	r7, #48	; 0x30
 810b8de:	46bd      	mov	sp, r7
 810b8e0:	bd80      	pop	{r7, pc}
	...

0810b8e4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810b8e4:	b580      	push	{r7, lr}
 810b8e6:	b08a      	sub	sp, #40	; 0x28
 810b8e8:	af00      	add	r7, sp, #0
 810b8ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810b8ec:	687b      	ldr	r3, [r7, #4]
 810b8ee:	681b      	ldr	r3, [r3, #0]
 810b8f0:	691b      	ldr	r3, [r3, #16]
 810b8f2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810b8f4:	687b      	ldr	r3, [r7, #4]
 810b8f6:	681b      	ldr	r3, [r3, #0]
 810b8f8:	695b      	ldr	r3, [r3, #20]
 810b8fa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810b8fc:	6a3a      	ldr	r2, [r7, #32]
 810b8fe:	69fb      	ldr	r3, [r7, #28]
 810b900:	4013      	ands	r3, r2
 810b902:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810b904:	687b      	ldr	r3, [r7, #4]
 810b906:	681b      	ldr	r3, [r3, #0]
 810b908:	689b      	ldr	r3, [r3, #8]
 810b90a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810b90c:	2300      	movs	r3, #0
 810b90e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810b910:	687b      	ldr	r3, [r7, #4]
 810b912:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b916:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810b918:	687b      	ldr	r3, [r7, #4]
 810b91a:	681b      	ldr	r3, [r3, #0]
 810b91c:	3330      	adds	r3, #48	; 0x30
 810b91e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810b920:	69bb      	ldr	r3, [r7, #24]
 810b922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b926:	2b00      	cmp	r3, #0
 810b928:	d113      	bne.n	810b952 <HAL_SPI_IRQHandler+0x6e>
 810b92a:	69bb      	ldr	r3, [r7, #24]
 810b92c:	f003 0320 	and.w	r3, r3, #32
 810b930:	2b00      	cmp	r3, #0
 810b932:	d10e      	bne.n	810b952 <HAL_SPI_IRQHandler+0x6e>
 810b934:	69bb      	ldr	r3, [r7, #24]
 810b936:	f003 0304 	and.w	r3, r3, #4
 810b93a:	2b00      	cmp	r3, #0
 810b93c:	d009      	beq.n	810b952 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810b93e:	687b      	ldr	r3, [r7, #4]
 810b940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b942:	6878      	ldr	r0, [r7, #4]
 810b944:	4798      	blx	r3
    hspi->RxISR(hspi);
 810b946:	687b      	ldr	r3, [r7, #4]
 810b948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b94a:	6878      	ldr	r0, [r7, #4]
 810b94c:	4798      	blx	r3
    handled = 1UL;
 810b94e:	2301      	movs	r3, #1
 810b950:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810b952:	69bb      	ldr	r3, [r7, #24]
 810b954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b958:	2b00      	cmp	r3, #0
 810b95a:	d10f      	bne.n	810b97c <HAL_SPI_IRQHandler+0x98>
 810b95c:	69bb      	ldr	r3, [r7, #24]
 810b95e:	f003 0301 	and.w	r3, r3, #1
 810b962:	2b00      	cmp	r3, #0
 810b964:	d00a      	beq.n	810b97c <HAL_SPI_IRQHandler+0x98>
 810b966:	69bb      	ldr	r3, [r7, #24]
 810b968:	f003 0304 	and.w	r3, r3, #4
 810b96c:	2b00      	cmp	r3, #0
 810b96e:	d105      	bne.n	810b97c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810b970:	687b      	ldr	r3, [r7, #4]
 810b972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b974:	6878      	ldr	r0, [r7, #4]
 810b976:	4798      	blx	r3
    handled = 1UL;
 810b978:	2301      	movs	r3, #1
 810b97a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810b97c:	69bb      	ldr	r3, [r7, #24]
 810b97e:	f003 0320 	and.w	r3, r3, #32
 810b982:	2b00      	cmp	r3, #0
 810b984:	d10f      	bne.n	810b9a6 <HAL_SPI_IRQHandler+0xc2>
 810b986:	69bb      	ldr	r3, [r7, #24]
 810b988:	f003 0302 	and.w	r3, r3, #2
 810b98c:	2b00      	cmp	r3, #0
 810b98e:	d00a      	beq.n	810b9a6 <HAL_SPI_IRQHandler+0xc2>
 810b990:	69bb      	ldr	r3, [r7, #24]
 810b992:	f003 0304 	and.w	r3, r3, #4
 810b996:	2b00      	cmp	r3, #0
 810b998:	d105      	bne.n	810b9a6 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810b99a:	687b      	ldr	r3, [r7, #4]
 810b99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b99e:	6878      	ldr	r0, [r7, #4]
 810b9a0:	4798      	blx	r3
    handled = 1UL;
 810b9a2:	2301      	movs	r3, #1
 810b9a4:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b9a8:	2b00      	cmp	r3, #0
 810b9aa:	f040 8171 	bne.w	810bc90 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810b9ae:	69bb      	ldr	r3, [r7, #24]
 810b9b0:	f003 0308 	and.w	r3, r3, #8
 810b9b4:	2b00      	cmp	r3, #0
 810b9b6:	f000 80a0 	beq.w	810bafa <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810b9ba:	687b      	ldr	r3, [r7, #4]
 810b9bc:	681b      	ldr	r3, [r3, #0]
 810b9be:	699a      	ldr	r2, [r3, #24]
 810b9c0:	687b      	ldr	r3, [r7, #4]
 810b9c2:	681b      	ldr	r3, [r3, #0]
 810b9c4:	f042 0208 	orr.w	r2, r2, #8
 810b9c8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810b9ca:	687b      	ldr	r3, [r7, #4]
 810b9cc:	681b      	ldr	r3, [r3, #0]
 810b9ce:	699a      	ldr	r2, [r3, #24]
 810b9d0:	687b      	ldr	r3, [r7, #4]
 810b9d2:	681b      	ldr	r3, [r3, #0]
 810b9d4:	f042 0210 	orr.w	r2, r2, #16
 810b9d8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810b9da:	687b      	ldr	r3, [r7, #4]
 810b9dc:	681b      	ldr	r3, [r3, #0]
 810b9de:	699a      	ldr	r2, [r3, #24]
 810b9e0:	687b      	ldr	r3, [r7, #4]
 810b9e2:	681b      	ldr	r3, [r3, #0]
 810b9e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810b9e8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810b9ea:	687b      	ldr	r3, [r7, #4]
 810b9ec:	681b      	ldr	r3, [r3, #0]
 810b9ee:	691a      	ldr	r2, [r3, #16]
 810b9f0:	687b      	ldr	r3, [r7, #4]
 810b9f2:	681b      	ldr	r3, [r3, #0]
 810b9f4:	f022 0208 	bic.w	r2, r2, #8
 810b9f8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810b9fa:	697b      	ldr	r3, [r7, #20]
 810b9fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810ba00:	2b00      	cmp	r3, #0
 810ba02:	d00f      	beq.n	810ba24 <HAL_SPI_IRQHandler+0x140>
 810ba04:	7cfb      	ldrb	r3, [r7, #19]
 810ba06:	2b04      	cmp	r3, #4
 810ba08:	d004      	beq.n	810ba14 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810ba0a:	687b      	ldr	r3, [r7, #4]
 810ba0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810ba0e:	69db      	ldr	r3, [r3, #28]
 810ba10:	2b00      	cmp	r3, #0
 810ba12:	d007      	beq.n	810ba24 <HAL_SPI_IRQHandler+0x140>
 810ba14:	7cfb      	ldrb	r3, [r7, #19]
 810ba16:	2b03      	cmp	r3, #3
 810ba18:	d059      	beq.n	810bace <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810ba1a:	687b      	ldr	r3, [r7, #4]
 810ba1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ba1e:	69db      	ldr	r3, [r3, #28]
 810ba20:	2b00      	cmp	r3, #0
 810ba22:	d154      	bne.n	810bace <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810ba24:	687b      	ldr	r3, [r7, #4]
 810ba26:	681b      	ldr	r3, [r3, #0]
 810ba28:	689b      	ldr	r3, [r3, #8]
 810ba2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810ba2e:	2b00      	cmp	r3, #0
 810ba30:	d13d      	bne.n	810baae <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810ba32:	e036      	b.n	810baa2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810ba34:	687b      	ldr	r3, [r7, #4]
 810ba36:	68db      	ldr	r3, [r3, #12]
 810ba38:	2b0f      	cmp	r3, #15
 810ba3a:	d90b      	bls.n	810ba54 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810ba3c:	687b      	ldr	r3, [r7, #4]
 810ba3e:	681a      	ldr	r2, [r3, #0]
 810ba40:	687b      	ldr	r3, [r7, #4]
 810ba42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810ba46:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810ba48:	687b      	ldr	r3, [r7, #4]
 810ba4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba4c:	1d1a      	adds	r2, r3, #4
 810ba4e:	687b      	ldr	r3, [r7, #4]
 810ba50:	665a      	str	r2, [r3, #100]	; 0x64
 810ba52:	e01d      	b.n	810ba90 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810ba54:	687b      	ldr	r3, [r7, #4]
 810ba56:	68db      	ldr	r3, [r3, #12]
 810ba58:	2b07      	cmp	r3, #7
 810ba5a:	d90b      	bls.n	810ba74 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810ba5c:	687b      	ldr	r3, [r7, #4]
 810ba5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba60:	68fa      	ldr	r2, [r7, #12]
 810ba62:	8812      	ldrh	r2, [r2, #0]
 810ba64:	b292      	uxth	r2, r2
 810ba66:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810ba68:	687b      	ldr	r3, [r7, #4]
 810ba6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba6c:	1c9a      	adds	r2, r3, #2
 810ba6e:	687b      	ldr	r3, [r7, #4]
 810ba70:	665a      	str	r2, [r3, #100]	; 0x64
 810ba72:	e00d      	b.n	810ba90 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810ba74:	687b      	ldr	r3, [r7, #4]
 810ba76:	681b      	ldr	r3, [r3, #0]
 810ba78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810ba7c:	687b      	ldr	r3, [r7, #4]
 810ba7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba80:	7812      	ldrb	r2, [r2, #0]
 810ba82:	b2d2      	uxtb	r2, r2
 810ba84:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810ba86:	687b      	ldr	r3, [r7, #4]
 810ba88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba8a:	1c5a      	adds	r2, r3, #1
 810ba8c:	687b      	ldr	r3, [r7, #4]
 810ba8e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810ba90:	687b      	ldr	r3, [r7, #4]
 810ba92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ba96:	b29b      	uxth	r3, r3
 810ba98:	3b01      	subs	r3, #1
 810ba9a:	b29a      	uxth	r2, r3
 810ba9c:	687b      	ldr	r3, [r7, #4]
 810ba9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810baa2:	687b      	ldr	r3, [r7, #4]
 810baa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810baa8:	b29b      	uxth	r3, r3
 810baaa:	2b00      	cmp	r3, #0
 810baac:	d1c2      	bne.n	810ba34 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810baae:	6878      	ldr	r0, [r7, #4]
 810bab0:	f000 f93a 	bl	810bd28 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810bab4:	687b      	ldr	r3, [r7, #4]
 810bab6:	2201      	movs	r2, #1
 810bab8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810babc:	687b      	ldr	r3, [r7, #4]
 810babe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bac2:	2b00      	cmp	r3, #0
 810bac4:	d003      	beq.n	810bace <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810bac6:	6878      	ldr	r0, [r7, #4]
 810bac8:	f000 f90a 	bl	810bce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810bacc:	e0e5      	b.n	810bc9a <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810bace:	7cfb      	ldrb	r3, [r7, #19]
 810bad0:	2b05      	cmp	r3, #5
 810bad2:	d103      	bne.n	810badc <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810bad4:	6878      	ldr	r0, [r7, #4]
 810bad6:	f000 f8f9 	bl	810bccc <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810bada:	e0db      	b.n	810bc94 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810badc:	7cfb      	ldrb	r3, [r7, #19]
 810bade:	2b04      	cmp	r3, #4
 810bae0:	d103      	bne.n	810baea <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810bae2:	6878      	ldr	r0, [r7, #4]
 810bae4:	f000 f8e8 	bl	810bcb8 <HAL_SPI_RxCpltCallback>
    return;
 810bae8:	e0d4      	b.n	810bc94 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810baea:	7cfb      	ldrb	r3, [r7, #19]
 810baec:	2b03      	cmp	r3, #3
 810baee:	f040 80d1 	bne.w	810bc94 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810baf2:	6878      	ldr	r0, [r7, #4]
 810baf4:	f000 f8d6 	bl	810bca4 <HAL_SPI_TxCpltCallback>
    return;
 810baf8:	e0cc      	b.n	810bc94 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810bafa:	69fb      	ldr	r3, [r7, #28]
 810bafc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810bb00:	2b00      	cmp	r3, #0
 810bb02:	d00d      	beq.n	810bb20 <HAL_SPI_IRQHandler+0x23c>
 810bb04:	6a3b      	ldr	r3, [r7, #32]
 810bb06:	f003 0308 	and.w	r3, r3, #8
 810bb0a:	2b00      	cmp	r3, #0
 810bb0c:	d008      	beq.n	810bb20 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810bb0e:	687b      	ldr	r3, [r7, #4]
 810bb10:	681b      	ldr	r3, [r3, #0]
 810bb12:	699a      	ldr	r2, [r3, #24]
 810bb14:	687b      	ldr	r3, [r7, #4]
 810bb16:	681b      	ldr	r3, [r3, #0]
 810bb18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810bb1c:	619a      	str	r2, [r3, #24]

    return;
 810bb1e:	e0bc      	b.n	810bc9a <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810bb20:	69bb      	ldr	r3, [r7, #24]
 810bb22:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810bb26:	2b00      	cmp	r3, #0
 810bb28:	f000 80b7 	beq.w	810bc9a <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810bb2c:	69bb      	ldr	r3, [r7, #24]
 810bb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810bb32:	2b00      	cmp	r3, #0
 810bb34:	d00f      	beq.n	810bb56 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810bb36:	687b      	ldr	r3, [r7, #4]
 810bb38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bb3c:	f043 0204 	orr.w	r2, r3, #4
 810bb40:	687b      	ldr	r3, [r7, #4]
 810bb42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810bb46:	687b      	ldr	r3, [r7, #4]
 810bb48:	681b      	ldr	r3, [r3, #0]
 810bb4a:	699a      	ldr	r2, [r3, #24]
 810bb4c:	687b      	ldr	r3, [r7, #4]
 810bb4e:	681b      	ldr	r3, [r3, #0]
 810bb50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810bb54:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810bb56:	69bb      	ldr	r3, [r7, #24]
 810bb58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810bb5c:	2b00      	cmp	r3, #0
 810bb5e:	d00f      	beq.n	810bb80 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810bb60:	687b      	ldr	r3, [r7, #4]
 810bb62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bb66:	f043 0201 	orr.w	r2, r3, #1
 810bb6a:	687b      	ldr	r3, [r7, #4]
 810bb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810bb70:	687b      	ldr	r3, [r7, #4]
 810bb72:	681b      	ldr	r3, [r3, #0]
 810bb74:	699a      	ldr	r2, [r3, #24]
 810bb76:	687b      	ldr	r3, [r7, #4]
 810bb78:	681b      	ldr	r3, [r3, #0]
 810bb7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810bb7e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810bb80:	69bb      	ldr	r3, [r7, #24]
 810bb82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810bb86:	2b00      	cmp	r3, #0
 810bb88:	d00f      	beq.n	810bbaa <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810bb8a:	687b      	ldr	r3, [r7, #4]
 810bb8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bb90:	f043 0208 	orr.w	r2, r3, #8
 810bb94:	687b      	ldr	r3, [r7, #4]
 810bb96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810bb9a:	687b      	ldr	r3, [r7, #4]
 810bb9c:	681b      	ldr	r3, [r3, #0]
 810bb9e:	699a      	ldr	r2, [r3, #24]
 810bba0:	687b      	ldr	r3, [r7, #4]
 810bba2:	681b      	ldr	r3, [r3, #0]
 810bba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810bba8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810bbaa:	69bb      	ldr	r3, [r7, #24]
 810bbac:	f003 0320 	and.w	r3, r3, #32
 810bbb0:	2b00      	cmp	r3, #0
 810bbb2:	d00f      	beq.n	810bbd4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810bbb4:	687b      	ldr	r3, [r7, #4]
 810bbb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bbba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810bbbe:	687b      	ldr	r3, [r7, #4]
 810bbc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810bbc4:	687b      	ldr	r3, [r7, #4]
 810bbc6:	681b      	ldr	r3, [r3, #0]
 810bbc8:	699a      	ldr	r2, [r3, #24]
 810bbca:	687b      	ldr	r3, [r7, #4]
 810bbcc:	681b      	ldr	r3, [r3, #0]
 810bbce:	f042 0220 	orr.w	r2, r2, #32
 810bbd2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810bbd4:	687b      	ldr	r3, [r7, #4]
 810bbd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bbda:	2b00      	cmp	r3, #0
 810bbdc:	d05c      	beq.n	810bc98 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810bbde:	687b      	ldr	r3, [r7, #4]
 810bbe0:	681b      	ldr	r3, [r3, #0]
 810bbe2:	681a      	ldr	r2, [r3, #0]
 810bbe4:	687b      	ldr	r3, [r7, #4]
 810bbe6:	681b      	ldr	r3, [r3, #0]
 810bbe8:	f022 0201 	bic.w	r2, r2, #1
 810bbec:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810bbee:	687b      	ldr	r3, [r7, #4]
 810bbf0:	681b      	ldr	r3, [r3, #0]
 810bbf2:	691b      	ldr	r3, [r3, #16]
 810bbf4:	687a      	ldr	r2, [r7, #4]
 810bbf6:	6812      	ldr	r2, [r2, #0]
 810bbf8:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810bbfc:	f023 0303 	bic.w	r3, r3, #3
 810bc00:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810bc02:	697b      	ldr	r3, [r7, #20]
 810bc04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810bc08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810bc0c:	d138      	bne.n	810bc80 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810bc0e:	687b      	ldr	r3, [r7, #4]
 810bc10:	681b      	ldr	r3, [r3, #0]
 810bc12:	689a      	ldr	r2, [r3, #8]
 810bc14:	687b      	ldr	r3, [r7, #4]
 810bc16:	681b      	ldr	r3, [r3, #0]
 810bc18:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810bc1c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810bc1e:	687b      	ldr	r3, [r7, #4]
 810bc20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bc22:	2b00      	cmp	r3, #0
 810bc24:	d013      	beq.n	810bc4e <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810bc26:	687b      	ldr	r3, [r7, #4]
 810bc28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bc2a:	4a1d      	ldr	r2, [pc, #116]	; (810bca0 <HAL_SPI_IRQHandler+0x3bc>)
 810bc2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810bc2e:	687b      	ldr	r3, [r7, #4]
 810bc30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bc32:	4618      	mov	r0, r3
 810bc34:	f7f8 fe74 	bl	8104920 <HAL_DMA_Abort_IT>
 810bc38:	4603      	mov	r3, r0
 810bc3a:	2b00      	cmp	r3, #0
 810bc3c:	d007      	beq.n	810bc4e <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810bc3e:	687b      	ldr	r3, [r7, #4]
 810bc40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bc44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810bc48:	687b      	ldr	r3, [r7, #4]
 810bc4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810bc4e:	687b      	ldr	r3, [r7, #4]
 810bc50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bc52:	2b00      	cmp	r3, #0
 810bc54:	d020      	beq.n	810bc98 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810bc56:	687b      	ldr	r3, [r7, #4]
 810bc58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bc5a:	4a11      	ldr	r2, [pc, #68]	; (810bca0 <HAL_SPI_IRQHandler+0x3bc>)
 810bc5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810bc5e:	687b      	ldr	r3, [r7, #4]
 810bc60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bc62:	4618      	mov	r0, r3
 810bc64:	f7f8 fe5c 	bl	8104920 <HAL_DMA_Abort_IT>
 810bc68:	4603      	mov	r3, r0
 810bc6a:	2b00      	cmp	r3, #0
 810bc6c:	d014      	beq.n	810bc98 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810bc6e:	687b      	ldr	r3, [r7, #4]
 810bc70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bc74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810bc78:	687b      	ldr	r3, [r7, #4]
 810bc7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810bc7e:	e00b      	b.n	810bc98 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810bc80:	687b      	ldr	r3, [r7, #4]
 810bc82:	2201      	movs	r2, #1
 810bc84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810bc88:	6878      	ldr	r0, [r7, #4]
 810bc8a:	f000 f829 	bl	810bce0 <HAL_SPI_ErrorCallback>
    return;
 810bc8e:	e003      	b.n	810bc98 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810bc90:	bf00      	nop
 810bc92:	e002      	b.n	810bc9a <HAL_SPI_IRQHandler+0x3b6>
    return;
 810bc94:	bf00      	nop
 810bc96:	e000      	b.n	810bc9a <HAL_SPI_IRQHandler+0x3b6>
    return;
 810bc98:	bf00      	nop
  }
}
 810bc9a:	3728      	adds	r7, #40	; 0x28
 810bc9c:	46bd      	mov	sp, r7
 810bc9e:	bd80      	pop	{r7, pc}
 810bca0:	0810bcf5 	.word	0x0810bcf5

0810bca4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810bca4:	b480      	push	{r7}
 810bca6:	b083      	sub	sp, #12
 810bca8:	af00      	add	r7, sp, #0
 810bcaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810bcac:	bf00      	nop
 810bcae:	370c      	adds	r7, #12
 810bcb0:	46bd      	mov	sp, r7
 810bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcb6:	4770      	bx	lr

0810bcb8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810bcb8:	b480      	push	{r7}
 810bcba:	b083      	sub	sp, #12
 810bcbc:	af00      	add	r7, sp, #0
 810bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810bcc0:	bf00      	nop
 810bcc2:	370c      	adds	r7, #12
 810bcc4:	46bd      	mov	sp, r7
 810bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcca:	4770      	bx	lr

0810bccc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810bccc:	b480      	push	{r7}
 810bcce:	b083      	sub	sp, #12
 810bcd0:	af00      	add	r7, sp, #0
 810bcd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 810bcd4:	bf00      	nop
 810bcd6:	370c      	adds	r7, #12
 810bcd8:	46bd      	mov	sp, r7
 810bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcde:	4770      	bx	lr

0810bce0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810bce0:	b480      	push	{r7}
 810bce2:	b083      	sub	sp, #12
 810bce4:	af00      	add	r7, sp, #0
 810bce6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810bce8:	bf00      	nop
 810bcea:	370c      	adds	r7, #12
 810bcec:	46bd      	mov	sp, r7
 810bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcf2:	4770      	bx	lr

0810bcf4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810bcf4:	b580      	push	{r7, lr}
 810bcf6:	b084      	sub	sp, #16
 810bcf8:	af00      	add	r7, sp, #0
 810bcfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810bcfc:	687b      	ldr	r3, [r7, #4]
 810bcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bd00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810bd02:	68fb      	ldr	r3, [r7, #12]
 810bd04:	2200      	movs	r2, #0
 810bd06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810bd0a:	68fb      	ldr	r3, [r7, #12]
 810bd0c:	2200      	movs	r2, #0
 810bd0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810bd12:	68fb      	ldr	r3, [r7, #12]
 810bd14:	2201      	movs	r2, #1
 810bd16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810bd1a:	68f8      	ldr	r0, [r7, #12]
 810bd1c:	f7ff ffe0 	bl	810bce0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810bd20:	bf00      	nop
 810bd22:	3710      	adds	r7, #16
 810bd24:	46bd      	mov	sp, r7
 810bd26:	bd80      	pop	{r7, pc}

0810bd28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810bd28:	b480      	push	{r7}
 810bd2a:	b085      	sub	sp, #20
 810bd2c:	af00      	add	r7, sp, #0
 810bd2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810bd30:	687b      	ldr	r3, [r7, #4]
 810bd32:	681b      	ldr	r3, [r3, #0]
 810bd34:	695b      	ldr	r3, [r3, #20]
 810bd36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810bd38:	687b      	ldr	r3, [r7, #4]
 810bd3a:	681b      	ldr	r3, [r3, #0]
 810bd3c:	699a      	ldr	r2, [r3, #24]
 810bd3e:	687b      	ldr	r3, [r7, #4]
 810bd40:	681b      	ldr	r3, [r3, #0]
 810bd42:	f042 0208 	orr.w	r2, r2, #8
 810bd46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810bd48:	687b      	ldr	r3, [r7, #4]
 810bd4a:	681b      	ldr	r3, [r3, #0]
 810bd4c:	699a      	ldr	r2, [r3, #24]
 810bd4e:	687b      	ldr	r3, [r7, #4]
 810bd50:	681b      	ldr	r3, [r3, #0]
 810bd52:	f042 0210 	orr.w	r2, r2, #16
 810bd56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810bd58:	687b      	ldr	r3, [r7, #4]
 810bd5a:	681b      	ldr	r3, [r3, #0]
 810bd5c:	681a      	ldr	r2, [r3, #0]
 810bd5e:	687b      	ldr	r3, [r7, #4]
 810bd60:	681b      	ldr	r3, [r3, #0]
 810bd62:	f022 0201 	bic.w	r2, r2, #1
 810bd66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810bd68:	687b      	ldr	r3, [r7, #4]
 810bd6a:	681b      	ldr	r3, [r3, #0]
 810bd6c:	691b      	ldr	r3, [r3, #16]
 810bd6e:	687a      	ldr	r2, [r7, #4]
 810bd70:	6812      	ldr	r2, [r2, #0]
 810bd72:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810bd76:	f023 0303 	bic.w	r3, r3, #3
 810bd7a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810bd7c:	687b      	ldr	r3, [r7, #4]
 810bd7e:	681b      	ldr	r3, [r3, #0]
 810bd80:	689a      	ldr	r2, [r3, #8]
 810bd82:	687b      	ldr	r3, [r7, #4]
 810bd84:	681b      	ldr	r3, [r3, #0]
 810bd86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810bd8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810bd8c:	687b      	ldr	r3, [r7, #4]
 810bd8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810bd92:	b2db      	uxtb	r3, r3
 810bd94:	2b04      	cmp	r3, #4
 810bd96:	d014      	beq.n	810bdc2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810bd98:	68fb      	ldr	r3, [r7, #12]
 810bd9a:	f003 0320 	and.w	r3, r3, #32
 810bd9e:	2b00      	cmp	r3, #0
 810bda0:	d00f      	beq.n	810bdc2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810bda2:	687b      	ldr	r3, [r7, #4]
 810bda4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bda8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810bdac:	687b      	ldr	r3, [r7, #4]
 810bdae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810bdb2:	687b      	ldr	r3, [r7, #4]
 810bdb4:	681b      	ldr	r3, [r3, #0]
 810bdb6:	699a      	ldr	r2, [r3, #24]
 810bdb8:	687b      	ldr	r3, [r7, #4]
 810bdba:	681b      	ldr	r3, [r3, #0]
 810bdbc:	f042 0220 	orr.w	r2, r2, #32
 810bdc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810bdc2:	687b      	ldr	r3, [r7, #4]
 810bdc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810bdc8:	b2db      	uxtb	r3, r3
 810bdca:	2b03      	cmp	r3, #3
 810bdcc:	d014      	beq.n	810bdf8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810bdce:	68fb      	ldr	r3, [r7, #12]
 810bdd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810bdd4:	2b00      	cmp	r3, #0
 810bdd6:	d00f      	beq.n	810bdf8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810bdd8:	687b      	ldr	r3, [r7, #4]
 810bdda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bdde:	f043 0204 	orr.w	r2, r3, #4
 810bde2:	687b      	ldr	r3, [r7, #4]
 810bde4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810bde8:	687b      	ldr	r3, [r7, #4]
 810bdea:	681b      	ldr	r3, [r3, #0]
 810bdec:	699a      	ldr	r2, [r3, #24]
 810bdee:	687b      	ldr	r3, [r7, #4]
 810bdf0:	681b      	ldr	r3, [r3, #0]
 810bdf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810bdf6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810bdf8:	68fb      	ldr	r3, [r7, #12]
 810bdfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810bdfe:	2b00      	cmp	r3, #0
 810be00:	d00f      	beq.n	810be22 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810be02:	687b      	ldr	r3, [r7, #4]
 810be04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810be08:	f043 0201 	orr.w	r2, r3, #1
 810be0c:	687b      	ldr	r3, [r7, #4]
 810be0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810be12:	687b      	ldr	r3, [r7, #4]
 810be14:	681b      	ldr	r3, [r3, #0]
 810be16:	699a      	ldr	r2, [r3, #24]
 810be18:	687b      	ldr	r3, [r7, #4]
 810be1a:	681b      	ldr	r3, [r3, #0]
 810be1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810be20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810be22:	68fb      	ldr	r3, [r7, #12]
 810be24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810be28:	2b00      	cmp	r3, #0
 810be2a:	d00f      	beq.n	810be4c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810be2c:	687b      	ldr	r3, [r7, #4]
 810be2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810be32:	f043 0208 	orr.w	r2, r3, #8
 810be36:	687b      	ldr	r3, [r7, #4]
 810be38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810be3c:	687b      	ldr	r3, [r7, #4]
 810be3e:	681b      	ldr	r3, [r3, #0]
 810be40:	699a      	ldr	r2, [r3, #24]
 810be42:	687b      	ldr	r3, [r7, #4]
 810be44:	681b      	ldr	r3, [r3, #0]
 810be46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810be4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810be4c:	687b      	ldr	r3, [r7, #4]
 810be4e:	2200      	movs	r2, #0
 810be50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810be54:	687b      	ldr	r3, [r7, #4]
 810be56:	2200      	movs	r2, #0
 810be58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810be5c:	bf00      	nop
 810be5e:	3714      	adds	r7, #20
 810be60:	46bd      	mov	sp, r7
 810be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be66:	4770      	bx	lr

0810be68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 810be68:	b580      	push	{r7, lr}
 810be6a:	b084      	sub	sp, #16
 810be6c:	af00      	add	r7, sp, #0
 810be6e:	60f8      	str	r0, [r7, #12]
 810be70:	60b9      	str	r1, [r7, #8]
 810be72:	603b      	str	r3, [r7, #0]
 810be74:	4613      	mov	r3, r2
 810be76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810be78:	e010      	b.n	810be9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810be7a:	f7f7 f829 	bl	8102ed0 <HAL_GetTick>
 810be7e:	4602      	mov	r2, r0
 810be80:	683b      	ldr	r3, [r7, #0]
 810be82:	1ad3      	subs	r3, r2, r3
 810be84:	69ba      	ldr	r2, [r7, #24]
 810be86:	429a      	cmp	r2, r3
 810be88:	d803      	bhi.n	810be92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 810be8a:	69bb      	ldr	r3, [r7, #24]
 810be8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810be90:	d102      	bne.n	810be98 <SPI_WaitOnFlagUntilTimeout+0x30>
 810be92:	69bb      	ldr	r3, [r7, #24]
 810be94:	2b00      	cmp	r3, #0
 810be96:	d101      	bne.n	810be9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 810be98:	2303      	movs	r3, #3
 810be9a:	e00f      	b.n	810bebc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810be9c:	68fb      	ldr	r3, [r7, #12]
 810be9e:	681b      	ldr	r3, [r3, #0]
 810bea0:	695a      	ldr	r2, [r3, #20]
 810bea2:	68bb      	ldr	r3, [r7, #8]
 810bea4:	4013      	ands	r3, r2
 810bea6:	68ba      	ldr	r2, [r7, #8]
 810bea8:	429a      	cmp	r2, r3
 810beaa:	bf0c      	ite	eq
 810beac:	2301      	moveq	r3, #1
 810beae:	2300      	movne	r3, #0
 810beb0:	b2db      	uxtb	r3, r3
 810beb2:	461a      	mov	r2, r3
 810beb4:	79fb      	ldrb	r3, [r7, #7]
 810beb6:	429a      	cmp	r2, r3
 810beb8:	d0df      	beq.n	810be7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 810beba:	2300      	movs	r3, #0
}
 810bebc:	4618      	mov	r0, r3
 810bebe:	3710      	adds	r7, #16
 810bec0:	46bd      	mov	sp, r7
 810bec2:	bd80      	pop	{r7, pc}

0810bec4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810bec4:	b480      	push	{r7}
 810bec6:	b085      	sub	sp, #20
 810bec8:	af00      	add	r7, sp, #0
 810beca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810becc:	687b      	ldr	r3, [r7, #4]
 810bece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bed0:	095b      	lsrs	r3, r3, #5
 810bed2:	3301      	adds	r3, #1
 810bed4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810bed6:	687b      	ldr	r3, [r7, #4]
 810bed8:	68db      	ldr	r3, [r3, #12]
 810beda:	3301      	adds	r3, #1
 810bedc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810bede:	68bb      	ldr	r3, [r7, #8]
 810bee0:	3307      	adds	r3, #7
 810bee2:	08db      	lsrs	r3, r3, #3
 810bee4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810bee6:	68bb      	ldr	r3, [r7, #8]
 810bee8:	68fa      	ldr	r2, [r7, #12]
 810beea:	fb02 f303 	mul.w	r3, r2, r3
}
 810beee:	4618      	mov	r0, r3
 810bef0:	3714      	adds	r7, #20
 810bef2:	46bd      	mov	sp, r7
 810bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bef8:	4770      	bx	lr

0810befa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810befa:	b580      	push	{r7, lr}
 810befc:	b082      	sub	sp, #8
 810befe:	af00      	add	r7, sp, #0
 810bf00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810bf02:	687b      	ldr	r3, [r7, #4]
 810bf04:	2b00      	cmp	r3, #0
 810bf06:	d101      	bne.n	810bf0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810bf08:	2301      	movs	r3, #1
 810bf0a:	e042      	b.n	810bf92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810bf0c:	687b      	ldr	r3, [r7, #4]
 810bf0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bf12:	2b00      	cmp	r3, #0
 810bf14:	d106      	bne.n	810bf24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810bf16:	687b      	ldr	r3, [r7, #4]
 810bf18:	2200      	movs	r2, #0
 810bf1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810bf1e:	6878      	ldr	r0, [r7, #4]
 810bf20:	f7f6 fe30 	bl	8102b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810bf24:	687b      	ldr	r3, [r7, #4]
 810bf26:	2224      	movs	r2, #36	; 0x24
 810bf28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810bf2c:	687b      	ldr	r3, [r7, #4]
 810bf2e:	681b      	ldr	r3, [r3, #0]
 810bf30:	681a      	ldr	r2, [r3, #0]
 810bf32:	687b      	ldr	r3, [r7, #4]
 810bf34:	681b      	ldr	r3, [r3, #0]
 810bf36:	f022 0201 	bic.w	r2, r2, #1
 810bf3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810bf3c:	6878      	ldr	r0, [r7, #4]
 810bf3e:	f000 fbd7 	bl	810c6f0 <UART_SetConfig>
 810bf42:	4603      	mov	r3, r0
 810bf44:	2b01      	cmp	r3, #1
 810bf46:	d101      	bne.n	810bf4c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810bf48:	2301      	movs	r3, #1
 810bf4a:	e022      	b.n	810bf92 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810bf4c:	687b      	ldr	r3, [r7, #4]
 810bf4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bf50:	2b00      	cmp	r3, #0
 810bf52:	d002      	beq.n	810bf5a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810bf54:	6878      	ldr	r0, [r7, #4]
 810bf56:	f001 f935 	bl	810d1c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810bf5a:	687b      	ldr	r3, [r7, #4]
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	685a      	ldr	r2, [r3, #4]
 810bf60:	687b      	ldr	r3, [r7, #4]
 810bf62:	681b      	ldr	r3, [r3, #0]
 810bf64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810bf68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810bf6a:	687b      	ldr	r3, [r7, #4]
 810bf6c:	681b      	ldr	r3, [r3, #0]
 810bf6e:	689a      	ldr	r2, [r3, #8]
 810bf70:	687b      	ldr	r3, [r7, #4]
 810bf72:	681b      	ldr	r3, [r3, #0]
 810bf74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810bf78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810bf7a:	687b      	ldr	r3, [r7, #4]
 810bf7c:	681b      	ldr	r3, [r3, #0]
 810bf7e:	681a      	ldr	r2, [r3, #0]
 810bf80:	687b      	ldr	r3, [r7, #4]
 810bf82:	681b      	ldr	r3, [r3, #0]
 810bf84:	f042 0201 	orr.w	r2, r2, #1
 810bf88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810bf8a:	6878      	ldr	r0, [r7, #4]
 810bf8c:	f001 f9bc 	bl	810d308 <UART_CheckIdleState>
 810bf90:	4603      	mov	r3, r0
}
 810bf92:	4618      	mov	r0, r3
 810bf94:	3708      	adds	r7, #8
 810bf96:	46bd      	mov	sp, r7
 810bf98:	bd80      	pop	{r7, pc}
	...

0810bf9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810bf9c:	b580      	push	{r7, lr}
 810bf9e:	b084      	sub	sp, #16
 810bfa0:	af00      	add	r7, sp, #0
 810bfa2:	60f8      	str	r0, [r7, #12]
 810bfa4:	60b9      	str	r1, [r7, #8]
 810bfa6:	4613      	mov	r3, r2
 810bfa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810bfaa:	68fb      	ldr	r3, [r7, #12]
 810bfac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bfb0:	2b20      	cmp	r3, #32
 810bfb2:	d168      	bne.n	810c086 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810bfb4:	68bb      	ldr	r3, [r7, #8]
 810bfb6:	2b00      	cmp	r3, #0
 810bfb8:	d002      	beq.n	810bfc0 <HAL_UART_Transmit_DMA+0x24>
 810bfba:	88fb      	ldrh	r3, [r7, #6]
 810bfbc:	2b00      	cmp	r3, #0
 810bfbe:	d101      	bne.n	810bfc4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810bfc0:	2301      	movs	r3, #1
 810bfc2:	e061      	b.n	810c088 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810bfc4:	68fb      	ldr	r3, [r7, #12]
 810bfc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810bfca:	2b01      	cmp	r3, #1
 810bfcc:	d101      	bne.n	810bfd2 <HAL_UART_Transmit_DMA+0x36>
 810bfce:	2302      	movs	r3, #2
 810bfd0:	e05a      	b.n	810c088 <HAL_UART_Transmit_DMA+0xec>
 810bfd2:	68fb      	ldr	r3, [r7, #12]
 810bfd4:	2201      	movs	r2, #1
 810bfd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810bfda:	68fb      	ldr	r3, [r7, #12]
 810bfdc:	68ba      	ldr	r2, [r7, #8]
 810bfde:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810bfe0:	68fb      	ldr	r3, [r7, #12]
 810bfe2:	88fa      	ldrh	r2, [r7, #6]
 810bfe4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810bfe8:	68fb      	ldr	r3, [r7, #12]
 810bfea:	88fa      	ldrh	r2, [r7, #6]
 810bfec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bff0:	68fb      	ldr	r3, [r7, #12]
 810bff2:	2200      	movs	r2, #0
 810bff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810bff8:	68fb      	ldr	r3, [r7, #12]
 810bffa:	2221      	movs	r2, #33	; 0x21
 810bffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810c000:	68fb      	ldr	r3, [r7, #12]
 810c002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c004:	2b00      	cmp	r3, #0
 810c006:	d02c      	beq.n	810c062 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810c008:	68fb      	ldr	r3, [r7, #12]
 810c00a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c00c:	4a20      	ldr	r2, [pc, #128]	; (810c090 <HAL_UART_Transmit_DMA+0xf4>)
 810c00e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810c010:	68fb      	ldr	r3, [r7, #12]
 810c012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c014:	4a1f      	ldr	r2, [pc, #124]	; (810c094 <HAL_UART_Transmit_DMA+0xf8>)
 810c016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810c018:	68fb      	ldr	r3, [r7, #12]
 810c01a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c01c:	4a1e      	ldr	r2, [pc, #120]	; (810c098 <HAL_UART_Transmit_DMA+0xfc>)
 810c01e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810c020:	68fb      	ldr	r3, [r7, #12]
 810c022:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c024:	2200      	movs	r2, #0
 810c026:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810c028:	68fb      	ldr	r3, [r7, #12]
 810c02a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810c02c:	68fb      	ldr	r3, [r7, #12]
 810c02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c030:	4619      	mov	r1, r3
 810c032:	68fb      	ldr	r3, [r7, #12]
 810c034:	681b      	ldr	r3, [r3, #0]
 810c036:	3328      	adds	r3, #40	; 0x28
 810c038:	461a      	mov	r2, r3
 810c03a:	88fb      	ldrh	r3, [r7, #6]
 810c03c:	f7f7 fee8 	bl	8103e10 <HAL_DMA_Start_IT>
 810c040:	4603      	mov	r3, r0
 810c042:	2b00      	cmp	r3, #0
 810c044:	d00d      	beq.n	810c062 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810c046:	68fb      	ldr	r3, [r7, #12]
 810c048:	2210      	movs	r2, #16
 810c04a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810c04e:	68fb      	ldr	r3, [r7, #12]
 810c050:	2200      	movs	r2, #0
 810c052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810c056:	68fb      	ldr	r3, [r7, #12]
 810c058:	2220      	movs	r2, #32
 810c05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810c05e:	2301      	movs	r3, #1
 810c060:	e012      	b.n	810c088 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810c062:	68fb      	ldr	r3, [r7, #12]
 810c064:	681b      	ldr	r3, [r3, #0]
 810c066:	2240      	movs	r2, #64	; 0x40
 810c068:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810c06a:	68fb      	ldr	r3, [r7, #12]
 810c06c:	2200      	movs	r2, #0
 810c06e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810c072:	68fb      	ldr	r3, [r7, #12]
 810c074:	681b      	ldr	r3, [r3, #0]
 810c076:	689a      	ldr	r2, [r3, #8]
 810c078:	68fb      	ldr	r3, [r7, #12]
 810c07a:	681b      	ldr	r3, [r3, #0]
 810c07c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810c080:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810c082:	2300      	movs	r3, #0
 810c084:	e000      	b.n	810c088 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810c086:	2302      	movs	r3, #2
  }
}
 810c088:	4618      	mov	r0, r3
 810c08a:	3710      	adds	r7, #16
 810c08c:	46bd      	mov	sp, r7
 810c08e:	bd80      	pop	{r7, pc}
 810c090:	0810d61d 	.word	0x0810d61d
 810c094:	0810d66d 	.word	0x0810d66d
 810c098:	0810d757 	.word	0x0810d757

0810c09c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810c09c:	b580      	push	{r7, lr}
 810c09e:	b084      	sub	sp, #16
 810c0a0:	af00      	add	r7, sp, #0
 810c0a2:	60f8      	str	r0, [r7, #12]
 810c0a4:	60b9      	str	r1, [r7, #8]
 810c0a6:	4613      	mov	r3, r2
 810c0a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810c0aa:	68fb      	ldr	r3, [r7, #12]
 810c0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810c0b0:	2b20      	cmp	r3, #32
 810c0b2:	d131      	bne.n	810c118 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810c0b4:	68bb      	ldr	r3, [r7, #8]
 810c0b6:	2b00      	cmp	r3, #0
 810c0b8:	d002      	beq.n	810c0c0 <HAL_UART_Receive_DMA+0x24>
 810c0ba:	88fb      	ldrh	r3, [r7, #6]
 810c0bc:	2b00      	cmp	r3, #0
 810c0be:	d101      	bne.n	810c0c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810c0c0:	2301      	movs	r3, #1
 810c0c2:	e02a      	b.n	810c11a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810c0c4:	68fb      	ldr	r3, [r7, #12]
 810c0c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c0ca:	2b01      	cmp	r3, #1
 810c0cc:	d101      	bne.n	810c0d2 <HAL_UART_Receive_DMA+0x36>
 810c0ce:	2302      	movs	r3, #2
 810c0d0:	e023      	b.n	810c11a <HAL_UART_Receive_DMA+0x7e>
 810c0d2:	68fb      	ldr	r3, [r7, #12]
 810c0d4:	2201      	movs	r2, #1
 810c0d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c0da:	68fb      	ldr	r3, [r7, #12]
 810c0dc:	2200      	movs	r2, #0
 810c0de:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810c0e0:	68fb      	ldr	r3, [r7, #12]
 810c0e2:	681b      	ldr	r3, [r3, #0]
 810c0e4:	4a0f      	ldr	r2, [pc, #60]	; (810c124 <HAL_UART_Receive_DMA+0x88>)
 810c0e6:	4293      	cmp	r3, r2
 810c0e8:	d00e      	beq.n	810c108 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810c0ea:	68fb      	ldr	r3, [r7, #12]
 810c0ec:	681b      	ldr	r3, [r3, #0]
 810c0ee:	685b      	ldr	r3, [r3, #4]
 810c0f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c0f4:	2b00      	cmp	r3, #0
 810c0f6:	d007      	beq.n	810c108 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810c0f8:	68fb      	ldr	r3, [r7, #12]
 810c0fa:	681b      	ldr	r3, [r3, #0]
 810c0fc:	681a      	ldr	r2, [r3, #0]
 810c0fe:	68fb      	ldr	r3, [r7, #12]
 810c100:	681b      	ldr	r3, [r3, #0]
 810c102:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810c106:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810c108:	88fb      	ldrh	r3, [r7, #6]
 810c10a:	461a      	mov	r2, r3
 810c10c:	68b9      	ldr	r1, [r7, #8]
 810c10e:	68f8      	ldr	r0, [r7, #12]
 810c110:	f001 f9c6 	bl	810d4a0 <UART_Start_Receive_DMA>
 810c114:	4603      	mov	r3, r0
 810c116:	e000      	b.n	810c11a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810c118:	2302      	movs	r3, #2
  }
}
 810c11a:	4618      	mov	r0, r3
 810c11c:	3710      	adds	r7, #16
 810c11e:	46bd      	mov	sp, r7
 810c120:	bd80      	pop	{r7, pc}
 810c122:	bf00      	nop
 810c124:	58000c00 	.word	0x58000c00

0810c128 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810c128:	b580      	push	{r7, lr}
 810c12a:	b088      	sub	sp, #32
 810c12c:	af00      	add	r7, sp, #0
 810c12e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810c130:	687b      	ldr	r3, [r7, #4]
 810c132:	681b      	ldr	r3, [r3, #0]
 810c134:	69db      	ldr	r3, [r3, #28]
 810c136:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810c138:	687b      	ldr	r3, [r7, #4]
 810c13a:	681b      	ldr	r3, [r3, #0]
 810c13c:	681b      	ldr	r3, [r3, #0]
 810c13e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810c140:	687b      	ldr	r3, [r7, #4]
 810c142:	681b      	ldr	r3, [r3, #0]
 810c144:	689b      	ldr	r3, [r3, #8]
 810c146:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810c148:	69fa      	ldr	r2, [r7, #28]
 810c14a:	f640 030f 	movw	r3, #2063	; 0x80f
 810c14e:	4013      	ands	r3, r2
 810c150:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810c152:	693b      	ldr	r3, [r7, #16]
 810c154:	2b00      	cmp	r3, #0
 810c156:	d118      	bne.n	810c18a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c158:	69fb      	ldr	r3, [r7, #28]
 810c15a:	f003 0320 	and.w	r3, r3, #32
 810c15e:	2b00      	cmp	r3, #0
 810c160:	d013      	beq.n	810c18a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c162:	69bb      	ldr	r3, [r7, #24]
 810c164:	f003 0320 	and.w	r3, r3, #32
 810c168:	2b00      	cmp	r3, #0
 810c16a:	d104      	bne.n	810c176 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c16c:	697b      	ldr	r3, [r7, #20]
 810c16e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810c172:	2b00      	cmp	r3, #0
 810c174:	d009      	beq.n	810c18a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810c176:	687b      	ldr	r3, [r7, #4]
 810c178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810c17a:	2b00      	cmp	r3, #0
 810c17c:	f000 8282 	beq.w	810c684 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810c180:	687b      	ldr	r3, [r7, #4]
 810c182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810c184:	6878      	ldr	r0, [r7, #4]
 810c186:	4798      	blx	r3
      }
      return;
 810c188:	e27c      	b.n	810c684 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810c18a:	693b      	ldr	r3, [r7, #16]
 810c18c:	2b00      	cmp	r3, #0
 810c18e:	f000 80ef 	beq.w	810c370 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810c192:	697a      	ldr	r2, [r7, #20]
 810c194:	4b73      	ldr	r3, [pc, #460]	; (810c364 <HAL_UART_IRQHandler+0x23c>)
 810c196:	4013      	ands	r3, r2
 810c198:	2b00      	cmp	r3, #0
 810c19a:	d105      	bne.n	810c1a8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810c19c:	69ba      	ldr	r2, [r7, #24]
 810c19e:	4b72      	ldr	r3, [pc, #456]	; (810c368 <HAL_UART_IRQHandler+0x240>)
 810c1a0:	4013      	ands	r3, r2
 810c1a2:	2b00      	cmp	r3, #0
 810c1a4:	f000 80e4 	beq.w	810c370 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810c1a8:	69fb      	ldr	r3, [r7, #28]
 810c1aa:	f003 0301 	and.w	r3, r3, #1
 810c1ae:	2b00      	cmp	r3, #0
 810c1b0:	d010      	beq.n	810c1d4 <HAL_UART_IRQHandler+0xac>
 810c1b2:	69bb      	ldr	r3, [r7, #24]
 810c1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810c1b8:	2b00      	cmp	r3, #0
 810c1ba:	d00b      	beq.n	810c1d4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810c1bc:	687b      	ldr	r3, [r7, #4]
 810c1be:	681b      	ldr	r3, [r3, #0]
 810c1c0:	2201      	movs	r2, #1
 810c1c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810c1c4:	687b      	ldr	r3, [r7, #4]
 810c1c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c1ca:	f043 0201 	orr.w	r2, r3, #1
 810c1ce:	687b      	ldr	r3, [r7, #4]
 810c1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c1d4:	69fb      	ldr	r3, [r7, #28]
 810c1d6:	f003 0302 	and.w	r3, r3, #2
 810c1da:	2b00      	cmp	r3, #0
 810c1dc:	d010      	beq.n	810c200 <HAL_UART_IRQHandler+0xd8>
 810c1de:	697b      	ldr	r3, [r7, #20]
 810c1e0:	f003 0301 	and.w	r3, r3, #1
 810c1e4:	2b00      	cmp	r3, #0
 810c1e6:	d00b      	beq.n	810c200 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810c1e8:	687b      	ldr	r3, [r7, #4]
 810c1ea:	681b      	ldr	r3, [r3, #0]
 810c1ec:	2202      	movs	r2, #2
 810c1ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810c1f0:	687b      	ldr	r3, [r7, #4]
 810c1f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c1f6:	f043 0204 	orr.w	r2, r3, #4
 810c1fa:	687b      	ldr	r3, [r7, #4]
 810c1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c200:	69fb      	ldr	r3, [r7, #28]
 810c202:	f003 0304 	and.w	r3, r3, #4
 810c206:	2b00      	cmp	r3, #0
 810c208:	d010      	beq.n	810c22c <HAL_UART_IRQHandler+0x104>
 810c20a:	697b      	ldr	r3, [r7, #20]
 810c20c:	f003 0301 	and.w	r3, r3, #1
 810c210:	2b00      	cmp	r3, #0
 810c212:	d00b      	beq.n	810c22c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810c214:	687b      	ldr	r3, [r7, #4]
 810c216:	681b      	ldr	r3, [r3, #0]
 810c218:	2204      	movs	r2, #4
 810c21a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810c21c:	687b      	ldr	r3, [r7, #4]
 810c21e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c222:	f043 0202 	orr.w	r2, r3, #2
 810c226:	687b      	ldr	r3, [r7, #4]
 810c228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810c22c:	69fb      	ldr	r3, [r7, #28]
 810c22e:	f003 0308 	and.w	r3, r3, #8
 810c232:	2b00      	cmp	r3, #0
 810c234:	d015      	beq.n	810c262 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c236:	69bb      	ldr	r3, [r7, #24]
 810c238:	f003 0320 	and.w	r3, r3, #32
 810c23c:	2b00      	cmp	r3, #0
 810c23e:	d104      	bne.n	810c24a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810c240:	697a      	ldr	r2, [r7, #20]
 810c242:	4b48      	ldr	r3, [pc, #288]	; (810c364 <HAL_UART_IRQHandler+0x23c>)
 810c244:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c246:	2b00      	cmp	r3, #0
 810c248:	d00b      	beq.n	810c262 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810c24a:	687b      	ldr	r3, [r7, #4]
 810c24c:	681b      	ldr	r3, [r3, #0]
 810c24e:	2208      	movs	r2, #8
 810c250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810c252:	687b      	ldr	r3, [r7, #4]
 810c254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c258:	f043 0208 	orr.w	r2, r3, #8
 810c25c:	687b      	ldr	r3, [r7, #4]
 810c25e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810c262:	69fb      	ldr	r3, [r7, #28]
 810c264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810c268:	2b00      	cmp	r3, #0
 810c26a:	d011      	beq.n	810c290 <HAL_UART_IRQHandler+0x168>
 810c26c:	69bb      	ldr	r3, [r7, #24]
 810c26e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810c272:	2b00      	cmp	r3, #0
 810c274:	d00c      	beq.n	810c290 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c276:	687b      	ldr	r3, [r7, #4]
 810c278:	681b      	ldr	r3, [r3, #0]
 810c27a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810c27e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810c280:	687b      	ldr	r3, [r7, #4]
 810c282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c286:	f043 0220 	orr.w	r2, r3, #32
 810c28a:	687b      	ldr	r3, [r7, #4]
 810c28c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810c290:	687b      	ldr	r3, [r7, #4]
 810c292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c296:	2b00      	cmp	r3, #0
 810c298:	f000 81f6 	beq.w	810c688 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c29c:	69fb      	ldr	r3, [r7, #28]
 810c29e:	f003 0320 	and.w	r3, r3, #32
 810c2a2:	2b00      	cmp	r3, #0
 810c2a4:	d011      	beq.n	810c2ca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c2a6:	69bb      	ldr	r3, [r7, #24]
 810c2a8:	f003 0320 	and.w	r3, r3, #32
 810c2ac:	2b00      	cmp	r3, #0
 810c2ae:	d104      	bne.n	810c2ba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c2b0:	697b      	ldr	r3, [r7, #20]
 810c2b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810c2b6:	2b00      	cmp	r3, #0
 810c2b8:	d007      	beq.n	810c2ca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810c2ba:	687b      	ldr	r3, [r7, #4]
 810c2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810c2be:	2b00      	cmp	r3, #0
 810c2c0:	d003      	beq.n	810c2ca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810c2c2:	687b      	ldr	r3, [r7, #4]
 810c2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810c2c6:	6878      	ldr	r0, [r7, #4]
 810c2c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810c2ca:	687b      	ldr	r3, [r7, #4]
 810c2cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c2d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c2d2:	687b      	ldr	r3, [r7, #4]
 810c2d4:	681b      	ldr	r3, [r3, #0]
 810c2d6:	689b      	ldr	r3, [r3, #8]
 810c2d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c2dc:	2b40      	cmp	r3, #64	; 0x40
 810c2de:	d004      	beq.n	810c2ea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810c2e0:	68fb      	ldr	r3, [r7, #12]
 810c2e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c2e6:	2b00      	cmp	r3, #0
 810c2e8:	d031      	beq.n	810c34e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810c2ea:	6878      	ldr	r0, [r7, #4]
 810c2ec:	f001 f964 	bl	810d5b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c2f0:	687b      	ldr	r3, [r7, #4]
 810c2f2:	681b      	ldr	r3, [r3, #0]
 810c2f4:	689b      	ldr	r3, [r3, #8]
 810c2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c2fa:	2b40      	cmp	r3, #64	; 0x40
 810c2fc:	d123      	bne.n	810c346 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c2fe:	687b      	ldr	r3, [r7, #4]
 810c300:	681b      	ldr	r3, [r3, #0]
 810c302:	689a      	ldr	r2, [r3, #8]
 810c304:	687b      	ldr	r3, [r7, #4]
 810c306:	681b      	ldr	r3, [r3, #0]
 810c308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c30c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810c30e:	687b      	ldr	r3, [r7, #4]
 810c310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c312:	2b00      	cmp	r3, #0
 810c314:	d013      	beq.n	810c33e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810c316:	687b      	ldr	r3, [r7, #4]
 810c318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c31a:	4a14      	ldr	r2, [pc, #80]	; (810c36c <HAL_UART_IRQHandler+0x244>)
 810c31c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810c31e:	687b      	ldr	r3, [r7, #4]
 810c320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c322:	4618      	mov	r0, r3
 810c324:	f7f8 fafc 	bl	8104920 <HAL_DMA_Abort_IT>
 810c328:	4603      	mov	r3, r0
 810c32a:	2b00      	cmp	r3, #0
 810c32c:	d017      	beq.n	810c35e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810c32e:	687b      	ldr	r3, [r7, #4]
 810c330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c334:	687a      	ldr	r2, [r7, #4]
 810c336:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810c338:	4610      	mov	r0, r2
 810c33a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c33c:	e00f      	b.n	810c35e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810c33e:	6878      	ldr	r0, [r7, #4]
 810c340:	f000 f9c0 	bl	810c6c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c344:	e00b      	b.n	810c35e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810c346:	6878      	ldr	r0, [r7, #4]
 810c348:	f000 f9bc 	bl	810c6c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c34c:	e007      	b.n	810c35e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810c34e:	6878      	ldr	r0, [r7, #4]
 810c350:	f000 f9b8 	bl	810c6c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c354:	687b      	ldr	r3, [r7, #4]
 810c356:	2200      	movs	r2, #0
 810c358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810c35c:	e194      	b.n	810c688 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c35e:	bf00      	nop
    return;
 810c360:	e192      	b.n	810c688 <HAL_UART_IRQHandler+0x560>
 810c362:	bf00      	nop
 810c364:	10000001 	.word	0x10000001
 810c368:	04000120 	.word	0x04000120
 810c36c:	0810d7d7 	.word	0x0810d7d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c370:	687b      	ldr	r3, [r7, #4]
 810c372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c374:	2b01      	cmp	r3, #1
 810c376:	f040 8111 	bne.w	810c59c <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810c37a:	69fb      	ldr	r3, [r7, #28]
 810c37c:	f003 0310 	and.w	r3, r3, #16
 810c380:	2b00      	cmp	r3, #0
 810c382:	f000 810b 	beq.w	810c59c <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810c386:	69bb      	ldr	r3, [r7, #24]
 810c388:	f003 0310 	and.w	r3, r3, #16
 810c38c:	2b00      	cmp	r3, #0
 810c38e:	f000 8105 	beq.w	810c59c <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810c392:	687b      	ldr	r3, [r7, #4]
 810c394:	681b      	ldr	r3, [r3, #0]
 810c396:	2210      	movs	r2, #16
 810c398:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c39a:	687b      	ldr	r3, [r7, #4]
 810c39c:	681b      	ldr	r3, [r3, #0]
 810c39e:	689b      	ldr	r3, [r3, #8]
 810c3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c3a4:	2b40      	cmp	r3, #64	; 0x40
 810c3a6:	f040 80bb 	bne.w	810c520 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810c3aa:	687b      	ldr	r3, [r7, #4]
 810c3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3ae:	681b      	ldr	r3, [r3, #0]
 810c3b0:	4a90      	ldr	r2, [pc, #576]	; (810c5f4 <HAL_UART_IRQHandler+0x4cc>)
 810c3b2:	4293      	cmp	r3, r2
 810c3b4:	d059      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c3b6:	687b      	ldr	r3, [r7, #4]
 810c3b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3ba:	681b      	ldr	r3, [r3, #0]
 810c3bc:	4a8e      	ldr	r2, [pc, #568]	; (810c5f8 <HAL_UART_IRQHandler+0x4d0>)
 810c3be:	4293      	cmp	r3, r2
 810c3c0:	d053      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c3c2:	687b      	ldr	r3, [r7, #4]
 810c3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3c6:	681b      	ldr	r3, [r3, #0]
 810c3c8:	4a8c      	ldr	r2, [pc, #560]	; (810c5fc <HAL_UART_IRQHandler+0x4d4>)
 810c3ca:	4293      	cmp	r3, r2
 810c3cc:	d04d      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c3ce:	687b      	ldr	r3, [r7, #4]
 810c3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3d2:	681b      	ldr	r3, [r3, #0]
 810c3d4:	4a8a      	ldr	r2, [pc, #552]	; (810c600 <HAL_UART_IRQHandler+0x4d8>)
 810c3d6:	4293      	cmp	r3, r2
 810c3d8:	d047      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c3da:	687b      	ldr	r3, [r7, #4]
 810c3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3de:	681b      	ldr	r3, [r3, #0]
 810c3e0:	4a88      	ldr	r2, [pc, #544]	; (810c604 <HAL_UART_IRQHandler+0x4dc>)
 810c3e2:	4293      	cmp	r3, r2
 810c3e4:	d041      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c3e6:	687b      	ldr	r3, [r7, #4]
 810c3e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3ea:	681b      	ldr	r3, [r3, #0]
 810c3ec:	4a86      	ldr	r2, [pc, #536]	; (810c608 <HAL_UART_IRQHandler+0x4e0>)
 810c3ee:	4293      	cmp	r3, r2
 810c3f0:	d03b      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c3f2:	687b      	ldr	r3, [r7, #4]
 810c3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3f6:	681b      	ldr	r3, [r3, #0]
 810c3f8:	4a84      	ldr	r2, [pc, #528]	; (810c60c <HAL_UART_IRQHandler+0x4e4>)
 810c3fa:	4293      	cmp	r3, r2
 810c3fc:	d035      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c3fe:	687b      	ldr	r3, [r7, #4]
 810c400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c402:	681b      	ldr	r3, [r3, #0]
 810c404:	4a82      	ldr	r2, [pc, #520]	; (810c610 <HAL_UART_IRQHandler+0x4e8>)
 810c406:	4293      	cmp	r3, r2
 810c408:	d02f      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c40a:	687b      	ldr	r3, [r7, #4]
 810c40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c40e:	681b      	ldr	r3, [r3, #0]
 810c410:	4a80      	ldr	r2, [pc, #512]	; (810c614 <HAL_UART_IRQHandler+0x4ec>)
 810c412:	4293      	cmp	r3, r2
 810c414:	d029      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c416:	687b      	ldr	r3, [r7, #4]
 810c418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c41a:	681b      	ldr	r3, [r3, #0]
 810c41c:	4a7e      	ldr	r2, [pc, #504]	; (810c618 <HAL_UART_IRQHandler+0x4f0>)
 810c41e:	4293      	cmp	r3, r2
 810c420:	d023      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c422:	687b      	ldr	r3, [r7, #4]
 810c424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c426:	681b      	ldr	r3, [r3, #0]
 810c428:	4a7c      	ldr	r2, [pc, #496]	; (810c61c <HAL_UART_IRQHandler+0x4f4>)
 810c42a:	4293      	cmp	r3, r2
 810c42c:	d01d      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c42e:	687b      	ldr	r3, [r7, #4]
 810c430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c432:	681b      	ldr	r3, [r3, #0]
 810c434:	4a7a      	ldr	r2, [pc, #488]	; (810c620 <HAL_UART_IRQHandler+0x4f8>)
 810c436:	4293      	cmp	r3, r2
 810c438:	d017      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c43a:	687b      	ldr	r3, [r7, #4]
 810c43c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c43e:	681b      	ldr	r3, [r3, #0]
 810c440:	4a78      	ldr	r2, [pc, #480]	; (810c624 <HAL_UART_IRQHandler+0x4fc>)
 810c442:	4293      	cmp	r3, r2
 810c444:	d011      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c446:	687b      	ldr	r3, [r7, #4]
 810c448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c44a:	681b      	ldr	r3, [r3, #0]
 810c44c:	4a76      	ldr	r2, [pc, #472]	; (810c628 <HAL_UART_IRQHandler+0x500>)
 810c44e:	4293      	cmp	r3, r2
 810c450:	d00b      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c452:	687b      	ldr	r3, [r7, #4]
 810c454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c456:	681b      	ldr	r3, [r3, #0]
 810c458:	4a74      	ldr	r2, [pc, #464]	; (810c62c <HAL_UART_IRQHandler+0x504>)
 810c45a:	4293      	cmp	r3, r2
 810c45c:	d005      	beq.n	810c46a <HAL_UART_IRQHandler+0x342>
 810c45e:	687b      	ldr	r3, [r7, #4]
 810c460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c462:	681b      	ldr	r3, [r3, #0]
 810c464:	4a72      	ldr	r2, [pc, #456]	; (810c630 <HAL_UART_IRQHandler+0x508>)
 810c466:	4293      	cmp	r3, r2
 810c468:	d105      	bne.n	810c476 <HAL_UART_IRQHandler+0x34e>
 810c46a:	687b      	ldr	r3, [r7, #4]
 810c46c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c46e:	681b      	ldr	r3, [r3, #0]
 810c470:	685b      	ldr	r3, [r3, #4]
 810c472:	b29b      	uxth	r3, r3
 810c474:	e004      	b.n	810c480 <HAL_UART_IRQHandler+0x358>
 810c476:	687b      	ldr	r3, [r7, #4]
 810c478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c47a:	681b      	ldr	r3, [r3, #0]
 810c47c:	685b      	ldr	r3, [r3, #4]
 810c47e:	b29b      	uxth	r3, r3
 810c480:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810c482:	893b      	ldrh	r3, [r7, #8]
 810c484:	2b00      	cmp	r3, #0
 810c486:	f000 8101 	beq.w	810c68c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810c48a:	687b      	ldr	r3, [r7, #4]
 810c48c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810c490:	893a      	ldrh	r2, [r7, #8]
 810c492:	429a      	cmp	r2, r3
 810c494:	f080 80fa 	bcs.w	810c68c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810c498:	687b      	ldr	r3, [r7, #4]
 810c49a:	893a      	ldrh	r2, [r7, #8]
 810c49c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810c4a0:	687b      	ldr	r3, [r7, #4]
 810c4a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c4a4:	69db      	ldr	r3, [r3, #28]
 810c4a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c4aa:	d02b      	beq.n	810c504 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c4ac:	687b      	ldr	r3, [r7, #4]
 810c4ae:	681b      	ldr	r3, [r3, #0]
 810c4b0:	681a      	ldr	r2, [r3, #0]
 810c4b2:	687b      	ldr	r3, [r7, #4]
 810c4b4:	681b      	ldr	r3, [r3, #0]
 810c4b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810c4ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c4bc:	687b      	ldr	r3, [r7, #4]
 810c4be:	681b      	ldr	r3, [r3, #0]
 810c4c0:	689a      	ldr	r2, [r3, #8]
 810c4c2:	687b      	ldr	r3, [r7, #4]
 810c4c4:	681b      	ldr	r3, [r3, #0]
 810c4c6:	f022 0201 	bic.w	r2, r2, #1
 810c4ca:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c4cc:	687b      	ldr	r3, [r7, #4]
 810c4ce:	681b      	ldr	r3, [r3, #0]
 810c4d0:	689a      	ldr	r2, [r3, #8]
 810c4d2:	687b      	ldr	r3, [r7, #4]
 810c4d4:	681b      	ldr	r3, [r3, #0]
 810c4d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c4da:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810c4dc:	687b      	ldr	r3, [r7, #4]
 810c4de:	2220      	movs	r2, #32
 810c4e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c4e4:	687b      	ldr	r3, [r7, #4]
 810c4e6:	2200      	movs	r2, #0
 810c4e8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c4ea:	687b      	ldr	r3, [r7, #4]
 810c4ec:	681b      	ldr	r3, [r3, #0]
 810c4ee:	681a      	ldr	r2, [r3, #0]
 810c4f0:	687b      	ldr	r3, [r7, #4]
 810c4f2:	681b      	ldr	r3, [r3, #0]
 810c4f4:	f022 0210 	bic.w	r2, r2, #16
 810c4f8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810c4fa:	687b      	ldr	r3, [r7, #4]
 810c4fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c4fe:	4618      	mov	r0, r3
 810c500:	f7f7 fef0 	bl	81042e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810c504:	687b      	ldr	r3, [r7, #4]
 810c506:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810c50a:	687b      	ldr	r3, [r7, #4]
 810c50c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810c510:	b29b      	uxth	r3, r3
 810c512:	1ad3      	subs	r3, r2, r3
 810c514:	b29b      	uxth	r3, r3
 810c516:	4619      	mov	r1, r3
 810c518:	6878      	ldr	r0, [r7, #4]
 810c51a:	f000 f8dd 	bl	810c6d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810c51e:	e0b5      	b.n	810c68c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810c520:	687b      	ldr	r3, [r7, #4]
 810c522:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810c526:	687b      	ldr	r3, [r7, #4]
 810c528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810c52c:	b29b      	uxth	r3, r3
 810c52e:	1ad3      	subs	r3, r2, r3
 810c530:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810c532:	687b      	ldr	r3, [r7, #4]
 810c534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810c538:	b29b      	uxth	r3, r3
 810c53a:	2b00      	cmp	r3, #0
 810c53c:	f000 80a8 	beq.w	810c690 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810c540:	897b      	ldrh	r3, [r7, #10]
 810c542:	2b00      	cmp	r3, #0
 810c544:	f000 80a4 	beq.w	810c690 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c548:	687b      	ldr	r3, [r7, #4]
 810c54a:	681b      	ldr	r3, [r3, #0]
 810c54c:	681a      	ldr	r2, [r3, #0]
 810c54e:	687b      	ldr	r3, [r7, #4]
 810c550:	681b      	ldr	r3, [r3, #0]
 810c552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810c556:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810c558:	687b      	ldr	r3, [r7, #4]
 810c55a:	681b      	ldr	r3, [r3, #0]
 810c55c:	689b      	ldr	r3, [r3, #8]
 810c55e:	687a      	ldr	r2, [r7, #4]
 810c560:	6812      	ldr	r2, [r2, #0]
 810c562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810c566:	f023 0301 	bic.w	r3, r3, #1
 810c56a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810c56c:	687b      	ldr	r3, [r7, #4]
 810c56e:	2220      	movs	r2, #32
 810c570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c574:	687b      	ldr	r3, [r7, #4]
 810c576:	2200      	movs	r2, #0
 810c578:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810c57a:	687b      	ldr	r3, [r7, #4]
 810c57c:	2200      	movs	r2, #0
 810c57e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c580:	687b      	ldr	r3, [r7, #4]
 810c582:	681b      	ldr	r3, [r3, #0]
 810c584:	681a      	ldr	r2, [r3, #0]
 810c586:	687b      	ldr	r3, [r7, #4]
 810c588:	681b      	ldr	r3, [r3, #0]
 810c58a:	f022 0210 	bic.w	r2, r2, #16
 810c58e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810c590:	897b      	ldrh	r3, [r7, #10]
 810c592:	4619      	mov	r1, r3
 810c594:	6878      	ldr	r0, [r7, #4]
 810c596:	f000 f89f 	bl	810c6d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810c59a:	e079      	b.n	810c690 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810c59c:	69fb      	ldr	r3, [r7, #28]
 810c59e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810c5a2:	2b00      	cmp	r3, #0
 810c5a4:	d00d      	beq.n	810c5c2 <HAL_UART_IRQHandler+0x49a>
 810c5a6:	697b      	ldr	r3, [r7, #20]
 810c5a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810c5ac:	2b00      	cmp	r3, #0
 810c5ae:	d008      	beq.n	810c5c2 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810c5b0:	687b      	ldr	r3, [r7, #4]
 810c5b2:	681b      	ldr	r3, [r3, #0]
 810c5b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810c5b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810c5ba:	6878      	ldr	r0, [r7, #4]
 810c5bc:	f001 f93b 	bl	810d836 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810c5c0:	e069      	b.n	810c696 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810c5c2:	69fb      	ldr	r3, [r7, #28]
 810c5c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c5c8:	2b00      	cmp	r3, #0
 810c5ca:	d033      	beq.n	810c634 <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810c5cc:	69bb      	ldr	r3, [r7, #24]
 810c5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c5d2:	2b00      	cmp	r3, #0
 810c5d4:	d104      	bne.n	810c5e0 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810c5d6:	697b      	ldr	r3, [r7, #20]
 810c5d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c5dc:	2b00      	cmp	r3, #0
 810c5de:	d029      	beq.n	810c634 <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 810c5e0:	687b      	ldr	r3, [r7, #4]
 810c5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810c5e4:	2b00      	cmp	r3, #0
 810c5e6:	d055      	beq.n	810c694 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810c5e8:	687b      	ldr	r3, [r7, #4]
 810c5ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810c5ec:	6878      	ldr	r0, [r7, #4]
 810c5ee:	4798      	blx	r3
    }
    return;
 810c5f0:	e050      	b.n	810c694 <HAL_UART_IRQHandler+0x56c>
 810c5f2:	bf00      	nop
 810c5f4:	40020010 	.word	0x40020010
 810c5f8:	40020028 	.word	0x40020028
 810c5fc:	40020040 	.word	0x40020040
 810c600:	40020058 	.word	0x40020058
 810c604:	40020070 	.word	0x40020070
 810c608:	40020088 	.word	0x40020088
 810c60c:	400200a0 	.word	0x400200a0
 810c610:	400200b8 	.word	0x400200b8
 810c614:	40020410 	.word	0x40020410
 810c618:	40020428 	.word	0x40020428
 810c61c:	40020440 	.word	0x40020440
 810c620:	40020458 	.word	0x40020458
 810c624:	40020470 	.word	0x40020470
 810c628:	40020488 	.word	0x40020488
 810c62c:	400204a0 	.word	0x400204a0
 810c630:	400204b8 	.word	0x400204b8
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810c634:	69fb      	ldr	r3, [r7, #28]
 810c636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c63a:	2b00      	cmp	r3, #0
 810c63c:	d008      	beq.n	810c650 <HAL_UART_IRQHandler+0x528>
 810c63e:	69bb      	ldr	r3, [r7, #24]
 810c640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c644:	2b00      	cmp	r3, #0
 810c646:	d003      	beq.n	810c650 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810c648:	6878      	ldr	r0, [r7, #4]
 810c64a:	f001 f8da 	bl	810d802 <UART_EndTransmit_IT>
    return;
 810c64e:	e022      	b.n	810c696 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810c650:	69fb      	ldr	r3, [r7, #28]
 810c652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c656:	2b00      	cmp	r3, #0
 810c658:	d008      	beq.n	810c66c <HAL_UART_IRQHandler+0x544>
 810c65a:	69bb      	ldr	r3, [r7, #24]
 810c65c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810c660:	2b00      	cmp	r3, #0
 810c662:	d003      	beq.n	810c66c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810c664:	6878      	ldr	r0, [r7, #4]
 810c666:	f001 f8fa 	bl	810d85e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810c66a:	e014      	b.n	810c696 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810c66c:	69fb      	ldr	r3, [r7, #28]
 810c66e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810c672:	2b00      	cmp	r3, #0
 810c674:	d00f      	beq.n	810c696 <HAL_UART_IRQHandler+0x56e>
 810c676:	69bb      	ldr	r3, [r7, #24]
 810c678:	2b00      	cmp	r3, #0
 810c67a:	da0c      	bge.n	810c696 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810c67c:	6878      	ldr	r0, [r7, #4]
 810c67e:	f001 f8e4 	bl	810d84a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810c682:	e008      	b.n	810c696 <HAL_UART_IRQHandler+0x56e>
      return;
 810c684:	bf00      	nop
 810c686:	e006      	b.n	810c696 <HAL_UART_IRQHandler+0x56e>
    return;
 810c688:	bf00      	nop
 810c68a:	e004      	b.n	810c696 <HAL_UART_IRQHandler+0x56e>
      return;
 810c68c:	bf00      	nop
 810c68e:	e002      	b.n	810c696 <HAL_UART_IRQHandler+0x56e>
      return;
 810c690:	bf00      	nop
 810c692:	e000      	b.n	810c696 <HAL_UART_IRQHandler+0x56e>
    return;
 810c694:	bf00      	nop
  }
}
 810c696:	3720      	adds	r7, #32
 810c698:	46bd      	mov	sp, r7
 810c69a:	bd80      	pop	{r7, pc}

0810c69c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810c69c:	b480      	push	{r7}
 810c69e:	b083      	sub	sp, #12
 810c6a0:	af00      	add	r7, sp, #0
 810c6a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810c6a4:	bf00      	nop
 810c6a6:	370c      	adds	r7, #12
 810c6a8:	46bd      	mov	sp, r7
 810c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6ae:	4770      	bx	lr

0810c6b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810c6b0:	b480      	push	{r7}
 810c6b2:	b083      	sub	sp, #12
 810c6b4:	af00      	add	r7, sp, #0
 810c6b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810c6b8:	bf00      	nop
 810c6ba:	370c      	adds	r7, #12
 810c6bc:	46bd      	mov	sp, r7
 810c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6c2:	4770      	bx	lr

0810c6c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810c6c4:	b480      	push	{r7}
 810c6c6:	b083      	sub	sp, #12
 810c6c8:	af00      	add	r7, sp, #0
 810c6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810c6cc:	bf00      	nop
 810c6ce:	370c      	adds	r7, #12
 810c6d0:	46bd      	mov	sp, r7
 810c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6d6:	4770      	bx	lr

0810c6d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810c6d8:	b480      	push	{r7}
 810c6da:	b083      	sub	sp, #12
 810c6dc:	af00      	add	r7, sp, #0
 810c6de:	6078      	str	r0, [r7, #4]
 810c6e0:	460b      	mov	r3, r1
 810c6e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810c6e4:	bf00      	nop
 810c6e6:	370c      	adds	r7, #12
 810c6e8:	46bd      	mov	sp, r7
 810c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6ee:	4770      	bx	lr

0810c6f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810c6f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810c6f4:	b092      	sub	sp, #72	; 0x48
 810c6f6:	af00      	add	r7, sp, #0
 810c6f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810c6fa:	2300      	movs	r3, #0
 810c6fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810c700:	697b      	ldr	r3, [r7, #20]
 810c702:	689a      	ldr	r2, [r3, #8]
 810c704:	697b      	ldr	r3, [r7, #20]
 810c706:	691b      	ldr	r3, [r3, #16]
 810c708:	431a      	orrs	r2, r3
 810c70a:	697b      	ldr	r3, [r7, #20]
 810c70c:	695b      	ldr	r3, [r3, #20]
 810c70e:	431a      	orrs	r2, r3
 810c710:	697b      	ldr	r3, [r7, #20]
 810c712:	69db      	ldr	r3, [r3, #28]
 810c714:	4313      	orrs	r3, r2
 810c716:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810c718:	697b      	ldr	r3, [r7, #20]
 810c71a:	681b      	ldr	r3, [r3, #0]
 810c71c:	681a      	ldr	r2, [r3, #0]
 810c71e:	4bbd      	ldr	r3, [pc, #756]	; (810ca14 <UART_SetConfig+0x324>)
 810c720:	4013      	ands	r3, r2
 810c722:	697a      	ldr	r2, [r7, #20]
 810c724:	6812      	ldr	r2, [r2, #0]
 810c726:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810c728:	430b      	orrs	r3, r1
 810c72a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810c72c:	697b      	ldr	r3, [r7, #20]
 810c72e:	681b      	ldr	r3, [r3, #0]
 810c730:	685b      	ldr	r3, [r3, #4]
 810c732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810c736:	697b      	ldr	r3, [r7, #20]
 810c738:	68da      	ldr	r2, [r3, #12]
 810c73a:	697b      	ldr	r3, [r7, #20]
 810c73c:	681b      	ldr	r3, [r3, #0]
 810c73e:	430a      	orrs	r2, r1
 810c740:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810c742:	697b      	ldr	r3, [r7, #20]
 810c744:	699b      	ldr	r3, [r3, #24]
 810c746:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810c748:	697b      	ldr	r3, [r7, #20]
 810c74a:	681b      	ldr	r3, [r3, #0]
 810c74c:	4ab2      	ldr	r2, [pc, #712]	; (810ca18 <UART_SetConfig+0x328>)
 810c74e:	4293      	cmp	r3, r2
 810c750:	d004      	beq.n	810c75c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810c752:	697b      	ldr	r3, [r7, #20]
 810c754:	6a1b      	ldr	r3, [r3, #32]
 810c756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810c758:	4313      	orrs	r3, r2
 810c75a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810c75c:	697b      	ldr	r3, [r7, #20]
 810c75e:	681b      	ldr	r3, [r3, #0]
 810c760:	689b      	ldr	r3, [r3, #8]
 810c762:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810c766:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810c76a:	697a      	ldr	r2, [r7, #20]
 810c76c:	6812      	ldr	r2, [r2, #0]
 810c76e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810c770:	430b      	orrs	r3, r1
 810c772:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810c774:	697b      	ldr	r3, [r7, #20]
 810c776:	681b      	ldr	r3, [r3, #0]
 810c778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c77a:	f023 010f 	bic.w	r1, r3, #15
 810c77e:	697b      	ldr	r3, [r7, #20]
 810c780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810c782:	697b      	ldr	r3, [r7, #20]
 810c784:	681b      	ldr	r3, [r3, #0]
 810c786:	430a      	orrs	r2, r1
 810c788:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810c78a:	697b      	ldr	r3, [r7, #20]
 810c78c:	681b      	ldr	r3, [r3, #0]
 810c78e:	4aa3      	ldr	r2, [pc, #652]	; (810ca1c <UART_SetConfig+0x32c>)
 810c790:	4293      	cmp	r3, r2
 810c792:	d177      	bne.n	810c884 <UART_SetConfig+0x194>
 810c794:	4ba2      	ldr	r3, [pc, #648]	; (810ca20 <UART_SetConfig+0x330>)
 810c796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810c79c:	2b28      	cmp	r3, #40	; 0x28
 810c79e:	d86d      	bhi.n	810c87c <UART_SetConfig+0x18c>
 810c7a0:	a201      	add	r2, pc, #4	; (adr r2, 810c7a8 <UART_SetConfig+0xb8>)
 810c7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c7a6:	bf00      	nop
 810c7a8:	0810c84d 	.word	0x0810c84d
 810c7ac:	0810c87d 	.word	0x0810c87d
 810c7b0:	0810c87d 	.word	0x0810c87d
 810c7b4:	0810c87d 	.word	0x0810c87d
 810c7b8:	0810c87d 	.word	0x0810c87d
 810c7bc:	0810c87d 	.word	0x0810c87d
 810c7c0:	0810c87d 	.word	0x0810c87d
 810c7c4:	0810c87d 	.word	0x0810c87d
 810c7c8:	0810c855 	.word	0x0810c855
 810c7cc:	0810c87d 	.word	0x0810c87d
 810c7d0:	0810c87d 	.word	0x0810c87d
 810c7d4:	0810c87d 	.word	0x0810c87d
 810c7d8:	0810c87d 	.word	0x0810c87d
 810c7dc:	0810c87d 	.word	0x0810c87d
 810c7e0:	0810c87d 	.word	0x0810c87d
 810c7e4:	0810c87d 	.word	0x0810c87d
 810c7e8:	0810c85d 	.word	0x0810c85d
 810c7ec:	0810c87d 	.word	0x0810c87d
 810c7f0:	0810c87d 	.word	0x0810c87d
 810c7f4:	0810c87d 	.word	0x0810c87d
 810c7f8:	0810c87d 	.word	0x0810c87d
 810c7fc:	0810c87d 	.word	0x0810c87d
 810c800:	0810c87d 	.word	0x0810c87d
 810c804:	0810c87d 	.word	0x0810c87d
 810c808:	0810c865 	.word	0x0810c865
 810c80c:	0810c87d 	.word	0x0810c87d
 810c810:	0810c87d 	.word	0x0810c87d
 810c814:	0810c87d 	.word	0x0810c87d
 810c818:	0810c87d 	.word	0x0810c87d
 810c81c:	0810c87d 	.word	0x0810c87d
 810c820:	0810c87d 	.word	0x0810c87d
 810c824:	0810c87d 	.word	0x0810c87d
 810c828:	0810c86d 	.word	0x0810c86d
 810c82c:	0810c87d 	.word	0x0810c87d
 810c830:	0810c87d 	.word	0x0810c87d
 810c834:	0810c87d 	.word	0x0810c87d
 810c838:	0810c87d 	.word	0x0810c87d
 810c83c:	0810c87d 	.word	0x0810c87d
 810c840:	0810c87d 	.word	0x0810c87d
 810c844:	0810c87d 	.word	0x0810c87d
 810c848:	0810c875 	.word	0x0810c875
 810c84c:	2301      	movs	r3, #1
 810c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c852:	e220      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c854:	2304      	movs	r3, #4
 810c856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c85a:	e21c      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c85c:	2308      	movs	r3, #8
 810c85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c862:	e218      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c864:	2310      	movs	r3, #16
 810c866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c86a:	e214      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c86c:	2320      	movs	r3, #32
 810c86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c872:	e210      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c874:	2340      	movs	r3, #64	; 0x40
 810c876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c87a:	e20c      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c87c:	2380      	movs	r3, #128	; 0x80
 810c87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c882:	e208      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c884:	697b      	ldr	r3, [r7, #20]
 810c886:	681b      	ldr	r3, [r3, #0]
 810c888:	4a66      	ldr	r2, [pc, #408]	; (810ca24 <UART_SetConfig+0x334>)
 810c88a:	4293      	cmp	r3, r2
 810c88c:	d130      	bne.n	810c8f0 <UART_SetConfig+0x200>
 810c88e:	4b64      	ldr	r3, [pc, #400]	; (810ca20 <UART_SetConfig+0x330>)
 810c890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c892:	f003 0307 	and.w	r3, r3, #7
 810c896:	2b05      	cmp	r3, #5
 810c898:	d826      	bhi.n	810c8e8 <UART_SetConfig+0x1f8>
 810c89a:	a201      	add	r2, pc, #4	; (adr r2, 810c8a0 <UART_SetConfig+0x1b0>)
 810c89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c8a0:	0810c8b9 	.word	0x0810c8b9
 810c8a4:	0810c8c1 	.word	0x0810c8c1
 810c8a8:	0810c8c9 	.word	0x0810c8c9
 810c8ac:	0810c8d1 	.word	0x0810c8d1
 810c8b0:	0810c8d9 	.word	0x0810c8d9
 810c8b4:	0810c8e1 	.word	0x0810c8e1
 810c8b8:	2300      	movs	r3, #0
 810c8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8be:	e1ea      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c8c0:	2304      	movs	r3, #4
 810c8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8c6:	e1e6      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c8c8:	2308      	movs	r3, #8
 810c8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8ce:	e1e2      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c8d0:	2310      	movs	r3, #16
 810c8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8d6:	e1de      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c8d8:	2320      	movs	r3, #32
 810c8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8de:	e1da      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c8e0:	2340      	movs	r3, #64	; 0x40
 810c8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8e6:	e1d6      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c8e8:	2380      	movs	r3, #128	; 0x80
 810c8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8ee:	e1d2      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c8f0:	697b      	ldr	r3, [r7, #20]
 810c8f2:	681b      	ldr	r3, [r3, #0]
 810c8f4:	4a4c      	ldr	r2, [pc, #304]	; (810ca28 <UART_SetConfig+0x338>)
 810c8f6:	4293      	cmp	r3, r2
 810c8f8:	d130      	bne.n	810c95c <UART_SetConfig+0x26c>
 810c8fa:	4b49      	ldr	r3, [pc, #292]	; (810ca20 <UART_SetConfig+0x330>)
 810c8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c8fe:	f003 0307 	and.w	r3, r3, #7
 810c902:	2b05      	cmp	r3, #5
 810c904:	d826      	bhi.n	810c954 <UART_SetConfig+0x264>
 810c906:	a201      	add	r2, pc, #4	; (adr r2, 810c90c <UART_SetConfig+0x21c>)
 810c908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c90c:	0810c925 	.word	0x0810c925
 810c910:	0810c92d 	.word	0x0810c92d
 810c914:	0810c935 	.word	0x0810c935
 810c918:	0810c93d 	.word	0x0810c93d
 810c91c:	0810c945 	.word	0x0810c945
 810c920:	0810c94d 	.word	0x0810c94d
 810c924:	2300      	movs	r3, #0
 810c926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c92a:	e1b4      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c92c:	2304      	movs	r3, #4
 810c92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c932:	e1b0      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c934:	2308      	movs	r3, #8
 810c936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c93a:	e1ac      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c93c:	2310      	movs	r3, #16
 810c93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c942:	e1a8      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c944:	2320      	movs	r3, #32
 810c946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c94a:	e1a4      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c94c:	2340      	movs	r3, #64	; 0x40
 810c94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c952:	e1a0      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c954:	2380      	movs	r3, #128	; 0x80
 810c956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c95a:	e19c      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c95c:	697b      	ldr	r3, [r7, #20]
 810c95e:	681b      	ldr	r3, [r3, #0]
 810c960:	4a32      	ldr	r2, [pc, #200]	; (810ca2c <UART_SetConfig+0x33c>)
 810c962:	4293      	cmp	r3, r2
 810c964:	d130      	bne.n	810c9c8 <UART_SetConfig+0x2d8>
 810c966:	4b2e      	ldr	r3, [pc, #184]	; (810ca20 <UART_SetConfig+0x330>)
 810c968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c96a:	f003 0307 	and.w	r3, r3, #7
 810c96e:	2b05      	cmp	r3, #5
 810c970:	d826      	bhi.n	810c9c0 <UART_SetConfig+0x2d0>
 810c972:	a201      	add	r2, pc, #4	; (adr r2, 810c978 <UART_SetConfig+0x288>)
 810c974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c978:	0810c991 	.word	0x0810c991
 810c97c:	0810c999 	.word	0x0810c999
 810c980:	0810c9a1 	.word	0x0810c9a1
 810c984:	0810c9a9 	.word	0x0810c9a9
 810c988:	0810c9b1 	.word	0x0810c9b1
 810c98c:	0810c9b9 	.word	0x0810c9b9
 810c990:	2300      	movs	r3, #0
 810c992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c996:	e17e      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c998:	2304      	movs	r3, #4
 810c99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c99e:	e17a      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c9a0:	2308      	movs	r3, #8
 810c9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9a6:	e176      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c9a8:	2310      	movs	r3, #16
 810c9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9ae:	e172      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c9b0:	2320      	movs	r3, #32
 810c9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9b6:	e16e      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c9b8:	2340      	movs	r3, #64	; 0x40
 810c9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9be:	e16a      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c9c0:	2380      	movs	r3, #128	; 0x80
 810c9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9c6:	e166      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810c9c8:	697b      	ldr	r3, [r7, #20]
 810c9ca:	681b      	ldr	r3, [r3, #0]
 810c9cc:	4a18      	ldr	r2, [pc, #96]	; (810ca30 <UART_SetConfig+0x340>)
 810c9ce:	4293      	cmp	r3, r2
 810c9d0:	d140      	bne.n	810ca54 <UART_SetConfig+0x364>
 810c9d2:	4b13      	ldr	r3, [pc, #76]	; (810ca20 <UART_SetConfig+0x330>)
 810c9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c9d6:	f003 0307 	and.w	r3, r3, #7
 810c9da:	2b05      	cmp	r3, #5
 810c9dc:	d836      	bhi.n	810ca4c <UART_SetConfig+0x35c>
 810c9de:	a201      	add	r2, pc, #4	; (adr r2, 810c9e4 <UART_SetConfig+0x2f4>)
 810c9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c9e4:	0810c9fd 	.word	0x0810c9fd
 810c9e8:	0810ca05 	.word	0x0810ca05
 810c9ec:	0810ca0d 	.word	0x0810ca0d
 810c9f0:	0810ca35 	.word	0x0810ca35
 810c9f4:	0810ca3d 	.word	0x0810ca3d
 810c9f8:	0810ca45 	.word	0x0810ca45
 810c9fc:	2300      	movs	r3, #0
 810c9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca02:	e148      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810ca04:	2304      	movs	r3, #4
 810ca06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca0a:	e144      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810ca0c:	2308      	movs	r3, #8
 810ca0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca12:	e140      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810ca14:	cfff69f3 	.word	0xcfff69f3
 810ca18:	58000c00 	.word	0x58000c00
 810ca1c:	40011000 	.word	0x40011000
 810ca20:	58024400 	.word	0x58024400
 810ca24:	40004400 	.word	0x40004400
 810ca28:	40004800 	.word	0x40004800
 810ca2c:	40004c00 	.word	0x40004c00
 810ca30:	40005000 	.word	0x40005000
 810ca34:	2310      	movs	r3, #16
 810ca36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca3a:	e12c      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810ca3c:	2320      	movs	r3, #32
 810ca3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca42:	e128      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810ca44:	2340      	movs	r3, #64	; 0x40
 810ca46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca4a:	e124      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810ca4c:	2380      	movs	r3, #128	; 0x80
 810ca4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca52:	e120      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810ca54:	697b      	ldr	r3, [r7, #20]
 810ca56:	681b      	ldr	r3, [r3, #0]
 810ca58:	4acb      	ldr	r2, [pc, #812]	; (810cd88 <UART_SetConfig+0x698>)
 810ca5a:	4293      	cmp	r3, r2
 810ca5c:	d176      	bne.n	810cb4c <UART_SetConfig+0x45c>
 810ca5e:	4bcb      	ldr	r3, [pc, #812]	; (810cd8c <UART_SetConfig+0x69c>)
 810ca60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ca62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810ca66:	2b28      	cmp	r3, #40	; 0x28
 810ca68:	d86c      	bhi.n	810cb44 <UART_SetConfig+0x454>
 810ca6a:	a201      	add	r2, pc, #4	; (adr r2, 810ca70 <UART_SetConfig+0x380>)
 810ca6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ca70:	0810cb15 	.word	0x0810cb15
 810ca74:	0810cb45 	.word	0x0810cb45
 810ca78:	0810cb45 	.word	0x0810cb45
 810ca7c:	0810cb45 	.word	0x0810cb45
 810ca80:	0810cb45 	.word	0x0810cb45
 810ca84:	0810cb45 	.word	0x0810cb45
 810ca88:	0810cb45 	.word	0x0810cb45
 810ca8c:	0810cb45 	.word	0x0810cb45
 810ca90:	0810cb1d 	.word	0x0810cb1d
 810ca94:	0810cb45 	.word	0x0810cb45
 810ca98:	0810cb45 	.word	0x0810cb45
 810ca9c:	0810cb45 	.word	0x0810cb45
 810caa0:	0810cb45 	.word	0x0810cb45
 810caa4:	0810cb45 	.word	0x0810cb45
 810caa8:	0810cb45 	.word	0x0810cb45
 810caac:	0810cb45 	.word	0x0810cb45
 810cab0:	0810cb25 	.word	0x0810cb25
 810cab4:	0810cb45 	.word	0x0810cb45
 810cab8:	0810cb45 	.word	0x0810cb45
 810cabc:	0810cb45 	.word	0x0810cb45
 810cac0:	0810cb45 	.word	0x0810cb45
 810cac4:	0810cb45 	.word	0x0810cb45
 810cac8:	0810cb45 	.word	0x0810cb45
 810cacc:	0810cb45 	.word	0x0810cb45
 810cad0:	0810cb2d 	.word	0x0810cb2d
 810cad4:	0810cb45 	.word	0x0810cb45
 810cad8:	0810cb45 	.word	0x0810cb45
 810cadc:	0810cb45 	.word	0x0810cb45
 810cae0:	0810cb45 	.word	0x0810cb45
 810cae4:	0810cb45 	.word	0x0810cb45
 810cae8:	0810cb45 	.word	0x0810cb45
 810caec:	0810cb45 	.word	0x0810cb45
 810caf0:	0810cb35 	.word	0x0810cb35
 810caf4:	0810cb45 	.word	0x0810cb45
 810caf8:	0810cb45 	.word	0x0810cb45
 810cafc:	0810cb45 	.word	0x0810cb45
 810cb00:	0810cb45 	.word	0x0810cb45
 810cb04:	0810cb45 	.word	0x0810cb45
 810cb08:	0810cb45 	.word	0x0810cb45
 810cb0c:	0810cb45 	.word	0x0810cb45
 810cb10:	0810cb3d 	.word	0x0810cb3d
 810cb14:	2301      	movs	r3, #1
 810cb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb1a:	e0bc      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb1c:	2304      	movs	r3, #4
 810cb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb22:	e0b8      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb24:	2308      	movs	r3, #8
 810cb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb2a:	e0b4      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb2c:	2310      	movs	r3, #16
 810cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb32:	e0b0      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb34:	2320      	movs	r3, #32
 810cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb3a:	e0ac      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb3c:	2340      	movs	r3, #64	; 0x40
 810cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb42:	e0a8      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb44:	2380      	movs	r3, #128	; 0x80
 810cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb4a:	e0a4      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb4c:	697b      	ldr	r3, [r7, #20]
 810cb4e:	681b      	ldr	r3, [r3, #0]
 810cb50:	4a8f      	ldr	r2, [pc, #572]	; (810cd90 <UART_SetConfig+0x6a0>)
 810cb52:	4293      	cmp	r3, r2
 810cb54:	d130      	bne.n	810cbb8 <UART_SetConfig+0x4c8>
 810cb56:	4b8d      	ldr	r3, [pc, #564]	; (810cd8c <UART_SetConfig+0x69c>)
 810cb58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810cb5a:	f003 0307 	and.w	r3, r3, #7
 810cb5e:	2b05      	cmp	r3, #5
 810cb60:	d826      	bhi.n	810cbb0 <UART_SetConfig+0x4c0>
 810cb62:	a201      	add	r2, pc, #4	; (adr r2, 810cb68 <UART_SetConfig+0x478>)
 810cb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cb68:	0810cb81 	.word	0x0810cb81
 810cb6c:	0810cb89 	.word	0x0810cb89
 810cb70:	0810cb91 	.word	0x0810cb91
 810cb74:	0810cb99 	.word	0x0810cb99
 810cb78:	0810cba1 	.word	0x0810cba1
 810cb7c:	0810cba9 	.word	0x0810cba9
 810cb80:	2300      	movs	r3, #0
 810cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb86:	e086      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb88:	2304      	movs	r3, #4
 810cb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb8e:	e082      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb90:	2308      	movs	r3, #8
 810cb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb96:	e07e      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cb98:	2310      	movs	r3, #16
 810cb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb9e:	e07a      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cba0:	2320      	movs	r3, #32
 810cba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cba6:	e076      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cba8:	2340      	movs	r3, #64	; 0x40
 810cbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cbae:	e072      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cbb0:	2380      	movs	r3, #128	; 0x80
 810cbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cbb6:	e06e      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cbb8:	697b      	ldr	r3, [r7, #20]
 810cbba:	681b      	ldr	r3, [r3, #0]
 810cbbc:	4a75      	ldr	r2, [pc, #468]	; (810cd94 <UART_SetConfig+0x6a4>)
 810cbbe:	4293      	cmp	r3, r2
 810cbc0:	d130      	bne.n	810cc24 <UART_SetConfig+0x534>
 810cbc2:	4b72      	ldr	r3, [pc, #456]	; (810cd8c <UART_SetConfig+0x69c>)
 810cbc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810cbc6:	f003 0307 	and.w	r3, r3, #7
 810cbca:	2b05      	cmp	r3, #5
 810cbcc:	d826      	bhi.n	810cc1c <UART_SetConfig+0x52c>
 810cbce:	a201      	add	r2, pc, #4	; (adr r2, 810cbd4 <UART_SetConfig+0x4e4>)
 810cbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cbd4:	0810cbed 	.word	0x0810cbed
 810cbd8:	0810cbf5 	.word	0x0810cbf5
 810cbdc:	0810cbfd 	.word	0x0810cbfd
 810cbe0:	0810cc05 	.word	0x0810cc05
 810cbe4:	0810cc0d 	.word	0x0810cc0d
 810cbe8:	0810cc15 	.word	0x0810cc15
 810cbec:	2300      	movs	r3, #0
 810cbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cbf2:	e050      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cbf4:	2304      	movs	r3, #4
 810cbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cbfa:	e04c      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cbfc:	2308      	movs	r3, #8
 810cbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc02:	e048      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc04:	2310      	movs	r3, #16
 810cc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc0a:	e044      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc0c:	2320      	movs	r3, #32
 810cc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc12:	e040      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc14:	2340      	movs	r3, #64	; 0x40
 810cc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc1a:	e03c      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc1c:	2380      	movs	r3, #128	; 0x80
 810cc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc22:	e038      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc24:	697b      	ldr	r3, [r7, #20]
 810cc26:	681b      	ldr	r3, [r3, #0]
 810cc28:	4a5b      	ldr	r2, [pc, #364]	; (810cd98 <UART_SetConfig+0x6a8>)
 810cc2a:	4293      	cmp	r3, r2
 810cc2c:	d130      	bne.n	810cc90 <UART_SetConfig+0x5a0>
 810cc2e:	4b57      	ldr	r3, [pc, #348]	; (810cd8c <UART_SetConfig+0x69c>)
 810cc30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810cc32:	f003 0307 	and.w	r3, r3, #7
 810cc36:	2b05      	cmp	r3, #5
 810cc38:	d826      	bhi.n	810cc88 <UART_SetConfig+0x598>
 810cc3a:	a201      	add	r2, pc, #4	; (adr r2, 810cc40 <UART_SetConfig+0x550>)
 810cc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cc40:	0810cc59 	.word	0x0810cc59
 810cc44:	0810cc61 	.word	0x0810cc61
 810cc48:	0810cc69 	.word	0x0810cc69
 810cc4c:	0810cc71 	.word	0x0810cc71
 810cc50:	0810cc79 	.word	0x0810cc79
 810cc54:	0810cc81 	.word	0x0810cc81
 810cc58:	2302      	movs	r3, #2
 810cc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc5e:	e01a      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc60:	2304      	movs	r3, #4
 810cc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc66:	e016      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc68:	2308      	movs	r3, #8
 810cc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc6e:	e012      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc70:	2310      	movs	r3, #16
 810cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc76:	e00e      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc78:	2320      	movs	r3, #32
 810cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc7e:	e00a      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc80:	2340      	movs	r3, #64	; 0x40
 810cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc86:	e006      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc88:	2380      	movs	r3, #128	; 0x80
 810cc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc8e:	e002      	b.n	810cc96 <UART_SetConfig+0x5a6>
 810cc90:	2380      	movs	r3, #128	; 0x80
 810cc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810cc96:	697b      	ldr	r3, [r7, #20]
 810cc98:	681b      	ldr	r3, [r3, #0]
 810cc9a:	4a3f      	ldr	r2, [pc, #252]	; (810cd98 <UART_SetConfig+0x6a8>)
 810cc9c:	4293      	cmp	r3, r2
 810cc9e:	f040 80f8 	bne.w	810ce92 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810cca2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810cca6:	2b20      	cmp	r3, #32
 810cca8:	dc46      	bgt.n	810cd38 <UART_SetConfig+0x648>
 810ccaa:	2b02      	cmp	r3, #2
 810ccac:	f2c0 8082 	blt.w	810cdb4 <UART_SetConfig+0x6c4>
 810ccb0:	3b02      	subs	r3, #2
 810ccb2:	2b1e      	cmp	r3, #30
 810ccb4:	d87e      	bhi.n	810cdb4 <UART_SetConfig+0x6c4>
 810ccb6:	a201      	add	r2, pc, #4	; (adr r2, 810ccbc <UART_SetConfig+0x5cc>)
 810ccb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ccbc:	0810cd3f 	.word	0x0810cd3f
 810ccc0:	0810cdb5 	.word	0x0810cdb5
 810ccc4:	0810cd47 	.word	0x0810cd47
 810ccc8:	0810cdb5 	.word	0x0810cdb5
 810cccc:	0810cdb5 	.word	0x0810cdb5
 810ccd0:	0810cdb5 	.word	0x0810cdb5
 810ccd4:	0810cd57 	.word	0x0810cd57
 810ccd8:	0810cdb5 	.word	0x0810cdb5
 810ccdc:	0810cdb5 	.word	0x0810cdb5
 810cce0:	0810cdb5 	.word	0x0810cdb5
 810cce4:	0810cdb5 	.word	0x0810cdb5
 810cce8:	0810cdb5 	.word	0x0810cdb5
 810ccec:	0810cdb5 	.word	0x0810cdb5
 810ccf0:	0810cdb5 	.word	0x0810cdb5
 810ccf4:	0810cd67 	.word	0x0810cd67
 810ccf8:	0810cdb5 	.word	0x0810cdb5
 810ccfc:	0810cdb5 	.word	0x0810cdb5
 810cd00:	0810cdb5 	.word	0x0810cdb5
 810cd04:	0810cdb5 	.word	0x0810cdb5
 810cd08:	0810cdb5 	.word	0x0810cdb5
 810cd0c:	0810cdb5 	.word	0x0810cdb5
 810cd10:	0810cdb5 	.word	0x0810cdb5
 810cd14:	0810cdb5 	.word	0x0810cdb5
 810cd18:	0810cdb5 	.word	0x0810cdb5
 810cd1c:	0810cdb5 	.word	0x0810cdb5
 810cd20:	0810cdb5 	.word	0x0810cdb5
 810cd24:	0810cdb5 	.word	0x0810cdb5
 810cd28:	0810cdb5 	.word	0x0810cdb5
 810cd2c:	0810cdb5 	.word	0x0810cdb5
 810cd30:	0810cdb5 	.word	0x0810cdb5
 810cd34:	0810cda7 	.word	0x0810cda7
 810cd38:	2b40      	cmp	r3, #64	; 0x40
 810cd3a:	d037      	beq.n	810cdac <UART_SetConfig+0x6bc>
 810cd3c:	e03a      	b.n	810cdb4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810cd3e:	f7fd f9e5 	bl	810a10c <HAL_RCCEx_GetD3PCLK1Freq>
 810cd42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810cd44:	e03c      	b.n	810cdc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810cd46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810cd4a:	4618      	mov	r0, r3
 810cd4c:	f7fd f9f4 	bl	810a138 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810cd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cd54:	e034      	b.n	810cdc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810cd56:	f107 0318 	add.w	r3, r7, #24
 810cd5a:	4618      	mov	r0, r3
 810cd5c:	f7fd fb40 	bl	810a3e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810cd60:	69fb      	ldr	r3, [r7, #28]
 810cd62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cd64:	e02c      	b.n	810cdc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810cd66:	4b09      	ldr	r3, [pc, #36]	; (810cd8c <UART_SetConfig+0x69c>)
 810cd68:	681b      	ldr	r3, [r3, #0]
 810cd6a:	f003 0320 	and.w	r3, r3, #32
 810cd6e:	2b00      	cmp	r3, #0
 810cd70:	d016      	beq.n	810cda0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810cd72:	4b06      	ldr	r3, [pc, #24]	; (810cd8c <UART_SetConfig+0x69c>)
 810cd74:	681b      	ldr	r3, [r3, #0]
 810cd76:	08db      	lsrs	r3, r3, #3
 810cd78:	f003 0303 	and.w	r3, r3, #3
 810cd7c:	4a07      	ldr	r2, [pc, #28]	; (810cd9c <UART_SetConfig+0x6ac>)
 810cd7e:	fa22 f303 	lsr.w	r3, r2, r3
 810cd82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810cd84:	e01c      	b.n	810cdc0 <UART_SetConfig+0x6d0>
 810cd86:	bf00      	nop
 810cd88:	40011400 	.word	0x40011400
 810cd8c:	58024400 	.word	0x58024400
 810cd90:	40007800 	.word	0x40007800
 810cd94:	40007c00 	.word	0x40007c00
 810cd98:	58000c00 	.word	0x58000c00
 810cd9c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810cda0:	4b9e      	ldr	r3, [pc, #632]	; (810d01c <UART_SetConfig+0x92c>)
 810cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cda4:	e00c      	b.n	810cdc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810cda6:	4b9e      	ldr	r3, [pc, #632]	; (810d020 <UART_SetConfig+0x930>)
 810cda8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cdaa:	e009      	b.n	810cdc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810cdac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cdb2:	e005      	b.n	810cdc0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810cdb4:	2300      	movs	r3, #0
 810cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810cdb8:	2301      	movs	r3, #1
 810cdba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810cdbe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810cdc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cdc2:	2b00      	cmp	r3, #0
 810cdc4:	f000 81e0 	beq.w	810d188 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810cdc8:	697b      	ldr	r3, [r7, #20]
 810cdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810cdcc:	4a95      	ldr	r2, [pc, #596]	; (810d024 <UART_SetConfig+0x934>)
 810cdce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810cdd2:	461a      	mov	r2, r3
 810cdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cdd6:	fbb3 f3f2 	udiv	r3, r3, r2
 810cdda:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810cddc:	697b      	ldr	r3, [r7, #20]
 810cdde:	685a      	ldr	r2, [r3, #4]
 810cde0:	4613      	mov	r3, r2
 810cde2:	005b      	lsls	r3, r3, #1
 810cde4:	4413      	add	r3, r2
 810cde6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810cde8:	429a      	cmp	r2, r3
 810cdea:	d305      	bcc.n	810cdf8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810cdec:	697b      	ldr	r3, [r7, #20]
 810cdee:	685b      	ldr	r3, [r3, #4]
 810cdf0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810cdf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810cdf4:	429a      	cmp	r2, r3
 810cdf6:	d903      	bls.n	810ce00 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810cdf8:	2301      	movs	r3, #1
 810cdfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810cdfe:	e1c3      	b.n	810d188 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ce00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810ce02:	2200      	movs	r2, #0
 810ce04:	60bb      	str	r3, [r7, #8]
 810ce06:	60fa      	str	r2, [r7, #12]
 810ce08:	697b      	ldr	r3, [r7, #20]
 810ce0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810ce0c:	4a85      	ldr	r2, [pc, #532]	; (810d024 <UART_SetConfig+0x934>)
 810ce0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ce12:	b29b      	uxth	r3, r3
 810ce14:	2200      	movs	r2, #0
 810ce16:	603b      	str	r3, [r7, #0]
 810ce18:	607a      	str	r2, [r7, #4]
 810ce1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810ce1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810ce22:	f7f4 f873 	bl	8100f0c <__aeabi_uldivmod>
 810ce26:	4602      	mov	r2, r0
 810ce28:	460b      	mov	r3, r1
 810ce2a:	4610      	mov	r0, r2
 810ce2c:	4619      	mov	r1, r3
 810ce2e:	f04f 0200 	mov.w	r2, #0
 810ce32:	f04f 0300 	mov.w	r3, #0
 810ce36:	020b      	lsls	r3, r1, #8
 810ce38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810ce3c:	0202      	lsls	r2, r0, #8
 810ce3e:	6979      	ldr	r1, [r7, #20]
 810ce40:	6849      	ldr	r1, [r1, #4]
 810ce42:	0849      	lsrs	r1, r1, #1
 810ce44:	2000      	movs	r0, #0
 810ce46:	460c      	mov	r4, r1
 810ce48:	4605      	mov	r5, r0
 810ce4a:	eb12 0804 	adds.w	r8, r2, r4
 810ce4e:	eb43 0905 	adc.w	r9, r3, r5
 810ce52:	697b      	ldr	r3, [r7, #20]
 810ce54:	685b      	ldr	r3, [r3, #4]
 810ce56:	2200      	movs	r2, #0
 810ce58:	469a      	mov	sl, r3
 810ce5a:	4693      	mov	fp, r2
 810ce5c:	4652      	mov	r2, sl
 810ce5e:	465b      	mov	r3, fp
 810ce60:	4640      	mov	r0, r8
 810ce62:	4649      	mov	r1, r9
 810ce64:	f7f4 f852 	bl	8100f0c <__aeabi_uldivmod>
 810ce68:	4602      	mov	r2, r0
 810ce6a:	460b      	mov	r3, r1
 810ce6c:	4613      	mov	r3, r2
 810ce6e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810ce70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ce72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810ce76:	d308      	bcc.n	810ce8a <UART_SetConfig+0x79a>
 810ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ce7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ce7e:	d204      	bcs.n	810ce8a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810ce80:	697b      	ldr	r3, [r7, #20]
 810ce82:	681b      	ldr	r3, [r3, #0]
 810ce84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810ce86:	60da      	str	r2, [r3, #12]
 810ce88:	e17e      	b.n	810d188 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 810ce8a:	2301      	movs	r3, #1
 810ce8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810ce90:	e17a      	b.n	810d188 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810ce92:	697b      	ldr	r3, [r7, #20]
 810ce94:	69db      	ldr	r3, [r3, #28]
 810ce96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810ce9a:	f040 80c7 	bne.w	810d02c <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 810ce9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810cea2:	2b20      	cmp	r3, #32
 810cea4:	dc48      	bgt.n	810cf38 <UART_SetConfig+0x848>
 810cea6:	2b00      	cmp	r3, #0
 810cea8:	db7b      	blt.n	810cfa2 <UART_SetConfig+0x8b2>
 810ceaa:	2b20      	cmp	r3, #32
 810ceac:	d879      	bhi.n	810cfa2 <UART_SetConfig+0x8b2>
 810ceae:	a201      	add	r2, pc, #4	; (adr r2, 810ceb4 <UART_SetConfig+0x7c4>)
 810ceb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ceb4:	0810cf3f 	.word	0x0810cf3f
 810ceb8:	0810cf47 	.word	0x0810cf47
 810cebc:	0810cfa3 	.word	0x0810cfa3
 810cec0:	0810cfa3 	.word	0x0810cfa3
 810cec4:	0810cf4f 	.word	0x0810cf4f
 810cec8:	0810cfa3 	.word	0x0810cfa3
 810cecc:	0810cfa3 	.word	0x0810cfa3
 810ced0:	0810cfa3 	.word	0x0810cfa3
 810ced4:	0810cf5f 	.word	0x0810cf5f
 810ced8:	0810cfa3 	.word	0x0810cfa3
 810cedc:	0810cfa3 	.word	0x0810cfa3
 810cee0:	0810cfa3 	.word	0x0810cfa3
 810cee4:	0810cfa3 	.word	0x0810cfa3
 810cee8:	0810cfa3 	.word	0x0810cfa3
 810ceec:	0810cfa3 	.word	0x0810cfa3
 810cef0:	0810cfa3 	.word	0x0810cfa3
 810cef4:	0810cf6f 	.word	0x0810cf6f
 810cef8:	0810cfa3 	.word	0x0810cfa3
 810cefc:	0810cfa3 	.word	0x0810cfa3
 810cf00:	0810cfa3 	.word	0x0810cfa3
 810cf04:	0810cfa3 	.word	0x0810cfa3
 810cf08:	0810cfa3 	.word	0x0810cfa3
 810cf0c:	0810cfa3 	.word	0x0810cfa3
 810cf10:	0810cfa3 	.word	0x0810cfa3
 810cf14:	0810cfa3 	.word	0x0810cfa3
 810cf18:	0810cfa3 	.word	0x0810cfa3
 810cf1c:	0810cfa3 	.word	0x0810cfa3
 810cf20:	0810cfa3 	.word	0x0810cfa3
 810cf24:	0810cfa3 	.word	0x0810cfa3
 810cf28:	0810cfa3 	.word	0x0810cfa3
 810cf2c:	0810cfa3 	.word	0x0810cfa3
 810cf30:	0810cfa3 	.word	0x0810cfa3
 810cf34:	0810cf95 	.word	0x0810cf95
 810cf38:	2b40      	cmp	r3, #64	; 0x40
 810cf3a:	d02e      	beq.n	810cf9a <UART_SetConfig+0x8aa>
 810cf3c:	e031      	b.n	810cfa2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810cf3e:	f7fc f973 	bl	8109228 <HAL_RCC_GetPCLK1Freq>
 810cf42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810cf44:	e033      	b.n	810cfae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810cf46:	f7fc f985 	bl	8109254 <HAL_RCC_GetPCLK2Freq>
 810cf4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810cf4c:	e02f      	b.n	810cfae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810cf4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810cf52:	4618      	mov	r0, r3
 810cf54:	f7fd f8f0 	bl	810a138 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810cf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cf5c:	e027      	b.n	810cfae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810cf5e:	f107 0318 	add.w	r3, r7, #24
 810cf62:	4618      	mov	r0, r3
 810cf64:	f7fd fa3c 	bl	810a3e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810cf68:	69fb      	ldr	r3, [r7, #28]
 810cf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cf6c:	e01f      	b.n	810cfae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810cf6e:	4b2e      	ldr	r3, [pc, #184]	; (810d028 <UART_SetConfig+0x938>)
 810cf70:	681b      	ldr	r3, [r3, #0]
 810cf72:	f003 0320 	and.w	r3, r3, #32
 810cf76:	2b00      	cmp	r3, #0
 810cf78:	d009      	beq.n	810cf8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810cf7a:	4b2b      	ldr	r3, [pc, #172]	; (810d028 <UART_SetConfig+0x938>)
 810cf7c:	681b      	ldr	r3, [r3, #0]
 810cf7e:	08db      	lsrs	r3, r3, #3
 810cf80:	f003 0303 	and.w	r3, r3, #3
 810cf84:	4a25      	ldr	r2, [pc, #148]	; (810d01c <UART_SetConfig+0x92c>)
 810cf86:	fa22 f303 	lsr.w	r3, r2, r3
 810cf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810cf8c:	e00f      	b.n	810cfae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810cf8e:	4b23      	ldr	r3, [pc, #140]	; (810d01c <UART_SetConfig+0x92c>)
 810cf90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cf92:	e00c      	b.n	810cfae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810cf94:	4b22      	ldr	r3, [pc, #136]	; (810d020 <UART_SetConfig+0x930>)
 810cf96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cf98:	e009      	b.n	810cfae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810cf9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cfa0:	e005      	b.n	810cfae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810cfa2:	2300      	movs	r3, #0
 810cfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810cfa6:	2301      	movs	r3, #1
 810cfa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810cfac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810cfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cfb0:	2b00      	cmp	r3, #0
 810cfb2:	f000 80e9 	beq.w	810d188 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810cfb6:	697b      	ldr	r3, [r7, #20]
 810cfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810cfba:	4a1a      	ldr	r2, [pc, #104]	; (810d024 <UART_SetConfig+0x934>)
 810cfbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810cfc0:	461a      	mov	r2, r3
 810cfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cfc4:	fbb3 f3f2 	udiv	r3, r3, r2
 810cfc8:	005a      	lsls	r2, r3, #1
 810cfca:	697b      	ldr	r3, [r7, #20]
 810cfcc:	685b      	ldr	r3, [r3, #4]
 810cfce:	085b      	lsrs	r3, r3, #1
 810cfd0:	441a      	add	r2, r3
 810cfd2:	697b      	ldr	r3, [r7, #20]
 810cfd4:	685b      	ldr	r3, [r3, #4]
 810cfd6:	fbb2 f3f3 	udiv	r3, r2, r3
 810cfda:	b29b      	uxth	r3, r3
 810cfdc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810cfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810cfe0:	2b0f      	cmp	r3, #15
 810cfe2:	d916      	bls.n	810d012 <UART_SetConfig+0x922>
 810cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810cfe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810cfea:	d212      	bcs.n	810d012 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810cfee:	b29b      	uxth	r3, r3
 810cff0:	f023 030f 	bic.w	r3, r3, #15
 810cff4:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810cff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810cff8:	085b      	lsrs	r3, r3, #1
 810cffa:	b29b      	uxth	r3, r3
 810cffc:	f003 0307 	and.w	r3, r3, #7
 810d000:	b29a      	uxth	r2, r3
 810d002:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810d004:	4313      	orrs	r3, r2
 810d006:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810d008:	697b      	ldr	r3, [r7, #20]
 810d00a:	681b      	ldr	r3, [r3, #0]
 810d00c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810d00e:	60da      	str	r2, [r3, #12]
 810d010:	e0ba      	b.n	810d188 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 810d012:	2301      	movs	r3, #1
 810d014:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810d018:	e0b6      	b.n	810d188 <UART_SetConfig+0xa98>
 810d01a:	bf00      	nop
 810d01c:	03d09000 	.word	0x03d09000
 810d020:	003d0900 	.word	0x003d0900
 810d024:	0810e9c4 	.word	0x0810e9c4
 810d028:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810d02c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810d030:	2b20      	cmp	r3, #32
 810d032:	dc49      	bgt.n	810d0c8 <UART_SetConfig+0x9d8>
 810d034:	2b00      	cmp	r3, #0
 810d036:	db7c      	blt.n	810d132 <UART_SetConfig+0xa42>
 810d038:	2b20      	cmp	r3, #32
 810d03a:	d87a      	bhi.n	810d132 <UART_SetConfig+0xa42>
 810d03c:	a201      	add	r2, pc, #4	; (adr r2, 810d044 <UART_SetConfig+0x954>)
 810d03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d042:	bf00      	nop
 810d044:	0810d0cf 	.word	0x0810d0cf
 810d048:	0810d0d7 	.word	0x0810d0d7
 810d04c:	0810d133 	.word	0x0810d133
 810d050:	0810d133 	.word	0x0810d133
 810d054:	0810d0df 	.word	0x0810d0df
 810d058:	0810d133 	.word	0x0810d133
 810d05c:	0810d133 	.word	0x0810d133
 810d060:	0810d133 	.word	0x0810d133
 810d064:	0810d0ef 	.word	0x0810d0ef
 810d068:	0810d133 	.word	0x0810d133
 810d06c:	0810d133 	.word	0x0810d133
 810d070:	0810d133 	.word	0x0810d133
 810d074:	0810d133 	.word	0x0810d133
 810d078:	0810d133 	.word	0x0810d133
 810d07c:	0810d133 	.word	0x0810d133
 810d080:	0810d133 	.word	0x0810d133
 810d084:	0810d0ff 	.word	0x0810d0ff
 810d088:	0810d133 	.word	0x0810d133
 810d08c:	0810d133 	.word	0x0810d133
 810d090:	0810d133 	.word	0x0810d133
 810d094:	0810d133 	.word	0x0810d133
 810d098:	0810d133 	.word	0x0810d133
 810d09c:	0810d133 	.word	0x0810d133
 810d0a0:	0810d133 	.word	0x0810d133
 810d0a4:	0810d133 	.word	0x0810d133
 810d0a8:	0810d133 	.word	0x0810d133
 810d0ac:	0810d133 	.word	0x0810d133
 810d0b0:	0810d133 	.word	0x0810d133
 810d0b4:	0810d133 	.word	0x0810d133
 810d0b8:	0810d133 	.word	0x0810d133
 810d0bc:	0810d133 	.word	0x0810d133
 810d0c0:	0810d133 	.word	0x0810d133
 810d0c4:	0810d125 	.word	0x0810d125
 810d0c8:	2b40      	cmp	r3, #64	; 0x40
 810d0ca:	d02e      	beq.n	810d12a <UART_SetConfig+0xa3a>
 810d0cc:	e031      	b.n	810d132 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810d0ce:	f7fc f8ab 	bl	8109228 <HAL_RCC_GetPCLK1Freq>
 810d0d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810d0d4:	e033      	b.n	810d13e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810d0d6:	f7fc f8bd 	bl	8109254 <HAL_RCC_GetPCLK2Freq>
 810d0da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810d0dc:	e02f      	b.n	810d13e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810d0e2:	4618      	mov	r0, r3
 810d0e4:	f7fd f828 	bl	810a138 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d0ec:	e027      	b.n	810d13e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d0ee:	f107 0318 	add.w	r3, r7, #24
 810d0f2:	4618      	mov	r0, r3
 810d0f4:	f7fd f974 	bl	810a3e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d0f8:	69fb      	ldr	r3, [r7, #28]
 810d0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d0fc:	e01f      	b.n	810d13e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d0fe:	4b2d      	ldr	r3, [pc, #180]	; (810d1b4 <UART_SetConfig+0xac4>)
 810d100:	681b      	ldr	r3, [r3, #0]
 810d102:	f003 0320 	and.w	r3, r3, #32
 810d106:	2b00      	cmp	r3, #0
 810d108:	d009      	beq.n	810d11e <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d10a:	4b2a      	ldr	r3, [pc, #168]	; (810d1b4 <UART_SetConfig+0xac4>)
 810d10c:	681b      	ldr	r3, [r3, #0]
 810d10e:	08db      	lsrs	r3, r3, #3
 810d110:	f003 0303 	and.w	r3, r3, #3
 810d114:	4a28      	ldr	r2, [pc, #160]	; (810d1b8 <UART_SetConfig+0xac8>)
 810d116:	fa22 f303 	lsr.w	r3, r2, r3
 810d11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d11c:	e00f      	b.n	810d13e <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 810d11e:	4b26      	ldr	r3, [pc, #152]	; (810d1b8 <UART_SetConfig+0xac8>)
 810d120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d122:	e00c      	b.n	810d13e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d124:	4b25      	ldr	r3, [pc, #148]	; (810d1bc <UART_SetConfig+0xacc>)
 810d126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d128:	e009      	b.n	810d13e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d12a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810d12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d130:	e005      	b.n	810d13e <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 810d132:	2300      	movs	r3, #0
 810d134:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810d136:	2301      	movs	r3, #1
 810d138:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810d13c:	bf00      	nop
    }

    if (pclk != 0U)
 810d13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d140:	2b00      	cmp	r3, #0
 810d142:	d021      	beq.n	810d188 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d144:	697b      	ldr	r3, [r7, #20]
 810d146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d148:	4a1d      	ldr	r2, [pc, #116]	; (810d1c0 <UART_SetConfig+0xad0>)
 810d14a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d14e:	461a      	mov	r2, r3
 810d150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d152:	fbb3 f2f2 	udiv	r2, r3, r2
 810d156:	697b      	ldr	r3, [r7, #20]
 810d158:	685b      	ldr	r3, [r3, #4]
 810d15a:	085b      	lsrs	r3, r3, #1
 810d15c:	441a      	add	r2, r3
 810d15e:	697b      	ldr	r3, [r7, #20]
 810d160:	685b      	ldr	r3, [r3, #4]
 810d162:	fbb2 f3f3 	udiv	r3, r2, r3
 810d166:	b29b      	uxth	r3, r3
 810d168:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810d16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d16c:	2b0f      	cmp	r3, #15
 810d16e:	d908      	bls.n	810d182 <UART_SetConfig+0xa92>
 810d170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810d176:	d204      	bcs.n	810d182 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 810d178:	697b      	ldr	r3, [r7, #20]
 810d17a:	681b      	ldr	r3, [r3, #0]
 810d17c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810d17e:	60da      	str	r2, [r3, #12]
 810d180:	e002      	b.n	810d188 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 810d182:	2301      	movs	r3, #1
 810d184:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810d188:	697b      	ldr	r3, [r7, #20]
 810d18a:	2201      	movs	r2, #1
 810d18c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810d190:	697b      	ldr	r3, [r7, #20]
 810d192:	2201      	movs	r2, #1
 810d194:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810d198:	697b      	ldr	r3, [r7, #20]
 810d19a:	2200      	movs	r2, #0
 810d19c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810d19e:	697b      	ldr	r3, [r7, #20]
 810d1a0:	2200      	movs	r2, #0
 810d1a2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810d1a4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810d1a8:	4618      	mov	r0, r3
 810d1aa:	3748      	adds	r7, #72	; 0x48
 810d1ac:	46bd      	mov	sp, r7
 810d1ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810d1b2:	bf00      	nop
 810d1b4:	58024400 	.word	0x58024400
 810d1b8:	03d09000 	.word	0x03d09000
 810d1bc:	003d0900 	.word	0x003d0900
 810d1c0:	0810e9c4 	.word	0x0810e9c4

0810d1c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810d1c4:	b480      	push	{r7}
 810d1c6:	b083      	sub	sp, #12
 810d1c8:	af00      	add	r7, sp, #0
 810d1ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810d1cc:	687b      	ldr	r3, [r7, #4]
 810d1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d1d0:	f003 0301 	and.w	r3, r3, #1
 810d1d4:	2b00      	cmp	r3, #0
 810d1d6:	d00a      	beq.n	810d1ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810d1d8:	687b      	ldr	r3, [r7, #4]
 810d1da:	681b      	ldr	r3, [r3, #0]
 810d1dc:	685b      	ldr	r3, [r3, #4]
 810d1de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810d1e2:	687b      	ldr	r3, [r7, #4]
 810d1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810d1e6:	687b      	ldr	r3, [r7, #4]
 810d1e8:	681b      	ldr	r3, [r3, #0]
 810d1ea:	430a      	orrs	r2, r1
 810d1ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810d1ee:	687b      	ldr	r3, [r7, #4]
 810d1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d1f2:	f003 0302 	and.w	r3, r3, #2
 810d1f6:	2b00      	cmp	r3, #0
 810d1f8:	d00a      	beq.n	810d210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810d1fa:	687b      	ldr	r3, [r7, #4]
 810d1fc:	681b      	ldr	r3, [r3, #0]
 810d1fe:	685b      	ldr	r3, [r3, #4]
 810d200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810d204:	687b      	ldr	r3, [r7, #4]
 810d206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810d208:	687b      	ldr	r3, [r7, #4]
 810d20a:	681b      	ldr	r3, [r3, #0]
 810d20c:	430a      	orrs	r2, r1
 810d20e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810d210:	687b      	ldr	r3, [r7, #4]
 810d212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d214:	f003 0304 	and.w	r3, r3, #4
 810d218:	2b00      	cmp	r3, #0
 810d21a:	d00a      	beq.n	810d232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810d21c:	687b      	ldr	r3, [r7, #4]
 810d21e:	681b      	ldr	r3, [r3, #0]
 810d220:	685b      	ldr	r3, [r3, #4]
 810d222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810d226:	687b      	ldr	r3, [r7, #4]
 810d228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810d22a:	687b      	ldr	r3, [r7, #4]
 810d22c:	681b      	ldr	r3, [r3, #0]
 810d22e:	430a      	orrs	r2, r1
 810d230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810d232:	687b      	ldr	r3, [r7, #4]
 810d234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d236:	f003 0308 	and.w	r3, r3, #8
 810d23a:	2b00      	cmp	r3, #0
 810d23c:	d00a      	beq.n	810d254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810d23e:	687b      	ldr	r3, [r7, #4]
 810d240:	681b      	ldr	r3, [r3, #0]
 810d242:	685b      	ldr	r3, [r3, #4]
 810d244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810d248:	687b      	ldr	r3, [r7, #4]
 810d24a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d24c:	687b      	ldr	r3, [r7, #4]
 810d24e:	681b      	ldr	r3, [r3, #0]
 810d250:	430a      	orrs	r2, r1
 810d252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810d254:	687b      	ldr	r3, [r7, #4]
 810d256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d258:	f003 0310 	and.w	r3, r3, #16
 810d25c:	2b00      	cmp	r3, #0
 810d25e:	d00a      	beq.n	810d276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810d260:	687b      	ldr	r3, [r7, #4]
 810d262:	681b      	ldr	r3, [r3, #0]
 810d264:	689b      	ldr	r3, [r3, #8]
 810d266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810d26a:	687b      	ldr	r3, [r7, #4]
 810d26c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810d26e:	687b      	ldr	r3, [r7, #4]
 810d270:	681b      	ldr	r3, [r3, #0]
 810d272:	430a      	orrs	r2, r1
 810d274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810d276:	687b      	ldr	r3, [r7, #4]
 810d278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d27a:	f003 0320 	and.w	r3, r3, #32
 810d27e:	2b00      	cmp	r3, #0
 810d280:	d00a      	beq.n	810d298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810d282:	687b      	ldr	r3, [r7, #4]
 810d284:	681b      	ldr	r3, [r3, #0]
 810d286:	689b      	ldr	r3, [r3, #8]
 810d288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810d28c:	687b      	ldr	r3, [r7, #4]
 810d28e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810d290:	687b      	ldr	r3, [r7, #4]
 810d292:	681b      	ldr	r3, [r3, #0]
 810d294:	430a      	orrs	r2, r1
 810d296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810d298:	687b      	ldr	r3, [r7, #4]
 810d29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d2a0:	2b00      	cmp	r3, #0
 810d2a2:	d01a      	beq.n	810d2da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810d2a4:	687b      	ldr	r3, [r7, #4]
 810d2a6:	681b      	ldr	r3, [r3, #0]
 810d2a8:	685b      	ldr	r3, [r3, #4]
 810d2aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810d2ae:	687b      	ldr	r3, [r7, #4]
 810d2b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810d2b2:	687b      	ldr	r3, [r7, #4]
 810d2b4:	681b      	ldr	r3, [r3, #0]
 810d2b6:	430a      	orrs	r2, r1
 810d2b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810d2ba:	687b      	ldr	r3, [r7, #4]
 810d2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810d2be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d2c2:	d10a      	bne.n	810d2da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810d2c4:	687b      	ldr	r3, [r7, #4]
 810d2c6:	681b      	ldr	r3, [r3, #0]
 810d2c8:	685b      	ldr	r3, [r3, #4]
 810d2ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810d2ce:	687b      	ldr	r3, [r7, #4]
 810d2d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810d2d2:	687b      	ldr	r3, [r7, #4]
 810d2d4:	681b      	ldr	r3, [r3, #0]
 810d2d6:	430a      	orrs	r2, r1
 810d2d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810d2da:	687b      	ldr	r3, [r7, #4]
 810d2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d2e2:	2b00      	cmp	r3, #0
 810d2e4:	d00a      	beq.n	810d2fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810d2e6:	687b      	ldr	r3, [r7, #4]
 810d2e8:	681b      	ldr	r3, [r3, #0]
 810d2ea:	685b      	ldr	r3, [r3, #4]
 810d2ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810d2f0:	687b      	ldr	r3, [r7, #4]
 810d2f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810d2f4:	687b      	ldr	r3, [r7, #4]
 810d2f6:	681b      	ldr	r3, [r3, #0]
 810d2f8:	430a      	orrs	r2, r1
 810d2fa:	605a      	str	r2, [r3, #4]
  }
}
 810d2fc:	bf00      	nop
 810d2fe:	370c      	adds	r7, #12
 810d300:	46bd      	mov	sp, r7
 810d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d306:	4770      	bx	lr

0810d308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810d308:	b580      	push	{r7, lr}
 810d30a:	b086      	sub	sp, #24
 810d30c:	af02      	add	r7, sp, #8
 810d30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d310:	687b      	ldr	r3, [r7, #4]
 810d312:	2200      	movs	r2, #0
 810d314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810d318:	f7f5 fdda 	bl	8102ed0 <HAL_GetTick>
 810d31c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810d31e:	687b      	ldr	r3, [r7, #4]
 810d320:	681b      	ldr	r3, [r3, #0]
 810d322:	681b      	ldr	r3, [r3, #0]
 810d324:	f003 0308 	and.w	r3, r3, #8
 810d328:	2b08      	cmp	r3, #8
 810d32a:	d10e      	bne.n	810d34a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810d32c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810d330:	9300      	str	r3, [sp, #0]
 810d332:	68fb      	ldr	r3, [r7, #12]
 810d334:	2200      	movs	r2, #0
 810d336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810d33a:	6878      	ldr	r0, [r7, #4]
 810d33c:	f000 f82f 	bl	810d39e <UART_WaitOnFlagUntilTimeout>
 810d340:	4603      	mov	r3, r0
 810d342:	2b00      	cmp	r3, #0
 810d344:	d001      	beq.n	810d34a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810d346:	2303      	movs	r3, #3
 810d348:	e025      	b.n	810d396 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810d34a:	687b      	ldr	r3, [r7, #4]
 810d34c:	681b      	ldr	r3, [r3, #0]
 810d34e:	681b      	ldr	r3, [r3, #0]
 810d350:	f003 0304 	and.w	r3, r3, #4
 810d354:	2b04      	cmp	r3, #4
 810d356:	d10e      	bne.n	810d376 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810d358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810d35c:	9300      	str	r3, [sp, #0]
 810d35e:	68fb      	ldr	r3, [r7, #12]
 810d360:	2200      	movs	r2, #0
 810d362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810d366:	6878      	ldr	r0, [r7, #4]
 810d368:	f000 f819 	bl	810d39e <UART_WaitOnFlagUntilTimeout>
 810d36c:	4603      	mov	r3, r0
 810d36e:	2b00      	cmp	r3, #0
 810d370:	d001      	beq.n	810d376 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810d372:	2303      	movs	r3, #3
 810d374:	e00f      	b.n	810d396 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810d376:	687b      	ldr	r3, [r7, #4]
 810d378:	2220      	movs	r2, #32
 810d37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810d37e:	687b      	ldr	r3, [r7, #4]
 810d380:	2220      	movs	r2, #32
 810d382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d386:	687b      	ldr	r3, [r7, #4]
 810d388:	2200      	movs	r2, #0
 810d38a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810d38c:	687b      	ldr	r3, [r7, #4]
 810d38e:	2200      	movs	r2, #0
 810d390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d394:	2300      	movs	r3, #0
}
 810d396:	4618      	mov	r0, r3
 810d398:	3710      	adds	r7, #16
 810d39a:	46bd      	mov	sp, r7
 810d39c:	bd80      	pop	{r7, pc}

0810d39e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810d39e:	b580      	push	{r7, lr}
 810d3a0:	b084      	sub	sp, #16
 810d3a2:	af00      	add	r7, sp, #0
 810d3a4:	60f8      	str	r0, [r7, #12]
 810d3a6:	60b9      	str	r1, [r7, #8]
 810d3a8:	603b      	str	r3, [r7, #0]
 810d3aa:	4613      	mov	r3, r2
 810d3ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810d3ae:	e062      	b.n	810d476 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810d3b0:	69bb      	ldr	r3, [r7, #24]
 810d3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d3b6:	d05e      	beq.n	810d476 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810d3b8:	f7f5 fd8a 	bl	8102ed0 <HAL_GetTick>
 810d3bc:	4602      	mov	r2, r0
 810d3be:	683b      	ldr	r3, [r7, #0]
 810d3c0:	1ad3      	subs	r3, r2, r3
 810d3c2:	69ba      	ldr	r2, [r7, #24]
 810d3c4:	429a      	cmp	r2, r3
 810d3c6:	d302      	bcc.n	810d3ce <UART_WaitOnFlagUntilTimeout+0x30>
 810d3c8:	69bb      	ldr	r3, [r7, #24]
 810d3ca:	2b00      	cmp	r3, #0
 810d3cc:	d11d      	bne.n	810d40a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810d3ce:	68fb      	ldr	r3, [r7, #12]
 810d3d0:	681b      	ldr	r3, [r3, #0]
 810d3d2:	681a      	ldr	r2, [r3, #0]
 810d3d4:	68fb      	ldr	r3, [r7, #12]
 810d3d6:	681b      	ldr	r3, [r3, #0]
 810d3d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810d3dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d3de:	68fb      	ldr	r3, [r7, #12]
 810d3e0:	681b      	ldr	r3, [r3, #0]
 810d3e2:	689a      	ldr	r2, [r3, #8]
 810d3e4:	68fb      	ldr	r3, [r7, #12]
 810d3e6:	681b      	ldr	r3, [r3, #0]
 810d3e8:	f022 0201 	bic.w	r2, r2, #1
 810d3ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810d3ee:	68fb      	ldr	r3, [r7, #12]
 810d3f0:	2220      	movs	r2, #32
 810d3f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810d3f6:	68fb      	ldr	r3, [r7, #12]
 810d3f8:	2220      	movs	r2, #32
 810d3fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810d3fe:	68fb      	ldr	r3, [r7, #12]
 810d400:	2200      	movs	r2, #0
 810d402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810d406:	2303      	movs	r3, #3
 810d408:	e045      	b.n	810d496 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810d40a:	68fb      	ldr	r3, [r7, #12]
 810d40c:	681b      	ldr	r3, [r3, #0]
 810d40e:	681b      	ldr	r3, [r3, #0]
 810d410:	f003 0304 	and.w	r3, r3, #4
 810d414:	2b00      	cmp	r3, #0
 810d416:	d02e      	beq.n	810d476 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810d418:	68fb      	ldr	r3, [r7, #12]
 810d41a:	681b      	ldr	r3, [r3, #0]
 810d41c:	69db      	ldr	r3, [r3, #28]
 810d41e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810d422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810d426:	d126      	bne.n	810d476 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810d428:	68fb      	ldr	r3, [r7, #12]
 810d42a:	681b      	ldr	r3, [r3, #0]
 810d42c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810d430:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810d432:	68fb      	ldr	r3, [r7, #12]
 810d434:	681b      	ldr	r3, [r3, #0]
 810d436:	681a      	ldr	r2, [r3, #0]
 810d438:	68fb      	ldr	r3, [r7, #12]
 810d43a:	681b      	ldr	r3, [r3, #0]
 810d43c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810d440:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d442:	68fb      	ldr	r3, [r7, #12]
 810d444:	681b      	ldr	r3, [r3, #0]
 810d446:	689a      	ldr	r2, [r3, #8]
 810d448:	68fb      	ldr	r3, [r7, #12]
 810d44a:	681b      	ldr	r3, [r3, #0]
 810d44c:	f022 0201 	bic.w	r2, r2, #1
 810d450:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810d452:	68fb      	ldr	r3, [r7, #12]
 810d454:	2220      	movs	r2, #32
 810d456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810d45a:	68fb      	ldr	r3, [r7, #12]
 810d45c:	2220      	movs	r2, #32
 810d45e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810d462:	68fb      	ldr	r3, [r7, #12]
 810d464:	2220      	movs	r2, #32
 810d466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810d46a:	68fb      	ldr	r3, [r7, #12]
 810d46c:	2200      	movs	r2, #0
 810d46e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810d472:	2303      	movs	r3, #3
 810d474:	e00f      	b.n	810d496 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810d476:	68fb      	ldr	r3, [r7, #12]
 810d478:	681b      	ldr	r3, [r3, #0]
 810d47a:	69da      	ldr	r2, [r3, #28]
 810d47c:	68bb      	ldr	r3, [r7, #8]
 810d47e:	4013      	ands	r3, r2
 810d480:	68ba      	ldr	r2, [r7, #8]
 810d482:	429a      	cmp	r2, r3
 810d484:	bf0c      	ite	eq
 810d486:	2301      	moveq	r3, #1
 810d488:	2300      	movne	r3, #0
 810d48a:	b2db      	uxtb	r3, r3
 810d48c:	461a      	mov	r2, r3
 810d48e:	79fb      	ldrb	r3, [r7, #7]
 810d490:	429a      	cmp	r2, r3
 810d492:	d08d      	beq.n	810d3b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810d494:	2300      	movs	r3, #0
}
 810d496:	4618      	mov	r0, r3
 810d498:	3710      	adds	r7, #16
 810d49a:	46bd      	mov	sp, r7
 810d49c:	bd80      	pop	{r7, pc}
	...

0810d4a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810d4a0:	b580      	push	{r7, lr}
 810d4a2:	b084      	sub	sp, #16
 810d4a4:	af00      	add	r7, sp, #0
 810d4a6:	60f8      	str	r0, [r7, #12]
 810d4a8:	60b9      	str	r1, [r7, #8]
 810d4aa:	4613      	mov	r3, r2
 810d4ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810d4ae:	68fb      	ldr	r3, [r7, #12]
 810d4b0:	68ba      	ldr	r2, [r7, #8]
 810d4b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 810d4b4:	68fb      	ldr	r3, [r7, #12]
 810d4b6:	88fa      	ldrh	r2, [r7, #6]
 810d4b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d4bc:	68fb      	ldr	r3, [r7, #12]
 810d4be:	2200      	movs	r2, #0
 810d4c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810d4c4:	68fb      	ldr	r3, [r7, #12]
 810d4c6:	2222      	movs	r2, #34	; 0x22
 810d4c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 810d4cc:	68fb      	ldr	r3, [r7, #12]
 810d4ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4d0:	2b00      	cmp	r3, #0
 810d4d2:	d02c      	beq.n	810d52e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810d4d4:	68fb      	ldr	r3, [r7, #12]
 810d4d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4d8:	4a25      	ldr	r2, [pc, #148]	; (810d570 <UART_Start_Receive_DMA+0xd0>)
 810d4da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810d4dc:	68fb      	ldr	r3, [r7, #12]
 810d4de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4e0:	4a24      	ldr	r2, [pc, #144]	; (810d574 <UART_Start_Receive_DMA+0xd4>)
 810d4e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810d4e4:	68fb      	ldr	r3, [r7, #12]
 810d4e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4e8:	4a23      	ldr	r2, [pc, #140]	; (810d578 <UART_Start_Receive_DMA+0xd8>)
 810d4ea:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810d4ec:	68fb      	ldr	r3, [r7, #12]
 810d4ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4f0:	2200      	movs	r2, #0
 810d4f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810d4f4:	68fb      	ldr	r3, [r7, #12]
 810d4f6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810d4f8:	68fb      	ldr	r3, [r7, #12]
 810d4fa:	681b      	ldr	r3, [r3, #0]
 810d4fc:	3324      	adds	r3, #36	; 0x24
 810d4fe:	4619      	mov	r1, r3
 810d500:	68fb      	ldr	r3, [r7, #12]
 810d502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810d504:	461a      	mov	r2, r3
 810d506:	88fb      	ldrh	r3, [r7, #6]
 810d508:	f7f6 fc82 	bl	8103e10 <HAL_DMA_Start_IT>
 810d50c:	4603      	mov	r3, r0
 810d50e:	2b00      	cmp	r3, #0
 810d510:	d00d      	beq.n	810d52e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810d512:	68fb      	ldr	r3, [r7, #12]
 810d514:	2210      	movs	r2, #16
 810d516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810d51a:	68fb      	ldr	r3, [r7, #12]
 810d51c:	2200      	movs	r2, #0
 810d51e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 810d522:	68fb      	ldr	r3, [r7, #12]
 810d524:	2220      	movs	r2, #32
 810d526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 810d52a:	2301      	movs	r3, #1
 810d52c:	e01c      	b.n	810d568 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 810d52e:	68fb      	ldr	r3, [r7, #12]
 810d530:	2200      	movs	r2, #0
 810d532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810d536:	68fb      	ldr	r3, [r7, #12]
 810d538:	681b      	ldr	r3, [r3, #0]
 810d53a:	681a      	ldr	r2, [r3, #0]
 810d53c:	68fb      	ldr	r3, [r7, #12]
 810d53e:	681b      	ldr	r3, [r3, #0]
 810d540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810d544:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d546:	68fb      	ldr	r3, [r7, #12]
 810d548:	681b      	ldr	r3, [r3, #0]
 810d54a:	689a      	ldr	r2, [r3, #8]
 810d54c:	68fb      	ldr	r3, [r7, #12]
 810d54e:	681b      	ldr	r3, [r3, #0]
 810d550:	f042 0201 	orr.w	r2, r2, #1
 810d554:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810d556:	68fb      	ldr	r3, [r7, #12]
 810d558:	681b      	ldr	r3, [r3, #0]
 810d55a:	689a      	ldr	r2, [r3, #8]
 810d55c:	68fb      	ldr	r3, [r7, #12]
 810d55e:	681b      	ldr	r3, [r3, #0]
 810d560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810d564:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 810d566:	2300      	movs	r3, #0
}
 810d568:	4618      	mov	r0, r3
 810d56a:	3710      	adds	r7, #16
 810d56c:	46bd      	mov	sp, r7
 810d56e:	bd80      	pop	{r7, pc}
 810d570:	0810d689 	.word	0x0810d689
 810d574:	0810d71f 	.word	0x0810d71f
 810d578:	0810d757 	.word	0x0810d757

0810d57c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810d57c:	b480      	push	{r7}
 810d57e:	b083      	sub	sp, #12
 810d580:	af00      	add	r7, sp, #0
 810d582:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810d584:	687b      	ldr	r3, [r7, #4]
 810d586:	681b      	ldr	r3, [r3, #0]
 810d588:	681a      	ldr	r2, [r3, #0]
 810d58a:	687b      	ldr	r3, [r7, #4]
 810d58c:	681b      	ldr	r3, [r3, #0]
 810d58e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810d592:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810d594:	687b      	ldr	r3, [r7, #4]
 810d596:	681b      	ldr	r3, [r3, #0]
 810d598:	689a      	ldr	r2, [r3, #8]
 810d59a:	687b      	ldr	r3, [r7, #4]
 810d59c:	681b      	ldr	r3, [r3, #0]
 810d59e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810d5a2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810d5a4:	687b      	ldr	r3, [r7, #4]
 810d5a6:	2220      	movs	r2, #32
 810d5a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810d5ac:	bf00      	nop
 810d5ae:	370c      	adds	r7, #12
 810d5b0:	46bd      	mov	sp, r7
 810d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5b6:	4770      	bx	lr

0810d5b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810d5b8:	b480      	push	{r7}
 810d5ba:	b083      	sub	sp, #12
 810d5bc:	af00      	add	r7, sp, #0
 810d5be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810d5c0:	687b      	ldr	r3, [r7, #4]
 810d5c2:	681b      	ldr	r3, [r3, #0]
 810d5c4:	681a      	ldr	r2, [r3, #0]
 810d5c6:	687b      	ldr	r3, [r7, #4]
 810d5c8:	681b      	ldr	r3, [r3, #0]
 810d5ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810d5ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810d5d0:	687b      	ldr	r3, [r7, #4]
 810d5d2:	681b      	ldr	r3, [r3, #0]
 810d5d4:	689b      	ldr	r3, [r3, #8]
 810d5d6:	687a      	ldr	r2, [r7, #4]
 810d5d8:	6812      	ldr	r2, [r2, #0]
 810d5da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810d5de:	f023 0301 	bic.w	r3, r3, #1
 810d5e2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d5e4:	687b      	ldr	r3, [r7, #4]
 810d5e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d5e8:	2b01      	cmp	r3, #1
 810d5ea:	d107      	bne.n	810d5fc <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d5ec:	687b      	ldr	r3, [r7, #4]
 810d5ee:	681b      	ldr	r3, [r3, #0]
 810d5f0:	681a      	ldr	r2, [r3, #0]
 810d5f2:	687b      	ldr	r3, [r7, #4]
 810d5f4:	681b      	ldr	r3, [r3, #0]
 810d5f6:	f022 0210 	bic.w	r2, r2, #16
 810d5fa:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810d5fc:	687b      	ldr	r3, [r7, #4]
 810d5fe:	2220      	movs	r2, #32
 810d600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d604:	687b      	ldr	r3, [r7, #4]
 810d606:	2200      	movs	r2, #0
 810d608:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810d60a:	687b      	ldr	r3, [r7, #4]
 810d60c:	2200      	movs	r2, #0
 810d60e:	671a      	str	r2, [r3, #112]	; 0x70
}
 810d610:	bf00      	nop
 810d612:	370c      	adds	r7, #12
 810d614:	46bd      	mov	sp, r7
 810d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d61a:	4770      	bx	lr

0810d61c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810d61c:	b580      	push	{r7, lr}
 810d61e:	b084      	sub	sp, #16
 810d620:	af00      	add	r7, sp, #0
 810d622:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d624:	687b      	ldr	r3, [r7, #4]
 810d626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d628:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810d62a:	687b      	ldr	r3, [r7, #4]
 810d62c:	69db      	ldr	r3, [r3, #28]
 810d62e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d632:	d014      	beq.n	810d65e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810d634:	68fb      	ldr	r3, [r7, #12]
 810d636:	2200      	movs	r2, #0
 810d638:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810d63c:	68fb      	ldr	r3, [r7, #12]
 810d63e:	681b      	ldr	r3, [r3, #0]
 810d640:	689a      	ldr	r2, [r3, #8]
 810d642:	68fb      	ldr	r3, [r7, #12]
 810d644:	681b      	ldr	r3, [r3, #0]
 810d646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810d64a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810d64c:	68fb      	ldr	r3, [r7, #12]
 810d64e:	681b      	ldr	r3, [r3, #0]
 810d650:	681a      	ldr	r2, [r3, #0]
 810d652:	68fb      	ldr	r3, [r7, #12]
 810d654:	681b      	ldr	r3, [r3, #0]
 810d656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810d65a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810d65c:	e002      	b.n	810d664 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810d65e:	68f8      	ldr	r0, [r7, #12]
 810d660:	f7f5 fa42 	bl	8102ae8 <HAL_UART_TxCpltCallback>
}
 810d664:	bf00      	nop
 810d666:	3710      	adds	r7, #16
 810d668:	46bd      	mov	sp, r7
 810d66a:	bd80      	pop	{r7, pc}

0810d66c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810d66c:	b580      	push	{r7, lr}
 810d66e:	b084      	sub	sp, #16
 810d670:	af00      	add	r7, sp, #0
 810d672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d674:	687b      	ldr	r3, [r7, #4]
 810d676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d678:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810d67a:	68f8      	ldr	r0, [r7, #12]
 810d67c:	f7ff f80e 	bl	810c69c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d680:	bf00      	nop
 810d682:	3710      	adds	r7, #16
 810d684:	46bd      	mov	sp, r7
 810d686:	bd80      	pop	{r7, pc}

0810d688 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810d688:	b580      	push	{r7, lr}
 810d68a:	b084      	sub	sp, #16
 810d68c:	af00      	add	r7, sp, #0
 810d68e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d690:	687b      	ldr	r3, [r7, #4]
 810d692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d694:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810d696:	687b      	ldr	r3, [r7, #4]
 810d698:	69db      	ldr	r3, [r3, #28]
 810d69a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d69e:	d02b      	beq.n	810d6f8 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 810d6a0:	68fb      	ldr	r3, [r7, #12]
 810d6a2:	2200      	movs	r2, #0
 810d6a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810d6a8:	68fb      	ldr	r3, [r7, #12]
 810d6aa:	681b      	ldr	r3, [r3, #0]
 810d6ac:	681a      	ldr	r2, [r3, #0]
 810d6ae:	68fb      	ldr	r3, [r7, #12]
 810d6b0:	681b      	ldr	r3, [r3, #0]
 810d6b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810d6b6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d6b8:	68fb      	ldr	r3, [r7, #12]
 810d6ba:	681b      	ldr	r3, [r3, #0]
 810d6bc:	689a      	ldr	r2, [r3, #8]
 810d6be:	68fb      	ldr	r3, [r7, #12]
 810d6c0:	681b      	ldr	r3, [r3, #0]
 810d6c2:	f022 0201 	bic.w	r2, r2, #1
 810d6c6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810d6c8:	68fb      	ldr	r3, [r7, #12]
 810d6ca:	681b      	ldr	r3, [r3, #0]
 810d6cc:	689a      	ldr	r2, [r3, #8]
 810d6ce:	68fb      	ldr	r3, [r7, #12]
 810d6d0:	681b      	ldr	r3, [r3, #0]
 810d6d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810d6d6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810d6d8:	68fb      	ldr	r3, [r7, #12]
 810d6da:	2220      	movs	r2, #32
 810d6dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d6e0:	68fb      	ldr	r3, [r7, #12]
 810d6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d6e4:	2b01      	cmp	r3, #1
 810d6e6:	d107      	bne.n	810d6f8 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d6e8:	68fb      	ldr	r3, [r7, #12]
 810d6ea:	681b      	ldr	r3, [r3, #0]
 810d6ec:	681a      	ldr	r2, [r3, #0]
 810d6ee:	68fb      	ldr	r3, [r7, #12]
 810d6f0:	681b      	ldr	r3, [r3, #0]
 810d6f2:	f022 0210 	bic.w	r2, r2, #16
 810d6f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d6f8:	68fb      	ldr	r3, [r7, #12]
 810d6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d6fc:	2b01      	cmp	r3, #1
 810d6fe:	d107      	bne.n	810d710 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810d700:	68fb      	ldr	r3, [r7, #12]
 810d702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810d706:	4619      	mov	r1, r3
 810d708:	68f8      	ldr	r0, [r7, #12]
 810d70a:	f7fe ffe5 	bl	810c6d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810d70e:	e002      	b.n	810d716 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 810d710:	68f8      	ldr	r0, [r7, #12]
 810d712:	f7f5 f99b 	bl	8102a4c <HAL_UART_RxCpltCallback>
}
 810d716:	bf00      	nop
 810d718:	3710      	adds	r7, #16
 810d71a:	46bd      	mov	sp, r7
 810d71c:	bd80      	pop	{r7, pc}

0810d71e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810d71e:	b580      	push	{r7, lr}
 810d720:	b084      	sub	sp, #16
 810d722:	af00      	add	r7, sp, #0
 810d724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d726:	687b      	ldr	r3, [r7, #4]
 810d728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d72a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d72c:	68fb      	ldr	r3, [r7, #12]
 810d72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d730:	2b01      	cmp	r3, #1
 810d732:	d109      	bne.n	810d748 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810d734:	68fb      	ldr	r3, [r7, #12]
 810d736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810d73a:	085b      	lsrs	r3, r3, #1
 810d73c:	b29b      	uxth	r3, r3
 810d73e:	4619      	mov	r1, r3
 810d740:	68f8      	ldr	r0, [r7, #12]
 810d742:	f7fe ffc9 	bl	810c6d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810d746:	e002      	b.n	810d74e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 810d748:	68f8      	ldr	r0, [r7, #12]
 810d74a:	f7fe ffb1 	bl	810c6b0 <HAL_UART_RxHalfCpltCallback>
}
 810d74e:	bf00      	nop
 810d750:	3710      	adds	r7, #16
 810d752:	46bd      	mov	sp, r7
 810d754:	bd80      	pop	{r7, pc}

0810d756 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810d756:	b580      	push	{r7, lr}
 810d758:	b086      	sub	sp, #24
 810d75a:	af00      	add	r7, sp, #0
 810d75c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d75e:	687b      	ldr	r3, [r7, #4]
 810d760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d762:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810d764:	697b      	ldr	r3, [r7, #20]
 810d766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d76a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810d76c:	697b      	ldr	r3, [r7, #20]
 810d76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810d772:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810d774:	697b      	ldr	r3, [r7, #20]
 810d776:	681b      	ldr	r3, [r3, #0]
 810d778:	689b      	ldr	r3, [r3, #8]
 810d77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d77e:	2b80      	cmp	r3, #128	; 0x80
 810d780:	d109      	bne.n	810d796 <UART_DMAError+0x40>
 810d782:	693b      	ldr	r3, [r7, #16]
 810d784:	2b21      	cmp	r3, #33	; 0x21
 810d786:	d106      	bne.n	810d796 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810d788:	697b      	ldr	r3, [r7, #20]
 810d78a:	2200      	movs	r2, #0
 810d78c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810d790:	6978      	ldr	r0, [r7, #20]
 810d792:	f7ff fef3 	bl	810d57c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810d796:	697b      	ldr	r3, [r7, #20]
 810d798:	681b      	ldr	r3, [r3, #0]
 810d79a:	689b      	ldr	r3, [r3, #8]
 810d79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d7a0:	2b40      	cmp	r3, #64	; 0x40
 810d7a2:	d109      	bne.n	810d7b8 <UART_DMAError+0x62>
 810d7a4:	68fb      	ldr	r3, [r7, #12]
 810d7a6:	2b22      	cmp	r3, #34	; 0x22
 810d7a8:	d106      	bne.n	810d7b8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810d7aa:	697b      	ldr	r3, [r7, #20]
 810d7ac:	2200      	movs	r2, #0
 810d7ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810d7b2:	6978      	ldr	r0, [r7, #20]
 810d7b4:	f7ff ff00 	bl	810d5b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810d7b8:	697b      	ldr	r3, [r7, #20]
 810d7ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d7be:	f043 0210 	orr.w	r2, r3, #16
 810d7c2:	697b      	ldr	r3, [r7, #20]
 810d7c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810d7c8:	6978      	ldr	r0, [r7, #20]
 810d7ca:	f7fe ff7b 	bl	810c6c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d7ce:	bf00      	nop
 810d7d0:	3718      	adds	r7, #24
 810d7d2:	46bd      	mov	sp, r7
 810d7d4:	bd80      	pop	{r7, pc}

0810d7d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810d7d6:	b580      	push	{r7, lr}
 810d7d8:	b084      	sub	sp, #16
 810d7da:	af00      	add	r7, sp, #0
 810d7dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d7de:	687b      	ldr	r3, [r7, #4]
 810d7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d7e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810d7e4:	68fb      	ldr	r3, [r7, #12]
 810d7e6:	2200      	movs	r2, #0
 810d7e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810d7ec:	68fb      	ldr	r3, [r7, #12]
 810d7ee:	2200      	movs	r2, #0
 810d7f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810d7f4:	68f8      	ldr	r0, [r7, #12]
 810d7f6:	f7fe ff65 	bl	810c6c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d7fa:	bf00      	nop
 810d7fc:	3710      	adds	r7, #16
 810d7fe:	46bd      	mov	sp, r7
 810d800:	bd80      	pop	{r7, pc}

0810d802 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810d802:	b580      	push	{r7, lr}
 810d804:	b082      	sub	sp, #8
 810d806:	af00      	add	r7, sp, #0
 810d808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810d80a:	687b      	ldr	r3, [r7, #4]
 810d80c:	681b      	ldr	r3, [r3, #0]
 810d80e:	681a      	ldr	r2, [r3, #0]
 810d810:	687b      	ldr	r3, [r7, #4]
 810d812:	681b      	ldr	r3, [r3, #0]
 810d814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810d818:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810d81a:	687b      	ldr	r3, [r7, #4]
 810d81c:	2220      	movs	r2, #32
 810d81e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810d822:	687b      	ldr	r3, [r7, #4]
 810d824:	2200      	movs	r2, #0
 810d826:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810d828:	6878      	ldr	r0, [r7, #4]
 810d82a:	f7f5 f95d 	bl	8102ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d82e:	bf00      	nop
 810d830:	3708      	adds	r7, #8
 810d832:	46bd      	mov	sp, r7
 810d834:	bd80      	pop	{r7, pc}

0810d836 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810d836:	b480      	push	{r7}
 810d838:	b083      	sub	sp, #12
 810d83a:	af00      	add	r7, sp, #0
 810d83c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810d83e:	bf00      	nop
 810d840:	370c      	adds	r7, #12
 810d842:	46bd      	mov	sp, r7
 810d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d848:	4770      	bx	lr

0810d84a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810d84a:	b480      	push	{r7}
 810d84c:	b083      	sub	sp, #12
 810d84e:	af00      	add	r7, sp, #0
 810d850:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810d852:	bf00      	nop
 810d854:	370c      	adds	r7, #12
 810d856:	46bd      	mov	sp, r7
 810d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d85c:	4770      	bx	lr

0810d85e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810d85e:	b480      	push	{r7}
 810d860:	b083      	sub	sp, #12
 810d862:	af00      	add	r7, sp, #0
 810d864:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810d866:	bf00      	nop
 810d868:	370c      	adds	r7, #12
 810d86a:	46bd      	mov	sp, r7
 810d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d870:	4770      	bx	lr

0810d872 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810d872:	b480      	push	{r7}
 810d874:	b085      	sub	sp, #20
 810d876:	af00      	add	r7, sp, #0
 810d878:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810d87a:	687b      	ldr	r3, [r7, #4]
 810d87c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d880:	2b01      	cmp	r3, #1
 810d882:	d101      	bne.n	810d888 <HAL_UARTEx_DisableFifoMode+0x16>
 810d884:	2302      	movs	r3, #2
 810d886:	e027      	b.n	810d8d8 <HAL_UARTEx_DisableFifoMode+0x66>
 810d888:	687b      	ldr	r3, [r7, #4]
 810d88a:	2201      	movs	r2, #1
 810d88c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810d890:	687b      	ldr	r3, [r7, #4]
 810d892:	2224      	movs	r2, #36	; 0x24
 810d894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810d898:	687b      	ldr	r3, [r7, #4]
 810d89a:	681b      	ldr	r3, [r3, #0]
 810d89c:	681b      	ldr	r3, [r3, #0]
 810d89e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810d8a0:	687b      	ldr	r3, [r7, #4]
 810d8a2:	681b      	ldr	r3, [r3, #0]
 810d8a4:	681a      	ldr	r2, [r3, #0]
 810d8a6:	687b      	ldr	r3, [r7, #4]
 810d8a8:	681b      	ldr	r3, [r3, #0]
 810d8aa:	f022 0201 	bic.w	r2, r2, #1
 810d8ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810d8b0:	68fb      	ldr	r3, [r7, #12]
 810d8b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810d8b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810d8b8:	687b      	ldr	r3, [r7, #4]
 810d8ba:	2200      	movs	r2, #0
 810d8bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810d8be:	687b      	ldr	r3, [r7, #4]
 810d8c0:	681b      	ldr	r3, [r3, #0]
 810d8c2:	68fa      	ldr	r2, [r7, #12]
 810d8c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810d8c6:	687b      	ldr	r3, [r7, #4]
 810d8c8:	2220      	movs	r2, #32
 810d8ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810d8ce:	687b      	ldr	r3, [r7, #4]
 810d8d0:	2200      	movs	r2, #0
 810d8d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d8d6:	2300      	movs	r3, #0
}
 810d8d8:	4618      	mov	r0, r3
 810d8da:	3714      	adds	r7, #20
 810d8dc:	46bd      	mov	sp, r7
 810d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8e2:	4770      	bx	lr

0810d8e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810d8e4:	b580      	push	{r7, lr}
 810d8e6:	b084      	sub	sp, #16
 810d8e8:	af00      	add	r7, sp, #0
 810d8ea:	6078      	str	r0, [r7, #4]
 810d8ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810d8ee:	687b      	ldr	r3, [r7, #4]
 810d8f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d8f4:	2b01      	cmp	r3, #1
 810d8f6:	d101      	bne.n	810d8fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810d8f8:	2302      	movs	r3, #2
 810d8fa:	e02d      	b.n	810d958 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810d8fc:	687b      	ldr	r3, [r7, #4]
 810d8fe:	2201      	movs	r2, #1
 810d900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810d904:	687b      	ldr	r3, [r7, #4]
 810d906:	2224      	movs	r2, #36	; 0x24
 810d908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810d90c:	687b      	ldr	r3, [r7, #4]
 810d90e:	681b      	ldr	r3, [r3, #0]
 810d910:	681b      	ldr	r3, [r3, #0]
 810d912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810d914:	687b      	ldr	r3, [r7, #4]
 810d916:	681b      	ldr	r3, [r3, #0]
 810d918:	681a      	ldr	r2, [r3, #0]
 810d91a:	687b      	ldr	r3, [r7, #4]
 810d91c:	681b      	ldr	r3, [r3, #0]
 810d91e:	f022 0201 	bic.w	r2, r2, #1
 810d922:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810d924:	687b      	ldr	r3, [r7, #4]
 810d926:	681b      	ldr	r3, [r3, #0]
 810d928:	689b      	ldr	r3, [r3, #8]
 810d92a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810d92e:	687b      	ldr	r3, [r7, #4]
 810d930:	681b      	ldr	r3, [r3, #0]
 810d932:	683a      	ldr	r2, [r7, #0]
 810d934:	430a      	orrs	r2, r1
 810d936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810d938:	6878      	ldr	r0, [r7, #4]
 810d93a:	f000 f84f 	bl	810d9dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810d93e:	687b      	ldr	r3, [r7, #4]
 810d940:	681b      	ldr	r3, [r3, #0]
 810d942:	68fa      	ldr	r2, [r7, #12]
 810d944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810d946:	687b      	ldr	r3, [r7, #4]
 810d948:	2220      	movs	r2, #32
 810d94a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810d94e:	687b      	ldr	r3, [r7, #4]
 810d950:	2200      	movs	r2, #0
 810d952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d956:	2300      	movs	r3, #0
}
 810d958:	4618      	mov	r0, r3
 810d95a:	3710      	adds	r7, #16
 810d95c:	46bd      	mov	sp, r7
 810d95e:	bd80      	pop	{r7, pc}

0810d960 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810d960:	b580      	push	{r7, lr}
 810d962:	b084      	sub	sp, #16
 810d964:	af00      	add	r7, sp, #0
 810d966:	6078      	str	r0, [r7, #4]
 810d968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810d96a:	687b      	ldr	r3, [r7, #4]
 810d96c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d970:	2b01      	cmp	r3, #1
 810d972:	d101      	bne.n	810d978 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810d974:	2302      	movs	r3, #2
 810d976:	e02d      	b.n	810d9d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810d978:	687b      	ldr	r3, [r7, #4]
 810d97a:	2201      	movs	r2, #1
 810d97c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810d980:	687b      	ldr	r3, [r7, #4]
 810d982:	2224      	movs	r2, #36	; 0x24
 810d984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810d988:	687b      	ldr	r3, [r7, #4]
 810d98a:	681b      	ldr	r3, [r3, #0]
 810d98c:	681b      	ldr	r3, [r3, #0]
 810d98e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810d990:	687b      	ldr	r3, [r7, #4]
 810d992:	681b      	ldr	r3, [r3, #0]
 810d994:	681a      	ldr	r2, [r3, #0]
 810d996:	687b      	ldr	r3, [r7, #4]
 810d998:	681b      	ldr	r3, [r3, #0]
 810d99a:	f022 0201 	bic.w	r2, r2, #1
 810d99e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810d9a0:	687b      	ldr	r3, [r7, #4]
 810d9a2:	681b      	ldr	r3, [r3, #0]
 810d9a4:	689b      	ldr	r3, [r3, #8]
 810d9a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810d9aa:	687b      	ldr	r3, [r7, #4]
 810d9ac:	681b      	ldr	r3, [r3, #0]
 810d9ae:	683a      	ldr	r2, [r7, #0]
 810d9b0:	430a      	orrs	r2, r1
 810d9b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810d9b4:	6878      	ldr	r0, [r7, #4]
 810d9b6:	f000 f811 	bl	810d9dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810d9ba:	687b      	ldr	r3, [r7, #4]
 810d9bc:	681b      	ldr	r3, [r3, #0]
 810d9be:	68fa      	ldr	r2, [r7, #12]
 810d9c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810d9c2:	687b      	ldr	r3, [r7, #4]
 810d9c4:	2220      	movs	r2, #32
 810d9c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810d9ca:	687b      	ldr	r3, [r7, #4]
 810d9cc:	2200      	movs	r2, #0
 810d9ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d9d2:	2300      	movs	r3, #0
}
 810d9d4:	4618      	mov	r0, r3
 810d9d6:	3710      	adds	r7, #16
 810d9d8:	46bd      	mov	sp, r7
 810d9da:	bd80      	pop	{r7, pc}

0810d9dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810d9dc:	b480      	push	{r7}
 810d9de:	b085      	sub	sp, #20
 810d9e0:	af00      	add	r7, sp, #0
 810d9e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810d9e4:	687b      	ldr	r3, [r7, #4]
 810d9e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d9e8:	2b00      	cmp	r3, #0
 810d9ea:	d108      	bne.n	810d9fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810d9ec:	687b      	ldr	r3, [r7, #4]
 810d9ee:	2201      	movs	r2, #1
 810d9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810d9f4:	687b      	ldr	r3, [r7, #4]
 810d9f6:	2201      	movs	r2, #1
 810d9f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810d9fc:	e031      	b.n	810da62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810d9fe:	2310      	movs	r3, #16
 810da00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810da02:	2310      	movs	r3, #16
 810da04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810da06:	687b      	ldr	r3, [r7, #4]
 810da08:	681b      	ldr	r3, [r3, #0]
 810da0a:	689b      	ldr	r3, [r3, #8]
 810da0c:	0e5b      	lsrs	r3, r3, #25
 810da0e:	b2db      	uxtb	r3, r3
 810da10:	f003 0307 	and.w	r3, r3, #7
 810da14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810da16:	687b      	ldr	r3, [r7, #4]
 810da18:	681b      	ldr	r3, [r3, #0]
 810da1a:	689b      	ldr	r3, [r3, #8]
 810da1c:	0f5b      	lsrs	r3, r3, #29
 810da1e:	b2db      	uxtb	r3, r3
 810da20:	f003 0307 	and.w	r3, r3, #7
 810da24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810da26:	7bbb      	ldrb	r3, [r7, #14]
 810da28:	7b3a      	ldrb	r2, [r7, #12]
 810da2a:	4911      	ldr	r1, [pc, #68]	; (810da70 <UARTEx_SetNbDataToProcess+0x94>)
 810da2c:	5c8a      	ldrb	r2, [r1, r2]
 810da2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810da32:	7b3a      	ldrb	r2, [r7, #12]
 810da34:	490f      	ldr	r1, [pc, #60]	; (810da74 <UARTEx_SetNbDataToProcess+0x98>)
 810da36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810da38:	fb93 f3f2 	sdiv	r3, r3, r2
 810da3c:	b29a      	uxth	r2, r3
 810da3e:	687b      	ldr	r3, [r7, #4]
 810da40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810da44:	7bfb      	ldrb	r3, [r7, #15]
 810da46:	7b7a      	ldrb	r2, [r7, #13]
 810da48:	4909      	ldr	r1, [pc, #36]	; (810da70 <UARTEx_SetNbDataToProcess+0x94>)
 810da4a:	5c8a      	ldrb	r2, [r1, r2]
 810da4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810da50:	7b7a      	ldrb	r2, [r7, #13]
 810da52:	4908      	ldr	r1, [pc, #32]	; (810da74 <UARTEx_SetNbDataToProcess+0x98>)
 810da54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810da56:	fb93 f3f2 	sdiv	r3, r3, r2
 810da5a:	b29a      	uxth	r2, r3
 810da5c:	687b      	ldr	r3, [r7, #4]
 810da5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810da62:	bf00      	nop
 810da64:	3714      	adds	r7, #20
 810da66:	46bd      	mov	sp, r7
 810da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da6c:	4770      	bx	lr
 810da6e:	bf00      	nop
 810da70:	0810e9dc 	.word	0x0810e9dc
 810da74:	0810e9e4 	.word	0x0810e9e4

0810da78 <pow>:
 810da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810da7a:	ed2d 8b02 	vpush	{d8}
 810da7e:	eeb0 8a40 	vmov.f32	s16, s0
 810da82:	eef0 8a60 	vmov.f32	s17, s1
 810da86:	ec55 4b11 	vmov	r4, r5, d1
 810da8a:	f000 f865 	bl	810db58 <__ieee754_pow>
 810da8e:	4622      	mov	r2, r4
 810da90:	462b      	mov	r3, r5
 810da92:	4620      	mov	r0, r4
 810da94:	4629      	mov	r1, r5
 810da96:	ec57 6b10 	vmov	r6, r7, d0
 810da9a:	f7f3 f873 	bl	8100b84 <__aeabi_dcmpun>
 810da9e:	2800      	cmp	r0, #0
 810daa0:	d13b      	bne.n	810db1a <pow+0xa2>
 810daa2:	ec51 0b18 	vmov	r0, r1, d8
 810daa6:	2200      	movs	r2, #0
 810daa8:	2300      	movs	r3, #0
 810daaa:	f7f3 f839 	bl	8100b20 <__aeabi_dcmpeq>
 810daae:	b1b8      	cbz	r0, 810dae0 <pow+0x68>
 810dab0:	2200      	movs	r2, #0
 810dab2:	2300      	movs	r3, #0
 810dab4:	4620      	mov	r0, r4
 810dab6:	4629      	mov	r1, r5
 810dab8:	f7f3 f832 	bl	8100b20 <__aeabi_dcmpeq>
 810dabc:	2800      	cmp	r0, #0
 810dabe:	d146      	bne.n	810db4e <pow+0xd6>
 810dac0:	ec45 4b10 	vmov	d0, r4, r5
 810dac4:	f000 fe61 	bl	810e78a <finite>
 810dac8:	b338      	cbz	r0, 810db1a <pow+0xa2>
 810daca:	2200      	movs	r2, #0
 810dacc:	2300      	movs	r3, #0
 810dace:	4620      	mov	r0, r4
 810dad0:	4629      	mov	r1, r5
 810dad2:	f7f3 f82f 	bl	8100b34 <__aeabi_dcmplt>
 810dad6:	b300      	cbz	r0, 810db1a <pow+0xa2>
 810dad8:	f000 fee8 	bl	810e8ac <__errno>
 810dadc:	2322      	movs	r3, #34	; 0x22
 810dade:	e01b      	b.n	810db18 <pow+0xa0>
 810dae0:	ec47 6b10 	vmov	d0, r6, r7
 810dae4:	f000 fe51 	bl	810e78a <finite>
 810dae8:	b9e0      	cbnz	r0, 810db24 <pow+0xac>
 810daea:	eeb0 0a48 	vmov.f32	s0, s16
 810daee:	eef0 0a68 	vmov.f32	s1, s17
 810daf2:	f000 fe4a 	bl	810e78a <finite>
 810daf6:	b1a8      	cbz	r0, 810db24 <pow+0xac>
 810daf8:	ec45 4b10 	vmov	d0, r4, r5
 810dafc:	f000 fe45 	bl	810e78a <finite>
 810db00:	b180      	cbz	r0, 810db24 <pow+0xac>
 810db02:	4632      	mov	r2, r6
 810db04:	463b      	mov	r3, r7
 810db06:	4630      	mov	r0, r6
 810db08:	4639      	mov	r1, r7
 810db0a:	f7f3 f83b 	bl	8100b84 <__aeabi_dcmpun>
 810db0e:	2800      	cmp	r0, #0
 810db10:	d0e2      	beq.n	810dad8 <pow+0x60>
 810db12:	f000 fecb 	bl	810e8ac <__errno>
 810db16:	2321      	movs	r3, #33	; 0x21
 810db18:	6003      	str	r3, [r0, #0]
 810db1a:	ecbd 8b02 	vpop	{d8}
 810db1e:	ec47 6b10 	vmov	d0, r6, r7
 810db22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810db24:	2200      	movs	r2, #0
 810db26:	2300      	movs	r3, #0
 810db28:	4630      	mov	r0, r6
 810db2a:	4639      	mov	r1, r7
 810db2c:	f7f2 fff8 	bl	8100b20 <__aeabi_dcmpeq>
 810db30:	2800      	cmp	r0, #0
 810db32:	d0f2      	beq.n	810db1a <pow+0xa2>
 810db34:	eeb0 0a48 	vmov.f32	s0, s16
 810db38:	eef0 0a68 	vmov.f32	s1, s17
 810db3c:	f000 fe25 	bl	810e78a <finite>
 810db40:	2800      	cmp	r0, #0
 810db42:	d0ea      	beq.n	810db1a <pow+0xa2>
 810db44:	ec45 4b10 	vmov	d0, r4, r5
 810db48:	f000 fe1f 	bl	810e78a <finite>
 810db4c:	e7c3      	b.n	810dad6 <pow+0x5e>
 810db4e:	4f01      	ldr	r7, [pc, #4]	; (810db54 <pow+0xdc>)
 810db50:	2600      	movs	r6, #0
 810db52:	e7e2      	b.n	810db1a <pow+0xa2>
 810db54:	3ff00000 	.word	0x3ff00000

0810db58 <__ieee754_pow>:
 810db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810db5c:	ed2d 8b06 	vpush	{d8-d10}
 810db60:	b089      	sub	sp, #36	; 0x24
 810db62:	ed8d 1b00 	vstr	d1, [sp]
 810db66:	e9dd 2900 	ldrd	r2, r9, [sp]
 810db6a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 810db6e:	ea58 0102 	orrs.w	r1, r8, r2
 810db72:	ec57 6b10 	vmov	r6, r7, d0
 810db76:	d115      	bne.n	810dba4 <__ieee754_pow+0x4c>
 810db78:	19b3      	adds	r3, r6, r6
 810db7a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 810db7e:	4152      	adcs	r2, r2
 810db80:	4299      	cmp	r1, r3
 810db82:	4b89      	ldr	r3, [pc, #548]	; (810dda8 <__ieee754_pow+0x250>)
 810db84:	4193      	sbcs	r3, r2
 810db86:	f080 84d2 	bcs.w	810e52e <__ieee754_pow+0x9d6>
 810db8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810db8e:	4630      	mov	r0, r6
 810db90:	4639      	mov	r1, r7
 810db92:	f7f2 fba7 	bl	81002e4 <__adddf3>
 810db96:	ec41 0b10 	vmov	d0, r0, r1
 810db9a:	b009      	add	sp, #36	; 0x24
 810db9c:	ecbd 8b06 	vpop	{d8-d10}
 810dba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dba4:	4b81      	ldr	r3, [pc, #516]	; (810ddac <__ieee754_pow+0x254>)
 810dba6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 810dbaa:	429c      	cmp	r4, r3
 810dbac:	ee10 aa10 	vmov	sl, s0
 810dbb0:	463d      	mov	r5, r7
 810dbb2:	dc06      	bgt.n	810dbc2 <__ieee754_pow+0x6a>
 810dbb4:	d101      	bne.n	810dbba <__ieee754_pow+0x62>
 810dbb6:	2e00      	cmp	r6, #0
 810dbb8:	d1e7      	bne.n	810db8a <__ieee754_pow+0x32>
 810dbba:	4598      	cmp	r8, r3
 810dbbc:	dc01      	bgt.n	810dbc2 <__ieee754_pow+0x6a>
 810dbbe:	d10f      	bne.n	810dbe0 <__ieee754_pow+0x88>
 810dbc0:	b172      	cbz	r2, 810dbe0 <__ieee754_pow+0x88>
 810dbc2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 810dbc6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 810dbca:	ea55 050a 	orrs.w	r5, r5, sl
 810dbce:	d1dc      	bne.n	810db8a <__ieee754_pow+0x32>
 810dbd0:	e9dd 3200 	ldrd	r3, r2, [sp]
 810dbd4:	18db      	adds	r3, r3, r3
 810dbd6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 810dbda:	4152      	adcs	r2, r2
 810dbdc:	429d      	cmp	r5, r3
 810dbde:	e7d0      	b.n	810db82 <__ieee754_pow+0x2a>
 810dbe0:	2d00      	cmp	r5, #0
 810dbe2:	da3b      	bge.n	810dc5c <__ieee754_pow+0x104>
 810dbe4:	4b72      	ldr	r3, [pc, #456]	; (810ddb0 <__ieee754_pow+0x258>)
 810dbe6:	4598      	cmp	r8, r3
 810dbe8:	dc51      	bgt.n	810dc8e <__ieee754_pow+0x136>
 810dbea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 810dbee:	4598      	cmp	r8, r3
 810dbf0:	f340 84ac 	ble.w	810e54c <__ieee754_pow+0x9f4>
 810dbf4:	ea4f 5328 	mov.w	r3, r8, asr #20
 810dbf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810dbfc:	2b14      	cmp	r3, #20
 810dbfe:	dd0f      	ble.n	810dc20 <__ieee754_pow+0xc8>
 810dc00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 810dc04:	fa22 f103 	lsr.w	r1, r2, r3
 810dc08:	fa01 f303 	lsl.w	r3, r1, r3
 810dc0c:	4293      	cmp	r3, r2
 810dc0e:	f040 849d 	bne.w	810e54c <__ieee754_pow+0x9f4>
 810dc12:	f001 0101 	and.w	r1, r1, #1
 810dc16:	f1c1 0302 	rsb	r3, r1, #2
 810dc1a:	9304      	str	r3, [sp, #16]
 810dc1c:	b182      	cbz	r2, 810dc40 <__ieee754_pow+0xe8>
 810dc1e:	e05f      	b.n	810dce0 <__ieee754_pow+0x188>
 810dc20:	2a00      	cmp	r2, #0
 810dc22:	d15b      	bne.n	810dcdc <__ieee754_pow+0x184>
 810dc24:	f1c3 0314 	rsb	r3, r3, #20
 810dc28:	fa48 f103 	asr.w	r1, r8, r3
 810dc2c:	fa01 f303 	lsl.w	r3, r1, r3
 810dc30:	4543      	cmp	r3, r8
 810dc32:	f040 8488 	bne.w	810e546 <__ieee754_pow+0x9ee>
 810dc36:	f001 0101 	and.w	r1, r1, #1
 810dc3a:	f1c1 0302 	rsb	r3, r1, #2
 810dc3e:	9304      	str	r3, [sp, #16]
 810dc40:	4b5c      	ldr	r3, [pc, #368]	; (810ddb4 <__ieee754_pow+0x25c>)
 810dc42:	4598      	cmp	r8, r3
 810dc44:	d132      	bne.n	810dcac <__ieee754_pow+0x154>
 810dc46:	f1b9 0f00 	cmp.w	r9, #0
 810dc4a:	f280 8478 	bge.w	810e53e <__ieee754_pow+0x9e6>
 810dc4e:	4959      	ldr	r1, [pc, #356]	; (810ddb4 <__ieee754_pow+0x25c>)
 810dc50:	4632      	mov	r2, r6
 810dc52:	463b      	mov	r3, r7
 810dc54:	2000      	movs	r0, #0
 810dc56:	f7f2 fe25 	bl	81008a4 <__aeabi_ddiv>
 810dc5a:	e79c      	b.n	810db96 <__ieee754_pow+0x3e>
 810dc5c:	2300      	movs	r3, #0
 810dc5e:	9304      	str	r3, [sp, #16]
 810dc60:	2a00      	cmp	r2, #0
 810dc62:	d13d      	bne.n	810dce0 <__ieee754_pow+0x188>
 810dc64:	4b51      	ldr	r3, [pc, #324]	; (810ddac <__ieee754_pow+0x254>)
 810dc66:	4598      	cmp	r8, r3
 810dc68:	d1ea      	bne.n	810dc40 <__ieee754_pow+0xe8>
 810dc6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810dc6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810dc72:	ea53 030a 	orrs.w	r3, r3, sl
 810dc76:	f000 845a 	beq.w	810e52e <__ieee754_pow+0x9d6>
 810dc7a:	4b4f      	ldr	r3, [pc, #316]	; (810ddb8 <__ieee754_pow+0x260>)
 810dc7c:	429c      	cmp	r4, r3
 810dc7e:	dd08      	ble.n	810dc92 <__ieee754_pow+0x13a>
 810dc80:	f1b9 0f00 	cmp.w	r9, #0
 810dc84:	f2c0 8457 	blt.w	810e536 <__ieee754_pow+0x9de>
 810dc88:	e9dd 0100 	ldrd	r0, r1, [sp]
 810dc8c:	e783      	b.n	810db96 <__ieee754_pow+0x3e>
 810dc8e:	2302      	movs	r3, #2
 810dc90:	e7e5      	b.n	810dc5e <__ieee754_pow+0x106>
 810dc92:	f1b9 0f00 	cmp.w	r9, #0
 810dc96:	f04f 0000 	mov.w	r0, #0
 810dc9a:	f04f 0100 	mov.w	r1, #0
 810dc9e:	f6bf af7a 	bge.w	810db96 <__ieee754_pow+0x3e>
 810dca2:	e9dd 0300 	ldrd	r0, r3, [sp]
 810dca6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810dcaa:	e774      	b.n	810db96 <__ieee754_pow+0x3e>
 810dcac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 810dcb0:	d106      	bne.n	810dcc0 <__ieee754_pow+0x168>
 810dcb2:	4632      	mov	r2, r6
 810dcb4:	463b      	mov	r3, r7
 810dcb6:	4630      	mov	r0, r6
 810dcb8:	4639      	mov	r1, r7
 810dcba:	f7f2 fcc9 	bl	8100650 <__aeabi_dmul>
 810dcbe:	e76a      	b.n	810db96 <__ieee754_pow+0x3e>
 810dcc0:	4b3e      	ldr	r3, [pc, #248]	; (810ddbc <__ieee754_pow+0x264>)
 810dcc2:	4599      	cmp	r9, r3
 810dcc4:	d10c      	bne.n	810dce0 <__ieee754_pow+0x188>
 810dcc6:	2d00      	cmp	r5, #0
 810dcc8:	db0a      	blt.n	810dce0 <__ieee754_pow+0x188>
 810dcca:	ec47 6b10 	vmov	d0, r6, r7
 810dcce:	b009      	add	sp, #36	; 0x24
 810dcd0:	ecbd 8b06 	vpop	{d8-d10}
 810dcd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dcd8:	f000 bc6c 	b.w	810e5b4 <__ieee754_sqrt>
 810dcdc:	2300      	movs	r3, #0
 810dcde:	9304      	str	r3, [sp, #16]
 810dce0:	ec47 6b10 	vmov	d0, r6, r7
 810dce4:	f000 fd48 	bl	810e778 <fabs>
 810dce8:	ec51 0b10 	vmov	r0, r1, d0
 810dcec:	f1ba 0f00 	cmp.w	sl, #0
 810dcf0:	d129      	bne.n	810dd46 <__ieee754_pow+0x1ee>
 810dcf2:	b124      	cbz	r4, 810dcfe <__ieee754_pow+0x1a6>
 810dcf4:	4b2f      	ldr	r3, [pc, #188]	; (810ddb4 <__ieee754_pow+0x25c>)
 810dcf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 810dcfa:	429a      	cmp	r2, r3
 810dcfc:	d123      	bne.n	810dd46 <__ieee754_pow+0x1ee>
 810dcfe:	f1b9 0f00 	cmp.w	r9, #0
 810dd02:	da05      	bge.n	810dd10 <__ieee754_pow+0x1b8>
 810dd04:	4602      	mov	r2, r0
 810dd06:	460b      	mov	r3, r1
 810dd08:	2000      	movs	r0, #0
 810dd0a:	492a      	ldr	r1, [pc, #168]	; (810ddb4 <__ieee754_pow+0x25c>)
 810dd0c:	f7f2 fdca 	bl	81008a4 <__aeabi_ddiv>
 810dd10:	2d00      	cmp	r5, #0
 810dd12:	f6bf af40 	bge.w	810db96 <__ieee754_pow+0x3e>
 810dd16:	9b04      	ldr	r3, [sp, #16]
 810dd18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810dd1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810dd20:	4323      	orrs	r3, r4
 810dd22:	d108      	bne.n	810dd36 <__ieee754_pow+0x1de>
 810dd24:	4602      	mov	r2, r0
 810dd26:	460b      	mov	r3, r1
 810dd28:	4610      	mov	r0, r2
 810dd2a:	4619      	mov	r1, r3
 810dd2c:	f7f2 fad8 	bl	81002e0 <__aeabi_dsub>
 810dd30:	4602      	mov	r2, r0
 810dd32:	460b      	mov	r3, r1
 810dd34:	e78f      	b.n	810dc56 <__ieee754_pow+0xfe>
 810dd36:	9b04      	ldr	r3, [sp, #16]
 810dd38:	2b01      	cmp	r3, #1
 810dd3a:	f47f af2c 	bne.w	810db96 <__ieee754_pow+0x3e>
 810dd3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810dd42:	4619      	mov	r1, r3
 810dd44:	e727      	b.n	810db96 <__ieee754_pow+0x3e>
 810dd46:	0feb      	lsrs	r3, r5, #31
 810dd48:	3b01      	subs	r3, #1
 810dd4a:	9306      	str	r3, [sp, #24]
 810dd4c:	9a06      	ldr	r2, [sp, #24]
 810dd4e:	9b04      	ldr	r3, [sp, #16]
 810dd50:	4313      	orrs	r3, r2
 810dd52:	d102      	bne.n	810dd5a <__ieee754_pow+0x202>
 810dd54:	4632      	mov	r2, r6
 810dd56:	463b      	mov	r3, r7
 810dd58:	e7e6      	b.n	810dd28 <__ieee754_pow+0x1d0>
 810dd5a:	4b19      	ldr	r3, [pc, #100]	; (810ddc0 <__ieee754_pow+0x268>)
 810dd5c:	4598      	cmp	r8, r3
 810dd5e:	f340 80fb 	ble.w	810df58 <__ieee754_pow+0x400>
 810dd62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810dd66:	4598      	cmp	r8, r3
 810dd68:	4b13      	ldr	r3, [pc, #76]	; (810ddb8 <__ieee754_pow+0x260>)
 810dd6a:	dd0c      	ble.n	810dd86 <__ieee754_pow+0x22e>
 810dd6c:	429c      	cmp	r4, r3
 810dd6e:	dc0f      	bgt.n	810dd90 <__ieee754_pow+0x238>
 810dd70:	f1b9 0f00 	cmp.w	r9, #0
 810dd74:	da0f      	bge.n	810dd96 <__ieee754_pow+0x23e>
 810dd76:	2000      	movs	r0, #0
 810dd78:	b009      	add	sp, #36	; 0x24
 810dd7a:	ecbd 8b06 	vpop	{d8-d10}
 810dd7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd82:	f000 bcf0 	b.w	810e766 <__math_oflow>
 810dd86:	429c      	cmp	r4, r3
 810dd88:	dbf2      	blt.n	810dd70 <__ieee754_pow+0x218>
 810dd8a:	4b0a      	ldr	r3, [pc, #40]	; (810ddb4 <__ieee754_pow+0x25c>)
 810dd8c:	429c      	cmp	r4, r3
 810dd8e:	dd19      	ble.n	810ddc4 <__ieee754_pow+0x26c>
 810dd90:	f1b9 0f00 	cmp.w	r9, #0
 810dd94:	dcef      	bgt.n	810dd76 <__ieee754_pow+0x21e>
 810dd96:	2000      	movs	r0, #0
 810dd98:	b009      	add	sp, #36	; 0x24
 810dd9a:	ecbd 8b06 	vpop	{d8-d10}
 810dd9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dda2:	f000 bcd7 	b.w	810e754 <__math_uflow>
 810dda6:	bf00      	nop
 810dda8:	fff00000 	.word	0xfff00000
 810ddac:	7ff00000 	.word	0x7ff00000
 810ddb0:	433fffff 	.word	0x433fffff
 810ddb4:	3ff00000 	.word	0x3ff00000
 810ddb8:	3fefffff 	.word	0x3fefffff
 810ddbc:	3fe00000 	.word	0x3fe00000
 810ddc0:	41e00000 	.word	0x41e00000
 810ddc4:	4b60      	ldr	r3, [pc, #384]	; (810df48 <__ieee754_pow+0x3f0>)
 810ddc6:	2200      	movs	r2, #0
 810ddc8:	f7f2 fa8a 	bl	81002e0 <__aeabi_dsub>
 810ddcc:	a354      	add	r3, pc, #336	; (adr r3, 810df20 <__ieee754_pow+0x3c8>)
 810ddce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ddd2:	4604      	mov	r4, r0
 810ddd4:	460d      	mov	r5, r1
 810ddd6:	f7f2 fc3b 	bl	8100650 <__aeabi_dmul>
 810ddda:	a353      	add	r3, pc, #332	; (adr r3, 810df28 <__ieee754_pow+0x3d0>)
 810dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dde0:	4606      	mov	r6, r0
 810dde2:	460f      	mov	r7, r1
 810dde4:	4620      	mov	r0, r4
 810dde6:	4629      	mov	r1, r5
 810dde8:	f7f2 fc32 	bl	8100650 <__aeabi_dmul>
 810ddec:	4b57      	ldr	r3, [pc, #348]	; (810df4c <__ieee754_pow+0x3f4>)
 810ddee:	4682      	mov	sl, r0
 810ddf0:	468b      	mov	fp, r1
 810ddf2:	2200      	movs	r2, #0
 810ddf4:	4620      	mov	r0, r4
 810ddf6:	4629      	mov	r1, r5
 810ddf8:	f7f2 fc2a 	bl	8100650 <__aeabi_dmul>
 810ddfc:	4602      	mov	r2, r0
 810ddfe:	460b      	mov	r3, r1
 810de00:	a14b      	add	r1, pc, #300	; (adr r1, 810df30 <__ieee754_pow+0x3d8>)
 810de02:	e9d1 0100 	ldrd	r0, r1, [r1]
 810de06:	f7f2 fa6b 	bl	81002e0 <__aeabi_dsub>
 810de0a:	4622      	mov	r2, r4
 810de0c:	462b      	mov	r3, r5
 810de0e:	f7f2 fc1f 	bl	8100650 <__aeabi_dmul>
 810de12:	4602      	mov	r2, r0
 810de14:	460b      	mov	r3, r1
 810de16:	2000      	movs	r0, #0
 810de18:	494d      	ldr	r1, [pc, #308]	; (810df50 <__ieee754_pow+0x3f8>)
 810de1a:	f7f2 fa61 	bl	81002e0 <__aeabi_dsub>
 810de1e:	4622      	mov	r2, r4
 810de20:	4680      	mov	r8, r0
 810de22:	4689      	mov	r9, r1
 810de24:	462b      	mov	r3, r5
 810de26:	4620      	mov	r0, r4
 810de28:	4629      	mov	r1, r5
 810de2a:	f7f2 fc11 	bl	8100650 <__aeabi_dmul>
 810de2e:	4602      	mov	r2, r0
 810de30:	460b      	mov	r3, r1
 810de32:	4640      	mov	r0, r8
 810de34:	4649      	mov	r1, r9
 810de36:	f7f2 fc0b 	bl	8100650 <__aeabi_dmul>
 810de3a:	a33f      	add	r3, pc, #252	; (adr r3, 810df38 <__ieee754_pow+0x3e0>)
 810de3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de40:	f7f2 fc06 	bl	8100650 <__aeabi_dmul>
 810de44:	4602      	mov	r2, r0
 810de46:	460b      	mov	r3, r1
 810de48:	4650      	mov	r0, sl
 810de4a:	4659      	mov	r1, fp
 810de4c:	f7f2 fa48 	bl	81002e0 <__aeabi_dsub>
 810de50:	4602      	mov	r2, r0
 810de52:	460b      	mov	r3, r1
 810de54:	4680      	mov	r8, r0
 810de56:	4689      	mov	r9, r1
 810de58:	4630      	mov	r0, r6
 810de5a:	4639      	mov	r1, r7
 810de5c:	f7f2 fa42 	bl	81002e4 <__adddf3>
 810de60:	2000      	movs	r0, #0
 810de62:	4632      	mov	r2, r6
 810de64:	463b      	mov	r3, r7
 810de66:	4604      	mov	r4, r0
 810de68:	460d      	mov	r5, r1
 810de6a:	f7f2 fa39 	bl	81002e0 <__aeabi_dsub>
 810de6e:	4602      	mov	r2, r0
 810de70:	460b      	mov	r3, r1
 810de72:	4640      	mov	r0, r8
 810de74:	4649      	mov	r1, r9
 810de76:	f7f2 fa33 	bl	81002e0 <__aeabi_dsub>
 810de7a:	9b04      	ldr	r3, [sp, #16]
 810de7c:	9a06      	ldr	r2, [sp, #24]
 810de7e:	3b01      	subs	r3, #1
 810de80:	4313      	orrs	r3, r2
 810de82:	4682      	mov	sl, r0
 810de84:	468b      	mov	fp, r1
 810de86:	f040 81e7 	bne.w	810e258 <__ieee754_pow+0x700>
 810de8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 810df40 <__ieee754_pow+0x3e8>
 810de8e:	eeb0 8a47 	vmov.f32	s16, s14
 810de92:	eef0 8a67 	vmov.f32	s17, s15
 810de96:	e9dd 6700 	ldrd	r6, r7, [sp]
 810de9a:	2600      	movs	r6, #0
 810de9c:	4632      	mov	r2, r6
 810de9e:	463b      	mov	r3, r7
 810dea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810dea4:	f7f2 fa1c 	bl	81002e0 <__aeabi_dsub>
 810dea8:	4622      	mov	r2, r4
 810deaa:	462b      	mov	r3, r5
 810deac:	f7f2 fbd0 	bl	8100650 <__aeabi_dmul>
 810deb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810deb4:	4680      	mov	r8, r0
 810deb6:	4689      	mov	r9, r1
 810deb8:	4650      	mov	r0, sl
 810deba:	4659      	mov	r1, fp
 810debc:	f7f2 fbc8 	bl	8100650 <__aeabi_dmul>
 810dec0:	4602      	mov	r2, r0
 810dec2:	460b      	mov	r3, r1
 810dec4:	4640      	mov	r0, r8
 810dec6:	4649      	mov	r1, r9
 810dec8:	f7f2 fa0c 	bl	81002e4 <__adddf3>
 810decc:	4632      	mov	r2, r6
 810dece:	463b      	mov	r3, r7
 810ded0:	4680      	mov	r8, r0
 810ded2:	4689      	mov	r9, r1
 810ded4:	4620      	mov	r0, r4
 810ded6:	4629      	mov	r1, r5
 810ded8:	f7f2 fbba 	bl	8100650 <__aeabi_dmul>
 810dedc:	460b      	mov	r3, r1
 810dede:	4604      	mov	r4, r0
 810dee0:	460d      	mov	r5, r1
 810dee2:	4602      	mov	r2, r0
 810dee4:	4649      	mov	r1, r9
 810dee6:	4640      	mov	r0, r8
 810dee8:	f7f2 f9fc 	bl	81002e4 <__adddf3>
 810deec:	4b19      	ldr	r3, [pc, #100]	; (810df54 <__ieee754_pow+0x3fc>)
 810deee:	4299      	cmp	r1, r3
 810def0:	ec45 4b19 	vmov	d9, r4, r5
 810def4:	4606      	mov	r6, r0
 810def6:	460f      	mov	r7, r1
 810def8:	468b      	mov	fp, r1
 810defa:	f340 82f1 	ble.w	810e4e0 <__ieee754_pow+0x988>
 810defe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810df02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810df06:	4303      	orrs	r3, r0
 810df08:	f000 81e4 	beq.w	810e2d4 <__ieee754_pow+0x77c>
 810df0c:	ec51 0b18 	vmov	r0, r1, d8
 810df10:	2200      	movs	r2, #0
 810df12:	2300      	movs	r3, #0
 810df14:	f7f2 fe0e 	bl	8100b34 <__aeabi_dcmplt>
 810df18:	3800      	subs	r0, #0
 810df1a:	bf18      	it	ne
 810df1c:	2001      	movne	r0, #1
 810df1e:	e72b      	b.n	810dd78 <__ieee754_pow+0x220>
 810df20:	60000000 	.word	0x60000000
 810df24:	3ff71547 	.word	0x3ff71547
 810df28:	f85ddf44 	.word	0xf85ddf44
 810df2c:	3e54ae0b 	.word	0x3e54ae0b
 810df30:	55555555 	.word	0x55555555
 810df34:	3fd55555 	.word	0x3fd55555
 810df38:	652b82fe 	.word	0x652b82fe
 810df3c:	3ff71547 	.word	0x3ff71547
 810df40:	00000000 	.word	0x00000000
 810df44:	bff00000 	.word	0xbff00000
 810df48:	3ff00000 	.word	0x3ff00000
 810df4c:	3fd00000 	.word	0x3fd00000
 810df50:	3fe00000 	.word	0x3fe00000
 810df54:	408fffff 	.word	0x408fffff
 810df58:	4bd5      	ldr	r3, [pc, #852]	; (810e2b0 <__ieee754_pow+0x758>)
 810df5a:	402b      	ands	r3, r5
 810df5c:	2200      	movs	r2, #0
 810df5e:	b92b      	cbnz	r3, 810df6c <__ieee754_pow+0x414>
 810df60:	4bd4      	ldr	r3, [pc, #848]	; (810e2b4 <__ieee754_pow+0x75c>)
 810df62:	f7f2 fb75 	bl	8100650 <__aeabi_dmul>
 810df66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810df6a:	460c      	mov	r4, r1
 810df6c:	1523      	asrs	r3, r4, #20
 810df6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810df72:	4413      	add	r3, r2
 810df74:	9305      	str	r3, [sp, #20]
 810df76:	4bd0      	ldr	r3, [pc, #832]	; (810e2b8 <__ieee754_pow+0x760>)
 810df78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810df7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810df80:	429c      	cmp	r4, r3
 810df82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810df86:	dd08      	ble.n	810df9a <__ieee754_pow+0x442>
 810df88:	4bcc      	ldr	r3, [pc, #816]	; (810e2bc <__ieee754_pow+0x764>)
 810df8a:	429c      	cmp	r4, r3
 810df8c:	f340 8162 	ble.w	810e254 <__ieee754_pow+0x6fc>
 810df90:	9b05      	ldr	r3, [sp, #20]
 810df92:	3301      	adds	r3, #1
 810df94:	9305      	str	r3, [sp, #20]
 810df96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810df9a:	2400      	movs	r4, #0
 810df9c:	00e3      	lsls	r3, r4, #3
 810df9e:	9307      	str	r3, [sp, #28]
 810dfa0:	4bc7      	ldr	r3, [pc, #796]	; (810e2c0 <__ieee754_pow+0x768>)
 810dfa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810dfa6:	ed93 7b00 	vldr	d7, [r3]
 810dfaa:	4629      	mov	r1, r5
 810dfac:	ec53 2b17 	vmov	r2, r3, d7
 810dfb0:	eeb0 9a47 	vmov.f32	s18, s14
 810dfb4:	eef0 9a67 	vmov.f32	s19, s15
 810dfb8:	4682      	mov	sl, r0
 810dfba:	f7f2 f991 	bl	81002e0 <__aeabi_dsub>
 810dfbe:	4652      	mov	r2, sl
 810dfc0:	4606      	mov	r6, r0
 810dfc2:	460f      	mov	r7, r1
 810dfc4:	462b      	mov	r3, r5
 810dfc6:	ec51 0b19 	vmov	r0, r1, d9
 810dfca:	f7f2 f98b 	bl	81002e4 <__adddf3>
 810dfce:	4602      	mov	r2, r0
 810dfd0:	460b      	mov	r3, r1
 810dfd2:	2000      	movs	r0, #0
 810dfd4:	49bb      	ldr	r1, [pc, #748]	; (810e2c4 <__ieee754_pow+0x76c>)
 810dfd6:	f7f2 fc65 	bl	81008a4 <__aeabi_ddiv>
 810dfda:	ec41 0b1a 	vmov	d10, r0, r1
 810dfde:	4602      	mov	r2, r0
 810dfe0:	460b      	mov	r3, r1
 810dfe2:	4630      	mov	r0, r6
 810dfe4:	4639      	mov	r1, r7
 810dfe6:	f7f2 fb33 	bl	8100650 <__aeabi_dmul>
 810dfea:	2300      	movs	r3, #0
 810dfec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810dff0:	9302      	str	r3, [sp, #8]
 810dff2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810dff6:	46ab      	mov	fp, r5
 810dff8:	106d      	asrs	r5, r5, #1
 810dffa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810dffe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810e002:	ec41 0b18 	vmov	d8, r0, r1
 810e006:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810e00a:	2200      	movs	r2, #0
 810e00c:	4640      	mov	r0, r8
 810e00e:	4649      	mov	r1, r9
 810e010:	4614      	mov	r4, r2
 810e012:	461d      	mov	r5, r3
 810e014:	f7f2 fb1c 	bl	8100650 <__aeabi_dmul>
 810e018:	4602      	mov	r2, r0
 810e01a:	460b      	mov	r3, r1
 810e01c:	4630      	mov	r0, r6
 810e01e:	4639      	mov	r1, r7
 810e020:	f7f2 f95e 	bl	81002e0 <__aeabi_dsub>
 810e024:	ec53 2b19 	vmov	r2, r3, d9
 810e028:	4606      	mov	r6, r0
 810e02a:	460f      	mov	r7, r1
 810e02c:	4620      	mov	r0, r4
 810e02e:	4629      	mov	r1, r5
 810e030:	f7f2 f956 	bl	81002e0 <__aeabi_dsub>
 810e034:	4602      	mov	r2, r0
 810e036:	460b      	mov	r3, r1
 810e038:	4650      	mov	r0, sl
 810e03a:	4659      	mov	r1, fp
 810e03c:	f7f2 f950 	bl	81002e0 <__aeabi_dsub>
 810e040:	4642      	mov	r2, r8
 810e042:	464b      	mov	r3, r9
 810e044:	f7f2 fb04 	bl	8100650 <__aeabi_dmul>
 810e048:	4602      	mov	r2, r0
 810e04a:	460b      	mov	r3, r1
 810e04c:	4630      	mov	r0, r6
 810e04e:	4639      	mov	r1, r7
 810e050:	f7f2 f946 	bl	81002e0 <__aeabi_dsub>
 810e054:	ec53 2b1a 	vmov	r2, r3, d10
 810e058:	f7f2 fafa 	bl	8100650 <__aeabi_dmul>
 810e05c:	ec53 2b18 	vmov	r2, r3, d8
 810e060:	ec41 0b19 	vmov	d9, r0, r1
 810e064:	ec51 0b18 	vmov	r0, r1, d8
 810e068:	f7f2 faf2 	bl	8100650 <__aeabi_dmul>
 810e06c:	a37c      	add	r3, pc, #496	; (adr r3, 810e260 <__ieee754_pow+0x708>)
 810e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e072:	4604      	mov	r4, r0
 810e074:	460d      	mov	r5, r1
 810e076:	f7f2 faeb 	bl	8100650 <__aeabi_dmul>
 810e07a:	a37b      	add	r3, pc, #492	; (adr r3, 810e268 <__ieee754_pow+0x710>)
 810e07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e080:	f7f2 f930 	bl	81002e4 <__adddf3>
 810e084:	4622      	mov	r2, r4
 810e086:	462b      	mov	r3, r5
 810e088:	f7f2 fae2 	bl	8100650 <__aeabi_dmul>
 810e08c:	a378      	add	r3, pc, #480	; (adr r3, 810e270 <__ieee754_pow+0x718>)
 810e08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e092:	f7f2 f927 	bl	81002e4 <__adddf3>
 810e096:	4622      	mov	r2, r4
 810e098:	462b      	mov	r3, r5
 810e09a:	f7f2 fad9 	bl	8100650 <__aeabi_dmul>
 810e09e:	a376      	add	r3, pc, #472	; (adr r3, 810e278 <__ieee754_pow+0x720>)
 810e0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e0a4:	f7f2 f91e 	bl	81002e4 <__adddf3>
 810e0a8:	4622      	mov	r2, r4
 810e0aa:	462b      	mov	r3, r5
 810e0ac:	f7f2 fad0 	bl	8100650 <__aeabi_dmul>
 810e0b0:	a373      	add	r3, pc, #460	; (adr r3, 810e280 <__ieee754_pow+0x728>)
 810e0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e0b6:	f7f2 f915 	bl	81002e4 <__adddf3>
 810e0ba:	4622      	mov	r2, r4
 810e0bc:	462b      	mov	r3, r5
 810e0be:	f7f2 fac7 	bl	8100650 <__aeabi_dmul>
 810e0c2:	a371      	add	r3, pc, #452	; (adr r3, 810e288 <__ieee754_pow+0x730>)
 810e0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e0c8:	f7f2 f90c 	bl	81002e4 <__adddf3>
 810e0cc:	4622      	mov	r2, r4
 810e0ce:	4606      	mov	r6, r0
 810e0d0:	460f      	mov	r7, r1
 810e0d2:	462b      	mov	r3, r5
 810e0d4:	4620      	mov	r0, r4
 810e0d6:	4629      	mov	r1, r5
 810e0d8:	f7f2 faba 	bl	8100650 <__aeabi_dmul>
 810e0dc:	4602      	mov	r2, r0
 810e0de:	460b      	mov	r3, r1
 810e0e0:	4630      	mov	r0, r6
 810e0e2:	4639      	mov	r1, r7
 810e0e4:	f7f2 fab4 	bl	8100650 <__aeabi_dmul>
 810e0e8:	4642      	mov	r2, r8
 810e0ea:	4604      	mov	r4, r0
 810e0ec:	460d      	mov	r5, r1
 810e0ee:	464b      	mov	r3, r9
 810e0f0:	ec51 0b18 	vmov	r0, r1, d8
 810e0f4:	f7f2 f8f6 	bl	81002e4 <__adddf3>
 810e0f8:	ec53 2b19 	vmov	r2, r3, d9
 810e0fc:	f7f2 faa8 	bl	8100650 <__aeabi_dmul>
 810e100:	4622      	mov	r2, r4
 810e102:	462b      	mov	r3, r5
 810e104:	f7f2 f8ee 	bl	81002e4 <__adddf3>
 810e108:	4642      	mov	r2, r8
 810e10a:	4682      	mov	sl, r0
 810e10c:	468b      	mov	fp, r1
 810e10e:	464b      	mov	r3, r9
 810e110:	4640      	mov	r0, r8
 810e112:	4649      	mov	r1, r9
 810e114:	f7f2 fa9c 	bl	8100650 <__aeabi_dmul>
 810e118:	4b6b      	ldr	r3, [pc, #428]	; (810e2c8 <__ieee754_pow+0x770>)
 810e11a:	2200      	movs	r2, #0
 810e11c:	4606      	mov	r6, r0
 810e11e:	460f      	mov	r7, r1
 810e120:	f7f2 f8e0 	bl	81002e4 <__adddf3>
 810e124:	4652      	mov	r2, sl
 810e126:	465b      	mov	r3, fp
 810e128:	f7f2 f8dc 	bl	81002e4 <__adddf3>
 810e12c:	2000      	movs	r0, #0
 810e12e:	4604      	mov	r4, r0
 810e130:	460d      	mov	r5, r1
 810e132:	4602      	mov	r2, r0
 810e134:	460b      	mov	r3, r1
 810e136:	4640      	mov	r0, r8
 810e138:	4649      	mov	r1, r9
 810e13a:	f7f2 fa89 	bl	8100650 <__aeabi_dmul>
 810e13e:	4b62      	ldr	r3, [pc, #392]	; (810e2c8 <__ieee754_pow+0x770>)
 810e140:	4680      	mov	r8, r0
 810e142:	4689      	mov	r9, r1
 810e144:	2200      	movs	r2, #0
 810e146:	4620      	mov	r0, r4
 810e148:	4629      	mov	r1, r5
 810e14a:	f7f2 f8c9 	bl	81002e0 <__aeabi_dsub>
 810e14e:	4632      	mov	r2, r6
 810e150:	463b      	mov	r3, r7
 810e152:	f7f2 f8c5 	bl	81002e0 <__aeabi_dsub>
 810e156:	4602      	mov	r2, r0
 810e158:	460b      	mov	r3, r1
 810e15a:	4650      	mov	r0, sl
 810e15c:	4659      	mov	r1, fp
 810e15e:	f7f2 f8bf 	bl	81002e0 <__aeabi_dsub>
 810e162:	ec53 2b18 	vmov	r2, r3, d8
 810e166:	f7f2 fa73 	bl	8100650 <__aeabi_dmul>
 810e16a:	4622      	mov	r2, r4
 810e16c:	4606      	mov	r6, r0
 810e16e:	460f      	mov	r7, r1
 810e170:	462b      	mov	r3, r5
 810e172:	ec51 0b19 	vmov	r0, r1, d9
 810e176:	f7f2 fa6b 	bl	8100650 <__aeabi_dmul>
 810e17a:	4602      	mov	r2, r0
 810e17c:	460b      	mov	r3, r1
 810e17e:	4630      	mov	r0, r6
 810e180:	4639      	mov	r1, r7
 810e182:	f7f2 f8af 	bl	81002e4 <__adddf3>
 810e186:	4606      	mov	r6, r0
 810e188:	460f      	mov	r7, r1
 810e18a:	4602      	mov	r2, r0
 810e18c:	460b      	mov	r3, r1
 810e18e:	4640      	mov	r0, r8
 810e190:	4649      	mov	r1, r9
 810e192:	f7f2 f8a7 	bl	81002e4 <__adddf3>
 810e196:	a33e      	add	r3, pc, #248	; (adr r3, 810e290 <__ieee754_pow+0x738>)
 810e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e19c:	2000      	movs	r0, #0
 810e19e:	4604      	mov	r4, r0
 810e1a0:	460d      	mov	r5, r1
 810e1a2:	f7f2 fa55 	bl	8100650 <__aeabi_dmul>
 810e1a6:	4642      	mov	r2, r8
 810e1a8:	ec41 0b18 	vmov	d8, r0, r1
 810e1ac:	464b      	mov	r3, r9
 810e1ae:	4620      	mov	r0, r4
 810e1b0:	4629      	mov	r1, r5
 810e1b2:	f7f2 f895 	bl	81002e0 <__aeabi_dsub>
 810e1b6:	4602      	mov	r2, r0
 810e1b8:	460b      	mov	r3, r1
 810e1ba:	4630      	mov	r0, r6
 810e1bc:	4639      	mov	r1, r7
 810e1be:	f7f2 f88f 	bl	81002e0 <__aeabi_dsub>
 810e1c2:	a335      	add	r3, pc, #212	; (adr r3, 810e298 <__ieee754_pow+0x740>)
 810e1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1c8:	f7f2 fa42 	bl	8100650 <__aeabi_dmul>
 810e1cc:	a334      	add	r3, pc, #208	; (adr r3, 810e2a0 <__ieee754_pow+0x748>)
 810e1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1d2:	4606      	mov	r6, r0
 810e1d4:	460f      	mov	r7, r1
 810e1d6:	4620      	mov	r0, r4
 810e1d8:	4629      	mov	r1, r5
 810e1da:	f7f2 fa39 	bl	8100650 <__aeabi_dmul>
 810e1de:	4602      	mov	r2, r0
 810e1e0:	460b      	mov	r3, r1
 810e1e2:	4630      	mov	r0, r6
 810e1e4:	4639      	mov	r1, r7
 810e1e6:	f7f2 f87d 	bl	81002e4 <__adddf3>
 810e1ea:	9a07      	ldr	r2, [sp, #28]
 810e1ec:	4b37      	ldr	r3, [pc, #220]	; (810e2cc <__ieee754_pow+0x774>)
 810e1ee:	4413      	add	r3, r2
 810e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1f4:	f7f2 f876 	bl	81002e4 <__adddf3>
 810e1f8:	4682      	mov	sl, r0
 810e1fa:	9805      	ldr	r0, [sp, #20]
 810e1fc:	468b      	mov	fp, r1
 810e1fe:	f7f2 f9bd 	bl	810057c <__aeabi_i2d>
 810e202:	9a07      	ldr	r2, [sp, #28]
 810e204:	4b32      	ldr	r3, [pc, #200]	; (810e2d0 <__ieee754_pow+0x778>)
 810e206:	4413      	add	r3, r2
 810e208:	e9d3 8900 	ldrd	r8, r9, [r3]
 810e20c:	4606      	mov	r6, r0
 810e20e:	460f      	mov	r7, r1
 810e210:	4652      	mov	r2, sl
 810e212:	465b      	mov	r3, fp
 810e214:	ec51 0b18 	vmov	r0, r1, d8
 810e218:	f7f2 f864 	bl	81002e4 <__adddf3>
 810e21c:	4642      	mov	r2, r8
 810e21e:	464b      	mov	r3, r9
 810e220:	f7f2 f860 	bl	81002e4 <__adddf3>
 810e224:	4632      	mov	r2, r6
 810e226:	463b      	mov	r3, r7
 810e228:	f7f2 f85c 	bl	81002e4 <__adddf3>
 810e22c:	2000      	movs	r0, #0
 810e22e:	4632      	mov	r2, r6
 810e230:	463b      	mov	r3, r7
 810e232:	4604      	mov	r4, r0
 810e234:	460d      	mov	r5, r1
 810e236:	f7f2 f853 	bl	81002e0 <__aeabi_dsub>
 810e23a:	4642      	mov	r2, r8
 810e23c:	464b      	mov	r3, r9
 810e23e:	f7f2 f84f 	bl	81002e0 <__aeabi_dsub>
 810e242:	ec53 2b18 	vmov	r2, r3, d8
 810e246:	f7f2 f84b 	bl	81002e0 <__aeabi_dsub>
 810e24a:	4602      	mov	r2, r0
 810e24c:	460b      	mov	r3, r1
 810e24e:	4650      	mov	r0, sl
 810e250:	4659      	mov	r1, fp
 810e252:	e610      	b.n	810de76 <__ieee754_pow+0x31e>
 810e254:	2401      	movs	r4, #1
 810e256:	e6a1      	b.n	810df9c <__ieee754_pow+0x444>
 810e258:	ed9f 7b13 	vldr	d7, [pc, #76]	; 810e2a8 <__ieee754_pow+0x750>
 810e25c:	e617      	b.n	810de8e <__ieee754_pow+0x336>
 810e25e:	bf00      	nop
 810e260:	4a454eef 	.word	0x4a454eef
 810e264:	3fca7e28 	.word	0x3fca7e28
 810e268:	93c9db65 	.word	0x93c9db65
 810e26c:	3fcd864a 	.word	0x3fcd864a
 810e270:	a91d4101 	.word	0xa91d4101
 810e274:	3fd17460 	.word	0x3fd17460
 810e278:	518f264d 	.word	0x518f264d
 810e27c:	3fd55555 	.word	0x3fd55555
 810e280:	db6fabff 	.word	0xdb6fabff
 810e284:	3fdb6db6 	.word	0x3fdb6db6
 810e288:	33333303 	.word	0x33333303
 810e28c:	3fe33333 	.word	0x3fe33333
 810e290:	e0000000 	.word	0xe0000000
 810e294:	3feec709 	.word	0x3feec709
 810e298:	dc3a03fd 	.word	0xdc3a03fd
 810e29c:	3feec709 	.word	0x3feec709
 810e2a0:	145b01f5 	.word	0x145b01f5
 810e2a4:	be3e2fe0 	.word	0xbe3e2fe0
 810e2a8:	00000000 	.word	0x00000000
 810e2ac:	3ff00000 	.word	0x3ff00000
 810e2b0:	7ff00000 	.word	0x7ff00000
 810e2b4:	43400000 	.word	0x43400000
 810e2b8:	0003988e 	.word	0x0003988e
 810e2bc:	000bb679 	.word	0x000bb679
 810e2c0:	0810e9f0 	.word	0x0810e9f0
 810e2c4:	3ff00000 	.word	0x3ff00000
 810e2c8:	40080000 	.word	0x40080000
 810e2cc:	0810ea10 	.word	0x0810ea10
 810e2d0:	0810ea00 	.word	0x0810ea00
 810e2d4:	a3b5      	add	r3, pc, #724	; (adr r3, 810e5ac <__ieee754_pow+0xa54>)
 810e2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e2da:	4640      	mov	r0, r8
 810e2dc:	4649      	mov	r1, r9
 810e2de:	f7f2 f801 	bl	81002e4 <__adddf3>
 810e2e2:	4622      	mov	r2, r4
 810e2e4:	ec41 0b1a 	vmov	d10, r0, r1
 810e2e8:	462b      	mov	r3, r5
 810e2ea:	4630      	mov	r0, r6
 810e2ec:	4639      	mov	r1, r7
 810e2ee:	f7f1 fff7 	bl	81002e0 <__aeabi_dsub>
 810e2f2:	4602      	mov	r2, r0
 810e2f4:	460b      	mov	r3, r1
 810e2f6:	ec51 0b1a 	vmov	r0, r1, d10
 810e2fa:	f7f2 fc39 	bl	8100b70 <__aeabi_dcmpgt>
 810e2fe:	2800      	cmp	r0, #0
 810e300:	f47f ae04 	bne.w	810df0c <__ieee754_pow+0x3b4>
 810e304:	4aa4      	ldr	r2, [pc, #656]	; (810e598 <__ieee754_pow+0xa40>)
 810e306:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810e30a:	4293      	cmp	r3, r2
 810e30c:	f340 8108 	ble.w	810e520 <__ieee754_pow+0x9c8>
 810e310:	151b      	asrs	r3, r3, #20
 810e312:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810e316:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810e31a:	fa4a f303 	asr.w	r3, sl, r3
 810e31e:	445b      	add	r3, fp
 810e320:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810e324:	4e9d      	ldr	r6, [pc, #628]	; (810e59c <__ieee754_pow+0xa44>)
 810e326:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810e32a:	4116      	asrs	r6, r2
 810e32c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810e330:	2000      	movs	r0, #0
 810e332:	ea23 0106 	bic.w	r1, r3, r6
 810e336:	f1c2 0214 	rsb	r2, r2, #20
 810e33a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810e33e:	fa4a fa02 	asr.w	sl, sl, r2
 810e342:	f1bb 0f00 	cmp.w	fp, #0
 810e346:	4602      	mov	r2, r0
 810e348:	460b      	mov	r3, r1
 810e34a:	4620      	mov	r0, r4
 810e34c:	4629      	mov	r1, r5
 810e34e:	bfb8      	it	lt
 810e350:	f1ca 0a00 	rsblt	sl, sl, #0
 810e354:	f7f1 ffc4 	bl	81002e0 <__aeabi_dsub>
 810e358:	ec41 0b19 	vmov	d9, r0, r1
 810e35c:	4642      	mov	r2, r8
 810e35e:	464b      	mov	r3, r9
 810e360:	ec51 0b19 	vmov	r0, r1, d9
 810e364:	f7f1 ffbe 	bl	81002e4 <__adddf3>
 810e368:	a37b      	add	r3, pc, #492	; (adr r3, 810e558 <__ieee754_pow+0xa00>)
 810e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e36e:	2000      	movs	r0, #0
 810e370:	4604      	mov	r4, r0
 810e372:	460d      	mov	r5, r1
 810e374:	f7f2 f96c 	bl	8100650 <__aeabi_dmul>
 810e378:	ec53 2b19 	vmov	r2, r3, d9
 810e37c:	4606      	mov	r6, r0
 810e37e:	460f      	mov	r7, r1
 810e380:	4620      	mov	r0, r4
 810e382:	4629      	mov	r1, r5
 810e384:	f7f1 ffac 	bl	81002e0 <__aeabi_dsub>
 810e388:	4602      	mov	r2, r0
 810e38a:	460b      	mov	r3, r1
 810e38c:	4640      	mov	r0, r8
 810e38e:	4649      	mov	r1, r9
 810e390:	f7f1 ffa6 	bl	81002e0 <__aeabi_dsub>
 810e394:	a372      	add	r3, pc, #456	; (adr r3, 810e560 <__ieee754_pow+0xa08>)
 810e396:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e39a:	f7f2 f959 	bl	8100650 <__aeabi_dmul>
 810e39e:	a372      	add	r3, pc, #456	; (adr r3, 810e568 <__ieee754_pow+0xa10>)
 810e3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e3a4:	4680      	mov	r8, r0
 810e3a6:	4689      	mov	r9, r1
 810e3a8:	4620      	mov	r0, r4
 810e3aa:	4629      	mov	r1, r5
 810e3ac:	f7f2 f950 	bl	8100650 <__aeabi_dmul>
 810e3b0:	4602      	mov	r2, r0
 810e3b2:	460b      	mov	r3, r1
 810e3b4:	4640      	mov	r0, r8
 810e3b6:	4649      	mov	r1, r9
 810e3b8:	f7f1 ff94 	bl	81002e4 <__adddf3>
 810e3bc:	4604      	mov	r4, r0
 810e3be:	460d      	mov	r5, r1
 810e3c0:	4602      	mov	r2, r0
 810e3c2:	460b      	mov	r3, r1
 810e3c4:	4630      	mov	r0, r6
 810e3c6:	4639      	mov	r1, r7
 810e3c8:	f7f1 ff8c 	bl	81002e4 <__adddf3>
 810e3cc:	4632      	mov	r2, r6
 810e3ce:	463b      	mov	r3, r7
 810e3d0:	4680      	mov	r8, r0
 810e3d2:	4689      	mov	r9, r1
 810e3d4:	f7f1 ff84 	bl	81002e0 <__aeabi_dsub>
 810e3d8:	4602      	mov	r2, r0
 810e3da:	460b      	mov	r3, r1
 810e3dc:	4620      	mov	r0, r4
 810e3de:	4629      	mov	r1, r5
 810e3e0:	f7f1 ff7e 	bl	81002e0 <__aeabi_dsub>
 810e3e4:	4642      	mov	r2, r8
 810e3e6:	4606      	mov	r6, r0
 810e3e8:	460f      	mov	r7, r1
 810e3ea:	464b      	mov	r3, r9
 810e3ec:	4640      	mov	r0, r8
 810e3ee:	4649      	mov	r1, r9
 810e3f0:	f7f2 f92e 	bl	8100650 <__aeabi_dmul>
 810e3f4:	a35e      	add	r3, pc, #376	; (adr r3, 810e570 <__ieee754_pow+0xa18>)
 810e3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e3fa:	4604      	mov	r4, r0
 810e3fc:	460d      	mov	r5, r1
 810e3fe:	f7f2 f927 	bl	8100650 <__aeabi_dmul>
 810e402:	a35d      	add	r3, pc, #372	; (adr r3, 810e578 <__ieee754_pow+0xa20>)
 810e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e408:	f7f1 ff6a 	bl	81002e0 <__aeabi_dsub>
 810e40c:	4622      	mov	r2, r4
 810e40e:	462b      	mov	r3, r5
 810e410:	f7f2 f91e 	bl	8100650 <__aeabi_dmul>
 810e414:	a35a      	add	r3, pc, #360	; (adr r3, 810e580 <__ieee754_pow+0xa28>)
 810e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e41a:	f7f1 ff63 	bl	81002e4 <__adddf3>
 810e41e:	4622      	mov	r2, r4
 810e420:	462b      	mov	r3, r5
 810e422:	f7f2 f915 	bl	8100650 <__aeabi_dmul>
 810e426:	a358      	add	r3, pc, #352	; (adr r3, 810e588 <__ieee754_pow+0xa30>)
 810e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e42c:	f7f1 ff58 	bl	81002e0 <__aeabi_dsub>
 810e430:	4622      	mov	r2, r4
 810e432:	462b      	mov	r3, r5
 810e434:	f7f2 f90c 	bl	8100650 <__aeabi_dmul>
 810e438:	a355      	add	r3, pc, #340	; (adr r3, 810e590 <__ieee754_pow+0xa38>)
 810e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e43e:	f7f1 ff51 	bl	81002e4 <__adddf3>
 810e442:	4622      	mov	r2, r4
 810e444:	462b      	mov	r3, r5
 810e446:	f7f2 f903 	bl	8100650 <__aeabi_dmul>
 810e44a:	4602      	mov	r2, r0
 810e44c:	460b      	mov	r3, r1
 810e44e:	4640      	mov	r0, r8
 810e450:	4649      	mov	r1, r9
 810e452:	f7f1 ff45 	bl	81002e0 <__aeabi_dsub>
 810e456:	4604      	mov	r4, r0
 810e458:	460d      	mov	r5, r1
 810e45a:	4602      	mov	r2, r0
 810e45c:	460b      	mov	r3, r1
 810e45e:	4640      	mov	r0, r8
 810e460:	4649      	mov	r1, r9
 810e462:	f7f2 f8f5 	bl	8100650 <__aeabi_dmul>
 810e466:	2200      	movs	r2, #0
 810e468:	ec41 0b19 	vmov	d9, r0, r1
 810e46c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810e470:	4620      	mov	r0, r4
 810e472:	4629      	mov	r1, r5
 810e474:	f7f1 ff34 	bl	81002e0 <__aeabi_dsub>
 810e478:	4602      	mov	r2, r0
 810e47a:	460b      	mov	r3, r1
 810e47c:	ec51 0b19 	vmov	r0, r1, d9
 810e480:	f7f2 fa10 	bl	81008a4 <__aeabi_ddiv>
 810e484:	4632      	mov	r2, r6
 810e486:	4604      	mov	r4, r0
 810e488:	460d      	mov	r5, r1
 810e48a:	463b      	mov	r3, r7
 810e48c:	4640      	mov	r0, r8
 810e48e:	4649      	mov	r1, r9
 810e490:	f7f2 f8de 	bl	8100650 <__aeabi_dmul>
 810e494:	4632      	mov	r2, r6
 810e496:	463b      	mov	r3, r7
 810e498:	f7f1 ff24 	bl	81002e4 <__adddf3>
 810e49c:	4602      	mov	r2, r0
 810e49e:	460b      	mov	r3, r1
 810e4a0:	4620      	mov	r0, r4
 810e4a2:	4629      	mov	r1, r5
 810e4a4:	f7f1 ff1c 	bl	81002e0 <__aeabi_dsub>
 810e4a8:	4642      	mov	r2, r8
 810e4aa:	464b      	mov	r3, r9
 810e4ac:	f7f1 ff18 	bl	81002e0 <__aeabi_dsub>
 810e4b0:	460b      	mov	r3, r1
 810e4b2:	4602      	mov	r2, r0
 810e4b4:	493a      	ldr	r1, [pc, #232]	; (810e5a0 <__ieee754_pow+0xa48>)
 810e4b6:	2000      	movs	r0, #0
 810e4b8:	f7f1 ff12 	bl	81002e0 <__aeabi_dsub>
 810e4bc:	ec41 0b10 	vmov	d0, r0, r1
 810e4c0:	ee10 3a90 	vmov	r3, s1
 810e4c4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810e4c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e4cc:	da2b      	bge.n	810e526 <__ieee754_pow+0x9ce>
 810e4ce:	4650      	mov	r0, sl
 810e4d0:	f000 f966 	bl	810e7a0 <scalbn>
 810e4d4:	ec51 0b10 	vmov	r0, r1, d0
 810e4d8:	ec53 2b18 	vmov	r2, r3, d8
 810e4dc:	f7ff bbed 	b.w	810dcba <__ieee754_pow+0x162>
 810e4e0:	4b30      	ldr	r3, [pc, #192]	; (810e5a4 <__ieee754_pow+0xa4c>)
 810e4e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810e4e6:	429e      	cmp	r6, r3
 810e4e8:	f77f af0c 	ble.w	810e304 <__ieee754_pow+0x7ac>
 810e4ec:	4b2e      	ldr	r3, [pc, #184]	; (810e5a8 <__ieee754_pow+0xa50>)
 810e4ee:	440b      	add	r3, r1
 810e4f0:	4303      	orrs	r3, r0
 810e4f2:	d009      	beq.n	810e508 <__ieee754_pow+0x9b0>
 810e4f4:	ec51 0b18 	vmov	r0, r1, d8
 810e4f8:	2200      	movs	r2, #0
 810e4fa:	2300      	movs	r3, #0
 810e4fc:	f7f2 fb1a 	bl	8100b34 <__aeabi_dcmplt>
 810e500:	3800      	subs	r0, #0
 810e502:	bf18      	it	ne
 810e504:	2001      	movne	r0, #1
 810e506:	e447      	b.n	810dd98 <__ieee754_pow+0x240>
 810e508:	4622      	mov	r2, r4
 810e50a:	462b      	mov	r3, r5
 810e50c:	f7f1 fee8 	bl	81002e0 <__aeabi_dsub>
 810e510:	4642      	mov	r2, r8
 810e512:	464b      	mov	r3, r9
 810e514:	f7f2 fb22 	bl	8100b5c <__aeabi_dcmpge>
 810e518:	2800      	cmp	r0, #0
 810e51a:	f43f aef3 	beq.w	810e304 <__ieee754_pow+0x7ac>
 810e51e:	e7e9      	b.n	810e4f4 <__ieee754_pow+0x99c>
 810e520:	f04f 0a00 	mov.w	sl, #0
 810e524:	e71a      	b.n	810e35c <__ieee754_pow+0x804>
 810e526:	ec51 0b10 	vmov	r0, r1, d0
 810e52a:	4619      	mov	r1, r3
 810e52c:	e7d4      	b.n	810e4d8 <__ieee754_pow+0x980>
 810e52e:	491c      	ldr	r1, [pc, #112]	; (810e5a0 <__ieee754_pow+0xa48>)
 810e530:	2000      	movs	r0, #0
 810e532:	f7ff bb30 	b.w	810db96 <__ieee754_pow+0x3e>
 810e536:	2000      	movs	r0, #0
 810e538:	2100      	movs	r1, #0
 810e53a:	f7ff bb2c 	b.w	810db96 <__ieee754_pow+0x3e>
 810e53e:	4630      	mov	r0, r6
 810e540:	4639      	mov	r1, r7
 810e542:	f7ff bb28 	b.w	810db96 <__ieee754_pow+0x3e>
 810e546:	9204      	str	r2, [sp, #16]
 810e548:	f7ff bb7a 	b.w	810dc40 <__ieee754_pow+0xe8>
 810e54c:	2300      	movs	r3, #0
 810e54e:	f7ff bb64 	b.w	810dc1a <__ieee754_pow+0xc2>
 810e552:	bf00      	nop
 810e554:	f3af 8000 	nop.w
 810e558:	00000000 	.word	0x00000000
 810e55c:	3fe62e43 	.word	0x3fe62e43
 810e560:	fefa39ef 	.word	0xfefa39ef
 810e564:	3fe62e42 	.word	0x3fe62e42
 810e568:	0ca86c39 	.word	0x0ca86c39
 810e56c:	be205c61 	.word	0xbe205c61
 810e570:	72bea4d0 	.word	0x72bea4d0
 810e574:	3e663769 	.word	0x3e663769
 810e578:	c5d26bf1 	.word	0xc5d26bf1
 810e57c:	3ebbbd41 	.word	0x3ebbbd41
 810e580:	af25de2c 	.word	0xaf25de2c
 810e584:	3f11566a 	.word	0x3f11566a
 810e588:	16bebd93 	.word	0x16bebd93
 810e58c:	3f66c16c 	.word	0x3f66c16c
 810e590:	5555553e 	.word	0x5555553e
 810e594:	3fc55555 	.word	0x3fc55555
 810e598:	3fe00000 	.word	0x3fe00000
 810e59c:	000fffff 	.word	0x000fffff
 810e5a0:	3ff00000 	.word	0x3ff00000
 810e5a4:	4090cbff 	.word	0x4090cbff
 810e5a8:	3f6f3400 	.word	0x3f6f3400
 810e5ac:	652b82fe 	.word	0x652b82fe
 810e5b0:	3c971547 	.word	0x3c971547

0810e5b4 <__ieee754_sqrt>:
 810e5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e5b8:	ec55 4b10 	vmov	r4, r5, d0
 810e5bc:	4e55      	ldr	r6, [pc, #340]	; (810e714 <__ieee754_sqrt+0x160>)
 810e5be:	43ae      	bics	r6, r5
 810e5c0:	ee10 0a10 	vmov	r0, s0
 810e5c4:	ee10 3a10 	vmov	r3, s0
 810e5c8:	462a      	mov	r2, r5
 810e5ca:	4629      	mov	r1, r5
 810e5cc:	d110      	bne.n	810e5f0 <__ieee754_sqrt+0x3c>
 810e5ce:	ee10 2a10 	vmov	r2, s0
 810e5d2:	462b      	mov	r3, r5
 810e5d4:	f7f2 f83c 	bl	8100650 <__aeabi_dmul>
 810e5d8:	4602      	mov	r2, r0
 810e5da:	460b      	mov	r3, r1
 810e5dc:	4620      	mov	r0, r4
 810e5de:	4629      	mov	r1, r5
 810e5e0:	f7f1 fe80 	bl	81002e4 <__adddf3>
 810e5e4:	4604      	mov	r4, r0
 810e5e6:	460d      	mov	r5, r1
 810e5e8:	ec45 4b10 	vmov	d0, r4, r5
 810e5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e5f0:	2d00      	cmp	r5, #0
 810e5f2:	dc10      	bgt.n	810e616 <__ieee754_sqrt+0x62>
 810e5f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810e5f8:	4330      	orrs	r0, r6
 810e5fa:	d0f5      	beq.n	810e5e8 <__ieee754_sqrt+0x34>
 810e5fc:	b15d      	cbz	r5, 810e616 <__ieee754_sqrt+0x62>
 810e5fe:	ee10 2a10 	vmov	r2, s0
 810e602:	462b      	mov	r3, r5
 810e604:	ee10 0a10 	vmov	r0, s0
 810e608:	f7f1 fe6a 	bl	81002e0 <__aeabi_dsub>
 810e60c:	4602      	mov	r2, r0
 810e60e:	460b      	mov	r3, r1
 810e610:	f7f2 f948 	bl	81008a4 <__aeabi_ddiv>
 810e614:	e7e6      	b.n	810e5e4 <__ieee754_sqrt+0x30>
 810e616:	1512      	asrs	r2, r2, #20
 810e618:	d074      	beq.n	810e704 <__ieee754_sqrt+0x150>
 810e61a:	07d4      	lsls	r4, r2, #31
 810e61c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 810e620:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 810e624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810e628:	bf5e      	ittt	pl
 810e62a:	0fda      	lsrpl	r2, r3, #31
 810e62c:	005b      	lslpl	r3, r3, #1
 810e62e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 810e632:	2400      	movs	r4, #0
 810e634:	0fda      	lsrs	r2, r3, #31
 810e636:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 810e63a:	107f      	asrs	r7, r7, #1
 810e63c:	005b      	lsls	r3, r3, #1
 810e63e:	2516      	movs	r5, #22
 810e640:	4620      	mov	r0, r4
 810e642:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 810e646:	1886      	adds	r6, r0, r2
 810e648:	428e      	cmp	r6, r1
 810e64a:	bfde      	ittt	le
 810e64c:	1b89      	suble	r1, r1, r6
 810e64e:	18b0      	addle	r0, r6, r2
 810e650:	18a4      	addle	r4, r4, r2
 810e652:	0049      	lsls	r1, r1, #1
 810e654:	3d01      	subs	r5, #1
 810e656:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 810e65a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 810e65e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e662:	d1f0      	bne.n	810e646 <__ieee754_sqrt+0x92>
 810e664:	462a      	mov	r2, r5
 810e666:	f04f 0e20 	mov.w	lr, #32
 810e66a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 810e66e:	4281      	cmp	r1, r0
 810e670:	eb06 0c05 	add.w	ip, r6, r5
 810e674:	dc02      	bgt.n	810e67c <__ieee754_sqrt+0xc8>
 810e676:	d113      	bne.n	810e6a0 <__ieee754_sqrt+0xec>
 810e678:	459c      	cmp	ip, r3
 810e67a:	d811      	bhi.n	810e6a0 <__ieee754_sqrt+0xec>
 810e67c:	f1bc 0f00 	cmp.w	ip, #0
 810e680:	eb0c 0506 	add.w	r5, ip, r6
 810e684:	da43      	bge.n	810e70e <__ieee754_sqrt+0x15a>
 810e686:	2d00      	cmp	r5, #0
 810e688:	db41      	blt.n	810e70e <__ieee754_sqrt+0x15a>
 810e68a:	f100 0801 	add.w	r8, r0, #1
 810e68e:	1a09      	subs	r1, r1, r0
 810e690:	459c      	cmp	ip, r3
 810e692:	bf88      	it	hi
 810e694:	f101 31ff 	addhi.w	r1, r1, #4294967295
 810e698:	eba3 030c 	sub.w	r3, r3, ip
 810e69c:	4432      	add	r2, r6
 810e69e:	4640      	mov	r0, r8
 810e6a0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 810e6a4:	f1be 0e01 	subs.w	lr, lr, #1
 810e6a8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 810e6ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e6b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 810e6b4:	d1db      	bne.n	810e66e <__ieee754_sqrt+0xba>
 810e6b6:	430b      	orrs	r3, r1
 810e6b8:	d006      	beq.n	810e6c8 <__ieee754_sqrt+0x114>
 810e6ba:	1c50      	adds	r0, r2, #1
 810e6bc:	bf13      	iteet	ne
 810e6be:	3201      	addne	r2, #1
 810e6c0:	3401      	addeq	r4, #1
 810e6c2:	4672      	moveq	r2, lr
 810e6c4:	f022 0201 	bicne.w	r2, r2, #1
 810e6c8:	1063      	asrs	r3, r4, #1
 810e6ca:	0852      	lsrs	r2, r2, #1
 810e6cc:	07e1      	lsls	r1, r4, #31
 810e6ce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810e6d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810e6d6:	bf48      	it	mi
 810e6d8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 810e6dc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 810e6e0:	4614      	mov	r4, r2
 810e6e2:	e781      	b.n	810e5e8 <__ieee754_sqrt+0x34>
 810e6e4:	0ad9      	lsrs	r1, r3, #11
 810e6e6:	3815      	subs	r0, #21
 810e6e8:	055b      	lsls	r3, r3, #21
 810e6ea:	2900      	cmp	r1, #0
 810e6ec:	d0fa      	beq.n	810e6e4 <__ieee754_sqrt+0x130>
 810e6ee:	02cd      	lsls	r5, r1, #11
 810e6f0:	d50a      	bpl.n	810e708 <__ieee754_sqrt+0x154>
 810e6f2:	f1c2 0420 	rsb	r4, r2, #32
 810e6f6:	fa23 f404 	lsr.w	r4, r3, r4
 810e6fa:	1e55      	subs	r5, r2, #1
 810e6fc:	4093      	lsls	r3, r2
 810e6fe:	4321      	orrs	r1, r4
 810e700:	1b42      	subs	r2, r0, r5
 810e702:	e78a      	b.n	810e61a <__ieee754_sqrt+0x66>
 810e704:	4610      	mov	r0, r2
 810e706:	e7f0      	b.n	810e6ea <__ieee754_sqrt+0x136>
 810e708:	0049      	lsls	r1, r1, #1
 810e70a:	3201      	adds	r2, #1
 810e70c:	e7ef      	b.n	810e6ee <__ieee754_sqrt+0x13a>
 810e70e:	4680      	mov	r8, r0
 810e710:	e7bd      	b.n	810e68e <__ieee754_sqrt+0xda>
 810e712:	bf00      	nop
 810e714:	7ff00000 	.word	0x7ff00000

0810e718 <with_errno>:
 810e718:	b570      	push	{r4, r5, r6, lr}
 810e71a:	4604      	mov	r4, r0
 810e71c:	460d      	mov	r5, r1
 810e71e:	4616      	mov	r6, r2
 810e720:	f000 f8c4 	bl	810e8ac <__errno>
 810e724:	4629      	mov	r1, r5
 810e726:	6006      	str	r6, [r0, #0]
 810e728:	4620      	mov	r0, r4
 810e72a:	bd70      	pop	{r4, r5, r6, pc}

0810e72c <xflow>:
 810e72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810e72e:	4614      	mov	r4, r2
 810e730:	461d      	mov	r5, r3
 810e732:	b108      	cbz	r0, 810e738 <xflow+0xc>
 810e734:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 810e738:	e9cd 2300 	strd	r2, r3, [sp]
 810e73c:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e740:	4620      	mov	r0, r4
 810e742:	4629      	mov	r1, r5
 810e744:	f7f1 ff84 	bl	8100650 <__aeabi_dmul>
 810e748:	2222      	movs	r2, #34	; 0x22
 810e74a:	b003      	add	sp, #12
 810e74c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810e750:	f7ff bfe2 	b.w	810e718 <with_errno>

0810e754 <__math_uflow>:
 810e754:	b508      	push	{r3, lr}
 810e756:	2200      	movs	r2, #0
 810e758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810e75c:	f7ff ffe6 	bl	810e72c <xflow>
 810e760:	ec41 0b10 	vmov	d0, r0, r1
 810e764:	bd08      	pop	{r3, pc}

0810e766 <__math_oflow>:
 810e766:	b508      	push	{r3, lr}
 810e768:	2200      	movs	r2, #0
 810e76a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 810e76e:	f7ff ffdd 	bl	810e72c <xflow>
 810e772:	ec41 0b10 	vmov	d0, r0, r1
 810e776:	bd08      	pop	{r3, pc}

0810e778 <fabs>:
 810e778:	ec51 0b10 	vmov	r0, r1, d0
 810e77c:	ee10 2a10 	vmov	r2, s0
 810e780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810e784:	ec43 2b10 	vmov	d0, r2, r3
 810e788:	4770      	bx	lr

0810e78a <finite>:
 810e78a:	b082      	sub	sp, #8
 810e78c:	ed8d 0b00 	vstr	d0, [sp]
 810e790:	9801      	ldr	r0, [sp, #4]
 810e792:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810e796:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810e79a:	0fc0      	lsrs	r0, r0, #31
 810e79c:	b002      	add	sp, #8
 810e79e:	4770      	bx	lr

0810e7a0 <scalbn>:
 810e7a0:	b570      	push	{r4, r5, r6, lr}
 810e7a2:	ec55 4b10 	vmov	r4, r5, d0
 810e7a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810e7aa:	4606      	mov	r6, r0
 810e7ac:	462b      	mov	r3, r5
 810e7ae:	b99a      	cbnz	r2, 810e7d8 <scalbn+0x38>
 810e7b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810e7b4:	4323      	orrs	r3, r4
 810e7b6:	d036      	beq.n	810e826 <scalbn+0x86>
 810e7b8:	4b39      	ldr	r3, [pc, #228]	; (810e8a0 <scalbn+0x100>)
 810e7ba:	4629      	mov	r1, r5
 810e7bc:	ee10 0a10 	vmov	r0, s0
 810e7c0:	2200      	movs	r2, #0
 810e7c2:	f7f1 ff45 	bl	8100650 <__aeabi_dmul>
 810e7c6:	4b37      	ldr	r3, [pc, #220]	; (810e8a4 <scalbn+0x104>)
 810e7c8:	429e      	cmp	r6, r3
 810e7ca:	4604      	mov	r4, r0
 810e7cc:	460d      	mov	r5, r1
 810e7ce:	da10      	bge.n	810e7f2 <scalbn+0x52>
 810e7d0:	a32b      	add	r3, pc, #172	; (adr r3, 810e880 <scalbn+0xe0>)
 810e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e7d6:	e03a      	b.n	810e84e <scalbn+0xae>
 810e7d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810e7dc:	428a      	cmp	r2, r1
 810e7de:	d10c      	bne.n	810e7fa <scalbn+0x5a>
 810e7e0:	ee10 2a10 	vmov	r2, s0
 810e7e4:	4620      	mov	r0, r4
 810e7e6:	4629      	mov	r1, r5
 810e7e8:	f7f1 fd7c 	bl	81002e4 <__adddf3>
 810e7ec:	4604      	mov	r4, r0
 810e7ee:	460d      	mov	r5, r1
 810e7f0:	e019      	b.n	810e826 <scalbn+0x86>
 810e7f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810e7f6:	460b      	mov	r3, r1
 810e7f8:	3a36      	subs	r2, #54	; 0x36
 810e7fa:	4432      	add	r2, r6
 810e7fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810e800:	428a      	cmp	r2, r1
 810e802:	dd08      	ble.n	810e816 <scalbn+0x76>
 810e804:	2d00      	cmp	r5, #0
 810e806:	a120      	add	r1, pc, #128	; (adr r1, 810e888 <scalbn+0xe8>)
 810e808:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e80c:	da1c      	bge.n	810e848 <scalbn+0xa8>
 810e80e:	a120      	add	r1, pc, #128	; (adr r1, 810e890 <scalbn+0xf0>)
 810e810:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e814:	e018      	b.n	810e848 <scalbn+0xa8>
 810e816:	2a00      	cmp	r2, #0
 810e818:	dd08      	ble.n	810e82c <scalbn+0x8c>
 810e81a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e81e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e822:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810e826:	ec45 4b10 	vmov	d0, r4, r5
 810e82a:	bd70      	pop	{r4, r5, r6, pc}
 810e82c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810e830:	da19      	bge.n	810e866 <scalbn+0xc6>
 810e832:	f24c 3350 	movw	r3, #50000	; 0xc350
 810e836:	429e      	cmp	r6, r3
 810e838:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810e83c:	dd0a      	ble.n	810e854 <scalbn+0xb4>
 810e83e:	a112      	add	r1, pc, #72	; (adr r1, 810e888 <scalbn+0xe8>)
 810e840:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e844:	2b00      	cmp	r3, #0
 810e846:	d1e2      	bne.n	810e80e <scalbn+0x6e>
 810e848:	a30f      	add	r3, pc, #60	; (adr r3, 810e888 <scalbn+0xe8>)
 810e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e84e:	f7f1 feff 	bl	8100650 <__aeabi_dmul>
 810e852:	e7cb      	b.n	810e7ec <scalbn+0x4c>
 810e854:	a10a      	add	r1, pc, #40	; (adr r1, 810e880 <scalbn+0xe0>)
 810e856:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e85a:	2b00      	cmp	r3, #0
 810e85c:	d0b8      	beq.n	810e7d0 <scalbn+0x30>
 810e85e:	a10e      	add	r1, pc, #56	; (adr r1, 810e898 <scalbn+0xf8>)
 810e860:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e864:	e7b4      	b.n	810e7d0 <scalbn+0x30>
 810e866:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e86a:	3236      	adds	r2, #54	; 0x36
 810e86c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e870:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810e874:	4620      	mov	r0, r4
 810e876:	4b0c      	ldr	r3, [pc, #48]	; (810e8a8 <scalbn+0x108>)
 810e878:	2200      	movs	r2, #0
 810e87a:	e7e8      	b.n	810e84e <scalbn+0xae>
 810e87c:	f3af 8000 	nop.w
 810e880:	c2f8f359 	.word	0xc2f8f359
 810e884:	01a56e1f 	.word	0x01a56e1f
 810e888:	8800759c 	.word	0x8800759c
 810e88c:	7e37e43c 	.word	0x7e37e43c
 810e890:	8800759c 	.word	0x8800759c
 810e894:	fe37e43c 	.word	0xfe37e43c
 810e898:	c2f8f359 	.word	0xc2f8f359
 810e89c:	81a56e1f 	.word	0x81a56e1f
 810e8a0:	43500000 	.word	0x43500000
 810e8a4:	ffff3cb0 	.word	0xffff3cb0
 810e8a8:	3c900000 	.word	0x3c900000

0810e8ac <__errno>:
 810e8ac:	4b01      	ldr	r3, [pc, #4]	; (810e8b4 <__errno+0x8>)
 810e8ae:	6818      	ldr	r0, [r3, #0]
 810e8b0:	4770      	bx	lr
 810e8b2:	bf00      	nop
 810e8b4:	10000010 	.word	0x10000010

0810e8b8 <__libc_init_array>:
 810e8b8:	b570      	push	{r4, r5, r6, lr}
 810e8ba:	4d0d      	ldr	r5, [pc, #52]	; (810e8f0 <__libc_init_array+0x38>)
 810e8bc:	4c0d      	ldr	r4, [pc, #52]	; (810e8f4 <__libc_init_array+0x3c>)
 810e8be:	1b64      	subs	r4, r4, r5
 810e8c0:	10a4      	asrs	r4, r4, #2
 810e8c2:	2600      	movs	r6, #0
 810e8c4:	42a6      	cmp	r6, r4
 810e8c6:	d109      	bne.n	810e8dc <__libc_init_array+0x24>
 810e8c8:	4d0b      	ldr	r5, [pc, #44]	; (810e8f8 <__libc_init_array+0x40>)
 810e8ca:	4c0c      	ldr	r4, [pc, #48]	; (810e8fc <__libc_init_array+0x44>)
 810e8cc:	f000 f820 	bl	810e910 <_init>
 810e8d0:	1b64      	subs	r4, r4, r5
 810e8d2:	10a4      	asrs	r4, r4, #2
 810e8d4:	2600      	movs	r6, #0
 810e8d6:	42a6      	cmp	r6, r4
 810e8d8:	d105      	bne.n	810e8e6 <__libc_init_array+0x2e>
 810e8da:	bd70      	pop	{r4, r5, r6, pc}
 810e8dc:	f855 3b04 	ldr.w	r3, [r5], #4
 810e8e0:	4798      	blx	r3
 810e8e2:	3601      	adds	r6, #1
 810e8e4:	e7ee      	b.n	810e8c4 <__libc_init_array+0xc>
 810e8e6:	f855 3b04 	ldr.w	r3, [r5], #4
 810e8ea:	4798      	blx	r3
 810e8ec:	3601      	adds	r6, #1
 810e8ee:	e7f2      	b.n	810e8d6 <__libc_init_array+0x1e>
 810e8f0:	0810ea28 	.word	0x0810ea28
 810e8f4:	0810ea28 	.word	0x0810ea28
 810e8f8:	0810ea28 	.word	0x0810ea28
 810e8fc:	0810ea2c 	.word	0x0810ea2c

0810e900 <memset>:
 810e900:	4402      	add	r2, r0
 810e902:	4603      	mov	r3, r0
 810e904:	4293      	cmp	r3, r2
 810e906:	d100      	bne.n	810e90a <memset+0xa>
 810e908:	4770      	bx	lr
 810e90a:	f803 1b01 	strb.w	r1, [r3], #1
 810e90e:	e7f9      	b.n	810e904 <memset+0x4>

0810e910 <_init>:
 810e910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e912:	bf00      	nop
 810e914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e916:	bc08      	pop	{r3}
 810e918:	469e      	mov	lr, r3
 810e91a:	4770      	bx	lr

0810e91c <_fini>:
 810e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e91e:	bf00      	nop
 810e920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e922:	bc08      	pop	{r3}
 810e924:	469e      	mov	lr, r3
 810e926:	4770      	bx	lr
