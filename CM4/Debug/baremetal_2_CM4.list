
baremetal_2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e680  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0810e918  0810e918  0001e918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ea10  0810ea10  0001ea10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ea18  0810ea18  0001ea18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810ea1c  0810ea1c  0001ea1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  0810ea20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000059c  10000074  0810ea94  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000610  0810ea94  00020610  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000329a1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000520b  00000000  00000000  00052a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000049de  00000000  00000000  00057c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017c0  00000000  00000000  0005c630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002310  00000000  00000000  0005ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f8fa  00000000  00000000  00060100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024c83  00000000  00000000  0009f9fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00193e9a  00000000  00000000  000c467d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00258517  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000066e4  00000000  00000000  00258568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000074 	.word	0x10000074
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810e900 	.word	0x0810e900

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000078 	.word	0x10000078
 81002d4:	0810e900 	.word	0x0810e900

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9bf 	b.w	810120c <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b974 	b.w	810120c <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468e      	mov	lr, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	d14d      	bne.n	8100fe6 <__udivmoddi4+0xaa>
 8100f4a:	428a      	cmp	r2, r1
 8100f4c:	4694      	mov	ip, r2
 8100f4e:	d969      	bls.n	8101024 <__udivmoddi4+0xe8>
 8100f50:	fab2 f282 	clz	r2, r2
 8100f54:	b152      	cbz	r2, 8100f6c <__udivmoddi4+0x30>
 8100f56:	fa01 f302 	lsl.w	r3, r1, r2
 8100f5a:	f1c2 0120 	rsb	r1, r2, #32
 8100f5e:	fa20 f101 	lsr.w	r1, r0, r1
 8100f62:	fa0c fc02 	lsl.w	ip, ip, r2
 8100f66:	ea41 0e03 	orr.w	lr, r1, r3
 8100f6a:	4094      	lsls	r4, r2
 8100f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f70:	0c21      	lsrs	r1, r4, #16
 8100f72:	fbbe f6f8 	udiv	r6, lr, r8
 8100f76:	fa1f f78c 	uxth.w	r7, ip
 8100f7a:	fb08 e316 	mls	r3, r8, r6, lr
 8100f7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100f82:	fb06 f107 	mul.w	r1, r6, r7
 8100f86:	4299      	cmp	r1, r3
 8100f88:	d90a      	bls.n	8100fa0 <__udivmoddi4+0x64>
 8100f8a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f92:	f080 811f 	bcs.w	81011d4 <__udivmoddi4+0x298>
 8100f96:	4299      	cmp	r1, r3
 8100f98:	f240 811c 	bls.w	81011d4 <__udivmoddi4+0x298>
 8100f9c:	3e02      	subs	r6, #2
 8100f9e:	4463      	add	r3, ip
 8100fa0:	1a5b      	subs	r3, r3, r1
 8100fa2:	b2a4      	uxth	r4, r4
 8100fa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa8:	fb08 3310 	mls	r3, r8, r0, r3
 8100fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fb0:	fb00 f707 	mul.w	r7, r0, r7
 8100fb4:	42a7      	cmp	r7, r4
 8100fb6:	d90a      	bls.n	8100fce <__udivmoddi4+0x92>
 8100fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8100fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fc0:	f080 810a 	bcs.w	81011d8 <__udivmoddi4+0x29c>
 8100fc4:	42a7      	cmp	r7, r4
 8100fc6:	f240 8107 	bls.w	81011d8 <__udivmoddi4+0x29c>
 8100fca:	4464      	add	r4, ip
 8100fcc:	3802      	subs	r0, #2
 8100fce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fd2:	1be4      	subs	r4, r4, r7
 8100fd4:	2600      	movs	r6, #0
 8100fd6:	b11d      	cbz	r5, 8100fe0 <__udivmoddi4+0xa4>
 8100fd8:	40d4      	lsrs	r4, r2
 8100fda:	2300      	movs	r3, #0
 8100fdc:	e9c5 4300 	strd	r4, r3, [r5]
 8100fe0:	4631      	mov	r1, r6
 8100fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe6:	428b      	cmp	r3, r1
 8100fe8:	d909      	bls.n	8100ffe <__udivmoddi4+0xc2>
 8100fea:	2d00      	cmp	r5, #0
 8100fec:	f000 80ef 	beq.w	81011ce <__udivmoddi4+0x292>
 8100ff0:	2600      	movs	r6, #0
 8100ff2:	e9c5 0100 	strd	r0, r1, [r5]
 8100ff6:	4630      	mov	r0, r6
 8100ff8:	4631      	mov	r1, r6
 8100ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ffe:	fab3 f683 	clz	r6, r3
 8101002:	2e00      	cmp	r6, #0
 8101004:	d14a      	bne.n	810109c <__udivmoddi4+0x160>
 8101006:	428b      	cmp	r3, r1
 8101008:	d302      	bcc.n	8101010 <__udivmoddi4+0xd4>
 810100a:	4282      	cmp	r2, r0
 810100c:	f200 80f9 	bhi.w	8101202 <__udivmoddi4+0x2c6>
 8101010:	1a84      	subs	r4, r0, r2
 8101012:	eb61 0303 	sbc.w	r3, r1, r3
 8101016:	2001      	movs	r0, #1
 8101018:	469e      	mov	lr, r3
 810101a:	2d00      	cmp	r5, #0
 810101c:	d0e0      	beq.n	8100fe0 <__udivmoddi4+0xa4>
 810101e:	e9c5 4e00 	strd	r4, lr, [r5]
 8101022:	e7dd      	b.n	8100fe0 <__udivmoddi4+0xa4>
 8101024:	b902      	cbnz	r2, 8101028 <__udivmoddi4+0xec>
 8101026:	deff      	udf	#255	; 0xff
 8101028:	fab2 f282 	clz	r2, r2
 810102c:	2a00      	cmp	r2, #0
 810102e:	f040 8092 	bne.w	8101156 <__udivmoddi4+0x21a>
 8101032:	eba1 010c 	sub.w	r1, r1, ip
 8101036:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810103a:	fa1f fe8c 	uxth.w	lr, ip
 810103e:	2601      	movs	r6, #1
 8101040:	0c20      	lsrs	r0, r4, #16
 8101042:	fbb1 f3f7 	udiv	r3, r1, r7
 8101046:	fb07 1113 	mls	r1, r7, r3, r1
 810104a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810104e:	fb0e f003 	mul.w	r0, lr, r3
 8101052:	4288      	cmp	r0, r1
 8101054:	d908      	bls.n	8101068 <__udivmoddi4+0x12c>
 8101056:	eb1c 0101 	adds.w	r1, ip, r1
 810105a:	f103 38ff 	add.w	r8, r3, #4294967295
 810105e:	d202      	bcs.n	8101066 <__udivmoddi4+0x12a>
 8101060:	4288      	cmp	r0, r1
 8101062:	f200 80cb 	bhi.w	81011fc <__udivmoddi4+0x2c0>
 8101066:	4643      	mov	r3, r8
 8101068:	1a09      	subs	r1, r1, r0
 810106a:	b2a4      	uxth	r4, r4
 810106c:	fbb1 f0f7 	udiv	r0, r1, r7
 8101070:	fb07 1110 	mls	r1, r7, r0, r1
 8101074:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8101078:	fb0e fe00 	mul.w	lr, lr, r0
 810107c:	45a6      	cmp	lr, r4
 810107e:	d908      	bls.n	8101092 <__udivmoddi4+0x156>
 8101080:	eb1c 0404 	adds.w	r4, ip, r4
 8101084:	f100 31ff 	add.w	r1, r0, #4294967295
 8101088:	d202      	bcs.n	8101090 <__udivmoddi4+0x154>
 810108a:	45a6      	cmp	lr, r4
 810108c:	f200 80bb 	bhi.w	8101206 <__udivmoddi4+0x2ca>
 8101090:	4608      	mov	r0, r1
 8101092:	eba4 040e 	sub.w	r4, r4, lr
 8101096:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810109a:	e79c      	b.n	8100fd6 <__udivmoddi4+0x9a>
 810109c:	f1c6 0720 	rsb	r7, r6, #32
 81010a0:	40b3      	lsls	r3, r6
 81010a2:	fa22 fc07 	lsr.w	ip, r2, r7
 81010a6:	ea4c 0c03 	orr.w	ip, ip, r3
 81010aa:	fa20 f407 	lsr.w	r4, r0, r7
 81010ae:	fa01 f306 	lsl.w	r3, r1, r6
 81010b2:	431c      	orrs	r4, r3
 81010b4:	40f9      	lsrs	r1, r7
 81010b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 81010ba:	fa00 f306 	lsl.w	r3, r0, r6
 81010be:	fbb1 f8f9 	udiv	r8, r1, r9
 81010c2:	0c20      	lsrs	r0, r4, #16
 81010c4:	fa1f fe8c 	uxth.w	lr, ip
 81010c8:	fb09 1118 	mls	r1, r9, r8, r1
 81010cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81010d0:	fb08 f00e 	mul.w	r0, r8, lr
 81010d4:	4288      	cmp	r0, r1
 81010d6:	fa02 f206 	lsl.w	r2, r2, r6
 81010da:	d90b      	bls.n	81010f4 <__udivmoddi4+0x1b8>
 81010dc:	eb1c 0101 	adds.w	r1, ip, r1
 81010e0:	f108 3aff 	add.w	sl, r8, #4294967295
 81010e4:	f080 8088 	bcs.w	81011f8 <__udivmoddi4+0x2bc>
 81010e8:	4288      	cmp	r0, r1
 81010ea:	f240 8085 	bls.w	81011f8 <__udivmoddi4+0x2bc>
 81010ee:	f1a8 0802 	sub.w	r8, r8, #2
 81010f2:	4461      	add	r1, ip
 81010f4:	1a09      	subs	r1, r1, r0
 81010f6:	b2a4      	uxth	r4, r4
 81010f8:	fbb1 f0f9 	udiv	r0, r1, r9
 81010fc:	fb09 1110 	mls	r1, r9, r0, r1
 8101100:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8101104:	fb00 fe0e 	mul.w	lr, r0, lr
 8101108:	458e      	cmp	lr, r1
 810110a:	d908      	bls.n	810111e <__udivmoddi4+0x1e2>
 810110c:	eb1c 0101 	adds.w	r1, ip, r1
 8101110:	f100 34ff 	add.w	r4, r0, #4294967295
 8101114:	d26c      	bcs.n	81011f0 <__udivmoddi4+0x2b4>
 8101116:	458e      	cmp	lr, r1
 8101118:	d96a      	bls.n	81011f0 <__udivmoddi4+0x2b4>
 810111a:	3802      	subs	r0, #2
 810111c:	4461      	add	r1, ip
 810111e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8101122:	fba0 9402 	umull	r9, r4, r0, r2
 8101126:	eba1 010e 	sub.w	r1, r1, lr
 810112a:	42a1      	cmp	r1, r4
 810112c:	46c8      	mov	r8, r9
 810112e:	46a6      	mov	lr, r4
 8101130:	d356      	bcc.n	81011e0 <__udivmoddi4+0x2a4>
 8101132:	d053      	beq.n	81011dc <__udivmoddi4+0x2a0>
 8101134:	b15d      	cbz	r5, 810114e <__udivmoddi4+0x212>
 8101136:	ebb3 0208 	subs.w	r2, r3, r8
 810113a:	eb61 010e 	sbc.w	r1, r1, lr
 810113e:	fa01 f707 	lsl.w	r7, r1, r7
 8101142:	fa22 f306 	lsr.w	r3, r2, r6
 8101146:	40f1      	lsrs	r1, r6
 8101148:	431f      	orrs	r7, r3
 810114a:	e9c5 7100 	strd	r7, r1, [r5]
 810114e:	2600      	movs	r6, #0
 8101150:	4631      	mov	r1, r6
 8101152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101156:	f1c2 0320 	rsb	r3, r2, #32
 810115a:	40d8      	lsrs	r0, r3
 810115c:	fa0c fc02 	lsl.w	ip, ip, r2
 8101160:	fa21 f303 	lsr.w	r3, r1, r3
 8101164:	4091      	lsls	r1, r2
 8101166:	4301      	orrs	r1, r0
 8101168:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810116c:	fa1f fe8c 	uxth.w	lr, ip
 8101170:	fbb3 f0f7 	udiv	r0, r3, r7
 8101174:	fb07 3610 	mls	r6, r7, r0, r3
 8101178:	0c0b      	lsrs	r3, r1, #16
 810117a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 810117e:	fb00 f60e 	mul.w	r6, r0, lr
 8101182:	429e      	cmp	r6, r3
 8101184:	fa04 f402 	lsl.w	r4, r4, r2
 8101188:	d908      	bls.n	810119c <__udivmoddi4+0x260>
 810118a:	eb1c 0303 	adds.w	r3, ip, r3
 810118e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101192:	d22f      	bcs.n	81011f4 <__udivmoddi4+0x2b8>
 8101194:	429e      	cmp	r6, r3
 8101196:	d92d      	bls.n	81011f4 <__udivmoddi4+0x2b8>
 8101198:	3802      	subs	r0, #2
 810119a:	4463      	add	r3, ip
 810119c:	1b9b      	subs	r3, r3, r6
 810119e:	b289      	uxth	r1, r1
 81011a0:	fbb3 f6f7 	udiv	r6, r3, r7
 81011a4:	fb07 3316 	mls	r3, r7, r6, r3
 81011a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81011ac:	fb06 f30e 	mul.w	r3, r6, lr
 81011b0:	428b      	cmp	r3, r1
 81011b2:	d908      	bls.n	81011c6 <__udivmoddi4+0x28a>
 81011b4:	eb1c 0101 	adds.w	r1, ip, r1
 81011b8:	f106 38ff 	add.w	r8, r6, #4294967295
 81011bc:	d216      	bcs.n	81011ec <__udivmoddi4+0x2b0>
 81011be:	428b      	cmp	r3, r1
 81011c0:	d914      	bls.n	81011ec <__udivmoddi4+0x2b0>
 81011c2:	3e02      	subs	r6, #2
 81011c4:	4461      	add	r1, ip
 81011c6:	1ac9      	subs	r1, r1, r3
 81011c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81011cc:	e738      	b.n	8101040 <__udivmoddi4+0x104>
 81011ce:	462e      	mov	r6, r5
 81011d0:	4628      	mov	r0, r5
 81011d2:	e705      	b.n	8100fe0 <__udivmoddi4+0xa4>
 81011d4:	4606      	mov	r6, r0
 81011d6:	e6e3      	b.n	8100fa0 <__udivmoddi4+0x64>
 81011d8:	4618      	mov	r0, r3
 81011da:	e6f8      	b.n	8100fce <__udivmoddi4+0x92>
 81011dc:	454b      	cmp	r3, r9
 81011de:	d2a9      	bcs.n	8101134 <__udivmoddi4+0x1f8>
 81011e0:	ebb9 0802 	subs.w	r8, r9, r2
 81011e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 81011e8:	3801      	subs	r0, #1
 81011ea:	e7a3      	b.n	8101134 <__udivmoddi4+0x1f8>
 81011ec:	4646      	mov	r6, r8
 81011ee:	e7ea      	b.n	81011c6 <__udivmoddi4+0x28a>
 81011f0:	4620      	mov	r0, r4
 81011f2:	e794      	b.n	810111e <__udivmoddi4+0x1e2>
 81011f4:	4640      	mov	r0, r8
 81011f6:	e7d1      	b.n	810119c <__udivmoddi4+0x260>
 81011f8:	46d0      	mov	r8, sl
 81011fa:	e77b      	b.n	81010f4 <__udivmoddi4+0x1b8>
 81011fc:	3b02      	subs	r3, #2
 81011fe:	4461      	add	r1, ip
 8101200:	e732      	b.n	8101068 <__udivmoddi4+0x12c>
 8101202:	4630      	mov	r0, r6
 8101204:	e709      	b.n	810101a <__udivmoddi4+0xde>
 8101206:	4464      	add	r4, ip
 8101208:	3802      	subs	r0, #2
 810120a:	e742      	b.n	8101092 <__udivmoddi4+0x156>

0810120c <__aeabi_idiv0>:
 810120c:	4770      	bx	lr
 810120e:	bf00      	nop

08101210 <_ZN8EntryAppC1Ev>:
#include "helpers.hpp"

static volatile uint32_t notif_rx;


EntryApp::EntryApp()
 8101210:	b510      	push	{r4, lr}
 8101212:	4604      	mov	r4, r0
 8101214:	f000 fa8e 	bl	8101734 <_ZN6Bmp280C1Ev>
 8101218:	f104 0048 	add.w	r0, r4, #72	; 0x48
 810121c:	f001 fc08 	bl	8102a30 <_ZN3GPSC1Ev>
 8101220:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8101224:	f001 f904 	bl	8102430 <_ZN3IMUC1Ev>
 8101228:	a108      	add	r1, pc, #32	; (adr r1, 810124c <_ZN8EntryAppC1Ev+0x3c>)
 810122a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810122e:	a309      	add	r3, pc, #36	; (adr r3, 8101254 <_ZN8EntryAppC1Ev+0x44>)
 8101230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101234:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
 8101238:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
 810123c:	4b02      	ldr	r3, [pc, #8]	; (8101248 <_ZN8EntryAppC1Ev+0x38>)
 810123e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
{

}
 8101242:	4620      	mov	r0, r4
 8101244:	bd10      	pop	{r4, pc}
 8101246:	bf00      	nop
 8101248:	38001080 	.word	0x38001080
 810124c:	38001000 	.word	0x38001000
 8101250:	38001020 	.word	0x38001020
 8101254:	38001040 	.word	0x38001040
 8101258:	38001060 	.word	0x38001060

0810125c <_ZN8EntryApp10M4DataToM7Eh>:
 * from the M4 core to the M7.
 * @param data_type Sensor data type to send
 * @retval None
 */
void EntryApp::M4DataToM7(const uint8_t data_type)
{
 810125c:	b530      	push	{r4, r5, lr}
	switch(data_type)
 810125e:	3901      	subs	r1, #1
{
 8101260:	b0a3      	sub	sp, #140	; 0x8c
 8101262:	4604      	mov	r4, r0
	switch(data_type)
 8101264:	2904      	cmp	r1, #4
 8101266:	f200 80c7 	bhi.w	81013f8 <_ZN8EntryApp10M4DataToM7Eh+0x19c>
 810126a:	e8df f001 	tbb	[pc, r1]
 810126e:	9210      	.short	0x9210
 8101270:	7558      	.short	0x7558
 8101272:	03          	.byte	0x03
 8101273:	00          	.byte	0x00
			break;
		}

		case BARO_DATA_TYPE:
		{
		    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8101274:	2000      	movs	r0, #0
 8101276:	f005 fa87 	bl	8106788 <HAL_HSEM_FastTake>
 810127a:	2800      	cmp	r0, #0
 810127c:	f000 80ad 	beq.w	81013da <_ZN8EntryApp10M4DataToM7Eh+0x17e>
			    HAL_HSEM_Release(HSEM_ID_0, 0);
 8101280:	2100      	movs	r1, #0
 8101282:	4608      	mov	r0, r1
		    // Release semaphore
		    HAL_HSEM_Release(HSEM_ID_0, 0);
			break;
		}
	}
}
 8101284:	b023      	add	sp, #140	; 0x8c
 8101286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			    HAL_HSEM_Release(HSEM_ID_0, 0);
 810128a:	f005 ba97 	b.w	81067bc <HAL_HSEM_Release>
			if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 810128e:	2000      	movs	r0, #0
 8101290:	f005 fa7a 	bl	8106788 <HAL_HSEM_FastTake>
 8101294:	2800      	cmp	r0, #0
 8101296:	d1f3      	bne.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
			      gps_values_m4->gps_latitude = gps.GetGPSData().gps_latitude;
 8101298:	f104 0548 	add.w	r5, r4, #72	; 0x48
 810129c:	4629      	mov	r1, r5
 810129e:	a81a      	add	r0, sp, #104	; 0x68
 81012a0:	f001 fafc 	bl	810289c <_ZN3GPS10GetGPSDataEv>
 81012a4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 81012aa:	601a      	str	r2, [r3, #0]
			      gps_values_m4->gps_longitude = gps.GetGPSData().gps_longitude;
 81012ac:	4629      	mov	r1, r5
 81012ae:	a81a      	add	r0, sp, #104	; 0x68
 81012b0:	f001 faf4 	bl	810289c <_ZN3GPS10GetGPSDataEv>
 81012b4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 81012ba:	605a      	str	r2, [r3, #4]
			      gps_values_m4->gps_altitude = gps.GetGPSData().gps_altitude;
 81012bc:	4629      	mov	r1, r5
 81012be:	a81a      	add	r0, sp, #104	; 0x68
 81012c0:	f001 faec 	bl	810289c <_ZN3GPS10GetGPSDataEv>
 81012c4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 81012ca:	609a      	str	r2, [r3, #8]
			      gps_values_m4->gps_velocity_x = gps.GetGPSData().gps_velocity_x;
 81012cc:	4629      	mov	r1, r5
 81012ce:	a81a      	add	r0, sp, #104	; 0x68
 81012d0:	f001 fae4 	bl	810289c <_ZN3GPS10GetGPSDataEv>
 81012d4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 81012da:	60da      	str	r2, [r3, #12]
			      gps_values_m4->gps_velocity_y = gps.GetGPSData().gps_velocity_y;
 81012dc:	4629      	mov	r1, r5
 81012de:	a81a      	add	r0, sp, #104	; 0x68
 81012e0:	f001 fadc 	bl	810289c <_ZN3GPS10GetGPSDataEv>
 81012e4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 81012ea:	611a      	str	r2, [r3, #16]
			      gps_values_m4->gps_velocity_z = gps.GetGPSData().gps_velocity_z;
 81012ec:	4629      	mov	r1, r5
 81012ee:	a81a      	add	r0, sp, #104	; 0x68
 81012f0:	f001 fad4 	bl	810289c <_ZN3GPS10GetGPSDataEv>
 81012f4:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 81012f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 81012fa:	615a      	str	r2, [r3, #20]
			      gps_values_m4->gnd_speed = gps.GetGPSData().gnd_speed;
 81012fc:	4629      	mov	r1, r5
 81012fe:	a81a      	add	r0, sp, #104	; 0x68
 8101300:	f001 facc 	bl	810289c <_ZN3GPS10GetGPSDataEv>
 8101304:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8101308:	9a20      	ldr	r2, [sp, #128]	; 0x80
 810130a:	619a      	str	r2, [r3, #24]
			      gps_values_m4->gps_satellites = gps.GetGPSData().gps_satellites;
 810130c:	4629      	mov	r1, r5
 810130e:	a81a      	add	r0, sp, #104	; 0x68
 8101310:	f001 fac4 	bl	810289c <_ZN3GPS10GetGPSDataEv>
 8101314:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8101318:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810131a:	61da      	str	r2, [r3, #28]
 810131c:	e7b0      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 810131e:	2000      	movs	r0, #0
 8101320:	f005 fa32 	bl	8106788 <HAL_HSEM_FastTake>
 8101324:	2800      	cmp	r0, #0
 8101326:	d1ab      	bne.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		      acc_values_m4->imu_acc_x = imu.GetAccelData().x;
 8101328:	f104 0068 	add.w	r0, r4, #104	; 0x68
 810132c:	9001      	str	r0, [sp, #4]
 810132e:	f000 fe6d 	bl	810200c <_ZN3IMU12GetAccelDataEv>
 8101332:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		      acc_values_m4->imu_acc_y = imu.GetAccelData().y;
 8101336:	9801      	ldr	r0, [sp, #4]
		      acc_values_m4->imu_acc_x = imu.GetAccelData().x;
 8101338:	ed83 0a00 	vstr	s0, [r3]
		      acc_values_m4->imu_acc_y = imu.GetAccelData().y;
 810133c:	f000 fe66 	bl	810200c <_ZN3IMU12GetAccelDataEv>
 8101340:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
		      acc_values_m4->imu_acc_z = imu.GetAccelData().z;
 8101344:	9801      	ldr	r0, [sp, #4]
		      acc_values_m4->imu_acc_y = imu.GetAccelData().y;
 8101346:	edc3 0a01 	vstr	s1, [r3, #4]
		      acc_values_m4->imu_acc_z = imu.GetAccelData().z;
 810134a:	f000 fe5f 	bl	810200c <_ZN3IMU12GetAccelDataEv>
 810134e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8101352:	ed83 1a02 	vstr	s2, [r3, #8]
 8101356:	e793      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8101358:	2000      	movs	r0, #0
 810135a:	f005 fa15 	bl	8106788 <HAL_HSEM_FastTake>
 810135e:	2800      	cmp	r0, #0
 8101360:	d18e      	bne.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		      gyro_values_m4->imu_gyro_x = imu.GetGyroData().x;
 8101362:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8101366:	9001      	str	r0, [sp, #4]
 8101368:	f000 fe10 	bl	8101f8c <_ZN3IMU11GetGyroDataEv>
 810136c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
		      gyro_values_m4->imu_gyro_y = imu.GetGyroData().y;
 8101370:	9801      	ldr	r0, [sp, #4]
		      gyro_values_m4->imu_gyro_x = imu.GetGyroData().x;
 8101372:	ed83 0a00 	vstr	s0, [r3]
		      gyro_values_m4->imu_gyro_y = imu.GetGyroData().y;
 8101376:	f000 fe09 	bl	8101f8c <_ZN3IMU11GetGyroDataEv>
 810137a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
		      gyro_values_m4->imu_gyro_z = imu.GetGyroData().z;
 810137e:	9801      	ldr	r0, [sp, #4]
		      gyro_values_m4->imu_gyro_y = imu.GetGyroData().y;
 8101380:	edc3 0a01 	vstr	s1, [r3, #4]
		      gyro_values_m4->imu_gyro_z = imu.GetGyroData().z;
 8101384:	f000 fe02 	bl	8101f8c <_ZN3IMU11GetGyroDataEv>
 8101388:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 810138c:	ed83 1a02 	vstr	s2, [r3, #8]
 8101390:	e776      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8101392:	2000      	movs	r0, #0
 8101394:	f005 f9f8 	bl	8106788 <HAL_HSEM_FastTake>
 8101398:	2800      	cmp	r0, #0
 810139a:	f47f af71 	bne.w	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		      mag_values_m4->imu_mag_x = imu.GetMagData().x;
 810139e:	f104 0068 	add.w	r0, r4, #104	; 0x68
 81013a2:	9001      	str	r0, [sp, #4]
 81013a4:	f000 fe72 	bl	810208c <_ZN3IMU10GetMagDataEv>
 81013a8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
		      mag_values_m4->imu_mag_y = imu.GetMagData().y;
 81013ac:	9801      	ldr	r0, [sp, #4]
		      mag_values_m4->imu_mag_x = imu.GetMagData().x;
 81013ae:	ed83 0a00 	vstr	s0, [r3]
		      mag_values_m4->imu_mag_y = imu.GetMagData().y;
 81013b2:	f000 fe6b 	bl	810208c <_ZN3IMU10GetMagDataEv>
 81013b6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
		      mag_values_m4->imu_mag_z = imu.GetMagData().z;
 81013ba:	9801      	ldr	r0, [sp, #4]
		      mag_values_m4->imu_mag_y = imu.GetMagData().y;
 81013bc:	edc3 0a01 	vstr	s1, [r3, #4]
		      mag_values_m4->imu_mag_z = imu.GetMagData().z;
 81013c0:	f000 fe64 	bl	810208c <_ZN3IMU10GetMagDataEv>
 81013c4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 81013c8:	ed8d 0a1a 	vstr	s0, [sp, #104]	; 0x68
 81013cc:	edcd 0a1b 	vstr	s1, [sp, #108]	; 0x6c
 81013d0:	ed8d 1a1c 	vstr	s2, [sp, #112]	; 0x70
 81013d4:	ed83 1a02 	vstr	s2, [r3, #8]
 81013d8:	e752      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
		      baro_values_m4->baro_altitude = baro.GetAltitude();
 81013da:	4620      	mov	r0, r4
 81013dc:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
 81013e0:	f000 f854 	bl	810148c <_ZN6Bmp28011GetAltitudeEv>
		      baro_values_m4->baro_pressure = baro.GetPressure();
 81013e4:	4620      	mov	r0, r4
 81013e6:	f8d4 40cc 	ldr.w	r4, [r4, #204]	; 0xcc
		      baro_values_m4->baro_altitude = baro.GetAltitude();
 81013ea:	ed85 0a01 	vstr	s0, [r5, #4]
		      baro_values_m4->baro_pressure = baro.GetPressure();
 81013ee:	f000 f855 	bl	810149c <_ZN6Bmp28011GetPressureEv>
 81013f2:	ed84 0a00 	vstr	s0, [r4]
 81013f6:	e743      	b.n	8101280 <_ZN8EntryApp10M4DataToM7Eh+0x24>
}
 81013f8:	b023      	add	sp, #140	; 0x8c
 81013fa:	bd30      	pop	{r4, r5, pc}

081013fc <_ZN8EntryApp10RunSensorsEv>:
{
 81013fc:	b530      	push	{r4, r5, lr}
 81013fe:	4604      	mov	r4, r0
 8101400:	b08b      	sub	sp, #44	; 0x2c
    baro.Run();
 8101402:	f000 fb6d 	bl	8101ae0 <_ZN6Bmp2803RunEv>
    M4DataToM7(BARO_DATA_TYPE);
 8101406:	2105      	movs	r1, #5
 8101408:	4620      	mov	r0, r4
 810140a:	f7ff ff27 	bl	810125c <_ZN8EntryApp10M4DataToM7Eh>
   gps.ProcessGPS();
 810140e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8101412:	f001 fa5d 	bl	81028d0 <_ZN3GPS10ProcessGPSEv>
  imu.GetAccelData();
 8101416:	f104 0568 	add.w	r5, r4, #104	; 0x68
   M4DataToM7(GPS_DATA_TYPE);
 810141a:	2101      	movs	r1, #1
 810141c:	4620      	mov	r0, r4
 810141e:	f7ff ff1d 	bl	810125c <_ZN8EntryApp10M4DataToM7Eh>
  imu.GetAccelData();
 8101422:	4628      	mov	r0, r5
 8101424:	f000 fdf2 	bl	810200c <_ZN3IMU12GetAccelDataEv>
  M4DataToM7(ACC_DATA_TYPE);
 8101428:	2103      	movs	r1, #3
 810142a:	4620      	mov	r0, r4
 810142c:	f7ff ff16 	bl	810125c <_ZN8EntryApp10M4DataToM7Eh>
  imu.GetMagData();
 8101430:	4628      	mov	r0, r5
 8101432:	f000 fe2b 	bl	810208c <_ZN3IMU10GetMagDataEv>
  M4DataToM7(MAG_DATA_TYPE);
 8101436:	2102      	movs	r1, #2
 8101438:	4620      	mov	r0, r4
 810143a:	f7ff ff0f 	bl	810125c <_ZN8EntryApp10M4DataToM7Eh>
  imu.GetGyroData();
 810143e:	4628      	mov	r0, r5
 8101440:	f000 fda4 	bl	8101f8c <_ZN3IMU11GetGyroDataEv>
  M4DataToM7(GYRO_DATA_TYPE);
 8101444:	2104      	movs	r1, #4
 8101446:	4620      	mov	r0, r4
}
 8101448:	b00b      	add	sp, #44	; 0x2c
 810144a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  M4DataToM7(GYRO_DATA_TYPE);
 810144e:	f7ff bf05 	b.w	810125c <_ZN8EntryApp10M4DataToM7Eh>
 8101452:	bf00      	nop

08101454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101454:	b480      	push	{r7}
 8101456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101458:	4b0b      	ldr	r3, [pc, #44]	; (8101488 <SystemInit+0x34>)
 810145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810145e:	4a0a      	ldr	r2, [pc, #40]	; (8101488 <SystemInit+0x34>)
 8101460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101468:	4b07      	ldr	r3, [pc, #28]	; (8101488 <SystemInit+0x34>)
 810146a:	691b      	ldr	r3, [r3, #16]
 810146c:	4a06      	ldr	r2, [pc, #24]	; (8101488 <SystemInit+0x34>)
 810146e:	f043 0310 	orr.w	r3, r3, #16
 8101472:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101474:	4b04      	ldr	r3, [pc, #16]	; (8101488 <SystemInit+0x34>)
 8101476:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810147a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810147c:	bf00      	nop
 810147e:	46bd      	mov	sp, r7
 8101480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101484:	4770      	bx	lr
 8101486:	bf00      	nop
 8101488:	e000ed00 	.word	0xe000ed00

0810148c <_ZN6Bmp28011GetAltitudeEv>:

  return true;
}

float Bmp280::GetAltitude()
{
 810148c:	b508      	push	{r3, lr}
	return altitude;
 810148e:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8101492:	f7ff fb8d 	bl	8100bb0 <__aeabi_d2f>
}
 8101496:	ee00 0a10 	vmov	s0, r0
 810149a:	bd08      	pop	{r3, pc}

0810149c <_ZN6Bmp28011GetPressureEv>:

float Bmp280::GetPressure()
{
	return pressure;

}
 810149c:	ed90 0a02 	vldr	s0, [r0, #8]
 81014a0:	4770      	bx	lr
 81014a2:	bf00      	nop

081014a4 <_ZN6Bmp28016ReadCoefficientsEv>:

/*
 *  @brief  Reads the factory-set coefficients
 */
void Bmp280::ReadCoefficients()
{
 81014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 81014a6:	4605      	mov	r5, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81014a8:	4ea0      	ldr	r6, [pc, #640]	; (810172c <_ZN6Bmp28016ReadCoefficientsEv+0x288>)
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81014aa:	4fa1      	ldr	r7, [pc, #644]	; (8101730 <_ZN6Bmp28016ReadCoefficientsEv+0x28c>)
  SerialData[0] = Register | address::SPI_READ;
 81014ac:	2388      	movs	r3, #136	; 0x88
 81014ae:	f805 3f18 	strb.w	r3, [r5, #24]!
{
 81014b2:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81014b4:	2200      	movs	r2, #0
 81014b6:	2110      	movs	r1, #16
 81014b8:	4630      	mov	r0, r6
 81014ba:	f005 f94b 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81014be:	230a      	movs	r3, #10
 81014c0:	2201      	movs	r2, #1
 81014c2:	4629      	mov	r1, r5
 81014c4:	4638      	mov	r0, r7
 81014c6:	f009 fb3d 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81014ca:	230a      	movs	r3, #10
 81014cc:	2202      	movs	r2, #2
 81014ce:	4629      	mov	r1, r5
 81014d0:	4638      	mov	r0, r7
 81014d2:	f009 fd25 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81014d6:	2201      	movs	r2, #1
 81014d8:	2110      	movs	r1, #16
 81014da:	4630      	mov	r0, r6
 81014dc:	f005 f93a 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_T1 = Read16BitLE(address::REG_DIG_T1);
 81014e0:	8b23      	ldrh	r3, [r4, #24]
 81014e2:	8623      	strh	r3, [r4, #48]	; 0x30
  SerialData[0] = Register | address::SPI_READ;
 81014e4:	238a      	movs	r3, #138	; 0x8a
 81014e6:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81014e8:	2200      	movs	r2, #0
 81014ea:	2110      	movs	r1, #16
 81014ec:	4630      	mov	r0, r6
 81014ee:	f005 f931 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81014f2:	230a      	movs	r3, #10
 81014f4:	2201      	movs	r2, #1
 81014f6:	4629      	mov	r1, r5
 81014f8:	4638      	mov	r0, r7
 81014fa:	f009 fb23 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81014fe:	230a      	movs	r3, #10
 8101500:	2202      	movs	r2, #2
 8101502:	4629      	mov	r1, r5
 8101504:	4638      	mov	r0, r7
 8101506:	f009 fd0b 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810150a:	2201      	movs	r2, #1
 810150c:	2110      	movs	r1, #16
 810150e:	4630      	mov	r0, r6
 8101510:	f005 f920 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_T2 = Read16BitLE(address::REG_DIG_T2);
 8101514:	8b23      	ldrh	r3, [r4, #24]
 8101516:	8663      	strh	r3, [r4, #50]	; 0x32
  SerialData[0] = Register | address::SPI_READ;
 8101518:	238c      	movs	r3, #140	; 0x8c
 810151a:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810151c:	2200      	movs	r2, #0
 810151e:	2110      	movs	r1, #16
 8101520:	4630      	mov	r0, r6
 8101522:	f005 f917 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101526:	230a      	movs	r3, #10
 8101528:	2201      	movs	r2, #1
 810152a:	4629      	mov	r1, r5
 810152c:	4638      	mov	r0, r7
 810152e:	f009 fb09 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101532:	230a      	movs	r3, #10
 8101534:	2202      	movs	r2, #2
 8101536:	4629      	mov	r1, r5
 8101538:	4638      	mov	r0, r7
 810153a:	f009 fcf1 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810153e:	2201      	movs	r2, #1
 8101540:	2110      	movs	r1, #16
 8101542:	4630      	mov	r0, r6
 8101544:	f005 f906 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_T3 = Read16BitLE(address::REG_DIG_T3);
 8101548:	8b23      	ldrh	r3, [r4, #24]
 810154a:	86a3      	strh	r3, [r4, #52]	; 0x34
  SerialData[0] = Register | address::SPI_READ;
 810154c:	238e      	movs	r3, #142	; 0x8e
 810154e:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101550:	2200      	movs	r2, #0
 8101552:	2110      	movs	r1, #16
 8101554:	4630      	mov	r0, r6
 8101556:	f005 f8fd 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810155a:	230a      	movs	r3, #10
 810155c:	2201      	movs	r2, #1
 810155e:	4629      	mov	r1, r5
 8101560:	4638      	mov	r0, r7
 8101562:	f009 faef 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101566:	230a      	movs	r3, #10
 8101568:	2202      	movs	r2, #2
 810156a:	4629      	mov	r1, r5
 810156c:	4638      	mov	r0, r7
 810156e:	f009 fcd7 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101572:	2201      	movs	r2, #1
 8101574:	2110      	movs	r1, #16
 8101576:	4630      	mov	r0, r6
 8101578:	f005 f8ec 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_P1 = Read16BitLE(address::REG_DIG_P1);
 810157c:	8b23      	ldrh	r3, [r4, #24]
 810157e:	86e3      	strh	r3, [r4, #54]	; 0x36
  SerialData[0] = Register | address::SPI_READ;
 8101580:	2390      	movs	r3, #144	; 0x90
 8101582:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101584:	2200      	movs	r2, #0
 8101586:	2110      	movs	r1, #16
 8101588:	4630      	mov	r0, r6
 810158a:	f005 f8e3 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810158e:	230a      	movs	r3, #10
 8101590:	2201      	movs	r2, #1
 8101592:	4629      	mov	r1, r5
 8101594:	4638      	mov	r0, r7
 8101596:	f009 fad5 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810159a:	230a      	movs	r3, #10
 810159c:	2202      	movs	r2, #2
 810159e:	4629      	mov	r1, r5
 81015a0:	4638      	mov	r0, r7
 81015a2:	f009 fcbd 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81015a6:	2201      	movs	r2, #1
 81015a8:	2110      	movs	r1, #16
 81015aa:	4630      	mov	r0, r6
 81015ac:	f005 f8d2 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_P2 = Read16BitLE(address::REG_DIG_P2);
 81015b0:	8b23      	ldrh	r3, [r4, #24]
 81015b2:	8723      	strh	r3, [r4, #56]	; 0x38
  SerialData[0] = Register | address::SPI_READ;
 81015b4:	2392      	movs	r3, #146	; 0x92
 81015b6:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81015b8:	2200      	movs	r2, #0
 81015ba:	2110      	movs	r1, #16
 81015bc:	4630      	mov	r0, r6
 81015be:	f005 f8c9 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81015c2:	230a      	movs	r3, #10
 81015c4:	2201      	movs	r2, #1
 81015c6:	4629      	mov	r1, r5
 81015c8:	4638      	mov	r0, r7
 81015ca:	f009 fabb 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81015ce:	230a      	movs	r3, #10
 81015d0:	2202      	movs	r2, #2
 81015d2:	4629      	mov	r1, r5
 81015d4:	4638      	mov	r0, r7
 81015d6:	f009 fca3 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81015da:	2201      	movs	r2, #1
 81015dc:	2110      	movs	r1, #16
 81015de:	4630      	mov	r0, r6
 81015e0:	f005 f8b8 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_P3 = Read16BitLE(address::REG_DIG_P3);
 81015e4:	8b23      	ldrh	r3, [r4, #24]
 81015e6:	8763      	strh	r3, [r4, #58]	; 0x3a
  SerialData[0] = Register | address::SPI_READ;
 81015e8:	2394      	movs	r3, #148	; 0x94
 81015ea:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81015ec:	2200      	movs	r2, #0
 81015ee:	2110      	movs	r1, #16
 81015f0:	4630      	mov	r0, r6
 81015f2:	f005 f8af 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81015f6:	230a      	movs	r3, #10
 81015f8:	2201      	movs	r2, #1
 81015fa:	4629      	mov	r1, r5
 81015fc:	4638      	mov	r0, r7
 81015fe:	f009 faa1 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101602:	230a      	movs	r3, #10
 8101604:	2202      	movs	r2, #2
 8101606:	4629      	mov	r1, r5
 8101608:	4638      	mov	r0, r7
 810160a:	f009 fc89 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810160e:	2201      	movs	r2, #1
 8101610:	2110      	movs	r1, #16
 8101612:	4630      	mov	r0, r6
 8101614:	f005 f89e 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_P4 = Read16BitLE(address::REG_DIG_P4);
 8101618:	8b23      	ldrh	r3, [r4, #24]
 810161a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  SerialData[0] = Register | address::SPI_READ;
 810161c:	2396      	movs	r3, #150	; 0x96
 810161e:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101620:	2200      	movs	r2, #0
 8101622:	2110      	movs	r1, #16
 8101624:	4630      	mov	r0, r6
 8101626:	f005 f895 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810162a:	230a      	movs	r3, #10
 810162c:	2201      	movs	r2, #1
 810162e:	4629      	mov	r1, r5
 8101630:	4638      	mov	r0, r7
 8101632:	f009 fa87 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101636:	230a      	movs	r3, #10
 8101638:	2202      	movs	r2, #2
 810163a:	4629      	mov	r1, r5
 810163c:	4638      	mov	r0, r7
 810163e:	f009 fc6f 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101642:	2201      	movs	r2, #1
 8101644:	2110      	movs	r1, #16
 8101646:	4630      	mov	r0, r6
 8101648:	f005 f884 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_P5 = Read16BitLE(address::REG_DIG_P5);
 810164c:	8b23      	ldrh	r3, [r4, #24]
 810164e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  SerialData[0] = Register | address::SPI_READ;
 8101650:	2398      	movs	r3, #152	; 0x98
 8101652:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101654:	2200      	movs	r2, #0
 8101656:	2110      	movs	r1, #16
 8101658:	4630      	mov	r0, r6
 810165a:	f005 f87b 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810165e:	230a      	movs	r3, #10
 8101660:	2201      	movs	r2, #1
 8101662:	4629      	mov	r1, r5
 8101664:	4638      	mov	r0, r7
 8101666:	f009 fa6d 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810166a:	230a      	movs	r3, #10
 810166c:	2202      	movs	r2, #2
 810166e:	4629      	mov	r1, r5
 8101670:	4638      	mov	r0, r7
 8101672:	f009 fc55 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101676:	2201      	movs	r2, #1
 8101678:	2110      	movs	r1, #16
 810167a:	4630      	mov	r0, r6
 810167c:	f005 f86a 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_P6 = Read16BitLE(address::REG_DIG_P6);
 8101680:	8b23      	ldrh	r3, [r4, #24]
 8101682:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  SerialData[0] = Register | address::SPI_READ;
 8101686:	239a      	movs	r3, #154	; 0x9a
 8101688:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810168a:	2200      	movs	r2, #0
 810168c:	2110      	movs	r1, #16
 810168e:	4630      	mov	r0, r6
 8101690:	f005 f860 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101694:	230a      	movs	r3, #10
 8101696:	2201      	movs	r2, #1
 8101698:	4629      	mov	r1, r5
 810169a:	4638      	mov	r0, r7
 810169c:	f009 fa52 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81016a0:	230a      	movs	r3, #10
 81016a2:	2202      	movs	r2, #2
 81016a4:	4629      	mov	r1, r5
 81016a6:	4638      	mov	r0, r7
 81016a8:	f009 fc3a 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81016ac:	2201      	movs	r2, #1
 81016ae:	2110      	movs	r1, #16
 81016b0:	4630      	mov	r0, r6
 81016b2:	f005 f84f 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_P7 = Read16BitLE(address::REG_DIG_P7);
 81016b6:	8b23      	ldrh	r3, [r4, #24]
 81016b8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  SerialData[0] = Register | address::SPI_READ;
 81016bc:	239c      	movs	r3, #156	; 0x9c
 81016be:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81016c0:	2200      	movs	r2, #0
 81016c2:	2110      	movs	r1, #16
 81016c4:	4630      	mov	r0, r6
 81016c6:	f005 f845 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81016ca:	230a      	movs	r3, #10
 81016cc:	2201      	movs	r2, #1
 81016ce:	4629      	mov	r1, r5
 81016d0:	4638      	mov	r0, r7
 81016d2:	f009 fa37 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81016d6:	230a      	movs	r3, #10
 81016d8:	2202      	movs	r2, #2
 81016da:	4629      	mov	r1, r5
 81016dc:	4638      	mov	r0, r7
 81016de:	f009 fc1f 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81016e2:	2201      	movs	r2, #1
 81016e4:	2110      	movs	r1, #16
 81016e6:	4630      	mov	r0, r6
 81016e8:	f005 f834 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_P8 = Read16BitLE(address::REG_DIG_P8);
 81016ec:	8b23      	ldrh	r3, [r4, #24]
 81016ee:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  SerialData[0] = Register | address::SPI_READ;
 81016f2:	239e      	movs	r3, #158	; 0x9e
 81016f4:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81016f6:	2200      	movs	r2, #0
 81016f8:	2110      	movs	r1, #16
 81016fa:	4630      	mov	r0, r6
 81016fc:	f005 f82a 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101700:	230a      	movs	r3, #10
 8101702:	2201      	movs	r2, #1
 8101704:	4629      	mov	r1, r5
 8101706:	4638      	mov	r0, r7
 8101708:	f009 fa1c 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810170c:	230a      	movs	r3, #10
 810170e:	4629      	mov	r1, r5
 8101710:	2202      	movs	r2, #2
 8101712:	4638      	mov	r0, r7
 8101714:	f009 fc04 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101718:	2201      	movs	r2, #1
 810171a:	2110      	movs	r1, #16
 810171c:	4630      	mov	r0, r6
 810171e:	f005 f819 	bl	8106754 <HAL_GPIO_WritePin>
 comp_values.dig_P9 = Read16BitLE(address::REG_DIG_P9);
 8101722:	8b23      	ldrh	r3, [r4, #24]
 8101724:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
}
 8101728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810172a:	bf00      	nop
 810172c:	58020000 	.word	0x58020000
 8101730:	100002a8 	.word	0x100002a8

08101734 <_ZN6Bmp280C1Ev>:
Bmp280::Bmp280()
 8101734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101736:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101738:	2200      	movs	r2, #0
 810173a:	483e      	ldr	r0, [pc, #248]	; (8101834 <_ZN6Bmp280C1Ev+0x100>)
 810173c:	2110      	movs	r1, #16
  SerialData[0] = Register | address::SPI_READ;
 810173e:	4627      	mov	r7, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101740:	f005 f808 	bl	8106754 <HAL_GPIO_WritePin>
  SerialData[0] = Register | address::SPI_READ;
 8101744:	23d0      	movs	r3, #208	; 0xd0
 8101746:	f807 3f18 	strb.w	r3, [r7, #24]!
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810174a:	483a      	ldr	r0, [pc, #232]	; (8101834 <_ZN6Bmp280C1Ev+0x100>)
 810174c:	2200      	movs	r2, #0
 810174e:	2110      	movs	r1, #16
 8101750:	f005 f800 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101754:	230a      	movs	r3, #10
 8101756:	2201      	movs	r2, #1
 8101758:	4639      	mov	r1, r7
 810175a:	4837      	ldr	r0, [pc, #220]	; (8101838 <_ZN6Bmp280C1Ev+0x104>)
 810175c:	f009 f9f2 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[1], 1, 10);
 8101760:	230a      	movs	r3, #10
 8101762:	2201      	movs	r2, #1
 8101764:	f104 0119 	add.w	r1, r4, #25
 8101768:	4833      	ldr	r0, [pc, #204]	; (8101838 <_ZN6Bmp280C1Ev+0x104>)
 810176a:	f009 fbd9 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810176e:	4831      	ldr	r0, [pc, #196]	; (8101834 <_ZN6Bmp280C1Ev+0x100>)
 8101770:	2201      	movs	r2, #1
 8101772:	2110      	movs	r1, #16
 8101774:	f004 ffee 	bl	8106754 <HAL_GPIO_WritePin>
  if(Read8Bit(address::REG_ID) != address::CHIP_ID)
 8101778:	7e63      	ldrb	r3, [r4, #25]
 810177a:	2b58      	cmp	r3, #88	; 0x58
 810177c:	d158      	bne.n	8101830 <_ZN6Bmp280C1Ev+0xfc>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810177e:	2200      	movs	r2, #0
 8101780:	2110      	movs	r1, #16
 8101782:	482c      	ldr	r0, [pc, #176]	; (8101834 <_ZN6Bmp280C1Ev+0x100>)
 8101784:	f004 ffe6 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8101788:	20c8      	movs	r0, #200	; 0xc8
 810178a:	f001 fba5 	bl	8102ed8 <HAL_Delay>
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::SetConfig()
{
  config.mode = settings::Mode::NORMAL;
 810178e:	2303      	movs	r3, #3
 8101790:	76e3      	strb	r3, [r4, #27]
  config.pressure_oversampling = settings::Oversampling::X16;
 8101792:	2305      	movs	r3, #5
  config.mode = settings::Mode::NORMAL;
 8101794:	2500      	movs	r5, #0
  config.temp_oversampling = settings::Oversampling::X2;
 8101796:	2602      	movs	r6, #2
  config.pressure_oversampling = settings::Oversampling::X16;
 8101798:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  SerialData[0] = Register & address::SPI_WRITE;
 810179c:	f245 7374 	movw	r3, #22388	; 0x5774
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017a0:	4824      	ldr	r0, [pc, #144]	; (8101834 <_ZN6Bmp280C1Ev+0x100>)
  SerialData[0] = Register & address::SPI_WRITE;
 81017a2:	8323      	strh	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017a4:	462a      	mov	r2, r5
 81017a6:	2110      	movs	r1, #16
  config.mode = settings::Mode::NORMAL;
 81017a8:	7725      	strb	r5, [r4, #28]
 81017aa:	7765      	strb	r5, [r4, #29]
 81017ac:	77a5      	strb	r5, [r4, #30]
  config.pressure_oversampling = settings::Oversampling::X16;
 81017ae:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 81017b2:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 81017b6:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
  config.temp_oversampling = settings::Oversampling::X2;
 81017ba:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 81017be:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 81017c2:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
 81017c6:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017ca:	f004 ffc3 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 2, 30);
 81017ce:	231e      	movs	r3, #30
 81017d0:	4632      	mov	r2, r6
 81017d2:	4639      	mov	r1, r7
 81017d4:	4818      	ldr	r0, [pc, #96]	; (8101838 <_ZN6Bmp280C1Ev+0x104>)
 81017d6:	f009 f9b5 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81017da:	4816      	ldr	r0, [pc, #88]	; (8101834 <_ZN6Bmp280C1Ev+0x100>)
 81017dc:	2201      	movs	r2, #1
 81017de:	2110      	movs	r1, #16
 81017e0:	f004 ffb8 	bl	8106754 <HAL_GPIO_WritePin>
  uint8_t oversampling_data  =  (uint8_t) (temp_oversampling << 5 | pres_oversampling << 2  |mode);

  Write8Bit(address::REG_CTRL_MEAS, oversampling_data);


  config.iir_filter = settings::Filter::FILTER_16;
 81017e4:	2304      	movs	r3, #4
 81017e6:	77e3      	strb	r3, [r4, #31]
  SerialData[0] = Register & address::SPI_WRITE;
 81017e8:	f241 0375 	movw	r3, #4213	; 0x1075
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017ec:	4811      	ldr	r0, [pc, #68]	; (8101834 <_ZN6Bmp280C1Ev+0x100>)
  SerialData[0] = Register & address::SPI_WRITE;
 81017ee:	8323      	strh	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81017f0:	462a      	mov	r2, r5
 81017f2:	2110      	movs	r1, #16
  config.iir_filter = settings::Filter::FILTER_16;
 81017f4:	f884 5020 	strb.w	r5, [r4, #32]
 81017f8:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 81017fc:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
  config.standby = settings::StandbyTime::STANDBY_0_5;
 8101800:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
 8101804:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8101808:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 810180c:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101810:	f004 ffa0 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 2, 30);
 8101814:	231e      	movs	r3, #30
 8101816:	4632      	mov	r2, r6
 8101818:	4639      	mov	r1, r7
 810181a:	4807      	ldr	r0, [pc, #28]	; (8101838 <_ZN6Bmp280C1Ev+0x104>)
 810181c:	f009 f992 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101820:	4804      	ldr	r0, [pc, #16]	; (8101834 <_ZN6Bmp280C1Ev+0x100>)
 8101822:	2201      	movs	r2, #1
 8101824:	2110      	movs	r1, #16
 8101826:	f004 ff95 	bl	8106754 <HAL_GPIO_WritePin>
  ReadCoefficients();
 810182a:	4620      	mov	r0, r4
 810182c:	f7ff fe3a 	bl	81014a4 <_ZN6Bmp28016ReadCoefficientsEv>
}
 8101830:	4620      	mov	r0, r4
 8101832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101834:	58020000 	.word	0x58020000
 8101838:	100002a8 	.word	0x100002a8

0810183c <_ZN6Bmp2808ReadTempEv>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::ReadTemp()
{
 810183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 810183e:	4605      	mov	r5, r0
 8101840:	23fa      	movs	r3, #250	; 0xfa
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101842:	4e22      	ldr	r6, [pc, #136]	; (81018cc <_ZN6Bmp2808ReadTempEv+0x90>)
  SerialData[0] = Register | address::SPI_READ;
 8101844:	f805 3f18 	strb.w	r3, [r5, #24]!
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101848:	4f21      	ldr	r7, [pc, #132]	; (81018d0 <_ZN6Bmp2808ReadTempEv+0x94>)
{
 810184a:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810184c:	2200      	movs	r2, #0
 810184e:	2110      	movs	r1, #16
 8101850:	4630      	mov	r0, r6
 8101852:	f004 ff7f 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101856:	230a      	movs	r3, #10
 8101858:	2201      	movs	r2, #1
 810185a:	4629      	mov	r1, r5
 810185c:	4638      	mov	r0, r7
 810185e:	f009 f971 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 8101862:	230a      	movs	r3, #10
 8101864:	4629      	mov	r1, r5
 8101866:	2203      	movs	r2, #3
 8101868:	4638      	mov	r0, r7
 810186a:	f009 fb59 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810186e:	2201      	movs	r2, #1
 8101870:	2110      	movs	r1, #16
 8101872:	4630      	mov	r0, r6
 8101874:	f004 ff6e 	bl	8106754 <HAL_GPIO_WritePin>
  lsb = (SerialData[1] << 8);
 8101878:	7e60      	ldrb	r0, [r4, #25]
  msb = (SerialData[0] << 16);
 810187a:	7e23      	ldrb	r3, [r4, #24]
  int32_t var1, var2;
  int32_t adc_T = Read24Bit(address::REG_TEMP_MSB);
  adc_T >>= 4;

  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 810187c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;

  t_fine = var1 + var2;
  float T = (t_fine * 5 + 128) >> 8;
  temperature = (T / 100);
 810187e:	eddf 6a15 	vldr	s13, [pc, #84]	; 81018d4 <_ZN6Bmp2808ReadTempEv+0x98>
  lsb = (SerialData[1] << 8);
 8101882:	0200      	lsls	r0, r0, #8
  Out = msb | lsb | xlsb;
 8101884:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 8101888:	ebc1 2210 	rsb	r2, r1, r0, lsr #8
 810188c:	fb02 f302 	mul.w	r3, r2, r2
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101890:	0049      	lsls	r1, r1, #1
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101892:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101896:	ebc1 11d0 	rsb	r1, r1, r0, lsr #7
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 810189a:	131b      	asrs	r3, r3, #12
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 810189c:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 81018a0:	fb02 f303 	mul.w	r3, r2, r3
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81018a4:	fb00 f101 	mul.w	r1, r0, r1
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 81018a8:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 81018aa:	eb03 23e1 	add.w	r3, r3, r1, asr #11
  float T = (t_fine * 5 + 128) >> 8;
 81018ae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 81018b2:	3280      	adds	r2, #128	; 0x80
 81018b4:	1212      	asrs	r2, r2, #8
 81018b6:	ee07 2a90 	vmov	s15, r2
 81018ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  t_fine = var1 + var2;
 81018be:	6023      	str	r3, [r4, #0]
  temperature = (T / 100);
 81018c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81018c4:	ed84 7a01 	vstr	s14, [r4, #4]
}
 81018c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81018ca:	bf00      	nop
 81018cc:	58020000 	.word	0x58020000
 81018d0:	100002a8 	.word	0x100002a8
 81018d4:	42c80000 	.word	0x42c80000

081018d8 <_ZN6Bmp28012ReadPressureEv>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::ReadPressure()
{
 81018d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  SerialData[0] = Register | address::SPI_READ;
 81018dc:	4605      	mov	r5, r0
{
 81018de:	4604      	mov	r4, r0

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp();
 81018e0:	f7ff ffac 	bl	810183c <_ZN6Bmp2808ReadTempEv>
  SerialData[0] = Register | address::SPI_READ;
 81018e4:	23f7      	movs	r3, #247	; 0xf7
 81018e6:	f805 3f18 	strb.w	r3, [r5, #24]!
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81018ea:	4879      	ldr	r0, [pc, #484]	; (8101ad0 <_ZN6Bmp28012ReadPressureEv+0x1f8>)
 81018ec:	2200      	movs	r2, #0
 81018ee:	2110      	movs	r1, #16
 81018f0:	f004 ff30 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81018f4:	4629      	mov	r1, r5
 81018f6:	230a      	movs	r3, #10
 81018f8:	2201      	movs	r2, #1
 81018fa:	4876      	ldr	r0, [pc, #472]	; (8101ad4 <_ZN6Bmp28012ReadPressureEv+0x1fc>)
 81018fc:	f009 f922 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 8101900:	230a      	movs	r3, #10
 8101902:	4629      	mov	r1, r5
 8101904:	2203      	movs	r2, #3
 8101906:	4873      	ldr	r0, [pc, #460]	; (8101ad4 <_ZN6Bmp28012ReadPressureEv+0x1fc>)
 8101908:	f009 fb0a 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810190c:	4870      	ldr	r0, [pc, #448]	; (8101ad0 <_ZN6Bmp28012ReadPressureEv+0x1f8>)
 810190e:	2201      	movs	r2, #1
 8101910:	2110      	movs	r1, #16
 8101912:	f004 ff1f 	bl	8106754 <HAL_GPIO_WritePin>

  int32_t adc_P = Read24Bit(address::REG_PRESS_MSB);
  adc_P >>= 4;

  var1 = ((int64_t) t_fine) - 128000;
 8101916:	6821      	ldr	r1, [r4, #0]
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
  var2 = var2 + (((int64_t) comp_values.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t) comp_values.dig_P3) >> 8) + ((var1 * (int64_t) comp_values.dig_P2) << 12);
 8101918:	f9b4 0038 	ldrsh.w	r0, [r4, #56]	; 0x38
 810191c:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
  var1 = ((int64_t) t_fine) - 128000;
 8101920:	f5b1 3cfa 	subs.w	ip, r1, #128000	; 0x1f400
 8101924:	ea4f 71e1 	mov.w	r1, r1, asr #31
 8101928:	f141 31ff 	adc.w	r1, r1, #4294967295
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 810192c:	fbac 5e0c 	umull	r5, lr, ip, ip
 8101930:	fb0c f201 	mul.w	r2, ip, r1
  var1 = ((var1 * var1 * (int64_t) comp_values.dig_P3) >> 8) + ((var1 * (int64_t) comp_values.dig_P2) << 12);
 8101934:	17c6      	asrs	r6, r0, #31
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 8101936:	eb0e 0e42 	add.w	lr, lr, r2, lsl #1
  var1 = ((var1 * var1 * (int64_t) comp_values.dig_P3) >> 8) + ((var1 * (int64_t) comp_values.dig_P2) << 12);
 810193a:	fb00 f201 	mul.w	r2, r0, r1
 810193e:	17df      	asrs	r7, r3, #31
 8101940:	fb0c 2206 	mla	r2, ip, r6, r2
 8101944:	fb03 f60e 	mul.w	r6, r3, lr
 8101948:	fb05 6607 	mla	r6, r5, r7, r6
 810194c:	fba0 070c 	umull	r0, r7, r0, ip
 8101950:	443a      	add	r2, r7
 8101952:	fba3 3705 	umull	r3, r7, r3, r5
 8101956:	443e      	add	r6, r7
 8101958:	0312      	lsls	r2, r2, #12
 810195a:	0a1b      	lsrs	r3, r3, #8
 810195c:	ea42 5210 	orr.w	r2, r2, r0, lsr #20
 8101960:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8101964:	0300      	lsls	r0, r0, #12
 8101966:	181b      	adds	r3, r3, r0
 8101968:	eb42 2226 	adc.w	r2, r2, r6, asr #8
  var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) comp_values.dig_P1) >> 33;
 810196c:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
 810196e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8101972:	fba3 3006 	umull	r3, r0, r3, r6
 8101976:	fb06 0002 	mla	r0, r6, r2, r0
 810197a:	17c3      	asrs	r3, r0, #31
 810197c:	1042      	asrs	r2, r0, #1

  if (var1 == 0)
 810197e:	ea53 0060 	orrs.w	r0, r3, r0, asr #1
 8101982:	f000 80a3 	beq.w	8101acc <_ZN6Bmp28012ReadPressureEv+0x1f4>
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 8101986:	f9b4 803e 	ldrsh.w	r8, [r4, #62]	; 0x3e
  lsb = (SerialData[1] << 8);
 810198a:	7e60      	ldrb	r0, [r4, #25]
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 810198c:	f9b4 7040 	ldrsh.w	r7, [r4, #64]	; 0x40
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 8101990:	fb08 f101 	mul.w	r1, r8, r1
 8101994:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8101998:	fb0c 1109 	mla	r1, ip, r9, r1
 810199c:	fba8 8c0c 	umull	r8, ip, r8, ip
 81019a0:	448c      	add	ip, r1
 81019a2:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 81019a6:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
 81019aa:	ea4f 4148 	mov.w	r1, r8, lsl #17
  msb = (SerialData[0] << 16);
 81019ae:	f894 8018 	ldrb.w	r8, [r4, #24]
  lsb = (SerialData[1] << 8);
 81019b2:	0200      	lsls	r0, r0, #8
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81019b4:	fb07 fe0e 	mul.w	lr, r7, lr
  Out = msb | lsb | xlsb;
 81019b8:	ea40 4808 	orr.w	r8, r0, r8, lsl #16
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81019bc:	17f8      	asrs	r0, r7, #31
 81019be:	fb05 ee00 	mla	lr, r5, r0, lr
 81019c2:	fba7 7505 	umull	r7, r5, r7, r5
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 81019c6:	19cf      	adds	r7, r1, r7
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81019c8:	4475      	add	r5, lr
  var2 = var2 + (((int64_t) comp_values.dig_P4) << 35);
 81019ca:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
  adc_P >>= 4;
 81019ce:	ea4f 1818 	mov.w	r8, r8, lsr #4
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 81019d2:	eb45 050c 	adc.w	r5, r5, ip
  {
    return; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 81019d6:	f5c8 1880 	rsb	r8, r8, #1048576	; 0x100000
 81019da:	2600      	movs	r6, #0
  var2 = var2 + (((int64_t) comp_values.dig_P4) << 35);
 81019dc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 81019e0:	19f6      	adds	r6, r6, r7
  p = (((p << 31) - var2) * 3125) / var1;
 81019e2:	f008 4500 	and.w	r5, r8, #2147483648	; 0x80000000
 81019e6:	ea4f 70c8 	mov.w	r0, r8, lsl #31
 81019ea:	1b80      	subs	r0, r0, r6
 81019ec:	ea45 0558 	orr.w	r5, r5, r8, lsr #1
 81019f0:	eb65 0501 	sbc.w	r5, r5, r1
 81019f4:	eb10 0c00 	adds.w	ip, r0, r0
 81019f8:	eb45 0e05 	adc.w	lr, r5, r5
 81019fc:	eb1c 0c00 	adds.w	ip, ip, r0
 8101a00:	eb45 0e0e 	adc.w	lr, r5, lr
 8101a04:	ea4f 118e 	mov.w	r1, lr, lsl #6
 8101a08:	ea4f 168c 	mov.w	r6, ip, lsl #6
 8101a0c:	ea41 619c 	orr.w	r1, r1, ip, lsr #26
 8101a10:	eb1c 0c06 	adds.w	ip, ip, r6
 8101a14:	eb4e 0e01 	adc.w	lr, lr, r1
 8101a18:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8101a1c:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8101a20:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8101a24:	eb1c 0c00 	adds.w	ip, ip, r0
 8101a28:	eb45 010e 	adc.w	r1, r5, lr
 8101a2c:	0089      	lsls	r1, r1, #2
 8101a2e:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8101a32:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8101a36:	eb1c 0000 	adds.w	r0, ip, r0
 8101a3a:	eb45 0101 	adc.w	r1, r5, r1
 8101a3e:	f7ff fa15 	bl	8100e6c <__aeabi_ldivmod>
  var1 = (((int64_t) comp_values.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8101a42:	f9b4 2046 	ldrsh.w	r2, [r4, #70]	; 0x46
  var2 = (((int64_t) comp_values.dig_P8) * p) >> 19;
 8101a46:	f9b4 e044 	ldrsh.w	lr, [r4, #68]	; 0x44
  var1 = (((int64_t) comp_values.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8101a4a:	ea4f 3c61 	mov.w	ip, r1, asr #13
 8101a4e:	0b45      	lsrs	r5, r0, #13
 8101a50:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
 8101a54:	fb02 f30c 	mul.w	r3, r2, ip
 8101a58:	17d6      	asrs	r6, r2, #31
 8101a5a:	fb05 3306 	mla	r3, r5, r6, r3
 8101a5e:	fba2 2605 	umull	r2, r6, r2, r5
 8101a62:	4433      	add	r3, r6
 8101a64:	fb02 fc0c 	mul.w	ip, r2, ip
 8101a68:	fb05 cc03 	mla	ip, r5, r3, ip
 8101a6c:	fba2 2505 	umull	r2, r5, r2, r5
 8101a70:	4465      	add	r5, ip
 8101a72:	0e53      	lsrs	r3, r2, #25
 8101a74:	ea43 13c5 	orr.w	r3, r3, r5, lsl #7

  p = ((p + var1 + var2) >> 8) + (((int64_t) comp_values.dig_P7) << 4);
 8101a78:	181b      	adds	r3, r3, r0
 8101a7a:	eb41 6565 	adc.w	r5, r1, r5, asr #25
  var2 = (((int64_t) comp_values.dig_P8) * p) >> 19;
 8101a7e:	ea4f 72ee 	mov.w	r2, lr, asr #31
 8101a82:	fb0e f101 	mul.w	r1, lr, r1
 8101a86:	fb02 1100 	mla	r1, r2, r0, r1
 8101a8a:	fbae 0e00 	umull	r0, lr, lr, r0
 8101a8e:	4471      	add	r1, lr
 8101a90:	0cc0      	lsrs	r0, r0, #19
 8101a92:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t) comp_values.dig_P7) << 4);
 8101a96:	181b      	adds	r3, r3, r0
 8101a98:	f9b4 0042 	ldrsh.w	r0, [r4, #66]	; 0x42
 8101a9c:	ea4f 76e0 	mov.w	r6, r0, asr #31
 8101aa0:	eb45 41e1 	adc.w	r1, r5, r1, asr #19
 8101aa4:	0a1b      	lsrs	r3, r3, #8
 8101aa6:	0136      	lsls	r6, r6, #4
 8101aa8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8101aac:	ea46 7610 	orr.w	r6, r6, r0, lsr #28
 8101ab0:	0100      	lsls	r0, r0, #4
 8101ab2:	18c0      	adds	r0, r0, r3

  pressure = (float) p / 256;
 8101ab4:	eb46 2121 	adc.w	r1, r6, r1, asr #8
 8101ab8:	f7ff f99a 	bl	8100df0 <__aeabi_l2f>
 8101abc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8101ad8 <_ZN6Bmp28012ReadPressureEv+0x200>
 8101ac0:	ee07 0a10 	vmov	s14, r0
 8101ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ac8:	edc4 7a02 	vstr	s15, [r4, #8]

}
 8101acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8101ad0:	58020000 	.word	0x58020000
 8101ad4:	100002a8 	.word	0x100002a8
 8101ad8:	3b800000 	.word	0x3b800000
 8101adc:	00000000 	.word	0x00000000

08101ae0 <_ZN6Bmp2803RunEv>:
{
 8101ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 8101ae2:	4605      	mov	r5, r0
 8101ae4:	23fa      	movs	r3, #250	; 0xfa
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101ae6:	4e36      	ldr	r6, [pc, #216]	; (8101bc0 <_ZN6Bmp2803RunEv+0xe0>)
  SerialData[0] = Register | address::SPI_READ;
 8101ae8:	f805 3f18 	strb.w	r3, [r5, #24]!
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101aec:	4f35      	ldr	r7, [pc, #212]	; (8101bc4 <_ZN6Bmp2803RunEv+0xe4>)
{
 8101aee:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101af0:	2200      	movs	r2, #0
 8101af2:	2110      	movs	r1, #16
 8101af4:	4630      	mov	r0, r6
 8101af6:	f004 fe2d 	bl	8106754 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101afa:	230a      	movs	r3, #10
 8101afc:	2201      	movs	r2, #1
 8101afe:	4629      	mov	r1, r5
 8101b00:	4638      	mov	r0, r7
 8101b02:	f009 f81f 	bl	810ab44 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 8101b06:	230a      	movs	r3, #10
 8101b08:	4629      	mov	r1, r5
 8101b0a:	2203      	movs	r2, #3
 8101b0c:	4638      	mov	r0, r7
 8101b0e:	f009 fa07 	bl	810af20 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101b12:	2201      	movs	r2, #1
 8101b14:	2110      	movs	r1, #16
 8101b16:	4630      	mov	r0, r6
 8101b18:	f004 fe1c 	bl	8106754 <HAL_GPIO_WritePin>
  lsb = (SerialData[1] << 8);
 8101b1c:	7e60      	ldrb	r0, [r4, #25]
  msb = (SerialData[0] << 16);
 8101b1e:	7e23      	ldrb	r3, [r4, #24]
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b20:	8e21      	ldrh	r1, [r4, #48]	; 0x30
  temperature = (T / 100);
 8101b22:	eddf 6a29 	vldr	s13, [pc, #164]	; 8101bc8 <_ZN6Bmp2803RunEv+0xe8>
  lsb = (SerialData[1] << 8);
 8101b26:	0200      	lsls	r0, r0, #8
  Out = msb | lsb | xlsb;
 8101b28:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 8101b2c:	ebc1 2210 	rsb	r2, r1, r0, lsr #8
 8101b30:	fb02 f302 	mul.w	r3, r2, r2
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b34:	0049      	lsls	r1, r1, #1
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101b36:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b3a:	ebc1 11d0 	rsb	r1, r1, r0, lsr #7
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101b3e:	131b      	asrs	r3, r3, #12
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b40:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101b44:	fb02 f303 	mul.w	r3, r2, r3
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101b48:	fb00 f101 	mul.w	r1, r0, r1
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 8101b4c:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 8101b4e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
  float T = (t_fine * 5 + 128) >> 8;
 8101b52:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8101b56:	3280      	adds	r2, #128	; 0x80
 8101b58:	1212      	asrs	r2, r2, #8
 8101b5a:	ee07 2a90 	vmov	s15, r2
 8101b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  t_fine = var1 + var2;
 8101b62:	6023      	str	r3, [r4, #0]
  temperature = (T / 100);
 8101b64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  ReadPressure();
 8101b68:	4620      	mov	r0, r4
  temperature = (T / 100);
 8101b6a:	ed84 7a01 	vstr	s14, [r4, #4]
  ReadPressure();
 8101b6e:	f7ff feb3 	bl	81018d8 <_ZN6Bmp28012ReadPressureEv>
 * @param baro a pointer to the BMP280 struct
 * @returns nothing.
 */
void Bmp280::ReadAltitude()
{
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure / SEA_LEVEL_PRESSURE), (1 / 5.255)));
 8101b72:	ed94 7a02 	vldr	s14, [r4, #8]
 8101b76:	eddf 7a15 	vldr	s15, [pc, #84]	; 8101bcc <_ZN6Bmp2803RunEv+0xec>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8101b7a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8101b7e:	ee17 0a90 	vmov	r0, s15
 8101b82:	f7fe fd0d 	bl	81005a0 <__aeabi_f2d>
 8101b86:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8101bb0 <_ZN6Bmp2803RunEv+0xd0>
 8101b8a:	ec41 0b10 	vmov	d0, r0, r1
 8101b8e:	f00b ff6b 	bl	810da68 <pow>
 8101b92:	490f      	ldr	r1, [pc, #60]	; (8101bd0 <_ZN6Bmp2803RunEv+0xf0>)
 8101b94:	ec53 2b10 	vmov	r2, r3, d0
 8101b98:	2000      	movs	r0, #0
 8101b9a:	f7fe fba1 	bl	81002e0 <__aeabi_dsub>
 8101b9e:	a306      	add	r3, pc, #24	; (adr r3, 8101bb8 <_ZN6Bmp2803RunEv+0xd8>)
 8101ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ba4:	f7fe fd54 	bl	8100650 <__aeabi_dmul>
 8101ba8:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 8101bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101bae:	bf00      	nop
 8101bb0:	ccd9456c 	.word	0xccd9456c
 8101bb4:	3fc85b95 	.word	0x3fc85b95
 8101bb8:	00000000 	.word	0x00000000
 8101bbc:	40e5a540 	.word	0x40e5a540
 8101bc0:	58020000 	.word	0x58020000
 8101bc4:	100002a8 	.word	0x100002a8
 8101bc8:	42c80000 	.word	0x42c80000
 8101bcc:	47c5e680 	.word	0x47c5e680
 8101bd0:	3ff00000 	.word	0x3ff00000

08101bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	b082      	sub	sp, #8
 8101bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101bda:	4b2d      	ldr	r3, [pc, #180]	; (8101c90 <MX_DMA_Init+0xbc>)
 8101bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101be0:	4a2b      	ldr	r2, [pc, #172]	; (8101c90 <MX_DMA_Init+0xbc>)
 8101be2:	f043 0301 	orr.w	r3, r3, #1
 8101be6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101bea:	4b29      	ldr	r3, [pc, #164]	; (8101c90 <MX_DMA_Init+0xbc>)
 8101bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101bf0:	f003 0301 	and.w	r3, r3, #1
 8101bf4:	607b      	str	r3, [r7, #4]
 8101bf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101bf8:	4b25      	ldr	r3, [pc, #148]	; (8101c90 <MX_DMA_Init+0xbc>)
 8101bfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101bfe:	4a24      	ldr	r2, [pc, #144]	; (8101c90 <MX_DMA_Init+0xbc>)
 8101c00:	f043 0302 	orr.w	r3, r3, #2
 8101c04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101c08:	4b21      	ldr	r3, [pc, #132]	; (8101c90 <MX_DMA_Init+0xbc>)
 8101c0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c0e:	f003 0302 	and.w	r3, r3, #2
 8101c12:	603b      	str	r3, [r7, #0]
 8101c14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101c16:	2200      	movs	r2, #0
 8101c18:	2100      	movs	r1, #0
 8101c1a:	200b      	movs	r0, #11
 8101c1c:	f001 fd4d 	bl	81036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101c20:	200b      	movs	r0, #11
 8101c22:	f001 fd64 	bl	81036ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101c26:	2200      	movs	r2, #0
 8101c28:	2100      	movs	r1, #0
 8101c2a:	200c      	movs	r0, #12
 8101c2c:	f001 fd45 	bl	81036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101c30:	200c      	movs	r0, #12
 8101c32:	f001 fd5c 	bl	81036ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101c36:	2200      	movs	r2, #0
 8101c38:	2100      	movs	r1, #0
 8101c3a:	200d      	movs	r0, #13
 8101c3c:	f001 fd3d 	bl	81036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101c40:	200d      	movs	r0, #13
 8101c42:	f001 fd54 	bl	81036ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101c46:	2200      	movs	r2, #0
 8101c48:	2100      	movs	r1, #0
 8101c4a:	200e      	movs	r0, #14
 8101c4c:	f001 fd35 	bl	81036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101c50:	200e      	movs	r0, #14
 8101c52:	f001 fd4c 	bl	81036ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8101c56:	2200      	movs	r2, #0
 8101c58:	2100      	movs	r1, #0
 8101c5a:	200f      	movs	r0, #15
 8101c5c:	f001 fd2d 	bl	81036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8101c60:	200f      	movs	r0, #15
 8101c62:	f001 fd44 	bl	81036ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101c66:	2200      	movs	r2, #0
 8101c68:	2100      	movs	r1, #0
 8101c6a:	202f      	movs	r0, #47	; 0x2f
 8101c6c:	f001 fd25 	bl	81036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101c70:	202f      	movs	r0, #47	; 0x2f
 8101c72:	f001 fd3c 	bl	81036ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101c76:	2200      	movs	r2, #0
 8101c78:	2100      	movs	r1, #0
 8101c7a:	2038      	movs	r0, #56	; 0x38
 8101c7c:	f001 fd1d 	bl	81036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101c80:	2038      	movs	r0, #56	; 0x38
 8101c82:	f001 fd34 	bl	81036ee <HAL_NVIC_EnableIRQ>

}
 8101c86:	bf00      	nop
 8101c88:	3708      	adds	r7, #8
 8101c8a:	46bd      	mov	sp, r7
 8101c8c:	bd80      	pop	{r7, pc}
 8101c8e:	bf00      	nop
 8101c90:	58024400 	.word	0x58024400

08101c94 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101c94:	b580      	push	{r7, lr}
 8101c96:	b08a      	sub	sp, #40	; 0x28
 8101c98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c9a:	f107 0314 	add.w	r3, r7, #20
 8101c9e:	2200      	movs	r2, #0
 8101ca0:	601a      	str	r2, [r3, #0]
 8101ca2:	605a      	str	r2, [r3, #4]
 8101ca4:	609a      	str	r2, [r3, #8]
 8101ca6:	60da      	str	r2, [r3, #12]
 8101ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101caa:	4b29      	ldr	r3, [pc, #164]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cb0:	4a27      	ldr	r2, [pc, #156]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101cb2:	f043 0301 	orr.w	r3, r3, #1
 8101cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cba:	4b25      	ldr	r3, [pc, #148]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cc0:	f003 0301 	and.w	r3, r3, #1
 8101cc4:	613b      	str	r3, [r7, #16]
 8101cc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101cc8:	4b21      	ldr	r3, [pc, #132]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cce:	4a20      	ldr	r2, [pc, #128]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101cd0:	f043 0320 	orr.w	r3, r3, #32
 8101cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cd8:	4b1d      	ldr	r3, [pc, #116]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cde:	f003 0320 	and.w	r3, r3, #32
 8101ce2:	60fb      	str	r3, [r7, #12]
 8101ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101ce6:	4b1a      	ldr	r3, [pc, #104]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cec:	4a18      	ldr	r2, [pc, #96]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101cee:	f043 0308 	orr.w	r3, r3, #8
 8101cf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101cf6:	4b16      	ldr	r3, [pc, #88]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101cfc:	f003 0308 	and.w	r3, r3, #8
 8101d00:	60bb      	str	r3, [r7, #8]
 8101d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d04:	4b12      	ldr	r3, [pc, #72]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d0a:	4a11      	ldr	r2, [pc, #68]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101d0c:	f043 0302 	orr.w	r3, r3, #2
 8101d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d14:	4b0e      	ldr	r3, [pc, #56]	; (8101d50 <MX_GPIO_Init+0xbc>)
 8101d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d1a:	f003 0302 	and.w	r3, r3, #2
 8101d1e:	607b      	str	r3, [r7, #4]
 8101d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101d22:	2201      	movs	r2, #1
 8101d24:	2110      	movs	r1, #16
 8101d26:	480b      	ldr	r0, [pc, #44]	; (8101d54 <MX_GPIO_Init+0xc0>)
 8101d28:	f004 fd14 	bl	8106754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101d2c:	2310      	movs	r3, #16
 8101d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101d30:	2301      	movs	r3, #1
 8101d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d34:	2300      	movs	r3, #0
 8101d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d38:	2300      	movs	r3, #0
 8101d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101d3c:	f107 0314 	add.w	r3, r7, #20
 8101d40:	4619      	mov	r1, r3
 8101d42:	4804      	ldr	r0, [pc, #16]	; (8101d54 <MX_GPIO_Init+0xc0>)
 8101d44:	f004 fb56 	bl	81063f4 <HAL_GPIO_Init>

}
 8101d48:	bf00      	nop
 8101d4a:	3728      	adds	r7, #40	; 0x28
 8101d4c:	46bd      	mov	sp, r7
 8101d4e:	bd80      	pop	{r7, pc}
 8101d50:	58024400 	.word	0x58024400
 8101d54:	58020000 	.word	0x58020000

08101d58 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101d58:	b580      	push	{r7, lr}
 8101d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101d5c:	4b1b      	ldr	r3, [pc, #108]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d5e:	4a1c      	ldr	r2, [pc, #112]	; (8101dd0 <MX_I2C1_Init+0x78>)
 8101d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8101d62:	4b1a      	ldr	r3, [pc, #104]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d64:	4a1b      	ldr	r2, [pc, #108]	; (8101dd4 <MX_I2C1_Init+0x7c>)
 8101d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101d68:	4b18      	ldr	r3, [pc, #96]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d6a:	2200      	movs	r2, #0
 8101d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101d6e:	4b17      	ldr	r3, [pc, #92]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d70:	2201      	movs	r2, #1
 8101d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101d74:	4b15      	ldr	r3, [pc, #84]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d76:	2200      	movs	r2, #0
 8101d78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101d7a:	4b14      	ldr	r3, [pc, #80]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d7c:	2200      	movs	r2, #0
 8101d7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101d80:	4b12      	ldr	r3, [pc, #72]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d82:	2200      	movs	r2, #0
 8101d84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101d86:	4b11      	ldr	r3, [pc, #68]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d88:	2200      	movs	r2, #0
 8101d8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101d8c:	4b0f      	ldr	r3, [pc, #60]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d8e:	2200      	movs	r2, #0
 8101d90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101d92:	480e      	ldr	r0, [pc, #56]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101d94:	f004 fd38 	bl	8106808 <HAL_I2C_Init>
 8101d98:	4603      	mov	r3, r0
 8101d9a:	2b00      	cmp	r3, #0
 8101d9c:	d001      	beq.n	8101da2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101d9e:	f000 fb97 	bl	81024d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101da2:	2100      	movs	r1, #0
 8101da4:	4809      	ldr	r0, [pc, #36]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101da6:	f006 ff6b 	bl	8108c80 <HAL_I2CEx_ConfigAnalogFilter>
 8101daa:	4603      	mov	r3, r0
 8101dac:	2b00      	cmp	r3, #0
 8101dae:	d001      	beq.n	8101db4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101db0:	f000 fb8e 	bl	81024d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101db4:	2100      	movs	r1, #0
 8101db6:	4805      	ldr	r0, [pc, #20]	; (8101dcc <MX_I2C1_Init+0x74>)
 8101db8:	f006 ffad 	bl	8108d16 <HAL_I2CEx_ConfigDigitalFilter>
 8101dbc:	4603      	mov	r3, r0
 8101dbe:	2b00      	cmp	r3, #0
 8101dc0:	d001      	beq.n	8101dc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101dc2:	f000 fb85 	bl	81024d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101dc6:	bf00      	nop
 8101dc8:	bd80      	pop	{r7, pc}
 8101dca:	bf00      	nop
 8101dcc:	1000016c 	.word	0x1000016c
 8101dd0:	40005400 	.word	0x40005400
 8101dd4:	307075b1 	.word	0x307075b1

08101dd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101dd8:	b580      	push	{r7, lr}
 8101dda:	b0b8      	sub	sp, #224	; 0xe0
 8101ddc:	af00      	add	r7, sp, #0
 8101dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101de0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101de4:	2200      	movs	r2, #0
 8101de6:	601a      	str	r2, [r3, #0]
 8101de8:	605a      	str	r2, [r3, #4]
 8101dea:	609a      	str	r2, [r3, #8]
 8101dec:	60da      	str	r2, [r3, #12]
 8101dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101df0:	f107 0310 	add.w	r3, r7, #16
 8101df4:	22bc      	movs	r2, #188	; 0xbc
 8101df6:	2100      	movs	r1, #0
 8101df8:	4618      	mov	r0, r3
 8101dfa:	f00c fd79 	bl	810e8f0 <memset>
  if(i2cHandle->Instance==I2C1)
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	681b      	ldr	r3, [r3, #0]
 8101e02:	4a5b      	ldr	r2, [pc, #364]	; (8101f70 <HAL_I2C_MspInit+0x198>)
 8101e04:	4293      	cmp	r3, r2
 8101e06:	f040 80af 	bne.w	8101f68 <HAL_I2C_MspInit+0x190>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101e0a:	2308      	movs	r3, #8
 8101e0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101e0e:	2300      	movs	r3, #0
 8101e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e14:	f107 0310 	add.w	r3, r7, #16
 8101e18:	4618      	mov	r0, r3
 8101e1a:	f007 fa29 	bl	8109270 <HAL_RCCEx_PeriphCLKConfig>
 8101e1e:	4603      	mov	r3, r0
 8101e20:	2b00      	cmp	r3, #0
 8101e22:	d001      	beq.n	8101e28 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8101e24:	f000 fb54 	bl	81024d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101e28:	4b52      	ldr	r3, [pc, #328]	; (8101f74 <HAL_I2C_MspInit+0x19c>)
 8101e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e2e:	4a51      	ldr	r2, [pc, #324]	; (8101f74 <HAL_I2C_MspInit+0x19c>)
 8101e30:	f043 0302 	orr.w	r3, r3, #2
 8101e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e38:	4b4e      	ldr	r3, [pc, #312]	; (8101f74 <HAL_I2C_MspInit+0x19c>)
 8101e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e3e:	f003 0302 	and.w	r3, r3, #2
 8101e42:	60fb      	str	r3, [r7, #12]
 8101e44:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101e46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101e4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101e4e:	2312      	movs	r3, #18
 8101e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e54:	2300      	movs	r3, #0
 8101e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101e5a:	2300      	movs	r3, #0
 8101e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101e60:	2304      	movs	r3, #4
 8101e62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101e66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101e6a:	4619      	mov	r1, r3
 8101e6c:	4842      	ldr	r0, [pc, #264]	; (8101f78 <HAL_I2C_MspInit+0x1a0>)
 8101e6e:	f004 fac1 	bl	81063f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101e72:	4b40      	ldr	r3, [pc, #256]	; (8101f74 <HAL_I2C_MspInit+0x19c>)
 8101e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e78:	4a3e      	ldr	r2, [pc, #248]	; (8101f74 <HAL_I2C_MspInit+0x19c>)
 8101e7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101e7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e82:	4b3c      	ldr	r3, [pc, #240]	; (8101f74 <HAL_I2C_MspInit+0x19c>)
 8101e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101e8c:	60bb      	str	r3, [r7, #8]
 8101e8e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101e90:	4b3a      	ldr	r3, [pc, #232]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101e92:	4a3b      	ldr	r2, [pc, #236]	; (8101f80 <HAL_I2C_MspInit+0x1a8>)
 8101e94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101e96:	4b39      	ldr	r3, [pc, #228]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101e98:	2221      	movs	r2, #33	; 0x21
 8101e9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101e9c:	4b37      	ldr	r3, [pc, #220]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101e9e:	2200      	movs	r2, #0
 8101ea0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101ea2:	4b36      	ldr	r3, [pc, #216]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101ea4:	2200      	movs	r2, #0
 8101ea6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101ea8:	4b34      	ldr	r3, [pc, #208]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101eae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101eb0:	4b32      	ldr	r3, [pc, #200]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101eb2:	2200      	movs	r2, #0
 8101eb4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101eb6:	4b31      	ldr	r3, [pc, #196]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101eb8:	2200      	movs	r2, #0
 8101eba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101ebc:	4b2f      	ldr	r3, [pc, #188]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101ebe:	2200      	movs	r2, #0
 8101ec0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101ec2:	4b2e      	ldr	r3, [pc, #184]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101ec4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101ec8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101eca:	4b2c      	ldr	r3, [pc, #176]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101ecc:	2200      	movs	r2, #0
 8101ece:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101ed0:	482a      	ldr	r0, [pc, #168]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101ed2:	f001 fc3b 	bl	810374c <HAL_DMA_Init>
 8101ed6:	4603      	mov	r3, r0
 8101ed8:	2b00      	cmp	r3, #0
 8101eda:	d001      	beq.n	8101ee0 <HAL_I2C_MspInit+0x108>
    {
      Error_Handler();
 8101edc:	f000 faf8 	bl	81024d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101ee0:	687b      	ldr	r3, [r7, #4]
 8101ee2:	4a26      	ldr	r2, [pc, #152]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101ee4:	63da      	str	r2, [r3, #60]	; 0x3c
 8101ee6:	4a25      	ldr	r2, [pc, #148]	; (8101f7c <HAL_I2C_MspInit+0x1a4>)
 8101ee8:	687b      	ldr	r3, [r7, #4]
 8101eea:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8101eec:	4b25      	ldr	r3, [pc, #148]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101eee:	4a26      	ldr	r2, [pc, #152]	; (8101f88 <HAL_I2C_MspInit+0x1b0>)
 8101ef0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101ef2:	4b24      	ldr	r3, [pc, #144]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101ef4:	2222      	movs	r2, #34	; 0x22
 8101ef6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101ef8:	4b22      	ldr	r3, [pc, #136]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101efa:	2240      	movs	r2, #64	; 0x40
 8101efc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101efe:	4b21      	ldr	r3, [pc, #132]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f00:	2200      	movs	r2, #0
 8101f02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101f04:	4b1f      	ldr	r3, [pc, #124]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101f0a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101f0c:	4b1d      	ldr	r3, [pc, #116]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f0e:	2200      	movs	r2, #0
 8101f10:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101f12:	4b1c      	ldr	r3, [pc, #112]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f14:	2200      	movs	r2, #0
 8101f16:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8101f18:	4b1a      	ldr	r3, [pc, #104]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f1a:	2200      	movs	r2, #0
 8101f1c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101f1e:	4b19      	ldr	r3, [pc, #100]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101f24:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101f26:	4b17      	ldr	r3, [pc, #92]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f28:	2200      	movs	r2, #0
 8101f2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101f2c:	4815      	ldr	r0, [pc, #84]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f2e:	f001 fc0d 	bl	810374c <HAL_DMA_Init>
 8101f32:	4603      	mov	r3, r0
 8101f34:	2b00      	cmp	r3, #0
 8101f36:	d001      	beq.n	8101f3c <HAL_I2C_MspInit+0x164>
    {
      Error_Handler();
 8101f38:	f000 faca 	bl	81024d0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	4a11      	ldr	r2, [pc, #68]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f40:	639a      	str	r2, [r3, #56]	; 0x38
 8101f42:	4a10      	ldr	r2, [pc, #64]	; (8101f84 <HAL_I2C_MspInit+0x1ac>)
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101f48:	2200      	movs	r2, #0
 8101f4a:	2100      	movs	r1, #0
 8101f4c:	201f      	movs	r0, #31
 8101f4e:	f001 fbb4 	bl	81036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101f52:	201f      	movs	r0, #31
 8101f54:	f001 fbcb 	bl	81036ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101f58:	2200      	movs	r2, #0
 8101f5a:	2100      	movs	r1, #0
 8101f5c:	2020      	movs	r0, #32
 8101f5e:	f001 fbac 	bl	81036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101f62:	2020      	movs	r0, #32
 8101f64:	f001 fbc3 	bl	81036ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101f68:	bf00      	nop
 8101f6a:	37e0      	adds	r7, #224	; 0xe0
 8101f6c:	46bd      	mov	sp, r7
 8101f6e:	bd80      	pop	{r7, pc}
 8101f70:	40005400 	.word	0x40005400
 8101f74:	58024400 	.word	0x58024400
 8101f78:	58020400 	.word	0x58020400
 8101f7c:	100001b8 	.word	0x100001b8
 8101f80:	40020040 	.word	0x40020040
 8101f84:	10000230 	.word	0x10000230
 8101f88:	40020058 	.word	0x40020058

08101f8c <_ZN3IMU11GetGyroDataEv>:
  bool is_imu = Setup();

}

IMU::gyroData IMU::GetGyroData()
{
 8101f8c:	b530      	push	{r4, r5, lr}
 8101f8e:	b08b      	sub	sp, #44	; 0x2c
 * @returns number of bytes read
 */
uint8_t IMU::I2CReadBytes(const uint8_t &address, const uint8_t &reg,  uint8_t* buffer, uint8_t numBytes)
{
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101f90:	ad07      	add	r5, sp, #28
 8101f92:	2406      	movs	r4, #6
 8101f94:	e9cd 5400 	strd	r5, r4, [sp]
 8101f98:	2218      	movs	r2, #24
{
 8101f9a:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101f9c:	21d6      	movs	r1, #214	; 0xd6
 8101f9e:	2301      	movs	r3, #1
 8101fa0:	4819      	ldr	r0, [pc, #100]	; (8102008 <_ZN3IMU11GetGyroDataEv+0x7c>)
 8101fa2:	f004 fed1 	bl	8106d48 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(5);
 8101fa6:	2005      	movs	r0, #5
 8101fa8:	f000 ff96 	bl	8102ed8 <HAL_Delay>
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8101fac:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return gyro * gyro_res;
 8101fb0:	ed94 6a00 	vldr	s12, [r4]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8101fb4:	ee07 3a10 	vmov	s14, r3
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8101fb8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8101fbc:	ee07 3a90 	vmov	s15, r3
  gyro_values.x = CalcGyro(gx);
 8101fc0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8101fc4:	ee06 3a90 	vmov	s13, r3
  gyro_values.y = CalcGyro(gy);
 8101fc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  gyro_values.x = CalcGyro(gx);
 8101fcc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  gyro_values.z = CalcGyro(gz);
 8101fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return gyro * gyro_res;
 8101fd4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8101fd8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8101fdc:	ee67 7a86 	vmul.f32	s15, s15, s12
  gyro_values.x = CalcGyro(gx);
 8101fe0:	edc4 6a13 	vstr	s13, [r4, #76]	; 0x4c
  gyro_values.y = CalcGyro(gy);
 8101fe4:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
  gyro_values.z = CalcGyro(gz);
 8101fe8:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
  return gyro_values;
 8101fec:	344c      	adds	r4, #76	; 0x4c
 8101fee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8101ff2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8101ff6:	eddd 0a08 	vldr	s1, [sp, #32]
 8101ffa:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 8101ffe:	ed9d 0a07 	vldr	s0, [sp, #28]
 8102002:	b00b      	add	sp, #44	; 0x2c
 8102004:	bd30      	pop	{r4, r5, pc}
 8102006:	bf00      	nop
 8102008:	1000016c 	.word	0x1000016c

0810200c <_ZN3IMU12GetAccelDataEv>:
{
 810200c:	b530      	push	{r4, r5, lr}
 810200e:	b08b      	sub	sp, #44	; 0x2c
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8102010:	ad07      	add	r5, sp, #28
 8102012:	2406      	movs	r4, #6
 8102014:	e9cd 5400 	strd	r5, r4, [sp]
 8102018:	2228      	movs	r2, #40	; 0x28
{
 810201a:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 810201c:	21d6      	movs	r1, #214	; 0xd6
 810201e:	2301      	movs	r3, #1
 8102020:	4819      	ldr	r0, [pc, #100]	; (8102088 <_ZN3IMU12GetAccelDataEv+0x7c>)
 8102022:	f004 fe91 	bl	8106d48 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(5);
 8102026:	2005      	movs	r0, #5
 8102028:	f000 ff56 	bl	8102ed8 <HAL_Delay>
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into ay
 810202c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return accel * acc_res;
 8102030:	ed94 6a02 	vldr	s12, [r4, #8]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into ay
 8102034:	ee07 3a10 	vmov	s14, r3
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into az
 8102038:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 810203c:	ee07 3a90 	vmov	s15, r3
  accel_values.x = CalcAccel(ax);
 8102040:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8102044:	ee06 3a90 	vmov	s13, r3
  accel_values.y = CalcAccel(ay);
 8102048:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  accel_values.x = CalcAccel(ax);
 810204c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  accel_values.z = CalcAccel(az);
 8102050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return accel * acc_res;
 8102054:	ee66 6a86 	vmul.f32	s13, s13, s12
 8102058:	ee27 7a06 	vmul.f32	s14, s14, s12
 810205c:	ee67 7a86 	vmul.f32	s15, s15, s12
  accel_values.x = CalcAccel(ax);
 8102060:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
  accel_values.y = CalcAccel(ay);
 8102064:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
  accel_values.z = CalcAccel(az);
 8102068:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
  return accel_values;
 810206c:	3440      	adds	r4, #64	; 0x40
 810206e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8102072:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8102076:	eddd 0a08 	vldr	s1, [sp, #32]
 810207a:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 810207e:	ed9d 0a07 	vldr	s0, [sp, #28]
 8102082:	b00b      	add	sp, #44	; 0x2c
 8102084:	bd30      	pop	{r4, r5, pc}
 8102086:	bf00      	nop
 8102088:	1000016c 	.word	0x1000016c

0810208c <_ZN3IMU10GetMagDataEv>:
{
 810208c:	b530      	push	{r4, r5, lr}
 810208e:	b08b      	sub	sp, #44	; 0x2c
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8102090:	ad07      	add	r5, sp, #28
 8102092:	2406      	movs	r4, #6
 8102094:	e9cd 5400 	strd	r5, r4, [sp]
 8102098:	2228      	movs	r2, #40	; 0x28
{
 810209a:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 810209c:	213c      	movs	r1, #60	; 0x3c
 810209e:	2301      	movs	r3, #1
 81020a0:	4819      	ldr	r0, [pc, #100]	; (8102108 <_ZN3IMU10GetMagDataEv+0x7c>)
 81020a2:	f004 fe51 	bl	8106d48 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(5);
 81020a6:	2005      	movs	r0, #5
 81020a8:	f000 ff16 	bl	8102ed8 <HAL_Delay>
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 81020ac:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return mag * mag_res;
 81020b0:	ed94 6a01 	vldr	s12, [r4, #4]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 81020b4:	ee07 3a10 	vmov	s14, r3
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 81020b8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 81020bc:	ee07 3a90 	vmov	s15, r3
    mag_values.x = CalcMag(mx);
 81020c0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 81020c4:	ee06 3a90 	vmov	s13, r3
    mag_values.y = CalcMag(my);
 81020c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mag_values.x = CalcMag(mx);
 81020cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    mag_values.z = CalcMag(mz);
 81020d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return mag * mag_res;
 81020d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 81020d8:	ee27 7a06 	vmul.f32	s14, s14, s12
 81020dc:	ee67 7a86 	vmul.f32	s15, s15, s12
    mag_values.x = CalcMag(mx);
 81020e0:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    mag_values.y = CalcMag(my);
 81020e4:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    mag_values.z = CalcMag(mz);
 81020e8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
  return mag_values;
 81020ec:	3434      	adds	r4, #52	; 0x34
 81020ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 81020f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 81020f6:	eddd 0a08 	vldr	s1, [sp, #32]
 81020fa:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 81020fe:	ed9d 0a07 	vldr	s0, [sp, #28]
 8102102:	b00b      	add	sp, #44	; 0x2c
 8102104:	bd30      	pop	{r4, r5, pc}
 8102106:	bf00      	nop
 8102108:	1000016c 	.word	0x1000016c

0810210c <_ZN3IMU8InitGyroEv>:
{
 810210c:	b570      	push	{r4, r5, r6, lr}
   if(gyro_settings.enabled == true)
 810210e:	7c02      	ldrb	r2, [r0, #16]
{
 8102110:	b084      	sub	sp, #16
 8102112:	4604      	mov	r4, r0
   if(gyro_settings.enabled == true)
 8102114:	b102      	cbz	r2, 8102118 <_ZN3IMU8InitGyroEv+0xc>
       temp_reg_val = gyro_settings.sampleRate;
 8102116:	7d02      	ldrb	r2, [r0, #20]
   temp_reg_val |= gyro_settings.scale;
 8102118:	8a61      	ldrh	r1, [r4, #18]
   temp_reg_val |= gyro_settings.bandwidth;
 810211a:	7d63      	ldrb	r3, [r4, #21]
 */
HAL_StatusTypeDef IMU::WriteByte(const uint8_t &address, const uint8_t &reg, uint8_t data)
{
  HAL_StatusTypeDef status;
//  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810211c:	4830      	ldr	r0, [pc, #192]	; (81021e0 <_ZN3IMU8InitGyroEv+0xd4>)
   temp_reg_val |= gyro_settings.bandwidth;
 810211e:	430b      	orrs	r3, r1
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102120:	2601      	movs	r6, #1
   temp_reg_val |= gyro_settings.bandwidth;
 8102122:	431a      	orrs	r2, r3
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102124:	f10d 050f 	add.w	r5, sp, #15
 8102128:	4633      	mov	r3, r6
 810212a:	21d6      	movs	r1, #214	; 0xd6
 810212c:	f88d 200f 	strb.w	r2, [sp, #15]
 8102130:	e9cd 5600 	strd	r5, r6, [sp]
 8102134:	2210      	movs	r2, #16
 8102136:	f004 fd11 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 810213a:	2005      	movs	r0, #5
 810213c:	f000 fecc 	bl	8102ed8 <HAL_Delay>
    WriteByte(gyroaccaddress::LSM9DS1_AG_ADDR, gyroaccaddress::CTRL_REG2_G, temp_reg_val);
 8102140:	2100      	movs	r1, #0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102142:	2211      	movs	r2, #17
 8102144:	4633      	mov	r3, r6
 8102146:	f88d 100f 	strb.w	r1, [sp, #15]
 810214a:	4825      	ldr	r0, [pc, #148]	; (81021e0 <_ZN3IMU8InitGyroEv+0xd4>)
 810214c:	9601      	str	r6, [sp, #4]
 810214e:	21d6      	movs	r1, #214	; 0xd6
 8102150:	9500      	str	r5, [sp, #0]
 8102152:	f004 fd03 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 8102156:	2005      	movs	r0, #5
 8102158:	f000 febe 	bl	8102ed8 <HAL_Delay>
    if(gyro_settings.flipX)
 810215c:	7e63      	ldrb	r3, [r4, #25]
    if(gyro_settings.flipY)
 810215e:	7ea0      	ldrb	r0, [r4, #26]
    if(gyro_settings.flipX)
 8102160:	2b00      	cmp	r3, #0
    if(gyro_settings.flipZ)
 8102162:	7ee3      	ldrb	r3, [r4, #27]
    if(gyro_settings.flipX)
 8102164:	bf0b      	itete	eq
 8102166:	2110      	moveq	r1, #16
 8102168:	2130      	movne	r1, #48	; 0x30
 810216a:	2200      	moveq	r2, #0
 810216c:	2220      	movne	r2, #32
      temp_reg_val |= 1 << 4;
 810216e:	2800      	cmp	r0, #0
 8102170:	bf18      	it	ne
 8102172:	460a      	movne	r2, r1
    if(gyro_settings.flipZ)
 8102174:	b10b      	cbz	r3, 810217a <_ZN3IMU8InitGyroEv+0x6e>
      temp_reg_val |= 1 << 3;
 8102176:	f042 0208 	orr.w	r2, r2, #8
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810217a:	2301      	movs	r3, #1
 810217c:	e9cd 5300 	strd	r5, r3, [sp]
 8102180:	21d6      	movs	r1, #214	; 0xd6
 8102182:	f88d 200f 	strb.w	r2, [sp, #15]
 8102186:	4816      	ldr	r0, [pc, #88]	; (81021e0 <_ZN3IMU8InitGyroEv+0xd4>)
 8102188:	2213      	movs	r2, #19
 810218a:	f004 fce7 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 810218e:	2005      	movs	r0, #5
 8102190:	f000 fea2 	bl	8102ed8 <HAL_Delay>
    if(gyro_settings.enableZ)
 8102194:	7fe3      	ldrb	r3, [r4, #31]
    if(gyro_settings.enableY)
 8102196:	7fa1      	ldrb	r1, [r4, #30]
    if(gyro_settings.enableZ)
 8102198:	2b00      	cmp	r3, #0
    if(gyro_settings.enableX)
 810219a:	7f63      	ldrb	r3, [r4, #29]
    if(gyro_settings.enableZ)
 810219c:	bf0b      	itete	eq
 810219e:	2210      	moveq	r2, #16
 81021a0:	2230      	movne	r2, #48	; 0x30
 81021a2:	f04f 0c00 	moveq.w	ip, #0
 81021a6:	f04f 0c20 	movne.w	ip, #32
      temp_reg_val |= 1 << 4;
 81021aa:	2900      	cmp	r1, #0
 81021ac:	bf18      	it	ne
 81021ae:	4694      	movne	ip, r2
    if(gyro_settings.enableX)
 81021b0:	b10b      	cbz	r3, 81021b6 <_ZN3IMU8InitGyroEv+0xaa>
      temp_reg_val |= 1 << 3;
 81021b2:	f04c 0c08 	orr.w	ip, ip, #8
    if(gyro_settings.latchInterrupt)
 81021b6:	f894 3020 	ldrb.w	r3, [r4, #32]
 81021ba:	b10b      	cbz	r3, 81021c0 <_ZN3IMU8InitGyroEv+0xb4>
      temp_reg_val |= 1 << 1;
 81021bc:	f04c 0c02 	orr.w	ip, ip, #2
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81021c0:	2301      	movs	r3, #1
 81021c2:	e9cd 5300 	strd	r5, r3, [sp]
 81021c6:	221e      	movs	r2, #30
 81021c8:	21d6      	movs	r1, #214	; 0xd6
 81021ca:	4805      	ldr	r0, [pc, #20]	; (81021e0 <_ZN3IMU8InitGyroEv+0xd4>)
 81021cc:	f88d c00f 	strb.w	ip, [sp, #15]
 81021d0:	f004 fcc4 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 81021d4:	2005      	movs	r0, #5
 81021d6:	f000 fe7f 	bl	8102ed8 <HAL_Delay>
}
 81021da:	b004      	add	sp, #16
 81021dc:	bd70      	pop	{r4, r5, r6, pc}
 81021de:	bf00      	nop
 81021e0:	1000016c 	.word	0x1000016c

081021e4 <_ZN3IMU9InitAccelEv>:
{
 81021e4:	b530      	push	{r4, r5, lr}
  if(accel_settings.enableZ)
 81021e6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
{
 81021ea:	4604      	mov	r4, r0
  if(accel_settings.enableZ)
 81021ec:	2b00      	cmp	r3, #0
  if(accel_settings.enableY)
 81021ee:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
  if(accel_settings.enableX)
 81021f2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  if(accel_settings.enableZ)
 81021f6:	bf0b      	itete	eq
 81021f8:	2110      	moveq	r1, #16
 81021fa:	2130      	movne	r1, #48	; 0x30
 81021fc:	2200      	moveq	r2, #0
 81021fe:	2220      	movne	r2, #32
{
 8102200:	b085      	sub	sp, #20
    temp_reg_val |= 1 << 4;
 8102202:	2800      	cmp	r0, #0
 8102204:	bf18      	it	ne
 8102206:	460a      	movne	r2, r1
  if(accel_settings.enableX)
 8102208:	b10b      	cbz	r3, 810220e <_ZN3IMU9InitAccelEv+0x2a>
    temp_reg_val |= 1 << 3;
 810220a:	f042 0208 	orr.w	r2, r2, #8
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810220e:	2301      	movs	r3, #1
 8102210:	f10d 050f 	add.w	r5, sp, #15
 8102214:	e9cd 5300 	strd	r5, r3, [sp]
 8102218:	f88d 200f 	strb.w	r2, [sp, #15]
 810221c:	21d6      	movs	r1, #214	; 0xd6
 810221e:	221f      	movs	r2, #31
 8102220:	4812      	ldr	r0, [pc, #72]	; (810226c <_ZN3IMU9InitAccelEv+0x88>)
 8102222:	f004 fc9b 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 8102226:	2005      	movs	r0, #5
 8102228:	f000 fe56 	bl	8102ed8 <HAL_Delay>
  if(accel_settings.enabled == true)
 810222c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8102230:	b10b      	cbz	r3, 8102236 <_ZN3IMU9InitAccelEv+0x52>
    temp_reg_val = accel_settings.sampleRate;
 8102232:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  if(accel_settings.bandwidth > 0)
 8102236:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
  temp_reg_val |= accel_settings.scale;
 810223a:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810223e:	480b      	ldr	r0, [pc, #44]	; (810226c <_ZN3IMU9InitAccelEv+0x88>)
  temp_reg_val |= accel_settings.scale;
 8102240:	ea43 0401 	orr.w	r4, r3, r1
  if(accel_settings.bandwidth > 0)
 8102244:	2a00      	cmp	r2, #0
    temp_reg_val |= accel_settings.bandwidth;
 8102246:	bfc8      	it	gt
 8102248:	4314      	orrgt	r4, r2
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810224a:	f04f 0301 	mov.w	r3, #1
    temp_reg_val |= accel_settings.bandwidth;
 810224e:	bfc8      	it	gt
 8102250:	b2e4      	uxtbgt	r4, r4
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102252:	e9cd 5300 	strd	r5, r3, [sp]
 8102256:	2220      	movs	r2, #32
 8102258:	21d6      	movs	r1, #214	; 0xd6
 810225a:	f88d 400f 	strb.w	r4, [sp, #15]
 810225e:	f004 fc7d 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 8102262:	2005      	movs	r0, #5
 8102264:	f000 fe38 	bl	8102ed8 <HAL_Delay>
}
 8102268:	b005      	add	sp, #20
 810226a:	bd30      	pop	{r4, r5, pc}
 810226c:	1000016c 	.word	0x1000016c

08102270 <_ZN3IMU7InitMagEv>:
{
 8102270:	b570      	push	{r4, r5, r6, lr}
  if(mag_settings.tempCompensationEnable)
 8102272:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
  temp_reg_val |= mag_settings.sampleRate;
 8102276:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
 810227a:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
    temp_reg_val |=  0x1 << 7;
 810227e:	2b00      	cmp	r3, #0
{
 8102280:	b084      	sub	sp, #16
    temp_reg_val |=  0x1 << 7;
 8102282:	bf18      	it	ne
 8102284:	2380      	movne	r3, #128	; 0x80
  temp_reg_val |= mag_settings.sampleRate;
 8102286:	430a      	orrs	r2, r1
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102288:	2401      	movs	r4, #1
 810228a:	f10d 060f 	add.w	r6, sp, #15
  temp_reg_val |= mag_settings.sampleRate;
 810228e:	4313      	orrs	r3, r2
{
 8102290:	4605      	mov	r5, r0
 8102292:	f88d 300f 	strb.w	r3, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102296:	2220      	movs	r2, #32
 8102298:	4623      	mov	r3, r4
 810229a:	213c      	movs	r1, #60	; 0x3c
 810229c:	e9cd 6400 	strd	r6, r4, [sp]
 81022a0:	4825      	ldr	r0, [pc, #148]	; (8102338 <_ZN3IMU7InitMagEv+0xc8>)
 81022a2:	f004 fc5b 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 81022a6:	2005      	movs	r0, #5
 81022a8:	f000 fe16 	bl	8102ed8 <HAL_Delay>
   WriteByte(magaddress::LSM9DS1_M_ADDR, magaddress::CTRL_REG2_M, temp_reg_val);
 81022ac:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 81022b0:	f88d 100f 	strb.w	r1, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81022b4:	4623      	mov	r3, r4
 81022b6:	2221      	movs	r2, #33	; 0x21
 81022b8:	213c      	movs	r1, #60	; 0x3c
 81022ba:	e9cd 6400 	strd	r6, r4, [sp]
 81022be:	481e      	ldr	r0, [pc, #120]	; (8102338 <_ZN3IMU7InitMagEv+0xc8>)
 81022c0:	f004 fc4c 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 81022c4:	2005      	movs	r0, #5
 81022c6:	f000 fe07 	bl	8102ed8 <HAL_Delay>
   if(mag_settings.lowPowerEnable)
 81022ca:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   temp_reg_val |= mag_settings.operatingMode & 0x3;
 81022ce:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81022d2:	4819      	ldr	r0, [pc, #100]	; (8102338 <_ZN3IMU7InitMagEv+0xc8>)
     temp_reg_val |= 0x1 << 5;
 81022d4:	2a00      	cmp	r2, #0
 81022d6:	bf0c      	ite	eq
 81022d8:	2200      	moveq	r2, #0
 81022da:	2220      	movne	r2, #32
   temp_reg_val |= mag_settings.operatingMode & 0x3;
 81022dc:	f003 0303 	and.w	r3, r3, #3
 81022e0:	431a      	orrs	r2, r3
 81022e2:	f88d 200f 	strb.w	r2, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81022e6:	4623      	mov	r3, r4
 81022e8:	2222      	movs	r2, #34	; 0x22
 81022ea:	213c      	movs	r1, #60	; 0x3c
 81022ec:	e9cd 6400 	strd	r6, r4, [sp]
 81022f0:	f004 fc34 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 81022f4:	2005      	movs	r0, #5
 81022f6:	f000 fdef 	bl	8102ed8 <HAL_Delay>
   WriteByte( magaddress::LSM9DS1_M_ADDR,  magaddress::CTRL_REG4_M, temp_reg_val);
 81022fa:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 81022fe:	f88d 100f 	strb.w	r1, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102302:	4623      	mov	r3, r4
 8102304:	2223      	movs	r2, #35	; 0x23
 8102306:	213c      	movs	r1, #60	; 0x3c
 8102308:	e9cd 6400 	strd	r6, r4, [sp]
 810230c:	480a      	ldr	r0, [pc, #40]	; (8102338 <_ZN3IMU7InitMagEv+0xc8>)
 810230e:	f004 fc25 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 8102312:	2005      	movs	r0, #5
 8102314:	f000 fde0 	bl	8102ed8 <HAL_Delay>
   WriteByte( magaddress::LSM9DS1_M_ADDR,  magaddress::CTRL_REG5_M, temp_reg_val);
 8102318:	2500      	movs	r5, #0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810231a:	4623      	mov	r3, r4
 810231c:	2224      	movs	r2, #36	; 0x24
 810231e:	213c      	movs	r1, #60	; 0x3c
 8102320:	e9cd 6400 	strd	r6, r4, [sp]
 8102324:	4804      	ldr	r0, [pc, #16]	; (8102338 <_ZN3IMU7InitMagEv+0xc8>)
 8102326:	f88d 500f 	strb.w	r5, [sp, #15]
 810232a:	f004 fc17 	bl	8106b5c <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(5);
 810232e:	2005      	movs	r0, #5
 8102330:	f000 fdd2 	bl	8102ed8 <HAL_Delay>
}
 8102334:	b004      	add	sp, #16
 8102336:	bd70      	pop	{r4, r5, r6, pc}
 8102338:	1000016c 	.word	0x1000016c

0810233c <_ZN3IMU5SetupEv>:
{
 810233c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      mag_res = resolution::MAG_FS_4G;
 8102340:	4b33      	ldr	r3, [pc, #204]	; (8102410 <_ZN3IMU5SetupEv+0xd4>)
 8102342:	6043      	str	r3, [r0, #4]
{
 8102344:	b086      	sub	sp, #24
 gyro_settings.orientation = 0;
 8102346:	4b33      	ldr	r3, [pc, #204]	; (8102414 <_ZN3IMU5SetupEv+0xd8>)
      gyro_res =  resolution::GYRO_FS_245;
 8102348:	4933      	ldr	r1, [pc, #204]	; (8102418 <_ZN3IMU5SetupEv+0xdc>)
      acc_res =  resolution::ACC_FS_4G;
 810234a:	4a34      	ldr	r2, [pc, #208]	; (810241c <_ZN3IMU5SetupEv+0xe0>)
      gyro_res =  resolution::GYRO_FS_245;
 810234c:	6001      	str	r1, [r0, #0]
 gyro_settings.scale = to_underlying(settings::GyroFullScale::FS_245);
 810234e:	2600      	movs	r6, #0
  gyro_settings.enabled = true;
 8102350:	2501      	movs	r5, #1
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8102352:	f04f 0864 	mov.w	r8, #100	; 0x64
 8102356:	f10d 0717 	add.w	r7, sp, #23
      acc_res =  resolution::ACC_FS_4G;
 810235a:	6082      	str	r2, [r0, #8]
  gyro_settings.enabled = true;
 810235c:	7405      	strb	r5, [r0, #16]
 gyro_settings.scale = to_underlying(settings::GyroFullScale::FS_245);
 810235e:	8246      	strh	r6, [r0, #18]
 gyro_settings.HPFCutoff = 0;
 8102360:	6186      	str	r6, [r0, #24]
 gyro_settings.latchInterrupt = 0;
 8102362:	f880 6020 	strb.w	r6, [r0, #32]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8102366:	e9cd 5801 	strd	r5, r8, [sp, #4]
 810236a:	9700      	str	r7, [sp, #0]
 gyro_settings.orientation = 0;
 810236c:	61c3      	str	r3, [r0, #28]
  accel_settings.scale = to_underlying(settings::AccFullScale::XL_FS_4G);
 810236e:	33c0      	adds	r3, #192	; 0xc0
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 8102370:	4a2b      	ldr	r2, [pc, #172]	; (8102420 <_ZN3IMU5SetupEv+0xe4>)
  accel_settings.scale = to_underlying(settings::AccFullScale::XL_FS_4G);
 8102372:	6243      	str	r3, [r0, #36]	; 0x24
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 8102374:	4b2b      	ldr	r3, [pc, #172]	; (8102424 <_ZN3IMU5SetupEv+0xe8>)
  uint8_t reg_value = 0x00;
 8102376:	f88d 6017 	strb.w	r6, [sp, #23]
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 810237a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  mag_settings.ZPerformance = to_underlying(settings::MagZOpMode::MAG_UHP_MODE);
 810237e:	4b2a      	ldr	r3, [pc, #168]	; (8102428 <_ZN3IMU5SetupEv+0xec>)
 8102380:	6303      	str	r3, [r0, #48]	; 0x30
 gyro_settings.sampleRate = to_underlying(settings::GyroODR::ODR_952);
 8102382:	23c0      	movs	r3, #192	; 0xc0
 8102384:	6143      	str	r3, [r0, #20]
  accel_settings.enabled = true;
 8102386:	f241 0301 	movw	r3, #4097	; 0x1001
 810238a:	8443      	strh	r3, [r0, #34]	; 0x22
{
 810238c:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 810238e:	462b      	mov	r3, r5
 8102390:	4826      	ldr	r0, [pc, #152]	; (810242c <_ZN3IMU5SetupEv+0xf0>)
 8102392:	220f      	movs	r2, #15
 8102394:	21d6      	movs	r1, #214	; 0xd6
 8102396:	f004 fac7 	bl	8106928 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 810239a:	b9d8      	cbnz	r0, 81023d4 <_ZN3IMU5SetupEv+0x98>
  return reg_value;
 810239c:	4684      	mov	ip, r0
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 810239e:	462b      	mov	r3, r5
 81023a0:	e9cd 5801 	strd	r5, r8, [sp, #4]
 81023a4:	4821      	ldr	r0, [pc, #132]	; (810242c <_ZN3IMU5SetupEv+0xf0>)
 81023a6:	9700      	str	r7, [sp, #0]
 81023a8:	220f      	movs	r2, #15
 81023aa:	213c      	movs	r1, #60	; 0x3c
  return reg_value;
 81023ac:	f89d 6017 	ldrb.w	r6, [sp, #23]
  uint8_t reg_value = 0x00;
 81023b0:	f88d c017 	strb.w	ip, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81023b4:	f004 fab8 	bl	8106928 <HAL_I2C_Mem_Read>
      uint16_t imu_response = (ag_check << 8) | mag_check;
 81023b8:	0233      	lsls	r3, r6, #8
 81023ba:	b21b      	sxth	r3, r3
  if(status != HAL_OK)
 81023bc:	b908      	cbnz	r0, 81023c2 <_ZN3IMU5SetupEv+0x86>
      uint16_t imu_response = (ag_check << 8) | mag_check;
 81023be:	f89d 5017 	ldrb.w	r5, [sp, #23]
        if(imu_response != ((imuresponse::WHO_AM_I_AG_RSP << 8 ) | imuresponse::WHO_AM_I_M_RSP))
 81023c2:	431d      	orrs	r5, r3
 81023c4:	f646 033d 	movw	r3, #26685	; 0x683d
 81023c8:	429d      	cmp	r5, r3
 81023ca:	d013      	beq.n	81023f4 <_ZN3IMU5SetupEv+0xb8>
           return false;
 81023cc:	2000      	movs	r0, #0
}
 81023ce:	b006      	add	sp, #24
 81023d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81023d4:	e9cd 5801 	strd	r5, r8, [sp, #4]
 81023d8:	4814      	ldr	r0, [pc, #80]	; (810242c <_ZN3IMU5SetupEv+0xf0>)
 81023da:	9700      	str	r7, [sp, #0]
 81023dc:	462b      	mov	r3, r5
 81023de:	220f      	movs	r2, #15
 81023e0:	213c      	movs	r1, #60	; 0x3c
  uint8_t reg_value = 0x00;
 81023e2:	f88d 6017 	strb.w	r6, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81023e6:	f004 fa9f 	bl	8106928 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 81023ea:	2800      	cmp	r0, #0
 81023ec:	d1ee      	bne.n	81023cc <_ZN3IMU5SetupEv+0x90>
 81023ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 81023f2:	e7e4      	b.n	81023be <_ZN3IMU5SetupEv+0x82>
        InitGyro();
 81023f4:	4620      	mov	r0, r4
 81023f6:	f7ff fe89 	bl	810210c <_ZN3IMU8InitGyroEv>
        InitAccel();
 81023fa:	4620      	mov	r0, r4
 81023fc:	f7ff fef2 	bl	81021e4 <_ZN3IMU9InitAccelEv>
        InitMag();
 8102400:	4620      	mov	r0, r4
 8102402:	f7ff ff35 	bl	8102270 <_ZN3IMU7InitMagEv>
        return true;
 8102406:	2001      	movs	r0, #1
}
 8102408:	b006      	add	sp, #24
 810240a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810240e:	bf00      	nop
 8102410:	3912ccf7 	.word	0x3912ccf7
 8102414:	01010100 	.word	0x01010100
 8102418:	3c0f5c29 	.word	0x3c0f5c29
 810241c:	38ffda40 	.word	0x38ffda40
 8102420:	010000ff 	.word	0x010000ff
 8102424:	60001c00 	.word	0x60001c00
 8102428:	0100000c 	.word	0x0100000c
 810242c:	1000016c 	.word	0x1000016c

08102430 <_ZN3IMUC1Ev>:
IMU::IMU()
 8102430:	b510      	push	{r4, lr}
 8102432:	4604      	mov	r4, r0
  bool is_imu = Setup();
 8102434:	f7ff ff82 	bl	810233c <_ZN3IMU5SetupEv>
}
 8102438:	4620      	mov	r0, r4
 810243a:	bd10      	pop	{r4, pc}

0810243c <HAL_I2C_MemRxCpltCallback>:
 810243c:	4770      	bx	lr
 810243e:	bf00      	nop

08102440 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{


}
 8102440:	4770      	bx	lr
 8102442:	bf00      	nop

08102444 <main>:
  /* MPU Configuration--------------------------------------------------------*/
 // MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102444:	4b1f      	ldr	r3, [pc, #124]	; (81024c4 <main+0x80>)
{
 8102446:	b500      	push	{lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102448:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 810244c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8102450:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8102454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
{
 8102458:	b0bf      	sub	sp, #252	; 0xfc
  __HAL_RCC_HSEM_CLK_ENABLE();
 810245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810245e:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102460:	9301      	str	r3, [sp, #4]
 8102462:	9b01      	ldr	r3, [sp, #4]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102464:	f004 f9be 	bl	81067e4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8102468:	f006 fd1c 	bl	8108ea4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810246c:	2201      	movs	r2, #1
 810246e:	2102      	movs	r1, #2
 8102470:	2000      	movs	r0, #0
 8102472:	f006 fc9d 	bl	8108db0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102476:	4b14      	ldr	r3, [pc, #80]	; (81024c8 <main+0x84>)
 8102478:	4a14      	ldr	r2, [pc, #80]	; (81024cc <main+0x88>)
 810247a:	681b      	ldr	r3, [r3, #0]
 810247c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8102480:	2b07      	cmp	r3, #7
 8102482:	d018      	beq.n	81024b6 <main+0x72>
 8102484:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 8102488:	f043 0301 	orr.w	r3, r3, #1
 810248c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102490:	f000 fc6e 	bl	8102d70 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8102494:	f7ff fbfe 	bl	8101c94 <MX_GPIO_Init>
  MX_DMA_Init();
 8102498:	f7ff fb9c 	bl	8101bd4 <MX_DMA_Init>
  MX_SPI1_Init();
 810249c:	f000 f81a 	bl	81024d4 <MX_SPI1_Init>
  MX_I2C1_Init();
 81024a0:	f7ff fc5a 	bl	8101d58 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 81024a4:	f000 fb1a 	bl	8102adc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  EntryApp app;
 81024a8:	a802      	add	r0, sp, #8
 81024aa:	f7fe feb1 	bl	8101210 <_ZN8EntryAppC1Ev>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app.RunSensors();
 81024ae:	a802      	add	r0, sp, #8
 81024b0:	f7fe ffa4 	bl	81013fc <_ZN8EntryApp10RunSensorsEv>
  while (1)
 81024b4:	e7fb      	b.n	81024ae <main+0x6a>
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81024b6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 81024ba:	f043 0301 	orr.w	r3, r3, #1
 81024be:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81024c2:	e7e5      	b.n	8102490 <main+0x4c>
 81024c4:	58024400 	.word	0x58024400
 81024c8:	e000ed00 	.word	0xe000ed00
 81024cc:	58026400 	.word	0x58026400

081024d0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81024d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81024d2:	e7fe      	b.n	81024d2 <Error_Handler+0x2>

081024d4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 81024d4:	b580      	push	{r7, lr}
 81024d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 81024d8:	4b27      	ldr	r3, [pc, #156]	; (8102578 <MX_SPI1_Init+0xa4>)
 81024da:	4a28      	ldr	r2, [pc, #160]	; (810257c <MX_SPI1_Init+0xa8>)
 81024dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81024de:	4b26      	ldr	r3, [pc, #152]	; (8102578 <MX_SPI1_Init+0xa4>)
 81024e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81024e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81024e6:	4b24      	ldr	r3, [pc, #144]	; (8102578 <MX_SPI1_Init+0xa4>)
 81024e8:	2200      	movs	r2, #0
 81024ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 81024ec:	4b22      	ldr	r3, [pc, #136]	; (8102578 <MX_SPI1_Init+0xa4>)
 81024ee:	2207      	movs	r2, #7
 81024f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81024f2:	4b21      	ldr	r3, [pc, #132]	; (8102578 <MX_SPI1_Init+0xa4>)
 81024f4:	2200      	movs	r2, #0
 81024f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81024f8:	4b1f      	ldr	r3, [pc, #124]	; (8102578 <MX_SPI1_Init+0xa4>)
 81024fa:	2200      	movs	r2, #0
 81024fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 81024fe:	4b1e      	ldr	r3, [pc, #120]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102500:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102504:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8102506:	4b1c      	ldr	r3, [pc, #112]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102508:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 810250c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810250e:	4b1a      	ldr	r3, [pc, #104]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102510:	2200      	movs	r2, #0
 8102512:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102514:	4b18      	ldr	r3, [pc, #96]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102516:	2200      	movs	r2, #0
 8102518:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810251a:	4b17      	ldr	r3, [pc, #92]	; (8102578 <MX_SPI1_Init+0xa4>)
 810251c:	2200      	movs	r2, #0
 810251e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8102520:	4b15      	ldr	r3, [pc, #84]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102522:	2200      	movs	r2, #0
 8102524:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102526:	4b14      	ldr	r3, [pc, #80]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810252c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 810252e:	4b12      	ldr	r3, [pc, #72]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102530:	2200      	movs	r2, #0
 8102532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8102534:	4b10      	ldr	r3, [pc, #64]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102536:	2200      	movs	r2, #0
 8102538:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810253a:	4b0f      	ldr	r3, [pc, #60]	; (8102578 <MX_SPI1_Init+0xa4>)
 810253c:	2200      	movs	r2, #0
 810253e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102540:	4b0d      	ldr	r3, [pc, #52]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102542:	2200      	movs	r2, #0
 8102544:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102546:	4b0c      	ldr	r3, [pc, #48]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102548:	2200      	movs	r2, #0
 810254a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810254c:	4b0a      	ldr	r3, [pc, #40]	; (8102578 <MX_SPI1_Init+0xa4>)
 810254e:	2200      	movs	r2, #0
 8102550:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102552:	4b09      	ldr	r3, [pc, #36]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102554:	2200      	movs	r2, #0
 8102556:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102558:	4b07      	ldr	r3, [pc, #28]	; (8102578 <MX_SPI1_Init+0xa4>)
 810255a:	2200      	movs	r2, #0
 810255c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 810255e:	4b06      	ldr	r3, [pc, #24]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102560:	2200      	movs	r2, #0
 8102562:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8102564:	4804      	ldr	r0, [pc, #16]	; (8102578 <MX_SPI1_Init+0xa4>)
 8102566:	f008 f9eb 	bl	810a940 <HAL_SPI_Init>
 810256a:	4603      	mov	r3, r0
 810256c:	2b00      	cmp	r3, #0
 810256e:	d001      	beq.n	8102574 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8102570:	f7ff ffae 	bl	81024d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8102574:	bf00      	nop
 8102576:	bd80      	pop	{r7, pc}
 8102578:	100002a8 	.word	0x100002a8
 810257c:	40013000 	.word	0x40013000

08102580 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8102580:	b580      	push	{r7, lr}
 8102582:	b0b8      	sub	sp, #224	; 0xe0
 8102584:	af00      	add	r7, sp, #0
 8102586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102588:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810258c:	2200      	movs	r2, #0
 810258e:	601a      	str	r2, [r3, #0]
 8102590:	605a      	str	r2, [r3, #4]
 8102592:	609a      	str	r2, [r3, #8]
 8102594:	60da      	str	r2, [r3, #12]
 8102596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102598:	f107 0310 	add.w	r3, r7, #16
 810259c:	22bc      	movs	r2, #188	; 0xbc
 810259e:	2100      	movs	r1, #0
 81025a0:	4618      	mov	r0, r3
 81025a2:	f00c f9a5 	bl	810e8f0 <memset>
  if(spiHandle->Instance==SPI1)
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	4a57      	ldr	r2, [pc, #348]	; (8102708 <HAL_SPI_MspInit+0x188>)
 81025ac:	4293      	cmp	r3, r2
 81025ae:	f040 80a6 	bne.w	81026fe <HAL_SPI_MspInit+0x17e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81025b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81025b6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 81025b8:	2300      	movs	r3, #0
 81025ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81025bc:	f107 0310 	add.w	r3, r7, #16
 81025c0:	4618      	mov	r0, r3
 81025c2:	f006 fe55 	bl	8109270 <HAL_RCCEx_PeriphCLKConfig>
 81025c6:	4603      	mov	r3, r0
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	d001      	beq.n	81025d0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 81025cc:	f7ff ff80 	bl	81024d0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81025d0:	4b4e      	ldr	r3, [pc, #312]	; (810270c <HAL_SPI_MspInit+0x18c>)
 81025d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81025d6:	4a4d      	ldr	r2, [pc, #308]	; (810270c <HAL_SPI_MspInit+0x18c>)
 81025d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81025dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81025e0:	4b4a      	ldr	r3, [pc, #296]	; (810270c <HAL_SPI_MspInit+0x18c>)
 81025e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81025e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81025ea:	60fb      	str	r3, [r7, #12]
 81025ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81025ee:	4b47      	ldr	r3, [pc, #284]	; (810270c <HAL_SPI_MspInit+0x18c>)
 81025f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81025f4:	4a45      	ldr	r2, [pc, #276]	; (810270c <HAL_SPI_MspInit+0x18c>)
 81025f6:	f043 0301 	orr.w	r3, r3, #1
 81025fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81025fe:	4b43      	ldr	r3, [pc, #268]	; (810270c <HAL_SPI_MspInit+0x18c>)
 8102600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102604:	f003 0301 	and.w	r3, r3, #1
 8102608:	60bb      	str	r3, [r7, #8]
 810260a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 810260c:	23e0      	movs	r3, #224	; 0xe0
 810260e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102612:	2302      	movs	r3, #2
 8102614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102618:	2300      	movs	r3, #0
 810261a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810261e:	2300      	movs	r3, #0
 8102620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102624:	2305      	movs	r3, #5
 8102626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810262a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810262e:	4619      	mov	r1, r3
 8102630:	4837      	ldr	r0, [pc, #220]	; (8102710 <HAL_SPI_MspInit+0x190>)
 8102632:	f003 fedf 	bl	81063f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8102636:	4b37      	ldr	r3, [pc, #220]	; (8102714 <HAL_SPI_MspInit+0x194>)
 8102638:	4a37      	ldr	r2, [pc, #220]	; (8102718 <HAL_SPI_MspInit+0x198>)
 810263a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 810263c:	4b35      	ldr	r3, [pc, #212]	; (8102714 <HAL_SPI_MspInit+0x194>)
 810263e:	2225      	movs	r2, #37	; 0x25
 8102640:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102642:	4b34      	ldr	r3, [pc, #208]	; (8102714 <HAL_SPI_MspInit+0x194>)
 8102644:	2200      	movs	r2, #0
 8102646:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102648:	4b32      	ldr	r3, [pc, #200]	; (8102714 <HAL_SPI_MspInit+0x194>)
 810264a:	2200      	movs	r2, #0
 810264c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810264e:	4b31      	ldr	r3, [pc, #196]	; (8102714 <HAL_SPI_MspInit+0x194>)
 8102650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102654:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102656:	4b2f      	ldr	r3, [pc, #188]	; (8102714 <HAL_SPI_MspInit+0x194>)
 8102658:	2200      	movs	r2, #0
 810265a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810265c:	4b2d      	ldr	r3, [pc, #180]	; (8102714 <HAL_SPI_MspInit+0x194>)
 810265e:	2200      	movs	r2, #0
 8102660:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8102662:	4b2c      	ldr	r3, [pc, #176]	; (8102714 <HAL_SPI_MspInit+0x194>)
 8102664:	2200      	movs	r2, #0
 8102666:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102668:	4b2a      	ldr	r3, [pc, #168]	; (8102714 <HAL_SPI_MspInit+0x194>)
 810266a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 810266e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102670:	4b28      	ldr	r3, [pc, #160]	; (8102714 <HAL_SPI_MspInit+0x194>)
 8102672:	2200      	movs	r2, #0
 8102674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8102676:	4827      	ldr	r0, [pc, #156]	; (8102714 <HAL_SPI_MspInit+0x194>)
 8102678:	f001 f868 	bl	810374c <HAL_DMA_Init>
 810267c:	4603      	mov	r3, r0
 810267e:	2b00      	cmp	r3, #0
 8102680:	d001      	beq.n	8102686 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8102682:	f7ff ff25 	bl	81024d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	4a22      	ldr	r2, [pc, #136]	; (8102714 <HAL_SPI_MspInit+0x194>)
 810268a:	67da      	str	r2, [r3, #124]	; 0x7c
 810268c:	4a21      	ldr	r2, [pc, #132]	; (8102714 <HAL_SPI_MspInit+0x194>)
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8102692:	4b22      	ldr	r3, [pc, #136]	; (810271c <HAL_SPI_MspInit+0x19c>)
 8102694:	4a22      	ldr	r2, [pc, #136]	; (8102720 <HAL_SPI_MspInit+0x1a0>)
 8102696:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8102698:	4b20      	ldr	r3, [pc, #128]	; (810271c <HAL_SPI_MspInit+0x19c>)
 810269a:	2226      	movs	r2, #38	; 0x26
 810269c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810269e:	4b1f      	ldr	r3, [pc, #124]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026a0:	2240      	movs	r2, #64	; 0x40
 81026a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 81026a4:	4b1d      	ldr	r3, [pc, #116]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026a6:	2200      	movs	r2, #0
 81026a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81026aa:	4b1c      	ldr	r3, [pc, #112]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81026b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81026b2:	4b1a      	ldr	r3, [pc, #104]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026b4:	2200      	movs	r2, #0
 81026b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81026b8:	4b18      	ldr	r3, [pc, #96]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026ba:	2200      	movs	r2, #0
 81026bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 81026be:	4b17      	ldr	r3, [pc, #92]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026c0:	2200      	movs	r2, #0
 81026c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 81026c4:	4b15      	ldr	r3, [pc, #84]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81026ca:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81026cc:	4b13      	ldr	r3, [pc, #76]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026ce:	2200      	movs	r2, #0
 81026d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 81026d2:	4812      	ldr	r0, [pc, #72]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026d4:	f001 f83a 	bl	810374c <HAL_DMA_Init>
 81026d8:	4603      	mov	r3, r0
 81026da:	2b00      	cmp	r3, #0
 81026dc:	d001      	beq.n	81026e2 <HAL_SPI_MspInit+0x162>
    {
      Error_Handler();
 81026de:	f7ff fef7 	bl	81024d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 81026e2:	687b      	ldr	r3, [r7, #4]
 81026e4:	4a0d      	ldr	r2, [pc, #52]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026e6:	679a      	str	r2, [r3, #120]	; 0x78
 81026e8:	4a0c      	ldr	r2, [pc, #48]	; (810271c <HAL_SPI_MspInit+0x19c>)
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 81026ee:	2200      	movs	r2, #0
 81026f0:	2100      	movs	r1, #0
 81026f2:	2023      	movs	r0, #35	; 0x23
 81026f4:	f000 ffe1 	bl	81036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 81026f8:	2023      	movs	r0, #35	; 0x23
 81026fa:	f000 fff8 	bl	81036ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81026fe:	bf00      	nop
 8102700:	37e0      	adds	r7, #224	; 0xe0
 8102702:	46bd      	mov	sp, r7
 8102704:	bd80      	pop	{r7, pc}
 8102706:	bf00      	nop
 8102708:	40013000 	.word	0x40013000
 810270c:	58024400 	.word	0x58024400
 8102710:	58020000 	.word	0x58020000
 8102714:	10000330 	.word	0x10000330
 8102718:	40020010 	.word	0x40020010
 810271c:	100003a8 	.word	0x100003a8
 8102720:	40020028 	.word	0x40020028

08102724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102724:	b480      	push	{r7}
 8102726:	b083      	sub	sp, #12
 8102728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810272a:	4b0a      	ldr	r3, [pc, #40]	; (8102754 <HAL_MspInit+0x30>)
 810272c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102730:	4a08      	ldr	r2, [pc, #32]	; (8102754 <HAL_MspInit+0x30>)
 8102732:	f043 0302 	orr.w	r3, r3, #2
 8102736:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810273a:	4b06      	ldr	r3, [pc, #24]	; (8102754 <HAL_MspInit+0x30>)
 810273c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102740:	f003 0302 	and.w	r3, r3, #2
 8102744:	607b      	str	r3, [r7, #4]
 8102746:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102748:	bf00      	nop
 810274a:	370c      	adds	r7, #12
 810274c:	46bd      	mov	sp, r7
 810274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102752:	4770      	bx	lr
 8102754:	58024400 	.word	0x58024400

08102758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102758:	b480      	push	{r7}
 810275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810275c:	e7fe      	b.n	810275c <NMI_Handler+0x4>

0810275e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810275e:	b480      	push	{r7}
 8102760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102762:	e7fe      	b.n	8102762 <HardFault_Handler+0x4>

08102764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102764:	b480      	push	{r7}
 8102766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102768:	e7fe      	b.n	8102768 <MemManage_Handler+0x4>

0810276a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810276a:	b480      	push	{r7}
 810276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810276e:	e7fe      	b.n	810276e <BusFault_Handler+0x4>

08102770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102770:	b480      	push	{r7}
 8102772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102774:	e7fe      	b.n	8102774 <UsageFault_Handler+0x4>

08102776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102776:	b480      	push	{r7}
 8102778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810277a:	bf00      	nop
 810277c:	46bd      	mov	sp, r7
 810277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102782:	4770      	bx	lr

08102784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102784:	b480      	push	{r7}
 8102786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102788:	bf00      	nop
 810278a:	46bd      	mov	sp, r7
 810278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102790:	4770      	bx	lr

08102792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102792:	b480      	push	{r7}
 8102794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102796:	bf00      	nop
 8102798:	46bd      	mov	sp, r7
 810279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810279e:	4770      	bx	lr

081027a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81027a0:	b580      	push	{r7, lr}
 81027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81027a4:	f000 fb78 	bl	8102e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81027a8:	bf00      	nop
 81027aa:	bd80      	pop	{r7, pc}

081027ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 81027ac:	b580      	push	{r7, lr}
 81027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 81027b0:	4802      	ldr	r0, [pc, #8]	; (81027bc <DMA1_Stream0_IRQHandler+0x10>)
 81027b2:	f002 faf3 	bl	8104d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 81027b6:	bf00      	nop
 81027b8:	bd80      	pop	{r7, pc}
 81027ba:	bf00      	nop
 81027bc:	10000330 	.word	0x10000330

081027c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 81027c0:	b580      	push	{r7, lr}
 81027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 81027c4:	4802      	ldr	r0, [pc, #8]	; (81027d0 <DMA1_Stream1_IRQHandler+0x10>)
 81027c6:	f002 fae9 	bl	8104d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 81027ca:	bf00      	nop
 81027cc:	bd80      	pop	{r7, pc}
 81027ce:	bf00      	nop
 81027d0:	100003a8 	.word	0x100003a8

081027d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 81027d4:	b580      	push	{r7, lr}
 81027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 81027d8:	4802      	ldr	r0, [pc, #8]	; (81027e4 <DMA1_Stream2_IRQHandler+0x10>)
 81027da:	f002 fadf 	bl	8104d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 81027de:	bf00      	nop
 81027e0:	bd80      	pop	{r7, pc}
 81027e2:	bf00      	nop
 81027e4:	100001b8 	.word	0x100001b8

081027e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 81027e8:	b580      	push	{r7, lr}
 81027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 81027ec:	4802      	ldr	r0, [pc, #8]	; (81027f8 <DMA1_Stream3_IRQHandler+0x10>)
 81027ee:	f002 fad5 	bl	8104d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 81027f2:	bf00      	nop
 81027f4:	bd80      	pop	{r7, pc}
 81027f6:	bf00      	nop
 81027f8:	10000230 	.word	0x10000230

081027fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 81027fc:	b580      	push	{r7, lr}
 81027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8102800:	4802      	ldr	r0, [pc, #8]	; (810280c <DMA1_Stream4_IRQHandler+0x10>)
 8102802:	f002 facb 	bl	8104d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8102806:	bf00      	nop
 8102808:	bd80      	pop	{r7, pc}
 810280a:	bf00      	nop
 810280c:	100000f4 	.word	0x100000f4

08102810 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8102810:	b580      	push	{r7, lr}
 8102812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8102814:	4802      	ldr	r0, [pc, #8]	; (8102820 <ADC_IRQHandler+0x10>)
 8102816:	f000 fbeb 	bl	8102ff0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 810281a:	bf00      	nop
 810281c:	bd80      	pop	{r7, pc}
 810281e:	bf00      	nop
 8102820:	10000090 	.word	0x10000090

08102824 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8102824:	b580      	push	{r7, lr}
 8102826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8102828:	4802      	ldr	r0, [pc, #8]	; (8102834 <I2C1_EV_IRQHandler+0x10>)
 810282a:	f004 fb85 	bl	8106f38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 810282e:	bf00      	nop
 8102830:	bd80      	pop	{r7, pc}
 8102832:	bf00      	nop
 8102834:	1000016c 	.word	0x1000016c

08102838 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8102838:	b580      	push	{r7, lr}
 810283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 810283c:	4802      	ldr	r0, [pc, #8]	; (8102848 <I2C1_ER_IRQHandler+0x10>)
 810283e:	f004 fb95 	bl	8106f6c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8102842:	bf00      	nop
 8102844:	bd80      	pop	{r7, pc}
 8102846:	bf00      	nop
 8102848:	1000016c 	.word	0x1000016c

0810284c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 810284c:	b580      	push	{r7, lr}
 810284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8102850:	4802      	ldr	r0, [pc, #8]	; (810285c <SPI1_IRQHandler+0x10>)
 8102852:	f009 f83f 	bl	810b8d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8102856:	bf00      	nop
 8102858:	bd80      	pop	{r7, pc}
 810285a:	bf00      	nop
 810285c:	100002a8 	.word	0x100002a8

08102860 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8102860:	b580      	push	{r7, lr}
 8102862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102864:	4802      	ldr	r0, [pc, #8]	; (8102870 <USART3_IRQHandler+0x10>)
 8102866:	f009 fc57 	bl	810c118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 810286a:	bf00      	nop
 810286c:	bd80      	pop	{r7, pc}
 810286e:	bf00      	nop
 8102870:	1000048c 	.word	0x1000048c

08102874 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8102874:	b580      	push	{r7, lr}
 8102876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8102878:	4802      	ldr	r0, [pc, #8]	; (8102884 <DMA1_Stream7_IRQHandler+0x10>)
 810287a:	f002 fa8f 	bl	8104d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 810287e:	bf00      	nop
 8102880:	bd80      	pop	{r7, pc}
 8102882:	bf00      	nop
 8102884:	1000051c 	.word	0x1000051c

08102888 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8102888:	b580      	push	{r7, lr}
 810288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 810288c:	4802      	ldr	r0, [pc, #8]	; (8102898 <DMA2_Stream0_IRQHandler+0x10>)
 810288e:	f002 fa85 	bl	8104d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8102892:	bf00      	nop
 8102894:	bd80      	pop	{r7, pc}
 8102896:	bf00      	nop
 8102898:	10000594 	.word	0x10000594

0810289c <_ZN3GPS10GetGPSDataEv>:

gps_data GPS::GetGPSData()
{
  gps_data gps;
  gps.gps_latitude = latitude;
  gps.gps_longitude = longitude;
 810289c:	684a      	ldr	r2, [r1, #4]
  gps.gps_latitude = latitude;
 810289e:	f8d1 c000 	ldr.w	ip, [r1]
  gps.gps_longitude = longitude;
 81028a2:	6042      	str	r2, [r0, #4]
  gps.gps_altitude = altitude;
  gps.gps_velocity_x = vel_x;
 81028a4:	68ca      	ldr	r2, [r1, #12]
  gps.gps_latitude = latitude;
 81028a6:	f8c0 c000 	str.w	ip, [r0]
  gps.gps_velocity_x = vel_x;
 81028aa:	60c2      	str	r2, [r0, #12]
  gps.gps_altitude = altitude;
 81028ac:	f8d1 c008 	ldr.w	ip, [r1, #8]
  gps.gps_velocity_y = vel_y;
  gps.gps_velocity_z = vel_z;
 81028b0:	694a      	ldr	r2, [r1, #20]
  gps.gps_altitude = altitude;
 81028b2:	f8c0 c008 	str.w	ip, [r0, #8]
  gps.gps_velocity_z = vel_z;
 81028b6:	6142      	str	r2, [r0, #20]
  gps.gps_velocity_y = vel_y;
 81028b8:	f8d1 c010 	ldr.w	ip, [r1, #16]
  gps.gps_satellites = num_satellites;
  gps.gnd_speed= gndSpeed;
 81028bc:	698a      	ldr	r2, [r1, #24]
  gps.gps_satellites = num_satellites;
 81028be:	69c9      	ldr	r1, [r1, #28]
  gps.gps_velocity_y = vel_y;
 81028c0:	f8c0 c010 	str.w	ip, [r0, #16]
  gps.gps_satellites = num_satellites;
 81028c4:	61c1      	str	r1, [r0, #28]
  gps.gnd_speed= gndSpeed;
 81028c6:	6182      	str	r2, [r0, #24]

  return gps;


}
 81028c8:	4770      	bx	lr
 81028ca:	bf00      	nop
 81028cc:	0000      	movs	r0, r0
	...

081028d0 <_ZN3GPS10ProcessGPSEv>:




 void GPS::ProcessGPS()
 {
 81028d0:	b538      	push	{r3, r4, r5, lr}

   latitude = pvt.latitude * 1.0e-7;
 81028d2:	4d27      	ldr	r5, [pc, #156]	; (8102970 <_ZN3GPS10ProcessGPSEv+0xa0>)
 81028d4:	6a2b      	ldr	r3, [r5, #32]
 {
 81028d6:	4604      	mov	r4, r0
   latitude = pvt.latitude * 1.0e-7;
 81028d8:	4618      	mov	r0, r3
 81028da:	f7fd fe4f 	bl	810057c <__aeabi_i2d>
 81028de:	a322      	add	r3, pc, #136	; (adr r3, 8102968 <_ZN3GPS10ProcessGPSEv+0x98>)
 81028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028e4:	f7fd feb4 	bl	8100650 <__aeabi_dmul>
 81028e8:	f7fe f962 	bl	8100bb0 <__aeabi_d2f>
   longitude = pvt.longitude * 1.0e-7;
 81028ec:	69eb      	ldr	r3, [r5, #28]
   latitude = pvt.latitude * 1.0e-7;
 81028ee:	6020      	str	r0, [r4, #0]
   longitude = pvt.longitude * 1.0e-7;
 81028f0:	4618      	mov	r0, r3
 81028f2:	f7fd fe43 	bl	810057c <__aeabi_i2d>
 81028f6:	a31c      	add	r3, pc, #112	; (adr r3, 8102968 <_ZN3GPS10ProcessGPSEv+0x98>)
 81028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028fc:	f7fd fea8 	bl	8100650 <__aeabi_dmul>
 8102900:	f7fe f956 	bl	8100bb0 <__aeabi_d2f>
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102904:	ed95 5a0a 	vldr	s10, [r5, #40]	; 0x28

   // format to ENU
   vel_x = pvt.velE / 1000.0f;
 8102908:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
   vel_y = pvt.velN / 1000.0f;
 810290c:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
   vel_z = pvt.velD / -1000.0f;
 8102910:	edd5 6a0f 	vldr	s13, [r5, #60]	; 0x3c
   gndSpeed = pvt.gSpeed / 1000.0f;
 8102914:	ed95 7a10 	vldr	s14, [r5, #64]	; 0x40
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102918:	eddf 7a16 	vldr	s15, [pc, #88]	; 8102974 <_ZN3GPS10ProcessGPSEv+0xa4>
   vel_z = pvt.velD / -1000.0f;
 810291c:	ed9f 4a16 	vldr	s8, [pc, #88]	; 8102978 <_ZN3GPS10ProcessGPSEv+0xa8>
   longitude = pvt.longitude * 1.0e-7;
 8102920:	6060      	str	r0, [r4, #4]
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102922:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
   vel_x = pvt.velE / 1000.0f;
 8102926:	eef8 5ae5 	vcvt.f32.s32	s11, s11
   vel_y = pvt.velN / 1000.0f;
 810292a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
   vel_z = pvt.velD / -1000.0f;
 810292e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   gndSpeed = pvt.gSpeed / 1000.0f;
 8102932:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102936:	eec5 4a27 	vdiv.f32	s9, s10, s15
   vel_x = pvt.velE / 1000.0f;
 810293a:	ee85 5aa7 	vdiv.f32	s10, s11, s15
   vel_y = pvt.velN / 1000.0f;
 810293e:	eec6 5a27 	vdiv.f32	s11, s12, s15
   vel_z = pvt.velD / -1000.0f;
 8102942:	ee86 6a84 	vdiv.f32	s12, s13, s8
   gndSpeed = pvt.gSpeed / 1000.0f;
 8102946:	eec7 6a27 	vdiv.f32	s13, s14, s15
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 810294a:	edc4 4a02 	vstr	s9, [r4, #8]
   vel_x = pvt.velE / 1000.0f;
 810294e:	ed84 5a03 	vstr	s10, [r4, #12]
   vel_y = pvt.velN / 1000.0f;
 8102952:	edc4 5a04 	vstr	s11, [r4, #16]
   vel_z = pvt.velD / -1000.0f;
 8102956:	ed84 6a05 	vstr	s12, [r4, #20]
   gndSpeed = pvt.gSpeed / 1000.0f;
 810295a:	edc4 6a06 	vstr	s13, [r4, #24]
   /* Retrieve number of satellites used */
   num_satellites = pvt.numSV;
 810295e:	7eeb      	ldrb	r3, [r5, #27]
 8102960:	61e3      	str	r3, [r4, #28]
 }
 8102962:	bd38      	pop	{r3, r4, r5, pc}
 8102964:	f3af 8000 	nop.w
 8102968:	9abcaf48 	.word	0x9abcaf48
 810296c:	3e7ad7f2 	.word	0x3e7ad7f2
 8102970:	1000042c 	.word	0x1000042c
 8102974:	447a0000 	.word	0x447a0000
 8102978:	c47a0000 	.word	0xc47a0000

0810297c <_ZN3GPS6ConfigEv>:

 void GPS::Config()
 {
 810297c:	b510      	push	{r4, lr}

  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 810297e:	4c22      	ldr	r4, [pc, #136]	; (8102a08 <_ZN3GPS6ConfigEv+0x8c>)
 8102980:	4922      	ldr	r1, [pc, #136]	; (8102a0c <_ZN3GPS6ConfigEv+0x90>)
 8102982:	220e      	movs	r2, #14
 8102984:	4620      	mov	r0, r4
 8102986:	f009 fb01 	bl	810bf8c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810298a:	2032      	movs	r0, #50	; 0x32
 810298c:	f000 faa4 	bl	8102ed8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 8102990:	491f      	ldr	r1, [pc, #124]	; (8102a10 <_ZN3GPS6ConfigEv+0x94>)
 8102992:	2210      	movs	r2, #16
 8102994:	4620      	mov	r0, r4
 8102996:	f009 faf9 	bl	810bf8c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810299a:	2032      	movs	r0, #50	; 0x32
 810299c:	f000 fa9c 	bl	8102ed8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 81029a0:	491c      	ldr	r1, [pc, #112]	; (8102a14 <_ZN3GPS6ConfigEv+0x98>)
 81029a2:	2210      	movs	r2, #16
 81029a4:	4620      	mov	r0, r4
 81029a6:	f009 faf1 	bl	810bf8c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029aa:	2032      	movs	r0, #50	; 0x32
 81029ac:	f000 fa94 	bl	8102ed8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 81029b0:	4919      	ldr	r1, [pc, #100]	; (8102a18 <_ZN3GPS6ConfigEv+0x9c>)
 81029b2:	2210      	movs	r2, #16
 81029b4:	4620      	mov	r0, r4
 81029b6:	f009 fae9 	bl	810bf8c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029ba:	2032      	movs	r0, #50	; 0x32
 81029bc:	f000 fa8c 	bl	8102ed8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 81029c0:	4916      	ldr	r1, [pc, #88]	; (8102a1c <_ZN3GPS6ConfigEv+0xa0>)
 81029c2:	2210      	movs	r2, #16
 81029c4:	4620      	mov	r0, r4
 81029c6:	f009 fae1 	bl	810bf8c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029ca:	2032      	movs	r0, #50	; 0x32
 81029cc:	f000 fa84 	bl	8102ed8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 81029d0:	4913      	ldr	r1, [pc, #76]	; (8102a20 <_ZN3GPS6ConfigEv+0xa4>)
 81029d2:	2210      	movs	r2, #16
 81029d4:	4620      	mov	r0, r4
 81029d6:	f009 fad9 	bl	810bf8c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029da:	2032      	movs	r0, #50	; 0x32
 81029dc:	f000 fa7c 	bl	8102ed8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 81029e0:	4910      	ldr	r1, [pc, #64]	; (8102a24 <_ZN3GPS6ConfigEv+0xa8>)
 81029e2:	2210      	movs	r2, #16
 81029e4:	4620      	mov	r0, r4
 81029e6:	f009 fad1 	bl	810bf8c <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81029ea:	2032      	movs	r0, #50	; 0x32
 81029ec:	f000 fa74 	bl	8102ed8 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 81029f0:	490d      	ldr	r1, [pc, #52]	; (8102a28 <_ZN3GPS6ConfigEv+0xac>)
 81029f2:	2210      	movs	r2, #16
 81029f4:	4620      	mov	r0, r4
 81029f6:	f009 fac9 	bl	810bf8c <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_byte, 1);
 81029fa:	4620      	mov	r0, r4
 81029fc:	490b      	ldr	r1, [pc, #44]	; (8102a2c <_ZN3GPS6ConfigEv+0xb0>)

 }
 81029fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_byte, 1);
 8102a02:	2201      	movs	r2, #1
 8102a04:	f009 bb42 	b.w	810c08c <HAL_UART_Receive_DMA>
 8102a08:	1000048c 	.word	0x1000048c
 8102a0c:	0810e92c 	.word	0x0810e92c
 8102a10:	0810e93c 	.word	0x0810e93c
 8102a14:	0810e94c 	.word	0x0810e94c
 8102a18:	0810e95c 	.word	0x0810e95c
 8102a1c:	0810e96c 	.word	0x0810e96c
 8102a20:	0810e97c 	.word	0x0810e97c
 8102a24:	0810e98c 	.word	0x0810e98c
 8102a28:	0810e99c 	.word	0x0810e99c
 8102a2c:	10000428 	.word	0x10000428

08102a30 <_ZN3GPSC1Ev>:
GPS::GPS()
 8102a30:	b510      	push	{r4, lr}
 8102a32:	4604      	mov	r4, r0
  Config();
 8102a34:	f7ff ffa2 	bl	810297c <_ZN3GPS6ConfigEv>
}
 8102a38:	4620      	mov	r0, r4
 8102a3a:	bd10      	pop	{r4, pc}

08102a3c <HAL_UART_RxCpltCallback>:
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 8102a3c:	4b20      	ldr	r3, [pc, #128]	; (8102ac0 <HAL_UART_RxCpltCallback+0x84>)
 8102a3e:	6802      	ldr	r2, [r0, #0]
 8102a40:	429a      	cmp	r2, r3
 8102a42:	d000      	beq.n	8102a46 <HAL_UART_RxCpltCallback+0xa>
 8102a44:	4770      	bx	lr
    {
      /*Append Preamble*/
      if(byte_pos < 2)
 8102a46:	491f      	ldr	r1, [pc, #124]	; (8102ac4 <HAL_UART_RxCpltCallback+0x88>)
 8102a48:	680a      	ldr	r2, [r1, #0]
 8102a4a:	2a01      	cmp	r2, #1
 8102a4c:	dd20      	ble.n	8102a90 <HAL_UART_RxCpltCallback+0x54>
        }
      }

      else
      {
        if((byte_pos -2) < data_size)
 8102a4e:	2a61      	cmp	r2, #97	; 0x61
 8102a50:	dc27      	bgt.n	8102aa2 <HAL_UART_RxCpltCallback+0x66>
        {
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8102a52:	4b1d      	ldr	r3, [pc, #116]	; (8102ac8 <HAL_UART_RxCpltCallback+0x8c>)
 {
 8102a54:	b410      	push	{r4}
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8102a56:	4c1d      	ldr	r4, [pc, #116]	; (8102acc <HAL_UART_RxCpltCallback+0x90>)
 8102a58:	1898      	adds	r0, r3, r2
        }
        byte_pos++;
 8102a5a:	3201      	adds	r2, #1
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8102a5c:	f894 c000 	ldrb.w	ip, [r4]
 8102a60:	f800 cc02 	strb.w	ip, [r0, #-2]

        if (byte_pos == (data_size+2))
 8102a64:	2a62      	cmp	r2, #98	; 0x62
        byte_pos++;
 8102a66:	600a      	str	r2, [r1, #0]
        if (byte_pos == (data_size+2))
 8102a68:	d10f      	bne.n	8102a8a <HAL_UART_RxCpltCallback+0x4e>
 8102a6a:	2200      	movs	r2, #0
 8102a6c:	1e59      	subs	r1, r3, #1
 8102a6e:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
 8102a72:	4613      	mov	r3, r2
       ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 8102a74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8102a78:	4403      	add	r3, r0
 8102a7a:	b2db      	uxtb	r3, r3
       ck[1] = ck[1] + ck[0];
 8102a7c:	441a      	add	r2, r3
    for (int i = 0; i < (int)sizeof(pvt); i++)
 8102a7e:	458c      	cmp	ip, r1
       ck[1] = ck[1] + ck[0];
 8102a80:	b2d2      	uxtb	r2, r2
    for (int i = 0; i < (int)sizeof(pvt); i++)
 8102a82:	d1f7      	bne.n	8102a74 <HAL_UART_RxCpltCallback+0x38>
 8102a84:	4912      	ldr	r1, [pc, #72]	; (8102ad0 <HAL_UART_RxCpltCallback+0x94>)
 8102a86:	700b      	strb	r3, [r1, #0]
 8102a88:	704a      	strb	r2, [r1, #1]
        {
          byte_pos = 0;
        }
      }
    }
 }
 8102a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8102a8e:	4770      	bx	lr
        if(data_byte[0] == UBX_HEADER[byte_pos])
 8102a90:	480e      	ldr	r0, [pc, #56]	; (8102acc <HAL_UART_RxCpltCallback+0x90>)
 8102a92:	4b10      	ldr	r3, [pc, #64]	; (8102ad4 <HAL_UART_RxCpltCallback+0x98>)
 8102a94:	7800      	ldrb	r0, [r0, #0]
 8102a96:	5c9b      	ldrb	r3, [r3, r2]
 8102a98:	4298      	cmp	r0, r3
 8102a9a:	d00d      	beq.n	8102ab8 <HAL_UART_RxCpltCallback+0x7c>
          byte_pos = 0;
 8102a9c:	2300      	movs	r3, #0
 8102a9e:	600b      	str	r3, [r1, #0]
 8102aa0:	4770      	bx	lr
        byte_pos++;
 8102aa2:	3201      	adds	r2, #1
        else if (byte_pos == (data_size+3) )
 8102aa4:	2a63      	cmp	r2, #99	; 0x63
        byte_pos++;
 8102aa6:	600a      	str	r2, [r1, #0]
        else if (byte_pos == (data_size+3) )
 8102aa8:	d1f8      	bne.n	8102a9c <HAL_UART_RxCpltCallback+0x60>
          if (data_byte[0] != checksum[0])
 8102aaa:	4a08      	ldr	r2, [pc, #32]	; (8102acc <HAL_UART_RxCpltCallback+0x90>)
 8102aac:	4b08      	ldr	r3, [pc, #32]	; (8102ad0 <HAL_UART_RxCpltCallback+0x94>)
 8102aae:	7812      	ldrb	r2, [r2, #0]
 8102ab0:	781b      	ldrb	r3, [r3, #0]
 8102ab2:	429a      	cmp	r2, r3
 8102ab4:	d1f2      	bne.n	8102a9c <HAL_UART_RxCpltCallback+0x60>
 8102ab6:	4770      	bx	lr
          byte_pos++;
 8102ab8:	3201      	adds	r2, #1
 8102aba:	600a      	str	r2, [r1, #0]
 8102abc:	4770      	bx	lr
 8102abe:	bf00      	nop
 8102ac0:	40004800 	.word	0x40004800
 8102ac4:	10000420 	.word	0x10000420
 8102ac8:	1000042c 	.word	0x1000042c
 8102acc:	10000428 	.word	0x10000428
 8102ad0:	10000424 	.word	0x10000424
 8102ad4:	0810e928 	.word	0x0810e928

08102ad8 <HAL_UART_TxCpltCallback>:
  {
     if(huart->Instance == USART3)
     {

     }
  }
 8102ad8:	4770      	bx	lr
 8102ada:	bf00      	nop

08102adc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102adc:	b580      	push	{r7, lr}
 8102ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102ae0:	4b22      	ldr	r3, [pc, #136]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102ae2:	4a23      	ldr	r2, [pc, #140]	; (8102b70 <MX_USART3_UART_Init+0x94>)
 8102ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8102ae6:	4b21      	ldr	r3, [pc, #132]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102ae8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8102aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102aee:	4b1f      	ldr	r3, [pc, #124]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102af0:	2200      	movs	r2, #0
 8102af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102af4:	4b1d      	ldr	r3, [pc, #116]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102af6:	2200      	movs	r2, #0
 8102af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102afa:	4b1c      	ldr	r3, [pc, #112]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102afc:	2200      	movs	r2, #0
 8102afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102b00:	4b1a      	ldr	r3, [pc, #104]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b02:	220c      	movs	r2, #12
 8102b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102b06:	4b19      	ldr	r3, [pc, #100]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b08:	2200      	movs	r2, #0
 8102b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102b0c:	4b17      	ldr	r3, [pc, #92]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b0e:	2200      	movs	r2, #0
 8102b10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102b12:	4b16      	ldr	r3, [pc, #88]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b14:	2200      	movs	r2, #0
 8102b16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102b18:	4b14      	ldr	r3, [pc, #80]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b1a:	2200      	movs	r2, #0
 8102b1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102b1e:	4b13      	ldr	r3, [pc, #76]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b20:	2200      	movs	r2, #0
 8102b22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102b24:	4811      	ldr	r0, [pc, #68]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b26:	f009 f9e0 	bl	810beea <HAL_UART_Init>
 8102b2a:	4603      	mov	r3, r0
 8102b2c:	2b00      	cmp	r3, #0
 8102b2e:	d001      	beq.n	8102b34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102b30:	f7ff fcce 	bl	81024d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102b34:	2100      	movs	r1, #0
 8102b36:	480d      	ldr	r0, [pc, #52]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b38:	f00a fecc 	bl	810d8d4 <HAL_UARTEx_SetTxFifoThreshold>
 8102b3c:	4603      	mov	r3, r0
 8102b3e:	2b00      	cmp	r3, #0
 8102b40:	d001      	beq.n	8102b46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8102b42:	f7ff fcc5 	bl	81024d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102b46:	2100      	movs	r1, #0
 8102b48:	4808      	ldr	r0, [pc, #32]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b4a:	f00a ff01 	bl	810d950 <HAL_UARTEx_SetRxFifoThreshold>
 8102b4e:	4603      	mov	r3, r0
 8102b50:	2b00      	cmp	r3, #0
 8102b52:	d001      	beq.n	8102b58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102b54:	f7ff fcbc 	bl	81024d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102b58:	4804      	ldr	r0, [pc, #16]	; (8102b6c <MX_USART3_UART_Init+0x90>)
 8102b5a:	f00a fe82 	bl	810d862 <HAL_UARTEx_DisableFifoMode>
 8102b5e:	4603      	mov	r3, r0
 8102b60:	2b00      	cmp	r3, #0
 8102b62:	d001      	beq.n	8102b68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102b64:	f7ff fcb4 	bl	81024d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102b68:	bf00      	nop
 8102b6a:	bd80      	pop	{r7, pc}
 8102b6c:	1000048c 	.word	0x1000048c
 8102b70:	40004800 	.word	0x40004800

08102b74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102b74:	b580      	push	{r7, lr}
 8102b76:	b0b8      	sub	sp, #224	; 0xe0
 8102b78:	af00      	add	r7, sp, #0
 8102b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102b80:	2200      	movs	r2, #0
 8102b82:	601a      	str	r2, [r3, #0]
 8102b84:	605a      	str	r2, [r3, #4]
 8102b86:	609a      	str	r2, [r3, #8]
 8102b88:	60da      	str	r2, [r3, #12]
 8102b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102b8c:	f107 0310 	add.w	r3, r7, #16
 8102b90:	22bc      	movs	r2, #188	; 0xbc
 8102b92:	2100      	movs	r1, #0
 8102b94:	4618      	mov	r0, r3
 8102b96:	f00b feab 	bl	810e8f0 <memset>
  if(uartHandle->Instance==USART3)
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	4a58      	ldr	r2, [pc, #352]	; (8102d00 <HAL_UART_MspInit+0x18c>)
 8102ba0:	4293      	cmp	r3, r2
 8102ba2:	f040 80a8 	bne.w	8102cf6 <HAL_UART_MspInit+0x182>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102ba6:	2302      	movs	r3, #2
 8102ba8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102baa:	2300      	movs	r3, #0
 8102bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102bb0:	f107 0310 	add.w	r3, r7, #16
 8102bb4:	4618      	mov	r0, r3
 8102bb6:	f006 fb5b 	bl	8109270 <HAL_RCCEx_PeriphCLKConfig>
 8102bba:	4603      	mov	r3, r0
 8102bbc:	2b00      	cmp	r3, #0
 8102bbe:	d001      	beq.n	8102bc4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8102bc0:	f7ff fc86 	bl	81024d0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102bc4:	4b4f      	ldr	r3, [pc, #316]	; (8102d04 <HAL_UART_MspInit+0x190>)
 8102bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bca:	4a4e      	ldr	r2, [pc, #312]	; (8102d04 <HAL_UART_MspInit+0x190>)
 8102bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102bd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102bd4:	4b4b      	ldr	r3, [pc, #300]	; (8102d04 <HAL_UART_MspInit+0x190>)
 8102bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102bde:	60fb      	str	r3, [r7, #12]
 8102be0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102be2:	4b48      	ldr	r3, [pc, #288]	; (8102d04 <HAL_UART_MspInit+0x190>)
 8102be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102be8:	4a46      	ldr	r2, [pc, #280]	; (8102d04 <HAL_UART_MspInit+0x190>)
 8102bea:	f043 0308 	orr.w	r3, r3, #8
 8102bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102bf2:	4b44      	ldr	r3, [pc, #272]	; (8102d04 <HAL_UART_MspInit+0x190>)
 8102bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102bf8:	f003 0308 	and.w	r3, r3, #8
 8102bfc:	60bb      	str	r3, [r7, #8]
 8102bfe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8102c00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c08:	2302      	movs	r3, #2
 8102c0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c0e:	2300      	movs	r3, #0
 8102c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c14:	2300      	movs	r3, #0
 8102c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102c1a:	2307      	movs	r3, #7
 8102c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102c24:	4619      	mov	r1, r3
 8102c26:	4838      	ldr	r0, [pc, #224]	; (8102d08 <HAL_UART_MspInit+0x194>)
 8102c28:	f003 fbe4 	bl	81063f4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream7;
 8102c2c:	4b37      	ldr	r3, [pc, #220]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c2e:	4a38      	ldr	r2, [pc, #224]	; (8102d10 <HAL_UART_MspInit+0x19c>)
 8102c30:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8102c32:	4b36      	ldr	r3, [pc, #216]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c34:	222d      	movs	r2, #45	; 0x2d
 8102c36:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102c38:	4b34      	ldr	r3, [pc, #208]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c3a:	2200      	movs	r2, #0
 8102c3c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102c3e:	4b33      	ldr	r3, [pc, #204]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c40:	2200      	movs	r2, #0
 8102c42:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102c44:	4b31      	ldr	r3, [pc, #196]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102c4a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102c4c:	4b2f      	ldr	r3, [pc, #188]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c4e:	2200      	movs	r2, #0
 8102c50:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102c52:	4b2e      	ldr	r3, [pc, #184]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c54:	2200      	movs	r2, #0
 8102c56:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8102c58:	4b2c      	ldr	r3, [pc, #176]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102c5e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102c60:	4b2a      	ldr	r3, [pc, #168]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102c66:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102c68:	4b28      	ldr	r3, [pc, #160]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c6a:	2200      	movs	r2, #0
 8102c6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8102c6e:	4827      	ldr	r0, [pc, #156]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c70:	f000 fd6c 	bl	810374c <HAL_DMA_Init>
 8102c74:	4603      	mov	r3, r0
 8102c76:	2b00      	cmp	r3, #0
 8102c78:	d001      	beq.n	8102c7e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8102c7a:	f7ff fc29 	bl	81024d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	4a22      	ldr	r2, [pc, #136]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c82:	67da      	str	r2, [r3, #124]	; 0x7c
 8102c84:	4a21      	ldr	r2, [pc, #132]	; (8102d0c <HAL_UART_MspInit+0x198>)
 8102c86:	687b      	ldr	r3, [r7, #4]
 8102c88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA2_Stream0;
 8102c8a:	4b22      	ldr	r3, [pc, #136]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102c8c:	4a22      	ldr	r2, [pc, #136]	; (8102d18 <HAL_UART_MspInit+0x1a4>)
 8102c8e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8102c90:	4b20      	ldr	r3, [pc, #128]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102c92:	222e      	movs	r2, #46	; 0x2e
 8102c94:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102c96:	4b1f      	ldr	r3, [pc, #124]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102c98:	2240      	movs	r2, #64	; 0x40
 8102c9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102c9c:	4b1d      	ldr	r3, [pc, #116]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102c9e:	2200      	movs	r2, #0
 8102ca0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102ca2:	4b1c      	ldr	r3, [pc, #112]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102ca8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102caa:	4b1a      	ldr	r3, [pc, #104]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102cac:	2200      	movs	r2, #0
 8102cae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102cb0:	4b18      	ldr	r3, [pc, #96]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102cb2:	2200      	movs	r2, #0
 8102cb4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8102cb6:	4b17      	ldr	r3, [pc, #92]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102cb8:	2200      	movs	r2, #0
 8102cba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102cbc:	4b15      	ldr	r3, [pc, #84]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102cc2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102cc4:	4b13      	ldr	r3, [pc, #76]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102cc6:	2200      	movs	r2, #0
 8102cc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102cca:	4812      	ldr	r0, [pc, #72]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102ccc:	f000 fd3e 	bl	810374c <HAL_DMA_Init>
 8102cd0:	4603      	mov	r3, r0
 8102cd2:	2b00      	cmp	r3, #0
 8102cd4:	d001      	beq.n	8102cda <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8102cd6:	f7ff fbfb 	bl	81024d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	4a0d      	ldr	r2, [pc, #52]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102cde:	679a      	str	r2, [r3, #120]	; 0x78
 8102ce0:	4a0c      	ldr	r2, [pc, #48]	; (8102d14 <HAL_UART_MspInit+0x1a0>)
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8102ce6:	2200      	movs	r2, #0
 8102ce8:	2105      	movs	r1, #5
 8102cea:	2027      	movs	r0, #39	; 0x27
 8102cec:	f000 fce5 	bl	81036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102cf0:	2027      	movs	r0, #39	; 0x27
 8102cf2:	f000 fcfc 	bl	81036ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102cf6:	bf00      	nop
 8102cf8:	37e0      	adds	r7, #224	; 0xe0
 8102cfa:	46bd      	mov	sp, r7
 8102cfc:	bd80      	pop	{r7, pc}
 8102cfe:	bf00      	nop
 8102d00:	40004800 	.word	0x40004800
 8102d04:	58024400 	.word	0x58024400
 8102d08:	58020c00 	.word	0x58020c00
 8102d0c:	1000051c 	.word	0x1000051c
 8102d10:	400200b8 	.word	0x400200b8
 8102d14:	10000594 	.word	0x10000594
 8102d18:	40020410 	.word	0x40020410

08102d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102d54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102d20:	f7fe fb98 	bl	8101454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102d24:	480c      	ldr	r0, [pc, #48]	; (8102d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102d26:	490d      	ldr	r1, [pc, #52]	; (8102d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102d28:	4a0d      	ldr	r2, [pc, #52]	; (8102d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102d2c:	e002      	b.n	8102d34 <LoopCopyDataInit>

08102d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102d32:	3304      	adds	r3, #4

08102d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102d38:	d3f9      	bcc.n	8102d2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102d3a:	4a0a      	ldr	r2, [pc, #40]	; (8102d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102d3c:	4c0a      	ldr	r4, [pc, #40]	; (8102d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102d40:	e001      	b.n	8102d46 <LoopFillZerobss>

08102d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102d44:	3204      	adds	r2, #4

08102d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102d48:	d3fb      	bcc.n	8102d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102d4a:	f00b fdad 	bl	810e8a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102d4e:	f7ff fb79 	bl	8102444 <main>
  bx  lr
 8102d52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102d54:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102d58:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102d5c:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 8102d60:	0810ea20 	.word	0x0810ea20
  ldr r2, =_sbss
 8102d64:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 8102d68:	10000610 	.word	0x10000610

08102d6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102d6c:	e7fe      	b.n	8102d6c <ADC3_IRQHandler>
	...

08102d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102d70:	b580      	push	{r7, lr}
 8102d72:	b082      	sub	sp, #8
 8102d74:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102d76:	4b28      	ldr	r3, [pc, #160]	; (8102e18 <HAL_Init+0xa8>)
 8102d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102d7c:	4a26      	ldr	r2, [pc, #152]	; (8102e18 <HAL_Init+0xa8>)
 8102d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102d82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102d86:	4b24      	ldr	r3, [pc, #144]	; (8102e18 <HAL_Init+0xa8>)
 8102d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102d90:	603b      	str	r3, [r7, #0]
 8102d92:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102d94:	4b21      	ldr	r3, [pc, #132]	; (8102e1c <HAL_Init+0xac>)
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102d9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102da0:	4a1e      	ldr	r2, [pc, #120]	; (8102e1c <HAL_Init+0xac>)
 8102da2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102da6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102da8:	4b1c      	ldr	r3, [pc, #112]	; (8102e1c <HAL_Init+0xac>)
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	4a1b      	ldr	r2, [pc, #108]	; (8102e1c <HAL_Init+0xac>)
 8102dae:	f043 0301 	orr.w	r3, r3, #1
 8102db2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102db4:	2003      	movs	r0, #3
 8102db6:	f000 fc75 	bl	81036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102dba:	f006 f881 	bl	8108ec0 <HAL_RCC_GetSysClockFreq>
 8102dbe:	4602      	mov	r2, r0
 8102dc0:	4b15      	ldr	r3, [pc, #84]	; (8102e18 <HAL_Init+0xa8>)
 8102dc2:	699b      	ldr	r3, [r3, #24]
 8102dc4:	0a1b      	lsrs	r3, r3, #8
 8102dc6:	f003 030f 	and.w	r3, r3, #15
 8102dca:	4915      	ldr	r1, [pc, #84]	; (8102e20 <HAL_Init+0xb0>)
 8102dcc:	5ccb      	ldrb	r3, [r1, r3]
 8102dce:	f003 031f 	and.w	r3, r3, #31
 8102dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8102dd6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102dd8:	4b0f      	ldr	r3, [pc, #60]	; (8102e18 <HAL_Init+0xa8>)
 8102dda:	699b      	ldr	r3, [r3, #24]
 8102ddc:	f003 030f 	and.w	r3, r3, #15
 8102de0:	4a0f      	ldr	r2, [pc, #60]	; (8102e20 <HAL_Init+0xb0>)
 8102de2:	5cd3      	ldrb	r3, [r2, r3]
 8102de4:	f003 031f 	and.w	r3, r3, #31
 8102de8:	687a      	ldr	r2, [r7, #4]
 8102dea:	fa22 f303 	lsr.w	r3, r2, r3
 8102dee:	4a0d      	ldr	r2, [pc, #52]	; (8102e24 <HAL_Init+0xb4>)
 8102df0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102df2:	4b0c      	ldr	r3, [pc, #48]	; (8102e24 <HAL_Init+0xb4>)
 8102df4:	681b      	ldr	r3, [r3, #0]
 8102df6:	4a0c      	ldr	r2, [pc, #48]	; (8102e28 <HAL_Init+0xb8>)
 8102df8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102dfa:	2000      	movs	r0, #0
 8102dfc:	f000 f816 	bl	8102e2c <HAL_InitTick>
 8102e00:	4603      	mov	r3, r0
 8102e02:	2b00      	cmp	r3, #0
 8102e04:	d001      	beq.n	8102e0a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102e06:	2301      	movs	r3, #1
 8102e08:	e002      	b.n	8102e10 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102e0a:	f7ff fc8b 	bl	8102724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102e0e:	2300      	movs	r3, #0
}
 8102e10:	4618      	mov	r0, r3
 8102e12:	3708      	adds	r7, #8
 8102e14:	46bd      	mov	sp, r7
 8102e16:	bd80      	pop	{r7, pc}
 8102e18:	58024400 	.word	0x58024400
 8102e1c:	40024400 	.word	0x40024400
 8102e20:	0810e918 	.word	0x0810e918
 8102e24:	10000004 	.word	0x10000004
 8102e28:	10000000 	.word	0x10000000

08102e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102e2c:	b580      	push	{r7, lr}
 8102e2e:	b082      	sub	sp, #8
 8102e30:	af00      	add	r7, sp, #0
 8102e32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102e34:	4b15      	ldr	r3, [pc, #84]	; (8102e8c <HAL_InitTick+0x60>)
 8102e36:	781b      	ldrb	r3, [r3, #0]
 8102e38:	2b00      	cmp	r3, #0
 8102e3a:	d101      	bne.n	8102e40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102e3c:	2301      	movs	r3, #1
 8102e3e:	e021      	b.n	8102e84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102e40:	4b13      	ldr	r3, [pc, #76]	; (8102e90 <HAL_InitTick+0x64>)
 8102e42:	681a      	ldr	r2, [r3, #0]
 8102e44:	4b11      	ldr	r3, [pc, #68]	; (8102e8c <HAL_InitTick+0x60>)
 8102e46:	781b      	ldrb	r3, [r3, #0]
 8102e48:	4619      	mov	r1, r3
 8102e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8102e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8102e56:	4618      	mov	r0, r3
 8102e58:	f000 fc57 	bl	810370a <HAL_SYSTICK_Config>
 8102e5c:	4603      	mov	r3, r0
 8102e5e:	2b00      	cmp	r3, #0
 8102e60:	d001      	beq.n	8102e66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102e62:	2301      	movs	r3, #1
 8102e64:	e00e      	b.n	8102e84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	2b0f      	cmp	r3, #15
 8102e6a:	d80a      	bhi.n	8102e82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102e6c:	2200      	movs	r2, #0
 8102e6e:	6879      	ldr	r1, [r7, #4]
 8102e70:	f04f 30ff 	mov.w	r0, #4294967295
 8102e74:	f000 fc21 	bl	81036ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102e78:	4a06      	ldr	r2, [pc, #24]	; (8102e94 <HAL_InitTick+0x68>)
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102e7e:	2300      	movs	r3, #0
 8102e80:	e000      	b.n	8102e84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102e82:	2301      	movs	r3, #1
}
 8102e84:	4618      	mov	r0, r3
 8102e86:	3708      	adds	r7, #8
 8102e88:	46bd      	mov	sp, r7
 8102e8a:	bd80      	pop	{r7, pc}
 8102e8c:	1000000c 	.word	0x1000000c
 8102e90:	10000000 	.word	0x10000000
 8102e94:	10000008 	.word	0x10000008

08102e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102e98:	b480      	push	{r7}
 8102e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102e9c:	4b06      	ldr	r3, [pc, #24]	; (8102eb8 <HAL_IncTick+0x20>)
 8102e9e:	781b      	ldrb	r3, [r3, #0]
 8102ea0:	461a      	mov	r2, r3
 8102ea2:	4b06      	ldr	r3, [pc, #24]	; (8102ebc <HAL_IncTick+0x24>)
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	4413      	add	r3, r2
 8102ea8:	4a04      	ldr	r2, [pc, #16]	; (8102ebc <HAL_IncTick+0x24>)
 8102eaa:	6013      	str	r3, [r2, #0]
}
 8102eac:	bf00      	nop
 8102eae:	46bd      	mov	sp, r7
 8102eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eb4:	4770      	bx	lr
 8102eb6:	bf00      	nop
 8102eb8:	1000000c 	.word	0x1000000c
 8102ebc:	1000060c 	.word	0x1000060c

08102ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102ec0:	b480      	push	{r7}
 8102ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8102ec4:	4b03      	ldr	r3, [pc, #12]	; (8102ed4 <HAL_GetTick+0x14>)
 8102ec6:	681b      	ldr	r3, [r3, #0]
}
 8102ec8:	4618      	mov	r0, r3
 8102eca:	46bd      	mov	sp, r7
 8102ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ed0:	4770      	bx	lr
 8102ed2:	bf00      	nop
 8102ed4:	1000060c 	.word	0x1000060c

08102ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102ed8:	b580      	push	{r7, lr}
 8102eda:	b084      	sub	sp, #16
 8102edc:	af00      	add	r7, sp, #0
 8102ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102ee0:	f7ff ffee 	bl	8102ec0 <HAL_GetTick>
 8102ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102eea:	68fb      	ldr	r3, [r7, #12]
 8102eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ef0:	d005      	beq.n	8102efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102ef2:	4b0a      	ldr	r3, [pc, #40]	; (8102f1c <HAL_Delay+0x44>)
 8102ef4:	781b      	ldrb	r3, [r3, #0]
 8102ef6:	461a      	mov	r2, r3
 8102ef8:	68fb      	ldr	r3, [r7, #12]
 8102efa:	4413      	add	r3, r2
 8102efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102efe:	bf00      	nop
 8102f00:	f7ff ffde 	bl	8102ec0 <HAL_GetTick>
 8102f04:	4602      	mov	r2, r0
 8102f06:	68bb      	ldr	r3, [r7, #8]
 8102f08:	1ad3      	subs	r3, r2, r3
 8102f0a:	68fa      	ldr	r2, [r7, #12]
 8102f0c:	429a      	cmp	r2, r3
 8102f0e:	d8f7      	bhi.n	8102f00 <HAL_Delay+0x28>
  {
  }
}
 8102f10:	bf00      	nop
 8102f12:	bf00      	nop
 8102f14:	3710      	adds	r7, #16
 8102f16:	46bd      	mov	sp, r7
 8102f18:	bd80      	pop	{r7, pc}
 8102f1a:	bf00      	nop
 8102f1c:	1000000c 	.word	0x1000000c

08102f20 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102f20:	b480      	push	{r7}
 8102f22:	b083      	sub	sp, #12
 8102f24:	af00      	add	r7, sp, #0
 8102f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	68db      	ldr	r3, [r3, #12]
 8102f2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8102f30:	2b00      	cmp	r3, #0
 8102f32:	d101      	bne.n	8102f38 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102f34:	2301      	movs	r3, #1
 8102f36:	e000      	b.n	8102f3a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102f38:	2300      	movs	r3, #0
}
 8102f3a:	4618      	mov	r0, r3
 8102f3c:	370c      	adds	r7, #12
 8102f3e:	46bd      	mov	sp, r7
 8102f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f44:	4770      	bx	lr

08102f46 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8102f46:	b480      	push	{r7}
 8102f48:	b083      	sub	sp, #12
 8102f4a:	af00      	add	r7, sp, #0
 8102f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f52:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8102f56:	2b00      	cmp	r3, #0
 8102f58:	d101      	bne.n	8102f5e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8102f5a:	2301      	movs	r3, #1
 8102f5c:	e000      	b.n	8102f60 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8102f5e:	2300      	movs	r3, #0
}
 8102f60:	4618      	mov	r0, r3
 8102f62:	370c      	adds	r7, #12
 8102f64:	46bd      	mov	sp, r7
 8102f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f6a:	4770      	bx	lr

08102f6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102f6c:	b480      	push	{r7}
 8102f6e:	b083      	sub	sp, #12
 8102f70:	af00      	add	r7, sp, #0
 8102f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	689b      	ldr	r3, [r3, #8]
 8102f78:	f003 031f 	and.w	r3, r3, #31
}
 8102f7c:	4618      	mov	r0, r3
 8102f7e:	370c      	adds	r7, #12
 8102f80:	46bd      	mov	sp, r7
 8102f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f86:	4770      	bx	lr

08102f88 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102f88:	b480      	push	{r7}
 8102f8a:	b083      	sub	sp, #12
 8102f8c:	af00      	add	r7, sp, #0
 8102f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	689b      	ldr	r3, [r3, #8]
 8102f94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8102f98:	4618      	mov	r0, r3
 8102f9a:	370c      	adds	r7, #12
 8102f9c:	46bd      	mov	sp, r7
 8102f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fa2:	4770      	bx	lr

08102fa4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102fa4:	b480      	push	{r7}
 8102fa6:	b083      	sub	sp, #12
 8102fa8:	af00      	add	r7, sp, #0
 8102faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102fac:	687b      	ldr	r3, [r7, #4]
 8102fae:	689b      	ldr	r3, [r3, #8]
 8102fb0:	f003 0304 	and.w	r3, r3, #4
 8102fb4:	2b04      	cmp	r3, #4
 8102fb6:	d101      	bne.n	8102fbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8102fb8:	2301      	movs	r3, #1
 8102fba:	e000      	b.n	8102fbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102fbc:	2300      	movs	r3, #0
}
 8102fbe:	4618      	mov	r0, r3
 8102fc0:	370c      	adds	r7, #12
 8102fc2:	46bd      	mov	sp, r7
 8102fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fc8:	4770      	bx	lr

08102fca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102fca:	b480      	push	{r7}
 8102fcc:	b083      	sub	sp, #12
 8102fce:	af00      	add	r7, sp, #0
 8102fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	689b      	ldr	r3, [r3, #8]
 8102fd6:	f003 0308 	and.w	r3, r3, #8
 8102fda:	2b08      	cmp	r3, #8
 8102fdc:	d101      	bne.n	8102fe2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102fde:	2301      	movs	r3, #1
 8102fe0:	e000      	b.n	8102fe4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102fe2:	2300      	movs	r3, #0
}
 8102fe4:	4618      	mov	r0, r3
 8102fe6:	370c      	adds	r7, #12
 8102fe8:	46bd      	mov	sp, r7
 8102fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fee:	4770      	bx	lr

08102ff0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8102ff0:	b580      	push	{r7, lr}
 8102ff2:	b08a      	sub	sp, #40	; 0x28
 8102ff4:	af00      	add	r7, sp, #0
 8102ff6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8102ff8:	2300      	movs	r3, #0
 8102ffa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	685b      	ldr	r3, [r3, #4]
 810300a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	4a87      	ldr	r2, [pc, #540]	; (8103230 <HAL_ADC_IRQHandler+0x240>)
 8103012:	4293      	cmp	r3, r2
 8103014:	d004      	beq.n	8103020 <HAL_ADC_IRQHandler+0x30>
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	681b      	ldr	r3, [r3, #0]
 810301a:	4a86      	ldr	r2, [pc, #536]	; (8103234 <HAL_ADC_IRQHandler+0x244>)
 810301c:	4293      	cmp	r3, r2
 810301e:	d101      	bne.n	8103024 <HAL_ADC_IRQHandler+0x34>
 8103020:	4b85      	ldr	r3, [pc, #532]	; (8103238 <HAL_ADC_IRQHandler+0x248>)
 8103022:	e000      	b.n	8103026 <HAL_ADC_IRQHandler+0x36>
 8103024:	4b85      	ldr	r3, [pc, #532]	; (810323c <HAL_ADC_IRQHandler+0x24c>)
 8103026:	4618      	mov	r0, r3
 8103028:	f7ff ffa0 	bl	8102f6c <LL_ADC_GetMultimode>
 810302c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 810302e:	69fb      	ldr	r3, [r7, #28]
 8103030:	f003 0302 	and.w	r3, r3, #2
 8103034:	2b00      	cmp	r3, #0
 8103036:	d017      	beq.n	8103068 <HAL_ADC_IRQHandler+0x78>
 8103038:	69bb      	ldr	r3, [r7, #24]
 810303a:	f003 0302 	and.w	r3, r3, #2
 810303e:	2b00      	cmp	r3, #0
 8103040:	d012      	beq.n	8103068 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103046:	f003 0310 	and.w	r3, r3, #16
 810304a:	2b00      	cmp	r3, #0
 810304c:	d105      	bne.n	810305a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103052:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 810305a:	6878      	ldr	r0, [r7, #4]
 810305c:	f000 fa48 	bl	81034f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8103060:	687b      	ldr	r3, [r7, #4]
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	2202      	movs	r2, #2
 8103066:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103068:	69fb      	ldr	r3, [r7, #28]
 810306a:	f003 0304 	and.w	r3, r3, #4
 810306e:	2b00      	cmp	r3, #0
 8103070:	d004      	beq.n	810307c <HAL_ADC_IRQHandler+0x8c>
 8103072:	69bb      	ldr	r3, [r7, #24]
 8103074:	f003 0304 	and.w	r3, r3, #4
 8103078:	2b00      	cmp	r3, #0
 810307a:	d10a      	bne.n	8103092 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 810307c:	69fb      	ldr	r3, [r7, #28]
 810307e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8103082:	2b00      	cmp	r3, #0
 8103084:	f000 8083 	beq.w	810318e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8103088:	69bb      	ldr	r3, [r7, #24]
 810308a:	f003 0308 	and.w	r3, r3, #8
 810308e:	2b00      	cmp	r3, #0
 8103090:	d07d      	beq.n	810318e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103096:	f003 0310 	and.w	r3, r3, #16
 810309a:	2b00      	cmp	r3, #0
 810309c:	d105      	bne.n	81030aa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 81030a6:	687b      	ldr	r3, [r7, #4]
 81030a8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	681b      	ldr	r3, [r3, #0]
 81030ae:	4618      	mov	r0, r3
 81030b0:	f7ff ff36 	bl	8102f20 <LL_ADC_REG_IsTriggerSourceSWStart>
 81030b4:	4603      	mov	r3, r0
 81030b6:	2b00      	cmp	r3, #0
 81030b8:	d062      	beq.n	8103180 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	4a5d      	ldr	r2, [pc, #372]	; (8103234 <HAL_ADC_IRQHandler+0x244>)
 81030c0:	4293      	cmp	r3, r2
 81030c2:	d002      	beq.n	81030ca <HAL_ADC_IRQHandler+0xda>
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	681b      	ldr	r3, [r3, #0]
 81030c8:	e000      	b.n	81030cc <HAL_ADC_IRQHandler+0xdc>
 81030ca:	4b59      	ldr	r3, [pc, #356]	; (8103230 <HAL_ADC_IRQHandler+0x240>)
 81030cc:	687a      	ldr	r2, [r7, #4]
 81030ce:	6812      	ldr	r2, [r2, #0]
 81030d0:	4293      	cmp	r3, r2
 81030d2:	d008      	beq.n	81030e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 81030d4:	697b      	ldr	r3, [r7, #20]
 81030d6:	2b00      	cmp	r3, #0
 81030d8:	d005      	beq.n	81030e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 81030da:	697b      	ldr	r3, [r7, #20]
 81030dc:	2b05      	cmp	r3, #5
 81030de:	d002      	beq.n	81030e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 81030e0:	697b      	ldr	r3, [r7, #20]
 81030e2:	2b09      	cmp	r3, #9
 81030e4:	d104      	bne.n	81030f0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	68db      	ldr	r3, [r3, #12]
 81030ec:	623b      	str	r3, [r7, #32]
 81030ee:	e00c      	b.n	810310a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	681b      	ldr	r3, [r3, #0]
 81030f4:	4a4f      	ldr	r2, [pc, #316]	; (8103234 <HAL_ADC_IRQHandler+0x244>)
 81030f6:	4293      	cmp	r3, r2
 81030f8:	d002      	beq.n	8103100 <HAL_ADC_IRQHandler+0x110>
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	681b      	ldr	r3, [r3, #0]
 81030fe:	e000      	b.n	8103102 <HAL_ADC_IRQHandler+0x112>
 8103100:	4b4b      	ldr	r3, [pc, #300]	; (8103230 <HAL_ADC_IRQHandler+0x240>)
 8103102:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103104:	693b      	ldr	r3, [r7, #16]
 8103106:	68db      	ldr	r3, [r3, #12]
 8103108:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 810310a:	6a3b      	ldr	r3, [r7, #32]
 810310c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103110:	2b00      	cmp	r3, #0
 8103112:	d135      	bne.n	8103180 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	f003 0308 	and.w	r3, r3, #8
 810311e:	2b08      	cmp	r3, #8
 8103120:	d12e      	bne.n	8103180 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	681b      	ldr	r3, [r3, #0]
 8103126:	4618      	mov	r0, r3
 8103128:	f7ff ff3c 	bl	8102fa4 <LL_ADC_REG_IsConversionOngoing>
 810312c:	4603      	mov	r3, r0
 810312e:	2b00      	cmp	r3, #0
 8103130:	d11a      	bne.n	8103168 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8103132:	687b      	ldr	r3, [r7, #4]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	685a      	ldr	r2, [r3, #4]
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	f022 020c 	bic.w	r2, r2, #12
 8103140:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103156:	2b00      	cmp	r3, #0
 8103158:	d112      	bne.n	8103180 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810315e:	f043 0201 	orr.w	r2, r3, #1
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	655a      	str	r2, [r3, #84]	; 0x54
 8103166:	e00b      	b.n	8103180 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810316c:	f043 0210 	orr.w	r2, r3, #16
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103178:	f043 0201 	orr.w	r2, r3, #1
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8103180:	6878      	ldr	r0, [r7, #4]
 8103182:	f000 f96f 	bl	8103464 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	220c      	movs	r2, #12
 810318c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 810318e:	69fb      	ldr	r3, [r7, #28]
 8103190:	f003 0320 	and.w	r3, r3, #32
 8103194:	2b00      	cmp	r3, #0
 8103196:	d004      	beq.n	81031a2 <HAL_ADC_IRQHandler+0x1b2>
 8103198:	69bb      	ldr	r3, [r7, #24]
 810319a:	f003 0320 	and.w	r3, r3, #32
 810319e:	2b00      	cmp	r3, #0
 81031a0:	d10b      	bne.n	81031ba <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81031a2:	69fb      	ldr	r3, [r7, #28]
 81031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 81031a8:	2b00      	cmp	r3, #0
 81031aa:	f000 80a0 	beq.w	81032ee <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 81031ae:	69bb      	ldr	r3, [r7, #24]
 81031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81031b4:	2b00      	cmp	r3, #0
 81031b6:	f000 809a 	beq.w	81032ee <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81031ba:	687b      	ldr	r3, [r7, #4]
 81031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031be:	f003 0310 	and.w	r3, r3, #16
 81031c2:	2b00      	cmp	r3, #0
 81031c4:	d105      	bne.n	81031d2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	4618      	mov	r0, r3
 81031d8:	f7ff feb5 	bl	8102f46 <LL_ADC_INJ_IsTriggerSourceSWStart>
 81031dc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	4618      	mov	r0, r3
 81031e4:	f7ff fe9c 	bl	8102f20 <LL_ADC_REG_IsTriggerSourceSWStart>
 81031e8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 81031ea:	687b      	ldr	r3, [r7, #4]
 81031ec:	681b      	ldr	r3, [r3, #0]
 81031ee:	4a11      	ldr	r2, [pc, #68]	; (8103234 <HAL_ADC_IRQHandler+0x244>)
 81031f0:	4293      	cmp	r3, r2
 81031f2:	d002      	beq.n	81031fa <HAL_ADC_IRQHandler+0x20a>
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	681b      	ldr	r3, [r3, #0]
 81031f8:	e000      	b.n	81031fc <HAL_ADC_IRQHandler+0x20c>
 81031fa:	4b0d      	ldr	r3, [pc, #52]	; (8103230 <HAL_ADC_IRQHandler+0x240>)
 81031fc:	687a      	ldr	r2, [r7, #4]
 81031fe:	6812      	ldr	r2, [r2, #0]
 8103200:	4293      	cmp	r3, r2
 8103202:	d008      	beq.n	8103216 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8103204:	697b      	ldr	r3, [r7, #20]
 8103206:	2b00      	cmp	r3, #0
 8103208:	d005      	beq.n	8103216 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 810320a:	697b      	ldr	r3, [r7, #20]
 810320c:	2b06      	cmp	r3, #6
 810320e:	d002      	beq.n	8103216 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8103210:	697b      	ldr	r3, [r7, #20]
 8103212:	2b07      	cmp	r3, #7
 8103214:	d104      	bne.n	8103220 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	681b      	ldr	r3, [r3, #0]
 810321a:	68db      	ldr	r3, [r3, #12]
 810321c:	623b      	str	r3, [r7, #32]
 810321e:	e014      	b.n	810324a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	681b      	ldr	r3, [r3, #0]
 8103224:	4a03      	ldr	r2, [pc, #12]	; (8103234 <HAL_ADC_IRQHandler+0x244>)
 8103226:	4293      	cmp	r3, r2
 8103228:	d00a      	beq.n	8103240 <HAL_ADC_IRQHandler+0x250>
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	e008      	b.n	8103242 <HAL_ADC_IRQHandler+0x252>
 8103230:	40022000 	.word	0x40022000
 8103234:	40022100 	.word	0x40022100
 8103238:	40022300 	.word	0x40022300
 810323c:	58026300 	.word	0x58026300
 8103240:	4b84      	ldr	r3, [pc, #528]	; (8103454 <HAL_ADC_IRQHandler+0x464>)
 8103242:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8103244:	693b      	ldr	r3, [r7, #16]
 8103246:	68db      	ldr	r3, [r3, #12]
 8103248:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 810324a:	68fb      	ldr	r3, [r7, #12]
 810324c:	2b00      	cmp	r3, #0
 810324e:	d10c      	bne.n	810326a <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8103250:	6a3b      	ldr	r3, [r7, #32]
 8103252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8103256:	2b00      	cmp	r3, #0
 8103258:	d142      	bne.n	81032e0 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 810325a:	68bb      	ldr	r3, [r7, #8]
 810325c:	2b00      	cmp	r3, #0
 810325e:	d03f      	beq.n	81032e0 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8103260:	6a3b      	ldr	r3, [r7, #32]
 8103262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8103266:	2b00      	cmp	r3, #0
 8103268:	d13a      	bne.n	81032e0 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	681b      	ldr	r3, [r3, #0]
 810326e:	681b      	ldr	r3, [r3, #0]
 8103270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103274:	2b40      	cmp	r3, #64	; 0x40
 8103276:	d133      	bne.n	81032e0 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8103278:	6a3b      	ldr	r3, [r7, #32]
 810327a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810327e:	2b00      	cmp	r3, #0
 8103280:	d12e      	bne.n	81032e0 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	4618      	mov	r0, r3
 8103288:	f7ff fe9f 	bl	8102fca <LL_ADC_INJ_IsConversionOngoing>
 810328c:	4603      	mov	r3, r0
 810328e:	2b00      	cmp	r3, #0
 8103290:	d11a      	bne.n	81032c8 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	681b      	ldr	r3, [r3, #0]
 8103296:	685a      	ldr	r2, [r3, #4]
 8103298:	687b      	ldr	r3, [r7, #4]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 81032a0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81032aa:	687b      	ldr	r3, [r7, #4]
 81032ac:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81032b6:	2b00      	cmp	r3, #0
 81032b8:	d112      	bne.n	81032e0 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032be:	f043 0201 	orr.w	r2, r3, #1
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	655a      	str	r2, [r3, #84]	; 0x54
 81032c6:	e00b      	b.n	81032e0 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81032c8:	687b      	ldr	r3, [r7, #4]
 81032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032cc:	f043 0210 	orr.w	r2, r3, #16
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81032d4:	687b      	ldr	r3, [r7, #4]
 81032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81032d8:	f043 0201 	orr.w	r2, r3, #1
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 81032e0:	6878      	ldr	r0, [r7, #4]
 81032e2:	f000 f8dd 	bl	81034a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	681b      	ldr	r3, [r3, #0]
 81032ea:	2260      	movs	r2, #96	; 0x60
 81032ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 81032ee:	69fb      	ldr	r3, [r7, #28]
 81032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81032f4:	2b00      	cmp	r3, #0
 81032f6:	d011      	beq.n	810331c <HAL_ADC_IRQHandler+0x32c>
 81032f8:	69bb      	ldr	r3, [r7, #24]
 81032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81032fe:	2b00      	cmp	r3, #0
 8103300:	d00c      	beq.n	810331c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103306:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 810330e:	6878      	ldr	r0, [r7, #4]
 8103310:	f000 f8b2 	bl	8103478 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8103314:	687b      	ldr	r3, [r7, #4]
 8103316:	681b      	ldr	r3, [r3, #0]
 8103318:	2280      	movs	r2, #128	; 0x80
 810331a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 810331c:	69fb      	ldr	r3, [r7, #28]
 810331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103322:	2b00      	cmp	r3, #0
 8103324:	d012      	beq.n	810334c <HAL_ADC_IRQHandler+0x35c>
 8103326:	69bb      	ldr	r3, [r7, #24]
 8103328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810332c:	2b00      	cmp	r3, #0
 810332e:	d00d      	beq.n	810334c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103334:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 810333c:	6878      	ldr	r0, [r7, #4]
 810333e:	f000 f8c3 	bl	81034c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8103342:	687b      	ldr	r3, [r7, #4]
 8103344:	681b      	ldr	r3, [r3, #0]
 8103346:	f44f 7280 	mov.w	r2, #256	; 0x100
 810334a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 810334c:	69fb      	ldr	r3, [r7, #28]
 810334e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103352:	2b00      	cmp	r3, #0
 8103354:	d012      	beq.n	810337c <HAL_ADC_IRQHandler+0x38c>
 8103356:	69bb      	ldr	r3, [r7, #24]
 8103358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810335c:	2b00      	cmp	r3, #0
 810335e:	d00d      	beq.n	810337c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103364:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 810336c:	6878      	ldr	r0, [r7, #4]
 810336e:	f000 f8b5 	bl	81034dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	f44f 7200 	mov.w	r2, #512	; 0x200
 810337a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 810337c:	69fb      	ldr	r3, [r7, #28]
 810337e:	f003 0310 	and.w	r3, r3, #16
 8103382:	2b00      	cmp	r3, #0
 8103384:	d043      	beq.n	810340e <HAL_ADC_IRQHandler+0x41e>
 8103386:	69bb      	ldr	r3, [r7, #24]
 8103388:	f003 0310 	and.w	r3, r3, #16
 810338c:	2b00      	cmp	r3, #0
 810338e:	d03e      	beq.n	810340e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103394:	2b00      	cmp	r3, #0
 8103396:	d102      	bne.n	810339e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8103398:	2301      	movs	r3, #1
 810339a:	627b      	str	r3, [r7, #36]	; 0x24
 810339c:	e021      	b.n	81033e2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 810339e:	697b      	ldr	r3, [r7, #20]
 81033a0:	2b00      	cmp	r3, #0
 81033a2:	d015      	beq.n	81033d0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	4a2a      	ldr	r2, [pc, #168]	; (8103454 <HAL_ADC_IRQHandler+0x464>)
 81033aa:	4293      	cmp	r3, r2
 81033ac:	d004      	beq.n	81033b8 <HAL_ADC_IRQHandler+0x3c8>
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	4a29      	ldr	r2, [pc, #164]	; (8103458 <HAL_ADC_IRQHandler+0x468>)
 81033b4:	4293      	cmp	r3, r2
 81033b6:	d101      	bne.n	81033bc <HAL_ADC_IRQHandler+0x3cc>
 81033b8:	4b28      	ldr	r3, [pc, #160]	; (810345c <HAL_ADC_IRQHandler+0x46c>)
 81033ba:	e000      	b.n	81033be <HAL_ADC_IRQHandler+0x3ce>
 81033bc:	4b28      	ldr	r3, [pc, #160]	; (8103460 <HAL_ADC_IRQHandler+0x470>)
 81033be:	4618      	mov	r0, r3
 81033c0:	f7ff fde2 	bl	8102f88 <LL_ADC_GetMultiDMATransfer>
 81033c4:	4603      	mov	r3, r0
 81033c6:	2b00      	cmp	r3, #0
 81033c8:	d00b      	beq.n	81033e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 81033ca:	2301      	movs	r3, #1
 81033cc:	627b      	str	r3, [r7, #36]	; 0x24
 81033ce:	e008      	b.n	81033e2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	68db      	ldr	r3, [r3, #12]
 81033d6:	f003 0303 	and.w	r3, r3, #3
 81033da:	2b00      	cmp	r3, #0
 81033dc:	d001      	beq.n	81033e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 81033de:	2301      	movs	r3, #1
 81033e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 81033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81033e4:	2b01      	cmp	r3, #1
 81033e6:	d10e      	bne.n	8103406 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81033f0:	687b      	ldr	r3, [r7, #4]
 81033f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81033f8:	f043 0202 	orr.w	r2, r3, #2
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8103400:	6878      	ldr	r0, [r7, #4]
 8103402:	f000 f843 	bl	810348c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8103406:	687b      	ldr	r3, [r7, #4]
 8103408:	681b      	ldr	r3, [r3, #0]
 810340a:	2210      	movs	r2, #16
 810340c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 810340e:	69fb      	ldr	r3, [r7, #28]
 8103410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103414:	2b00      	cmp	r3, #0
 8103416:	d018      	beq.n	810344a <HAL_ADC_IRQHandler+0x45a>
 8103418:	69bb      	ldr	r3, [r7, #24]
 810341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810341e:	2b00      	cmp	r3, #0
 8103420:	d013      	beq.n	810344a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103426:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103432:	f043 0208 	orr.w	r2, r3, #8
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	681b      	ldr	r3, [r3, #0]
 810343e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103442:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8103444:	6878      	ldr	r0, [r7, #4]
 8103446:	f000 f835 	bl	81034b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 810344a:	bf00      	nop
 810344c:	3728      	adds	r7, #40	; 0x28
 810344e:	46bd      	mov	sp, r7
 8103450:	bd80      	pop	{r7, pc}
 8103452:	bf00      	nop
 8103454:	40022000 	.word	0x40022000
 8103458:	40022100 	.word	0x40022100
 810345c:	40022300 	.word	0x40022300
 8103460:	58026300 	.word	0x58026300

08103464 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103464:	b480      	push	{r7}
 8103466:	b083      	sub	sp, #12
 8103468:	af00      	add	r7, sp, #0
 810346a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 810346c:	bf00      	nop
 810346e:	370c      	adds	r7, #12
 8103470:	46bd      	mov	sp, r7
 8103472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103476:	4770      	bx	lr

08103478 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8103478:	b480      	push	{r7}
 810347a:	b083      	sub	sp, #12
 810347c:	af00      	add	r7, sp, #0
 810347e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8103480:	bf00      	nop
 8103482:	370c      	adds	r7, #12
 8103484:	46bd      	mov	sp, r7
 8103486:	f85d 7b04 	ldr.w	r7, [sp], #4
 810348a:	4770      	bx	lr

0810348c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 810348c:	b480      	push	{r7}
 810348e:	b083      	sub	sp, #12
 8103490:	af00      	add	r7, sp, #0
 8103492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8103494:	bf00      	nop
 8103496:	370c      	adds	r7, #12
 8103498:	46bd      	mov	sp, r7
 810349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810349e:	4770      	bx	lr

081034a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 81034a0:	b480      	push	{r7}
 81034a2:	b083      	sub	sp, #12
 81034a4:	af00      	add	r7, sp, #0
 81034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 81034a8:	bf00      	nop
 81034aa:	370c      	adds	r7, #12
 81034ac:	46bd      	mov	sp, r7
 81034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b2:	4770      	bx	lr

081034b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 81034b4:	b480      	push	{r7}
 81034b6:	b083      	sub	sp, #12
 81034b8:	af00      	add	r7, sp, #0
 81034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 81034bc:	bf00      	nop
 81034be:	370c      	adds	r7, #12
 81034c0:	46bd      	mov	sp, r7
 81034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034c6:	4770      	bx	lr

081034c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 81034c8:	b480      	push	{r7}
 81034ca:	b083      	sub	sp, #12
 81034cc:	af00      	add	r7, sp, #0
 81034ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 81034d0:	bf00      	nop
 81034d2:	370c      	adds	r7, #12
 81034d4:	46bd      	mov	sp, r7
 81034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034da:	4770      	bx	lr

081034dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 81034dc:	b480      	push	{r7}
 81034de:	b083      	sub	sp, #12
 81034e0:	af00      	add	r7, sp, #0
 81034e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 81034e4:	bf00      	nop
 81034e6:	370c      	adds	r7, #12
 81034e8:	46bd      	mov	sp, r7
 81034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ee:	4770      	bx	lr

081034f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 81034f0:	b480      	push	{r7}
 81034f2:	b083      	sub	sp, #12
 81034f4:	af00      	add	r7, sp, #0
 81034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 81034f8:	bf00      	nop
 81034fa:	370c      	adds	r7, #12
 81034fc:	46bd      	mov	sp, r7
 81034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103502:	4770      	bx	lr

08103504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103504:	b480      	push	{r7}
 8103506:	b085      	sub	sp, #20
 8103508:	af00      	add	r7, sp, #0
 810350a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	f003 0307 	and.w	r3, r3, #7
 8103512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103514:	4b0c      	ldr	r3, [pc, #48]	; (8103548 <__NVIC_SetPriorityGrouping+0x44>)
 8103516:	68db      	ldr	r3, [r3, #12]
 8103518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810351a:	68ba      	ldr	r2, [r7, #8]
 810351c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103520:	4013      	ands	r3, r2
 8103522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103524:	68fb      	ldr	r3, [r7, #12]
 8103526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103528:	68bb      	ldr	r3, [r7, #8]
 810352a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810352c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103536:	4a04      	ldr	r2, [pc, #16]	; (8103548 <__NVIC_SetPriorityGrouping+0x44>)
 8103538:	68bb      	ldr	r3, [r7, #8]
 810353a:	60d3      	str	r3, [r2, #12]
}
 810353c:	bf00      	nop
 810353e:	3714      	adds	r7, #20
 8103540:	46bd      	mov	sp, r7
 8103542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103546:	4770      	bx	lr
 8103548:	e000ed00 	.word	0xe000ed00

0810354c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810354c:	b480      	push	{r7}
 810354e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103550:	4b04      	ldr	r3, [pc, #16]	; (8103564 <__NVIC_GetPriorityGrouping+0x18>)
 8103552:	68db      	ldr	r3, [r3, #12]
 8103554:	0a1b      	lsrs	r3, r3, #8
 8103556:	f003 0307 	and.w	r3, r3, #7
}
 810355a:	4618      	mov	r0, r3
 810355c:	46bd      	mov	sp, r7
 810355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103562:	4770      	bx	lr
 8103564:	e000ed00 	.word	0xe000ed00

08103568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103568:	b480      	push	{r7}
 810356a:	b083      	sub	sp, #12
 810356c:	af00      	add	r7, sp, #0
 810356e:	4603      	mov	r3, r0
 8103570:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103576:	2b00      	cmp	r3, #0
 8103578:	db0b      	blt.n	8103592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810357a:	88fb      	ldrh	r3, [r7, #6]
 810357c:	f003 021f 	and.w	r2, r3, #31
 8103580:	4907      	ldr	r1, [pc, #28]	; (81035a0 <__NVIC_EnableIRQ+0x38>)
 8103582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103586:	095b      	lsrs	r3, r3, #5
 8103588:	2001      	movs	r0, #1
 810358a:	fa00 f202 	lsl.w	r2, r0, r2
 810358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103592:	bf00      	nop
 8103594:	370c      	adds	r7, #12
 8103596:	46bd      	mov	sp, r7
 8103598:	f85d 7b04 	ldr.w	r7, [sp], #4
 810359c:	4770      	bx	lr
 810359e:	bf00      	nop
 81035a0:	e000e100 	.word	0xe000e100

081035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81035a4:	b480      	push	{r7}
 81035a6:	b083      	sub	sp, #12
 81035a8:	af00      	add	r7, sp, #0
 81035aa:	4603      	mov	r3, r0
 81035ac:	6039      	str	r1, [r7, #0]
 81035ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81035b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81035b4:	2b00      	cmp	r3, #0
 81035b6:	db0a      	blt.n	81035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035b8:	683b      	ldr	r3, [r7, #0]
 81035ba:	b2da      	uxtb	r2, r3
 81035bc:	490c      	ldr	r1, [pc, #48]	; (81035f0 <__NVIC_SetPriority+0x4c>)
 81035be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81035c2:	0112      	lsls	r2, r2, #4
 81035c4:	b2d2      	uxtb	r2, r2
 81035c6:	440b      	add	r3, r1
 81035c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81035cc:	e00a      	b.n	81035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81035ce:	683b      	ldr	r3, [r7, #0]
 81035d0:	b2da      	uxtb	r2, r3
 81035d2:	4908      	ldr	r1, [pc, #32]	; (81035f4 <__NVIC_SetPriority+0x50>)
 81035d4:	88fb      	ldrh	r3, [r7, #6]
 81035d6:	f003 030f 	and.w	r3, r3, #15
 81035da:	3b04      	subs	r3, #4
 81035dc:	0112      	lsls	r2, r2, #4
 81035de:	b2d2      	uxtb	r2, r2
 81035e0:	440b      	add	r3, r1
 81035e2:	761a      	strb	r2, [r3, #24]
}
 81035e4:	bf00      	nop
 81035e6:	370c      	adds	r7, #12
 81035e8:	46bd      	mov	sp, r7
 81035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ee:	4770      	bx	lr
 81035f0:	e000e100 	.word	0xe000e100
 81035f4:	e000ed00 	.word	0xe000ed00

081035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81035f8:	b480      	push	{r7}
 81035fa:	b089      	sub	sp, #36	; 0x24
 81035fc:	af00      	add	r7, sp, #0
 81035fe:	60f8      	str	r0, [r7, #12]
 8103600:	60b9      	str	r1, [r7, #8]
 8103602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103604:	68fb      	ldr	r3, [r7, #12]
 8103606:	f003 0307 	and.w	r3, r3, #7
 810360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810360c:	69fb      	ldr	r3, [r7, #28]
 810360e:	f1c3 0307 	rsb	r3, r3, #7
 8103612:	2b04      	cmp	r3, #4
 8103614:	bf28      	it	cs
 8103616:	2304      	movcs	r3, #4
 8103618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810361a:	69fb      	ldr	r3, [r7, #28]
 810361c:	3304      	adds	r3, #4
 810361e:	2b06      	cmp	r3, #6
 8103620:	d902      	bls.n	8103628 <NVIC_EncodePriority+0x30>
 8103622:	69fb      	ldr	r3, [r7, #28]
 8103624:	3b03      	subs	r3, #3
 8103626:	e000      	b.n	810362a <NVIC_EncodePriority+0x32>
 8103628:	2300      	movs	r3, #0
 810362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810362c:	f04f 32ff 	mov.w	r2, #4294967295
 8103630:	69bb      	ldr	r3, [r7, #24]
 8103632:	fa02 f303 	lsl.w	r3, r2, r3
 8103636:	43da      	mvns	r2, r3
 8103638:	68bb      	ldr	r3, [r7, #8]
 810363a:	401a      	ands	r2, r3
 810363c:	697b      	ldr	r3, [r7, #20]
 810363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103640:	f04f 31ff 	mov.w	r1, #4294967295
 8103644:	697b      	ldr	r3, [r7, #20]
 8103646:	fa01 f303 	lsl.w	r3, r1, r3
 810364a:	43d9      	mvns	r1, r3
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103650:	4313      	orrs	r3, r2
         );
}
 8103652:	4618      	mov	r0, r3
 8103654:	3724      	adds	r7, #36	; 0x24
 8103656:	46bd      	mov	sp, r7
 8103658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810365c:	4770      	bx	lr
	...

08103660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103660:	b580      	push	{r7, lr}
 8103662:	b082      	sub	sp, #8
 8103664:	af00      	add	r7, sp, #0
 8103666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	3b01      	subs	r3, #1
 810366c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103670:	d301      	bcc.n	8103676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103672:	2301      	movs	r3, #1
 8103674:	e00f      	b.n	8103696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103676:	4a0a      	ldr	r2, [pc, #40]	; (81036a0 <SysTick_Config+0x40>)
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	3b01      	subs	r3, #1
 810367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810367e:	210f      	movs	r1, #15
 8103680:	f04f 30ff 	mov.w	r0, #4294967295
 8103684:	f7ff ff8e 	bl	81035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103688:	4b05      	ldr	r3, [pc, #20]	; (81036a0 <SysTick_Config+0x40>)
 810368a:	2200      	movs	r2, #0
 810368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810368e:	4b04      	ldr	r3, [pc, #16]	; (81036a0 <SysTick_Config+0x40>)
 8103690:	2207      	movs	r2, #7
 8103692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103694:	2300      	movs	r3, #0
}
 8103696:	4618      	mov	r0, r3
 8103698:	3708      	adds	r7, #8
 810369a:	46bd      	mov	sp, r7
 810369c:	bd80      	pop	{r7, pc}
 810369e:	bf00      	nop
 81036a0:	e000e010 	.word	0xe000e010

081036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81036a4:	b580      	push	{r7, lr}
 81036a6:	b082      	sub	sp, #8
 81036a8:	af00      	add	r7, sp, #0
 81036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81036ac:	6878      	ldr	r0, [r7, #4]
 81036ae:	f7ff ff29 	bl	8103504 <__NVIC_SetPriorityGrouping>
}
 81036b2:	bf00      	nop
 81036b4:	3708      	adds	r7, #8
 81036b6:	46bd      	mov	sp, r7
 81036b8:	bd80      	pop	{r7, pc}

081036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81036ba:	b580      	push	{r7, lr}
 81036bc:	b086      	sub	sp, #24
 81036be:	af00      	add	r7, sp, #0
 81036c0:	4603      	mov	r3, r0
 81036c2:	60b9      	str	r1, [r7, #8]
 81036c4:	607a      	str	r2, [r7, #4]
 81036c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81036c8:	f7ff ff40 	bl	810354c <__NVIC_GetPriorityGrouping>
 81036cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81036ce:	687a      	ldr	r2, [r7, #4]
 81036d0:	68b9      	ldr	r1, [r7, #8]
 81036d2:	6978      	ldr	r0, [r7, #20]
 81036d4:	f7ff ff90 	bl	81035f8 <NVIC_EncodePriority>
 81036d8:	4602      	mov	r2, r0
 81036da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81036de:	4611      	mov	r1, r2
 81036e0:	4618      	mov	r0, r3
 81036e2:	f7ff ff5f 	bl	81035a4 <__NVIC_SetPriority>
}
 81036e6:	bf00      	nop
 81036e8:	3718      	adds	r7, #24
 81036ea:	46bd      	mov	sp, r7
 81036ec:	bd80      	pop	{r7, pc}

081036ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81036ee:	b580      	push	{r7, lr}
 81036f0:	b082      	sub	sp, #8
 81036f2:	af00      	add	r7, sp, #0
 81036f4:	4603      	mov	r3, r0
 81036f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81036f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81036fc:	4618      	mov	r0, r3
 81036fe:	f7ff ff33 	bl	8103568 <__NVIC_EnableIRQ>
}
 8103702:	bf00      	nop
 8103704:	3708      	adds	r7, #8
 8103706:	46bd      	mov	sp, r7
 8103708:	bd80      	pop	{r7, pc}

0810370a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810370a:	b580      	push	{r7, lr}
 810370c:	b082      	sub	sp, #8
 810370e:	af00      	add	r7, sp, #0
 8103710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103712:	6878      	ldr	r0, [r7, #4]
 8103714:	f7ff ffa4 	bl	8103660 <SysTick_Config>
 8103718:	4603      	mov	r3, r0
}
 810371a:	4618      	mov	r0, r3
 810371c:	3708      	adds	r7, #8
 810371e:	46bd      	mov	sp, r7
 8103720:	bd80      	pop	{r7, pc}
	...

08103724 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103724:	b480      	push	{r7}
 8103726:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103728:	4b07      	ldr	r3, [pc, #28]	; (8103748 <HAL_GetCurrentCPUID+0x24>)
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	091b      	lsrs	r3, r3, #4
 810372e:	f003 030f 	and.w	r3, r3, #15
 8103732:	2b07      	cmp	r3, #7
 8103734:	d101      	bne.n	810373a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103736:	2303      	movs	r3, #3
 8103738:	e000      	b.n	810373c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810373a:	2301      	movs	r3, #1
  }
}
 810373c:	4618      	mov	r0, r3
 810373e:	46bd      	mov	sp, r7
 8103740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103744:	4770      	bx	lr
 8103746:	bf00      	nop
 8103748:	e000ed00 	.word	0xe000ed00

0810374c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 810374c:	b580      	push	{r7, lr}
 810374e:	b086      	sub	sp, #24
 8103750:	af00      	add	r7, sp, #0
 8103752:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103754:	f7ff fbb4 	bl	8102ec0 <HAL_GetTick>
 8103758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810375a:	687b      	ldr	r3, [r7, #4]
 810375c:	2b00      	cmp	r3, #0
 810375e:	d101      	bne.n	8103764 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8103760:	2301      	movs	r3, #1
 8103762:	e314      	b.n	8103d8e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103764:	687b      	ldr	r3, [r7, #4]
 8103766:	681b      	ldr	r3, [r3, #0]
 8103768:	4a66      	ldr	r2, [pc, #408]	; (8103904 <HAL_DMA_Init+0x1b8>)
 810376a:	4293      	cmp	r3, r2
 810376c:	d04a      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	681b      	ldr	r3, [r3, #0]
 8103772:	4a65      	ldr	r2, [pc, #404]	; (8103908 <HAL_DMA_Init+0x1bc>)
 8103774:	4293      	cmp	r3, r2
 8103776:	d045      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	681b      	ldr	r3, [r3, #0]
 810377c:	4a63      	ldr	r2, [pc, #396]	; (810390c <HAL_DMA_Init+0x1c0>)
 810377e:	4293      	cmp	r3, r2
 8103780:	d040      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	681b      	ldr	r3, [r3, #0]
 8103786:	4a62      	ldr	r2, [pc, #392]	; (8103910 <HAL_DMA_Init+0x1c4>)
 8103788:	4293      	cmp	r3, r2
 810378a:	d03b      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	681b      	ldr	r3, [r3, #0]
 8103790:	4a60      	ldr	r2, [pc, #384]	; (8103914 <HAL_DMA_Init+0x1c8>)
 8103792:	4293      	cmp	r3, r2
 8103794:	d036      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	681b      	ldr	r3, [r3, #0]
 810379a:	4a5f      	ldr	r2, [pc, #380]	; (8103918 <HAL_DMA_Init+0x1cc>)
 810379c:	4293      	cmp	r3, r2
 810379e:	d031      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	681b      	ldr	r3, [r3, #0]
 81037a4:	4a5d      	ldr	r2, [pc, #372]	; (810391c <HAL_DMA_Init+0x1d0>)
 81037a6:	4293      	cmp	r3, r2
 81037a8:	d02c      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	681b      	ldr	r3, [r3, #0]
 81037ae:	4a5c      	ldr	r2, [pc, #368]	; (8103920 <HAL_DMA_Init+0x1d4>)
 81037b0:	4293      	cmp	r3, r2
 81037b2:	d027      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037b4:	687b      	ldr	r3, [r7, #4]
 81037b6:	681b      	ldr	r3, [r3, #0]
 81037b8:	4a5a      	ldr	r2, [pc, #360]	; (8103924 <HAL_DMA_Init+0x1d8>)
 81037ba:	4293      	cmp	r3, r2
 81037bc:	d022      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	681b      	ldr	r3, [r3, #0]
 81037c2:	4a59      	ldr	r2, [pc, #356]	; (8103928 <HAL_DMA_Init+0x1dc>)
 81037c4:	4293      	cmp	r3, r2
 81037c6:	d01d      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	4a57      	ldr	r2, [pc, #348]	; (810392c <HAL_DMA_Init+0x1e0>)
 81037ce:	4293      	cmp	r3, r2
 81037d0:	d018      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037d2:	687b      	ldr	r3, [r7, #4]
 81037d4:	681b      	ldr	r3, [r3, #0]
 81037d6:	4a56      	ldr	r2, [pc, #344]	; (8103930 <HAL_DMA_Init+0x1e4>)
 81037d8:	4293      	cmp	r3, r2
 81037da:	d013      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	681b      	ldr	r3, [r3, #0]
 81037e0:	4a54      	ldr	r2, [pc, #336]	; (8103934 <HAL_DMA_Init+0x1e8>)
 81037e2:	4293      	cmp	r3, r2
 81037e4:	d00e      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	681b      	ldr	r3, [r3, #0]
 81037ea:	4a53      	ldr	r2, [pc, #332]	; (8103938 <HAL_DMA_Init+0x1ec>)
 81037ec:	4293      	cmp	r3, r2
 81037ee:	d009      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	4a51      	ldr	r2, [pc, #324]	; (810393c <HAL_DMA_Init+0x1f0>)
 81037f6:	4293      	cmp	r3, r2
 81037f8:	d004      	beq.n	8103804 <HAL_DMA_Init+0xb8>
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	4a50      	ldr	r2, [pc, #320]	; (8103940 <HAL_DMA_Init+0x1f4>)
 8103800:	4293      	cmp	r3, r2
 8103802:	d101      	bne.n	8103808 <HAL_DMA_Init+0xbc>
 8103804:	2301      	movs	r3, #1
 8103806:	e000      	b.n	810380a <HAL_DMA_Init+0xbe>
 8103808:	2300      	movs	r3, #0
 810380a:	2b00      	cmp	r3, #0
 810380c:	f000 813b 	beq.w	8103a86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	2200      	movs	r2, #0
 8103814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	2202      	movs	r2, #2
 810381c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	681b      	ldr	r3, [r3, #0]
 8103824:	4a37      	ldr	r2, [pc, #220]	; (8103904 <HAL_DMA_Init+0x1b8>)
 8103826:	4293      	cmp	r3, r2
 8103828:	d04a      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 810382a:	687b      	ldr	r3, [r7, #4]
 810382c:	681b      	ldr	r3, [r3, #0]
 810382e:	4a36      	ldr	r2, [pc, #216]	; (8103908 <HAL_DMA_Init+0x1bc>)
 8103830:	4293      	cmp	r3, r2
 8103832:	d045      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	681b      	ldr	r3, [r3, #0]
 8103838:	4a34      	ldr	r2, [pc, #208]	; (810390c <HAL_DMA_Init+0x1c0>)
 810383a:	4293      	cmp	r3, r2
 810383c:	d040      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 810383e:	687b      	ldr	r3, [r7, #4]
 8103840:	681b      	ldr	r3, [r3, #0]
 8103842:	4a33      	ldr	r2, [pc, #204]	; (8103910 <HAL_DMA_Init+0x1c4>)
 8103844:	4293      	cmp	r3, r2
 8103846:	d03b      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	681b      	ldr	r3, [r3, #0]
 810384c:	4a31      	ldr	r2, [pc, #196]	; (8103914 <HAL_DMA_Init+0x1c8>)
 810384e:	4293      	cmp	r3, r2
 8103850:	d036      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 8103852:	687b      	ldr	r3, [r7, #4]
 8103854:	681b      	ldr	r3, [r3, #0]
 8103856:	4a30      	ldr	r2, [pc, #192]	; (8103918 <HAL_DMA_Init+0x1cc>)
 8103858:	4293      	cmp	r3, r2
 810385a:	d031      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	681b      	ldr	r3, [r3, #0]
 8103860:	4a2e      	ldr	r2, [pc, #184]	; (810391c <HAL_DMA_Init+0x1d0>)
 8103862:	4293      	cmp	r3, r2
 8103864:	d02c      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	681b      	ldr	r3, [r3, #0]
 810386a:	4a2d      	ldr	r2, [pc, #180]	; (8103920 <HAL_DMA_Init+0x1d4>)
 810386c:	4293      	cmp	r3, r2
 810386e:	d027      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	4a2b      	ldr	r2, [pc, #172]	; (8103924 <HAL_DMA_Init+0x1d8>)
 8103876:	4293      	cmp	r3, r2
 8103878:	d022      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	4a2a      	ldr	r2, [pc, #168]	; (8103928 <HAL_DMA_Init+0x1dc>)
 8103880:	4293      	cmp	r3, r2
 8103882:	d01d      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 8103884:	687b      	ldr	r3, [r7, #4]
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	4a28      	ldr	r2, [pc, #160]	; (810392c <HAL_DMA_Init+0x1e0>)
 810388a:	4293      	cmp	r3, r2
 810388c:	d018      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	4a27      	ldr	r2, [pc, #156]	; (8103930 <HAL_DMA_Init+0x1e4>)
 8103894:	4293      	cmp	r3, r2
 8103896:	d013      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	681b      	ldr	r3, [r3, #0]
 810389c:	4a25      	ldr	r2, [pc, #148]	; (8103934 <HAL_DMA_Init+0x1e8>)
 810389e:	4293      	cmp	r3, r2
 81038a0:	d00e      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	4a24      	ldr	r2, [pc, #144]	; (8103938 <HAL_DMA_Init+0x1ec>)
 81038a8:	4293      	cmp	r3, r2
 81038aa:	d009      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	681b      	ldr	r3, [r3, #0]
 81038b0:	4a22      	ldr	r2, [pc, #136]	; (810393c <HAL_DMA_Init+0x1f0>)
 81038b2:	4293      	cmp	r3, r2
 81038b4:	d004      	beq.n	81038c0 <HAL_DMA_Init+0x174>
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	681b      	ldr	r3, [r3, #0]
 81038ba:	4a21      	ldr	r2, [pc, #132]	; (8103940 <HAL_DMA_Init+0x1f4>)
 81038bc:	4293      	cmp	r3, r2
 81038be:	d108      	bne.n	81038d2 <HAL_DMA_Init+0x186>
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	681a      	ldr	r2, [r3, #0]
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	f022 0201 	bic.w	r2, r2, #1
 81038ce:	601a      	str	r2, [r3, #0]
 81038d0:	e007      	b.n	81038e2 <HAL_DMA_Init+0x196>
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	681b      	ldr	r3, [r3, #0]
 81038d6:	681a      	ldr	r2, [r3, #0]
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	f022 0201 	bic.w	r2, r2, #1
 81038e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81038e2:	e02f      	b.n	8103944 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81038e4:	f7ff faec 	bl	8102ec0 <HAL_GetTick>
 81038e8:	4602      	mov	r2, r0
 81038ea:	693b      	ldr	r3, [r7, #16]
 81038ec:	1ad3      	subs	r3, r2, r3
 81038ee:	2b05      	cmp	r3, #5
 81038f0:	d928      	bls.n	8103944 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	2220      	movs	r2, #32
 81038f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	2203      	movs	r2, #3
 81038fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8103900:	2301      	movs	r3, #1
 8103902:	e244      	b.n	8103d8e <HAL_DMA_Init+0x642>
 8103904:	40020010 	.word	0x40020010
 8103908:	40020028 	.word	0x40020028
 810390c:	40020040 	.word	0x40020040
 8103910:	40020058 	.word	0x40020058
 8103914:	40020070 	.word	0x40020070
 8103918:	40020088 	.word	0x40020088
 810391c:	400200a0 	.word	0x400200a0
 8103920:	400200b8 	.word	0x400200b8
 8103924:	40020410 	.word	0x40020410
 8103928:	40020428 	.word	0x40020428
 810392c:	40020440 	.word	0x40020440
 8103930:	40020458 	.word	0x40020458
 8103934:	40020470 	.word	0x40020470
 8103938:	40020488 	.word	0x40020488
 810393c:	400204a0 	.word	0x400204a0
 8103940:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	681b      	ldr	r3, [r3, #0]
 8103948:	681b      	ldr	r3, [r3, #0]
 810394a:	f003 0301 	and.w	r3, r3, #1
 810394e:	2b00      	cmp	r3, #0
 8103950:	d1c8      	bne.n	81038e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810395a:	697a      	ldr	r2, [r7, #20]
 810395c:	4b84      	ldr	r3, [pc, #528]	; (8103b70 <HAL_DMA_Init+0x424>)
 810395e:	4013      	ands	r3, r2
 8103960:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810396a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	691b      	ldr	r3, [r3, #16]
 8103970:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103976:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	699b      	ldr	r3, [r3, #24]
 810397c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103982:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	6a1b      	ldr	r3, [r3, #32]
 8103988:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810398a:	697a      	ldr	r2, [r7, #20]
 810398c:	4313      	orrs	r3, r2
 810398e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103994:	2b04      	cmp	r3, #4
 8103996:	d107      	bne.n	81039a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81039a0:	4313      	orrs	r3, r2
 81039a2:	697a      	ldr	r2, [r7, #20]
 81039a4:	4313      	orrs	r3, r2
 81039a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81039a8:	4b72      	ldr	r3, [pc, #456]	; (8103b74 <HAL_DMA_Init+0x428>)
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	0c1b      	lsrs	r3, r3, #16
 81039ae:	041b      	lsls	r3, r3, #16
 81039b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81039b4:	d328      	bcc.n	8103a08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	685b      	ldr	r3, [r3, #4]
 81039ba:	2b28      	cmp	r3, #40	; 0x28
 81039bc:	d903      	bls.n	81039c6 <HAL_DMA_Init+0x27a>
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	685b      	ldr	r3, [r3, #4]
 81039c2:	2b2e      	cmp	r3, #46	; 0x2e
 81039c4:	d917      	bls.n	81039f6 <HAL_DMA_Init+0x2aa>
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	685b      	ldr	r3, [r3, #4]
 81039ca:	2b3e      	cmp	r3, #62	; 0x3e
 81039cc:	d903      	bls.n	81039d6 <HAL_DMA_Init+0x28a>
 81039ce:	687b      	ldr	r3, [r7, #4]
 81039d0:	685b      	ldr	r3, [r3, #4]
 81039d2:	2b42      	cmp	r3, #66	; 0x42
 81039d4:	d90f      	bls.n	81039f6 <HAL_DMA_Init+0x2aa>
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	685b      	ldr	r3, [r3, #4]
 81039da:	2b46      	cmp	r3, #70	; 0x46
 81039dc:	d903      	bls.n	81039e6 <HAL_DMA_Init+0x29a>
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	685b      	ldr	r3, [r3, #4]
 81039e2:	2b48      	cmp	r3, #72	; 0x48
 81039e4:	d907      	bls.n	81039f6 <HAL_DMA_Init+0x2aa>
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	685b      	ldr	r3, [r3, #4]
 81039ea:	2b4e      	cmp	r3, #78	; 0x4e
 81039ec:	d905      	bls.n	81039fa <HAL_DMA_Init+0x2ae>
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	685b      	ldr	r3, [r3, #4]
 81039f2:	2b52      	cmp	r3, #82	; 0x52
 81039f4:	d801      	bhi.n	81039fa <HAL_DMA_Init+0x2ae>
 81039f6:	2301      	movs	r3, #1
 81039f8:	e000      	b.n	81039fc <HAL_DMA_Init+0x2b0>
 81039fa:	2300      	movs	r3, #0
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	d003      	beq.n	8103a08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8103a00:	697b      	ldr	r3, [r7, #20]
 8103a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103a06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	697a      	ldr	r2, [r7, #20]
 8103a0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	695b      	ldr	r3, [r3, #20]
 8103a16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103a18:	697b      	ldr	r3, [r7, #20]
 8103a1a:	f023 0307 	bic.w	r3, r3, #7
 8103a1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a24:	697a      	ldr	r2, [r7, #20]
 8103a26:	4313      	orrs	r3, r2
 8103a28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a2e:	2b04      	cmp	r3, #4
 8103a30:	d117      	bne.n	8103a62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a36:	697a      	ldr	r2, [r7, #20]
 8103a38:	4313      	orrs	r3, r2
 8103a3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d00e      	beq.n	8103a62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8103a44:	6878      	ldr	r0, [r7, #4]
 8103a46:	f002 fb4b 	bl	81060e0 <DMA_CheckFifoParam>
 8103a4a:	4603      	mov	r3, r0
 8103a4c:	2b00      	cmp	r3, #0
 8103a4e:	d008      	beq.n	8103a62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	2240      	movs	r2, #64	; 0x40
 8103a54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	2201      	movs	r2, #1
 8103a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8103a5e:	2301      	movs	r3, #1
 8103a60:	e195      	b.n	8103d8e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	697a      	ldr	r2, [r7, #20]
 8103a68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103a6a:	6878      	ldr	r0, [r7, #4]
 8103a6c:	f002 fa86 	bl	8105f7c <DMA_CalcBaseAndBitshift>
 8103a70:	4603      	mov	r3, r0
 8103a72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a78:	f003 031f 	and.w	r3, r3, #31
 8103a7c:	223f      	movs	r2, #63	; 0x3f
 8103a7e:	409a      	lsls	r2, r3
 8103a80:	68bb      	ldr	r3, [r7, #8]
 8103a82:	609a      	str	r2, [r3, #8]
 8103a84:	e0cb      	b.n	8103c1e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	4a3b      	ldr	r2, [pc, #236]	; (8103b78 <HAL_DMA_Init+0x42c>)
 8103a8c:	4293      	cmp	r3, r2
 8103a8e:	d022      	beq.n	8103ad6 <HAL_DMA_Init+0x38a>
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	681b      	ldr	r3, [r3, #0]
 8103a94:	4a39      	ldr	r2, [pc, #228]	; (8103b7c <HAL_DMA_Init+0x430>)
 8103a96:	4293      	cmp	r3, r2
 8103a98:	d01d      	beq.n	8103ad6 <HAL_DMA_Init+0x38a>
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	681b      	ldr	r3, [r3, #0]
 8103a9e:	4a38      	ldr	r2, [pc, #224]	; (8103b80 <HAL_DMA_Init+0x434>)
 8103aa0:	4293      	cmp	r3, r2
 8103aa2:	d018      	beq.n	8103ad6 <HAL_DMA_Init+0x38a>
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	681b      	ldr	r3, [r3, #0]
 8103aa8:	4a36      	ldr	r2, [pc, #216]	; (8103b84 <HAL_DMA_Init+0x438>)
 8103aaa:	4293      	cmp	r3, r2
 8103aac:	d013      	beq.n	8103ad6 <HAL_DMA_Init+0x38a>
 8103aae:	687b      	ldr	r3, [r7, #4]
 8103ab0:	681b      	ldr	r3, [r3, #0]
 8103ab2:	4a35      	ldr	r2, [pc, #212]	; (8103b88 <HAL_DMA_Init+0x43c>)
 8103ab4:	4293      	cmp	r3, r2
 8103ab6:	d00e      	beq.n	8103ad6 <HAL_DMA_Init+0x38a>
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	681b      	ldr	r3, [r3, #0]
 8103abc:	4a33      	ldr	r2, [pc, #204]	; (8103b8c <HAL_DMA_Init+0x440>)
 8103abe:	4293      	cmp	r3, r2
 8103ac0:	d009      	beq.n	8103ad6 <HAL_DMA_Init+0x38a>
 8103ac2:	687b      	ldr	r3, [r7, #4]
 8103ac4:	681b      	ldr	r3, [r3, #0]
 8103ac6:	4a32      	ldr	r2, [pc, #200]	; (8103b90 <HAL_DMA_Init+0x444>)
 8103ac8:	4293      	cmp	r3, r2
 8103aca:	d004      	beq.n	8103ad6 <HAL_DMA_Init+0x38a>
 8103acc:	687b      	ldr	r3, [r7, #4]
 8103ace:	681b      	ldr	r3, [r3, #0]
 8103ad0:	4a30      	ldr	r2, [pc, #192]	; (8103b94 <HAL_DMA_Init+0x448>)
 8103ad2:	4293      	cmp	r3, r2
 8103ad4:	d101      	bne.n	8103ada <HAL_DMA_Init+0x38e>
 8103ad6:	2301      	movs	r3, #1
 8103ad8:	e000      	b.n	8103adc <HAL_DMA_Init+0x390>
 8103ada:	2300      	movs	r3, #0
 8103adc:	2b00      	cmp	r3, #0
 8103ade:	f000 8095 	beq.w	8103c0c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	681b      	ldr	r3, [r3, #0]
 8103ae6:	4a24      	ldr	r2, [pc, #144]	; (8103b78 <HAL_DMA_Init+0x42c>)
 8103ae8:	4293      	cmp	r3, r2
 8103aea:	d021      	beq.n	8103b30 <HAL_DMA_Init+0x3e4>
 8103aec:	687b      	ldr	r3, [r7, #4]
 8103aee:	681b      	ldr	r3, [r3, #0]
 8103af0:	4a22      	ldr	r2, [pc, #136]	; (8103b7c <HAL_DMA_Init+0x430>)
 8103af2:	4293      	cmp	r3, r2
 8103af4:	d01c      	beq.n	8103b30 <HAL_DMA_Init+0x3e4>
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	4a21      	ldr	r2, [pc, #132]	; (8103b80 <HAL_DMA_Init+0x434>)
 8103afc:	4293      	cmp	r3, r2
 8103afe:	d017      	beq.n	8103b30 <HAL_DMA_Init+0x3e4>
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	681b      	ldr	r3, [r3, #0]
 8103b04:	4a1f      	ldr	r2, [pc, #124]	; (8103b84 <HAL_DMA_Init+0x438>)
 8103b06:	4293      	cmp	r3, r2
 8103b08:	d012      	beq.n	8103b30 <HAL_DMA_Init+0x3e4>
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	681b      	ldr	r3, [r3, #0]
 8103b0e:	4a1e      	ldr	r2, [pc, #120]	; (8103b88 <HAL_DMA_Init+0x43c>)
 8103b10:	4293      	cmp	r3, r2
 8103b12:	d00d      	beq.n	8103b30 <HAL_DMA_Init+0x3e4>
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	681b      	ldr	r3, [r3, #0]
 8103b18:	4a1c      	ldr	r2, [pc, #112]	; (8103b8c <HAL_DMA_Init+0x440>)
 8103b1a:	4293      	cmp	r3, r2
 8103b1c:	d008      	beq.n	8103b30 <HAL_DMA_Init+0x3e4>
 8103b1e:	687b      	ldr	r3, [r7, #4]
 8103b20:	681b      	ldr	r3, [r3, #0]
 8103b22:	4a1b      	ldr	r2, [pc, #108]	; (8103b90 <HAL_DMA_Init+0x444>)
 8103b24:	4293      	cmp	r3, r2
 8103b26:	d003      	beq.n	8103b30 <HAL_DMA_Init+0x3e4>
 8103b28:	687b      	ldr	r3, [r7, #4]
 8103b2a:	681b      	ldr	r3, [r3, #0]
 8103b2c:	4a19      	ldr	r2, [pc, #100]	; (8103b94 <HAL_DMA_Init+0x448>)
 8103b2e:	4293      	cmp	r3, r2
 8103b30:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	2200      	movs	r2, #0
 8103b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	2202      	movs	r2, #2
 8103b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	681b      	ldr	r3, [r3, #0]
 8103b48:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103b4a:	697b      	ldr	r3, [r7, #20]
 8103b4c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8103b50:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8103b54:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	689b      	ldr	r3, [r3, #8]
 8103b5a:	2b40      	cmp	r3, #64	; 0x40
 8103b5c:	d01c      	beq.n	8103b98 <HAL_DMA_Init+0x44c>
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	689b      	ldr	r3, [r3, #8]
 8103b62:	2b80      	cmp	r3, #128	; 0x80
 8103b64:	d102      	bne.n	8103b6c <HAL_DMA_Init+0x420>
 8103b66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103b6a:	e016      	b.n	8103b9a <HAL_DMA_Init+0x44e>
 8103b6c:	2300      	movs	r3, #0
 8103b6e:	e014      	b.n	8103b9a <HAL_DMA_Init+0x44e>
 8103b70:	fe10803f 	.word	0xfe10803f
 8103b74:	5c001000 	.word	0x5c001000
 8103b78:	58025408 	.word	0x58025408
 8103b7c:	5802541c 	.word	0x5802541c
 8103b80:	58025430 	.word	0x58025430
 8103b84:	58025444 	.word	0x58025444
 8103b88:	58025458 	.word	0x58025458
 8103b8c:	5802546c 	.word	0x5802546c
 8103b90:	58025480 	.word	0x58025480
 8103b94:	58025494 	.word	0x58025494
 8103b98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103b9a:	687a      	ldr	r2, [r7, #4]
 8103b9c:	68d2      	ldr	r2, [r2, #12]
 8103b9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	691b      	ldr	r3, [r3, #16]
 8103ba6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8103ba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103baa:	687b      	ldr	r3, [r7, #4]
 8103bac:	695b      	ldr	r3, [r3, #20]
 8103bae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8103bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103bb2:	687b      	ldr	r3, [r7, #4]
 8103bb4:	699b      	ldr	r3, [r3, #24]
 8103bb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8103bb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	69db      	ldr	r3, [r3, #28]
 8103bbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8103bc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8103bc2:	687b      	ldr	r3, [r7, #4]
 8103bc4:	6a1b      	ldr	r3, [r3, #32]
 8103bc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8103bc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103bca:	697a      	ldr	r2, [r7, #20]
 8103bcc:	4313      	orrs	r3, r2
 8103bce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	681b      	ldr	r3, [r3, #0]
 8103bd4:	697a      	ldr	r2, [r7, #20]
 8103bd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	681b      	ldr	r3, [r3, #0]
 8103bdc:	461a      	mov	r2, r3
 8103bde:	4b6e      	ldr	r3, [pc, #440]	; (8103d98 <HAL_DMA_Init+0x64c>)
 8103be0:	4413      	add	r3, r2
 8103be2:	4a6e      	ldr	r2, [pc, #440]	; (8103d9c <HAL_DMA_Init+0x650>)
 8103be4:	fba2 2303 	umull	r2, r3, r2, r3
 8103be8:	091b      	lsrs	r3, r3, #4
 8103bea:	009a      	lsls	r2, r3, #2
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103bf0:	6878      	ldr	r0, [r7, #4]
 8103bf2:	f002 f9c3 	bl	8105f7c <DMA_CalcBaseAndBitshift>
 8103bf6:	4603      	mov	r3, r0
 8103bf8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bfe:	f003 031f 	and.w	r3, r3, #31
 8103c02:	2201      	movs	r2, #1
 8103c04:	409a      	lsls	r2, r3
 8103c06:	68fb      	ldr	r3, [r7, #12]
 8103c08:	605a      	str	r2, [r3, #4]
 8103c0a:	e008      	b.n	8103c1e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	2240      	movs	r2, #64	; 0x40
 8103c10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	2203      	movs	r2, #3
 8103c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8103c1a:	2301      	movs	r3, #1
 8103c1c:	e0b7      	b.n	8103d8e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	4a5f      	ldr	r2, [pc, #380]	; (8103da0 <HAL_DMA_Init+0x654>)
 8103c24:	4293      	cmp	r3, r2
 8103c26:	d072      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	4a5d      	ldr	r2, [pc, #372]	; (8103da4 <HAL_DMA_Init+0x658>)
 8103c2e:	4293      	cmp	r3, r2
 8103c30:	d06d      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	681b      	ldr	r3, [r3, #0]
 8103c36:	4a5c      	ldr	r2, [pc, #368]	; (8103da8 <HAL_DMA_Init+0x65c>)
 8103c38:	4293      	cmp	r3, r2
 8103c3a:	d068      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	681b      	ldr	r3, [r3, #0]
 8103c40:	4a5a      	ldr	r2, [pc, #360]	; (8103dac <HAL_DMA_Init+0x660>)
 8103c42:	4293      	cmp	r3, r2
 8103c44:	d063      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	681b      	ldr	r3, [r3, #0]
 8103c4a:	4a59      	ldr	r2, [pc, #356]	; (8103db0 <HAL_DMA_Init+0x664>)
 8103c4c:	4293      	cmp	r3, r2
 8103c4e:	d05e      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	681b      	ldr	r3, [r3, #0]
 8103c54:	4a57      	ldr	r2, [pc, #348]	; (8103db4 <HAL_DMA_Init+0x668>)
 8103c56:	4293      	cmp	r3, r2
 8103c58:	d059      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	4a56      	ldr	r2, [pc, #344]	; (8103db8 <HAL_DMA_Init+0x66c>)
 8103c60:	4293      	cmp	r3, r2
 8103c62:	d054      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	4a54      	ldr	r2, [pc, #336]	; (8103dbc <HAL_DMA_Init+0x670>)
 8103c6a:	4293      	cmp	r3, r2
 8103c6c:	d04f      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	681b      	ldr	r3, [r3, #0]
 8103c72:	4a53      	ldr	r2, [pc, #332]	; (8103dc0 <HAL_DMA_Init+0x674>)
 8103c74:	4293      	cmp	r3, r2
 8103c76:	d04a      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	681b      	ldr	r3, [r3, #0]
 8103c7c:	4a51      	ldr	r2, [pc, #324]	; (8103dc4 <HAL_DMA_Init+0x678>)
 8103c7e:	4293      	cmp	r3, r2
 8103c80:	d045      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	4a50      	ldr	r2, [pc, #320]	; (8103dc8 <HAL_DMA_Init+0x67c>)
 8103c88:	4293      	cmp	r3, r2
 8103c8a:	d040      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	4a4e      	ldr	r2, [pc, #312]	; (8103dcc <HAL_DMA_Init+0x680>)
 8103c92:	4293      	cmp	r3, r2
 8103c94:	d03b      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	681b      	ldr	r3, [r3, #0]
 8103c9a:	4a4d      	ldr	r2, [pc, #308]	; (8103dd0 <HAL_DMA_Init+0x684>)
 8103c9c:	4293      	cmp	r3, r2
 8103c9e:	d036      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	4a4b      	ldr	r2, [pc, #300]	; (8103dd4 <HAL_DMA_Init+0x688>)
 8103ca6:	4293      	cmp	r3, r2
 8103ca8:	d031      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	4a4a      	ldr	r2, [pc, #296]	; (8103dd8 <HAL_DMA_Init+0x68c>)
 8103cb0:	4293      	cmp	r3, r2
 8103cb2:	d02c      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	681b      	ldr	r3, [r3, #0]
 8103cb8:	4a48      	ldr	r2, [pc, #288]	; (8103ddc <HAL_DMA_Init+0x690>)
 8103cba:	4293      	cmp	r3, r2
 8103cbc:	d027      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	4a47      	ldr	r2, [pc, #284]	; (8103de0 <HAL_DMA_Init+0x694>)
 8103cc4:	4293      	cmp	r3, r2
 8103cc6:	d022      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	681b      	ldr	r3, [r3, #0]
 8103ccc:	4a45      	ldr	r2, [pc, #276]	; (8103de4 <HAL_DMA_Init+0x698>)
 8103cce:	4293      	cmp	r3, r2
 8103cd0:	d01d      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	4a44      	ldr	r2, [pc, #272]	; (8103de8 <HAL_DMA_Init+0x69c>)
 8103cd8:	4293      	cmp	r3, r2
 8103cda:	d018      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	4a42      	ldr	r2, [pc, #264]	; (8103dec <HAL_DMA_Init+0x6a0>)
 8103ce2:	4293      	cmp	r3, r2
 8103ce4:	d013      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	4a41      	ldr	r2, [pc, #260]	; (8103df0 <HAL_DMA_Init+0x6a4>)
 8103cec:	4293      	cmp	r3, r2
 8103cee:	d00e      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	681b      	ldr	r3, [r3, #0]
 8103cf4:	4a3f      	ldr	r2, [pc, #252]	; (8103df4 <HAL_DMA_Init+0x6a8>)
 8103cf6:	4293      	cmp	r3, r2
 8103cf8:	d009      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	4a3e      	ldr	r2, [pc, #248]	; (8103df8 <HAL_DMA_Init+0x6ac>)
 8103d00:	4293      	cmp	r3, r2
 8103d02:	d004      	beq.n	8103d0e <HAL_DMA_Init+0x5c2>
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	4a3c      	ldr	r2, [pc, #240]	; (8103dfc <HAL_DMA_Init+0x6b0>)
 8103d0a:	4293      	cmp	r3, r2
 8103d0c:	d101      	bne.n	8103d12 <HAL_DMA_Init+0x5c6>
 8103d0e:	2301      	movs	r3, #1
 8103d10:	e000      	b.n	8103d14 <HAL_DMA_Init+0x5c8>
 8103d12:	2300      	movs	r3, #0
 8103d14:	2b00      	cmp	r3, #0
 8103d16:	d032      	beq.n	8103d7e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103d18:	6878      	ldr	r0, [r7, #4]
 8103d1a:	f002 fa5d 	bl	81061d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	689b      	ldr	r3, [r3, #8]
 8103d22:	2b80      	cmp	r3, #128	; 0x80
 8103d24:	d102      	bne.n	8103d2c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8103d26:	687b      	ldr	r3, [r7, #4]
 8103d28:	2200      	movs	r2, #0
 8103d2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	685a      	ldr	r2, [r3, #4]
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103d34:	b2d2      	uxtb	r2, r2
 8103d36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103d3c:	687a      	ldr	r2, [r7, #4]
 8103d3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103d40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	685b      	ldr	r3, [r3, #4]
 8103d46:	2b00      	cmp	r3, #0
 8103d48:	d010      	beq.n	8103d6c <HAL_DMA_Init+0x620>
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	685b      	ldr	r3, [r3, #4]
 8103d4e:	2b08      	cmp	r3, #8
 8103d50:	d80c      	bhi.n	8103d6c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8103d52:	6878      	ldr	r0, [r7, #4]
 8103d54:	f002 fada 	bl	810630c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103d5c:	2200      	movs	r2, #0
 8103d5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103d64:	687a      	ldr	r2, [r7, #4]
 8103d66:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8103d68:	605a      	str	r2, [r3, #4]
 8103d6a:	e008      	b.n	8103d7e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	2200      	movs	r2, #0
 8103d70:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	2200      	movs	r2, #0
 8103d76:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	2200      	movs	r2, #0
 8103d7c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	2200      	movs	r2, #0
 8103d82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	2201      	movs	r2, #1
 8103d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8103d8c:	2300      	movs	r3, #0
}
 8103d8e:	4618      	mov	r0, r3
 8103d90:	3718      	adds	r7, #24
 8103d92:	46bd      	mov	sp, r7
 8103d94:	bd80      	pop	{r7, pc}
 8103d96:	bf00      	nop
 8103d98:	a7fdabf8 	.word	0xa7fdabf8
 8103d9c:	cccccccd 	.word	0xcccccccd
 8103da0:	40020010 	.word	0x40020010
 8103da4:	40020028 	.word	0x40020028
 8103da8:	40020040 	.word	0x40020040
 8103dac:	40020058 	.word	0x40020058
 8103db0:	40020070 	.word	0x40020070
 8103db4:	40020088 	.word	0x40020088
 8103db8:	400200a0 	.word	0x400200a0
 8103dbc:	400200b8 	.word	0x400200b8
 8103dc0:	40020410 	.word	0x40020410
 8103dc4:	40020428 	.word	0x40020428
 8103dc8:	40020440 	.word	0x40020440
 8103dcc:	40020458 	.word	0x40020458
 8103dd0:	40020470 	.word	0x40020470
 8103dd4:	40020488 	.word	0x40020488
 8103dd8:	400204a0 	.word	0x400204a0
 8103ddc:	400204b8 	.word	0x400204b8
 8103de0:	58025408 	.word	0x58025408
 8103de4:	5802541c 	.word	0x5802541c
 8103de8:	58025430 	.word	0x58025430
 8103dec:	58025444 	.word	0x58025444
 8103df0:	58025458 	.word	0x58025458
 8103df4:	5802546c 	.word	0x5802546c
 8103df8:	58025480 	.word	0x58025480
 8103dfc:	58025494 	.word	0x58025494

08103e00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103e00:	b580      	push	{r7, lr}
 8103e02:	b086      	sub	sp, #24
 8103e04:	af00      	add	r7, sp, #0
 8103e06:	60f8      	str	r0, [r7, #12]
 8103e08:	60b9      	str	r1, [r7, #8]
 8103e0a:	607a      	str	r2, [r7, #4]
 8103e0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8103e0e:	2300      	movs	r3, #0
 8103e10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	2b00      	cmp	r3, #0
 8103e16:	d101      	bne.n	8103e1c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8103e18:	2301      	movs	r3, #1
 8103e1a:	e226      	b.n	810426a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8103e1c:	68fb      	ldr	r3, [r7, #12]
 8103e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8103e22:	2b01      	cmp	r3, #1
 8103e24:	d101      	bne.n	8103e2a <HAL_DMA_Start_IT+0x2a>
 8103e26:	2302      	movs	r3, #2
 8103e28:	e21f      	b.n	810426a <HAL_DMA_Start_IT+0x46a>
 8103e2a:	68fb      	ldr	r3, [r7, #12]
 8103e2c:	2201      	movs	r2, #1
 8103e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8103e32:	68fb      	ldr	r3, [r7, #12]
 8103e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103e38:	b2db      	uxtb	r3, r3
 8103e3a:	2b01      	cmp	r3, #1
 8103e3c:	f040 820a 	bne.w	8104254 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103e40:	68fb      	ldr	r3, [r7, #12]
 8103e42:	2202      	movs	r2, #2
 8103e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103e48:	68fb      	ldr	r3, [r7, #12]
 8103e4a:	2200      	movs	r2, #0
 8103e4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103e4e:	68fb      	ldr	r3, [r7, #12]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	4a68      	ldr	r2, [pc, #416]	; (8103ff4 <HAL_DMA_Start_IT+0x1f4>)
 8103e54:	4293      	cmp	r3, r2
 8103e56:	d04a      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103e58:	68fb      	ldr	r3, [r7, #12]
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	4a66      	ldr	r2, [pc, #408]	; (8103ff8 <HAL_DMA_Start_IT+0x1f8>)
 8103e5e:	4293      	cmp	r3, r2
 8103e60:	d045      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103e62:	68fb      	ldr	r3, [r7, #12]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	4a65      	ldr	r2, [pc, #404]	; (8103ffc <HAL_DMA_Start_IT+0x1fc>)
 8103e68:	4293      	cmp	r3, r2
 8103e6a:	d040      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103e6c:	68fb      	ldr	r3, [r7, #12]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	4a63      	ldr	r2, [pc, #396]	; (8104000 <HAL_DMA_Start_IT+0x200>)
 8103e72:	4293      	cmp	r3, r2
 8103e74:	d03b      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103e76:	68fb      	ldr	r3, [r7, #12]
 8103e78:	681b      	ldr	r3, [r3, #0]
 8103e7a:	4a62      	ldr	r2, [pc, #392]	; (8104004 <HAL_DMA_Start_IT+0x204>)
 8103e7c:	4293      	cmp	r3, r2
 8103e7e:	d036      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103e80:	68fb      	ldr	r3, [r7, #12]
 8103e82:	681b      	ldr	r3, [r3, #0]
 8103e84:	4a60      	ldr	r2, [pc, #384]	; (8104008 <HAL_DMA_Start_IT+0x208>)
 8103e86:	4293      	cmp	r3, r2
 8103e88:	d031      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103e8a:	68fb      	ldr	r3, [r7, #12]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	4a5f      	ldr	r2, [pc, #380]	; (810400c <HAL_DMA_Start_IT+0x20c>)
 8103e90:	4293      	cmp	r3, r2
 8103e92:	d02c      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103e94:	68fb      	ldr	r3, [r7, #12]
 8103e96:	681b      	ldr	r3, [r3, #0]
 8103e98:	4a5d      	ldr	r2, [pc, #372]	; (8104010 <HAL_DMA_Start_IT+0x210>)
 8103e9a:	4293      	cmp	r3, r2
 8103e9c:	d027      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103e9e:	68fb      	ldr	r3, [r7, #12]
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	4a5c      	ldr	r2, [pc, #368]	; (8104014 <HAL_DMA_Start_IT+0x214>)
 8103ea4:	4293      	cmp	r3, r2
 8103ea6:	d022      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103ea8:	68fb      	ldr	r3, [r7, #12]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	4a5a      	ldr	r2, [pc, #360]	; (8104018 <HAL_DMA_Start_IT+0x218>)
 8103eae:	4293      	cmp	r3, r2
 8103eb0:	d01d      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103eb2:	68fb      	ldr	r3, [r7, #12]
 8103eb4:	681b      	ldr	r3, [r3, #0]
 8103eb6:	4a59      	ldr	r2, [pc, #356]	; (810401c <HAL_DMA_Start_IT+0x21c>)
 8103eb8:	4293      	cmp	r3, r2
 8103eba:	d018      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103ebc:	68fb      	ldr	r3, [r7, #12]
 8103ebe:	681b      	ldr	r3, [r3, #0]
 8103ec0:	4a57      	ldr	r2, [pc, #348]	; (8104020 <HAL_DMA_Start_IT+0x220>)
 8103ec2:	4293      	cmp	r3, r2
 8103ec4:	d013      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103ec6:	68fb      	ldr	r3, [r7, #12]
 8103ec8:	681b      	ldr	r3, [r3, #0]
 8103eca:	4a56      	ldr	r2, [pc, #344]	; (8104024 <HAL_DMA_Start_IT+0x224>)
 8103ecc:	4293      	cmp	r3, r2
 8103ece:	d00e      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	681b      	ldr	r3, [r3, #0]
 8103ed4:	4a54      	ldr	r2, [pc, #336]	; (8104028 <HAL_DMA_Start_IT+0x228>)
 8103ed6:	4293      	cmp	r3, r2
 8103ed8:	d009      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103eda:	68fb      	ldr	r3, [r7, #12]
 8103edc:	681b      	ldr	r3, [r3, #0]
 8103ede:	4a53      	ldr	r2, [pc, #332]	; (810402c <HAL_DMA_Start_IT+0x22c>)
 8103ee0:	4293      	cmp	r3, r2
 8103ee2:	d004      	beq.n	8103eee <HAL_DMA_Start_IT+0xee>
 8103ee4:	68fb      	ldr	r3, [r7, #12]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	4a51      	ldr	r2, [pc, #324]	; (8104030 <HAL_DMA_Start_IT+0x230>)
 8103eea:	4293      	cmp	r3, r2
 8103eec:	d108      	bne.n	8103f00 <HAL_DMA_Start_IT+0x100>
 8103eee:	68fb      	ldr	r3, [r7, #12]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	681a      	ldr	r2, [r3, #0]
 8103ef4:	68fb      	ldr	r3, [r7, #12]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	f022 0201 	bic.w	r2, r2, #1
 8103efc:	601a      	str	r2, [r3, #0]
 8103efe:	e007      	b.n	8103f10 <HAL_DMA_Start_IT+0x110>
 8103f00:	68fb      	ldr	r3, [r7, #12]
 8103f02:	681b      	ldr	r3, [r3, #0]
 8103f04:	681a      	ldr	r2, [r3, #0]
 8103f06:	68fb      	ldr	r3, [r7, #12]
 8103f08:	681b      	ldr	r3, [r3, #0]
 8103f0a:	f022 0201 	bic.w	r2, r2, #1
 8103f0e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8103f10:	683b      	ldr	r3, [r7, #0]
 8103f12:	687a      	ldr	r2, [r7, #4]
 8103f14:	68b9      	ldr	r1, [r7, #8]
 8103f16:	68f8      	ldr	r0, [r7, #12]
 8103f18:	f001 fe84 	bl	8105c24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103f1c:	68fb      	ldr	r3, [r7, #12]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	4a34      	ldr	r2, [pc, #208]	; (8103ff4 <HAL_DMA_Start_IT+0x1f4>)
 8103f22:	4293      	cmp	r3, r2
 8103f24:	d04a      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f26:	68fb      	ldr	r3, [r7, #12]
 8103f28:	681b      	ldr	r3, [r3, #0]
 8103f2a:	4a33      	ldr	r2, [pc, #204]	; (8103ff8 <HAL_DMA_Start_IT+0x1f8>)
 8103f2c:	4293      	cmp	r3, r2
 8103f2e:	d045      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f30:	68fb      	ldr	r3, [r7, #12]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	4a31      	ldr	r2, [pc, #196]	; (8103ffc <HAL_DMA_Start_IT+0x1fc>)
 8103f36:	4293      	cmp	r3, r2
 8103f38:	d040      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f3a:	68fb      	ldr	r3, [r7, #12]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	4a30      	ldr	r2, [pc, #192]	; (8104000 <HAL_DMA_Start_IT+0x200>)
 8103f40:	4293      	cmp	r3, r2
 8103f42:	d03b      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f44:	68fb      	ldr	r3, [r7, #12]
 8103f46:	681b      	ldr	r3, [r3, #0]
 8103f48:	4a2e      	ldr	r2, [pc, #184]	; (8104004 <HAL_DMA_Start_IT+0x204>)
 8103f4a:	4293      	cmp	r3, r2
 8103f4c:	d036      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f4e:	68fb      	ldr	r3, [r7, #12]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4a2d      	ldr	r2, [pc, #180]	; (8104008 <HAL_DMA_Start_IT+0x208>)
 8103f54:	4293      	cmp	r3, r2
 8103f56:	d031      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	4a2b      	ldr	r2, [pc, #172]	; (810400c <HAL_DMA_Start_IT+0x20c>)
 8103f5e:	4293      	cmp	r3, r2
 8103f60:	d02c      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f62:	68fb      	ldr	r3, [r7, #12]
 8103f64:	681b      	ldr	r3, [r3, #0]
 8103f66:	4a2a      	ldr	r2, [pc, #168]	; (8104010 <HAL_DMA_Start_IT+0x210>)
 8103f68:	4293      	cmp	r3, r2
 8103f6a:	d027      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f6c:	68fb      	ldr	r3, [r7, #12]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	4a28      	ldr	r2, [pc, #160]	; (8104014 <HAL_DMA_Start_IT+0x214>)
 8103f72:	4293      	cmp	r3, r2
 8103f74:	d022      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f76:	68fb      	ldr	r3, [r7, #12]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	4a27      	ldr	r2, [pc, #156]	; (8104018 <HAL_DMA_Start_IT+0x218>)
 8103f7c:	4293      	cmp	r3, r2
 8103f7e:	d01d      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f80:	68fb      	ldr	r3, [r7, #12]
 8103f82:	681b      	ldr	r3, [r3, #0]
 8103f84:	4a25      	ldr	r2, [pc, #148]	; (810401c <HAL_DMA_Start_IT+0x21c>)
 8103f86:	4293      	cmp	r3, r2
 8103f88:	d018      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f8a:	68fb      	ldr	r3, [r7, #12]
 8103f8c:	681b      	ldr	r3, [r3, #0]
 8103f8e:	4a24      	ldr	r2, [pc, #144]	; (8104020 <HAL_DMA_Start_IT+0x220>)
 8103f90:	4293      	cmp	r3, r2
 8103f92:	d013      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f94:	68fb      	ldr	r3, [r7, #12]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	4a22      	ldr	r2, [pc, #136]	; (8104024 <HAL_DMA_Start_IT+0x224>)
 8103f9a:	4293      	cmp	r3, r2
 8103f9c:	d00e      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103f9e:	68fb      	ldr	r3, [r7, #12]
 8103fa0:	681b      	ldr	r3, [r3, #0]
 8103fa2:	4a21      	ldr	r2, [pc, #132]	; (8104028 <HAL_DMA_Start_IT+0x228>)
 8103fa4:	4293      	cmp	r3, r2
 8103fa6:	d009      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103fa8:	68fb      	ldr	r3, [r7, #12]
 8103faa:	681b      	ldr	r3, [r3, #0]
 8103fac:	4a1f      	ldr	r2, [pc, #124]	; (810402c <HAL_DMA_Start_IT+0x22c>)
 8103fae:	4293      	cmp	r3, r2
 8103fb0:	d004      	beq.n	8103fbc <HAL_DMA_Start_IT+0x1bc>
 8103fb2:	68fb      	ldr	r3, [r7, #12]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	4a1e      	ldr	r2, [pc, #120]	; (8104030 <HAL_DMA_Start_IT+0x230>)
 8103fb8:	4293      	cmp	r3, r2
 8103fba:	d101      	bne.n	8103fc0 <HAL_DMA_Start_IT+0x1c0>
 8103fbc:	2301      	movs	r3, #1
 8103fbe:	e000      	b.n	8103fc2 <HAL_DMA_Start_IT+0x1c2>
 8103fc0:	2300      	movs	r3, #0
 8103fc2:	2b00      	cmp	r3, #0
 8103fc4:	d036      	beq.n	8104034 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	681b      	ldr	r3, [r3, #0]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	f023 021e 	bic.w	r2, r3, #30
 8103fd0:	68fb      	ldr	r3, [r7, #12]
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	f042 0216 	orr.w	r2, r2, #22
 8103fd8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8103fda:	68fb      	ldr	r3, [r7, #12]
 8103fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fde:	2b00      	cmp	r3, #0
 8103fe0:	d03e      	beq.n	8104060 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103fe2:	68fb      	ldr	r3, [r7, #12]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	681a      	ldr	r2, [r3, #0]
 8103fe8:	68fb      	ldr	r3, [r7, #12]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	f042 0208 	orr.w	r2, r2, #8
 8103ff0:	601a      	str	r2, [r3, #0]
 8103ff2:	e035      	b.n	8104060 <HAL_DMA_Start_IT+0x260>
 8103ff4:	40020010 	.word	0x40020010
 8103ff8:	40020028 	.word	0x40020028
 8103ffc:	40020040 	.word	0x40020040
 8104000:	40020058 	.word	0x40020058
 8104004:	40020070 	.word	0x40020070
 8104008:	40020088 	.word	0x40020088
 810400c:	400200a0 	.word	0x400200a0
 8104010:	400200b8 	.word	0x400200b8
 8104014:	40020410 	.word	0x40020410
 8104018:	40020428 	.word	0x40020428
 810401c:	40020440 	.word	0x40020440
 8104020:	40020458 	.word	0x40020458
 8104024:	40020470 	.word	0x40020470
 8104028:	40020488 	.word	0x40020488
 810402c:	400204a0 	.word	0x400204a0
 8104030:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8104034:	68fb      	ldr	r3, [r7, #12]
 8104036:	681b      	ldr	r3, [r3, #0]
 8104038:	681b      	ldr	r3, [r3, #0]
 810403a:	f023 020e 	bic.w	r2, r3, #14
 810403e:	68fb      	ldr	r3, [r7, #12]
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	f042 020a 	orr.w	r2, r2, #10
 8104046:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8104048:	68fb      	ldr	r3, [r7, #12]
 810404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810404c:	2b00      	cmp	r3, #0
 810404e:	d007      	beq.n	8104060 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8104050:	68fb      	ldr	r3, [r7, #12]
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	681a      	ldr	r2, [r3, #0]
 8104056:	68fb      	ldr	r3, [r7, #12]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	f042 0204 	orr.w	r2, r2, #4
 810405e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104060:	68fb      	ldr	r3, [r7, #12]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	4a83      	ldr	r2, [pc, #524]	; (8104274 <HAL_DMA_Start_IT+0x474>)
 8104066:	4293      	cmp	r3, r2
 8104068:	d072      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 810406a:	68fb      	ldr	r3, [r7, #12]
 810406c:	681b      	ldr	r3, [r3, #0]
 810406e:	4a82      	ldr	r2, [pc, #520]	; (8104278 <HAL_DMA_Start_IT+0x478>)
 8104070:	4293      	cmp	r3, r2
 8104072:	d06d      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 8104074:	68fb      	ldr	r3, [r7, #12]
 8104076:	681b      	ldr	r3, [r3, #0]
 8104078:	4a80      	ldr	r2, [pc, #512]	; (810427c <HAL_DMA_Start_IT+0x47c>)
 810407a:	4293      	cmp	r3, r2
 810407c:	d068      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 810407e:	68fb      	ldr	r3, [r7, #12]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	4a7f      	ldr	r2, [pc, #508]	; (8104280 <HAL_DMA_Start_IT+0x480>)
 8104084:	4293      	cmp	r3, r2
 8104086:	d063      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 8104088:	68fb      	ldr	r3, [r7, #12]
 810408a:	681b      	ldr	r3, [r3, #0]
 810408c:	4a7d      	ldr	r2, [pc, #500]	; (8104284 <HAL_DMA_Start_IT+0x484>)
 810408e:	4293      	cmp	r3, r2
 8104090:	d05e      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 8104092:	68fb      	ldr	r3, [r7, #12]
 8104094:	681b      	ldr	r3, [r3, #0]
 8104096:	4a7c      	ldr	r2, [pc, #496]	; (8104288 <HAL_DMA_Start_IT+0x488>)
 8104098:	4293      	cmp	r3, r2
 810409a:	d059      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 810409c:	68fb      	ldr	r3, [r7, #12]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	4a7a      	ldr	r2, [pc, #488]	; (810428c <HAL_DMA_Start_IT+0x48c>)
 81040a2:	4293      	cmp	r3, r2
 81040a4:	d054      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 81040a6:	68fb      	ldr	r3, [r7, #12]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	4a79      	ldr	r2, [pc, #484]	; (8104290 <HAL_DMA_Start_IT+0x490>)
 81040ac:	4293      	cmp	r3, r2
 81040ae:	d04f      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 81040b0:	68fb      	ldr	r3, [r7, #12]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	4a77      	ldr	r2, [pc, #476]	; (8104294 <HAL_DMA_Start_IT+0x494>)
 81040b6:	4293      	cmp	r3, r2
 81040b8:	d04a      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 81040ba:	68fb      	ldr	r3, [r7, #12]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	4a76      	ldr	r2, [pc, #472]	; (8104298 <HAL_DMA_Start_IT+0x498>)
 81040c0:	4293      	cmp	r3, r2
 81040c2:	d045      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 81040c4:	68fb      	ldr	r3, [r7, #12]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	4a74      	ldr	r2, [pc, #464]	; (810429c <HAL_DMA_Start_IT+0x49c>)
 81040ca:	4293      	cmp	r3, r2
 81040cc:	d040      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	4a73      	ldr	r2, [pc, #460]	; (81042a0 <HAL_DMA_Start_IT+0x4a0>)
 81040d4:	4293      	cmp	r3, r2
 81040d6:	d03b      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 81040d8:	68fb      	ldr	r3, [r7, #12]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	4a71      	ldr	r2, [pc, #452]	; (81042a4 <HAL_DMA_Start_IT+0x4a4>)
 81040de:	4293      	cmp	r3, r2
 81040e0:	d036      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 81040e2:	68fb      	ldr	r3, [r7, #12]
 81040e4:	681b      	ldr	r3, [r3, #0]
 81040e6:	4a70      	ldr	r2, [pc, #448]	; (81042a8 <HAL_DMA_Start_IT+0x4a8>)
 81040e8:	4293      	cmp	r3, r2
 81040ea:	d031      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 81040ec:	68fb      	ldr	r3, [r7, #12]
 81040ee:	681b      	ldr	r3, [r3, #0]
 81040f0:	4a6e      	ldr	r2, [pc, #440]	; (81042ac <HAL_DMA_Start_IT+0x4ac>)
 81040f2:	4293      	cmp	r3, r2
 81040f4:	d02c      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a6d      	ldr	r2, [pc, #436]	; (81042b0 <HAL_DMA_Start_IT+0x4b0>)
 81040fc:	4293      	cmp	r3, r2
 81040fe:	d027      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	4a6b      	ldr	r2, [pc, #428]	; (81042b4 <HAL_DMA_Start_IT+0x4b4>)
 8104106:	4293      	cmp	r3, r2
 8104108:	d022      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 810410a:	68fb      	ldr	r3, [r7, #12]
 810410c:	681b      	ldr	r3, [r3, #0]
 810410e:	4a6a      	ldr	r2, [pc, #424]	; (81042b8 <HAL_DMA_Start_IT+0x4b8>)
 8104110:	4293      	cmp	r3, r2
 8104112:	d01d      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 8104114:	68fb      	ldr	r3, [r7, #12]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	4a68      	ldr	r2, [pc, #416]	; (81042bc <HAL_DMA_Start_IT+0x4bc>)
 810411a:	4293      	cmp	r3, r2
 810411c:	d018      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 810411e:	68fb      	ldr	r3, [r7, #12]
 8104120:	681b      	ldr	r3, [r3, #0]
 8104122:	4a67      	ldr	r2, [pc, #412]	; (81042c0 <HAL_DMA_Start_IT+0x4c0>)
 8104124:	4293      	cmp	r3, r2
 8104126:	d013      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 8104128:	68fb      	ldr	r3, [r7, #12]
 810412a:	681b      	ldr	r3, [r3, #0]
 810412c:	4a65      	ldr	r2, [pc, #404]	; (81042c4 <HAL_DMA_Start_IT+0x4c4>)
 810412e:	4293      	cmp	r3, r2
 8104130:	d00e      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 8104132:	68fb      	ldr	r3, [r7, #12]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	4a64      	ldr	r2, [pc, #400]	; (81042c8 <HAL_DMA_Start_IT+0x4c8>)
 8104138:	4293      	cmp	r3, r2
 810413a:	d009      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	4a62      	ldr	r2, [pc, #392]	; (81042cc <HAL_DMA_Start_IT+0x4cc>)
 8104142:	4293      	cmp	r3, r2
 8104144:	d004      	beq.n	8104150 <HAL_DMA_Start_IT+0x350>
 8104146:	68fb      	ldr	r3, [r7, #12]
 8104148:	681b      	ldr	r3, [r3, #0]
 810414a:	4a61      	ldr	r2, [pc, #388]	; (81042d0 <HAL_DMA_Start_IT+0x4d0>)
 810414c:	4293      	cmp	r3, r2
 810414e:	d101      	bne.n	8104154 <HAL_DMA_Start_IT+0x354>
 8104150:	2301      	movs	r3, #1
 8104152:	e000      	b.n	8104156 <HAL_DMA_Start_IT+0x356>
 8104154:	2300      	movs	r3, #0
 8104156:	2b00      	cmp	r3, #0
 8104158:	d01a      	beq.n	8104190 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 810415a:	68fb      	ldr	r3, [r7, #12]
 810415c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810415e:	681b      	ldr	r3, [r3, #0]
 8104160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104164:	2b00      	cmp	r3, #0
 8104166:	d007      	beq.n	8104178 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8104168:	68fb      	ldr	r3, [r7, #12]
 810416a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810416c:	681a      	ldr	r2, [r3, #0]
 810416e:	68fb      	ldr	r3, [r7, #12]
 8104170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104176:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8104178:	68fb      	ldr	r3, [r7, #12]
 810417a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810417c:	2b00      	cmp	r3, #0
 810417e:	d007      	beq.n	8104190 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8104180:	68fb      	ldr	r3, [r7, #12]
 8104182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104184:	681a      	ldr	r2, [r3, #0]
 8104186:	68fb      	ldr	r3, [r7, #12]
 8104188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810418a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810418e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	4a37      	ldr	r2, [pc, #220]	; (8104274 <HAL_DMA_Start_IT+0x474>)
 8104196:	4293      	cmp	r3, r2
 8104198:	d04a      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	681b      	ldr	r3, [r3, #0]
 810419e:	4a36      	ldr	r2, [pc, #216]	; (8104278 <HAL_DMA_Start_IT+0x478>)
 81041a0:	4293      	cmp	r3, r2
 81041a2:	d045      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041a4:	68fb      	ldr	r3, [r7, #12]
 81041a6:	681b      	ldr	r3, [r3, #0]
 81041a8:	4a34      	ldr	r2, [pc, #208]	; (810427c <HAL_DMA_Start_IT+0x47c>)
 81041aa:	4293      	cmp	r3, r2
 81041ac:	d040      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	4a33      	ldr	r2, [pc, #204]	; (8104280 <HAL_DMA_Start_IT+0x480>)
 81041b4:	4293      	cmp	r3, r2
 81041b6:	d03b      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041b8:	68fb      	ldr	r3, [r7, #12]
 81041ba:	681b      	ldr	r3, [r3, #0]
 81041bc:	4a31      	ldr	r2, [pc, #196]	; (8104284 <HAL_DMA_Start_IT+0x484>)
 81041be:	4293      	cmp	r3, r2
 81041c0:	d036      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041c2:	68fb      	ldr	r3, [r7, #12]
 81041c4:	681b      	ldr	r3, [r3, #0]
 81041c6:	4a30      	ldr	r2, [pc, #192]	; (8104288 <HAL_DMA_Start_IT+0x488>)
 81041c8:	4293      	cmp	r3, r2
 81041ca:	d031      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041cc:	68fb      	ldr	r3, [r7, #12]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	4a2e      	ldr	r2, [pc, #184]	; (810428c <HAL_DMA_Start_IT+0x48c>)
 81041d2:	4293      	cmp	r3, r2
 81041d4:	d02c      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041d6:	68fb      	ldr	r3, [r7, #12]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	4a2d      	ldr	r2, [pc, #180]	; (8104290 <HAL_DMA_Start_IT+0x490>)
 81041dc:	4293      	cmp	r3, r2
 81041de:	d027      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041e0:	68fb      	ldr	r3, [r7, #12]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	4a2b      	ldr	r2, [pc, #172]	; (8104294 <HAL_DMA_Start_IT+0x494>)
 81041e6:	4293      	cmp	r3, r2
 81041e8:	d022      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	4a2a      	ldr	r2, [pc, #168]	; (8104298 <HAL_DMA_Start_IT+0x498>)
 81041f0:	4293      	cmp	r3, r2
 81041f2:	d01d      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041f4:	68fb      	ldr	r3, [r7, #12]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	4a28      	ldr	r2, [pc, #160]	; (810429c <HAL_DMA_Start_IT+0x49c>)
 81041fa:	4293      	cmp	r3, r2
 81041fc:	d018      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 81041fe:	68fb      	ldr	r3, [r7, #12]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	4a27      	ldr	r2, [pc, #156]	; (81042a0 <HAL_DMA_Start_IT+0x4a0>)
 8104204:	4293      	cmp	r3, r2
 8104206:	d013      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 8104208:	68fb      	ldr	r3, [r7, #12]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	4a25      	ldr	r2, [pc, #148]	; (81042a4 <HAL_DMA_Start_IT+0x4a4>)
 810420e:	4293      	cmp	r3, r2
 8104210:	d00e      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 8104212:	68fb      	ldr	r3, [r7, #12]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	4a24      	ldr	r2, [pc, #144]	; (81042a8 <HAL_DMA_Start_IT+0x4a8>)
 8104218:	4293      	cmp	r3, r2
 810421a:	d009      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 810421c:	68fb      	ldr	r3, [r7, #12]
 810421e:	681b      	ldr	r3, [r3, #0]
 8104220:	4a22      	ldr	r2, [pc, #136]	; (81042ac <HAL_DMA_Start_IT+0x4ac>)
 8104222:	4293      	cmp	r3, r2
 8104224:	d004      	beq.n	8104230 <HAL_DMA_Start_IT+0x430>
 8104226:	68fb      	ldr	r3, [r7, #12]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	4a21      	ldr	r2, [pc, #132]	; (81042b0 <HAL_DMA_Start_IT+0x4b0>)
 810422c:	4293      	cmp	r3, r2
 810422e:	d108      	bne.n	8104242 <HAL_DMA_Start_IT+0x442>
 8104230:	68fb      	ldr	r3, [r7, #12]
 8104232:	681b      	ldr	r3, [r3, #0]
 8104234:	681a      	ldr	r2, [r3, #0]
 8104236:	68fb      	ldr	r3, [r7, #12]
 8104238:	681b      	ldr	r3, [r3, #0]
 810423a:	f042 0201 	orr.w	r2, r2, #1
 810423e:	601a      	str	r2, [r3, #0]
 8104240:	e012      	b.n	8104268 <HAL_DMA_Start_IT+0x468>
 8104242:	68fb      	ldr	r3, [r7, #12]
 8104244:	681b      	ldr	r3, [r3, #0]
 8104246:	681a      	ldr	r2, [r3, #0]
 8104248:	68fb      	ldr	r3, [r7, #12]
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	f042 0201 	orr.w	r2, r2, #1
 8104250:	601a      	str	r2, [r3, #0]
 8104252:	e009      	b.n	8104268 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8104254:	68fb      	ldr	r3, [r7, #12]
 8104256:	2200      	movs	r2, #0
 8104258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 810425c:	68fb      	ldr	r3, [r7, #12]
 810425e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104262:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8104264:	2301      	movs	r3, #1
 8104266:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8104268:	7dfb      	ldrb	r3, [r7, #23]
}
 810426a:	4618      	mov	r0, r3
 810426c:	3718      	adds	r7, #24
 810426e:	46bd      	mov	sp, r7
 8104270:	bd80      	pop	{r7, pc}
 8104272:	bf00      	nop
 8104274:	40020010 	.word	0x40020010
 8104278:	40020028 	.word	0x40020028
 810427c:	40020040 	.word	0x40020040
 8104280:	40020058 	.word	0x40020058
 8104284:	40020070 	.word	0x40020070
 8104288:	40020088 	.word	0x40020088
 810428c:	400200a0 	.word	0x400200a0
 8104290:	400200b8 	.word	0x400200b8
 8104294:	40020410 	.word	0x40020410
 8104298:	40020428 	.word	0x40020428
 810429c:	40020440 	.word	0x40020440
 81042a0:	40020458 	.word	0x40020458
 81042a4:	40020470 	.word	0x40020470
 81042a8:	40020488 	.word	0x40020488
 81042ac:	400204a0 	.word	0x400204a0
 81042b0:	400204b8 	.word	0x400204b8
 81042b4:	58025408 	.word	0x58025408
 81042b8:	5802541c 	.word	0x5802541c
 81042bc:	58025430 	.word	0x58025430
 81042c0:	58025444 	.word	0x58025444
 81042c4:	58025458 	.word	0x58025458
 81042c8:	5802546c 	.word	0x5802546c
 81042cc:	58025480 	.word	0x58025480
 81042d0:	58025494 	.word	0x58025494

081042d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81042d4:	b580      	push	{r7, lr}
 81042d6:	b086      	sub	sp, #24
 81042d8:	af00      	add	r7, sp, #0
 81042da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81042dc:	f7fe fdf0 	bl	8102ec0 <HAL_GetTick>
 81042e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	2b00      	cmp	r3, #0
 81042e6:	d101      	bne.n	81042ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81042e8:	2301      	movs	r3, #1
 81042ea:	e2dc      	b.n	81048a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81042f2:	b2db      	uxtb	r3, r3
 81042f4:	2b02      	cmp	r3, #2
 81042f6:	d008      	beq.n	810430a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	2280      	movs	r2, #128	; 0x80
 81042fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	2200      	movs	r2, #0
 8104302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8104306:	2301      	movs	r3, #1
 8104308:	e2cd      	b.n	81048a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	681b      	ldr	r3, [r3, #0]
 810430e:	4a76      	ldr	r2, [pc, #472]	; (81044e8 <HAL_DMA_Abort+0x214>)
 8104310:	4293      	cmp	r3, r2
 8104312:	d04a      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	4a74      	ldr	r2, [pc, #464]	; (81044ec <HAL_DMA_Abort+0x218>)
 810431a:	4293      	cmp	r3, r2
 810431c:	d045      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	4a73      	ldr	r2, [pc, #460]	; (81044f0 <HAL_DMA_Abort+0x21c>)
 8104324:	4293      	cmp	r3, r2
 8104326:	d040      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	4a71      	ldr	r2, [pc, #452]	; (81044f4 <HAL_DMA_Abort+0x220>)
 810432e:	4293      	cmp	r3, r2
 8104330:	d03b      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	4a70      	ldr	r2, [pc, #448]	; (81044f8 <HAL_DMA_Abort+0x224>)
 8104338:	4293      	cmp	r3, r2
 810433a:	d036      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	4a6e      	ldr	r2, [pc, #440]	; (81044fc <HAL_DMA_Abort+0x228>)
 8104342:	4293      	cmp	r3, r2
 8104344:	d031      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	681b      	ldr	r3, [r3, #0]
 810434a:	4a6d      	ldr	r2, [pc, #436]	; (8104500 <HAL_DMA_Abort+0x22c>)
 810434c:	4293      	cmp	r3, r2
 810434e:	d02c      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	681b      	ldr	r3, [r3, #0]
 8104354:	4a6b      	ldr	r2, [pc, #428]	; (8104504 <HAL_DMA_Abort+0x230>)
 8104356:	4293      	cmp	r3, r2
 8104358:	d027      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	681b      	ldr	r3, [r3, #0]
 810435e:	4a6a      	ldr	r2, [pc, #424]	; (8104508 <HAL_DMA_Abort+0x234>)
 8104360:	4293      	cmp	r3, r2
 8104362:	d022      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	4a68      	ldr	r2, [pc, #416]	; (810450c <HAL_DMA_Abort+0x238>)
 810436a:	4293      	cmp	r3, r2
 810436c:	d01d      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	4a67      	ldr	r2, [pc, #412]	; (8104510 <HAL_DMA_Abort+0x23c>)
 8104374:	4293      	cmp	r3, r2
 8104376:	d018      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	4a65      	ldr	r2, [pc, #404]	; (8104514 <HAL_DMA_Abort+0x240>)
 810437e:	4293      	cmp	r3, r2
 8104380:	d013      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	4a64      	ldr	r2, [pc, #400]	; (8104518 <HAL_DMA_Abort+0x244>)
 8104388:	4293      	cmp	r3, r2
 810438a:	d00e      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	4a62      	ldr	r2, [pc, #392]	; (810451c <HAL_DMA_Abort+0x248>)
 8104392:	4293      	cmp	r3, r2
 8104394:	d009      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	4a61      	ldr	r2, [pc, #388]	; (8104520 <HAL_DMA_Abort+0x24c>)
 810439c:	4293      	cmp	r3, r2
 810439e:	d004      	beq.n	81043aa <HAL_DMA_Abort+0xd6>
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	4a5f      	ldr	r2, [pc, #380]	; (8104524 <HAL_DMA_Abort+0x250>)
 81043a6:	4293      	cmp	r3, r2
 81043a8:	d101      	bne.n	81043ae <HAL_DMA_Abort+0xda>
 81043aa:	2301      	movs	r3, #1
 81043ac:	e000      	b.n	81043b0 <HAL_DMA_Abort+0xdc>
 81043ae:	2300      	movs	r3, #0
 81043b0:	2b00      	cmp	r3, #0
 81043b2:	d013      	beq.n	81043dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	681a      	ldr	r2, [r3, #0]
 81043ba:	687b      	ldr	r3, [r7, #4]
 81043bc:	681b      	ldr	r3, [r3, #0]
 81043be:	f022 021e 	bic.w	r2, r2, #30
 81043c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	695a      	ldr	r2, [r3, #20]
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81043d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	617b      	str	r3, [r7, #20]
 81043da:	e00a      	b.n	81043f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	681b      	ldr	r3, [r3, #0]
 81043e0:	681a      	ldr	r2, [r3, #0]
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	681b      	ldr	r3, [r3, #0]
 81043e6:	f022 020e 	bic.w	r2, r2, #14
 81043ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	4a3c      	ldr	r2, [pc, #240]	; (81044e8 <HAL_DMA_Abort+0x214>)
 81043f8:	4293      	cmp	r3, r2
 81043fa:	d072      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	4a3a      	ldr	r2, [pc, #232]	; (81044ec <HAL_DMA_Abort+0x218>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d06d      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	4a39      	ldr	r2, [pc, #228]	; (81044f0 <HAL_DMA_Abort+0x21c>)
 810440c:	4293      	cmp	r3, r2
 810440e:	d068      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	4a37      	ldr	r2, [pc, #220]	; (81044f4 <HAL_DMA_Abort+0x220>)
 8104416:	4293      	cmp	r3, r2
 8104418:	d063      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	681b      	ldr	r3, [r3, #0]
 810441e:	4a36      	ldr	r2, [pc, #216]	; (81044f8 <HAL_DMA_Abort+0x224>)
 8104420:	4293      	cmp	r3, r2
 8104422:	d05e      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104424:	687b      	ldr	r3, [r7, #4]
 8104426:	681b      	ldr	r3, [r3, #0]
 8104428:	4a34      	ldr	r2, [pc, #208]	; (81044fc <HAL_DMA_Abort+0x228>)
 810442a:	4293      	cmp	r3, r2
 810442c:	d059      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	681b      	ldr	r3, [r3, #0]
 8104432:	4a33      	ldr	r2, [pc, #204]	; (8104500 <HAL_DMA_Abort+0x22c>)
 8104434:	4293      	cmp	r3, r2
 8104436:	d054      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	681b      	ldr	r3, [r3, #0]
 810443c:	4a31      	ldr	r2, [pc, #196]	; (8104504 <HAL_DMA_Abort+0x230>)
 810443e:	4293      	cmp	r3, r2
 8104440:	d04f      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	4a30      	ldr	r2, [pc, #192]	; (8104508 <HAL_DMA_Abort+0x234>)
 8104448:	4293      	cmp	r3, r2
 810444a:	d04a      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	681b      	ldr	r3, [r3, #0]
 8104450:	4a2e      	ldr	r2, [pc, #184]	; (810450c <HAL_DMA_Abort+0x238>)
 8104452:	4293      	cmp	r3, r2
 8104454:	d045      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	681b      	ldr	r3, [r3, #0]
 810445a:	4a2d      	ldr	r2, [pc, #180]	; (8104510 <HAL_DMA_Abort+0x23c>)
 810445c:	4293      	cmp	r3, r2
 810445e:	d040      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104460:	687b      	ldr	r3, [r7, #4]
 8104462:	681b      	ldr	r3, [r3, #0]
 8104464:	4a2b      	ldr	r2, [pc, #172]	; (8104514 <HAL_DMA_Abort+0x240>)
 8104466:	4293      	cmp	r3, r2
 8104468:	d03b      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 810446a:	687b      	ldr	r3, [r7, #4]
 810446c:	681b      	ldr	r3, [r3, #0]
 810446e:	4a2a      	ldr	r2, [pc, #168]	; (8104518 <HAL_DMA_Abort+0x244>)
 8104470:	4293      	cmp	r3, r2
 8104472:	d036      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	4a28      	ldr	r2, [pc, #160]	; (810451c <HAL_DMA_Abort+0x248>)
 810447a:	4293      	cmp	r3, r2
 810447c:	d031      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	4a27      	ldr	r2, [pc, #156]	; (8104520 <HAL_DMA_Abort+0x24c>)
 8104484:	4293      	cmp	r3, r2
 8104486:	d02c      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	681b      	ldr	r3, [r3, #0]
 810448c:	4a25      	ldr	r2, [pc, #148]	; (8104524 <HAL_DMA_Abort+0x250>)
 810448e:	4293      	cmp	r3, r2
 8104490:	d027      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	4a24      	ldr	r2, [pc, #144]	; (8104528 <HAL_DMA_Abort+0x254>)
 8104498:	4293      	cmp	r3, r2
 810449a:	d022      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 810449c:	687b      	ldr	r3, [r7, #4]
 810449e:	681b      	ldr	r3, [r3, #0]
 81044a0:	4a22      	ldr	r2, [pc, #136]	; (810452c <HAL_DMA_Abort+0x258>)
 81044a2:	4293      	cmp	r3, r2
 81044a4:	d01d      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	681b      	ldr	r3, [r3, #0]
 81044aa:	4a21      	ldr	r2, [pc, #132]	; (8104530 <HAL_DMA_Abort+0x25c>)
 81044ac:	4293      	cmp	r3, r2
 81044ae:	d018      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	681b      	ldr	r3, [r3, #0]
 81044b4:	4a1f      	ldr	r2, [pc, #124]	; (8104534 <HAL_DMA_Abort+0x260>)
 81044b6:	4293      	cmp	r3, r2
 81044b8:	d013      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	681b      	ldr	r3, [r3, #0]
 81044be:	4a1e      	ldr	r2, [pc, #120]	; (8104538 <HAL_DMA_Abort+0x264>)
 81044c0:	4293      	cmp	r3, r2
 81044c2:	d00e      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	4a1c      	ldr	r2, [pc, #112]	; (810453c <HAL_DMA_Abort+0x268>)
 81044ca:	4293      	cmp	r3, r2
 81044cc:	d009      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 81044ce:	687b      	ldr	r3, [r7, #4]
 81044d0:	681b      	ldr	r3, [r3, #0]
 81044d2:	4a1b      	ldr	r2, [pc, #108]	; (8104540 <HAL_DMA_Abort+0x26c>)
 81044d4:	4293      	cmp	r3, r2
 81044d6:	d004      	beq.n	81044e2 <HAL_DMA_Abort+0x20e>
 81044d8:	687b      	ldr	r3, [r7, #4]
 81044da:	681b      	ldr	r3, [r3, #0]
 81044dc:	4a19      	ldr	r2, [pc, #100]	; (8104544 <HAL_DMA_Abort+0x270>)
 81044de:	4293      	cmp	r3, r2
 81044e0:	d132      	bne.n	8104548 <HAL_DMA_Abort+0x274>
 81044e2:	2301      	movs	r3, #1
 81044e4:	e031      	b.n	810454a <HAL_DMA_Abort+0x276>
 81044e6:	bf00      	nop
 81044e8:	40020010 	.word	0x40020010
 81044ec:	40020028 	.word	0x40020028
 81044f0:	40020040 	.word	0x40020040
 81044f4:	40020058 	.word	0x40020058
 81044f8:	40020070 	.word	0x40020070
 81044fc:	40020088 	.word	0x40020088
 8104500:	400200a0 	.word	0x400200a0
 8104504:	400200b8 	.word	0x400200b8
 8104508:	40020410 	.word	0x40020410
 810450c:	40020428 	.word	0x40020428
 8104510:	40020440 	.word	0x40020440
 8104514:	40020458 	.word	0x40020458
 8104518:	40020470 	.word	0x40020470
 810451c:	40020488 	.word	0x40020488
 8104520:	400204a0 	.word	0x400204a0
 8104524:	400204b8 	.word	0x400204b8
 8104528:	58025408 	.word	0x58025408
 810452c:	5802541c 	.word	0x5802541c
 8104530:	58025430 	.word	0x58025430
 8104534:	58025444 	.word	0x58025444
 8104538:	58025458 	.word	0x58025458
 810453c:	5802546c 	.word	0x5802546c
 8104540:	58025480 	.word	0x58025480
 8104544:	58025494 	.word	0x58025494
 8104548:	2300      	movs	r3, #0
 810454a:	2b00      	cmp	r3, #0
 810454c:	d007      	beq.n	810455e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104552:	681a      	ldr	r2, [r3, #0]
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810455c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	681b      	ldr	r3, [r3, #0]
 8104562:	4a6d      	ldr	r2, [pc, #436]	; (8104718 <HAL_DMA_Abort+0x444>)
 8104564:	4293      	cmp	r3, r2
 8104566:	d04a      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	4a6b      	ldr	r2, [pc, #428]	; (810471c <HAL_DMA_Abort+0x448>)
 810456e:	4293      	cmp	r3, r2
 8104570:	d045      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	4a6a      	ldr	r2, [pc, #424]	; (8104720 <HAL_DMA_Abort+0x44c>)
 8104578:	4293      	cmp	r3, r2
 810457a:	d040      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	4a68      	ldr	r2, [pc, #416]	; (8104724 <HAL_DMA_Abort+0x450>)
 8104582:	4293      	cmp	r3, r2
 8104584:	d03b      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	4a67      	ldr	r2, [pc, #412]	; (8104728 <HAL_DMA_Abort+0x454>)
 810458c:	4293      	cmp	r3, r2
 810458e:	d036      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	4a65      	ldr	r2, [pc, #404]	; (810472c <HAL_DMA_Abort+0x458>)
 8104596:	4293      	cmp	r3, r2
 8104598:	d031      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	4a64      	ldr	r2, [pc, #400]	; (8104730 <HAL_DMA_Abort+0x45c>)
 81045a0:	4293      	cmp	r3, r2
 81045a2:	d02c      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	4a62      	ldr	r2, [pc, #392]	; (8104734 <HAL_DMA_Abort+0x460>)
 81045aa:	4293      	cmp	r3, r2
 81045ac:	d027      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	4a61      	ldr	r2, [pc, #388]	; (8104738 <HAL_DMA_Abort+0x464>)
 81045b4:	4293      	cmp	r3, r2
 81045b6:	d022      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	681b      	ldr	r3, [r3, #0]
 81045bc:	4a5f      	ldr	r2, [pc, #380]	; (810473c <HAL_DMA_Abort+0x468>)
 81045be:	4293      	cmp	r3, r2
 81045c0:	d01d      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	681b      	ldr	r3, [r3, #0]
 81045c6:	4a5e      	ldr	r2, [pc, #376]	; (8104740 <HAL_DMA_Abort+0x46c>)
 81045c8:	4293      	cmp	r3, r2
 81045ca:	d018      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 81045cc:	687b      	ldr	r3, [r7, #4]
 81045ce:	681b      	ldr	r3, [r3, #0]
 81045d0:	4a5c      	ldr	r2, [pc, #368]	; (8104744 <HAL_DMA_Abort+0x470>)
 81045d2:	4293      	cmp	r3, r2
 81045d4:	d013      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	681b      	ldr	r3, [r3, #0]
 81045da:	4a5b      	ldr	r2, [pc, #364]	; (8104748 <HAL_DMA_Abort+0x474>)
 81045dc:	4293      	cmp	r3, r2
 81045de:	d00e      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	681b      	ldr	r3, [r3, #0]
 81045e4:	4a59      	ldr	r2, [pc, #356]	; (810474c <HAL_DMA_Abort+0x478>)
 81045e6:	4293      	cmp	r3, r2
 81045e8:	d009      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	681b      	ldr	r3, [r3, #0]
 81045ee:	4a58      	ldr	r2, [pc, #352]	; (8104750 <HAL_DMA_Abort+0x47c>)
 81045f0:	4293      	cmp	r3, r2
 81045f2:	d004      	beq.n	81045fe <HAL_DMA_Abort+0x32a>
 81045f4:	687b      	ldr	r3, [r7, #4]
 81045f6:	681b      	ldr	r3, [r3, #0]
 81045f8:	4a56      	ldr	r2, [pc, #344]	; (8104754 <HAL_DMA_Abort+0x480>)
 81045fa:	4293      	cmp	r3, r2
 81045fc:	d108      	bne.n	8104610 <HAL_DMA_Abort+0x33c>
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	681a      	ldr	r2, [r3, #0]
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	f022 0201 	bic.w	r2, r2, #1
 810460c:	601a      	str	r2, [r3, #0]
 810460e:	e007      	b.n	8104620 <HAL_DMA_Abort+0x34c>
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	681b      	ldr	r3, [r3, #0]
 8104614:	681a      	ldr	r2, [r3, #0]
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	681b      	ldr	r3, [r3, #0]
 810461a:	f022 0201 	bic.w	r2, r2, #1
 810461e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8104620:	e013      	b.n	810464a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104622:	f7fe fc4d 	bl	8102ec0 <HAL_GetTick>
 8104626:	4602      	mov	r2, r0
 8104628:	693b      	ldr	r3, [r7, #16]
 810462a:	1ad3      	subs	r3, r2, r3
 810462c:	2b05      	cmp	r3, #5
 810462e:	d90c      	bls.n	810464a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	2220      	movs	r2, #32
 8104634:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	2200      	movs	r2, #0
 810463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810463e:	687b      	ldr	r3, [r7, #4]
 8104640:	2203      	movs	r2, #3
 8104642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104646:	2301      	movs	r3, #1
 8104648:	e12d      	b.n	81048a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810464a:	697b      	ldr	r3, [r7, #20]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	f003 0301 	and.w	r3, r3, #1
 8104652:	2b00      	cmp	r3, #0
 8104654:	d1e5      	bne.n	8104622 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	4a2f      	ldr	r2, [pc, #188]	; (8104718 <HAL_DMA_Abort+0x444>)
 810465c:	4293      	cmp	r3, r2
 810465e:	d04a      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	4a2d      	ldr	r2, [pc, #180]	; (810471c <HAL_DMA_Abort+0x448>)
 8104666:	4293      	cmp	r3, r2
 8104668:	d045      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	681b      	ldr	r3, [r3, #0]
 810466e:	4a2c      	ldr	r2, [pc, #176]	; (8104720 <HAL_DMA_Abort+0x44c>)
 8104670:	4293      	cmp	r3, r2
 8104672:	d040      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	4a2a      	ldr	r2, [pc, #168]	; (8104724 <HAL_DMA_Abort+0x450>)
 810467a:	4293      	cmp	r3, r2
 810467c:	d03b      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	681b      	ldr	r3, [r3, #0]
 8104682:	4a29      	ldr	r2, [pc, #164]	; (8104728 <HAL_DMA_Abort+0x454>)
 8104684:	4293      	cmp	r3, r2
 8104686:	d036      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	681b      	ldr	r3, [r3, #0]
 810468c:	4a27      	ldr	r2, [pc, #156]	; (810472c <HAL_DMA_Abort+0x458>)
 810468e:	4293      	cmp	r3, r2
 8104690:	d031      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 8104692:	687b      	ldr	r3, [r7, #4]
 8104694:	681b      	ldr	r3, [r3, #0]
 8104696:	4a26      	ldr	r2, [pc, #152]	; (8104730 <HAL_DMA_Abort+0x45c>)
 8104698:	4293      	cmp	r3, r2
 810469a:	d02c      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	681b      	ldr	r3, [r3, #0]
 81046a0:	4a24      	ldr	r2, [pc, #144]	; (8104734 <HAL_DMA_Abort+0x460>)
 81046a2:	4293      	cmp	r3, r2
 81046a4:	d027      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	4a23      	ldr	r2, [pc, #140]	; (8104738 <HAL_DMA_Abort+0x464>)
 81046ac:	4293      	cmp	r3, r2
 81046ae:	d022      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 81046b0:	687b      	ldr	r3, [r7, #4]
 81046b2:	681b      	ldr	r3, [r3, #0]
 81046b4:	4a21      	ldr	r2, [pc, #132]	; (810473c <HAL_DMA_Abort+0x468>)
 81046b6:	4293      	cmp	r3, r2
 81046b8:	d01d      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	4a20      	ldr	r2, [pc, #128]	; (8104740 <HAL_DMA_Abort+0x46c>)
 81046c0:	4293      	cmp	r3, r2
 81046c2:	d018      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	4a1e      	ldr	r2, [pc, #120]	; (8104744 <HAL_DMA_Abort+0x470>)
 81046ca:	4293      	cmp	r3, r2
 81046cc:	d013      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	681b      	ldr	r3, [r3, #0]
 81046d2:	4a1d      	ldr	r2, [pc, #116]	; (8104748 <HAL_DMA_Abort+0x474>)
 81046d4:	4293      	cmp	r3, r2
 81046d6:	d00e      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	4a1b      	ldr	r2, [pc, #108]	; (810474c <HAL_DMA_Abort+0x478>)
 81046de:	4293      	cmp	r3, r2
 81046e0:	d009      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	4a1a      	ldr	r2, [pc, #104]	; (8104750 <HAL_DMA_Abort+0x47c>)
 81046e8:	4293      	cmp	r3, r2
 81046ea:	d004      	beq.n	81046f6 <HAL_DMA_Abort+0x422>
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	681b      	ldr	r3, [r3, #0]
 81046f0:	4a18      	ldr	r2, [pc, #96]	; (8104754 <HAL_DMA_Abort+0x480>)
 81046f2:	4293      	cmp	r3, r2
 81046f4:	d101      	bne.n	81046fa <HAL_DMA_Abort+0x426>
 81046f6:	2301      	movs	r3, #1
 81046f8:	e000      	b.n	81046fc <HAL_DMA_Abort+0x428>
 81046fa:	2300      	movs	r3, #0
 81046fc:	2b00      	cmp	r3, #0
 81046fe:	d02b      	beq.n	8104758 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104700:	687b      	ldr	r3, [r7, #4]
 8104702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104704:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810470a:	f003 031f 	and.w	r3, r3, #31
 810470e:	223f      	movs	r2, #63	; 0x3f
 8104710:	409a      	lsls	r2, r3
 8104712:	68bb      	ldr	r3, [r7, #8]
 8104714:	609a      	str	r2, [r3, #8]
 8104716:	e02a      	b.n	810476e <HAL_DMA_Abort+0x49a>
 8104718:	40020010 	.word	0x40020010
 810471c:	40020028 	.word	0x40020028
 8104720:	40020040 	.word	0x40020040
 8104724:	40020058 	.word	0x40020058
 8104728:	40020070 	.word	0x40020070
 810472c:	40020088 	.word	0x40020088
 8104730:	400200a0 	.word	0x400200a0
 8104734:	400200b8 	.word	0x400200b8
 8104738:	40020410 	.word	0x40020410
 810473c:	40020428 	.word	0x40020428
 8104740:	40020440 	.word	0x40020440
 8104744:	40020458 	.word	0x40020458
 8104748:	40020470 	.word	0x40020470
 810474c:	40020488 	.word	0x40020488
 8104750:	400204a0 	.word	0x400204a0
 8104754:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810475c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104762:	f003 031f 	and.w	r3, r3, #31
 8104766:	2201      	movs	r2, #1
 8104768:	409a      	lsls	r2, r3
 810476a:	68fb      	ldr	r3, [r7, #12]
 810476c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	4a4f      	ldr	r2, [pc, #316]	; (81048b0 <HAL_DMA_Abort+0x5dc>)
 8104774:	4293      	cmp	r3, r2
 8104776:	d072      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	4a4d      	ldr	r2, [pc, #308]	; (81048b4 <HAL_DMA_Abort+0x5e0>)
 810477e:	4293      	cmp	r3, r2
 8104780:	d06d      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	4a4c      	ldr	r2, [pc, #304]	; (81048b8 <HAL_DMA_Abort+0x5e4>)
 8104788:	4293      	cmp	r3, r2
 810478a:	d068      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	4a4a      	ldr	r2, [pc, #296]	; (81048bc <HAL_DMA_Abort+0x5e8>)
 8104792:	4293      	cmp	r3, r2
 8104794:	d063      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	4a49      	ldr	r2, [pc, #292]	; (81048c0 <HAL_DMA_Abort+0x5ec>)
 810479c:	4293      	cmp	r3, r2
 810479e:	d05e      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	4a47      	ldr	r2, [pc, #284]	; (81048c4 <HAL_DMA_Abort+0x5f0>)
 81047a6:	4293      	cmp	r3, r2
 81047a8:	d059      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	4a46      	ldr	r2, [pc, #280]	; (81048c8 <HAL_DMA_Abort+0x5f4>)
 81047b0:	4293      	cmp	r3, r2
 81047b2:	d054      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	681b      	ldr	r3, [r3, #0]
 81047b8:	4a44      	ldr	r2, [pc, #272]	; (81048cc <HAL_DMA_Abort+0x5f8>)
 81047ba:	4293      	cmp	r3, r2
 81047bc:	d04f      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	4a43      	ldr	r2, [pc, #268]	; (81048d0 <HAL_DMA_Abort+0x5fc>)
 81047c4:	4293      	cmp	r3, r2
 81047c6:	d04a      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	4a41      	ldr	r2, [pc, #260]	; (81048d4 <HAL_DMA_Abort+0x600>)
 81047ce:	4293      	cmp	r3, r2
 81047d0:	d045      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4a40      	ldr	r2, [pc, #256]	; (81048d8 <HAL_DMA_Abort+0x604>)
 81047d8:	4293      	cmp	r3, r2
 81047da:	d040      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	4a3e      	ldr	r2, [pc, #248]	; (81048dc <HAL_DMA_Abort+0x608>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d03b      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	681b      	ldr	r3, [r3, #0]
 81047ea:	4a3d      	ldr	r2, [pc, #244]	; (81048e0 <HAL_DMA_Abort+0x60c>)
 81047ec:	4293      	cmp	r3, r2
 81047ee:	d036      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	4a3b      	ldr	r2, [pc, #236]	; (81048e4 <HAL_DMA_Abort+0x610>)
 81047f6:	4293      	cmp	r3, r2
 81047f8:	d031      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	681b      	ldr	r3, [r3, #0]
 81047fe:	4a3a      	ldr	r2, [pc, #232]	; (81048e8 <HAL_DMA_Abort+0x614>)
 8104800:	4293      	cmp	r3, r2
 8104802:	d02c      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	4a38      	ldr	r2, [pc, #224]	; (81048ec <HAL_DMA_Abort+0x618>)
 810480a:	4293      	cmp	r3, r2
 810480c:	d027      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	681b      	ldr	r3, [r3, #0]
 8104812:	4a37      	ldr	r2, [pc, #220]	; (81048f0 <HAL_DMA_Abort+0x61c>)
 8104814:	4293      	cmp	r3, r2
 8104816:	d022      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	681b      	ldr	r3, [r3, #0]
 810481c:	4a35      	ldr	r2, [pc, #212]	; (81048f4 <HAL_DMA_Abort+0x620>)
 810481e:	4293      	cmp	r3, r2
 8104820:	d01d      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	681b      	ldr	r3, [r3, #0]
 8104826:	4a34      	ldr	r2, [pc, #208]	; (81048f8 <HAL_DMA_Abort+0x624>)
 8104828:	4293      	cmp	r3, r2
 810482a:	d018      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 810482c:	687b      	ldr	r3, [r7, #4]
 810482e:	681b      	ldr	r3, [r3, #0]
 8104830:	4a32      	ldr	r2, [pc, #200]	; (81048fc <HAL_DMA_Abort+0x628>)
 8104832:	4293      	cmp	r3, r2
 8104834:	d013      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	681b      	ldr	r3, [r3, #0]
 810483a:	4a31      	ldr	r2, [pc, #196]	; (8104900 <HAL_DMA_Abort+0x62c>)
 810483c:	4293      	cmp	r3, r2
 810483e:	d00e      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	681b      	ldr	r3, [r3, #0]
 8104844:	4a2f      	ldr	r2, [pc, #188]	; (8104904 <HAL_DMA_Abort+0x630>)
 8104846:	4293      	cmp	r3, r2
 8104848:	d009      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	681b      	ldr	r3, [r3, #0]
 810484e:	4a2e      	ldr	r2, [pc, #184]	; (8104908 <HAL_DMA_Abort+0x634>)
 8104850:	4293      	cmp	r3, r2
 8104852:	d004      	beq.n	810485e <HAL_DMA_Abort+0x58a>
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	681b      	ldr	r3, [r3, #0]
 8104858:	4a2c      	ldr	r2, [pc, #176]	; (810490c <HAL_DMA_Abort+0x638>)
 810485a:	4293      	cmp	r3, r2
 810485c:	d101      	bne.n	8104862 <HAL_DMA_Abort+0x58e>
 810485e:	2301      	movs	r3, #1
 8104860:	e000      	b.n	8104864 <HAL_DMA_Abort+0x590>
 8104862:	2300      	movs	r3, #0
 8104864:	2b00      	cmp	r3, #0
 8104866:	d015      	beq.n	8104894 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810486c:	687a      	ldr	r2, [r7, #4]
 810486e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104870:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104876:	2b00      	cmp	r3, #0
 8104878:	d00c      	beq.n	8104894 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810487e:	681a      	ldr	r2, [r3, #0]
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104888:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810488e:	687a      	ldr	r2, [r7, #4]
 8104890:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104892:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	2200      	movs	r2, #0
 8104898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	2201      	movs	r2, #1
 81048a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 81048a4:	2300      	movs	r3, #0
}
 81048a6:	4618      	mov	r0, r3
 81048a8:	3718      	adds	r7, #24
 81048aa:	46bd      	mov	sp, r7
 81048ac:	bd80      	pop	{r7, pc}
 81048ae:	bf00      	nop
 81048b0:	40020010 	.word	0x40020010
 81048b4:	40020028 	.word	0x40020028
 81048b8:	40020040 	.word	0x40020040
 81048bc:	40020058 	.word	0x40020058
 81048c0:	40020070 	.word	0x40020070
 81048c4:	40020088 	.word	0x40020088
 81048c8:	400200a0 	.word	0x400200a0
 81048cc:	400200b8 	.word	0x400200b8
 81048d0:	40020410 	.word	0x40020410
 81048d4:	40020428 	.word	0x40020428
 81048d8:	40020440 	.word	0x40020440
 81048dc:	40020458 	.word	0x40020458
 81048e0:	40020470 	.word	0x40020470
 81048e4:	40020488 	.word	0x40020488
 81048e8:	400204a0 	.word	0x400204a0
 81048ec:	400204b8 	.word	0x400204b8
 81048f0:	58025408 	.word	0x58025408
 81048f4:	5802541c 	.word	0x5802541c
 81048f8:	58025430 	.word	0x58025430
 81048fc:	58025444 	.word	0x58025444
 8104900:	58025458 	.word	0x58025458
 8104904:	5802546c 	.word	0x5802546c
 8104908:	58025480 	.word	0x58025480
 810490c:	58025494 	.word	0x58025494

08104910 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8104910:	b580      	push	{r7, lr}
 8104912:	b084      	sub	sp, #16
 8104914:	af00      	add	r7, sp, #0
 8104916:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104918:	687b      	ldr	r3, [r7, #4]
 810491a:	2b00      	cmp	r3, #0
 810491c:	d101      	bne.n	8104922 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810491e:	2301      	movs	r3, #1
 8104920:	e237      	b.n	8104d92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8104922:	687b      	ldr	r3, [r7, #4]
 8104924:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104928:	b2db      	uxtb	r3, r3
 810492a:	2b02      	cmp	r3, #2
 810492c:	d004      	beq.n	8104938 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810492e:	687b      	ldr	r3, [r7, #4]
 8104930:	2280      	movs	r2, #128	; 0x80
 8104932:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8104934:	2301      	movs	r3, #1
 8104936:	e22c      	b.n	8104d92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104938:	687b      	ldr	r3, [r7, #4]
 810493a:	681b      	ldr	r3, [r3, #0]
 810493c:	4a5c      	ldr	r2, [pc, #368]	; (8104ab0 <HAL_DMA_Abort_IT+0x1a0>)
 810493e:	4293      	cmp	r3, r2
 8104940:	d04a      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	4a5b      	ldr	r2, [pc, #364]	; (8104ab4 <HAL_DMA_Abort_IT+0x1a4>)
 8104948:	4293      	cmp	r3, r2
 810494a:	d045      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	681b      	ldr	r3, [r3, #0]
 8104950:	4a59      	ldr	r2, [pc, #356]	; (8104ab8 <HAL_DMA_Abort_IT+0x1a8>)
 8104952:	4293      	cmp	r3, r2
 8104954:	d040      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 8104956:	687b      	ldr	r3, [r7, #4]
 8104958:	681b      	ldr	r3, [r3, #0]
 810495a:	4a58      	ldr	r2, [pc, #352]	; (8104abc <HAL_DMA_Abort_IT+0x1ac>)
 810495c:	4293      	cmp	r3, r2
 810495e:	d03b      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 8104960:	687b      	ldr	r3, [r7, #4]
 8104962:	681b      	ldr	r3, [r3, #0]
 8104964:	4a56      	ldr	r2, [pc, #344]	; (8104ac0 <HAL_DMA_Abort_IT+0x1b0>)
 8104966:	4293      	cmp	r3, r2
 8104968:	d036      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 810496a:	687b      	ldr	r3, [r7, #4]
 810496c:	681b      	ldr	r3, [r3, #0]
 810496e:	4a55      	ldr	r2, [pc, #340]	; (8104ac4 <HAL_DMA_Abort_IT+0x1b4>)
 8104970:	4293      	cmp	r3, r2
 8104972:	d031      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 8104974:	687b      	ldr	r3, [r7, #4]
 8104976:	681b      	ldr	r3, [r3, #0]
 8104978:	4a53      	ldr	r2, [pc, #332]	; (8104ac8 <HAL_DMA_Abort_IT+0x1b8>)
 810497a:	4293      	cmp	r3, r2
 810497c:	d02c      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 810497e:	687b      	ldr	r3, [r7, #4]
 8104980:	681b      	ldr	r3, [r3, #0]
 8104982:	4a52      	ldr	r2, [pc, #328]	; (8104acc <HAL_DMA_Abort_IT+0x1bc>)
 8104984:	4293      	cmp	r3, r2
 8104986:	d027      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 8104988:	687b      	ldr	r3, [r7, #4]
 810498a:	681b      	ldr	r3, [r3, #0]
 810498c:	4a50      	ldr	r2, [pc, #320]	; (8104ad0 <HAL_DMA_Abort_IT+0x1c0>)
 810498e:	4293      	cmp	r3, r2
 8104990:	d022      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	681b      	ldr	r3, [r3, #0]
 8104996:	4a4f      	ldr	r2, [pc, #316]	; (8104ad4 <HAL_DMA_Abort_IT+0x1c4>)
 8104998:	4293      	cmp	r3, r2
 810499a:	d01d      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 810499c:	687b      	ldr	r3, [r7, #4]
 810499e:	681b      	ldr	r3, [r3, #0]
 81049a0:	4a4d      	ldr	r2, [pc, #308]	; (8104ad8 <HAL_DMA_Abort_IT+0x1c8>)
 81049a2:	4293      	cmp	r3, r2
 81049a4:	d018      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	681b      	ldr	r3, [r3, #0]
 81049aa:	4a4c      	ldr	r2, [pc, #304]	; (8104adc <HAL_DMA_Abort_IT+0x1cc>)
 81049ac:	4293      	cmp	r3, r2
 81049ae:	d013      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 81049b0:	687b      	ldr	r3, [r7, #4]
 81049b2:	681b      	ldr	r3, [r3, #0]
 81049b4:	4a4a      	ldr	r2, [pc, #296]	; (8104ae0 <HAL_DMA_Abort_IT+0x1d0>)
 81049b6:	4293      	cmp	r3, r2
 81049b8:	d00e      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 81049ba:	687b      	ldr	r3, [r7, #4]
 81049bc:	681b      	ldr	r3, [r3, #0]
 81049be:	4a49      	ldr	r2, [pc, #292]	; (8104ae4 <HAL_DMA_Abort_IT+0x1d4>)
 81049c0:	4293      	cmp	r3, r2
 81049c2:	d009      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 81049c4:	687b      	ldr	r3, [r7, #4]
 81049c6:	681b      	ldr	r3, [r3, #0]
 81049c8:	4a47      	ldr	r2, [pc, #284]	; (8104ae8 <HAL_DMA_Abort_IT+0x1d8>)
 81049ca:	4293      	cmp	r3, r2
 81049cc:	d004      	beq.n	81049d8 <HAL_DMA_Abort_IT+0xc8>
 81049ce:	687b      	ldr	r3, [r7, #4]
 81049d0:	681b      	ldr	r3, [r3, #0]
 81049d2:	4a46      	ldr	r2, [pc, #280]	; (8104aec <HAL_DMA_Abort_IT+0x1dc>)
 81049d4:	4293      	cmp	r3, r2
 81049d6:	d101      	bne.n	81049dc <HAL_DMA_Abort_IT+0xcc>
 81049d8:	2301      	movs	r3, #1
 81049da:	e000      	b.n	81049de <HAL_DMA_Abort_IT+0xce>
 81049dc:	2300      	movs	r3, #0
 81049de:	2b00      	cmp	r3, #0
 81049e0:	f000 8086 	beq.w	8104af0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	2204      	movs	r2, #4
 81049e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81049ec:	687b      	ldr	r3, [r7, #4]
 81049ee:	681b      	ldr	r3, [r3, #0]
 81049f0:	4a2f      	ldr	r2, [pc, #188]	; (8104ab0 <HAL_DMA_Abort_IT+0x1a0>)
 81049f2:	4293      	cmp	r3, r2
 81049f4:	d04a      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	681b      	ldr	r3, [r3, #0]
 81049fa:	4a2e      	ldr	r2, [pc, #184]	; (8104ab4 <HAL_DMA_Abort_IT+0x1a4>)
 81049fc:	4293      	cmp	r3, r2
 81049fe:	d045      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a00:	687b      	ldr	r3, [r7, #4]
 8104a02:	681b      	ldr	r3, [r3, #0]
 8104a04:	4a2c      	ldr	r2, [pc, #176]	; (8104ab8 <HAL_DMA_Abort_IT+0x1a8>)
 8104a06:	4293      	cmp	r3, r2
 8104a08:	d040      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a0a:	687b      	ldr	r3, [r7, #4]
 8104a0c:	681b      	ldr	r3, [r3, #0]
 8104a0e:	4a2b      	ldr	r2, [pc, #172]	; (8104abc <HAL_DMA_Abort_IT+0x1ac>)
 8104a10:	4293      	cmp	r3, r2
 8104a12:	d03b      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	681b      	ldr	r3, [r3, #0]
 8104a18:	4a29      	ldr	r2, [pc, #164]	; (8104ac0 <HAL_DMA_Abort_IT+0x1b0>)
 8104a1a:	4293      	cmp	r3, r2
 8104a1c:	d036      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a1e:	687b      	ldr	r3, [r7, #4]
 8104a20:	681b      	ldr	r3, [r3, #0]
 8104a22:	4a28      	ldr	r2, [pc, #160]	; (8104ac4 <HAL_DMA_Abort_IT+0x1b4>)
 8104a24:	4293      	cmp	r3, r2
 8104a26:	d031      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a28:	687b      	ldr	r3, [r7, #4]
 8104a2a:	681b      	ldr	r3, [r3, #0]
 8104a2c:	4a26      	ldr	r2, [pc, #152]	; (8104ac8 <HAL_DMA_Abort_IT+0x1b8>)
 8104a2e:	4293      	cmp	r3, r2
 8104a30:	d02c      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	681b      	ldr	r3, [r3, #0]
 8104a36:	4a25      	ldr	r2, [pc, #148]	; (8104acc <HAL_DMA_Abort_IT+0x1bc>)
 8104a38:	4293      	cmp	r3, r2
 8104a3a:	d027      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a3c:	687b      	ldr	r3, [r7, #4]
 8104a3e:	681b      	ldr	r3, [r3, #0]
 8104a40:	4a23      	ldr	r2, [pc, #140]	; (8104ad0 <HAL_DMA_Abort_IT+0x1c0>)
 8104a42:	4293      	cmp	r3, r2
 8104a44:	d022      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a46:	687b      	ldr	r3, [r7, #4]
 8104a48:	681b      	ldr	r3, [r3, #0]
 8104a4a:	4a22      	ldr	r2, [pc, #136]	; (8104ad4 <HAL_DMA_Abort_IT+0x1c4>)
 8104a4c:	4293      	cmp	r3, r2
 8104a4e:	d01d      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	681b      	ldr	r3, [r3, #0]
 8104a54:	4a20      	ldr	r2, [pc, #128]	; (8104ad8 <HAL_DMA_Abort_IT+0x1c8>)
 8104a56:	4293      	cmp	r3, r2
 8104a58:	d018      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a5a:	687b      	ldr	r3, [r7, #4]
 8104a5c:	681b      	ldr	r3, [r3, #0]
 8104a5e:	4a1f      	ldr	r2, [pc, #124]	; (8104adc <HAL_DMA_Abort_IT+0x1cc>)
 8104a60:	4293      	cmp	r3, r2
 8104a62:	d013      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	681b      	ldr	r3, [r3, #0]
 8104a68:	4a1d      	ldr	r2, [pc, #116]	; (8104ae0 <HAL_DMA_Abort_IT+0x1d0>)
 8104a6a:	4293      	cmp	r3, r2
 8104a6c:	d00e      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a6e:	687b      	ldr	r3, [r7, #4]
 8104a70:	681b      	ldr	r3, [r3, #0]
 8104a72:	4a1c      	ldr	r2, [pc, #112]	; (8104ae4 <HAL_DMA_Abort_IT+0x1d4>)
 8104a74:	4293      	cmp	r3, r2
 8104a76:	d009      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	4a1a      	ldr	r2, [pc, #104]	; (8104ae8 <HAL_DMA_Abort_IT+0x1d8>)
 8104a7e:	4293      	cmp	r3, r2
 8104a80:	d004      	beq.n	8104a8c <HAL_DMA_Abort_IT+0x17c>
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	681b      	ldr	r3, [r3, #0]
 8104a86:	4a19      	ldr	r2, [pc, #100]	; (8104aec <HAL_DMA_Abort_IT+0x1dc>)
 8104a88:	4293      	cmp	r3, r2
 8104a8a:	d108      	bne.n	8104a9e <HAL_DMA_Abort_IT+0x18e>
 8104a8c:	687b      	ldr	r3, [r7, #4]
 8104a8e:	681b      	ldr	r3, [r3, #0]
 8104a90:	681a      	ldr	r2, [r3, #0]
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	f022 0201 	bic.w	r2, r2, #1
 8104a9a:	601a      	str	r2, [r3, #0]
 8104a9c:	e178      	b.n	8104d90 <HAL_DMA_Abort_IT+0x480>
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	681b      	ldr	r3, [r3, #0]
 8104aa2:	681a      	ldr	r2, [r3, #0]
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	f022 0201 	bic.w	r2, r2, #1
 8104aac:	601a      	str	r2, [r3, #0]
 8104aae:	e16f      	b.n	8104d90 <HAL_DMA_Abort_IT+0x480>
 8104ab0:	40020010 	.word	0x40020010
 8104ab4:	40020028 	.word	0x40020028
 8104ab8:	40020040 	.word	0x40020040
 8104abc:	40020058 	.word	0x40020058
 8104ac0:	40020070 	.word	0x40020070
 8104ac4:	40020088 	.word	0x40020088
 8104ac8:	400200a0 	.word	0x400200a0
 8104acc:	400200b8 	.word	0x400200b8
 8104ad0:	40020410 	.word	0x40020410
 8104ad4:	40020428 	.word	0x40020428
 8104ad8:	40020440 	.word	0x40020440
 8104adc:	40020458 	.word	0x40020458
 8104ae0:	40020470 	.word	0x40020470
 8104ae4:	40020488 	.word	0x40020488
 8104ae8:	400204a0 	.word	0x400204a0
 8104aec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8104af0:	687b      	ldr	r3, [r7, #4]
 8104af2:	681b      	ldr	r3, [r3, #0]
 8104af4:	681a      	ldr	r2, [r3, #0]
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	f022 020e 	bic.w	r2, r2, #14
 8104afe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	4a6c      	ldr	r2, [pc, #432]	; (8104cb8 <HAL_DMA_Abort_IT+0x3a8>)
 8104b06:	4293      	cmp	r3, r2
 8104b08:	d04a      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	4a6b      	ldr	r2, [pc, #428]	; (8104cbc <HAL_DMA_Abort_IT+0x3ac>)
 8104b10:	4293      	cmp	r3, r2
 8104b12:	d045      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	681b      	ldr	r3, [r3, #0]
 8104b18:	4a69      	ldr	r2, [pc, #420]	; (8104cc0 <HAL_DMA_Abort_IT+0x3b0>)
 8104b1a:	4293      	cmp	r3, r2
 8104b1c:	d040      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	681b      	ldr	r3, [r3, #0]
 8104b22:	4a68      	ldr	r2, [pc, #416]	; (8104cc4 <HAL_DMA_Abort_IT+0x3b4>)
 8104b24:	4293      	cmp	r3, r2
 8104b26:	d03b      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	4a66      	ldr	r2, [pc, #408]	; (8104cc8 <HAL_DMA_Abort_IT+0x3b8>)
 8104b2e:	4293      	cmp	r3, r2
 8104b30:	d036      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	4a65      	ldr	r2, [pc, #404]	; (8104ccc <HAL_DMA_Abort_IT+0x3bc>)
 8104b38:	4293      	cmp	r3, r2
 8104b3a:	d031      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	4a63      	ldr	r2, [pc, #396]	; (8104cd0 <HAL_DMA_Abort_IT+0x3c0>)
 8104b42:	4293      	cmp	r3, r2
 8104b44:	d02c      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	681b      	ldr	r3, [r3, #0]
 8104b4a:	4a62      	ldr	r2, [pc, #392]	; (8104cd4 <HAL_DMA_Abort_IT+0x3c4>)
 8104b4c:	4293      	cmp	r3, r2
 8104b4e:	d027      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	4a60      	ldr	r2, [pc, #384]	; (8104cd8 <HAL_DMA_Abort_IT+0x3c8>)
 8104b56:	4293      	cmp	r3, r2
 8104b58:	d022      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	4a5f      	ldr	r2, [pc, #380]	; (8104cdc <HAL_DMA_Abort_IT+0x3cc>)
 8104b60:	4293      	cmp	r3, r2
 8104b62:	d01d      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	4a5d      	ldr	r2, [pc, #372]	; (8104ce0 <HAL_DMA_Abort_IT+0x3d0>)
 8104b6a:	4293      	cmp	r3, r2
 8104b6c:	d018      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	681b      	ldr	r3, [r3, #0]
 8104b72:	4a5c      	ldr	r2, [pc, #368]	; (8104ce4 <HAL_DMA_Abort_IT+0x3d4>)
 8104b74:	4293      	cmp	r3, r2
 8104b76:	d013      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	681b      	ldr	r3, [r3, #0]
 8104b7c:	4a5a      	ldr	r2, [pc, #360]	; (8104ce8 <HAL_DMA_Abort_IT+0x3d8>)
 8104b7e:	4293      	cmp	r3, r2
 8104b80:	d00e      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b82:	687b      	ldr	r3, [r7, #4]
 8104b84:	681b      	ldr	r3, [r3, #0]
 8104b86:	4a59      	ldr	r2, [pc, #356]	; (8104cec <HAL_DMA_Abort_IT+0x3dc>)
 8104b88:	4293      	cmp	r3, r2
 8104b8a:	d009      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	4a57      	ldr	r2, [pc, #348]	; (8104cf0 <HAL_DMA_Abort_IT+0x3e0>)
 8104b92:	4293      	cmp	r3, r2
 8104b94:	d004      	beq.n	8104ba0 <HAL_DMA_Abort_IT+0x290>
 8104b96:	687b      	ldr	r3, [r7, #4]
 8104b98:	681b      	ldr	r3, [r3, #0]
 8104b9a:	4a56      	ldr	r2, [pc, #344]	; (8104cf4 <HAL_DMA_Abort_IT+0x3e4>)
 8104b9c:	4293      	cmp	r3, r2
 8104b9e:	d108      	bne.n	8104bb2 <HAL_DMA_Abort_IT+0x2a2>
 8104ba0:	687b      	ldr	r3, [r7, #4]
 8104ba2:	681b      	ldr	r3, [r3, #0]
 8104ba4:	681a      	ldr	r2, [r3, #0]
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	681b      	ldr	r3, [r3, #0]
 8104baa:	f022 0201 	bic.w	r2, r2, #1
 8104bae:	601a      	str	r2, [r3, #0]
 8104bb0:	e007      	b.n	8104bc2 <HAL_DMA_Abort_IT+0x2b2>
 8104bb2:	687b      	ldr	r3, [r7, #4]
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	681a      	ldr	r2, [r3, #0]
 8104bb8:	687b      	ldr	r3, [r7, #4]
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	f022 0201 	bic.w	r2, r2, #1
 8104bc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	4a3c      	ldr	r2, [pc, #240]	; (8104cb8 <HAL_DMA_Abort_IT+0x3a8>)
 8104bc8:	4293      	cmp	r3, r2
 8104bca:	d072      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	4a3a      	ldr	r2, [pc, #232]	; (8104cbc <HAL_DMA_Abort_IT+0x3ac>)
 8104bd2:	4293      	cmp	r3, r2
 8104bd4:	d06d      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	681b      	ldr	r3, [r3, #0]
 8104bda:	4a39      	ldr	r2, [pc, #228]	; (8104cc0 <HAL_DMA_Abort_IT+0x3b0>)
 8104bdc:	4293      	cmp	r3, r2
 8104bde:	d068      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	4a37      	ldr	r2, [pc, #220]	; (8104cc4 <HAL_DMA_Abort_IT+0x3b4>)
 8104be6:	4293      	cmp	r3, r2
 8104be8:	d063      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	4a36      	ldr	r2, [pc, #216]	; (8104cc8 <HAL_DMA_Abort_IT+0x3b8>)
 8104bf0:	4293      	cmp	r3, r2
 8104bf2:	d05e      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	4a34      	ldr	r2, [pc, #208]	; (8104ccc <HAL_DMA_Abort_IT+0x3bc>)
 8104bfa:	4293      	cmp	r3, r2
 8104bfc:	d059      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	681b      	ldr	r3, [r3, #0]
 8104c02:	4a33      	ldr	r2, [pc, #204]	; (8104cd0 <HAL_DMA_Abort_IT+0x3c0>)
 8104c04:	4293      	cmp	r3, r2
 8104c06:	d054      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	681b      	ldr	r3, [r3, #0]
 8104c0c:	4a31      	ldr	r2, [pc, #196]	; (8104cd4 <HAL_DMA_Abort_IT+0x3c4>)
 8104c0e:	4293      	cmp	r3, r2
 8104c10:	d04f      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	4a30      	ldr	r2, [pc, #192]	; (8104cd8 <HAL_DMA_Abort_IT+0x3c8>)
 8104c18:	4293      	cmp	r3, r2
 8104c1a:	d04a      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	4a2e      	ldr	r2, [pc, #184]	; (8104cdc <HAL_DMA_Abort_IT+0x3cc>)
 8104c22:	4293      	cmp	r3, r2
 8104c24:	d045      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	4a2d      	ldr	r2, [pc, #180]	; (8104ce0 <HAL_DMA_Abort_IT+0x3d0>)
 8104c2c:	4293      	cmp	r3, r2
 8104c2e:	d040      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	4a2b      	ldr	r2, [pc, #172]	; (8104ce4 <HAL_DMA_Abort_IT+0x3d4>)
 8104c36:	4293      	cmp	r3, r2
 8104c38:	d03b      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	4a2a      	ldr	r2, [pc, #168]	; (8104ce8 <HAL_DMA_Abort_IT+0x3d8>)
 8104c40:	4293      	cmp	r3, r2
 8104c42:	d036      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	681b      	ldr	r3, [r3, #0]
 8104c48:	4a28      	ldr	r2, [pc, #160]	; (8104cec <HAL_DMA_Abort_IT+0x3dc>)
 8104c4a:	4293      	cmp	r3, r2
 8104c4c:	d031      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	681b      	ldr	r3, [r3, #0]
 8104c52:	4a27      	ldr	r2, [pc, #156]	; (8104cf0 <HAL_DMA_Abort_IT+0x3e0>)
 8104c54:	4293      	cmp	r3, r2
 8104c56:	d02c      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	4a25      	ldr	r2, [pc, #148]	; (8104cf4 <HAL_DMA_Abort_IT+0x3e4>)
 8104c5e:	4293      	cmp	r3, r2
 8104c60:	d027      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	681b      	ldr	r3, [r3, #0]
 8104c66:	4a24      	ldr	r2, [pc, #144]	; (8104cf8 <HAL_DMA_Abort_IT+0x3e8>)
 8104c68:	4293      	cmp	r3, r2
 8104c6a:	d022      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	681b      	ldr	r3, [r3, #0]
 8104c70:	4a22      	ldr	r2, [pc, #136]	; (8104cfc <HAL_DMA_Abort_IT+0x3ec>)
 8104c72:	4293      	cmp	r3, r2
 8104c74:	d01d      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	4a21      	ldr	r2, [pc, #132]	; (8104d00 <HAL_DMA_Abort_IT+0x3f0>)
 8104c7c:	4293      	cmp	r3, r2
 8104c7e:	d018      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	681b      	ldr	r3, [r3, #0]
 8104c84:	4a1f      	ldr	r2, [pc, #124]	; (8104d04 <HAL_DMA_Abort_IT+0x3f4>)
 8104c86:	4293      	cmp	r3, r2
 8104c88:	d013      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	681b      	ldr	r3, [r3, #0]
 8104c8e:	4a1e      	ldr	r2, [pc, #120]	; (8104d08 <HAL_DMA_Abort_IT+0x3f8>)
 8104c90:	4293      	cmp	r3, r2
 8104c92:	d00e      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	681b      	ldr	r3, [r3, #0]
 8104c98:	4a1c      	ldr	r2, [pc, #112]	; (8104d0c <HAL_DMA_Abort_IT+0x3fc>)
 8104c9a:	4293      	cmp	r3, r2
 8104c9c:	d009      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104c9e:	687b      	ldr	r3, [r7, #4]
 8104ca0:	681b      	ldr	r3, [r3, #0]
 8104ca2:	4a1b      	ldr	r2, [pc, #108]	; (8104d10 <HAL_DMA_Abort_IT+0x400>)
 8104ca4:	4293      	cmp	r3, r2
 8104ca6:	d004      	beq.n	8104cb2 <HAL_DMA_Abort_IT+0x3a2>
 8104ca8:	687b      	ldr	r3, [r7, #4]
 8104caa:	681b      	ldr	r3, [r3, #0]
 8104cac:	4a19      	ldr	r2, [pc, #100]	; (8104d14 <HAL_DMA_Abort_IT+0x404>)
 8104cae:	4293      	cmp	r3, r2
 8104cb0:	d132      	bne.n	8104d18 <HAL_DMA_Abort_IT+0x408>
 8104cb2:	2301      	movs	r3, #1
 8104cb4:	e031      	b.n	8104d1a <HAL_DMA_Abort_IT+0x40a>
 8104cb6:	bf00      	nop
 8104cb8:	40020010 	.word	0x40020010
 8104cbc:	40020028 	.word	0x40020028
 8104cc0:	40020040 	.word	0x40020040
 8104cc4:	40020058 	.word	0x40020058
 8104cc8:	40020070 	.word	0x40020070
 8104ccc:	40020088 	.word	0x40020088
 8104cd0:	400200a0 	.word	0x400200a0
 8104cd4:	400200b8 	.word	0x400200b8
 8104cd8:	40020410 	.word	0x40020410
 8104cdc:	40020428 	.word	0x40020428
 8104ce0:	40020440 	.word	0x40020440
 8104ce4:	40020458 	.word	0x40020458
 8104ce8:	40020470 	.word	0x40020470
 8104cec:	40020488 	.word	0x40020488
 8104cf0:	400204a0 	.word	0x400204a0
 8104cf4:	400204b8 	.word	0x400204b8
 8104cf8:	58025408 	.word	0x58025408
 8104cfc:	5802541c 	.word	0x5802541c
 8104d00:	58025430 	.word	0x58025430
 8104d04:	58025444 	.word	0x58025444
 8104d08:	58025458 	.word	0x58025458
 8104d0c:	5802546c 	.word	0x5802546c
 8104d10:	58025480 	.word	0x58025480
 8104d14:	58025494 	.word	0x58025494
 8104d18:	2300      	movs	r3, #0
 8104d1a:	2b00      	cmp	r3, #0
 8104d1c:	d028      	beq.n	8104d70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d22:	681a      	ldr	r2, [r3, #0]
 8104d24:	687b      	ldr	r3, [r7, #4]
 8104d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104d2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104d2e:	687b      	ldr	r3, [r7, #4]
 8104d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104d38:	f003 031f 	and.w	r3, r3, #31
 8104d3c:	2201      	movs	r2, #1
 8104d3e:	409a      	lsls	r2, r3
 8104d40:	68fb      	ldr	r3, [r7, #12]
 8104d42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104d48:	687a      	ldr	r2, [r7, #4]
 8104d4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104d4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8104d4e:	687b      	ldr	r3, [r7, #4]
 8104d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d52:	2b00      	cmp	r3, #0
 8104d54:	d00c      	beq.n	8104d70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8104d56:	687b      	ldr	r3, [r7, #4]
 8104d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d5a:	681a      	ldr	r2, [r3, #0]
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104d64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104d6a:	687a      	ldr	r2, [r7, #4]
 8104d6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104d6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	2200      	movs	r2, #0
 8104d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	2201      	movs	r2, #1
 8104d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d84:	2b00      	cmp	r3, #0
 8104d86:	d003      	beq.n	8104d90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8104d88:	687b      	ldr	r3, [r7, #4]
 8104d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d8c:	6878      	ldr	r0, [r7, #4]
 8104d8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8104d90:	2300      	movs	r3, #0
}
 8104d92:	4618      	mov	r0, r3
 8104d94:	3710      	adds	r7, #16
 8104d96:	46bd      	mov	sp, r7
 8104d98:	bd80      	pop	{r7, pc}
 8104d9a:	bf00      	nop

08104d9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8104d9c:	b580      	push	{r7, lr}
 8104d9e:	b08a      	sub	sp, #40	; 0x28
 8104da0:	af00      	add	r7, sp, #0
 8104da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8104da4:	2300      	movs	r3, #0
 8104da6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104da8:	4b67      	ldr	r3, [pc, #412]	; (8104f48 <HAL_DMA_IRQHandler+0x1ac>)
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	4a67      	ldr	r2, [pc, #412]	; (8104f4c <HAL_DMA_IRQHandler+0x1b0>)
 8104dae:	fba2 2303 	umull	r2, r3, r2, r3
 8104db2:	0a9b      	lsrs	r3, r3, #10
 8104db4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104dba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104dbc:	687b      	ldr	r3, [r7, #4]
 8104dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104dc0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8104dc2:	6a3b      	ldr	r3, [r7, #32]
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8104dc8:	69fb      	ldr	r3, [r7, #28]
 8104dca:	681b      	ldr	r3, [r3, #0]
 8104dcc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	681b      	ldr	r3, [r3, #0]
 8104dd2:	4a5f      	ldr	r2, [pc, #380]	; (8104f50 <HAL_DMA_IRQHandler+0x1b4>)
 8104dd4:	4293      	cmp	r3, r2
 8104dd6:	d04a      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	4a5d      	ldr	r2, [pc, #372]	; (8104f54 <HAL_DMA_IRQHandler+0x1b8>)
 8104dde:	4293      	cmp	r3, r2
 8104de0:	d045      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104de2:	687b      	ldr	r3, [r7, #4]
 8104de4:	681b      	ldr	r3, [r3, #0]
 8104de6:	4a5c      	ldr	r2, [pc, #368]	; (8104f58 <HAL_DMA_IRQHandler+0x1bc>)
 8104de8:	4293      	cmp	r3, r2
 8104dea:	d040      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	681b      	ldr	r3, [r3, #0]
 8104df0:	4a5a      	ldr	r2, [pc, #360]	; (8104f5c <HAL_DMA_IRQHandler+0x1c0>)
 8104df2:	4293      	cmp	r3, r2
 8104df4:	d03b      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104df6:	687b      	ldr	r3, [r7, #4]
 8104df8:	681b      	ldr	r3, [r3, #0]
 8104dfa:	4a59      	ldr	r2, [pc, #356]	; (8104f60 <HAL_DMA_IRQHandler+0x1c4>)
 8104dfc:	4293      	cmp	r3, r2
 8104dfe:	d036      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	681b      	ldr	r3, [r3, #0]
 8104e04:	4a57      	ldr	r2, [pc, #348]	; (8104f64 <HAL_DMA_IRQHandler+0x1c8>)
 8104e06:	4293      	cmp	r3, r2
 8104e08:	d031      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	4a56      	ldr	r2, [pc, #344]	; (8104f68 <HAL_DMA_IRQHandler+0x1cc>)
 8104e10:	4293      	cmp	r3, r2
 8104e12:	d02c      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	4a54      	ldr	r2, [pc, #336]	; (8104f6c <HAL_DMA_IRQHandler+0x1d0>)
 8104e1a:	4293      	cmp	r3, r2
 8104e1c:	d027      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	4a53      	ldr	r2, [pc, #332]	; (8104f70 <HAL_DMA_IRQHandler+0x1d4>)
 8104e24:	4293      	cmp	r3, r2
 8104e26:	d022      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	681b      	ldr	r3, [r3, #0]
 8104e2c:	4a51      	ldr	r2, [pc, #324]	; (8104f74 <HAL_DMA_IRQHandler+0x1d8>)
 8104e2e:	4293      	cmp	r3, r2
 8104e30:	d01d      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e32:	687b      	ldr	r3, [r7, #4]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	4a50      	ldr	r2, [pc, #320]	; (8104f78 <HAL_DMA_IRQHandler+0x1dc>)
 8104e38:	4293      	cmp	r3, r2
 8104e3a:	d018      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e3c:	687b      	ldr	r3, [r7, #4]
 8104e3e:	681b      	ldr	r3, [r3, #0]
 8104e40:	4a4e      	ldr	r2, [pc, #312]	; (8104f7c <HAL_DMA_IRQHandler+0x1e0>)
 8104e42:	4293      	cmp	r3, r2
 8104e44:	d013      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	4a4d      	ldr	r2, [pc, #308]	; (8104f80 <HAL_DMA_IRQHandler+0x1e4>)
 8104e4c:	4293      	cmp	r3, r2
 8104e4e:	d00e      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	681b      	ldr	r3, [r3, #0]
 8104e54:	4a4b      	ldr	r2, [pc, #300]	; (8104f84 <HAL_DMA_IRQHandler+0x1e8>)
 8104e56:	4293      	cmp	r3, r2
 8104e58:	d009      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	681b      	ldr	r3, [r3, #0]
 8104e5e:	4a4a      	ldr	r2, [pc, #296]	; (8104f88 <HAL_DMA_IRQHandler+0x1ec>)
 8104e60:	4293      	cmp	r3, r2
 8104e62:	d004      	beq.n	8104e6e <HAL_DMA_IRQHandler+0xd2>
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	681b      	ldr	r3, [r3, #0]
 8104e68:	4a48      	ldr	r2, [pc, #288]	; (8104f8c <HAL_DMA_IRQHandler+0x1f0>)
 8104e6a:	4293      	cmp	r3, r2
 8104e6c:	d101      	bne.n	8104e72 <HAL_DMA_IRQHandler+0xd6>
 8104e6e:	2301      	movs	r3, #1
 8104e70:	e000      	b.n	8104e74 <HAL_DMA_IRQHandler+0xd8>
 8104e72:	2300      	movs	r3, #0
 8104e74:	2b00      	cmp	r3, #0
 8104e76:	f000 842b 	beq.w	81056d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e7e:	f003 031f 	and.w	r3, r3, #31
 8104e82:	2208      	movs	r2, #8
 8104e84:	409a      	lsls	r2, r3
 8104e86:	69bb      	ldr	r3, [r7, #24]
 8104e88:	4013      	ands	r3, r2
 8104e8a:	2b00      	cmp	r3, #0
 8104e8c:	f000 80a2 	beq.w	8104fd4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	681b      	ldr	r3, [r3, #0]
 8104e94:	4a2e      	ldr	r2, [pc, #184]	; (8104f50 <HAL_DMA_IRQHandler+0x1b4>)
 8104e96:	4293      	cmp	r3, r2
 8104e98:	d04a      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	4a2d      	ldr	r2, [pc, #180]	; (8104f54 <HAL_DMA_IRQHandler+0x1b8>)
 8104ea0:	4293      	cmp	r3, r2
 8104ea2:	d045      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	4a2b      	ldr	r2, [pc, #172]	; (8104f58 <HAL_DMA_IRQHandler+0x1bc>)
 8104eaa:	4293      	cmp	r3, r2
 8104eac:	d040      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104eae:	687b      	ldr	r3, [r7, #4]
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	4a2a      	ldr	r2, [pc, #168]	; (8104f5c <HAL_DMA_IRQHandler+0x1c0>)
 8104eb4:	4293      	cmp	r3, r2
 8104eb6:	d03b      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	4a28      	ldr	r2, [pc, #160]	; (8104f60 <HAL_DMA_IRQHandler+0x1c4>)
 8104ebe:	4293      	cmp	r3, r2
 8104ec0:	d036      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	4a27      	ldr	r2, [pc, #156]	; (8104f64 <HAL_DMA_IRQHandler+0x1c8>)
 8104ec8:	4293      	cmp	r3, r2
 8104eca:	d031      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	681b      	ldr	r3, [r3, #0]
 8104ed0:	4a25      	ldr	r2, [pc, #148]	; (8104f68 <HAL_DMA_IRQHandler+0x1cc>)
 8104ed2:	4293      	cmp	r3, r2
 8104ed4:	d02c      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	681b      	ldr	r3, [r3, #0]
 8104eda:	4a24      	ldr	r2, [pc, #144]	; (8104f6c <HAL_DMA_IRQHandler+0x1d0>)
 8104edc:	4293      	cmp	r3, r2
 8104ede:	d027      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	681b      	ldr	r3, [r3, #0]
 8104ee4:	4a22      	ldr	r2, [pc, #136]	; (8104f70 <HAL_DMA_IRQHandler+0x1d4>)
 8104ee6:	4293      	cmp	r3, r2
 8104ee8:	d022      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	681b      	ldr	r3, [r3, #0]
 8104eee:	4a21      	ldr	r2, [pc, #132]	; (8104f74 <HAL_DMA_IRQHandler+0x1d8>)
 8104ef0:	4293      	cmp	r3, r2
 8104ef2:	d01d      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	681b      	ldr	r3, [r3, #0]
 8104ef8:	4a1f      	ldr	r2, [pc, #124]	; (8104f78 <HAL_DMA_IRQHandler+0x1dc>)
 8104efa:	4293      	cmp	r3, r2
 8104efc:	d018      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	681b      	ldr	r3, [r3, #0]
 8104f02:	4a1e      	ldr	r2, [pc, #120]	; (8104f7c <HAL_DMA_IRQHandler+0x1e0>)
 8104f04:	4293      	cmp	r3, r2
 8104f06:	d013      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	681b      	ldr	r3, [r3, #0]
 8104f0c:	4a1c      	ldr	r2, [pc, #112]	; (8104f80 <HAL_DMA_IRQHandler+0x1e4>)
 8104f0e:	4293      	cmp	r3, r2
 8104f10:	d00e      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	681b      	ldr	r3, [r3, #0]
 8104f16:	4a1b      	ldr	r2, [pc, #108]	; (8104f84 <HAL_DMA_IRQHandler+0x1e8>)
 8104f18:	4293      	cmp	r3, r2
 8104f1a:	d009      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	681b      	ldr	r3, [r3, #0]
 8104f20:	4a19      	ldr	r2, [pc, #100]	; (8104f88 <HAL_DMA_IRQHandler+0x1ec>)
 8104f22:	4293      	cmp	r3, r2
 8104f24:	d004      	beq.n	8104f30 <HAL_DMA_IRQHandler+0x194>
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	681b      	ldr	r3, [r3, #0]
 8104f2a:	4a18      	ldr	r2, [pc, #96]	; (8104f8c <HAL_DMA_IRQHandler+0x1f0>)
 8104f2c:	4293      	cmp	r3, r2
 8104f2e:	d12f      	bne.n	8104f90 <HAL_DMA_IRQHandler+0x1f4>
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	681b      	ldr	r3, [r3, #0]
 8104f36:	f003 0304 	and.w	r3, r3, #4
 8104f3a:	2b00      	cmp	r3, #0
 8104f3c:	bf14      	ite	ne
 8104f3e:	2301      	movne	r3, #1
 8104f40:	2300      	moveq	r3, #0
 8104f42:	b2db      	uxtb	r3, r3
 8104f44:	e02e      	b.n	8104fa4 <HAL_DMA_IRQHandler+0x208>
 8104f46:	bf00      	nop
 8104f48:	10000000 	.word	0x10000000
 8104f4c:	1b4e81b5 	.word	0x1b4e81b5
 8104f50:	40020010 	.word	0x40020010
 8104f54:	40020028 	.word	0x40020028
 8104f58:	40020040 	.word	0x40020040
 8104f5c:	40020058 	.word	0x40020058
 8104f60:	40020070 	.word	0x40020070
 8104f64:	40020088 	.word	0x40020088
 8104f68:	400200a0 	.word	0x400200a0
 8104f6c:	400200b8 	.word	0x400200b8
 8104f70:	40020410 	.word	0x40020410
 8104f74:	40020428 	.word	0x40020428
 8104f78:	40020440 	.word	0x40020440
 8104f7c:	40020458 	.word	0x40020458
 8104f80:	40020470 	.word	0x40020470
 8104f84:	40020488 	.word	0x40020488
 8104f88:	400204a0 	.word	0x400204a0
 8104f8c:	400204b8 	.word	0x400204b8
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	681b      	ldr	r3, [r3, #0]
 8104f96:	f003 0308 	and.w	r3, r3, #8
 8104f9a:	2b00      	cmp	r3, #0
 8104f9c:	bf14      	ite	ne
 8104f9e:	2301      	movne	r3, #1
 8104fa0:	2300      	moveq	r3, #0
 8104fa2:	b2db      	uxtb	r3, r3
 8104fa4:	2b00      	cmp	r3, #0
 8104fa6:	d015      	beq.n	8104fd4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	681b      	ldr	r3, [r3, #0]
 8104fac:	681a      	ldr	r2, [r3, #0]
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	681b      	ldr	r3, [r3, #0]
 8104fb2:	f022 0204 	bic.w	r2, r2, #4
 8104fb6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fbc:	f003 031f 	and.w	r3, r3, #31
 8104fc0:	2208      	movs	r2, #8
 8104fc2:	409a      	lsls	r2, r3
 8104fc4:	6a3b      	ldr	r3, [r7, #32]
 8104fc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104fcc:	f043 0201 	orr.w	r2, r3, #1
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fd8:	f003 031f 	and.w	r3, r3, #31
 8104fdc:	69ba      	ldr	r2, [r7, #24]
 8104fde:	fa22 f303 	lsr.w	r3, r2, r3
 8104fe2:	f003 0301 	and.w	r3, r3, #1
 8104fe6:	2b00      	cmp	r3, #0
 8104fe8:	d06e      	beq.n	81050c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	681b      	ldr	r3, [r3, #0]
 8104fee:	4a69      	ldr	r2, [pc, #420]	; (8105194 <HAL_DMA_IRQHandler+0x3f8>)
 8104ff0:	4293      	cmp	r3, r2
 8104ff2:	d04a      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	681b      	ldr	r3, [r3, #0]
 8104ff8:	4a67      	ldr	r2, [pc, #412]	; (8105198 <HAL_DMA_IRQHandler+0x3fc>)
 8104ffa:	4293      	cmp	r3, r2
 8104ffc:	d045      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8104ffe:	687b      	ldr	r3, [r7, #4]
 8105000:	681b      	ldr	r3, [r3, #0]
 8105002:	4a66      	ldr	r2, [pc, #408]	; (810519c <HAL_DMA_IRQHandler+0x400>)
 8105004:	4293      	cmp	r3, r2
 8105006:	d040      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	681b      	ldr	r3, [r3, #0]
 810500c:	4a64      	ldr	r2, [pc, #400]	; (81051a0 <HAL_DMA_IRQHandler+0x404>)
 810500e:	4293      	cmp	r3, r2
 8105010:	d03b      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8105012:	687b      	ldr	r3, [r7, #4]
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	4a63      	ldr	r2, [pc, #396]	; (81051a4 <HAL_DMA_IRQHandler+0x408>)
 8105018:	4293      	cmp	r3, r2
 810501a:	d036      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	681b      	ldr	r3, [r3, #0]
 8105020:	4a61      	ldr	r2, [pc, #388]	; (81051a8 <HAL_DMA_IRQHandler+0x40c>)
 8105022:	4293      	cmp	r3, r2
 8105024:	d031      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	681b      	ldr	r3, [r3, #0]
 810502a:	4a60      	ldr	r2, [pc, #384]	; (81051ac <HAL_DMA_IRQHandler+0x410>)
 810502c:	4293      	cmp	r3, r2
 810502e:	d02c      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	681b      	ldr	r3, [r3, #0]
 8105034:	4a5e      	ldr	r2, [pc, #376]	; (81051b0 <HAL_DMA_IRQHandler+0x414>)
 8105036:	4293      	cmp	r3, r2
 8105038:	d027      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	681b      	ldr	r3, [r3, #0]
 810503e:	4a5d      	ldr	r2, [pc, #372]	; (81051b4 <HAL_DMA_IRQHandler+0x418>)
 8105040:	4293      	cmp	r3, r2
 8105042:	d022      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8105044:	687b      	ldr	r3, [r7, #4]
 8105046:	681b      	ldr	r3, [r3, #0]
 8105048:	4a5b      	ldr	r2, [pc, #364]	; (81051b8 <HAL_DMA_IRQHandler+0x41c>)
 810504a:	4293      	cmp	r3, r2
 810504c:	d01d      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	4a5a      	ldr	r2, [pc, #360]	; (81051bc <HAL_DMA_IRQHandler+0x420>)
 8105054:	4293      	cmp	r3, r2
 8105056:	d018      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8105058:	687b      	ldr	r3, [r7, #4]
 810505a:	681b      	ldr	r3, [r3, #0]
 810505c:	4a58      	ldr	r2, [pc, #352]	; (81051c0 <HAL_DMA_IRQHandler+0x424>)
 810505e:	4293      	cmp	r3, r2
 8105060:	d013      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	681b      	ldr	r3, [r3, #0]
 8105066:	4a57      	ldr	r2, [pc, #348]	; (81051c4 <HAL_DMA_IRQHandler+0x428>)
 8105068:	4293      	cmp	r3, r2
 810506a:	d00e      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	4a55      	ldr	r2, [pc, #340]	; (81051c8 <HAL_DMA_IRQHandler+0x42c>)
 8105072:	4293      	cmp	r3, r2
 8105074:	d009      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8105076:	687b      	ldr	r3, [r7, #4]
 8105078:	681b      	ldr	r3, [r3, #0]
 810507a:	4a54      	ldr	r2, [pc, #336]	; (81051cc <HAL_DMA_IRQHandler+0x430>)
 810507c:	4293      	cmp	r3, r2
 810507e:	d004      	beq.n	810508a <HAL_DMA_IRQHandler+0x2ee>
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	4a52      	ldr	r2, [pc, #328]	; (81051d0 <HAL_DMA_IRQHandler+0x434>)
 8105086:	4293      	cmp	r3, r2
 8105088:	d10a      	bne.n	81050a0 <HAL_DMA_IRQHandler+0x304>
 810508a:	687b      	ldr	r3, [r7, #4]
 810508c:	681b      	ldr	r3, [r3, #0]
 810508e:	695b      	ldr	r3, [r3, #20]
 8105090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105094:	2b00      	cmp	r3, #0
 8105096:	bf14      	ite	ne
 8105098:	2301      	movne	r3, #1
 810509a:	2300      	moveq	r3, #0
 810509c:	b2db      	uxtb	r3, r3
 810509e:	e003      	b.n	81050a8 <HAL_DMA_IRQHandler+0x30c>
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	681b      	ldr	r3, [r3, #0]
 81050a6:	2300      	movs	r3, #0
 81050a8:	2b00      	cmp	r3, #0
 81050aa:	d00d      	beq.n	81050c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050b0:	f003 031f 	and.w	r3, r3, #31
 81050b4:	2201      	movs	r2, #1
 81050b6:	409a      	lsls	r2, r3
 81050b8:	6a3b      	ldr	r3, [r7, #32]
 81050ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81050bc:	687b      	ldr	r3, [r7, #4]
 81050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81050c0:	f043 0202 	orr.w	r2, r3, #2
 81050c4:	687b      	ldr	r3, [r7, #4]
 81050c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050cc:	f003 031f 	and.w	r3, r3, #31
 81050d0:	2204      	movs	r2, #4
 81050d2:	409a      	lsls	r2, r3
 81050d4:	69bb      	ldr	r3, [r7, #24]
 81050d6:	4013      	ands	r3, r2
 81050d8:	2b00      	cmp	r3, #0
 81050da:	f000 808f 	beq.w	81051fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81050de:	687b      	ldr	r3, [r7, #4]
 81050e0:	681b      	ldr	r3, [r3, #0]
 81050e2:	4a2c      	ldr	r2, [pc, #176]	; (8105194 <HAL_DMA_IRQHandler+0x3f8>)
 81050e4:	4293      	cmp	r3, r2
 81050e6:	d04a      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 81050e8:	687b      	ldr	r3, [r7, #4]
 81050ea:	681b      	ldr	r3, [r3, #0]
 81050ec:	4a2a      	ldr	r2, [pc, #168]	; (8105198 <HAL_DMA_IRQHandler+0x3fc>)
 81050ee:	4293      	cmp	r3, r2
 81050f0:	d045      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	681b      	ldr	r3, [r3, #0]
 81050f6:	4a29      	ldr	r2, [pc, #164]	; (810519c <HAL_DMA_IRQHandler+0x400>)
 81050f8:	4293      	cmp	r3, r2
 81050fa:	d040      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	681b      	ldr	r3, [r3, #0]
 8105100:	4a27      	ldr	r2, [pc, #156]	; (81051a0 <HAL_DMA_IRQHandler+0x404>)
 8105102:	4293      	cmp	r3, r2
 8105104:	d03b      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	681b      	ldr	r3, [r3, #0]
 810510a:	4a26      	ldr	r2, [pc, #152]	; (81051a4 <HAL_DMA_IRQHandler+0x408>)
 810510c:	4293      	cmp	r3, r2
 810510e:	d036      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 8105110:	687b      	ldr	r3, [r7, #4]
 8105112:	681b      	ldr	r3, [r3, #0]
 8105114:	4a24      	ldr	r2, [pc, #144]	; (81051a8 <HAL_DMA_IRQHandler+0x40c>)
 8105116:	4293      	cmp	r3, r2
 8105118:	d031      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 810511a:	687b      	ldr	r3, [r7, #4]
 810511c:	681b      	ldr	r3, [r3, #0]
 810511e:	4a23      	ldr	r2, [pc, #140]	; (81051ac <HAL_DMA_IRQHandler+0x410>)
 8105120:	4293      	cmp	r3, r2
 8105122:	d02c      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 8105124:	687b      	ldr	r3, [r7, #4]
 8105126:	681b      	ldr	r3, [r3, #0]
 8105128:	4a21      	ldr	r2, [pc, #132]	; (81051b0 <HAL_DMA_IRQHandler+0x414>)
 810512a:	4293      	cmp	r3, r2
 810512c:	d027      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	681b      	ldr	r3, [r3, #0]
 8105132:	4a20      	ldr	r2, [pc, #128]	; (81051b4 <HAL_DMA_IRQHandler+0x418>)
 8105134:	4293      	cmp	r3, r2
 8105136:	d022      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 8105138:	687b      	ldr	r3, [r7, #4]
 810513a:	681b      	ldr	r3, [r3, #0]
 810513c:	4a1e      	ldr	r2, [pc, #120]	; (81051b8 <HAL_DMA_IRQHandler+0x41c>)
 810513e:	4293      	cmp	r3, r2
 8105140:	d01d      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	681b      	ldr	r3, [r3, #0]
 8105146:	4a1d      	ldr	r2, [pc, #116]	; (81051bc <HAL_DMA_IRQHandler+0x420>)
 8105148:	4293      	cmp	r3, r2
 810514a:	d018      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	4a1b      	ldr	r2, [pc, #108]	; (81051c0 <HAL_DMA_IRQHandler+0x424>)
 8105152:	4293      	cmp	r3, r2
 8105154:	d013      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	681b      	ldr	r3, [r3, #0]
 810515a:	4a1a      	ldr	r2, [pc, #104]	; (81051c4 <HAL_DMA_IRQHandler+0x428>)
 810515c:	4293      	cmp	r3, r2
 810515e:	d00e      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	681b      	ldr	r3, [r3, #0]
 8105164:	4a18      	ldr	r2, [pc, #96]	; (81051c8 <HAL_DMA_IRQHandler+0x42c>)
 8105166:	4293      	cmp	r3, r2
 8105168:	d009      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	681b      	ldr	r3, [r3, #0]
 810516e:	4a17      	ldr	r2, [pc, #92]	; (81051cc <HAL_DMA_IRQHandler+0x430>)
 8105170:	4293      	cmp	r3, r2
 8105172:	d004      	beq.n	810517e <HAL_DMA_IRQHandler+0x3e2>
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	681b      	ldr	r3, [r3, #0]
 8105178:	4a15      	ldr	r2, [pc, #84]	; (81051d0 <HAL_DMA_IRQHandler+0x434>)
 810517a:	4293      	cmp	r3, r2
 810517c:	d12a      	bne.n	81051d4 <HAL_DMA_IRQHandler+0x438>
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	681b      	ldr	r3, [r3, #0]
 8105182:	681b      	ldr	r3, [r3, #0]
 8105184:	f003 0302 	and.w	r3, r3, #2
 8105188:	2b00      	cmp	r3, #0
 810518a:	bf14      	ite	ne
 810518c:	2301      	movne	r3, #1
 810518e:	2300      	moveq	r3, #0
 8105190:	b2db      	uxtb	r3, r3
 8105192:	e023      	b.n	81051dc <HAL_DMA_IRQHandler+0x440>
 8105194:	40020010 	.word	0x40020010
 8105198:	40020028 	.word	0x40020028
 810519c:	40020040 	.word	0x40020040
 81051a0:	40020058 	.word	0x40020058
 81051a4:	40020070 	.word	0x40020070
 81051a8:	40020088 	.word	0x40020088
 81051ac:	400200a0 	.word	0x400200a0
 81051b0:	400200b8 	.word	0x400200b8
 81051b4:	40020410 	.word	0x40020410
 81051b8:	40020428 	.word	0x40020428
 81051bc:	40020440 	.word	0x40020440
 81051c0:	40020458 	.word	0x40020458
 81051c4:	40020470 	.word	0x40020470
 81051c8:	40020488 	.word	0x40020488
 81051cc:	400204a0 	.word	0x400204a0
 81051d0:	400204b8 	.word	0x400204b8
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	681b      	ldr	r3, [r3, #0]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	2300      	movs	r3, #0
 81051dc:	2b00      	cmp	r3, #0
 81051de:	d00d      	beq.n	81051fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81051e4:	f003 031f 	and.w	r3, r3, #31
 81051e8:	2204      	movs	r2, #4
 81051ea:	409a      	lsls	r2, r3
 81051ec:	6a3b      	ldr	r3, [r7, #32]
 81051ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051f4:	f043 0204 	orr.w	r2, r3, #4
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105200:	f003 031f 	and.w	r3, r3, #31
 8105204:	2210      	movs	r2, #16
 8105206:	409a      	lsls	r2, r3
 8105208:	69bb      	ldr	r3, [r7, #24]
 810520a:	4013      	ands	r3, r2
 810520c:	2b00      	cmp	r3, #0
 810520e:	f000 80a6 	beq.w	810535e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	4a85      	ldr	r2, [pc, #532]	; (810542c <HAL_DMA_IRQHandler+0x690>)
 8105218:	4293      	cmp	r3, r2
 810521a:	d04a      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	681b      	ldr	r3, [r3, #0]
 8105220:	4a83      	ldr	r2, [pc, #524]	; (8105430 <HAL_DMA_IRQHandler+0x694>)
 8105222:	4293      	cmp	r3, r2
 8105224:	d045      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	4a82      	ldr	r2, [pc, #520]	; (8105434 <HAL_DMA_IRQHandler+0x698>)
 810522c:	4293      	cmp	r3, r2
 810522e:	d040      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	4a80      	ldr	r2, [pc, #512]	; (8105438 <HAL_DMA_IRQHandler+0x69c>)
 8105236:	4293      	cmp	r3, r2
 8105238:	d03b      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 810523a:	687b      	ldr	r3, [r7, #4]
 810523c:	681b      	ldr	r3, [r3, #0]
 810523e:	4a7f      	ldr	r2, [pc, #508]	; (810543c <HAL_DMA_IRQHandler+0x6a0>)
 8105240:	4293      	cmp	r3, r2
 8105242:	d036      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 8105244:	687b      	ldr	r3, [r7, #4]
 8105246:	681b      	ldr	r3, [r3, #0]
 8105248:	4a7d      	ldr	r2, [pc, #500]	; (8105440 <HAL_DMA_IRQHandler+0x6a4>)
 810524a:	4293      	cmp	r3, r2
 810524c:	d031      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	4a7c      	ldr	r2, [pc, #496]	; (8105444 <HAL_DMA_IRQHandler+0x6a8>)
 8105254:	4293      	cmp	r3, r2
 8105256:	d02c      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	681b      	ldr	r3, [r3, #0]
 810525c:	4a7a      	ldr	r2, [pc, #488]	; (8105448 <HAL_DMA_IRQHandler+0x6ac>)
 810525e:	4293      	cmp	r3, r2
 8105260:	d027      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	681b      	ldr	r3, [r3, #0]
 8105266:	4a79      	ldr	r2, [pc, #484]	; (810544c <HAL_DMA_IRQHandler+0x6b0>)
 8105268:	4293      	cmp	r3, r2
 810526a:	d022      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 810526c:	687b      	ldr	r3, [r7, #4]
 810526e:	681b      	ldr	r3, [r3, #0]
 8105270:	4a77      	ldr	r2, [pc, #476]	; (8105450 <HAL_DMA_IRQHandler+0x6b4>)
 8105272:	4293      	cmp	r3, r2
 8105274:	d01d      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 8105276:	687b      	ldr	r3, [r7, #4]
 8105278:	681b      	ldr	r3, [r3, #0]
 810527a:	4a76      	ldr	r2, [pc, #472]	; (8105454 <HAL_DMA_IRQHandler+0x6b8>)
 810527c:	4293      	cmp	r3, r2
 810527e:	d018      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 8105280:	687b      	ldr	r3, [r7, #4]
 8105282:	681b      	ldr	r3, [r3, #0]
 8105284:	4a74      	ldr	r2, [pc, #464]	; (8105458 <HAL_DMA_IRQHandler+0x6bc>)
 8105286:	4293      	cmp	r3, r2
 8105288:	d013      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 810528a:	687b      	ldr	r3, [r7, #4]
 810528c:	681b      	ldr	r3, [r3, #0]
 810528e:	4a73      	ldr	r2, [pc, #460]	; (810545c <HAL_DMA_IRQHandler+0x6c0>)
 8105290:	4293      	cmp	r3, r2
 8105292:	d00e      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	681b      	ldr	r3, [r3, #0]
 8105298:	4a71      	ldr	r2, [pc, #452]	; (8105460 <HAL_DMA_IRQHandler+0x6c4>)
 810529a:	4293      	cmp	r3, r2
 810529c:	d009      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	681b      	ldr	r3, [r3, #0]
 81052a2:	4a70      	ldr	r2, [pc, #448]	; (8105464 <HAL_DMA_IRQHandler+0x6c8>)
 81052a4:	4293      	cmp	r3, r2
 81052a6:	d004      	beq.n	81052b2 <HAL_DMA_IRQHandler+0x516>
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	681b      	ldr	r3, [r3, #0]
 81052ac:	4a6e      	ldr	r2, [pc, #440]	; (8105468 <HAL_DMA_IRQHandler+0x6cc>)
 81052ae:	4293      	cmp	r3, r2
 81052b0:	d10a      	bne.n	81052c8 <HAL_DMA_IRQHandler+0x52c>
 81052b2:	687b      	ldr	r3, [r7, #4]
 81052b4:	681b      	ldr	r3, [r3, #0]
 81052b6:	681b      	ldr	r3, [r3, #0]
 81052b8:	f003 0308 	and.w	r3, r3, #8
 81052bc:	2b00      	cmp	r3, #0
 81052be:	bf14      	ite	ne
 81052c0:	2301      	movne	r3, #1
 81052c2:	2300      	moveq	r3, #0
 81052c4:	b2db      	uxtb	r3, r3
 81052c6:	e009      	b.n	81052dc <HAL_DMA_IRQHandler+0x540>
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	681b      	ldr	r3, [r3, #0]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	f003 0304 	and.w	r3, r3, #4
 81052d2:	2b00      	cmp	r3, #0
 81052d4:	bf14      	ite	ne
 81052d6:	2301      	movne	r3, #1
 81052d8:	2300      	moveq	r3, #0
 81052da:	b2db      	uxtb	r3, r3
 81052dc:	2b00      	cmp	r3, #0
 81052de:	d03e      	beq.n	810535e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052e4:	f003 031f 	and.w	r3, r3, #31
 81052e8:	2210      	movs	r2, #16
 81052ea:	409a      	lsls	r2, r3
 81052ec:	6a3b      	ldr	r3, [r7, #32]
 81052ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	681b      	ldr	r3, [r3, #0]
 81052f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81052fa:	2b00      	cmp	r3, #0
 81052fc:	d018      	beq.n	8105330 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	681b      	ldr	r3, [r3, #0]
 8105304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8105308:	2b00      	cmp	r3, #0
 810530a:	d108      	bne.n	810531e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105310:	2b00      	cmp	r3, #0
 8105312:	d024      	beq.n	810535e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105318:	6878      	ldr	r0, [r7, #4]
 810531a:	4798      	blx	r3
 810531c:	e01f      	b.n	810535e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810531e:	687b      	ldr	r3, [r7, #4]
 8105320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105322:	2b00      	cmp	r3, #0
 8105324:	d01b      	beq.n	810535e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8105326:	687b      	ldr	r3, [r7, #4]
 8105328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810532a:	6878      	ldr	r0, [r7, #4]
 810532c:	4798      	blx	r3
 810532e:	e016      	b.n	810535e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105330:	687b      	ldr	r3, [r7, #4]
 8105332:	681b      	ldr	r3, [r3, #0]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810533a:	2b00      	cmp	r3, #0
 810533c:	d107      	bne.n	810534e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	681b      	ldr	r3, [r3, #0]
 8105342:	681a      	ldr	r2, [r3, #0]
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	681b      	ldr	r3, [r3, #0]
 8105348:	f022 0208 	bic.w	r2, r2, #8
 810534c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105352:	2b00      	cmp	r3, #0
 8105354:	d003      	beq.n	810535e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810535a:	6878      	ldr	r0, [r7, #4]
 810535c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105362:	f003 031f 	and.w	r3, r3, #31
 8105366:	2220      	movs	r2, #32
 8105368:	409a      	lsls	r2, r3
 810536a:	69bb      	ldr	r3, [r7, #24]
 810536c:	4013      	ands	r3, r2
 810536e:	2b00      	cmp	r3, #0
 8105370:	f000 8110 	beq.w	8105594 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	4a2c      	ldr	r2, [pc, #176]	; (810542c <HAL_DMA_IRQHandler+0x690>)
 810537a:	4293      	cmp	r3, r2
 810537c:	d04a      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	4a2b      	ldr	r2, [pc, #172]	; (8105430 <HAL_DMA_IRQHandler+0x694>)
 8105384:	4293      	cmp	r3, r2
 8105386:	d045      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 8105388:	687b      	ldr	r3, [r7, #4]
 810538a:	681b      	ldr	r3, [r3, #0]
 810538c:	4a29      	ldr	r2, [pc, #164]	; (8105434 <HAL_DMA_IRQHandler+0x698>)
 810538e:	4293      	cmp	r3, r2
 8105390:	d040      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	681b      	ldr	r3, [r3, #0]
 8105396:	4a28      	ldr	r2, [pc, #160]	; (8105438 <HAL_DMA_IRQHandler+0x69c>)
 8105398:	4293      	cmp	r3, r2
 810539a:	d03b      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 810539c:	687b      	ldr	r3, [r7, #4]
 810539e:	681b      	ldr	r3, [r3, #0]
 81053a0:	4a26      	ldr	r2, [pc, #152]	; (810543c <HAL_DMA_IRQHandler+0x6a0>)
 81053a2:	4293      	cmp	r3, r2
 81053a4:	d036      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 81053a6:	687b      	ldr	r3, [r7, #4]
 81053a8:	681b      	ldr	r3, [r3, #0]
 81053aa:	4a25      	ldr	r2, [pc, #148]	; (8105440 <HAL_DMA_IRQHandler+0x6a4>)
 81053ac:	4293      	cmp	r3, r2
 81053ae:	d031      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	4a23      	ldr	r2, [pc, #140]	; (8105444 <HAL_DMA_IRQHandler+0x6a8>)
 81053b6:	4293      	cmp	r3, r2
 81053b8:	d02c      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	4a22      	ldr	r2, [pc, #136]	; (8105448 <HAL_DMA_IRQHandler+0x6ac>)
 81053c0:	4293      	cmp	r3, r2
 81053c2:	d027      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	681b      	ldr	r3, [r3, #0]
 81053c8:	4a20      	ldr	r2, [pc, #128]	; (810544c <HAL_DMA_IRQHandler+0x6b0>)
 81053ca:	4293      	cmp	r3, r2
 81053cc:	d022      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 81053ce:	687b      	ldr	r3, [r7, #4]
 81053d0:	681b      	ldr	r3, [r3, #0]
 81053d2:	4a1f      	ldr	r2, [pc, #124]	; (8105450 <HAL_DMA_IRQHandler+0x6b4>)
 81053d4:	4293      	cmp	r3, r2
 81053d6:	d01d      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	681b      	ldr	r3, [r3, #0]
 81053dc:	4a1d      	ldr	r2, [pc, #116]	; (8105454 <HAL_DMA_IRQHandler+0x6b8>)
 81053de:	4293      	cmp	r3, r2
 81053e0:	d018      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	681b      	ldr	r3, [r3, #0]
 81053e6:	4a1c      	ldr	r2, [pc, #112]	; (8105458 <HAL_DMA_IRQHandler+0x6bc>)
 81053e8:	4293      	cmp	r3, r2
 81053ea:	d013      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 81053ec:	687b      	ldr	r3, [r7, #4]
 81053ee:	681b      	ldr	r3, [r3, #0]
 81053f0:	4a1a      	ldr	r2, [pc, #104]	; (810545c <HAL_DMA_IRQHandler+0x6c0>)
 81053f2:	4293      	cmp	r3, r2
 81053f4:	d00e      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	4a19      	ldr	r2, [pc, #100]	; (8105460 <HAL_DMA_IRQHandler+0x6c4>)
 81053fc:	4293      	cmp	r3, r2
 81053fe:	d009      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	681b      	ldr	r3, [r3, #0]
 8105404:	4a17      	ldr	r2, [pc, #92]	; (8105464 <HAL_DMA_IRQHandler+0x6c8>)
 8105406:	4293      	cmp	r3, r2
 8105408:	d004      	beq.n	8105414 <HAL_DMA_IRQHandler+0x678>
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	681b      	ldr	r3, [r3, #0]
 810540e:	4a16      	ldr	r2, [pc, #88]	; (8105468 <HAL_DMA_IRQHandler+0x6cc>)
 8105410:	4293      	cmp	r3, r2
 8105412:	d12b      	bne.n	810546c <HAL_DMA_IRQHandler+0x6d0>
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	681b      	ldr	r3, [r3, #0]
 8105418:	681b      	ldr	r3, [r3, #0]
 810541a:	f003 0310 	and.w	r3, r3, #16
 810541e:	2b00      	cmp	r3, #0
 8105420:	bf14      	ite	ne
 8105422:	2301      	movne	r3, #1
 8105424:	2300      	moveq	r3, #0
 8105426:	b2db      	uxtb	r3, r3
 8105428:	e02a      	b.n	8105480 <HAL_DMA_IRQHandler+0x6e4>
 810542a:	bf00      	nop
 810542c:	40020010 	.word	0x40020010
 8105430:	40020028 	.word	0x40020028
 8105434:	40020040 	.word	0x40020040
 8105438:	40020058 	.word	0x40020058
 810543c:	40020070 	.word	0x40020070
 8105440:	40020088 	.word	0x40020088
 8105444:	400200a0 	.word	0x400200a0
 8105448:	400200b8 	.word	0x400200b8
 810544c:	40020410 	.word	0x40020410
 8105450:	40020428 	.word	0x40020428
 8105454:	40020440 	.word	0x40020440
 8105458:	40020458 	.word	0x40020458
 810545c:	40020470 	.word	0x40020470
 8105460:	40020488 	.word	0x40020488
 8105464:	400204a0 	.word	0x400204a0
 8105468:	400204b8 	.word	0x400204b8
 810546c:	687b      	ldr	r3, [r7, #4]
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	f003 0302 	and.w	r3, r3, #2
 8105476:	2b00      	cmp	r3, #0
 8105478:	bf14      	ite	ne
 810547a:	2301      	movne	r3, #1
 810547c:	2300      	moveq	r3, #0
 810547e:	b2db      	uxtb	r3, r3
 8105480:	2b00      	cmp	r3, #0
 8105482:	f000 8087 	beq.w	8105594 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8105486:	687b      	ldr	r3, [r7, #4]
 8105488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810548a:	f003 031f 	and.w	r3, r3, #31
 810548e:	2220      	movs	r2, #32
 8105490:	409a      	lsls	r2, r3
 8105492:	6a3b      	ldr	r3, [r7, #32]
 8105494:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810549c:	b2db      	uxtb	r3, r3
 810549e:	2b04      	cmp	r3, #4
 81054a0:	d139      	bne.n	8105516 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81054a2:	687b      	ldr	r3, [r7, #4]
 81054a4:	681b      	ldr	r3, [r3, #0]
 81054a6:	681a      	ldr	r2, [r3, #0]
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	681b      	ldr	r3, [r3, #0]
 81054ac:	f022 0216 	bic.w	r2, r2, #22
 81054b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81054b2:	687b      	ldr	r3, [r7, #4]
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	695a      	ldr	r2, [r3, #20]
 81054b8:	687b      	ldr	r3, [r7, #4]
 81054ba:	681b      	ldr	r3, [r3, #0]
 81054bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81054c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81054c6:	2b00      	cmp	r3, #0
 81054c8:	d103      	bne.n	81054d2 <HAL_DMA_IRQHandler+0x736>
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81054ce:	2b00      	cmp	r3, #0
 81054d0:	d007      	beq.n	81054e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81054d2:	687b      	ldr	r3, [r7, #4]
 81054d4:	681b      	ldr	r3, [r3, #0]
 81054d6:	681a      	ldr	r2, [r3, #0]
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	f022 0208 	bic.w	r2, r2, #8
 81054e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81054e6:	f003 031f 	and.w	r3, r3, #31
 81054ea:	223f      	movs	r2, #63	; 0x3f
 81054ec:	409a      	lsls	r2, r3
 81054ee:	6a3b      	ldr	r3, [r7, #32]
 81054f0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	2200      	movs	r2, #0
 81054f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	2201      	movs	r2, #1
 81054fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105506:	2b00      	cmp	r3, #0
 8105508:	f000 834a 	beq.w	8105ba0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105510:	6878      	ldr	r0, [r7, #4]
 8105512:	4798      	blx	r3
          }
          return;
 8105514:	e344      	b.n	8105ba0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	681b      	ldr	r3, [r3, #0]
 810551a:	681b      	ldr	r3, [r3, #0]
 810551c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8105520:	2b00      	cmp	r3, #0
 8105522:	d018      	beq.n	8105556 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	681b      	ldr	r3, [r3, #0]
 810552a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810552e:	2b00      	cmp	r3, #0
 8105530:	d108      	bne.n	8105544 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8105532:	687b      	ldr	r3, [r7, #4]
 8105534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105536:	2b00      	cmp	r3, #0
 8105538:	d02c      	beq.n	8105594 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 810553a:	687b      	ldr	r3, [r7, #4]
 810553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810553e:	6878      	ldr	r0, [r7, #4]
 8105540:	4798      	blx	r3
 8105542:	e027      	b.n	8105594 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8105544:	687b      	ldr	r3, [r7, #4]
 8105546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105548:	2b00      	cmp	r3, #0
 810554a:	d023      	beq.n	8105594 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105550:	6878      	ldr	r0, [r7, #4]
 8105552:	4798      	blx	r3
 8105554:	e01e      	b.n	8105594 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	681b      	ldr	r3, [r3, #0]
 810555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105560:	2b00      	cmp	r3, #0
 8105562:	d10f      	bne.n	8105584 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	681a      	ldr	r2, [r3, #0]
 810556a:	687b      	ldr	r3, [r7, #4]
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	f022 0210 	bic.w	r2, r2, #16
 8105572:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8105574:	687b      	ldr	r3, [r7, #4]
 8105576:	2200      	movs	r2, #0
 8105578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	2201      	movs	r2, #1
 8105580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105588:	2b00      	cmp	r3, #0
 810558a:	d003      	beq.n	8105594 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105590:	6878      	ldr	r0, [r7, #4]
 8105592:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8105594:	687b      	ldr	r3, [r7, #4]
 8105596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105598:	2b00      	cmp	r3, #0
 810559a:	f000 8306 	beq.w	8105baa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810559e:	687b      	ldr	r3, [r7, #4]
 81055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055a2:	f003 0301 	and.w	r3, r3, #1
 81055a6:	2b00      	cmp	r3, #0
 81055a8:	f000 8088 	beq.w	81056bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	2204      	movs	r2, #4
 81055b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81055b4:	687b      	ldr	r3, [r7, #4]
 81055b6:	681b      	ldr	r3, [r3, #0]
 81055b8:	4a7a      	ldr	r2, [pc, #488]	; (81057a4 <HAL_DMA_IRQHandler+0xa08>)
 81055ba:	4293      	cmp	r3, r2
 81055bc:	d04a      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	681b      	ldr	r3, [r3, #0]
 81055c2:	4a79      	ldr	r2, [pc, #484]	; (81057a8 <HAL_DMA_IRQHandler+0xa0c>)
 81055c4:	4293      	cmp	r3, r2
 81055c6:	d045      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	681b      	ldr	r3, [r3, #0]
 81055cc:	4a77      	ldr	r2, [pc, #476]	; (81057ac <HAL_DMA_IRQHandler+0xa10>)
 81055ce:	4293      	cmp	r3, r2
 81055d0:	d040      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	681b      	ldr	r3, [r3, #0]
 81055d6:	4a76      	ldr	r2, [pc, #472]	; (81057b0 <HAL_DMA_IRQHandler+0xa14>)
 81055d8:	4293      	cmp	r3, r2
 81055da:	d03b      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 81055dc:	687b      	ldr	r3, [r7, #4]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	4a74      	ldr	r2, [pc, #464]	; (81057b4 <HAL_DMA_IRQHandler+0xa18>)
 81055e2:	4293      	cmp	r3, r2
 81055e4:	d036      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	4a73      	ldr	r2, [pc, #460]	; (81057b8 <HAL_DMA_IRQHandler+0xa1c>)
 81055ec:	4293      	cmp	r3, r2
 81055ee:	d031      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 81055f0:	687b      	ldr	r3, [r7, #4]
 81055f2:	681b      	ldr	r3, [r3, #0]
 81055f4:	4a71      	ldr	r2, [pc, #452]	; (81057bc <HAL_DMA_IRQHandler+0xa20>)
 81055f6:	4293      	cmp	r3, r2
 81055f8:	d02c      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	681b      	ldr	r3, [r3, #0]
 81055fe:	4a70      	ldr	r2, [pc, #448]	; (81057c0 <HAL_DMA_IRQHandler+0xa24>)
 8105600:	4293      	cmp	r3, r2
 8105602:	d027      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 8105604:	687b      	ldr	r3, [r7, #4]
 8105606:	681b      	ldr	r3, [r3, #0]
 8105608:	4a6e      	ldr	r2, [pc, #440]	; (81057c4 <HAL_DMA_IRQHandler+0xa28>)
 810560a:	4293      	cmp	r3, r2
 810560c:	d022      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 810560e:	687b      	ldr	r3, [r7, #4]
 8105610:	681b      	ldr	r3, [r3, #0]
 8105612:	4a6d      	ldr	r2, [pc, #436]	; (81057c8 <HAL_DMA_IRQHandler+0xa2c>)
 8105614:	4293      	cmp	r3, r2
 8105616:	d01d      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	681b      	ldr	r3, [r3, #0]
 810561c:	4a6b      	ldr	r2, [pc, #428]	; (81057cc <HAL_DMA_IRQHandler+0xa30>)
 810561e:	4293      	cmp	r3, r2
 8105620:	d018      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 8105622:	687b      	ldr	r3, [r7, #4]
 8105624:	681b      	ldr	r3, [r3, #0]
 8105626:	4a6a      	ldr	r2, [pc, #424]	; (81057d0 <HAL_DMA_IRQHandler+0xa34>)
 8105628:	4293      	cmp	r3, r2
 810562a:	d013      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	681b      	ldr	r3, [r3, #0]
 8105630:	4a68      	ldr	r2, [pc, #416]	; (81057d4 <HAL_DMA_IRQHandler+0xa38>)
 8105632:	4293      	cmp	r3, r2
 8105634:	d00e      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	681b      	ldr	r3, [r3, #0]
 810563a:	4a67      	ldr	r2, [pc, #412]	; (81057d8 <HAL_DMA_IRQHandler+0xa3c>)
 810563c:	4293      	cmp	r3, r2
 810563e:	d009      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	681b      	ldr	r3, [r3, #0]
 8105644:	4a65      	ldr	r2, [pc, #404]	; (81057dc <HAL_DMA_IRQHandler+0xa40>)
 8105646:	4293      	cmp	r3, r2
 8105648:	d004      	beq.n	8105654 <HAL_DMA_IRQHandler+0x8b8>
 810564a:	687b      	ldr	r3, [r7, #4]
 810564c:	681b      	ldr	r3, [r3, #0]
 810564e:	4a64      	ldr	r2, [pc, #400]	; (81057e0 <HAL_DMA_IRQHandler+0xa44>)
 8105650:	4293      	cmp	r3, r2
 8105652:	d108      	bne.n	8105666 <HAL_DMA_IRQHandler+0x8ca>
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	681a      	ldr	r2, [r3, #0]
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	681b      	ldr	r3, [r3, #0]
 810565e:	f022 0201 	bic.w	r2, r2, #1
 8105662:	601a      	str	r2, [r3, #0]
 8105664:	e007      	b.n	8105676 <HAL_DMA_IRQHandler+0x8da>
 8105666:	687b      	ldr	r3, [r7, #4]
 8105668:	681b      	ldr	r3, [r3, #0]
 810566a:	681a      	ldr	r2, [r3, #0]
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	681b      	ldr	r3, [r3, #0]
 8105670:	f022 0201 	bic.w	r2, r2, #1
 8105674:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8105676:	68fb      	ldr	r3, [r7, #12]
 8105678:	3301      	adds	r3, #1
 810567a:	60fb      	str	r3, [r7, #12]
 810567c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810567e:	429a      	cmp	r2, r3
 8105680:	d307      	bcc.n	8105692 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	681b      	ldr	r3, [r3, #0]
 8105686:	681b      	ldr	r3, [r3, #0]
 8105688:	f003 0301 	and.w	r3, r3, #1
 810568c:	2b00      	cmp	r3, #0
 810568e:	d1f2      	bne.n	8105676 <HAL_DMA_IRQHandler+0x8da>
 8105690:	e000      	b.n	8105694 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8105692:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	2200      	movs	r2, #0
 8105698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810569c:	687b      	ldr	r3, [r7, #4]
 810569e:	681b      	ldr	r3, [r3, #0]
 81056a0:	681b      	ldr	r3, [r3, #0]
 81056a2:	f003 0301 	and.w	r3, r3, #1
 81056a6:	2b00      	cmp	r3, #0
 81056a8:	d004      	beq.n	81056b4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	2203      	movs	r2, #3
 81056ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81056b2:	e003      	b.n	81056bc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	2201      	movs	r2, #1
 81056b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81056c0:	2b00      	cmp	r3, #0
 81056c2:	f000 8272 	beq.w	8105baa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81056c6:	687b      	ldr	r3, [r7, #4]
 81056c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81056ca:	6878      	ldr	r0, [r7, #4]
 81056cc:	4798      	blx	r3
 81056ce:	e26c      	b.n	8105baa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	4a43      	ldr	r2, [pc, #268]	; (81057e4 <HAL_DMA_IRQHandler+0xa48>)
 81056d6:	4293      	cmp	r3, r2
 81056d8:	d022      	beq.n	8105720 <HAL_DMA_IRQHandler+0x984>
 81056da:	687b      	ldr	r3, [r7, #4]
 81056dc:	681b      	ldr	r3, [r3, #0]
 81056de:	4a42      	ldr	r2, [pc, #264]	; (81057e8 <HAL_DMA_IRQHandler+0xa4c>)
 81056e0:	4293      	cmp	r3, r2
 81056e2:	d01d      	beq.n	8105720 <HAL_DMA_IRQHandler+0x984>
 81056e4:	687b      	ldr	r3, [r7, #4]
 81056e6:	681b      	ldr	r3, [r3, #0]
 81056e8:	4a40      	ldr	r2, [pc, #256]	; (81057ec <HAL_DMA_IRQHandler+0xa50>)
 81056ea:	4293      	cmp	r3, r2
 81056ec:	d018      	beq.n	8105720 <HAL_DMA_IRQHandler+0x984>
 81056ee:	687b      	ldr	r3, [r7, #4]
 81056f0:	681b      	ldr	r3, [r3, #0]
 81056f2:	4a3f      	ldr	r2, [pc, #252]	; (81057f0 <HAL_DMA_IRQHandler+0xa54>)
 81056f4:	4293      	cmp	r3, r2
 81056f6:	d013      	beq.n	8105720 <HAL_DMA_IRQHandler+0x984>
 81056f8:	687b      	ldr	r3, [r7, #4]
 81056fa:	681b      	ldr	r3, [r3, #0]
 81056fc:	4a3d      	ldr	r2, [pc, #244]	; (81057f4 <HAL_DMA_IRQHandler+0xa58>)
 81056fe:	4293      	cmp	r3, r2
 8105700:	d00e      	beq.n	8105720 <HAL_DMA_IRQHandler+0x984>
 8105702:	687b      	ldr	r3, [r7, #4]
 8105704:	681b      	ldr	r3, [r3, #0]
 8105706:	4a3c      	ldr	r2, [pc, #240]	; (81057f8 <HAL_DMA_IRQHandler+0xa5c>)
 8105708:	4293      	cmp	r3, r2
 810570a:	d009      	beq.n	8105720 <HAL_DMA_IRQHandler+0x984>
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	4a3a      	ldr	r2, [pc, #232]	; (81057fc <HAL_DMA_IRQHandler+0xa60>)
 8105712:	4293      	cmp	r3, r2
 8105714:	d004      	beq.n	8105720 <HAL_DMA_IRQHandler+0x984>
 8105716:	687b      	ldr	r3, [r7, #4]
 8105718:	681b      	ldr	r3, [r3, #0]
 810571a:	4a39      	ldr	r2, [pc, #228]	; (8105800 <HAL_DMA_IRQHandler+0xa64>)
 810571c:	4293      	cmp	r3, r2
 810571e:	d101      	bne.n	8105724 <HAL_DMA_IRQHandler+0x988>
 8105720:	2301      	movs	r3, #1
 8105722:	e000      	b.n	8105726 <HAL_DMA_IRQHandler+0x98a>
 8105724:	2300      	movs	r3, #0
 8105726:	2b00      	cmp	r3, #0
 8105728:	f000 823f 	beq.w	8105baa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	681b      	ldr	r3, [r3, #0]
 8105732:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8105734:	687b      	ldr	r3, [r7, #4]
 8105736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105738:	f003 031f 	and.w	r3, r3, #31
 810573c:	2204      	movs	r2, #4
 810573e:	409a      	lsls	r2, r3
 8105740:	697b      	ldr	r3, [r7, #20]
 8105742:	4013      	ands	r3, r2
 8105744:	2b00      	cmp	r3, #0
 8105746:	f000 80cd 	beq.w	81058e4 <HAL_DMA_IRQHandler+0xb48>
 810574a:	693b      	ldr	r3, [r7, #16]
 810574c:	f003 0304 	and.w	r3, r3, #4
 8105750:	2b00      	cmp	r3, #0
 8105752:	f000 80c7 	beq.w	81058e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8105756:	687b      	ldr	r3, [r7, #4]
 8105758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810575a:	f003 031f 	and.w	r3, r3, #31
 810575e:	2204      	movs	r2, #4
 8105760:	409a      	lsls	r2, r3
 8105762:	69fb      	ldr	r3, [r7, #28]
 8105764:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105766:	693b      	ldr	r3, [r7, #16]
 8105768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810576c:	2b00      	cmp	r3, #0
 810576e:	d049      	beq.n	8105804 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105770:	693b      	ldr	r3, [r7, #16]
 8105772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105776:	2b00      	cmp	r3, #0
 8105778:	d109      	bne.n	810578e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810577e:	2b00      	cmp	r3, #0
 8105780:	f000 8210 	beq.w	8105ba4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105788:	6878      	ldr	r0, [r7, #4]
 810578a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810578c:	e20a      	b.n	8105ba4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105792:	2b00      	cmp	r3, #0
 8105794:	f000 8206 	beq.w	8105ba4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810579c:	6878      	ldr	r0, [r7, #4]
 810579e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81057a0:	e200      	b.n	8105ba4 <HAL_DMA_IRQHandler+0xe08>
 81057a2:	bf00      	nop
 81057a4:	40020010 	.word	0x40020010
 81057a8:	40020028 	.word	0x40020028
 81057ac:	40020040 	.word	0x40020040
 81057b0:	40020058 	.word	0x40020058
 81057b4:	40020070 	.word	0x40020070
 81057b8:	40020088 	.word	0x40020088
 81057bc:	400200a0 	.word	0x400200a0
 81057c0:	400200b8 	.word	0x400200b8
 81057c4:	40020410 	.word	0x40020410
 81057c8:	40020428 	.word	0x40020428
 81057cc:	40020440 	.word	0x40020440
 81057d0:	40020458 	.word	0x40020458
 81057d4:	40020470 	.word	0x40020470
 81057d8:	40020488 	.word	0x40020488
 81057dc:	400204a0 	.word	0x400204a0
 81057e0:	400204b8 	.word	0x400204b8
 81057e4:	58025408 	.word	0x58025408
 81057e8:	5802541c 	.word	0x5802541c
 81057ec:	58025430 	.word	0x58025430
 81057f0:	58025444 	.word	0x58025444
 81057f4:	58025458 	.word	0x58025458
 81057f8:	5802546c 	.word	0x5802546c
 81057fc:	58025480 	.word	0x58025480
 8105800:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105804:	693b      	ldr	r3, [r7, #16]
 8105806:	f003 0320 	and.w	r3, r3, #32
 810580a:	2b00      	cmp	r3, #0
 810580c:	d160      	bne.n	81058d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	681b      	ldr	r3, [r3, #0]
 8105812:	4a7f      	ldr	r2, [pc, #508]	; (8105a10 <HAL_DMA_IRQHandler+0xc74>)
 8105814:	4293      	cmp	r3, r2
 8105816:	d04a      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	681b      	ldr	r3, [r3, #0]
 810581c:	4a7d      	ldr	r2, [pc, #500]	; (8105a14 <HAL_DMA_IRQHandler+0xc78>)
 810581e:	4293      	cmp	r3, r2
 8105820:	d045      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 8105822:	687b      	ldr	r3, [r7, #4]
 8105824:	681b      	ldr	r3, [r3, #0]
 8105826:	4a7c      	ldr	r2, [pc, #496]	; (8105a18 <HAL_DMA_IRQHandler+0xc7c>)
 8105828:	4293      	cmp	r3, r2
 810582a:	d040      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	681b      	ldr	r3, [r3, #0]
 8105830:	4a7a      	ldr	r2, [pc, #488]	; (8105a1c <HAL_DMA_IRQHandler+0xc80>)
 8105832:	4293      	cmp	r3, r2
 8105834:	d03b      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	681b      	ldr	r3, [r3, #0]
 810583a:	4a79      	ldr	r2, [pc, #484]	; (8105a20 <HAL_DMA_IRQHandler+0xc84>)
 810583c:	4293      	cmp	r3, r2
 810583e:	d036      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	681b      	ldr	r3, [r3, #0]
 8105844:	4a77      	ldr	r2, [pc, #476]	; (8105a24 <HAL_DMA_IRQHandler+0xc88>)
 8105846:	4293      	cmp	r3, r2
 8105848:	d031      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	681b      	ldr	r3, [r3, #0]
 810584e:	4a76      	ldr	r2, [pc, #472]	; (8105a28 <HAL_DMA_IRQHandler+0xc8c>)
 8105850:	4293      	cmp	r3, r2
 8105852:	d02c      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 8105854:	687b      	ldr	r3, [r7, #4]
 8105856:	681b      	ldr	r3, [r3, #0]
 8105858:	4a74      	ldr	r2, [pc, #464]	; (8105a2c <HAL_DMA_IRQHandler+0xc90>)
 810585a:	4293      	cmp	r3, r2
 810585c:	d027      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	681b      	ldr	r3, [r3, #0]
 8105862:	4a73      	ldr	r2, [pc, #460]	; (8105a30 <HAL_DMA_IRQHandler+0xc94>)
 8105864:	4293      	cmp	r3, r2
 8105866:	d022      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 8105868:	687b      	ldr	r3, [r7, #4]
 810586a:	681b      	ldr	r3, [r3, #0]
 810586c:	4a71      	ldr	r2, [pc, #452]	; (8105a34 <HAL_DMA_IRQHandler+0xc98>)
 810586e:	4293      	cmp	r3, r2
 8105870:	d01d      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 8105872:	687b      	ldr	r3, [r7, #4]
 8105874:	681b      	ldr	r3, [r3, #0]
 8105876:	4a70      	ldr	r2, [pc, #448]	; (8105a38 <HAL_DMA_IRQHandler+0xc9c>)
 8105878:	4293      	cmp	r3, r2
 810587a:	d018      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 810587c:	687b      	ldr	r3, [r7, #4]
 810587e:	681b      	ldr	r3, [r3, #0]
 8105880:	4a6e      	ldr	r2, [pc, #440]	; (8105a3c <HAL_DMA_IRQHandler+0xca0>)
 8105882:	4293      	cmp	r3, r2
 8105884:	d013      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 8105886:	687b      	ldr	r3, [r7, #4]
 8105888:	681b      	ldr	r3, [r3, #0]
 810588a:	4a6d      	ldr	r2, [pc, #436]	; (8105a40 <HAL_DMA_IRQHandler+0xca4>)
 810588c:	4293      	cmp	r3, r2
 810588e:	d00e      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 8105890:	687b      	ldr	r3, [r7, #4]
 8105892:	681b      	ldr	r3, [r3, #0]
 8105894:	4a6b      	ldr	r2, [pc, #428]	; (8105a44 <HAL_DMA_IRQHandler+0xca8>)
 8105896:	4293      	cmp	r3, r2
 8105898:	d009      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	681b      	ldr	r3, [r3, #0]
 810589e:	4a6a      	ldr	r2, [pc, #424]	; (8105a48 <HAL_DMA_IRQHandler+0xcac>)
 81058a0:	4293      	cmp	r3, r2
 81058a2:	d004      	beq.n	81058ae <HAL_DMA_IRQHandler+0xb12>
 81058a4:	687b      	ldr	r3, [r7, #4]
 81058a6:	681b      	ldr	r3, [r3, #0]
 81058a8:	4a68      	ldr	r2, [pc, #416]	; (8105a4c <HAL_DMA_IRQHandler+0xcb0>)
 81058aa:	4293      	cmp	r3, r2
 81058ac:	d108      	bne.n	81058c0 <HAL_DMA_IRQHandler+0xb24>
 81058ae:	687b      	ldr	r3, [r7, #4]
 81058b0:	681b      	ldr	r3, [r3, #0]
 81058b2:	681a      	ldr	r2, [r3, #0]
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	681b      	ldr	r3, [r3, #0]
 81058b8:	f022 0208 	bic.w	r2, r2, #8
 81058bc:	601a      	str	r2, [r3, #0]
 81058be:	e007      	b.n	81058d0 <HAL_DMA_IRQHandler+0xb34>
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	681b      	ldr	r3, [r3, #0]
 81058c4:	681a      	ldr	r2, [r3, #0]
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	f022 0204 	bic.w	r2, r2, #4
 81058ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81058d4:	2b00      	cmp	r3, #0
 81058d6:	f000 8165 	beq.w	8105ba4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81058da:	687b      	ldr	r3, [r7, #4]
 81058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81058de:	6878      	ldr	r0, [r7, #4]
 81058e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81058e2:	e15f      	b.n	8105ba4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81058e8:	f003 031f 	and.w	r3, r3, #31
 81058ec:	2202      	movs	r2, #2
 81058ee:	409a      	lsls	r2, r3
 81058f0:	697b      	ldr	r3, [r7, #20]
 81058f2:	4013      	ands	r3, r2
 81058f4:	2b00      	cmp	r3, #0
 81058f6:	f000 80c5 	beq.w	8105a84 <HAL_DMA_IRQHandler+0xce8>
 81058fa:	693b      	ldr	r3, [r7, #16]
 81058fc:	f003 0302 	and.w	r3, r3, #2
 8105900:	2b00      	cmp	r3, #0
 8105902:	f000 80bf 	beq.w	8105a84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810590a:	f003 031f 	and.w	r3, r3, #31
 810590e:	2202      	movs	r2, #2
 8105910:	409a      	lsls	r2, r3
 8105912:	69fb      	ldr	r3, [r7, #28]
 8105914:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105916:	693b      	ldr	r3, [r7, #16]
 8105918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810591c:	2b00      	cmp	r3, #0
 810591e:	d018      	beq.n	8105952 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105920:	693b      	ldr	r3, [r7, #16]
 8105922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105926:	2b00      	cmp	r3, #0
 8105928:	d109      	bne.n	810593e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 810592a:	687b      	ldr	r3, [r7, #4]
 810592c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810592e:	2b00      	cmp	r3, #0
 8105930:	f000 813a 	beq.w	8105ba8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8105934:	687b      	ldr	r3, [r7, #4]
 8105936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105938:	6878      	ldr	r0, [r7, #4]
 810593a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810593c:	e134      	b.n	8105ba8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105942:	2b00      	cmp	r3, #0
 8105944:	f000 8130 	beq.w	8105ba8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8105948:	687b      	ldr	r3, [r7, #4]
 810594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810594c:	6878      	ldr	r0, [r7, #4]
 810594e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105950:	e12a      	b.n	8105ba8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8105952:	693b      	ldr	r3, [r7, #16]
 8105954:	f003 0320 	and.w	r3, r3, #32
 8105958:	2b00      	cmp	r3, #0
 810595a:	f040 8089 	bne.w	8105a70 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810595e:	687b      	ldr	r3, [r7, #4]
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	4a2b      	ldr	r2, [pc, #172]	; (8105a10 <HAL_DMA_IRQHandler+0xc74>)
 8105964:	4293      	cmp	r3, r2
 8105966:	d04a      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 8105968:	687b      	ldr	r3, [r7, #4]
 810596a:	681b      	ldr	r3, [r3, #0]
 810596c:	4a29      	ldr	r2, [pc, #164]	; (8105a14 <HAL_DMA_IRQHandler+0xc78>)
 810596e:	4293      	cmp	r3, r2
 8105970:	d045      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 8105972:	687b      	ldr	r3, [r7, #4]
 8105974:	681b      	ldr	r3, [r3, #0]
 8105976:	4a28      	ldr	r2, [pc, #160]	; (8105a18 <HAL_DMA_IRQHandler+0xc7c>)
 8105978:	4293      	cmp	r3, r2
 810597a:	d040      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	681b      	ldr	r3, [r3, #0]
 8105980:	4a26      	ldr	r2, [pc, #152]	; (8105a1c <HAL_DMA_IRQHandler+0xc80>)
 8105982:	4293      	cmp	r3, r2
 8105984:	d03b      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	681b      	ldr	r3, [r3, #0]
 810598a:	4a25      	ldr	r2, [pc, #148]	; (8105a20 <HAL_DMA_IRQHandler+0xc84>)
 810598c:	4293      	cmp	r3, r2
 810598e:	d036      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	681b      	ldr	r3, [r3, #0]
 8105994:	4a23      	ldr	r2, [pc, #140]	; (8105a24 <HAL_DMA_IRQHandler+0xc88>)
 8105996:	4293      	cmp	r3, r2
 8105998:	d031      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	681b      	ldr	r3, [r3, #0]
 810599e:	4a22      	ldr	r2, [pc, #136]	; (8105a28 <HAL_DMA_IRQHandler+0xc8c>)
 81059a0:	4293      	cmp	r3, r2
 81059a2:	d02c      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 81059a4:	687b      	ldr	r3, [r7, #4]
 81059a6:	681b      	ldr	r3, [r3, #0]
 81059a8:	4a20      	ldr	r2, [pc, #128]	; (8105a2c <HAL_DMA_IRQHandler+0xc90>)
 81059aa:	4293      	cmp	r3, r2
 81059ac:	d027      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	681b      	ldr	r3, [r3, #0]
 81059b2:	4a1f      	ldr	r2, [pc, #124]	; (8105a30 <HAL_DMA_IRQHandler+0xc94>)
 81059b4:	4293      	cmp	r3, r2
 81059b6:	d022      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	681b      	ldr	r3, [r3, #0]
 81059bc:	4a1d      	ldr	r2, [pc, #116]	; (8105a34 <HAL_DMA_IRQHandler+0xc98>)
 81059be:	4293      	cmp	r3, r2
 81059c0:	d01d      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	681b      	ldr	r3, [r3, #0]
 81059c6:	4a1c      	ldr	r2, [pc, #112]	; (8105a38 <HAL_DMA_IRQHandler+0xc9c>)
 81059c8:	4293      	cmp	r3, r2
 81059ca:	d018      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 81059cc:	687b      	ldr	r3, [r7, #4]
 81059ce:	681b      	ldr	r3, [r3, #0]
 81059d0:	4a1a      	ldr	r2, [pc, #104]	; (8105a3c <HAL_DMA_IRQHandler+0xca0>)
 81059d2:	4293      	cmp	r3, r2
 81059d4:	d013      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 81059d6:	687b      	ldr	r3, [r7, #4]
 81059d8:	681b      	ldr	r3, [r3, #0]
 81059da:	4a19      	ldr	r2, [pc, #100]	; (8105a40 <HAL_DMA_IRQHandler+0xca4>)
 81059dc:	4293      	cmp	r3, r2
 81059de:	d00e      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 81059e0:	687b      	ldr	r3, [r7, #4]
 81059e2:	681b      	ldr	r3, [r3, #0]
 81059e4:	4a17      	ldr	r2, [pc, #92]	; (8105a44 <HAL_DMA_IRQHandler+0xca8>)
 81059e6:	4293      	cmp	r3, r2
 81059e8:	d009      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 81059ea:	687b      	ldr	r3, [r7, #4]
 81059ec:	681b      	ldr	r3, [r3, #0]
 81059ee:	4a16      	ldr	r2, [pc, #88]	; (8105a48 <HAL_DMA_IRQHandler+0xcac>)
 81059f0:	4293      	cmp	r3, r2
 81059f2:	d004      	beq.n	81059fe <HAL_DMA_IRQHandler+0xc62>
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	681b      	ldr	r3, [r3, #0]
 81059f8:	4a14      	ldr	r2, [pc, #80]	; (8105a4c <HAL_DMA_IRQHandler+0xcb0>)
 81059fa:	4293      	cmp	r3, r2
 81059fc:	d128      	bne.n	8105a50 <HAL_DMA_IRQHandler+0xcb4>
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	681b      	ldr	r3, [r3, #0]
 8105a02:	681a      	ldr	r2, [r3, #0]
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	681b      	ldr	r3, [r3, #0]
 8105a08:	f022 0214 	bic.w	r2, r2, #20
 8105a0c:	601a      	str	r2, [r3, #0]
 8105a0e:	e027      	b.n	8105a60 <HAL_DMA_IRQHandler+0xcc4>
 8105a10:	40020010 	.word	0x40020010
 8105a14:	40020028 	.word	0x40020028
 8105a18:	40020040 	.word	0x40020040
 8105a1c:	40020058 	.word	0x40020058
 8105a20:	40020070 	.word	0x40020070
 8105a24:	40020088 	.word	0x40020088
 8105a28:	400200a0 	.word	0x400200a0
 8105a2c:	400200b8 	.word	0x400200b8
 8105a30:	40020410 	.word	0x40020410
 8105a34:	40020428 	.word	0x40020428
 8105a38:	40020440 	.word	0x40020440
 8105a3c:	40020458 	.word	0x40020458
 8105a40:	40020470 	.word	0x40020470
 8105a44:	40020488 	.word	0x40020488
 8105a48:	400204a0 	.word	0x400204a0
 8105a4c:	400204b8 	.word	0x400204b8
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	681b      	ldr	r3, [r3, #0]
 8105a54:	681a      	ldr	r2, [r3, #0]
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	f022 020a 	bic.w	r2, r2, #10
 8105a5e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	2200      	movs	r2, #0
 8105a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	2201      	movs	r2, #1
 8105a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a74:	2b00      	cmp	r3, #0
 8105a76:	f000 8097 	beq.w	8105ba8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8105a7a:	687b      	ldr	r3, [r7, #4]
 8105a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a7e:	6878      	ldr	r0, [r7, #4]
 8105a80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105a82:	e091      	b.n	8105ba8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a88:	f003 031f 	and.w	r3, r3, #31
 8105a8c:	2208      	movs	r2, #8
 8105a8e:	409a      	lsls	r2, r3
 8105a90:	697b      	ldr	r3, [r7, #20]
 8105a92:	4013      	ands	r3, r2
 8105a94:	2b00      	cmp	r3, #0
 8105a96:	f000 8088 	beq.w	8105baa <HAL_DMA_IRQHandler+0xe0e>
 8105a9a:	693b      	ldr	r3, [r7, #16]
 8105a9c:	f003 0308 	and.w	r3, r3, #8
 8105aa0:	2b00      	cmp	r3, #0
 8105aa2:	f000 8082 	beq.w	8105baa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	681b      	ldr	r3, [r3, #0]
 8105aaa:	4a41      	ldr	r2, [pc, #260]	; (8105bb0 <HAL_DMA_IRQHandler+0xe14>)
 8105aac:	4293      	cmp	r3, r2
 8105aae:	d04a      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105ab0:	687b      	ldr	r3, [r7, #4]
 8105ab2:	681b      	ldr	r3, [r3, #0]
 8105ab4:	4a3f      	ldr	r2, [pc, #252]	; (8105bb4 <HAL_DMA_IRQHandler+0xe18>)
 8105ab6:	4293      	cmp	r3, r2
 8105ab8:	d045      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	4a3e      	ldr	r2, [pc, #248]	; (8105bb8 <HAL_DMA_IRQHandler+0xe1c>)
 8105ac0:	4293      	cmp	r3, r2
 8105ac2:	d040      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	681b      	ldr	r3, [r3, #0]
 8105ac8:	4a3c      	ldr	r2, [pc, #240]	; (8105bbc <HAL_DMA_IRQHandler+0xe20>)
 8105aca:	4293      	cmp	r3, r2
 8105acc:	d03b      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105ace:	687b      	ldr	r3, [r7, #4]
 8105ad0:	681b      	ldr	r3, [r3, #0]
 8105ad2:	4a3b      	ldr	r2, [pc, #236]	; (8105bc0 <HAL_DMA_IRQHandler+0xe24>)
 8105ad4:	4293      	cmp	r3, r2
 8105ad6:	d036      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	681b      	ldr	r3, [r3, #0]
 8105adc:	4a39      	ldr	r2, [pc, #228]	; (8105bc4 <HAL_DMA_IRQHandler+0xe28>)
 8105ade:	4293      	cmp	r3, r2
 8105ae0:	d031      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105ae2:	687b      	ldr	r3, [r7, #4]
 8105ae4:	681b      	ldr	r3, [r3, #0]
 8105ae6:	4a38      	ldr	r2, [pc, #224]	; (8105bc8 <HAL_DMA_IRQHandler+0xe2c>)
 8105ae8:	4293      	cmp	r3, r2
 8105aea:	d02c      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	4a36      	ldr	r2, [pc, #216]	; (8105bcc <HAL_DMA_IRQHandler+0xe30>)
 8105af2:	4293      	cmp	r3, r2
 8105af4:	d027      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	4a35      	ldr	r2, [pc, #212]	; (8105bd0 <HAL_DMA_IRQHandler+0xe34>)
 8105afc:	4293      	cmp	r3, r2
 8105afe:	d022      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	4a33      	ldr	r2, [pc, #204]	; (8105bd4 <HAL_DMA_IRQHandler+0xe38>)
 8105b06:	4293      	cmp	r3, r2
 8105b08:	d01d      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	4a32      	ldr	r2, [pc, #200]	; (8105bd8 <HAL_DMA_IRQHandler+0xe3c>)
 8105b10:	4293      	cmp	r3, r2
 8105b12:	d018      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	681b      	ldr	r3, [r3, #0]
 8105b18:	4a30      	ldr	r2, [pc, #192]	; (8105bdc <HAL_DMA_IRQHandler+0xe40>)
 8105b1a:	4293      	cmp	r3, r2
 8105b1c:	d013      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105b1e:	687b      	ldr	r3, [r7, #4]
 8105b20:	681b      	ldr	r3, [r3, #0]
 8105b22:	4a2f      	ldr	r2, [pc, #188]	; (8105be0 <HAL_DMA_IRQHandler+0xe44>)
 8105b24:	4293      	cmp	r3, r2
 8105b26:	d00e      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105b28:	687b      	ldr	r3, [r7, #4]
 8105b2a:	681b      	ldr	r3, [r3, #0]
 8105b2c:	4a2d      	ldr	r2, [pc, #180]	; (8105be4 <HAL_DMA_IRQHandler+0xe48>)
 8105b2e:	4293      	cmp	r3, r2
 8105b30:	d009      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	681b      	ldr	r3, [r3, #0]
 8105b36:	4a2c      	ldr	r2, [pc, #176]	; (8105be8 <HAL_DMA_IRQHandler+0xe4c>)
 8105b38:	4293      	cmp	r3, r2
 8105b3a:	d004      	beq.n	8105b46 <HAL_DMA_IRQHandler+0xdaa>
 8105b3c:	687b      	ldr	r3, [r7, #4]
 8105b3e:	681b      	ldr	r3, [r3, #0]
 8105b40:	4a2a      	ldr	r2, [pc, #168]	; (8105bec <HAL_DMA_IRQHandler+0xe50>)
 8105b42:	4293      	cmp	r3, r2
 8105b44:	d108      	bne.n	8105b58 <HAL_DMA_IRQHandler+0xdbc>
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	681a      	ldr	r2, [r3, #0]
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	f022 021c 	bic.w	r2, r2, #28
 8105b54:	601a      	str	r2, [r3, #0]
 8105b56:	e007      	b.n	8105b68 <HAL_DMA_IRQHandler+0xdcc>
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	681b      	ldr	r3, [r3, #0]
 8105b5c:	681a      	ldr	r2, [r3, #0]
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	681b      	ldr	r3, [r3, #0]
 8105b62:	f022 020e 	bic.w	r2, r2, #14
 8105b66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105b6c:	f003 031f 	and.w	r3, r3, #31
 8105b70:	2201      	movs	r2, #1
 8105b72:	409a      	lsls	r2, r3
 8105b74:	69fb      	ldr	r3, [r7, #28]
 8105b76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	2201      	movs	r2, #1
 8105b7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	2200      	movs	r2, #0
 8105b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	2201      	movs	r2, #1
 8105b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8105b8e:	687b      	ldr	r3, [r7, #4]
 8105b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105b92:	2b00      	cmp	r3, #0
 8105b94:	d009      	beq.n	8105baa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105b9a:	6878      	ldr	r0, [r7, #4]
 8105b9c:	4798      	blx	r3
 8105b9e:	e004      	b.n	8105baa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8105ba0:	bf00      	nop
 8105ba2:	e002      	b.n	8105baa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105ba4:	bf00      	nop
 8105ba6:	e000      	b.n	8105baa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105ba8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105baa:	3728      	adds	r7, #40	; 0x28
 8105bac:	46bd      	mov	sp, r7
 8105bae:	bd80      	pop	{r7, pc}
 8105bb0:	40020010 	.word	0x40020010
 8105bb4:	40020028 	.word	0x40020028
 8105bb8:	40020040 	.word	0x40020040
 8105bbc:	40020058 	.word	0x40020058
 8105bc0:	40020070 	.word	0x40020070
 8105bc4:	40020088 	.word	0x40020088
 8105bc8:	400200a0 	.word	0x400200a0
 8105bcc:	400200b8 	.word	0x400200b8
 8105bd0:	40020410 	.word	0x40020410
 8105bd4:	40020428 	.word	0x40020428
 8105bd8:	40020440 	.word	0x40020440
 8105bdc:	40020458 	.word	0x40020458
 8105be0:	40020470 	.word	0x40020470
 8105be4:	40020488 	.word	0x40020488
 8105be8:	400204a0 	.word	0x400204a0
 8105bec:	400204b8 	.word	0x400204b8

08105bf0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8105bf0:	b480      	push	{r7}
 8105bf2:	b083      	sub	sp, #12
 8105bf4:	af00      	add	r7, sp, #0
 8105bf6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8105bf8:	687b      	ldr	r3, [r7, #4]
 8105bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105bfe:	b2db      	uxtb	r3, r3
}
 8105c00:	4618      	mov	r0, r3
 8105c02:	370c      	adds	r7, #12
 8105c04:	46bd      	mov	sp, r7
 8105c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c0a:	4770      	bx	lr

08105c0c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8105c0c:	b480      	push	{r7}
 8105c0e:	b083      	sub	sp, #12
 8105c10:	af00      	add	r7, sp, #0
 8105c12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8105c14:	687b      	ldr	r3, [r7, #4]
 8105c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8105c18:	4618      	mov	r0, r3
 8105c1a:	370c      	adds	r7, #12
 8105c1c:	46bd      	mov	sp, r7
 8105c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c22:	4770      	bx	lr

08105c24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8105c24:	b480      	push	{r7}
 8105c26:	b087      	sub	sp, #28
 8105c28:	af00      	add	r7, sp, #0
 8105c2a:	60f8      	str	r0, [r7, #12]
 8105c2c:	60b9      	str	r1, [r7, #8]
 8105c2e:	607a      	str	r2, [r7, #4]
 8105c30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105c32:	68fb      	ldr	r3, [r7, #12]
 8105c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105c38:	68fb      	ldr	r3, [r7, #12]
 8105c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105c3e:	68fb      	ldr	r3, [r7, #12]
 8105c40:	681b      	ldr	r3, [r3, #0]
 8105c42:	4a7f      	ldr	r2, [pc, #508]	; (8105e40 <DMA_SetConfig+0x21c>)
 8105c44:	4293      	cmp	r3, r2
 8105c46:	d072      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105c48:	68fb      	ldr	r3, [r7, #12]
 8105c4a:	681b      	ldr	r3, [r3, #0]
 8105c4c:	4a7d      	ldr	r2, [pc, #500]	; (8105e44 <DMA_SetConfig+0x220>)
 8105c4e:	4293      	cmp	r3, r2
 8105c50:	d06d      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105c52:	68fb      	ldr	r3, [r7, #12]
 8105c54:	681b      	ldr	r3, [r3, #0]
 8105c56:	4a7c      	ldr	r2, [pc, #496]	; (8105e48 <DMA_SetConfig+0x224>)
 8105c58:	4293      	cmp	r3, r2
 8105c5a:	d068      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105c5c:	68fb      	ldr	r3, [r7, #12]
 8105c5e:	681b      	ldr	r3, [r3, #0]
 8105c60:	4a7a      	ldr	r2, [pc, #488]	; (8105e4c <DMA_SetConfig+0x228>)
 8105c62:	4293      	cmp	r3, r2
 8105c64:	d063      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105c66:	68fb      	ldr	r3, [r7, #12]
 8105c68:	681b      	ldr	r3, [r3, #0]
 8105c6a:	4a79      	ldr	r2, [pc, #484]	; (8105e50 <DMA_SetConfig+0x22c>)
 8105c6c:	4293      	cmp	r3, r2
 8105c6e:	d05e      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105c70:	68fb      	ldr	r3, [r7, #12]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	4a77      	ldr	r2, [pc, #476]	; (8105e54 <DMA_SetConfig+0x230>)
 8105c76:	4293      	cmp	r3, r2
 8105c78:	d059      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105c7a:	68fb      	ldr	r3, [r7, #12]
 8105c7c:	681b      	ldr	r3, [r3, #0]
 8105c7e:	4a76      	ldr	r2, [pc, #472]	; (8105e58 <DMA_SetConfig+0x234>)
 8105c80:	4293      	cmp	r3, r2
 8105c82:	d054      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105c84:	68fb      	ldr	r3, [r7, #12]
 8105c86:	681b      	ldr	r3, [r3, #0]
 8105c88:	4a74      	ldr	r2, [pc, #464]	; (8105e5c <DMA_SetConfig+0x238>)
 8105c8a:	4293      	cmp	r3, r2
 8105c8c:	d04f      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105c8e:	68fb      	ldr	r3, [r7, #12]
 8105c90:	681b      	ldr	r3, [r3, #0]
 8105c92:	4a73      	ldr	r2, [pc, #460]	; (8105e60 <DMA_SetConfig+0x23c>)
 8105c94:	4293      	cmp	r3, r2
 8105c96:	d04a      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105c98:	68fb      	ldr	r3, [r7, #12]
 8105c9a:	681b      	ldr	r3, [r3, #0]
 8105c9c:	4a71      	ldr	r2, [pc, #452]	; (8105e64 <DMA_SetConfig+0x240>)
 8105c9e:	4293      	cmp	r3, r2
 8105ca0:	d045      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105ca2:	68fb      	ldr	r3, [r7, #12]
 8105ca4:	681b      	ldr	r3, [r3, #0]
 8105ca6:	4a70      	ldr	r2, [pc, #448]	; (8105e68 <DMA_SetConfig+0x244>)
 8105ca8:	4293      	cmp	r3, r2
 8105caa:	d040      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105cac:	68fb      	ldr	r3, [r7, #12]
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	4a6e      	ldr	r2, [pc, #440]	; (8105e6c <DMA_SetConfig+0x248>)
 8105cb2:	4293      	cmp	r3, r2
 8105cb4:	d03b      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105cb6:	68fb      	ldr	r3, [r7, #12]
 8105cb8:	681b      	ldr	r3, [r3, #0]
 8105cba:	4a6d      	ldr	r2, [pc, #436]	; (8105e70 <DMA_SetConfig+0x24c>)
 8105cbc:	4293      	cmp	r3, r2
 8105cbe:	d036      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105cc0:	68fb      	ldr	r3, [r7, #12]
 8105cc2:	681b      	ldr	r3, [r3, #0]
 8105cc4:	4a6b      	ldr	r2, [pc, #428]	; (8105e74 <DMA_SetConfig+0x250>)
 8105cc6:	4293      	cmp	r3, r2
 8105cc8:	d031      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105cca:	68fb      	ldr	r3, [r7, #12]
 8105ccc:	681b      	ldr	r3, [r3, #0]
 8105cce:	4a6a      	ldr	r2, [pc, #424]	; (8105e78 <DMA_SetConfig+0x254>)
 8105cd0:	4293      	cmp	r3, r2
 8105cd2:	d02c      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105cd4:	68fb      	ldr	r3, [r7, #12]
 8105cd6:	681b      	ldr	r3, [r3, #0]
 8105cd8:	4a68      	ldr	r2, [pc, #416]	; (8105e7c <DMA_SetConfig+0x258>)
 8105cda:	4293      	cmp	r3, r2
 8105cdc:	d027      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105cde:	68fb      	ldr	r3, [r7, #12]
 8105ce0:	681b      	ldr	r3, [r3, #0]
 8105ce2:	4a67      	ldr	r2, [pc, #412]	; (8105e80 <DMA_SetConfig+0x25c>)
 8105ce4:	4293      	cmp	r3, r2
 8105ce6:	d022      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105ce8:	68fb      	ldr	r3, [r7, #12]
 8105cea:	681b      	ldr	r3, [r3, #0]
 8105cec:	4a65      	ldr	r2, [pc, #404]	; (8105e84 <DMA_SetConfig+0x260>)
 8105cee:	4293      	cmp	r3, r2
 8105cf0:	d01d      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105cf2:	68fb      	ldr	r3, [r7, #12]
 8105cf4:	681b      	ldr	r3, [r3, #0]
 8105cf6:	4a64      	ldr	r2, [pc, #400]	; (8105e88 <DMA_SetConfig+0x264>)
 8105cf8:	4293      	cmp	r3, r2
 8105cfa:	d018      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105cfc:	68fb      	ldr	r3, [r7, #12]
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	4a62      	ldr	r2, [pc, #392]	; (8105e8c <DMA_SetConfig+0x268>)
 8105d02:	4293      	cmp	r3, r2
 8105d04:	d013      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105d06:	68fb      	ldr	r3, [r7, #12]
 8105d08:	681b      	ldr	r3, [r3, #0]
 8105d0a:	4a61      	ldr	r2, [pc, #388]	; (8105e90 <DMA_SetConfig+0x26c>)
 8105d0c:	4293      	cmp	r3, r2
 8105d0e:	d00e      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105d10:	68fb      	ldr	r3, [r7, #12]
 8105d12:	681b      	ldr	r3, [r3, #0]
 8105d14:	4a5f      	ldr	r2, [pc, #380]	; (8105e94 <DMA_SetConfig+0x270>)
 8105d16:	4293      	cmp	r3, r2
 8105d18:	d009      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105d1a:	68fb      	ldr	r3, [r7, #12]
 8105d1c:	681b      	ldr	r3, [r3, #0]
 8105d1e:	4a5e      	ldr	r2, [pc, #376]	; (8105e98 <DMA_SetConfig+0x274>)
 8105d20:	4293      	cmp	r3, r2
 8105d22:	d004      	beq.n	8105d2e <DMA_SetConfig+0x10a>
 8105d24:	68fb      	ldr	r3, [r7, #12]
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	4a5c      	ldr	r2, [pc, #368]	; (8105e9c <DMA_SetConfig+0x278>)
 8105d2a:	4293      	cmp	r3, r2
 8105d2c:	d101      	bne.n	8105d32 <DMA_SetConfig+0x10e>
 8105d2e:	2301      	movs	r3, #1
 8105d30:	e000      	b.n	8105d34 <DMA_SetConfig+0x110>
 8105d32:	2300      	movs	r3, #0
 8105d34:	2b00      	cmp	r3, #0
 8105d36:	d00d      	beq.n	8105d54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105d38:	68fb      	ldr	r3, [r7, #12]
 8105d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d3c:	68fa      	ldr	r2, [r7, #12]
 8105d3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105d40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8105d42:	68fb      	ldr	r3, [r7, #12]
 8105d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105d46:	2b00      	cmp	r3, #0
 8105d48:	d004      	beq.n	8105d54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105d4a:	68fb      	ldr	r3, [r7, #12]
 8105d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105d4e:	68fa      	ldr	r2, [r7, #12]
 8105d50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105d52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105d54:	68fb      	ldr	r3, [r7, #12]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	4a39      	ldr	r2, [pc, #228]	; (8105e40 <DMA_SetConfig+0x21c>)
 8105d5a:	4293      	cmp	r3, r2
 8105d5c:	d04a      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105d5e:	68fb      	ldr	r3, [r7, #12]
 8105d60:	681b      	ldr	r3, [r3, #0]
 8105d62:	4a38      	ldr	r2, [pc, #224]	; (8105e44 <DMA_SetConfig+0x220>)
 8105d64:	4293      	cmp	r3, r2
 8105d66:	d045      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105d68:	68fb      	ldr	r3, [r7, #12]
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	4a36      	ldr	r2, [pc, #216]	; (8105e48 <DMA_SetConfig+0x224>)
 8105d6e:	4293      	cmp	r3, r2
 8105d70:	d040      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105d72:	68fb      	ldr	r3, [r7, #12]
 8105d74:	681b      	ldr	r3, [r3, #0]
 8105d76:	4a35      	ldr	r2, [pc, #212]	; (8105e4c <DMA_SetConfig+0x228>)
 8105d78:	4293      	cmp	r3, r2
 8105d7a:	d03b      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105d7c:	68fb      	ldr	r3, [r7, #12]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	4a33      	ldr	r2, [pc, #204]	; (8105e50 <DMA_SetConfig+0x22c>)
 8105d82:	4293      	cmp	r3, r2
 8105d84:	d036      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105d86:	68fb      	ldr	r3, [r7, #12]
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	4a32      	ldr	r2, [pc, #200]	; (8105e54 <DMA_SetConfig+0x230>)
 8105d8c:	4293      	cmp	r3, r2
 8105d8e:	d031      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105d90:	68fb      	ldr	r3, [r7, #12]
 8105d92:	681b      	ldr	r3, [r3, #0]
 8105d94:	4a30      	ldr	r2, [pc, #192]	; (8105e58 <DMA_SetConfig+0x234>)
 8105d96:	4293      	cmp	r3, r2
 8105d98:	d02c      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105d9a:	68fb      	ldr	r3, [r7, #12]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	4a2f      	ldr	r2, [pc, #188]	; (8105e5c <DMA_SetConfig+0x238>)
 8105da0:	4293      	cmp	r3, r2
 8105da2:	d027      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105da4:	68fb      	ldr	r3, [r7, #12]
 8105da6:	681b      	ldr	r3, [r3, #0]
 8105da8:	4a2d      	ldr	r2, [pc, #180]	; (8105e60 <DMA_SetConfig+0x23c>)
 8105daa:	4293      	cmp	r3, r2
 8105dac:	d022      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105dae:	68fb      	ldr	r3, [r7, #12]
 8105db0:	681b      	ldr	r3, [r3, #0]
 8105db2:	4a2c      	ldr	r2, [pc, #176]	; (8105e64 <DMA_SetConfig+0x240>)
 8105db4:	4293      	cmp	r3, r2
 8105db6:	d01d      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105db8:	68fb      	ldr	r3, [r7, #12]
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	4a2a      	ldr	r2, [pc, #168]	; (8105e68 <DMA_SetConfig+0x244>)
 8105dbe:	4293      	cmp	r3, r2
 8105dc0:	d018      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105dc2:	68fb      	ldr	r3, [r7, #12]
 8105dc4:	681b      	ldr	r3, [r3, #0]
 8105dc6:	4a29      	ldr	r2, [pc, #164]	; (8105e6c <DMA_SetConfig+0x248>)
 8105dc8:	4293      	cmp	r3, r2
 8105dca:	d013      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105dcc:	68fb      	ldr	r3, [r7, #12]
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	4a27      	ldr	r2, [pc, #156]	; (8105e70 <DMA_SetConfig+0x24c>)
 8105dd2:	4293      	cmp	r3, r2
 8105dd4:	d00e      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105dd6:	68fb      	ldr	r3, [r7, #12]
 8105dd8:	681b      	ldr	r3, [r3, #0]
 8105dda:	4a26      	ldr	r2, [pc, #152]	; (8105e74 <DMA_SetConfig+0x250>)
 8105ddc:	4293      	cmp	r3, r2
 8105dde:	d009      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105de0:	68fb      	ldr	r3, [r7, #12]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	4a24      	ldr	r2, [pc, #144]	; (8105e78 <DMA_SetConfig+0x254>)
 8105de6:	4293      	cmp	r3, r2
 8105de8:	d004      	beq.n	8105df4 <DMA_SetConfig+0x1d0>
 8105dea:	68fb      	ldr	r3, [r7, #12]
 8105dec:	681b      	ldr	r3, [r3, #0]
 8105dee:	4a23      	ldr	r2, [pc, #140]	; (8105e7c <DMA_SetConfig+0x258>)
 8105df0:	4293      	cmp	r3, r2
 8105df2:	d101      	bne.n	8105df8 <DMA_SetConfig+0x1d4>
 8105df4:	2301      	movs	r3, #1
 8105df6:	e000      	b.n	8105dfa <DMA_SetConfig+0x1d6>
 8105df8:	2300      	movs	r3, #0
 8105dfa:	2b00      	cmp	r3, #0
 8105dfc:	d059      	beq.n	8105eb2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105dfe:	68fb      	ldr	r3, [r7, #12]
 8105e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e02:	f003 031f 	and.w	r3, r3, #31
 8105e06:	223f      	movs	r2, #63	; 0x3f
 8105e08:	409a      	lsls	r2, r3
 8105e0a:	697b      	ldr	r3, [r7, #20]
 8105e0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8105e0e:	68fb      	ldr	r3, [r7, #12]
 8105e10:	681b      	ldr	r3, [r3, #0]
 8105e12:	681a      	ldr	r2, [r3, #0]
 8105e14:	68fb      	ldr	r3, [r7, #12]
 8105e16:	681b      	ldr	r3, [r3, #0]
 8105e18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8105e1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8105e1e:	68fb      	ldr	r3, [r7, #12]
 8105e20:	681b      	ldr	r3, [r3, #0]
 8105e22:	683a      	ldr	r2, [r7, #0]
 8105e24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105e26:	68fb      	ldr	r3, [r7, #12]
 8105e28:	689b      	ldr	r3, [r3, #8]
 8105e2a:	2b40      	cmp	r3, #64	; 0x40
 8105e2c:	d138      	bne.n	8105ea0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8105e2e:	68fb      	ldr	r3, [r7, #12]
 8105e30:	681b      	ldr	r3, [r3, #0]
 8105e32:	687a      	ldr	r2, [r7, #4]
 8105e34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8105e36:	68fb      	ldr	r3, [r7, #12]
 8105e38:	681b      	ldr	r3, [r3, #0]
 8105e3a:	68ba      	ldr	r2, [r7, #8]
 8105e3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105e3e:	e086      	b.n	8105f4e <DMA_SetConfig+0x32a>
 8105e40:	40020010 	.word	0x40020010
 8105e44:	40020028 	.word	0x40020028
 8105e48:	40020040 	.word	0x40020040
 8105e4c:	40020058 	.word	0x40020058
 8105e50:	40020070 	.word	0x40020070
 8105e54:	40020088 	.word	0x40020088
 8105e58:	400200a0 	.word	0x400200a0
 8105e5c:	400200b8 	.word	0x400200b8
 8105e60:	40020410 	.word	0x40020410
 8105e64:	40020428 	.word	0x40020428
 8105e68:	40020440 	.word	0x40020440
 8105e6c:	40020458 	.word	0x40020458
 8105e70:	40020470 	.word	0x40020470
 8105e74:	40020488 	.word	0x40020488
 8105e78:	400204a0 	.word	0x400204a0
 8105e7c:	400204b8 	.word	0x400204b8
 8105e80:	58025408 	.word	0x58025408
 8105e84:	5802541c 	.word	0x5802541c
 8105e88:	58025430 	.word	0x58025430
 8105e8c:	58025444 	.word	0x58025444
 8105e90:	58025458 	.word	0x58025458
 8105e94:	5802546c 	.word	0x5802546c
 8105e98:	58025480 	.word	0x58025480
 8105e9c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8105ea0:	68fb      	ldr	r3, [r7, #12]
 8105ea2:	681b      	ldr	r3, [r3, #0]
 8105ea4:	68ba      	ldr	r2, [r7, #8]
 8105ea6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8105ea8:	68fb      	ldr	r3, [r7, #12]
 8105eaa:	681b      	ldr	r3, [r3, #0]
 8105eac:	687a      	ldr	r2, [r7, #4]
 8105eae:	60da      	str	r2, [r3, #12]
}
 8105eb0:	e04d      	b.n	8105f4e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8105eb2:	68fb      	ldr	r3, [r7, #12]
 8105eb4:	681b      	ldr	r3, [r3, #0]
 8105eb6:	4a29      	ldr	r2, [pc, #164]	; (8105f5c <DMA_SetConfig+0x338>)
 8105eb8:	4293      	cmp	r3, r2
 8105eba:	d022      	beq.n	8105f02 <DMA_SetConfig+0x2de>
 8105ebc:	68fb      	ldr	r3, [r7, #12]
 8105ebe:	681b      	ldr	r3, [r3, #0]
 8105ec0:	4a27      	ldr	r2, [pc, #156]	; (8105f60 <DMA_SetConfig+0x33c>)
 8105ec2:	4293      	cmp	r3, r2
 8105ec4:	d01d      	beq.n	8105f02 <DMA_SetConfig+0x2de>
 8105ec6:	68fb      	ldr	r3, [r7, #12]
 8105ec8:	681b      	ldr	r3, [r3, #0]
 8105eca:	4a26      	ldr	r2, [pc, #152]	; (8105f64 <DMA_SetConfig+0x340>)
 8105ecc:	4293      	cmp	r3, r2
 8105ece:	d018      	beq.n	8105f02 <DMA_SetConfig+0x2de>
 8105ed0:	68fb      	ldr	r3, [r7, #12]
 8105ed2:	681b      	ldr	r3, [r3, #0]
 8105ed4:	4a24      	ldr	r2, [pc, #144]	; (8105f68 <DMA_SetConfig+0x344>)
 8105ed6:	4293      	cmp	r3, r2
 8105ed8:	d013      	beq.n	8105f02 <DMA_SetConfig+0x2de>
 8105eda:	68fb      	ldr	r3, [r7, #12]
 8105edc:	681b      	ldr	r3, [r3, #0]
 8105ede:	4a23      	ldr	r2, [pc, #140]	; (8105f6c <DMA_SetConfig+0x348>)
 8105ee0:	4293      	cmp	r3, r2
 8105ee2:	d00e      	beq.n	8105f02 <DMA_SetConfig+0x2de>
 8105ee4:	68fb      	ldr	r3, [r7, #12]
 8105ee6:	681b      	ldr	r3, [r3, #0]
 8105ee8:	4a21      	ldr	r2, [pc, #132]	; (8105f70 <DMA_SetConfig+0x34c>)
 8105eea:	4293      	cmp	r3, r2
 8105eec:	d009      	beq.n	8105f02 <DMA_SetConfig+0x2de>
 8105eee:	68fb      	ldr	r3, [r7, #12]
 8105ef0:	681b      	ldr	r3, [r3, #0]
 8105ef2:	4a20      	ldr	r2, [pc, #128]	; (8105f74 <DMA_SetConfig+0x350>)
 8105ef4:	4293      	cmp	r3, r2
 8105ef6:	d004      	beq.n	8105f02 <DMA_SetConfig+0x2de>
 8105ef8:	68fb      	ldr	r3, [r7, #12]
 8105efa:	681b      	ldr	r3, [r3, #0]
 8105efc:	4a1e      	ldr	r2, [pc, #120]	; (8105f78 <DMA_SetConfig+0x354>)
 8105efe:	4293      	cmp	r3, r2
 8105f00:	d101      	bne.n	8105f06 <DMA_SetConfig+0x2e2>
 8105f02:	2301      	movs	r3, #1
 8105f04:	e000      	b.n	8105f08 <DMA_SetConfig+0x2e4>
 8105f06:	2300      	movs	r3, #0
 8105f08:	2b00      	cmp	r3, #0
 8105f0a:	d020      	beq.n	8105f4e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8105f0c:	68fb      	ldr	r3, [r7, #12]
 8105f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105f10:	f003 031f 	and.w	r3, r3, #31
 8105f14:	2201      	movs	r2, #1
 8105f16:	409a      	lsls	r2, r3
 8105f18:	693b      	ldr	r3, [r7, #16]
 8105f1a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8105f1c:	68fb      	ldr	r3, [r7, #12]
 8105f1e:	681b      	ldr	r3, [r3, #0]
 8105f20:	683a      	ldr	r2, [r7, #0]
 8105f22:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105f24:	68fb      	ldr	r3, [r7, #12]
 8105f26:	689b      	ldr	r3, [r3, #8]
 8105f28:	2b40      	cmp	r3, #64	; 0x40
 8105f2a:	d108      	bne.n	8105f3e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8105f2c:	68fb      	ldr	r3, [r7, #12]
 8105f2e:	681b      	ldr	r3, [r3, #0]
 8105f30:	687a      	ldr	r2, [r7, #4]
 8105f32:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8105f34:	68fb      	ldr	r3, [r7, #12]
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	68ba      	ldr	r2, [r7, #8]
 8105f3a:	60da      	str	r2, [r3, #12]
}
 8105f3c:	e007      	b.n	8105f4e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8105f3e:	68fb      	ldr	r3, [r7, #12]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	68ba      	ldr	r2, [r7, #8]
 8105f44:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8105f46:	68fb      	ldr	r3, [r7, #12]
 8105f48:	681b      	ldr	r3, [r3, #0]
 8105f4a:	687a      	ldr	r2, [r7, #4]
 8105f4c:	60da      	str	r2, [r3, #12]
}
 8105f4e:	bf00      	nop
 8105f50:	371c      	adds	r7, #28
 8105f52:	46bd      	mov	sp, r7
 8105f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f58:	4770      	bx	lr
 8105f5a:	bf00      	nop
 8105f5c:	58025408 	.word	0x58025408
 8105f60:	5802541c 	.word	0x5802541c
 8105f64:	58025430 	.word	0x58025430
 8105f68:	58025444 	.word	0x58025444
 8105f6c:	58025458 	.word	0x58025458
 8105f70:	5802546c 	.word	0x5802546c
 8105f74:	58025480 	.word	0x58025480
 8105f78:	58025494 	.word	0x58025494

08105f7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8105f7c:	b480      	push	{r7}
 8105f7e:	b085      	sub	sp, #20
 8105f80:	af00      	add	r7, sp, #0
 8105f82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105f84:	687b      	ldr	r3, [r7, #4]
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	4a43      	ldr	r2, [pc, #268]	; (8106098 <DMA_CalcBaseAndBitshift+0x11c>)
 8105f8a:	4293      	cmp	r3, r2
 8105f8c:	d04a      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	4a42      	ldr	r2, [pc, #264]	; (810609c <DMA_CalcBaseAndBitshift+0x120>)
 8105f94:	4293      	cmp	r3, r2
 8105f96:	d045      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	681b      	ldr	r3, [r3, #0]
 8105f9c:	4a40      	ldr	r2, [pc, #256]	; (81060a0 <DMA_CalcBaseAndBitshift+0x124>)
 8105f9e:	4293      	cmp	r3, r2
 8105fa0:	d040      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	4a3f      	ldr	r2, [pc, #252]	; (81060a4 <DMA_CalcBaseAndBitshift+0x128>)
 8105fa8:	4293      	cmp	r3, r2
 8105faa:	d03b      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	681b      	ldr	r3, [r3, #0]
 8105fb0:	4a3d      	ldr	r2, [pc, #244]	; (81060a8 <DMA_CalcBaseAndBitshift+0x12c>)
 8105fb2:	4293      	cmp	r3, r2
 8105fb4:	d036      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	681b      	ldr	r3, [r3, #0]
 8105fba:	4a3c      	ldr	r2, [pc, #240]	; (81060ac <DMA_CalcBaseAndBitshift+0x130>)
 8105fbc:	4293      	cmp	r3, r2
 8105fbe:	d031      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	4a3a      	ldr	r2, [pc, #232]	; (81060b0 <DMA_CalcBaseAndBitshift+0x134>)
 8105fc6:	4293      	cmp	r3, r2
 8105fc8:	d02c      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	681b      	ldr	r3, [r3, #0]
 8105fce:	4a39      	ldr	r2, [pc, #228]	; (81060b4 <DMA_CalcBaseAndBitshift+0x138>)
 8105fd0:	4293      	cmp	r3, r2
 8105fd2:	d027      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105fd4:	687b      	ldr	r3, [r7, #4]
 8105fd6:	681b      	ldr	r3, [r3, #0]
 8105fd8:	4a37      	ldr	r2, [pc, #220]	; (81060b8 <DMA_CalcBaseAndBitshift+0x13c>)
 8105fda:	4293      	cmp	r3, r2
 8105fdc:	d022      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105fde:	687b      	ldr	r3, [r7, #4]
 8105fe0:	681b      	ldr	r3, [r3, #0]
 8105fe2:	4a36      	ldr	r2, [pc, #216]	; (81060bc <DMA_CalcBaseAndBitshift+0x140>)
 8105fe4:	4293      	cmp	r3, r2
 8105fe6:	d01d      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	681b      	ldr	r3, [r3, #0]
 8105fec:	4a34      	ldr	r2, [pc, #208]	; (81060c0 <DMA_CalcBaseAndBitshift+0x144>)
 8105fee:	4293      	cmp	r3, r2
 8105ff0:	d018      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105ff2:	687b      	ldr	r3, [r7, #4]
 8105ff4:	681b      	ldr	r3, [r3, #0]
 8105ff6:	4a33      	ldr	r2, [pc, #204]	; (81060c4 <DMA_CalcBaseAndBitshift+0x148>)
 8105ff8:	4293      	cmp	r3, r2
 8105ffa:	d013      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	681b      	ldr	r3, [r3, #0]
 8106000:	4a31      	ldr	r2, [pc, #196]	; (81060c8 <DMA_CalcBaseAndBitshift+0x14c>)
 8106002:	4293      	cmp	r3, r2
 8106004:	d00e      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8106006:	687b      	ldr	r3, [r7, #4]
 8106008:	681b      	ldr	r3, [r3, #0]
 810600a:	4a30      	ldr	r2, [pc, #192]	; (81060cc <DMA_CalcBaseAndBitshift+0x150>)
 810600c:	4293      	cmp	r3, r2
 810600e:	d009      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 8106010:	687b      	ldr	r3, [r7, #4]
 8106012:	681b      	ldr	r3, [r3, #0]
 8106014:	4a2e      	ldr	r2, [pc, #184]	; (81060d0 <DMA_CalcBaseAndBitshift+0x154>)
 8106016:	4293      	cmp	r3, r2
 8106018:	d004      	beq.n	8106024 <DMA_CalcBaseAndBitshift+0xa8>
 810601a:	687b      	ldr	r3, [r7, #4]
 810601c:	681b      	ldr	r3, [r3, #0]
 810601e:	4a2d      	ldr	r2, [pc, #180]	; (81060d4 <DMA_CalcBaseAndBitshift+0x158>)
 8106020:	4293      	cmp	r3, r2
 8106022:	d101      	bne.n	8106028 <DMA_CalcBaseAndBitshift+0xac>
 8106024:	2301      	movs	r3, #1
 8106026:	e000      	b.n	810602a <DMA_CalcBaseAndBitshift+0xae>
 8106028:	2300      	movs	r3, #0
 810602a:	2b00      	cmp	r3, #0
 810602c:	d026      	beq.n	810607c <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	b2db      	uxtb	r3, r3
 8106034:	3b10      	subs	r3, #16
 8106036:	4a28      	ldr	r2, [pc, #160]	; (81060d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8106038:	fba2 2303 	umull	r2, r3, r2, r3
 810603c:	091b      	lsrs	r3, r3, #4
 810603e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106040:	68fb      	ldr	r3, [r7, #12]
 8106042:	f003 0307 	and.w	r3, r3, #7
 8106046:	4a25      	ldr	r2, [pc, #148]	; (81060dc <DMA_CalcBaseAndBitshift+0x160>)
 8106048:	5cd3      	ldrb	r3, [r2, r3]
 810604a:	461a      	mov	r2, r3
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106050:	68fb      	ldr	r3, [r7, #12]
 8106052:	2b03      	cmp	r3, #3
 8106054:	d909      	bls.n	810606a <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	681b      	ldr	r3, [r3, #0]
 810605a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810605e:	f023 0303 	bic.w	r3, r3, #3
 8106062:	1d1a      	adds	r2, r3, #4
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	659a      	str	r2, [r3, #88]	; 0x58
 8106068:	e00e      	b.n	8106088 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	681b      	ldr	r3, [r3, #0]
 810606e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106072:	f023 0303 	bic.w	r3, r3, #3
 8106076:	687a      	ldr	r2, [r7, #4]
 8106078:	6593      	str	r3, [r2, #88]	; 0x58
 810607a:	e005      	b.n	8106088 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 810607c:	687b      	ldr	r3, [r7, #4]
 810607e:	681b      	ldr	r3, [r3, #0]
 8106080:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 810608c:	4618      	mov	r0, r3
 810608e:	3714      	adds	r7, #20
 8106090:	46bd      	mov	sp, r7
 8106092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106096:	4770      	bx	lr
 8106098:	40020010 	.word	0x40020010
 810609c:	40020028 	.word	0x40020028
 81060a0:	40020040 	.word	0x40020040
 81060a4:	40020058 	.word	0x40020058
 81060a8:	40020070 	.word	0x40020070
 81060ac:	40020088 	.word	0x40020088
 81060b0:	400200a0 	.word	0x400200a0
 81060b4:	400200b8 	.word	0x400200b8
 81060b8:	40020410 	.word	0x40020410
 81060bc:	40020428 	.word	0x40020428
 81060c0:	40020440 	.word	0x40020440
 81060c4:	40020458 	.word	0x40020458
 81060c8:	40020470 	.word	0x40020470
 81060cc:	40020488 	.word	0x40020488
 81060d0:	400204a0 	.word	0x400204a0
 81060d4:	400204b8 	.word	0x400204b8
 81060d8:	aaaaaaab 	.word	0xaaaaaaab
 81060dc:	0810e9ac 	.word	0x0810e9ac

081060e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81060e0:	b480      	push	{r7}
 81060e2:	b085      	sub	sp, #20
 81060e4:	af00      	add	r7, sp, #0
 81060e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81060e8:	2300      	movs	r3, #0
 81060ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	699b      	ldr	r3, [r3, #24]
 81060f0:	2b00      	cmp	r3, #0
 81060f2:	d120      	bne.n	8106136 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81060f4:	687b      	ldr	r3, [r7, #4]
 81060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060f8:	2b03      	cmp	r3, #3
 81060fa:	d858      	bhi.n	81061ae <DMA_CheckFifoParam+0xce>
 81060fc:	a201      	add	r2, pc, #4	; (adr r2, 8106104 <DMA_CheckFifoParam+0x24>)
 81060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106102:	bf00      	nop
 8106104:	08106115 	.word	0x08106115
 8106108:	08106127 	.word	0x08106127
 810610c:	08106115 	.word	0x08106115
 8106110:	081061af 	.word	0x081061af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810611c:	2b00      	cmp	r3, #0
 810611e:	d048      	beq.n	81061b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106120:	2301      	movs	r3, #1
 8106122:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106124:	e045      	b.n	81061b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810612a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810612e:	d142      	bne.n	81061b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106130:	2301      	movs	r3, #1
 8106132:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106134:	e03f      	b.n	81061b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	699b      	ldr	r3, [r3, #24]
 810613a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810613e:	d123      	bne.n	8106188 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106144:	2b03      	cmp	r3, #3
 8106146:	d838      	bhi.n	81061ba <DMA_CheckFifoParam+0xda>
 8106148:	a201      	add	r2, pc, #4	; (adr r2, 8106150 <DMA_CheckFifoParam+0x70>)
 810614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810614e:	bf00      	nop
 8106150:	08106161 	.word	0x08106161
 8106154:	08106167 	.word	0x08106167
 8106158:	08106161 	.word	0x08106161
 810615c:	08106179 	.word	0x08106179
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106160:	2301      	movs	r3, #1
 8106162:	73fb      	strb	r3, [r7, #15]
        break;
 8106164:	e030      	b.n	81061c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106166:	687b      	ldr	r3, [r7, #4]
 8106168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810616a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810616e:	2b00      	cmp	r3, #0
 8106170:	d025      	beq.n	81061be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106172:	2301      	movs	r3, #1
 8106174:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106176:	e022      	b.n	81061be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106178:	687b      	ldr	r3, [r7, #4]
 810617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810617c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106180:	d11f      	bne.n	81061c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106182:	2301      	movs	r3, #1
 8106184:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106186:	e01c      	b.n	81061c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810618c:	2b02      	cmp	r3, #2
 810618e:	d902      	bls.n	8106196 <DMA_CheckFifoParam+0xb6>
 8106190:	2b03      	cmp	r3, #3
 8106192:	d003      	beq.n	810619c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106194:	e018      	b.n	81061c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8106196:	2301      	movs	r3, #1
 8106198:	73fb      	strb	r3, [r7, #15]
        break;
 810619a:	e015      	b.n	81061c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81061a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81061a4:	2b00      	cmp	r3, #0
 81061a6:	d00e      	beq.n	81061c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81061a8:	2301      	movs	r3, #1
 81061aa:	73fb      	strb	r3, [r7, #15]
    break;
 81061ac:	e00b      	b.n	81061c6 <DMA_CheckFifoParam+0xe6>
        break;
 81061ae:	bf00      	nop
 81061b0:	e00a      	b.n	81061c8 <DMA_CheckFifoParam+0xe8>
        break;
 81061b2:	bf00      	nop
 81061b4:	e008      	b.n	81061c8 <DMA_CheckFifoParam+0xe8>
        break;
 81061b6:	bf00      	nop
 81061b8:	e006      	b.n	81061c8 <DMA_CheckFifoParam+0xe8>
        break;
 81061ba:	bf00      	nop
 81061bc:	e004      	b.n	81061c8 <DMA_CheckFifoParam+0xe8>
        break;
 81061be:	bf00      	nop
 81061c0:	e002      	b.n	81061c8 <DMA_CheckFifoParam+0xe8>
        break;
 81061c2:	bf00      	nop
 81061c4:	e000      	b.n	81061c8 <DMA_CheckFifoParam+0xe8>
    break;
 81061c6:	bf00      	nop
    }
  }

  return status;
 81061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 81061ca:	4618      	mov	r0, r3
 81061cc:	3714      	adds	r7, #20
 81061ce:	46bd      	mov	sp, r7
 81061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061d4:	4770      	bx	lr
 81061d6:	bf00      	nop

081061d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81061d8:	b480      	push	{r7}
 81061da:	b085      	sub	sp, #20
 81061dc:	af00      	add	r7, sp, #0
 81061de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81061e0:	687b      	ldr	r3, [r7, #4]
 81061e2:	681b      	ldr	r3, [r3, #0]
 81061e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81061e6:	687b      	ldr	r3, [r7, #4]
 81061e8:	681b      	ldr	r3, [r3, #0]
 81061ea:	4a3a      	ldr	r2, [pc, #232]	; (81062d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81061ec:	4293      	cmp	r3, r2
 81061ee:	d022      	beq.n	8106236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81061f0:	687b      	ldr	r3, [r7, #4]
 81061f2:	681b      	ldr	r3, [r3, #0]
 81061f4:	4a38      	ldr	r2, [pc, #224]	; (81062d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81061f6:	4293      	cmp	r3, r2
 81061f8:	d01d      	beq.n	8106236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	681b      	ldr	r3, [r3, #0]
 81061fe:	4a37      	ldr	r2, [pc, #220]	; (81062dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106200:	4293      	cmp	r3, r2
 8106202:	d018      	beq.n	8106236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	681b      	ldr	r3, [r3, #0]
 8106208:	4a35      	ldr	r2, [pc, #212]	; (81062e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810620a:	4293      	cmp	r3, r2
 810620c:	d013      	beq.n	8106236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	4a34      	ldr	r2, [pc, #208]	; (81062e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106214:	4293      	cmp	r3, r2
 8106216:	d00e      	beq.n	8106236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106218:	687b      	ldr	r3, [r7, #4]
 810621a:	681b      	ldr	r3, [r3, #0]
 810621c:	4a32      	ldr	r2, [pc, #200]	; (81062e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810621e:	4293      	cmp	r3, r2
 8106220:	d009      	beq.n	8106236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	681b      	ldr	r3, [r3, #0]
 8106226:	4a31      	ldr	r2, [pc, #196]	; (81062ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106228:	4293      	cmp	r3, r2
 810622a:	d004      	beq.n	8106236 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	681b      	ldr	r3, [r3, #0]
 8106230:	4a2f      	ldr	r2, [pc, #188]	; (81062f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106232:	4293      	cmp	r3, r2
 8106234:	d101      	bne.n	810623a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106236:	2301      	movs	r3, #1
 8106238:	e000      	b.n	810623c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810623a:	2300      	movs	r3, #0
 810623c:	2b00      	cmp	r3, #0
 810623e:	d01c      	beq.n	810627a <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106240:	687b      	ldr	r3, [r7, #4]
 8106242:	681b      	ldr	r3, [r3, #0]
 8106244:	b2db      	uxtb	r3, r3
 8106246:	3b08      	subs	r3, #8
 8106248:	4a2a      	ldr	r2, [pc, #168]	; (81062f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810624a:	fba2 2303 	umull	r2, r3, r2, r3
 810624e:	091b      	lsrs	r3, r3, #4
 8106250:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106252:	68fb      	ldr	r3, [r7, #12]
 8106254:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8106258:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 810625c:	009b      	lsls	r3, r3, #2
 810625e:	461a      	mov	r2, r3
 8106260:	687b      	ldr	r3, [r7, #4]
 8106262:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8106264:	687b      	ldr	r3, [r7, #4]
 8106266:	4a24      	ldr	r2, [pc, #144]	; (81062f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8106268:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810626a:	68fb      	ldr	r3, [r7, #12]
 810626c:	f003 031f 	and.w	r3, r3, #31
 8106270:	2201      	movs	r2, #1
 8106272:	409a      	lsls	r2, r3
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8106278:	e026      	b.n	81062c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	681b      	ldr	r3, [r3, #0]
 810627e:	b2db      	uxtb	r3, r3
 8106280:	3b10      	subs	r3, #16
 8106282:	4a1e      	ldr	r2, [pc, #120]	; (81062fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8106284:	fba2 2303 	umull	r2, r3, r2, r3
 8106288:	091b      	lsrs	r3, r3, #4
 810628a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 810628c:	68bb      	ldr	r3, [r7, #8]
 810628e:	4a1c      	ldr	r2, [pc, #112]	; (8106300 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8106290:	4293      	cmp	r3, r2
 8106292:	d806      	bhi.n	81062a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8106294:	68bb      	ldr	r3, [r7, #8]
 8106296:	4a1b      	ldr	r2, [pc, #108]	; (8106304 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8106298:	4293      	cmp	r3, r2
 810629a:	d902      	bls.n	81062a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 810629c:	68fb      	ldr	r3, [r7, #12]
 810629e:	3308      	adds	r3, #8
 81062a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81062a2:	68fb      	ldr	r3, [r7, #12]
 81062a4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81062a8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81062ac:	009b      	lsls	r3, r3, #2
 81062ae:	461a      	mov	r2, r3
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81062b4:	687b      	ldr	r3, [r7, #4]
 81062b6:	4a14      	ldr	r2, [pc, #80]	; (8106308 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81062b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81062ba:	68fb      	ldr	r3, [r7, #12]
 81062bc:	f003 031f 	and.w	r3, r3, #31
 81062c0:	2201      	movs	r2, #1
 81062c2:	409a      	lsls	r2, r3
 81062c4:	687b      	ldr	r3, [r7, #4]
 81062c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 81062c8:	bf00      	nop
 81062ca:	3714      	adds	r7, #20
 81062cc:	46bd      	mov	sp, r7
 81062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062d2:	4770      	bx	lr
 81062d4:	58025408 	.word	0x58025408
 81062d8:	5802541c 	.word	0x5802541c
 81062dc:	58025430 	.word	0x58025430
 81062e0:	58025444 	.word	0x58025444
 81062e4:	58025458 	.word	0x58025458
 81062e8:	5802546c 	.word	0x5802546c
 81062ec:	58025480 	.word	0x58025480
 81062f0:	58025494 	.word	0x58025494
 81062f4:	cccccccd 	.word	0xcccccccd
 81062f8:	58025880 	.word	0x58025880
 81062fc:	aaaaaaab 	.word	0xaaaaaaab
 8106300:	400204b8 	.word	0x400204b8
 8106304:	4002040f 	.word	0x4002040f
 8106308:	40020880 	.word	0x40020880

0810630c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 810630c:	b480      	push	{r7}
 810630e:	b085      	sub	sp, #20
 8106310:	af00      	add	r7, sp, #0
 8106312:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	685b      	ldr	r3, [r3, #4]
 8106318:	b2db      	uxtb	r3, r3
 810631a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 810631c:	68fb      	ldr	r3, [r7, #12]
 810631e:	2b00      	cmp	r3, #0
 8106320:	d04a      	beq.n	81063b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8106322:	68fb      	ldr	r3, [r7, #12]
 8106324:	2b08      	cmp	r3, #8
 8106326:	d847      	bhi.n	81063b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	681b      	ldr	r3, [r3, #0]
 810632c:	4a25      	ldr	r2, [pc, #148]	; (81063c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810632e:	4293      	cmp	r3, r2
 8106330:	d022      	beq.n	8106378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	681b      	ldr	r3, [r3, #0]
 8106336:	4a24      	ldr	r2, [pc, #144]	; (81063c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8106338:	4293      	cmp	r3, r2
 810633a:	d01d      	beq.n	8106378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	681b      	ldr	r3, [r3, #0]
 8106340:	4a22      	ldr	r2, [pc, #136]	; (81063cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8106342:	4293      	cmp	r3, r2
 8106344:	d018      	beq.n	8106378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106346:	687b      	ldr	r3, [r7, #4]
 8106348:	681b      	ldr	r3, [r3, #0]
 810634a:	4a21      	ldr	r2, [pc, #132]	; (81063d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 810634c:	4293      	cmp	r3, r2
 810634e:	d013      	beq.n	8106378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	681b      	ldr	r3, [r3, #0]
 8106354:	4a1f      	ldr	r2, [pc, #124]	; (81063d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8106356:	4293      	cmp	r3, r2
 8106358:	d00e      	beq.n	8106378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810635a:	687b      	ldr	r3, [r7, #4]
 810635c:	681b      	ldr	r3, [r3, #0]
 810635e:	4a1e      	ldr	r2, [pc, #120]	; (81063d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8106360:	4293      	cmp	r3, r2
 8106362:	d009      	beq.n	8106378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	681b      	ldr	r3, [r3, #0]
 8106368:	4a1c      	ldr	r2, [pc, #112]	; (81063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810636a:	4293      	cmp	r3, r2
 810636c:	d004      	beq.n	8106378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	4a1b      	ldr	r2, [pc, #108]	; (81063e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8106374:	4293      	cmp	r3, r2
 8106376:	d101      	bne.n	810637c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8106378:	2301      	movs	r3, #1
 810637a:	e000      	b.n	810637e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 810637c:	2300      	movs	r3, #0
 810637e:	2b00      	cmp	r3, #0
 8106380:	d00a      	beq.n	8106398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8106382:	68fa      	ldr	r2, [r7, #12]
 8106384:	4b17      	ldr	r3, [pc, #92]	; (81063e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8106386:	4413      	add	r3, r2
 8106388:	009b      	lsls	r3, r3, #2
 810638a:	461a      	mov	r2, r3
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	4a15      	ldr	r2, [pc, #84]	; (81063e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8106394:	671a      	str	r2, [r3, #112]	; 0x70
 8106396:	e009      	b.n	81063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8106398:	68fa      	ldr	r2, [r7, #12]
 810639a:	4b14      	ldr	r3, [pc, #80]	; (81063ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 810639c:	4413      	add	r3, r2
 810639e:	009b      	lsls	r3, r3, #2
 81063a0:	461a      	mov	r2, r3
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	4a11      	ldr	r2, [pc, #68]	; (81063f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81063aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81063ac:	68fb      	ldr	r3, [r7, #12]
 81063ae:	3b01      	subs	r3, #1
 81063b0:	2201      	movs	r2, #1
 81063b2:	409a      	lsls	r2, r3
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81063b8:	bf00      	nop
 81063ba:	3714      	adds	r7, #20
 81063bc:	46bd      	mov	sp, r7
 81063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063c2:	4770      	bx	lr
 81063c4:	58025408 	.word	0x58025408
 81063c8:	5802541c 	.word	0x5802541c
 81063cc:	58025430 	.word	0x58025430
 81063d0:	58025444 	.word	0x58025444
 81063d4:	58025458 	.word	0x58025458
 81063d8:	5802546c 	.word	0x5802546c
 81063dc:	58025480 	.word	0x58025480
 81063e0:	58025494 	.word	0x58025494
 81063e4:	1600963f 	.word	0x1600963f
 81063e8:	58025940 	.word	0x58025940
 81063ec:	1000823f 	.word	0x1000823f
 81063f0:	40020940 	.word	0x40020940

081063f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81063f4:	b480      	push	{r7}
 81063f6:	b089      	sub	sp, #36	; 0x24
 81063f8:	af00      	add	r7, sp, #0
 81063fa:	6078      	str	r0, [r7, #4]
 81063fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81063fe:	2300      	movs	r3, #0
 8106400:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8106402:	4b89      	ldr	r3, [pc, #548]	; (8106628 <HAL_GPIO_Init+0x234>)
 8106404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106406:	e194      	b.n	8106732 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8106408:	683b      	ldr	r3, [r7, #0]
 810640a:	681a      	ldr	r2, [r3, #0]
 810640c:	2101      	movs	r1, #1
 810640e:	69fb      	ldr	r3, [r7, #28]
 8106410:	fa01 f303 	lsl.w	r3, r1, r3
 8106414:	4013      	ands	r3, r2
 8106416:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8106418:	693b      	ldr	r3, [r7, #16]
 810641a:	2b00      	cmp	r3, #0
 810641c:	f000 8186 	beq.w	810672c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106420:	683b      	ldr	r3, [r7, #0]
 8106422:	685b      	ldr	r3, [r3, #4]
 8106424:	2b01      	cmp	r3, #1
 8106426:	d00b      	beq.n	8106440 <HAL_GPIO_Init+0x4c>
 8106428:	683b      	ldr	r3, [r7, #0]
 810642a:	685b      	ldr	r3, [r3, #4]
 810642c:	2b02      	cmp	r3, #2
 810642e:	d007      	beq.n	8106440 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106430:	683b      	ldr	r3, [r7, #0]
 8106432:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8106434:	2b11      	cmp	r3, #17
 8106436:	d003      	beq.n	8106440 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8106438:	683b      	ldr	r3, [r7, #0]
 810643a:	685b      	ldr	r3, [r3, #4]
 810643c:	2b12      	cmp	r3, #18
 810643e:	d130      	bne.n	81064a2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8106440:	687b      	ldr	r3, [r7, #4]
 8106442:	689b      	ldr	r3, [r3, #8]
 8106444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8106446:	69fb      	ldr	r3, [r7, #28]
 8106448:	005b      	lsls	r3, r3, #1
 810644a:	2203      	movs	r2, #3
 810644c:	fa02 f303 	lsl.w	r3, r2, r3
 8106450:	43db      	mvns	r3, r3
 8106452:	69ba      	ldr	r2, [r7, #24]
 8106454:	4013      	ands	r3, r2
 8106456:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8106458:	683b      	ldr	r3, [r7, #0]
 810645a:	68da      	ldr	r2, [r3, #12]
 810645c:	69fb      	ldr	r3, [r7, #28]
 810645e:	005b      	lsls	r3, r3, #1
 8106460:	fa02 f303 	lsl.w	r3, r2, r3
 8106464:	69ba      	ldr	r2, [r7, #24]
 8106466:	4313      	orrs	r3, r2
 8106468:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	69ba      	ldr	r2, [r7, #24]
 810646e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	685b      	ldr	r3, [r3, #4]
 8106474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8106476:	2201      	movs	r2, #1
 8106478:	69fb      	ldr	r3, [r7, #28]
 810647a:	fa02 f303 	lsl.w	r3, r2, r3
 810647e:	43db      	mvns	r3, r3
 8106480:	69ba      	ldr	r2, [r7, #24]
 8106482:	4013      	ands	r3, r2
 8106484:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8106486:	683b      	ldr	r3, [r7, #0]
 8106488:	685b      	ldr	r3, [r3, #4]
 810648a:	091b      	lsrs	r3, r3, #4
 810648c:	f003 0201 	and.w	r2, r3, #1
 8106490:	69fb      	ldr	r3, [r7, #28]
 8106492:	fa02 f303 	lsl.w	r3, r2, r3
 8106496:	69ba      	ldr	r2, [r7, #24]
 8106498:	4313      	orrs	r3, r2
 810649a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	69ba      	ldr	r2, [r7, #24]
 81064a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	68db      	ldr	r3, [r3, #12]
 81064a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81064a8:	69fb      	ldr	r3, [r7, #28]
 81064aa:	005b      	lsls	r3, r3, #1
 81064ac:	2203      	movs	r2, #3
 81064ae:	fa02 f303 	lsl.w	r3, r2, r3
 81064b2:	43db      	mvns	r3, r3
 81064b4:	69ba      	ldr	r2, [r7, #24]
 81064b6:	4013      	ands	r3, r2
 81064b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81064ba:	683b      	ldr	r3, [r7, #0]
 81064bc:	689a      	ldr	r2, [r3, #8]
 81064be:	69fb      	ldr	r3, [r7, #28]
 81064c0:	005b      	lsls	r3, r3, #1
 81064c2:	fa02 f303 	lsl.w	r3, r2, r3
 81064c6:	69ba      	ldr	r2, [r7, #24]
 81064c8:	4313      	orrs	r3, r2
 81064ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81064cc:	687b      	ldr	r3, [r7, #4]
 81064ce:	69ba      	ldr	r2, [r7, #24]
 81064d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81064d2:	683b      	ldr	r3, [r7, #0]
 81064d4:	685b      	ldr	r3, [r3, #4]
 81064d6:	2b02      	cmp	r3, #2
 81064d8:	d003      	beq.n	81064e2 <HAL_GPIO_Init+0xee>
 81064da:	683b      	ldr	r3, [r7, #0]
 81064dc:	685b      	ldr	r3, [r3, #4]
 81064de:	2b12      	cmp	r3, #18
 81064e0:	d123      	bne.n	810652a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81064e2:	69fb      	ldr	r3, [r7, #28]
 81064e4:	08da      	lsrs	r2, r3, #3
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	3208      	adds	r2, #8
 81064ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81064f0:	69fb      	ldr	r3, [r7, #28]
 81064f2:	f003 0307 	and.w	r3, r3, #7
 81064f6:	009b      	lsls	r3, r3, #2
 81064f8:	220f      	movs	r2, #15
 81064fa:	fa02 f303 	lsl.w	r3, r2, r3
 81064fe:	43db      	mvns	r3, r3
 8106500:	69ba      	ldr	r2, [r7, #24]
 8106502:	4013      	ands	r3, r2
 8106504:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8106506:	683b      	ldr	r3, [r7, #0]
 8106508:	691a      	ldr	r2, [r3, #16]
 810650a:	69fb      	ldr	r3, [r7, #28]
 810650c:	f003 0307 	and.w	r3, r3, #7
 8106510:	009b      	lsls	r3, r3, #2
 8106512:	fa02 f303 	lsl.w	r3, r2, r3
 8106516:	69ba      	ldr	r2, [r7, #24]
 8106518:	4313      	orrs	r3, r2
 810651a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810651c:	69fb      	ldr	r3, [r7, #28]
 810651e:	08da      	lsrs	r2, r3, #3
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	3208      	adds	r2, #8
 8106524:	69b9      	ldr	r1, [r7, #24]
 8106526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8106530:	69fb      	ldr	r3, [r7, #28]
 8106532:	005b      	lsls	r3, r3, #1
 8106534:	2203      	movs	r2, #3
 8106536:	fa02 f303 	lsl.w	r3, r2, r3
 810653a:	43db      	mvns	r3, r3
 810653c:	69ba      	ldr	r2, [r7, #24]
 810653e:	4013      	ands	r3, r2
 8106540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8106542:	683b      	ldr	r3, [r7, #0]
 8106544:	685b      	ldr	r3, [r3, #4]
 8106546:	f003 0203 	and.w	r2, r3, #3
 810654a:	69fb      	ldr	r3, [r7, #28]
 810654c:	005b      	lsls	r3, r3, #1
 810654e:	fa02 f303 	lsl.w	r3, r2, r3
 8106552:	69ba      	ldr	r2, [r7, #24]
 8106554:	4313      	orrs	r3, r2
 8106556:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	69ba      	ldr	r2, [r7, #24]
 810655c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810655e:	683b      	ldr	r3, [r7, #0]
 8106560:	685b      	ldr	r3, [r3, #4]
 8106562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106566:	2b00      	cmp	r3, #0
 8106568:	f000 80e0 	beq.w	810672c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810656c:	4b2f      	ldr	r3, [pc, #188]	; (810662c <HAL_GPIO_Init+0x238>)
 810656e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106572:	4a2e      	ldr	r2, [pc, #184]	; (810662c <HAL_GPIO_Init+0x238>)
 8106574:	f043 0302 	orr.w	r3, r3, #2
 8106578:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810657c:	4b2b      	ldr	r3, [pc, #172]	; (810662c <HAL_GPIO_Init+0x238>)
 810657e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8106582:	f003 0302 	and.w	r3, r3, #2
 8106586:	60fb      	str	r3, [r7, #12]
 8106588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810658a:	4a29      	ldr	r2, [pc, #164]	; (8106630 <HAL_GPIO_Init+0x23c>)
 810658c:	69fb      	ldr	r3, [r7, #28]
 810658e:	089b      	lsrs	r3, r3, #2
 8106590:	3302      	adds	r3, #2
 8106592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8106598:	69fb      	ldr	r3, [r7, #28]
 810659a:	f003 0303 	and.w	r3, r3, #3
 810659e:	009b      	lsls	r3, r3, #2
 81065a0:	220f      	movs	r2, #15
 81065a2:	fa02 f303 	lsl.w	r3, r2, r3
 81065a6:	43db      	mvns	r3, r3
 81065a8:	69ba      	ldr	r2, [r7, #24]
 81065aa:	4013      	ands	r3, r2
 81065ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81065ae:	687b      	ldr	r3, [r7, #4]
 81065b0:	4a20      	ldr	r2, [pc, #128]	; (8106634 <HAL_GPIO_Init+0x240>)
 81065b2:	4293      	cmp	r3, r2
 81065b4:	d052      	beq.n	810665c <HAL_GPIO_Init+0x268>
 81065b6:	687b      	ldr	r3, [r7, #4]
 81065b8:	4a1f      	ldr	r2, [pc, #124]	; (8106638 <HAL_GPIO_Init+0x244>)
 81065ba:	4293      	cmp	r3, r2
 81065bc:	d031      	beq.n	8106622 <HAL_GPIO_Init+0x22e>
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	4a1e      	ldr	r2, [pc, #120]	; (810663c <HAL_GPIO_Init+0x248>)
 81065c2:	4293      	cmp	r3, r2
 81065c4:	d02b      	beq.n	810661e <HAL_GPIO_Init+0x22a>
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	4a1d      	ldr	r2, [pc, #116]	; (8106640 <HAL_GPIO_Init+0x24c>)
 81065ca:	4293      	cmp	r3, r2
 81065cc:	d025      	beq.n	810661a <HAL_GPIO_Init+0x226>
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	4a1c      	ldr	r2, [pc, #112]	; (8106644 <HAL_GPIO_Init+0x250>)
 81065d2:	4293      	cmp	r3, r2
 81065d4:	d01f      	beq.n	8106616 <HAL_GPIO_Init+0x222>
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	4a1b      	ldr	r2, [pc, #108]	; (8106648 <HAL_GPIO_Init+0x254>)
 81065da:	4293      	cmp	r3, r2
 81065dc:	d019      	beq.n	8106612 <HAL_GPIO_Init+0x21e>
 81065de:	687b      	ldr	r3, [r7, #4]
 81065e0:	4a1a      	ldr	r2, [pc, #104]	; (810664c <HAL_GPIO_Init+0x258>)
 81065e2:	4293      	cmp	r3, r2
 81065e4:	d013      	beq.n	810660e <HAL_GPIO_Init+0x21a>
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	4a19      	ldr	r2, [pc, #100]	; (8106650 <HAL_GPIO_Init+0x25c>)
 81065ea:	4293      	cmp	r3, r2
 81065ec:	d00d      	beq.n	810660a <HAL_GPIO_Init+0x216>
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	4a18      	ldr	r2, [pc, #96]	; (8106654 <HAL_GPIO_Init+0x260>)
 81065f2:	4293      	cmp	r3, r2
 81065f4:	d007      	beq.n	8106606 <HAL_GPIO_Init+0x212>
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	4a17      	ldr	r2, [pc, #92]	; (8106658 <HAL_GPIO_Init+0x264>)
 81065fa:	4293      	cmp	r3, r2
 81065fc:	d101      	bne.n	8106602 <HAL_GPIO_Init+0x20e>
 81065fe:	2309      	movs	r3, #9
 8106600:	e02d      	b.n	810665e <HAL_GPIO_Init+0x26a>
 8106602:	230a      	movs	r3, #10
 8106604:	e02b      	b.n	810665e <HAL_GPIO_Init+0x26a>
 8106606:	2308      	movs	r3, #8
 8106608:	e029      	b.n	810665e <HAL_GPIO_Init+0x26a>
 810660a:	2307      	movs	r3, #7
 810660c:	e027      	b.n	810665e <HAL_GPIO_Init+0x26a>
 810660e:	2306      	movs	r3, #6
 8106610:	e025      	b.n	810665e <HAL_GPIO_Init+0x26a>
 8106612:	2305      	movs	r3, #5
 8106614:	e023      	b.n	810665e <HAL_GPIO_Init+0x26a>
 8106616:	2304      	movs	r3, #4
 8106618:	e021      	b.n	810665e <HAL_GPIO_Init+0x26a>
 810661a:	2303      	movs	r3, #3
 810661c:	e01f      	b.n	810665e <HAL_GPIO_Init+0x26a>
 810661e:	2302      	movs	r3, #2
 8106620:	e01d      	b.n	810665e <HAL_GPIO_Init+0x26a>
 8106622:	2301      	movs	r3, #1
 8106624:	e01b      	b.n	810665e <HAL_GPIO_Init+0x26a>
 8106626:	bf00      	nop
 8106628:	580000c0 	.word	0x580000c0
 810662c:	58024400 	.word	0x58024400
 8106630:	58000400 	.word	0x58000400
 8106634:	58020000 	.word	0x58020000
 8106638:	58020400 	.word	0x58020400
 810663c:	58020800 	.word	0x58020800
 8106640:	58020c00 	.word	0x58020c00
 8106644:	58021000 	.word	0x58021000
 8106648:	58021400 	.word	0x58021400
 810664c:	58021800 	.word	0x58021800
 8106650:	58021c00 	.word	0x58021c00
 8106654:	58022000 	.word	0x58022000
 8106658:	58022400 	.word	0x58022400
 810665c:	2300      	movs	r3, #0
 810665e:	69fa      	ldr	r2, [r7, #28]
 8106660:	f002 0203 	and.w	r2, r2, #3
 8106664:	0092      	lsls	r2, r2, #2
 8106666:	4093      	lsls	r3, r2
 8106668:	69ba      	ldr	r2, [r7, #24]
 810666a:	4313      	orrs	r3, r2
 810666c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810666e:	4938      	ldr	r1, [pc, #224]	; (8106750 <HAL_GPIO_Init+0x35c>)
 8106670:	69fb      	ldr	r3, [r7, #28]
 8106672:	089b      	lsrs	r3, r3, #2
 8106674:	3302      	adds	r3, #2
 8106676:	69ba      	ldr	r2, [r7, #24]
 8106678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810667c:	697b      	ldr	r3, [r7, #20]
 810667e:	681b      	ldr	r3, [r3, #0]
 8106680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106682:	693b      	ldr	r3, [r7, #16]
 8106684:	43db      	mvns	r3, r3
 8106686:	69ba      	ldr	r2, [r7, #24]
 8106688:	4013      	ands	r3, r2
 810668a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 810668c:	683b      	ldr	r3, [r7, #0]
 810668e:	685b      	ldr	r3, [r3, #4]
 8106690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106694:	2b00      	cmp	r3, #0
 8106696:	d003      	beq.n	81066a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8106698:	69ba      	ldr	r2, [r7, #24]
 810669a:	693b      	ldr	r3, [r7, #16]
 810669c:	4313      	orrs	r3, r2
 810669e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81066a0:	697b      	ldr	r3, [r7, #20]
 81066a2:	69ba      	ldr	r2, [r7, #24]
 81066a4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81066a6:	697b      	ldr	r3, [r7, #20]
 81066a8:	685b      	ldr	r3, [r3, #4]
 81066aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81066ac:	693b      	ldr	r3, [r7, #16]
 81066ae:	43db      	mvns	r3, r3
 81066b0:	69ba      	ldr	r2, [r7, #24]
 81066b2:	4013      	ands	r3, r2
 81066b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81066b6:	683b      	ldr	r3, [r7, #0]
 81066b8:	685b      	ldr	r3, [r3, #4]
 81066ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81066be:	2b00      	cmp	r3, #0
 81066c0:	d003      	beq.n	81066ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81066c2:	69ba      	ldr	r2, [r7, #24]
 81066c4:	693b      	ldr	r3, [r7, #16]
 81066c6:	4313      	orrs	r3, r2
 81066c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81066ca:	697b      	ldr	r3, [r7, #20]
 81066cc:	69ba      	ldr	r2, [r7, #24]
 81066ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81066d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81066d4:	681b      	ldr	r3, [r3, #0]
 81066d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81066d8:	693b      	ldr	r3, [r7, #16]
 81066da:	43db      	mvns	r3, r3
 81066dc:	69ba      	ldr	r2, [r7, #24]
 81066de:	4013      	ands	r3, r2
 81066e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81066e2:	683b      	ldr	r3, [r7, #0]
 81066e4:	685b      	ldr	r3, [r3, #4]
 81066e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81066ea:	2b00      	cmp	r3, #0
 81066ec:	d003      	beq.n	81066f6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81066ee:	69ba      	ldr	r2, [r7, #24]
 81066f0:	693b      	ldr	r3, [r7, #16]
 81066f2:	4313      	orrs	r3, r2
 81066f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81066f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81066fa:	69bb      	ldr	r3, [r7, #24]
 81066fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81066fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8106702:	685b      	ldr	r3, [r3, #4]
 8106704:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8106706:	693b      	ldr	r3, [r7, #16]
 8106708:	43db      	mvns	r3, r3
 810670a:	69ba      	ldr	r2, [r7, #24]
 810670c:	4013      	ands	r3, r2
 810670e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8106710:	683b      	ldr	r3, [r7, #0]
 8106712:	685b      	ldr	r3, [r3, #4]
 8106714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8106718:	2b00      	cmp	r3, #0
 810671a:	d003      	beq.n	8106724 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 810671c:	69ba      	ldr	r2, [r7, #24]
 810671e:	693b      	ldr	r3, [r7, #16]
 8106720:	4313      	orrs	r3, r2
 8106722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8106724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8106728:	69bb      	ldr	r3, [r7, #24]
 810672a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 810672c:	69fb      	ldr	r3, [r7, #28]
 810672e:	3301      	adds	r3, #1
 8106730:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8106732:	683b      	ldr	r3, [r7, #0]
 8106734:	681a      	ldr	r2, [r3, #0]
 8106736:	69fb      	ldr	r3, [r7, #28]
 8106738:	fa22 f303 	lsr.w	r3, r2, r3
 810673c:	2b00      	cmp	r3, #0
 810673e:	f47f ae63 	bne.w	8106408 <HAL_GPIO_Init+0x14>
  }
}
 8106742:	bf00      	nop
 8106744:	bf00      	nop
 8106746:	3724      	adds	r7, #36	; 0x24
 8106748:	46bd      	mov	sp, r7
 810674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810674e:	4770      	bx	lr
 8106750:	58000400 	.word	0x58000400

08106754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8106754:	b480      	push	{r7}
 8106756:	b083      	sub	sp, #12
 8106758:	af00      	add	r7, sp, #0
 810675a:	6078      	str	r0, [r7, #4]
 810675c:	460b      	mov	r3, r1
 810675e:	807b      	strh	r3, [r7, #2]
 8106760:	4613      	mov	r3, r2
 8106762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8106764:	787b      	ldrb	r3, [r7, #1]
 8106766:	2b00      	cmp	r3, #0
 8106768:	d003      	beq.n	8106772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810676a:	887a      	ldrh	r2, [r7, #2]
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8106770:	e003      	b.n	810677a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8106772:	887b      	ldrh	r3, [r7, #2]
 8106774:	041a      	lsls	r2, r3, #16
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	619a      	str	r2, [r3, #24]
}
 810677a:	bf00      	nop
 810677c:	370c      	adds	r7, #12
 810677e:	46bd      	mov	sp, r7
 8106780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106784:	4770      	bx	lr
	...

08106788 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8106788:	b480      	push	{r7}
 810678a:	b083      	sub	sp, #12
 810678c:	af00      	add	r7, sp, #0
 810678e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8106790:	4a08      	ldr	r2, [pc, #32]	; (81067b4 <HAL_HSEM_FastTake+0x2c>)
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	3320      	adds	r3, #32
 8106796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810679a:	4a07      	ldr	r2, [pc, #28]	; (81067b8 <HAL_HSEM_FastTake+0x30>)
 810679c:	4293      	cmp	r3, r2
 810679e:	d101      	bne.n	81067a4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81067a0:	2300      	movs	r3, #0
 81067a2:	e000      	b.n	81067a6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81067a4:	2301      	movs	r3, #1
}
 81067a6:	4618      	mov	r0, r3
 81067a8:	370c      	adds	r7, #12
 81067aa:	46bd      	mov	sp, r7
 81067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b0:	4770      	bx	lr
 81067b2:	bf00      	nop
 81067b4:	58026400 	.word	0x58026400
 81067b8:	80000100 	.word	0x80000100

081067bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81067bc:	b480      	push	{r7}
 81067be:	b083      	sub	sp, #12
 81067c0:	af00      	add	r7, sp, #0
 81067c2:	6078      	str	r0, [r7, #4]
 81067c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81067c6:	4906      	ldr	r1, [pc, #24]	; (81067e0 <HAL_HSEM_Release+0x24>)
 81067c8:	683b      	ldr	r3, [r7, #0]
 81067ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81067d4:	bf00      	nop
 81067d6:	370c      	adds	r7, #12
 81067d8:	46bd      	mov	sp, r7
 81067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067de:	4770      	bx	lr
 81067e0:	58026400 	.word	0x58026400

081067e4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81067e4:	b480      	push	{r7}
 81067e6:	b083      	sub	sp, #12
 81067e8:	af00      	add	r7, sp, #0
 81067ea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81067ec:	4b05      	ldr	r3, [pc, #20]	; (8106804 <HAL_HSEM_ActivateNotification+0x20>)
 81067ee:	681a      	ldr	r2, [r3, #0]
 81067f0:	4904      	ldr	r1, [pc, #16]	; (8106804 <HAL_HSEM_ActivateNotification+0x20>)
 81067f2:	687b      	ldr	r3, [r7, #4]
 81067f4:	4313      	orrs	r3, r2
 81067f6:	600b      	str	r3, [r1, #0]
#endif
}
 81067f8:	bf00      	nop
 81067fa:	370c      	adds	r7, #12
 81067fc:	46bd      	mov	sp, r7
 81067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106802:	4770      	bx	lr
 8106804:	58026510 	.word	0x58026510

08106808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8106808:	b580      	push	{r7, lr}
 810680a:	b082      	sub	sp, #8
 810680c:	af00      	add	r7, sp, #0
 810680e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8106810:	687b      	ldr	r3, [r7, #4]
 8106812:	2b00      	cmp	r3, #0
 8106814:	d101      	bne.n	810681a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8106816:	2301      	movs	r3, #1
 8106818:	e081      	b.n	810691e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106820:	b2db      	uxtb	r3, r3
 8106822:	2b00      	cmp	r3, #0
 8106824:	d106      	bne.n	8106834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	2200      	movs	r2, #0
 810682a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810682e:	6878      	ldr	r0, [r7, #4]
 8106830:	f7fb fad2 	bl	8101dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8106834:	687b      	ldr	r3, [r7, #4]
 8106836:	2224      	movs	r2, #36	; 0x24
 8106838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	681b      	ldr	r3, [r3, #0]
 8106840:	681a      	ldr	r2, [r3, #0]
 8106842:	687b      	ldr	r3, [r7, #4]
 8106844:	681b      	ldr	r3, [r3, #0]
 8106846:	f022 0201 	bic.w	r2, r2, #1
 810684a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	685a      	ldr	r2, [r3, #4]
 8106850:	687b      	ldr	r3, [r7, #4]
 8106852:	681b      	ldr	r3, [r3, #0]
 8106854:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8106858:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	681b      	ldr	r3, [r3, #0]
 810685e:	689a      	ldr	r2, [r3, #8]
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	681b      	ldr	r3, [r3, #0]
 8106864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8106868:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810686a:	687b      	ldr	r3, [r7, #4]
 810686c:	68db      	ldr	r3, [r3, #12]
 810686e:	2b01      	cmp	r3, #1
 8106870:	d107      	bne.n	8106882 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	689a      	ldr	r2, [r3, #8]
 8106876:	687b      	ldr	r3, [r7, #4]
 8106878:	681b      	ldr	r3, [r3, #0]
 810687a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810687e:	609a      	str	r2, [r3, #8]
 8106880:	e006      	b.n	8106890 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	689a      	ldr	r2, [r3, #8]
 8106886:	687b      	ldr	r3, [r7, #4]
 8106888:	681b      	ldr	r3, [r3, #0]
 810688a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 810688e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	68db      	ldr	r3, [r3, #12]
 8106894:	2b02      	cmp	r3, #2
 8106896:	d104      	bne.n	81068a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	681b      	ldr	r3, [r3, #0]
 810689c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81068a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	681b      	ldr	r3, [r3, #0]
 81068a6:	685b      	ldr	r3, [r3, #4]
 81068a8:	687a      	ldr	r2, [r7, #4]
 81068aa:	6812      	ldr	r2, [r2, #0]
 81068ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81068b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81068b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81068b6:	687b      	ldr	r3, [r7, #4]
 81068b8:	681b      	ldr	r3, [r3, #0]
 81068ba:	68da      	ldr	r2, [r3, #12]
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	681b      	ldr	r3, [r3, #0]
 81068c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81068c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	691a      	ldr	r2, [r3, #16]
 81068ca:	687b      	ldr	r3, [r7, #4]
 81068cc:	695b      	ldr	r3, [r3, #20]
 81068ce:	ea42 0103 	orr.w	r1, r2, r3
 81068d2:	687b      	ldr	r3, [r7, #4]
 81068d4:	699b      	ldr	r3, [r3, #24]
 81068d6:	021a      	lsls	r2, r3, #8
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	681b      	ldr	r3, [r3, #0]
 81068dc:	430a      	orrs	r2, r1
 81068de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	69d9      	ldr	r1, [r3, #28]
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	6a1a      	ldr	r2, [r3, #32]
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	681b      	ldr	r3, [r3, #0]
 81068ec:	430a      	orrs	r2, r1
 81068ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	681b      	ldr	r3, [r3, #0]
 81068f4:	681a      	ldr	r2, [r3, #0]
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	681b      	ldr	r3, [r3, #0]
 81068fa:	f042 0201 	orr.w	r2, r2, #1
 81068fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	2200      	movs	r2, #0
 8106904:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	2220      	movs	r2, #32
 810690a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	2200      	movs	r2, #0
 8106912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	2200      	movs	r2, #0
 8106918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 810691c:	2300      	movs	r3, #0
}
 810691e:	4618      	mov	r0, r3
 8106920:	3708      	adds	r7, #8
 8106922:	46bd      	mov	sp, r7
 8106924:	bd80      	pop	{r7, pc}
	...

08106928 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106928:	b580      	push	{r7, lr}
 810692a:	b088      	sub	sp, #32
 810692c:	af02      	add	r7, sp, #8
 810692e:	60f8      	str	r0, [r7, #12]
 8106930:	4608      	mov	r0, r1
 8106932:	4611      	mov	r1, r2
 8106934:	461a      	mov	r2, r3
 8106936:	4603      	mov	r3, r0
 8106938:	817b      	strh	r3, [r7, #10]
 810693a:	460b      	mov	r3, r1
 810693c:	813b      	strh	r3, [r7, #8]
 810693e:	4613      	mov	r3, r2
 8106940:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106942:	68fb      	ldr	r3, [r7, #12]
 8106944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106948:	b2db      	uxtb	r3, r3
 810694a:	2b20      	cmp	r3, #32
 810694c:	f040 80fd 	bne.w	8106b4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8106950:	6a3b      	ldr	r3, [r7, #32]
 8106952:	2b00      	cmp	r3, #0
 8106954:	d002      	beq.n	810695c <HAL_I2C_Mem_Read+0x34>
 8106956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8106958:	2b00      	cmp	r3, #0
 810695a:	d105      	bne.n	8106968 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810695c:	68fb      	ldr	r3, [r7, #12]
 810695e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106962:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106964:	2301      	movs	r3, #1
 8106966:	e0f1      	b.n	8106b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106968:	68fb      	ldr	r3, [r7, #12]
 810696a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810696e:	2b01      	cmp	r3, #1
 8106970:	d101      	bne.n	8106976 <HAL_I2C_Mem_Read+0x4e>
 8106972:	2302      	movs	r3, #2
 8106974:	e0ea      	b.n	8106b4c <HAL_I2C_Mem_Read+0x224>
 8106976:	68fb      	ldr	r3, [r7, #12]
 8106978:	2201      	movs	r2, #1
 810697a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810697e:	f7fc fa9f 	bl	8102ec0 <HAL_GetTick>
 8106982:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8106984:	697b      	ldr	r3, [r7, #20]
 8106986:	9300      	str	r3, [sp, #0]
 8106988:	2319      	movs	r3, #25
 810698a:	2201      	movs	r2, #1
 810698c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8106990:	68f8      	ldr	r0, [r7, #12]
 8106992:	f001 ff63 	bl	810885c <I2C_WaitOnFlagUntilTimeout>
 8106996:	4603      	mov	r3, r0
 8106998:	2b00      	cmp	r3, #0
 810699a:	d001      	beq.n	81069a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810699c:	2301      	movs	r3, #1
 810699e:	e0d5      	b.n	8106b4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81069a0:	68fb      	ldr	r3, [r7, #12]
 81069a2:	2222      	movs	r2, #34	; 0x22
 81069a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81069a8:	68fb      	ldr	r3, [r7, #12]
 81069aa:	2240      	movs	r2, #64	; 0x40
 81069ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81069b0:	68fb      	ldr	r3, [r7, #12]
 81069b2:	2200      	movs	r2, #0
 81069b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81069b6:	68fb      	ldr	r3, [r7, #12]
 81069b8:	6a3a      	ldr	r2, [r7, #32]
 81069ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81069bc:	68fb      	ldr	r3, [r7, #12]
 81069be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81069c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81069c2:	68fb      	ldr	r3, [r7, #12]
 81069c4:	2200      	movs	r2, #0
 81069c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81069c8:	88f8      	ldrh	r0, [r7, #6]
 81069ca:	893a      	ldrh	r2, [r7, #8]
 81069cc:	8979      	ldrh	r1, [r7, #10]
 81069ce:	697b      	ldr	r3, [r7, #20]
 81069d0:	9301      	str	r3, [sp, #4]
 81069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069d4:	9300      	str	r3, [sp, #0]
 81069d6:	4603      	mov	r3, r0
 81069d8:	68f8      	ldr	r0, [r7, #12]
 81069da:	f000 ffa9 	bl	8107930 <I2C_RequestMemoryRead>
 81069de:	4603      	mov	r3, r0
 81069e0:	2b00      	cmp	r3, #0
 81069e2:	d005      	beq.n	81069f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81069e4:	68fb      	ldr	r3, [r7, #12]
 81069e6:	2200      	movs	r2, #0
 81069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81069ec:	2301      	movs	r3, #1
 81069ee:	e0ad      	b.n	8106b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81069f0:	68fb      	ldr	r3, [r7, #12]
 81069f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81069f4:	b29b      	uxth	r3, r3
 81069f6:	2bff      	cmp	r3, #255	; 0xff
 81069f8:	d90e      	bls.n	8106a18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81069fa:	68fb      	ldr	r3, [r7, #12]
 81069fc:	22ff      	movs	r2, #255	; 0xff
 81069fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8106a00:	68fb      	ldr	r3, [r7, #12]
 8106a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106a04:	b2da      	uxtb	r2, r3
 8106a06:	8979      	ldrh	r1, [r7, #10]
 8106a08:	4b52      	ldr	r3, [pc, #328]	; (8106b54 <HAL_I2C_Mem_Read+0x22c>)
 8106a0a:	9300      	str	r3, [sp, #0]
 8106a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106a10:	68f8      	ldr	r0, [r7, #12]
 8106a12:	f002 f845 	bl	8108aa0 <I2C_TransferConfig>
 8106a16:	e00f      	b.n	8106a38 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106a18:	68fb      	ldr	r3, [r7, #12]
 8106a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106a1c:	b29a      	uxth	r2, r3
 8106a1e:	68fb      	ldr	r3, [r7, #12]
 8106a20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8106a22:	68fb      	ldr	r3, [r7, #12]
 8106a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106a26:	b2da      	uxtb	r2, r3
 8106a28:	8979      	ldrh	r1, [r7, #10]
 8106a2a:	4b4a      	ldr	r3, [pc, #296]	; (8106b54 <HAL_I2C_Mem_Read+0x22c>)
 8106a2c:	9300      	str	r3, [sp, #0]
 8106a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106a32:	68f8      	ldr	r0, [r7, #12]
 8106a34:	f002 f834 	bl	8108aa0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8106a38:	697b      	ldr	r3, [r7, #20]
 8106a3a:	9300      	str	r3, [sp, #0]
 8106a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a3e:	2200      	movs	r2, #0
 8106a40:	2104      	movs	r1, #4
 8106a42:	68f8      	ldr	r0, [r7, #12]
 8106a44:	f001 ff0a 	bl	810885c <I2C_WaitOnFlagUntilTimeout>
 8106a48:	4603      	mov	r3, r0
 8106a4a:	2b00      	cmp	r3, #0
 8106a4c:	d001      	beq.n	8106a52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8106a4e:	2301      	movs	r3, #1
 8106a50:	e07c      	b.n	8106b4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8106a52:	68fb      	ldr	r3, [r7, #12]
 8106a54:	681b      	ldr	r3, [r3, #0]
 8106a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106a58:	68fb      	ldr	r3, [r7, #12]
 8106a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106a5c:	b2d2      	uxtb	r2, r2
 8106a5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8106a60:	68fb      	ldr	r3, [r7, #12]
 8106a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106a64:	1c5a      	adds	r2, r3, #1
 8106a66:	68fb      	ldr	r3, [r7, #12]
 8106a68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8106a6a:	68fb      	ldr	r3, [r7, #12]
 8106a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106a6e:	3b01      	subs	r3, #1
 8106a70:	b29a      	uxth	r2, r3
 8106a72:	68fb      	ldr	r3, [r7, #12]
 8106a74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8106a76:	68fb      	ldr	r3, [r7, #12]
 8106a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106a7a:	b29b      	uxth	r3, r3
 8106a7c:	3b01      	subs	r3, #1
 8106a7e:	b29a      	uxth	r2, r3
 8106a80:	68fb      	ldr	r3, [r7, #12]
 8106a82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8106a84:	68fb      	ldr	r3, [r7, #12]
 8106a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106a88:	b29b      	uxth	r3, r3
 8106a8a:	2b00      	cmp	r3, #0
 8106a8c:	d034      	beq.n	8106af8 <HAL_I2C_Mem_Read+0x1d0>
 8106a8e:	68fb      	ldr	r3, [r7, #12]
 8106a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106a92:	2b00      	cmp	r3, #0
 8106a94:	d130      	bne.n	8106af8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8106a96:	697b      	ldr	r3, [r7, #20]
 8106a98:	9300      	str	r3, [sp, #0]
 8106a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a9c:	2200      	movs	r2, #0
 8106a9e:	2180      	movs	r1, #128	; 0x80
 8106aa0:	68f8      	ldr	r0, [r7, #12]
 8106aa2:	f001 fedb 	bl	810885c <I2C_WaitOnFlagUntilTimeout>
 8106aa6:	4603      	mov	r3, r0
 8106aa8:	2b00      	cmp	r3, #0
 8106aaa:	d001      	beq.n	8106ab0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8106aac:	2301      	movs	r3, #1
 8106aae:	e04d      	b.n	8106b4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106ab0:	68fb      	ldr	r3, [r7, #12]
 8106ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106ab4:	b29b      	uxth	r3, r3
 8106ab6:	2bff      	cmp	r3, #255	; 0xff
 8106ab8:	d90e      	bls.n	8106ad8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8106aba:	68fb      	ldr	r3, [r7, #12]
 8106abc:	22ff      	movs	r2, #255	; 0xff
 8106abe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8106ac0:	68fb      	ldr	r3, [r7, #12]
 8106ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ac4:	b2da      	uxtb	r2, r3
 8106ac6:	8979      	ldrh	r1, [r7, #10]
 8106ac8:	2300      	movs	r3, #0
 8106aca:	9300      	str	r3, [sp, #0]
 8106acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106ad0:	68f8      	ldr	r0, [r7, #12]
 8106ad2:	f001 ffe5 	bl	8108aa0 <I2C_TransferConfig>
 8106ad6:	e00f      	b.n	8106af8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8106ad8:	68fb      	ldr	r3, [r7, #12]
 8106ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106adc:	b29a      	uxth	r2, r3
 8106ade:	68fb      	ldr	r3, [r7, #12]
 8106ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8106ae2:	68fb      	ldr	r3, [r7, #12]
 8106ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ae6:	b2da      	uxtb	r2, r3
 8106ae8:	8979      	ldrh	r1, [r7, #10]
 8106aea:	2300      	movs	r3, #0
 8106aec:	9300      	str	r3, [sp, #0]
 8106aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106af2:	68f8      	ldr	r0, [r7, #12]
 8106af4:	f001 ffd4 	bl	8108aa0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8106af8:	68fb      	ldr	r3, [r7, #12]
 8106afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106afc:	b29b      	uxth	r3, r3
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	d19a      	bne.n	8106a38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8106b02:	697a      	ldr	r2, [r7, #20]
 8106b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106b06:	68f8      	ldr	r0, [r7, #12]
 8106b08:	f001 ff28 	bl	810895c <I2C_WaitOnSTOPFlagUntilTimeout>
 8106b0c:	4603      	mov	r3, r0
 8106b0e:	2b00      	cmp	r3, #0
 8106b10:	d001      	beq.n	8106b16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8106b12:	2301      	movs	r3, #1
 8106b14:	e01a      	b.n	8106b4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8106b16:	68fb      	ldr	r3, [r7, #12]
 8106b18:	681b      	ldr	r3, [r3, #0]
 8106b1a:	2220      	movs	r2, #32
 8106b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8106b1e:	68fb      	ldr	r3, [r7, #12]
 8106b20:	681b      	ldr	r3, [r3, #0]
 8106b22:	6859      	ldr	r1, [r3, #4]
 8106b24:	68fb      	ldr	r3, [r7, #12]
 8106b26:	681a      	ldr	r2, [r3, #0]
 8106b28:	4b0b      	ldr	r3, [pc, #44]	; (8106b58 <HAL_I2C_Mem_Read+0x230>)
 8106b2a:	400b      	ands	r3, r1
 8106b2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8106b2e:	68fb      	ldr	r3, [r7, #12]
 8106b30:	2220      	movs	r2, #32
 8106b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8106b36:	68fb      	ldr	r3, [r7, #12]
 8106b38:	2200      	movs	r2, #0
 8106b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106b3e:	68fb      	ldr	r3, [r7, #12]
 8106b40:	2200      	movs	r2, #0
 8106b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8106b46:	2300      	movs	r3, #0
 8106b48:	e000      	b.n	8106b4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8106b4a:	2302      	movs	r3, #2
  }
}
 8106b4c:	4618      	mov	r0, r3
 8106b4e:	3718      	adds	r7, #24
 8106b50:	46bd      	mov	sp, r7
 8106b52:	bd80      	pop	{r7, pc}
 8106b54:	80002400 	.word	0x80002400
 8106b58:	fe00e800 	.word	0xfe00e800

08106b5c <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8106b5c:	b580      	push	{r7, lr}
 8106b5e:	b08a      	sub	sp, #40	; 0x28
 8106b60:	af02      	add	r7, sp, #8
 8106b62:	60f8      	str	r0, [r7, #12]
 8106b64:	4608      	mov	r0, r1
 8106b66:	4611      	mov	r1, r2
 8106b68:	461a      	mov	r2, r3
 8106b6a:	4603      	mov	r3, r0
 8106b6c:	817b      	strh	r3, [r7, #10]
 8106b6e:	460b      	mov	r3, r1
 8106b70:	813b      	strh	r3, [r7, #8]
 8106b72:	4613      	mov	r3, r2
 8106b74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106b76:	68fb      	ldr	r3, [r7, #12]
 8106b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106b7c:	b2db      	uxtb	r3, r3
 8106b7e:	2b20      	cmp	r3, #32
 8106b80:	f040 80d5 	bne.w	8106d2e <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8106b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b86:	2b00      	cmp	r3, #0
 8106b88:	d002      	beq.n	8106b90 <HAL_I2C_Mem_Write_DMA+0x34>
 8106b8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8106b8c:	2b00      	cmp	r3, #0
 8106b8e:	d105      	bne.n	8106b9c <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106b90:	68fb      	ldr	r3, [r7, #12]
 8106b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106b96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106b98:	2301      	movs	r3, #1
 8106b9a:	e0c9      	b.n	8106d30 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8106b9c:	68fb      	ldr	r3, [r7, #12]
 8106b9e:	681b      	ldr	r3, [r3, #0]
 8106ba0:	699b      	ldr	r3, [r3, #24]
 8106ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106baa:	d101      	bne.n	8106bb0 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8106bac:	2302      	movs	r3, #2
 8106bae:	e0bf      	b.n	8106d30 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106bb0:	68fb      	ldr	r3, [r7, #12]
 8106bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106bb6:	2b01      	cmp	r3, #1
 8106bb8:	d101      	bne.n	8106bbe <HAL_I2C_Mem_Write_DMA+0x62>
 8106bba:	2302      	movs	r3, #2
 8106bbc:	e0b8      	b.n	8106d30 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8106bbe:	68fb      	ldr	r3, [r7, #12]
 8106bc0:	2201      	movs	r2, #1
 8106bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106bc6:	f7fc f97b 	bl	8102ec0 <HAL_GetTick>
 8106bca:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8106bcc:	68fb      	ldr	r3, [r7, #12]
 8106bce:	2221      	movs	r2, #33	; 0x21
 8106bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8106bd4:	68fb      	ldr	r3, [r7, #12]
 8106bd6:	2240      	movs	r2, #64	; 0x40
 8106bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8106bdc:	68fb      	ldr	r3, [r7, #12]
 8106bde:	2200      	movs	r2, #0
 8106be0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8106be2:	68fb      	ldr	r3, [r7, #12]
 8106be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8106be8:	68fb      	ldr	r3, [r7, #12]
 8106bea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8106bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8106bee:	68fb      	ldr	r3, [r7, #12]
 8106bf0:	4a51      	ldr	r2, [pc, #324]	; (8106d38 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8106bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8106bf4:	68fb      	ldr	r3, [r7, #12]
 8106bf6:	4a51      	ldr	r2, [pc, #324]	; (8106d3c <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8106bf8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106bfa:	68fb      	ldr	r3, [r7, #12]
 8106bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106bfe:	b29b      	uxth	r3, r3
 8106c00:	2bff      	cmp	r3, #255	; 0xff
 8106c02:	d906      	bls.n	8106c12 <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106c04:	68fb      	ldr	r3, [r7, #12]
 8106c06:	22ff      	movs	r2, #255	; 0xff
 8106c08:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8106c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106c0e:	61fb      	str	r3, [r7, #28]
 8106c10:	e007      	b.n	8106c22 <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106c12:	68fb      	ldr	r3, [r7, #12]
 8106c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106c16:	b29a      	uxth	r2, r3
 8106c18:	68fb      	ldr	r3, [r7, #12]
 8106c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8106c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106c20:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8106c22:	88f8      	ldrh	r0, [r7, #6]
 8106c24:	893a      	ldrh	r2, [r7, #8]
 8106c26:	8979      	ldrh	r1, [r7, #10]
 8106c28:	69bb      	ldr	r3, [r7, #24]
 8106c2a:	9301      	str	r3, [sp, #4]
 8106c2c:	2319      	movs	r3, #25
 8106c2e:	9300      	str	r3, [sp, #0]
 8106c30:	4603      	mov	r3, r0
 8106c32:	68f8      	ldr	r0, [r7, #12]
 8106c34:	f000 fe28 	bl	8107888 <I2C_RequestMemoryWrite>
 8106c38:	4603      	mov	r3, r0
 8106c3a:	2b00      	cmp	r3, #0
 8106c3c:	d005      	beq.n	8106c4a <HAL_I2C_Mem_Write_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106c3e:	68fb      	ldr	r3, [r7, #12]
 8106c40:	2200      	movs	r2, #0
 8106c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106c46:	2301      	movs	r3, #1
 8106c48:	e072      	b.n	8106d30 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8106c4a:	68fb      	ldr	r3, [r7, #12]
 8106c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c4e:	2b00      	cmp	r3, #0
 8106c50:	d020      	beq.n	8106c94 <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8106c52:	68fb      	ldr	r3, [r7, #12]
 8106c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c56:	4a3a      	ldr	r2, [pc, #232]	; (8106d40 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8106c58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8106c5a:	68fb      	ldr	r3, [r7, #12]
 8106c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c5e:	4a39      	ldr	r2, [pc, #228]	; (8106d44 <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8106c60:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8106c62:	68fb      	ldr	r3, [r7, #12]
 8106c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c66:	2200      	movs	r2, #0
 8106c68:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8106c6a:	68fb      	ldr	r3, [r7, #12]
 8106c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c6e:	2200      	movs	r2, #0
 8106c70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8106c72:	68fb      	ldr	r3, [r7, #12]
 8106c74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8106c76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106c78:	68fb      	ldr	r3, [r7, #12]
 8106c7a:	681b      	ldr	r3, [r3, #0]
 8106c7c:	3328      	adds	r3, #40	; 0x28
 8106c7e:	461a      	mov	r2, r3
 8106c80:	68fb      	ldr	r3, [r7, #12]
 8106c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106c84:	f7fd f8bc 	bl	8103e00 <HAL_DMA_Start_IT>
 8106c88:	4603      	mov	r3, r0
 8106c8a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8106c8c:	7dfb      	ldrb	r3, [r7, #23]
 8106c8e:	2b00      	cmp	r3, #0
 8106c90:	d139      	bne.n	8106d06 <HAL_I2C_Mem_Write_DMA+0x1aa>
 8106c92:	e013      	b.n	8106cbc <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106c94:	68fb      	ldr	r3, [r7, #12]
 8106c96:	2220      	movs	r2, #32
 8106c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106c9c:	68fb      	ldr	r3, [r7, #12]
 8106c9e:	2200      	movs	r2, #0
 8106ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8106ca4:	68fb      	ldr	r3, [r7, #12]
 8106ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106ca8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106cac:	68fb      	ldr	r3, [r7, #12]
 8106cae:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8106cb0:	68fb      	ldr	r3, [r7, #12]
 8106cb2:	2200      	movs	r2, #0
 8106cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106cb8:	2301      	movs	r3, #1
 8106cba:	e039      	b.n	8106d30 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8106cbc:	68fb      	ldr	r3, [r7, #12]
 8106cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106cc0:	b2da      	uxtb	r2, r3
 8106cc2:	8979      	ldrh	r1, [r7, #10]
 8106cc4:	2300      	movs	r3, #0
 8106cc6:	9300      	str	r3, [sp, #0]
 8106cc8:	69fb      	ldr	r3, [r7, #28]
 8106cca:	68f8      	ldr	r0, [r7, #12]
 8106ccc:	f001 fee8 	bl	8108aa0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8106cd0:	68fb      	ldr	r3, [r7, #12]
 8106cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106cd4:	b29a      	uxth	r2, r3
 8106cd6:	68fb      	ldr	r3, [r7, #12]
 8106cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106cda:	1ad3      	subs	r3, r2, r3
 8106cdc:	b29a      	uxth	r2, r3
 8106cde:	68fb      	ldr	r3, [r7, #12]
 8106ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106ce2:	68fb      	ldr	r3, [r7, #12]
 8106ce4:	2200      	movs	r2, #0
 8106ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8106cea:	2110      	movs	r1, #16
 8106cec:	68f8      	ldr	r0, [r7, #12]
 8106cee:	f001 ff05 	bl	8108afc <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8106cf2:	68fb      	ldr	r3, [r7, #12]
 8106cf4:	681b      	ldr	r3, [r3, #0]
 8106cf6:	681a      	ldr	r2, [r3, #0]
 8106cf8:	68fb      	ldr	r3, [r7, #12]
 8106cfa:	681b      	ldr	r3, [r3, #0]
 8106cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8106d00:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8106d02:	2300      	movs	r3, #0
 8106d04:	e014      	b.n	8106d30 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106d06:	68fb      	ldr	r3, [r7, #12]
 8106d08:	2220      	movs	r2, #32
 8106d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106d0e:	68fb      	ldr	r3, [r7, #12]
 8106d10:	2200      	movs	r2, #0
 8106d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8106d16:	68fb      	ldr	r3, [r7, #12]
 8106d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106d1a:	f043 0210 	orr.w	r2, r3, #16
 8106d1e:	68fb      	ldr	r3, [r7, #12]
 8106d20:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8106d22:	68fb      	ldr	r3, [r7, #12]
 8106d24:	2200      	movs	r2, #0
 8106d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106d2a:	2301      	movs	r3, #1
 8106d2c:	e000      	b.n	8106d30 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8106d2e:	2302      	movs	r3, #2
  }
}
 8106d30:	4618      	mov	r0, r3
 8106d32:	3720      	adds	r7, #32
 8106d34:	46bd      	mov	sp, r7
 8106d36:	bd80      	pop	{r7, pc}
 8106d38:	ffff0000 	.word	0xffff0000
 8106d3c:	081072dd 	.word	0x081072dd
 8106d40:	0810847f 	.word	0x0810847f
 8106d44:	081085ad 	.word	0x081085ad

08106d48 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8106d48:	b580      	push	{r7, lr}
 8106d4a:	b08a      	sub	sp, #40	; 0x28
 8106d4c:	af02      	add	r7, sp, #8
 8106d4e:	60f8      	str	r0, [r7, #12]
 8106d50:	4608      	mov	r0, r1
 8106d52:	4611      	mov	r1, r2
 8106d54:	461a      	mov	r2, r3
 8106d56:	4603      	mov	r3, r0
 8106d58:	817b      	strh	r3, [r7, #10]
 8106d5a:	460b      	mov	r3, r1
 8106d5c:	813b      	strh	r3, [r7, #8]
 8106d5e:	4613      	mov	r3, r2
 8106d60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8106d62:	68fb      	ldr	r3, [r7, #12]
 8106d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106d68:	b2db      	uxtb	r3, r3
 8106d6a:	2b20      	cmp	r3, #32
 8106d6c:	f040 80d5 	bne.w	8106f1a <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8106d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d72:	2b00      	cmp	r3, #0
 8106d74:	d002      	beq.n	8106d7c <HAL_I2C_Mem_Read_DMA+0x34>
 8106d76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8106d78:	2b00      	cmp	r3, #0
 8106d7a:	d105      	bne.n	8106d88 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8106d7c:	68fb      	ldr	r3, [r7, #12]
 8106d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8106d82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8106d84:	2301      	movs	r3, #1
 8106d86:	e0c9      	b.n	8106f1c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8106d88:	68fb      	ldr	r3, [r7, #12]
 8106d8a:	681b      	ldr	r3, [r3, #0]
 8106d8c:	699b      	ldr	r3, [r3, #24]
 8106d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106d96:	d101      	bne.n	8106d9c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8106d98:	2302      	movs	r3, #2
 8106d9a:	e0bf      	b.n	8106f1c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8106d9c:	68fb      	ldr	r3, [r7, #12]
 8106d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106da2:	2b01      	cmp	r3, #1
 8106da4:	d101      	bne.n	8106daa <HAL_I2C_Mem_Read_DMA+0x62>
 8106da6:	2302      	movs	r3, #2
 8106da8:	e0b8      	b.n	8106f1c <HAL_I2C_Mem_Read_DMA+0x1d4>
 8106daa:	68fb      	ldr	r3, [r7, #12]
 8106dac:	2201      	movs	r2, #1
 8106dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8106db2:	f7fc f885 	bl	8102ec0 <HAL_GetTick>
 8106db6:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8106db8:	68fb      	ldr	r3, [r7, #12]
 8106dba:	2222      	movs	r2, #34	; 0x22
 8106dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8106dc0:	68fb      	ldr	r3, [r7, #12]
 8106dc2:	2240      	movs	r2, #64	; 0x40
 8106dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8106dc8:	68fb      	ldr	r3, [r7, #12]
 8106dca:	2200      	movs	r2, #0
 8106dcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8106dce:	68fb      	ldr	r3, [r7, #12]
 8106dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8106dd4:	68fb      	ldr	r3, [r7, #12]
 8106dd6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8106dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8106dda:	68fb      	ldr	r3, [r7, #12]
 8106ddc:	4a51      	ldr	r2, [pc, #324]	; (8106f24 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8106dde:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8106de0:	68fb      	ldr	r3, [r7, #12]
 8106de2:	4a51      	ldr	r2, [pc, #324]	; (8106f28 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8106de4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8106de6:	68fb      	ldr	r3, [r7, #12]
 8106de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106dea:	b29b      	uxth	r3, r3
 8106dec:	2bff      	cmp	r3, #255	; 0xff
 8106dee:	d906      	bls.n	8106dfe <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8106df0:	68fb      	ldr	r3, [r7, #12]
 8106df2:	22ff      	movs	r2, #255	; 0xff
 8106df4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8106df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8106dfa:	61fb      	str	r3, [r7, #28]
 8106dfc:	e007      	b.n	8106e0e <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8106dfe:	68fb      	ldr	r3, [r7, #12]
 8106e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106e02:	b29a      	uxth	r2, r3
 8106e04:	68fb      	ldr	r3, [r7, #12]
 8106e06:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8106e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8106e0c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8106e0e:	88f8      	ldrh	r0, [r7, #6]
 8106e10:	893a      	ldrh	r2, [r7, #8]
 8106e12:	8979      	ldrh	r1, [r7, #10]
 8106e14:	69bb      	ldr	r3, [r7, #24]
 8106e16:	9301      	str	r3, [sp, #4]
 8106e18:	2319      	movs	r3, #25
 8106e1a:	9300      	str	r3, [sp, #0]
 8106e1c:	4603      	mov	r3, r0
 8106e1e:	68f8      	ldr	r0, [r7, #12]
 8106e20:	f000 fd86 	bl	8107930 <I2C_RequestMemoryRead>
 8106e24:	4603      	mov	r3, r0
 8106e26:	2b00      	cmp	r3, #0
 8106e28:	d005      	beq.n	8106e36 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106e2a:	68fb      	ldr	r3, [r7, #12]
 8106e2c:	2200      	movs	r2, #0
 8106e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106e32:	2301      	movs	r3, #1
 8106e34:	e072      	b.n	8106f1c <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8106e36:	68fb      	ldr	r3, [r7, #12]
 8106e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d020      	beq.n	8106e80 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8106e3e:	68fb      	ldr	r3, [r7, #12]
 8106e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e42:	4a3a      	ldr	r2, [pc, #232]	; (8106f2c <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8106e44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8106e46:	68fb      	ldr	r3, [r7, #12]
 8106e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e4a:	4a39      	ldr	r2, [pc, #228]	; (8106f30 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8106e4c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8106e4e:	68fb      	ldr	r3, [r7, #12]
 8106e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e52:	2200      	movs	r2, #0
 8106e54:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8106e56:	68fb      	ldr	r3, [r7, #12]
 8106e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e5a:	2200      	movs	r2, #0
 8106e5c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8106e5e:	68fb      	ldr	r3, [r7, #12]
 8106e60:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8106e62:	68fb      	ldr	r3, [r7, #12]
 8106e64:	681b      	ldr	r3, [r3, #0]
 8106e66:	3324      	adds	r3, #36	; 0x24
 8106e68:	4619      	mov	r1, r3
 8106e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106e6c:	68fb      	ldr	r3, [r7, #12]
 8106e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106e70:	f7fc ffc6 	bl	8103e00 <HAL_DMA_Start_IT>
 8106e74:	4603      	mov	r3, r0
 8106e76:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8106e78:	7dfb      	ldrb	r3, [r7, #23]
 8106e7a:	2b00      	cmp	r3, #0
 8106e7c:	d139      	bne.n	8106ef2 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8106e7e:	e013      	b.n	8106ea8 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106e80:	68fb      	ldr	r3, [r7, #12]
 8106e82:	2220      	movs	r2, #32
 8106e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106e88:	68fb      	ldr	r3, [r7, #12]
 8106e8a:	2200      	movs	r2, #0
 8106e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8106e90:	68fb      	ldr	r3, [r7, #12]
 8106e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106e94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8106e98:	68fb      	ldr	r3, [r7, #12]
 8106e9a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8106e9c:	68fb      	ldr	r3, [r7, #12]
 8106e9e:	2200      	movs	r2, #0
 8106ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106ea4:	2301      	movs	r3, #1
 8106ea6:	e039      	b.n	8106f1c <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8106ea8:	68fb      	ldr	r3, [r7, #12]
 8106eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106eac:	b2da      	uxtb	r2, r3
 8106eae:	8979      	ldrh	r1, [r7, #10]
 8106eb0:	4b20      	ldr	r3, [pc, #128]	; (8106f34 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8106eb2:	9300      	str	r3, [sp, #0]
 8106eb4:	69fb      	ldr	r3, [r7, #28]
 8106eb6:	68f8      	ldr	r0, [r7, #12]
 8106eb8:	f001 fdf2 	bl	8108aa0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8106ebc:	68fb      	ldr	r3, [r7, #12]
 8106ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8106ec0:	b29a      	uxth	r2, r3
 8106ec2:	68fb      	ldr	r3, [r7, #12]
 8106ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8106ec6:	1ad3      	subs	r3, r2, r3
 8106ec8:	b29a      	uxth	r2, r3
 8106eca:	68fb      	ldr	r3, [r7, #12]
 8106ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8106ece:	68fb      	ldr	r3, [r7, #12]
 8106ed0:	2200      	movs	r2, #0
 8106ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8106ed6:	2110      	movs	r1, #16
 8106ed8:	68f8      	ldr	r0, [r7, #12]
 8106eda:	f001 fe0f 	bl	8108afc <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8106ede:	68fb      	ldr	r3, [r7, #12]
 8106ee0:	681b      	ldr	r3, [r3, #0]
 8106ee2:	681a      	ldr	r2, [r3, #0]
 8106ee4:	68fb      	ldr	r3, [r7, #12]
 8106ee6:	681b      	ldr	r3, [r3, #0]
 8106ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106eec:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8106eee:	2300      	movs	r3, #0
 8106ef0:	e014      	b.n	8106f1c <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8106ef2:	68fb      	ldr	r3, [r7, #12]
 8106ef4:	2220      	movs	r2, #32
 8106ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8106efa:	68fb      	ldr	r3, [r7, #12]
 8106efc:	2200      	movs	r2, #0
 8106efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8106f02:	68fb      	ldr	r3, [r7, #12]
 8106f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106f06:	f043 0210 	orr.w	r2, r3, #16
 8106f0a:	68fb      	ldr	r3, [r7, #12]
 8106f0c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8106f0e:	68fb      	ldr	r3, [r7, #12]
 8106f10:	2200      	movs	r2, #0
 8106f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8106f16:	2301      	movs	r3, #1
 8106f18:	e000      	b.n	8106f1c <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8106f1a:	2302      	movs	r3, #2
  }
}
 8106f1c:	4618      	mov	r0, r3
 8106f1e:	3720      	adds	r7, #32
 8106f20:	46bd      	mov	sp, r7
 8106f22:	bd80      	pop	{r7, pc}
 8106f24:	ffff0000 	.word	0xffff0000
 8106f28:	081072dd 	.word	0x081072dd
 8106f2c:	08108515 	.word	0x08108515
 8106f30:	081085ad 	.word	0x081085ad
 8106f34:	80002400 	.word	0x80002400

08106f38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8106f38:	b580      	push	{r7, lr}
 8106f3a:	b084      	sub	sp, #16
 8106f3c:	af00      	add	r7, sp, #0
 8106f3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106f40:	687b      	ldr	r3, [r7, #4]
 8106f42:	681b      	ldr	r3, [r3, #0]
 8106f44:	699b      	ldr	r3, [r3, #24]
 8106f46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106f48:	687b      	ldr	r3, [r7, #4]
 8106f4a:	681b      	ldr	r3, [r3, #0]
 8106f4c:	681b      	ldr	r3, [r3, #0]
 8106f4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8106f50:	687b      	ldr	r3, [r7, #4]
 8106f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106f54:	2b00      	cmp	r3, #0
 8106f56:	d005      	beq.n	8106f64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8106f58:	687b      	ldr	r3, [r7, #4]
 8106f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106f5c:	68ba      	ldr	r2, [r7, #8]
 8106f5e:	68f9      	ldr	r1, [r7, #12]
 8106f60:	6878      	ldr	r0, [r7, #4]
 8106f62:	4798      	blx	r3
  }
}
 8106f64:	bf00      	nop
 8106f66:	3710      	adds	r7, #16
 8106f68:	46bd      	mov	sp, r7
 8106f6a:	bd80      	pop	{r7, pc}

08106f6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8106f6c:	b580      	push	{r7, lr}
 8106f6e:	b086      	sub	sp, #24
 8106f70:	af00      	add	r7, sp, #0
 8106f72:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	681b      	ldr	r3, [r3, #0]
 8106f78:	699b      	ldr	r3, [r3, #24]
 8106f7a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8106f7c:	687b      	ldr	r3, [r7, #4]
 8106f7e:	681b      	ldr	r3, [r3, #0]
 8106f80:	681b      	ldr	r3, [r3, #0]
 8106f82:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106f84:	697b      	ldr	r3, [r7, #20]
 8106f86:	0a1b      	lsrs	r3, r3, #8
 8106f88:	f003 0301 	and.w	r3, r3, #1
 8106f8c:	2b00      	cmp	r3, #0
 8106f8e:	d010      	beq.n	8106fb2 <HAL_I2C_ER_IRQHandler+0x46>
 8106f90:	693b      	ldr	r3, [r7, #16]
 8106f92:	09db      	lsrs	r3, r3, #7
 8106f94:	f003 0301 	and.w	r3, r3, #1
 8106f98:	2b00      	cmp	r3, #0
 8106f9a:	d00a      	beq.n	8106fb2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106fa0:	f043 0201 	orr.w	r2, r3, #1
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8106fa8:	687b      	ldr	r3, [r7, #4]
 8106faa:	681b      	ldr	r3, [r3, #0]
 8106fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8106fb0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106fb2:	697b      	ldr	r3, [r7, #20]
 8106fb4:	0a9b      	lsrs	r3, r3, #10
 8106fb6:	f003 0301 	and.w	r3, r3, #1
 8106fba:	2b00      	cmp	r3, #0
 8106fbc:	d010      	beq.n	8106fe0 <HAL_I2C_ER_IRQHandler+0x74>
 8106fbe:	693b      	ldr	r3, [r7, #16]
 8106fc0:	09db      	lsrs	r3, r3, #7
 8106fc2:	f003 0301 	and.w	r3, r3, #1
 8106fc6:	2b00      	cmp	r3, #0
 8106fc8:	d00a      	beq.n	8106fe0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8106fca:	687b      	ldr	r3, [r7, #4]
 8106fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106fce:	f043 0208 	orr.w	r2, r3, #8
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	681b      	ldr	r3, [r3, #0]
 8106fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8106fde:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8106fe0:	697b      	ldr	r3, [r7, #20]
 8106fe2:	0a5b      	lsrs	r3, r3, #9
 8106fe4:	f003 0301 	and.w	r3, r3, #1
 8106fe8:	2b00      	cmp	r3, #0
 8106fea:	d010      	beq.n	810700e <HAL_I2C_ER_IRQHandler+0xa2>
 8106fec:	693b      	ldr	r3, [r7, #16]
 8106fee:	09db      	lsrs	r3, r3, #7
 8106ff0:	f003 0301 	and.w	r3, r3, #1
 8106ff4:	2b00      	cmp	r3, #0
 8106ff6:	d00a      	beq.n	810700e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8106ff8:	687b      	ldr	r3, [r7, #4]
 8106ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106ffc:	f043 0202 	orr.w	r2, r3, #2
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8107004:	687b      	ldr	r3, [r7, #4]
 8107006:	681b      	ldr	r3, [r3, #0]
 8107008:	f44f 7200 	mov.w	r2, #512	; 0x200
 810700c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107012:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8107014:	68fb      	ldr	r3, [r7, #12]
 8107016:	f003 030b 	and.w	r3, r3, #11
 810701a:	2b00      	cmp	r3, #0
 810701c:	d003      	beq.n	8107026 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 810701e:	68f9      	ldr	r1, [r7, #12]
 8107020:	6878      	ldr	r0, [r7, #4]
 8107022:	f001 f911 	bl	8108248 <I2C_ITError>
  }
}
 8107026:	bf00      	nop
 8107028:	3718      	adds	r7, #24
 810702a:	46bd      	mov	sp, r7
 810702c:	bd80      	pop	{r7, pc}

0810702e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810702e:	b480      	push	{r7}
 8107030:	b083      	sub	sp, #12
 8107032:	af00      	add	r7, sp, #0
 8107034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8107036:	bf00      	nop
 8107038:	370c      	adds	r7, #12
 810703a:	46bd      	mov	sp, r7
 810703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107040:	4770      	bx	lr

08107042 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107042:	b480      	push	{r7}
 8107044:	b083      	sub	sp, #12
 8107046:	af00      	add	r7, sp, #0
 8107048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 810704a:	bf00      	nop
 810704c:	370c      	adds	r7, #12
 810704e:	46bd      	mov	sp, r7
 8107050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107054:	4770      	bx	lr

08107056 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8107056:	b480      	push	{r7}
 8107058:	b083      	sub	sp, #12
 810705a:	af00      	add	r7, sp, #0
 810705c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 810705e:	bf00      	nop
 8107060:	370c      	adds	r7, #12
 8107062:	46bd      	mov	sp, r7
 8107064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107068:	4770      	bx	lr

0810706a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810706a:	b480      	push	{r7}
 810706c:	b083      	sub	sp, #12
 810706e:	af00      	add	r7, sp, #0
 8107070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8107072:	bf00      	nop
 8107074:	370c      	adds	r7, #12
 8107076:	46bd      	mov	sp, r7
 8107078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810707c:	4770      	bx	lr

0810707e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 810707e:	b480      	push	{r7}
 8107080:	b083      	sub	sp, #12
 8107082:	af00      	add	r7, sp, #0
 8107084:	6078      	str	r0, [r7, #4]
 8107086:	460b      	mov	r3, r1
 8107088:	70fb      	strb	r3, [r7, #3]
 810708a:	4613      	mov	r3, r2
 810708c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 810708e:	bf00      	nop
 8107090:	370c      	adds	r7, #12
 8107092:	46bd      	mov	sp, r7
 8107094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107098:	4770      	bx	lr

0810709a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 810709a:	b480      	push	{r7}
 810709c:	b083      	sub	sp, #12
 810709e:	af00      	add	r7, sp, #0
 81070a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 81070a2:	bf00      	nop
 81070a4:	370c      	adds	r7, #12
 81070a6:	46bd      	mov	sp, r7
 81070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070ac:	4770      	bx	lr

081070ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 81070ae:	b480      	push	{r7}
 81070b0:	b083      	sub	sp, #12
 81070b2:	af00      	add	r7, sp, #0
 81070b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 81070b6:	bf00      	nop
 81070b8:	370c      	adds	r7, #12
 81070ba:	46bd      	mov	sp, r7
 81070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070c0:	4770      	bx	lr

081070c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 81070c2:	b480      	push	{r7}
 81070c4:	b083      	sub	sp, #12
 81070c6:	af00      	add	r7, sp, #0
 81070c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 81070ca:	bf00      	nop
 81070cc:	370c      	adds	r7, #12
 81070ce:	46bd      	mov	sp, r7
 81070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070d4:	4770      	bx	lr

081070d6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 81070d6:	b580      	push	{r7, lr}
 81070d8:	b086      	sub	sp, #24
 81070da:	af00      	add	r7, sp, #0
 81070dc:	60f8      	str	r0, [r7, #12]
 81070de:	60b9      	str	r1, [r7, #8]
 81070e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 81070e2:	68fb      	ldr	r3, [r7, #12]
 81070e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 81070e8:	68bb      	ldr	r3, [r7, #8]
 81070ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 81070ec:	68fb      	ldr	r3, [r7, #12]
 81070ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81070f2:	2b01      	cmp	r3, #1
 81070f4:	d101      	bne.n	81070fa <I2C_Slave_ISR_IT+0x24>
 81070f6:	2302      	movs	r3, #2
 81070f8:	e0ec      	b.n	81072d4 <I2C_Slave_ISR_IT+0x1fe>
 81070fa:	68fb      	ldr	r3, [r7, #12]
 81070fc:	2201      	movs	r2, #1
 81070fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8107102:	693b      	ldr	r3, [r7, #16]
 8107104:	095b      	lsrs	r3, r3, #5
 8107106:	f003 0301 	and.w	r3, r3, #1
 810710a:	2b00      	cmp	r3, #0
 810710c:	d009      	beq.n	8107122 <I2C_Slave_ISR_IT+0x4c>
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	095b      	lsrs	r3, r3, #5
 8107112:	f003 0301 	and.w	r3, r3, #1
 8107116:	2b00      	cmp	r3, #0
 8107118:	d003      	beq.n	8107122 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 810711a:	6939      	ldr	r1, [r7, #16]
 810711c:	68f8      	ldr	r0, [r7, #12]
 810711e:	f000 fe45 	bl	8107dac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8107122:	693b      	ldr	r3, [r7, #16]
 8107124:	091b      	lsrs	r3, r3, #4
 8107126:	f003 0301 	and.w	r3, r3, #1
 810712a:	2b00      	cmp	r3, #0
 810712c:	d04d      	beq.n	81071ca <I2C_Slave_ISR_IT+0xf4>
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	091b      	lsrs	r3, r3, #4
 8107132:	f003 0301 	and.w	r3, r3, #1
 8107136:	2b00      	cmp	r3, #0
 8107138:	d047      	beq.n	81071ca <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 810713a:	68fb      	ldr	r3, [r7, #12]
 810713c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810713e:	b29b      	uxth	r3, r3
 8107140:	2b00      	cmp	r3, #0
 8107142:	d128      	bne.n	8107196 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8107144:	68fb      	ldr	r3, [r7, #12]
 8107146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810714a:	b2db      	uxtb	r3, r3
 810714c:	2b28      	cmp	r3, #40	; 0x28
 810714e:	d108      	bne.n	8107162 <I2C_Slave_ISR_IT+0x8c>
 8107150:	697b      	ldr	r3, [r7, #20]
 8107152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107156:	d104      	bne.n	8107162 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8107158:	6939      	ldr	r1, [r7, #16]
 810715a:	68f8      	ldr	r0, [r7, #12]
 810715c:	f001 f81e 	bl	810819c <I2C_ITListenCplt>
 8107160:	e032      	b.n	81071c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8107162:	68fb      	ldr	r3, [r7, #12]
 8107164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107168:	b2db      	uxtb	r3, r3
 810716a:	2b29      	cmp	r3, #41	; 0x29
 810716c:	d10e      	bne.n	810718c <I2C_Slave_ISR_IT+0xb6>
 810716e:	697b      	ldr	r3, [r7, #20]
 8107170:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107174:	d00a      	beq.n	810718c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107176:	68fb      	ldr	r3, [r7, #12]
 8107178:	681b      	ldr	r3, [r3, #0]
 810717a:	2210      	movs	r2, #16
 810717c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 810717e:	68f8      	ldr	r0, [r7, #12]
 8107180:	f001 f959 	bl	8108436 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8107184:	68f8      	ldr	r0, [r7, #12]
 8107186:	f000 fce8 	bl	8107b5a <I2C_ITSlaveSeqCplt>
 810718a:	e01d      	b.n	81071c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810718c:	68fb      	ldr	r3, [r7, #12]
 810718e:	681b      	ldr	r3, [r3, #0]
 8107190:	2210      	movs	r2, #16
 8107192:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8107194:	e096      	b.n	81072c4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107196:	68fb      	ldr	r3, [r7, #12]
 8107198:	681b      	ldr	r3, [r3, #0]
 810719a:	2210      	movs	r2, #16
 810719c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810719e:	68fb      	ldr	r3, [r7, #12]
 81071a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81071a2:	f043 0204 	orr.w	r2, r3, #4
 81071a6:	68fb      	ldr	r3, [r7, #12]
 81071a8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 81071aa:	697b      	ldr	r3, [r7, #20]
 81071ac:	2b00      	cmp	r3, #0
 81071ae:	d004      	beq.n	81071ba <I2C_Slave_ISR_IT+0xe4>
 81071b0:	697b      	ldr	r3, [r7, #20]
 81071b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81071b6:	f040 8085 	bne.w	81072c4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 81071ba:	68fb      	ldr	r3, [r7, #12]
 81071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81071be:	4619      	mov	r1, r3
 81071c0:	68f8      	ldr	r0, [r7, #12]
 81071c2:	f001 f841 	bl	8108248 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 81071c6:	e07d      	b.n	81072c4 <I2C_Slave_ISR_IT+0x1ee>
 81071c8:	e07c      	b.n	81072c4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 81071ca:	693b      	ldr	r3, [r7, #16]
 81071cc:	089b      	lsrs	r3, r3, #2
 81071ce:	f003 0301 	and.w	r3, r3, #1
 81071d2:	2b00      	cmp	r3, #0
 81071d4:	d030      	beq.n	8107238 <I2C_Slave_ISR_IT+0x162>
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	089b      	lsrs	r3, r3, #2
 81071da:	f003 0301 	and.w	r3, r3, #1
 81071de:	2b00      	cmp	r3, #0
 81071e0:	d02a      	beq.n	8107238 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 81071e2:	68fb      	ldr	r3, [r7, #12]
 81071e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81071e6:	b29b      	uxth	r3, r3
 81071e8:	2b00      	cmp	r3, #0
 81071ea:	d018      	beq.n	810721e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81071ec:	68fb      	ldr	r3, [r7, #12]
 81071ee:	681b      	ldr	r3, [r3, #0]
 81071f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81071f2:	68fb      	ldr	r3, [r7, #12]
 81071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81071f6:	b2d2      	uxtb	r2, r2
 81071f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81071fa:	68fb      	ldr	r3, [r7, #12]
 81071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81071fe:	1c5a      	adds	r2, r3, #1
 8107200:	68fb      	ldr	r3, [r7, #12]
 8107202:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8107204:	68fb      	ldr	r3, [r7, #12]
 8107206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8107208:	3b01      	subs	r3, #1
 810720a:	b29a      	uxth	r2, r3
 810720c:	68fb      	ldr	r3, [r7, #12]
 810720e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8107210:	68fb      	ldr	r3, [r7, #12]
 8107212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107214:	b29b      	uxth	r3, r3
 8107216:	3b01      	subs	r3, #1
 8107218:	b29a      	uxth	r2, r3
 810721a:	68fb      	ldr	r3, [r7, #12]
 810721c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 810721e:	68fb      	ldr	r3, [r7, #12]
 8107220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107222:	b29b      	uxth	r3, r3
 8107224:	2b00      	cmp	r3, #0
 8107226:	d14f      	bne.n	81072c8 <I2C_Slave_ISR_IT+0x1f2>
 8107228:	697b      	ldr	r3, [r7, #20]
 810722a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 810722e:	d04b      	beq.n	81072c8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8107230:	68f8      	ldr	r0, [r7, #12]
 8107232:	f000 fc92 	bl	8107b5a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8107236:	e047      	b.n	81072c8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8107238:	693b      	ldr	r3, [r7, #16]
 810723a:	08db      	lsrs	r3, r3, #3
 810723c:	f003 0301 	and.w	r3, r3, #1
 8107240:	2b00      	cmp	r3, #0
 8107242:	d00a      	beq.n	810725a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	08db      	lsrs	r3, r3, #3
 8107248:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 810724c:	2b00      	cmp	r3, #0
 810724e:	d004      	beq.n	810725a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8107250:	6939      	ldr	r1, [r7, #16]
 8107252:	68f8      	ldr	r0, [r7, #12]
 8107254:	f000 fbc0 	bl	81079d8 <I2C_ITAddrCplt>
 8107258:	e037      	b.n	81072ca <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 810725a:	693b      	ldr	r3, [r7, #16]
 810725c:	085b      	lsrs	r3, r3, #1
 810725e:	f003 0301 	and.w	r3, r3, #1
 8107262:	2b00      	cmp	r3, #0
 8107264:	d031      	beq.n	81072ca <I2C_Slave_ISR_IT+0x1f4>
 8107266:	687b      	ldr	r3, [r7, #4]
 8107268:	085b      	lsrs	r3, r3, #1
 810726a:	f003 0301 	and.w	r3, r3, #1
 810726e:	2b00      	cmp	r3, #0
 8107270:	d02b      	beq.n	81072ca <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8107272:	68fb      	ldr	r3, [r7, #12]
 8107274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107276:	b29b      	uxth	r3, r3
 8107278:	2b00      	cmp	r3, #0
 810727a:	d018      	beq.n	81072ae <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810727c:	68fb      	ldr	r3, [r7, #12]
 810727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107280:	781a      	ldrb	r2, [r3, #0]
 8107282:	68fb      	ldr	r3, [r7, #12]
 8107284:	681b      	ldr	r3, [r3, #0]
 8107286:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8107288:	68fb      	ldr	r3, [r7, #12]
 810728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810728c:	1c5a      	adds	r2, r3, #1
 810728e:	68fb      	ldr	r3, [r7, #12]
 8107290:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8107292:	68fb      	ldr	r3, [r7, #12]
 8107294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107296:	b29b      	uxth	r3, r3
 8107298:	3b01      	subs	r3, #1
 810729a:	b29a      	uxth	r2, r3
 810729c:	68fb      	ldr	r3, [r7, #12]
 810729e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81072a0:	68fb      	ldr	r3, [r7, #12]
 81072a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81072a4:	3b01      	subs	r3, #1
 81072a6:	b29a      	uxth	r2, r3
 81072a8:	68fb      	ldr	r3, [r7, #12]
 81072aa:	851a      	strh	r2, [r3, #40]	; 0x28
 81072ac:	e00d      	b.n	81072ca <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 81072ae:	697b      	ldr	r3, [r7, #20]
 81072b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81072b4:	d002      	beq.n	81072bc <I2C_Slave_ISR_IT+0x1e6>
 81072b6:	697b      	ldr	r3, [r7, #20]
 81072b8:	2b00      	cmp	r3, #0
 81072ba:	d106      	bne.n	81072ca <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 81072bc:	68f8      	ldr	r0, [r7, #12]
 81072be:	f000 fc4c 	bl	8107b5a <I2C_ITSlaveSeqCplt>
 81072c2:	e002      	b.n	81072ca <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 81072c4:	bf00      	nop
 81072c6:	e000      	b.n	81072ca <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 81072c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 81072ca:	68fb      	ldr	r3, [r7, #12]
 81072cc:	2200      	movs	r2, #0
 81072ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 81072d2:	2300      	movs	r3, #0
}
 81072d4:	4618      	mov	r0, r3
 81072d6:	3718      	adds	r7, #24
 81072d8:	46bd      	mov	sp, r7
 81072da:	bd80      	pop	{r7, pc}

081072dc <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 81072dc:	b580      	push	{r7, lr}
 81072de:	b088      	sub	sp, #32
 81072e0:	af02      	add	r7, sp, #8
 81072e2:	60f8      	str	r0, [r7, #12]
 81072e4:	60b9      	str	r1, [r7, #8]
 81072e6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81072ee:	2b01      	cmp	r3, #1
 81072f0:	d101      	bne.n	81072f6 <I2C_Master_ISR_DMA+0x1a>
 81072f2:	2302      	movs	r3, #2
 81072f4:	e0e1      	b.n	81074ba <I2C_Master_ISR_DMA+0x1de>
 81072f6:	68fb      	ldr	r3, [r7, #12]
 81072f8:	2201      	movs	r2, #1
 81072fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81072fe:	68bb      	ldr	r3, [r7, #8]
 8107300:	091b      	lsrs	r3, r3, #4
 8107302:	f003 0301 	and.w	r3, r3, #1
 8107306:	2b00      	cmp	r3, #0
 8107308:	d017      	beq.n	810733a <I2C_Master_ISR_DMA+0x5e>
 810730a:	687b      	ldr	r3, [r7, #4]
 810730c:	091b      	lsrs	r3, r3, #4
 810730e:	f003 0301 	and.w	r3, r3, #1
 8107312:	2b00      	cmp	r3, #0
 8107314:	d011      	beq.n	810733a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107316:	68fb      	ldr	r3, [r7, #12]
 8107318:	681b      	ldr	r3, [r3, #0]
 810731a:	2210      	movs	r2, #16
 810731c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810731e:	68fb      	ldr	r3, [r7, #12]
 8107320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107322:	f043 0204 	orr.w	r2, r3, #4
 8107326:	68fb      	ldr	r3, [r7, #12]
 8107328:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 810732a:	2120      	movs	r1, #32
 810732c:	68f8      	ldr	r0, [r7, #12]
 810732e:	f001 fbe5 	bl	8108afc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8107332:	68f8      	ldr	r0, [r7, #12]
 8107334:	f001 f87f 	bl	8108436 <I2C_Flush_TXDR>
 8107338:	e0ba      	b.n	81074b0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 810733a:	68bb      	ldr	r3, [r7, #8]
 810733c:	09db      	lsrs	r3, r3, #7
 810733e:	f003 0301 	and.w	r3, r3, #1
 8107342:	2b00      	cmp	r3, #0
 8107344:	d072      	beq.n	810742c <I2C_Master_ISR_DMA+0x150>
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	099b      	lsrs	r3, r3, #6
 810734a:	f003 0301 	and.w	r3, r3, #1
 810734e:	2b00      	cmp	r3, #0
 8107350:	d06c      	beq.n	810742c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8107352:	68fb      	ldr	r3, [r7, #12]
 8107354:	681b      	ldr	r3, [r3, #0]
 8107356:	681a      	ldr	r2, [r3, #0]
 8107358:	68fb      	ldr	r3, [r7, #12]
 810735a:	681b      	ldr	r3, [r3, #0]
 810735c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8107360:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8107362:	68fb      	ldr	r3, [r7, #12]
 8107364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107366:	b29b      	uxth	r3, r3
 8107368:	2b00      	cmp	r3, #0
 810736a:	d04e      	beq.n	810740a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 810736c:	68fb      	ldr	r3, [r7, #12]
 810736e:	681b      	ldr	r3, [r3, #0]
 8107370:	685b      	ldr	r3, [r3, #4]
 8107372:	b29b      	uxth	r3, r3
 8107374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8107378:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810737a:	68fb      	ldr	r3, [r7, #12]
 810737c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810737e:	b29b      	uxth	r3, r3
 8107380:	2bff      	cmp	r3, #255	; 0xff
 8107382:	d906      	bls.n	8107392 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8107384:	68fb      	ldr	r3, [r7, #12]
 8107386:	22ff      	movs	r2, #255	; 0xff
 8107388:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 810738a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810738e:	617b      	str	r3, [r7, #20]
 8107390:	e010      	b.n	81073b4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8107392:	68fb      	ldr	r3, [r7, #12]
 8107394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107396:	b29a      	uxth	r2, r3
 8107398:	68fb      	ldr	r3, [r7, #12]
 810739a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 810739c:	68fb      	ldr	r3, [r7, #12]
 810739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81073a4:	d003      	beq.n	81073ae <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 81073a6:	68fb      	ldr	r3, [r7, #12]
 81073a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073aa:	617b      	str	r3, [r7, #20]
 81073ac:	e002      	b.n	81073b4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 81073ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81073b2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 81073b4:	68fb      	ldr	r3, [r7, #12]
 81073b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81073b8:	b2da      	uxtb	r2, r3
 81073ba:	8a79      	ldrh	r1, [r7, #18]
 81073bc:	2300      	movs	r3, #0
 81073be:	9300      	str	r3, [sp, #0]
 81073c0:	697b      	ldr	r3, [r7, #20]
 81073c2:	68f8      	ldr	r0, [r7, #12]
 81073c4:	f001 fb6c 	bl	8108aa0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 81073c8:	68fb      	ldr	r3, [r7, #12]
 81073ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81073cc:	b29a      	uxth	r2, r3
 81073ce:	68fb      	ldr	r3, [r7, #12]
 81073d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81073d2:	1ad3      	subs	r3, r2, r3
 81073d4:	b29a      	uxth	r2, r3
 81073d6:	68fb      	ldr	r3, [r7, #12]
 81073d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81073da:	68fb      	ldr	r3, [r7, #12]
 81073dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81073e0:	b2db      	uxtb	r3, r3
 81073e2:	2b22      	cmp	r3, #34	; 0x22
 81073e4:	d108      	bne.n	81073f8 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 81073e6:	68fb      	ldr	r3, [r7, #12]
 81073e8:	681b      	ldr	r3, [r3, #0]
 81073ea:	681a      	ldr	r2, [r3, #0]
 81073ec:	68fb      	ldr	r3, [r7, #12]
 81073ee:	681b      	ldr	r3, [r3, #0]
 81073f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81073f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 81073f6:	e05b      	b.n	81074b0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 81073f8:	68fb      	ldr	r3, [r7, #12]
 81073fa:	681b      	ldr	r3, [r3, #0]
 81073fc:	681a      	ldr	r2, [r3, #0]
 81073fe:	68fb      	ldr	r3, [r7, #12]
 8107400:	681b      	ldr	r3, [r3, #0]
 8107402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8107406:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8107408:	e052      	b.n	81074b0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 810740a:	68fb      	ldr	r3, [r7, #12]
 810740c:	681b      	ldr	r3, [r3, #0]
 810740e:	685b      	ldr	r3, [r3, #4]
 8107410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107418:	d003      	beq.n	8107422 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 810741a:	68f8      	ldr	r0, [r7, #12]
 810741c:	f000 fb60 	bl	8107ae0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8107420:	e046      	b.n	81074b0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8107422:	2140      	movs	r1, #64	; 0x40
 8107424:	68f8      	ldr	r0, [r7, #12]
 8107426:	f000 ff0f 	bl	8108248 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 810742a:	e041      	b.n	81074b0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 810742c:	68bb      	ldr	r3, [r7, #8]
 810742e:	099b      	lsrs	r3, r3, #6
 8107430:	f003 0301 	and.w	r3, r3, #1
 8107434:	2b00      	cmp	r3, #0
 8107436:	d029      	beq.n	810748c <I2C_Master_ISR_DMA+0x1b0>
 8107438:	687b      	ldr	r3, [r7, #4]
 810743a:	099b      	lsrs	r3, r3, #6
 810743c:	f003 0301 	and.w	r3, r3, #1
 8107440:	2b00      	cmp	r3, #0
 8107442:	d023      	beq.n	810748c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8107444:	68fb      	ldr	r3, [r7, #12]
 8107446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8107448:	b29b      	uxth	r3, r3
 810744a:	2b00      	cmp	r3, #0
 810744c:	d119      	bne.n	8107482 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 810744e:	68fb      	ldr	r3, [r7, #12]
 8107450:	681b      	ldr	r3, [r3, #0]
 8107452:	685b      	ldr	r3, [r3, #4]
 8107454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810745c:	d027      	beq.n	81074ae <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 810745e:	68fb      	ldr	r3, [r7, #12]
 8107460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107462:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8107466:	d108      	bne.n	810747a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8107468:	68fb      	ldr	r3, [r7, #12]
 810746a:	681b      	ldr	r3, [r3, #0]
 810746c:	685a      	ldr	r2, [r3, #4]
 810746e:	68fb      	ldr	r3, [r7, #12]
 8107470:	681b      	ldr	r3, [r3, #0]
 8107472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8107476:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8107478:	e019      	b.n	81074ae <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 810747a:	68f8      	ldr	r0, [r7, #12]
 810747c:	f000 fb30 	bl	8107ae0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8107480:	e015      	b.n	81074ae <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8107482:	2140      	movs	r1, #64	; 0x40
 8107484:	68f8      	ldr	r0, [r7, #12]
 8107486:	f000 fedf 	bl	8108248 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 810748a:	e010      	b.n	81074ae <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 810748c:	68bb      	ldr	r3, [r7, #8]
 810748e:	095b      	lsrs	r3, r3, #5
 8107490:	f003 0301 	and.w	r3, r3, #1
 8107494:	2b00      	cmp	r3, #0
 8107496:	d00b      	beq.n	81074b0 <I2C_Master_ISR_DMA+0x1d4>
 8107498:	687b      	ldr	r3, [r7, #4]
 810749a:	095b      	lsrs	r3, r3, #5
 810749c:	f003 0301 	and.w	r3, r3, #1
 81074a0:	2b00      	cmp	r3, #0
 81074a2:	d005      	beq.n	81074b0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 81074a4:	68b9      	ldr	r1, [r7, #8]
 81074a6:	68f8      	ldr	r0, [r7, #12]
 81074a8:	f000 fbb6 	bl	8107c18 <I2C_ITMasterCplt>
 81074ac:	e000      	b.n	81074b0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 81074ae:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 81074b0:	68fb      	ldr	r3, [r7, #12]
 81074b2:	2200      	movs	r2, #0
 81074b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 81074b8:	2300      	movs	r3, #0
}
 81074ba:	4618      	mov	r0, r3
 81074bc:	3718      	adds	r7, #24
 81074be:	46bd      	mov	sp, r7
 81074c0:	bd80      	pop	{r7, pc}
	...

081074c4 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 81074c4:	b580      	push	{r7, lr}
 81074c6:	b088      	sub	sp, #32
 81074c8:	af00      	add	r7, sp, #0
 81074ca:	60f8      	str	r0, [r7, #12]
 81074cc:	60b9      	str	r1, [r7, #8]
 81074ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 81074d0:	68fb      	ldr	r3, [r7, #12]
 81074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81074d4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 81074d6:	2300      	movs	r3, #0
 81074d8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 81074da:	68fb      	ldr	r3, [r7, #12]
 81074dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81074e0:	2b01      	cmp	r3, #1
 81074e2:	d101      	bne.n	81074e8 <I2C_Slave_ISR_DMA+0x24>
 81074e4:	2302      	movs	r3, #2
 81074e6:	e1ca      	b.n	810787e <I2C_Slave_ISR_DMA+0x3ba>
 81074e8:	68fb      	ldr	r3, [r7, #12]
 81074ea:	2201      	movs	r2, #1
 81074ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81074f0:	68bb      	ldr	r3, [r7, #8]
 81074f2:	095b      	lsrs	r3, r3, #5
 81074f4:	f003 0301 	and.w	r3, r3, #1
 81074f8:	2b00      	cmp	r3, #0
 81074fa:	d009      	beq.n	8107510 <I2C_Slave_ISR_DMA+0x4c>
 81074fc:	687b      	ldr	r3, [r7, #4]
 81074fe:	095b      	lsrs	r3, r3, #5
 8107500:	f003 0301 	and.w	r3, r3, #1
 8107504:	2b00      	cmp	r3, #0
 8107506:	d003      	beq.n	8107510 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8107508:	68b9      	ldr	r1, [r7, #8]
 810750a:	68f8      	ldr	r0, [r7, #12]
 810750c:	f000 fc4e 	bl	8107dac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8107510:	68bb      	ldr	r3, [r7, #8]
 8107512:	091b      	lsrs	r3, r3, #4
 8107514:	f003 0301 	and.w	r3, r3, #1
 8107518:	2b00      	cmp	r3, #0
 810751a:	f000 819b 	beq.w	8107854 <I2C_Slave_ISR_DMA+0x390>
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	091b      	lsrs	r3, r3, #4
 8107522:	f003 0301 	and.w	r3, r3, #1
 8107526:	2b00      	cmp	r3, #0
 8107528:	f000 8194 	beq.w	8107854 <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 810752c:	687b      	ldr	r3, [r7, #4]
 810752e:	0b9b      	lsrs	r3, r3, #14
 8107530:	f003 0301 	and.w	r3, r3, #1
 8107534:	2b00      	cmp	r3, #0
 8107536:	d106      	bne.n	8107546 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	0bdb      	lsrs	r3, r3, #15
 810753c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8107540:	2b00      	cmp	r3, #0
 8107542:	f000 8180 	beq.w	8107846 <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8107546:	68fb      	ldr	r3, [r7, #12]
 8107548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810754a:	2b00      	cmp	r3, #0
 810754c:	d07c      	beq.n	8107648 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 810754e:	687b      	ldr	r3, [r7, #4]
 8107550:	0bdb      	lsrs	r3, r3, #15
 8107552:	f003 0301 	and.w	r3, r3, #1
 8107556:	2b00      	cmp	r3, #0
 8107558:	d076      	beq.n	8107648 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 810755a:	68fb      	ldr	r3, [r7, #12]
 810755c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810755e:	681b      	ldr	r3, [r3, #0]
 8107560:	4a74      	ldr	r2, [pc, #464]	; (8107734 <I2C_Slave_ISR_DMA+0x270>)
 8107562:	4293      	cmp	r3, r2
 8107564:	d059      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 8107566:	68fb      	ldr	r3, [r7, #12]
 8107568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810756a:	681b      	ldr	r3, [r3, #0]
 810756c:	4a72      	ldr	r2, [pc, #456]	; (8107738 <I2C_Slave_ISR_DMA+0x274>)
 810756e:	4293      	cmp	r3, r2
 8107570:	d053      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 8107572:	68fb      	ldr	r3, [r7, #12]
 8107574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107576:	681b      	ldr	r3, [r3, #0]
 8107578:	4a70      	ldr	r2, [pc, #448]	; (810773c <I2C_Slave_ISR_DMA+0x278>)
 810757a:	4293      	cmp	r3, r2
 810757c:	d04d      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 810757e:	68fb      	ldr	r3, [r7, #12]
 8107580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107582:	681b      	ldr	r3, [r3, #0]
 8107584:	4a6e      	ldr	r2, [pc, #440]	; (8107740 <I2C_Slave_ISR_DMA+0x27c>)
 8107586:	4293      	cmp	r3, r2
 8107588:	d047      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 810758a:	68fb      	ldr	r3, [r7, #12]
 810758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810758e:	681b      	ldr	r3, [r3, #0]
 8107590:	4a6c      	ldr	r2, [pc, #432]	; (8107744 <I2C_Slave_ISR_DMA+0x280>)
 8107592:	4293      	cmp	r3, r2
 8107594:	d041      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 8107596:	68fb      	ldr	r3, [r7, #12]
 8107598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810759a:	681b      	ldr	r3, [r3, #0]
 810759c:	4a6a      	ldr	r2, [pc, #424]	; (8107748 <I2C_Slave_ISR_DMA+0x284>)
 810759e:	4293      	cmp	r3, r2
 81075a0:	d03b      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 81075a2:	68fb      	ldr	r3, [r7, #12]
 81075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075a6:	681b      	ldr	r3, [r3, #0]
 81075a8:	4a68      	ldr	r2, [pc, #416]	; (810774c <I2C_Slave_ISR_DMA+0x288>)
 81075aa:	4293      	cmp	r3, r2
 81075ac:	d035      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 81075ae:	68fb      	ldr	r3, [r7, #12]
 81075b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075b2:	681b      	ldr	r3, [r3, #0]
 81075b4:	4a66      	ldr	r2, [pc, #408]	; (8107750 <I2C_Slave_ISR_DMA+0x28c>)
 81075b6:	4293      	cmp	r3, r2
 81075b8:	d02f      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 81075ba:	68fb      	ldr	r3, [r7, #12]
 81075bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075be:	681b      	ldr	r3, [r3, #0]
 81075c0:	4a64      	ldr	r2, [pc, #400]	; (8107754 <I2C_Slave_ISR_DMA+0x290>)
 81075c2:	4293      	cmp	r3, r2
 81075c4:	d029      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 81075c6:	68fb      	ldr	r3, [r7, #12]
 81075c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075ca:	681b      	ldr	r3, [r3, #0]
 81075cc:	4a62      	ldr	r2, [pc, #392]	; (8107758 <I2C_Slave_ISR_DMA+0x294>)
 81075ce:	4293      	cmp	r3, r2
 81075d0:	d023      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 81075d2:	68fb      	ldr	r3, [r7, #12]
 81075d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075d6:	681b      	ldr	r3, [r3, #0]
 81075d8:	4a60      	ldr	r2, [pc, #384]	; (810775c <I2C_Slave_ISR_DMA+0x298>)
 81075da:	4293      	cmp	r3, r2
 81075dc:	d01d      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 81075de:	68fb      	ldr	r3, [r7, #12]
 81075e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075e2:	681b      	ldr	r3, [r3, #0]
 81075e4:	4a5e      	ldr	r2, [pc, #376]	; (8107760 <I2C_Slave_ISR_DMA+0x29c>)
 81075e6:	4293      	cmp	r3, r2
 81075e8:	d017      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 81075ea:	68fb      	ldr	r3, [r7, #12]
 81075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075ee:	681b      	ldr	r3, [r3, #0]
 81075f0:	4a5c      	ldr	r2, [pc, #368]	; (8107764 <I2C_Slave_ISR_DMA+0x2a0>)
 81075f2:	4293      	cmp	r3, r2
 81075f4:	d011      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 81075f6:	68fb      	ldr	r3, [r7, #12]
 81075f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075fa:	681b      	ldr	r3, [r3, #0]
 81075fc:	4a5a      	ldr	r2, [pc, #360]	; (8107768 <I2C_Slave_ISR_DMA+0x2a4>)
 81075fe:	4293      	cmp	r3, r2
 8107600:	d00b      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 8107602:	68fb      	ldr	r3, [r7, #12]
 8107604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107606:	681b      	ldr	r3, [r3, #0]
 8107608:	4a58      	ldr	r2, [pc, #352]	; (810776c <I2C_Slave_ISR_DMA+0x2a8>)
 810760a:	4293      	cmp	r3, r2
 810760c:	d005      	beq.n	810761a <I2C_Slave_ISR_DMA+0x156>
 810760e:	68fb      	ldr	r3, [r7, #12]
 8107610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107612:	681b      	ldr	r3, [r3, #0]
 8107614:	4a56      	ldr	r2, [pc, #344]	; (8107770 <I2C_Slave_ISR_DMA+0x2ac>)
 8107616:	4293      	cmp	r3, r2
 8107618:	d109      	bne.n	810762e <I2C_Slave_ISR_DMA+0x16a>
 810761a:	68fb      	ldr	r3, [r7, #12]
 810761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810761e:	681b      	ldr	r3, [r3, #0]
 8107620:	685b      	ldr	r3, [r3, #4]
 8107622:	2b00      	cmp	r3, #0
 8107624:	bf0c      	ite	eq
 8107626:	2301      	moveq	r3, #1
 8107628:	2300      	movne	r3, #0
 810762a:	b2db      	uxtb	r3, r3
 810762c:	e008      	b.n	8107640 <I2C_Slave_ISR_DMA+0x17c>
 810762e:	68fb      	ldr	r3, [r7, #12]
 8107630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107632:	681b      	ldr	r3, [r3, #0]
 8107634:	685b      	ldr	r3, [r3, #4]
 8107636:	2b00      	cmp	r3, #0
 8107638:	bf0c      	ite	eq
 810763a:	2301      	moveq	r3, #1
 810763c:	2300      	movne	r3, #0
 810763e:	b2db      	uxtb	r3, r3
 8107640:	2b00      	cmp	r3, #0
 8107642:	d001      	beq.n	8107648 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8107644:	2301      	movs	r3, #1
 8107646:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8107648:	68fb      	ldr	r3, [r7, #12]
 810764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810764c:	2b00      	cmp	r3, #0
 810764e:	f000 809e 	beq.w	810778e <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8107652:	687b      	ldr	r3, [r7, #4]
 8107654:	0b9b      	lsrs	r3, r3, #14
 8107656:	f003 0301 	and.w	r3, r3, #1
 810765a:	2b00      	cmp	r3, #0
 810765c:	f000 8097 	beq.w	810778e <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8107660:	68fb      	ldr	r3, [r7, #12]
 8107662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107664:	681b      	ldr	r3, [r3, #0]
 8107666:	4a33      	ldr	r2, [pc, #204]	; (8107734 <I2C_Slave_ISR_DMA+0x270>)
 8107668:	4293      	cmp	r3, r2
 810766a:	d059      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 810766c:	68fb      	ldr	r3, [r7, #12]
 810766e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107670:	681b      	ldr	r3, [r3, #0]
 8107672:	4a31      	ldr	r2, [pc, #196]	; (8107738 <I2C_Slave_ISR_DMA+0x274>)
 8107674:	4293      	cmp	r3, r2
 8107676:	d053      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 8107678:	68fb      	ldr	r3, [r7, #12]
 810767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810767c:	681b      	ldr	r3, [r3, #0]
 810767e:	4a2f      	ldr	r2, [pc, #188]	; (810773c <I2C_Slave_ISR_DMA+0x278>)
 8107680:	4293      	cmp	r3, r2
 8107682:	d04d      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 8107684:	68fb      	ldr	r3, [r7, #12]
 8107686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107688:	681b      	ldr	r3, [r3, #0]
 810768a:	4a2d      	ldr	r2, [pc, #180]	; (8107740 <I2C_Slave_ISR_DMA+0x27c>)
 810768c:	4293      	cmp	r3, r2
 810768e:	d047      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 8107690:	68fb      	ldr	r3, [r7, #12]
 8107692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107694:	681b      	ldr	r3, [r3, #0]
 8107696:	4a2b      	ldr	r2, [pc, #172]	; (8107744 <I2C_Slave_ISR_DMA+0x280>)
 8107698:	4293      	cmp	r3, r2
 810769a:	d041      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 810769c:	68fb      	ldr	r3, [r7, #12]
 810769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076a0:	681b      	ldr	r3, [r3, #0]
 81076a2:	4a29      	ldr	r2, [pc, #164]	; (8107748 <I2C_Slave_ISR_DMA+0x284>)
 81076a4:	4293      	cmp	r3, r2
 81076a6:	d03b      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 81076a8:	68fb      	ldr	r3, [r7, #12]
 81076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076ac:	681b      	ldr	r3, [r3, #0]
 81076ae:	4a27      	ldr	r2, [pc, #156]	; (810774c <I2C_Slave_ISR_DMA+0x288>)
 81076b0:	4293      	cmp	r3, r2
 81076b2:	d035      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 81076b4:	68fb      	ldr	r3, [r7, #12]
 81076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076b8:	681b      	ldr	r3, [r3, #0]
 81076ba:	4a25      	ldr	r2, [pc, #148]	; (8107750 <I2C_Slave_ISR_DMA+0x28c>)
 81076bc:	4293      	cmp	r3, r2
 81076be:	d02f      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 81076c0:	68fb      	ldr	r3, [r7, #12]
 81076c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076c4:	681b      	ldr	r3, [r3, #0]
 81076c6:	4a23      	ldr	r2, [pc, #140]	; (8107754 <I2C_Slave_ISR_DMA+0x290>)
 81076c8:	4293      	cmp	r3, r2
 81076ca:	d029      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 81076cc:	68fb      	ldr	r3, [r7, #12]
 81076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076d0:	681b      	ldr	r3, [r3, #0]
 81076d2:	4a21      	ldr	r2, [pc, #132]	; (8107758 <I2C_Slave_ISR_DMA+0x294>)
 81076d4:	4293      	cmp	r3, r2
 81076d6:	d023      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 81076d8:	68fb      	ldr	r3, [r7, #12]
 81076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076dc:	681b      	ldr	r3, [r3, #0]
 81076de:	4a1f      	ldr	r2, [pc, #124]	; (810775c <I2C_Slave_ISR_DMA+0x298>)
 81076e0:	4293      	cmp	r3, r2
 81076e2:	d01d      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 81076e4:	68fb      	ldr	r3, [r7, #12]
 81076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076e8:	681b      	ldr	r3, [r3, #0]
 81076ea:	4a1d      	ldr	r2, [pc, #116]	; (8107760 <I2C_Slave_ISR_DMA+0x29c>)
 81076ec:	4293      	cmp	r3, r2
 81076ee:	d017      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 81076f0:	68fb      	ldr	r3, [r7, #12]
 81076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81076f4:	681b      	ldr	r3, [r3, #0]
 81076f6:	4a1b      	ldr	r2, [pc, #108]	; (8107764 <I2C_Slave_ISR_DMA+0x2a0>)
 81076f8:	4293      	cmp	r3, r2
 81076fa:	d011      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 81076fc:	68fb      	ldr	r3, [r7, #12]
 81076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107700:	681b      	ldr	r3, [r3, #0]
 8107702:	4a19      	ldr	r2, [pc, #100]	; (8107768 <I2C_Slave_ISR_DMA+0x2a4>)
 8107704:	4293      	cmp	r3, r2
 8107706:	d00b      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 8107708:	68fb      	ldr	r3, [r7, #12]
 810770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810770c:	681b      	ldr	r3, [r3, #0]
 810770e:	4a17      	ldr	r2, [pc, #92]	; (810776c <I2C_Slave_ISR_DMA+0x2a8>)
 8107710:	4293      	cmp	r3, r2
 8107712:	d005      	beq.n	8107720 <I2C_Slave_ISR_DMA+0x25c>
 8107714:	68fb      	ldr	r3, [r7, #12]
 8107716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107718:	681b      	ldr	r3, [r3, #0]
 810771a:	4a15      	ldr	r2, [pc, #84]	; (8107770 <I2C_Slave_ISR_DMA+0x2ac>)
 810771c:	4293      	cmp	r3, r2
 810771e:	d129      	bne.n	8107774 <I2C_Slave_ISR_DMA+0x2b0>
 8107720:	68fb      	ldr	r3, [r7, #12]
 8107722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107724:	681b      	ldr	r3, [r3, #0]
 8107726:	685b      	ldr	r3, [r3, #4]
 8107728:	2b00      	cmp	r3, #0
 810772a:	bf0c      	ite	eq
 810772c:	2301      	moveq	r3, #1
 810772e:	2300      	movne	r3, #0
 8107730:	b2db      	uxtb	r3, r3
 8107732:	e028      	b.n	8107786 <I2C_Slave_ISR_DMA+0x2c2>
 8107734:	40020010 	.word	0x40020010
 8107738:	40020028 	.word	0x40020028
 810773c:	40020040 	.word	0x40020040
 8107740:	40020058 	.word	0x40020058
 8107744:	40020070 	.word	0x40020070
 8107748:	40020088 	.word	0x40020088
 810774c:	400200a0 	.word	0x400200a0
 8107750:	400200b8 	.word	0x400200b8
 8107754:	40020410 	.word	0x40020410
 8107758:	40020428 	.word	0x40020428
 810775c:	40020440 	.word	0x40020440
 8107760:	40020458 	.word	0x40020458
 8107764:	40020470 	.word	0x40020470
 8107768:	40020488 	.word	0x40020488
 810776c:	400204a0 	.word	0x400204a0
 8107770:	400204b8 	.word	0x400204b8
 8107774:	68fb      	ldr	r3, [r7, #12]
 8107776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107778:	681b      	ldr	r3, [r3, #0]
 810777a:	685b      	ldr	r3, [r3, #4]
 810777c:	2b00      	cmp	r3, #0
 810777e:	bf0c      	ite	eq
 8107780:	2301      	moveq	r3, #1
 8107782:	2300      	movne	r3, #0
 8107784:	b2db      	uxtb	r3, r3
 8107786:	2b00      	cmp	r3, #0
 8107788:	d001      	beq.n	810778e <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
 810778a:	2301      	movs	r3, #1
 810778c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 810778e:	69fb      	ldr	r3, [r7, #28]
 8107790:	2b01      	cmp	r3, #1
 8107792:	d128      	bne.n	81077e6 <I2C_Slave_ISR_DMA+0x322>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8107794:	68fb      	ldr	r3, [r7, #12]
 8107796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810779a:	b2db      	uxtb	r3, r3
 810779c:	2b28      	cmp	r3, #40	; 0x28
 810779e:	d108      	bne.n	81077b2 <I2C_Slave_ISR_DMA+0x2ee>
 81077a0:	69bb      	ldr	r3, [r7, #24]
 81077a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81077a6:	d104      	bne.n	81077b2 <I2C_Slave_ISR_DMA+0x2ee>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 81077a8:	68b9      	ldr	r1, [r7, #8]
 81077aa:	68f8      	ldr	r0, [r7, #12]
 81077ac:	f000 fcf6 	bl	810819c <I2C_ITListenCplt>
 81077b0:	e048      	b.n	8107844 <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81077b2:	68fb      	ldr	r3, [r7, #12]
 81077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81077b8:	b2db      	uxtb	r3, r3
 81077ba:	2b29      	cmp	r3, #41	; 0x29
 81077bc:	d10e      	bne.n	81077dc <I2C_Slave_ISR_DMA+0x318>
 81077be:	69bb      	ldr	r3, [r7, #24]
 81077c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 81077c4:	d00a      	beq.n	81077dc <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077c6:	68fb      	ldr	r3, [r7, #12]
 81077c8:	681b      	ldr	r3, [r3, #0]
 81077ca:	2210      	movs	r2, #16
 81077cc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 81077ce:	68f8      	ldr	r0, [r7, #12]
 81077d0:	f000 fe31 	bl	8108436 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 81077d4:	68f8      	ldr	r0, [r7, #12]
 81077d6:	f000 f9c0 	bl	8107b5a <I2C_ITSlaveSeqCplt>
 81077da:	e033      	b.n	8107844 <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077dc:	68fb      	ldr	r3, [r7, #12]
 81077de:	681b      	ldr	r3, [r3, #0]
 81077e0:	2210      	movs	r2, #16
 81077e2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 81077e4:	e034      	b.n	8107850 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81077e6:	68fb      	ldr	r3, [r7, #12]
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	2210      	movs	r2, #16
 81077ec:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81077ee:	68fb      	ldr	r3, [r7, #12]
 81077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81077f2:	f043 0204 	orr.w	r2, r3, #4
 81077f6:	68fb      	ldr	r3, [r7, #12]
 81077f8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 81077fa:	68fb      	ldr	r3, [r7, #12]
 81077fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107800:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8107802:	69bb      	ldr	r3, [r7, #24]
 8107804:	2b00      	cmp	r3, #0
 8107806:	d003      	beq.n	8107810 <I2C_Slave_ISR_DMA+0x34c>
 8107808:	69bb      	ldr	r3, [r7, #24]
 810780a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810780e:	d11f      	bne.n	8107850 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107810:	7dfb      	ldrb	r3, [r7, #23]
 8107812:	2b21      	cmp	r3, #33	; 0x21
 8107814:	d002      	beq.n	810781c <I2C_Slave_ISR_DMA+0x358>
 8107816:	7dfb      	ldrb	r3, [r7, #23]
 8107818:	2b29      	cmp	r3, #41	; 0x29
 810781a:	d103      	bne.n	8107824 <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 810781c:	68fb      	ldr	r3, [r7, #12]
 810781e:	2221      	movs	r2, #33	; 0x21
 8107820:	631a      	str	r2, [r3, #48]	; 0x30
 8107822:	e008      	b.n	8107836 <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107824:	7dfb      	ldrb	r3, [r7, #23]
 8107826:	2b22      	cmp	r3, #34	; 0x22
 8107828:	d002      	beq.n	8107830 <I2C_Slave_ISR_DMA+0x36c>
 810782a:	7dfb      	ldrb	r3, [r7, #23]
 810782c:	2b2a      	cmp	r3, #42	; 0x2a
 810782e:	d102      	bne.n	8107836 <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107830:	68fb      	ldr	r3, [r7, #12]
 8107832:	2222      	movs	r2, #34	; 0x22
 8107834:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8107836:	68fb      	ldr	r3, [r7, #12]
 8107838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810783a:	4619      	mov	r1, r3
 810783c:	68f8      	ldr	r0, [r7, #12]
 810783e:	f000 fd03 	bl	8108248 <I2C_ITError>
      if (treatdmanack == 1U)
 8107842:	e005      	b.n	8107850 <I2C_Slave_ISR_DMA+0x38c>
 8107844:	e004      	b.n	8107850 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107846:	68fb      	ldr	r3, [r7, #12]
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	2210      	movs	r2, #16
 810784c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 810784e:	e011      	b.n	8107874 <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
 8107850:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8107852:	e00f      	b.n	8107874 <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8107854:	68bb      	ldr	r3, [r7, #8]
 8107856:	08db      	lsrs	r3, r3, #3
 8107858:	f003 0301 	and.w	r3, r3, #1
 810785c:	2b00      	cmp	r3, #0
 810785e:	d009      	beq.n	8107874 <I2C_Slave_ISR_DMA+0x3b0>
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	08db      	lsrs	r3, r3, #3
 8107864:	f003 0301 	and.w	r3, r3, #1
 8107868:	2b00      	cmp	r3, #0
 810786a:	d003      	beq.n	8107874 <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 810786c:	68b9      	ldr	r1, [r7, #8]
 810786e:	68f8      	ldr	r0, [r7, #12]
 8107870:	f000 f8b2 	bl	81079d8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8107874:	68fb      	ldr	r3, [r7, #12]
 8107876:	2200      	movs	r2, #0
 8107878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 810787c:	2300      	movs	r3, #0
}
 810787e:	4618      	mov	r0, r3
 8107880:	3720      	adds	r7, #32
 8107882:	46bd      	mov	sp, r7
 8107884:	bd80      	pop	{r7, pc}
 8107886:	bf00      	nop

08107888 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107888:	b580      	push	{r7, lr}
 810788a:	b086      	sub	sp, #24
 810788c:	af02      	add	r7, sp, #8
 810788e:	60f8      	str	r0, [r7, #12]
 8107890:	4608      	mov	r0, r1
 8107892:	4611      	mov	r1, r2
 8107894:	461a      	mov	r2, r3
 8107896:	4603      	mov	r3, r0
 8107898:	817b      	strh	r3, [r7, #10]
 810789a:	460b      	mov	r3, r1
 810789c:	813b      	strh	r3, [r7, #8]
 810789e:	4613      	mov	r3, r2
 81078a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81078a2:	88fb      	ldrh	r3, [r7, #6]
 81078a4:	b2da      	uxtb	r2, r3
 81078a6:	8979      	ldrh	r1, [r7, #10]
 81078a8:	4b20      	ldr	r3, [pc, #128]	; (810792c <I2C_RequestMemoryWrite+0xa4>)
 81078aa:	9300      	str	r3, [sp, #0]
 81078ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81078b0:	68f8      	ldr	r0, [r7, #12]
 81078b2:	f001 f8f5 	bl	8108aa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81078b6:	69fa      	ldr	r2, [r7, #28]
 81078b8:	69b9      	ldr	r1, [r7, #24]
 81078ba:	68f8      	ldr	r0, [r7, #12]
 81078bc:	f001 f80e 	bl	81088dc <I2C_WaitOnTXISFlagUntilTimeout>
 81078c0:	4603      	mov	r3, r0
 81078c2:	2b00      	cmp	r3, #0
 81078c4:	d001      	beq.n	81078ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81078c6:	2301      	movs	r3, #1
 81078c8:	e02c      	b.n	8107924 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81078ca:	88fb      	ldrh	r3, [r7, #6]
 81078cc:	2b01      	cmp	r3, #1
 81078ce:	d105      	bne.n	81078dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81078d0:	893b      	ldrh	r3, [r7, #8]
 81078d2:	b2da      	uxtb	r2, r3
 81078d4:	68fb      	ldr	r3, [r7, #12]
 81078d6:	681b      	ldr	r3, [r3, #0]
 81078d8:	629a      	str	r2, [r3, #40]	; 0x28
 81078da:	e015      	b.n	8107908 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81078dc:	893b      	ldrh	r3, [r7, #8]
 81078de:	0a1b      	lsrs	r3, r3, #8
 81078e0:	b29b      	uxth	r3, r3
 81078e2:	b2da      	uxtb	r2, r3
 81078e4:	68fb      	ldr	r3, [r7, #12]
 81078e6:	681b      	ldr	r3, [r3, #0]
 81078e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81078ea:	69fa      	ldr	r2, [r7, #28]
 81078ec:	69b9      	ldr	r1, [r7, #24]
 81078ee:	68f8      	ldr	r0, [r7, #12]
 81078f0:	f000 fff4 	bl	81088dc <I2C_WaitOnTXISFlagUntilTimeout>
 81078f4:	4603      	mov	r3, r0
 81078f6:	2b00      	cmp	r3, #0
 81078f8:	d001      	beq.n	81078fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81078fa:	2301      	movs	r3, #1
 81078fc:	e012      	b.n	8107924 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81078fe:	893b      	ldrh	r3, [r7, #8]
 8107900:	b2da      	uxtb	r2, r3
 8107902:	68fb      	ldr	r3, [r7, #12]
 8107904:	681b      	ldr	r3, [r3, #0]
 8107906:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8107908:	69fb      	ldr	r3, [r7, #28]
 810790a:	9300      	str	r3, [sp, #0]
 810790c:	69bb      	ldr	r3, [r7, #24]
 810790e:	2200      	movs	r2, #0
 8107910:	2180      	movs	r1, #128	; 0x80
 8107912:	68f8      	ldr	r0, [r7, #12]
 8107914:	f000 ffa2 	bl	810885c <I2C_WaitOnFlagUntilTimeout>
 8107918:	4603      	mov	r3, r0
 810791a:	2b00      	cmp	r3, #0
 810791c:	d001      	beq.n	8107922 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810791e:	2301      	movs	r3, #1
 8107920:	e000      	b.n	8107924 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8107922:	2300      	movs	r3, #0
}
 8107924:	4618      	mov	r0, r3
 8107926:	3710      	adds	r7, #16
 8107928:	46bd      	mov	sp, r7
 810792a:	bd80      	pop	{r7, pc}
 810792c:	80002000 	.word	0x80002000

08107930 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8107930:	b580      	push	{r7, lr}
 8107932:	b086      	sub	sp, #24
 8107934:	af02      	add	r7, sp, #8
 8107936:	60f8      	str	r0, [r7, #12]
 8107938:	4608      	mov	r0, r1
 810793a:	4611      	mov	r1, r2
 810793c:	461a      	mov	r2, r3
 810793e:	4603      	mov	r3, r0
 8107940:	817b      	strh	r3, [r7, #10]
 8107942:	460b      	mov	r3, r1
 8107944:	813b      	strh	r3, [r7, #8]
 8107946:	4613      	mov	r3, r2
 8107948:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810794a:	88fb      	ldrh	r3, [r7, #6]
 810794c:	b2da      	uxtb	r2, r3
 810794e:	8979      	ldrh	r1, [r7, #10]
 8107950:	4b20      	ldr	r3, [pc, #128]	; (81079d4 <I2C_RequestMemoryRead+0xa4>)
 8107952:	9300      	str	r3, [sp, #0]
 8107954:	2300      	movs	r3, #0
 8107956:	68f8      	ldr	r0, [r7, #12]
 8107958:	f001 f8a2 	bl	8108aa0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810795c:	69fa      	ldr	r2, [r7, #28]
 810795e:	69b9      	ldr	r1, [r7, #24]
 8107960:	68f8      	ldr	r0, [r7, #12]
 8107962:	f000 ffbb 	bl	81088dc <I2C_WaitOnTXISFlagUntilTimeout>
 8107966:	4603      	mov	r3, r0
 8107968:	2b00      	cmp	r3, #0
 810796a:	d001      	beq.n	8107970 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810796c:	2301      	movs	r3, #1
 810796e:	e02c      	b.n	81079ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8107970:	88fb      	ldrh	r3, [r7, #6]
 8107972:	2b01      	cmp	r3, #1
 8107974:	d105      	bne.n	8107982 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8107976:	893b      	ldrh	r3, [r7, #8]
 8107978:	b2da      	uxtb	r2, r3
 810797a:	68fb      	ldr	r3, [r7, #12]
 810797c:	681b      	ldr	r3, [r3, #0]
 810797e:	629a      	str	r2, [r3, #40]	; 0x28
 8107980:	e015      	b.n	81079ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8107982:	893b      	ldrh	r3, [r7, #8]
 8107984:	0a1b      	lsrs	r3, r3, #8
 8107986:	b29b      	uxth	r3, r3
 8107988:	b2da      	uxtb	r2, r3
 810798a:	68fb      	ldr	r3, [r7, #12]
 810798c:	681b      	ldr	r3, [r3, #0]
 810798e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8107990:	69fa      	ldr	r2, [r7, #28]
 8107992:	69b9      	ldr	r1, [r7, #24]
 8107994:	68f8      	ldr	r0, [r7, #12]
 8107996:	f000 ffa1 	bl	81088dc <I2C_WaitOnTXISFlagUntilTimeout>
 810799a:	4603      	mov	r3, r0
 810799c:	2b00      	cmp	r3, #0
 810799e:	d001      	beq.n	81079a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81079a0:	2301      	movs	r3, #1
 81079a2:	e012      	b.n	81079ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81079a4:	893b      	ldrh	r3, [r7, #8]
 81079a6:	b2da      	uxtb	r2, r3
 81079a8:	68fb      	ldr	r3, [r7, #12]
 81079aa:	681b      	ldr	r3, [r3, #0]
 81079ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81079ae:	69fb      	ldr	r3, [r7, #28]
 81079b0:	9300      	str	r3, [sp, #0]
 81079b2:	69bb      	ldr	r3, [r7, #24]
 81079b4:	2200      	movs	r2, #0
 81079b6:	2140      	movs	r1, #64	; 0x40
 81079b8:	68f8      	ldr	r0, [r7, #12]
 81079ba:	f000 ff4f 	bl	810885c <I2C_WaitOnFlagUntilTimeout>
 81079be:	4603      	mov	r3, r0
 81079c0:	2b00      	cmp	r3, #0
 81079c2:	d001      	beq.n	81079c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81079c4:	2301      	movs	r3, #1
 81079c6:	e000      	b.n	81079ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81079c8:	2300      	movs	r3, #0
}
 81079ca:	4618      	mov	r0, r3
 81079cc:	3710      	adds	r7, #16
 81079ce:	46bd      	mov	sp, r7
 81079d0:	bd80      	pop	{r7, pc}
 81079d2:	bf00      	nop
 81079d4:	80002000 	.word	0x80002000

081079d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 81079d8:	b580      	push	{r7, lr}
 81079da:	b084      	sub	sp, #16
 81079dc:	af00      	add	r7, sp, #0
 81079de:	6078      	str	r0, [r7, #4]
 81079e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 81079e2:	687b      	ldr	r3, [r7, #4]
 81079e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81079e8:	b2db      	uxtb	r3, r3
 81079ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 81079ee:	2b28      	cmp	r3, #40	; 0x28
 81079f0:	d16a      	bne.n	8107ac8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	681b      	ldr	r3, [r3, #0]
 81079f6:	699b      	ldr	r3, [r3, #24]
 81079f8:	0c1b      	lsrs	r3, r3, #16
 81079fa:	b2db      	uxtb	r3, r3
 81079fc:	f003 0301 	and.w	r3, r3, #1
 8107a00:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8107a02:	687b      	ldr	r3, [r7, #4]
 8107a04:	681b      	ldr	r3, [r3, #0]
 8107a06:	699b      	ldr	r3, [r3, #24]
 8107a08:	0c1b      	lsrs	r3, r3, #16
 8107a0a:	b29b      	uxth	r3, r3
 8107a0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107a10:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	681b      	ldr	r3, [r3, #0]
 8107a16:	689b      	ldr	r3, [r3, #8]
 8107a18:	b29b      	uxth	r3, r3
 8107a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8107a1e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	681b      	ldr	r3, [r3, #0]
 8107a24:	68db      	ldr	r3, [r3, #12]
 8107a26:	b29b      	uxth	r3, r3
 8107a28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8107a2c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8107a2e:	687b      	ldr	r3, [r7, #4]
 8107a30:	68db      	ldr	r3, [r3, #12]
 8107a32:	2b02      	cmp	r3, #2
 8107a34:	d138      	bne.n	8107aa8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8107a36:	897b      	ldrh	r3, [r7, #10]
 8107a38:	09db      	lsrs	r3, r3, #7
 8107a3a:	b29a      	uxth	r2, r3
 8107a3c:	89bb      	ldrh	r3, [r7, #12]
 8107a3e:	4053      	eors	r3, r2
 8107a40:	b29b      	uxth	r3, r3
 8107a42:	f003 0306 	and.w	r3, r3, #6
 8107a46:	2b00      	cmp	r3, #0
 8107a48:	d11c      	bne.n	8107a84 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8107a4a:	897b      	ldrh	r3, [r7, #10]
 8107a4c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8107a4e:	687b      	ldr	r3, [r7, #4]
 8107a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107a52:	1c5a      	adds	r2, r3, #1
 8107a54:	687b      	ldr	r3, [r7, #4]
 8107a56:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8107a58:	687b      	ldr	r3, [r7, #4]
 8107a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8107a5c:	2b02      	cmp	r3, #2
 8107a5e:	d13b      	bne.n	8107ad8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8107a60:	687b      	ldr	r3, [r7, #4]
 8107a62:	2200      	movs	r2, #0
 8107a64:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107a66:	687b      	ldr	r3, [r7, #4]
 8107a68:	681b      	ldr	r3, [r3, #0]
 8107a6a:	2208      	movs	r2, #8
 8107a6c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8107a6e:	687b      	ldr	r3, [r7, #4]
 8107a70:	2200      	movs	r2, #0
 8107a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107a76:	89ba      	ldrh	r2, [r7, #12]
 8107a78:	7bfb      	ldrb	r3, [r7, #15]
 8107a7a:	4619      	mov	r1, r3
 8107a7c:	6878      	ldr	r0, [r7, #4]
 8107a7e:	f7ff fafe 	bl	810707e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8107a82:	e029      	b.n	8107ad8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8107a84:	893b      	ldrh	r3, [r7, #8]
 8107a86:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107a8c:	6878      	ldr	r0, [r7, #4]
 8107a8e:	f001 f899 	bl	8108bc4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8107a92:	687b      	ldr	r3, [r7, #4]
 8107a94:	2200      	movs	r2, #0
 8107a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107a9a:	89ba      	ldrh	r2, [r7, #12]
 8107a9c:	7bfb      	ldrb	r3, [r7, #15]
 8107a9e:	4619      	mov	r1, r3
 8107aa0:	6878      	ldr	r0, [r7, #4]
 8107aa2:	f7ff faec 	bl	810707e <HAL_I2C_AddrCallback>
}
 8107aa6:	e017      	b.n	8107ad8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8107aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8107aac:	6878      	ldr	r0, [r7, #4]
 8107aae:	f001 f889 	bl	8108bc4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8107ab2:	687b      	ldr	r3, [r7, #4]
 8107ab4:	2200      	movs	r2, #0
 8107ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8107aba:	89ba      	ldrh	r2, [r7, #12]
 8107abc:	7bfb      	ldrb	r3, [r7, #15]
 8107abe:	4619      	mov	r1, r3
 8107ac0:	6878      	ldr	r0, [r7, #4]
 8107ac2:	f7ff fadc 	bl	810707e <HAL_I2C_AddrCallback>
}
 8107ac6:	e007      	b.n	8107ad8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8107ac8:	687b      	ldr	r3, [r7, #4]
 8107aca:	681b      	ldr	r3, [r3, #0]
 8107acc:	2208      	movs	r2, #8
 8107ace:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8107ad0:	687b      	ldr	r3, [r7, #4]
 8107ad2:	2200      	movs	r2, #0
 8107ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8107ad8:	bf00      	nop
 8107ada:	3710      	adds	r7, #16
 8107adc:	46bd      	mov	sp, r7
 8107ade:	bd80      	pop	{r7, pc}

08107ae0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107ae0:	b580      	push	{r7, lr}
 8107ae2:	b082      	sub	sp, #8
 8107ae4:	af00      	add	r7, sp, #0
 8107ae6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107ae8:	687b      	ldr	r3, [r7, #4]
 8107aea:	2200      	movs	r2, #0
 8107aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107af6:	b2db      	uxtb	r3, r3
 8107af8:	2b21      	cmp	r3, #33	; 0x21
 8107afa:	d115      	bne.n	8107b28 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	2220      	movs	r2, #32
 8107b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8107b04:	687b      	ldr	r3, [r7, #4]
 8107b06:	2211      	movs	r2, #17
 8107b08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8107b0a:	687b      	ldr	r3, [r7, #4]
 8107b0c:	2200      	movs	r2, #0
 8107b0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107b10:	2101      	movs	r1, #1
 8107b12:	6878      	ldr	r0, [r7, #4]
 8107b14:	f001 f856 	bl	8108bc4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107b18:	687b      	ldr	r3, [r7, #4]
 8107b1a:	2200      	movs	r2, #0
 8107b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8107b20:	6878      	ldr	r0, [r7, #4]
 8107b22:	f7ff fa84 	bl	810702e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8107b26:	e014      	b.n	8107b52 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8107b28:	687b      	ldr	r3, [r7, #4]
 8107b2a:	2220      	movs	r2, #32
 8107b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8107b30:	687b      	ldr	r3, [r7, #4]
 8107b32:	2212      	movs	r2, #18
 8107b34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8107b36:	687b      	ldr	r3, [r7, #4]
 8107b38:	2200      	movs	r2, #0
 8107b3a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107b3c:	2102      	movs	r1, #2
 8107b3e:	6878      	ldr	r0, [r7, #4]
 8107b40:	f001 f840 	bl	8108bc4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107b44:	687b      	ldr	r3, [r7, #4]
 8107b46:	2200      	movs	r2, #0
 8107b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8107b4c:	6878      	ldr	r0, [r7, #4]
 8107b4e:	f7ff fa78 	bl	8107042 <HAL_I2C_MasterRxCpltCallback>
}
 8107b52:	bf00      	nop
 8107b54:	3708      	adds	r7, #8
 8107b56:	46bd      	mov	sp, r7
 8107b58:	bd80      	pop	{r7, pc}

08107b5a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8107b5a:	b580      	push	{r7, lr}
 8107b5c:	b084      	sub	sp, #16
 8107b5e:	af00      	add	r7, sp, #0
 8107b60:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	681b      	ldr	r3, [r3, #0]
 8107b66:	681b      	ldr	r3, [r3, #0]
 8107b68:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8107b6a:	687b      	ldr	r3, [r7, #4]
 8107b6c:	2200      	movs	r2, #0
 8107b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107b72:	68fb      	ldr	r3, [r7, #12]
 8107b74:	0b9b      	lsrs	r3, r3, #14
 8107b76:	f003 0301 	and.w	r3, r3, #1
 8107b7a:	2b00      	cmp	r3, #0
 8107b7c:	d008      	beq.n	8107b90 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107b7e:	687b      	ldr	r3, [r7, #4]
 8107b80:	681b      	ldr	r3, [r3, #0]
 8107b82:	681a      	ldr	r2, [r3, #0]
 8107b84:	687b      	ldr	r3, [r7, #4]
 8107b86:	681b      	ldr	r3, [r3, #0]
 8107b88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107b8c:	601a      	str	r2, [r3, #0]
 8107b8e:	e00d      	b.n	8107bac <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107b90:	68fb      	ldr	r3, [r7, #12]
 8107b92:	0bdb      	lsrs	r3, r3, #15
 8107b94:	f003 0301 	and.w	r3, r3, #1
 8107b98:	2b00      	cmp	r3, #0
 8107b9a:	d007      	beq.n	8107bac <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107b9c:	687b      	ldr	r3, [r7, #4]
 8107b9e:	681b      	ldr	r3, [r3, #0]
 8107ba0:	681a      	ldr	r2, [r3, #0]
 8107ba2:	687b      	ldr	r3, [r7, #4]
 8107ba4:	681b      	ldr	r3, [r3, #0]
 8107ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107baa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107bb2:	b2db      	uxtb	r3, r3
 8107bb4:	2b29      	cmp	r3, #41	; 0x29
 8107bb6:	d112      	bne.n	8107bde <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107bb8:	687b      	ldr	r3, [r7, #4]
 8107bba:	2228      	movs	r2, #40	; 0x28
 8107bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107bc0:	687b      	ldr	r3, [r7, #4]
 8107bc2:	2221      	movs	r2, #33	; 0x21
 8107bc4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107bc6:	2101      	movs	r1, #1
 8107bc8:	6878      	ldr	r0, [r7, #4]
 8107bca:	f000 fffb 	bl	8108bc4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8107bce:	687b      	ldr	r3, [r7, #4]
 8107bd0:	2200      	movs	r2, #0
 8107bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8107bd6:	6878      	ldr	r0, [r7, #4]
 8107bd8:	f7ff fa3d 	bl	8107056 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107bdc:	e017      	b.n	8107c0e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107be4:	b2db      	uxtb	r3, r3
 8107be6:	2b2a      	cmp	r3, #42	; 0x2a
 8107be8:	d111      	bne.n	8107c0e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	2228      	movs	r2, #40	; 0x28
 8107bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107bf2:	687b      	ldr	r3, [r7, #4]
 8107bf4:	2222      	movs	r2, #34	; 0x22
 8107bf6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107bf8:	2102      	movs	r1, #2
 8107bfa:	6878      	ldr	r0, [r7, #4]
 8107bfc:	f000 ffe2 	bl	8108bc4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8107c00:	687b      	ldr	r3, [r7, #4]
 8107c02:	2200      	movs	r2, #0
 8107c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8107c08:	6878      	ldr	r0, [r7, #4]
 8107c0a:	f7ff fa2e 	bl	810706a <HAL_I2C_SlaveRxCpltCallback>
}
 8107c0e:	bf00      	nop
 8107c10:	3710      	adds	r7, #16
 8107c12:	46bd      	mov	sp, r7
 8107c14:	bd80      	pop	{r7, pc}
	...

08107c18 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107c18:	b580      	push	{r7, lr}
 8107c1a:	b086      	sub	sp, #24
 8107c1c:	af00      	add	r7, sp, #0
 8107c1e:	6078      	str	r0, [r7, #4]
 8107c20:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8107c22:	683b      	ldr	r3, [r7, #0]
 8107c24:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107c26:	687b      	ldr	r3, [r7, #4]
 8107c28:	681b      	ldr	r3, [r3, #0]
 8107c2a:	2220      	movs	r2, #32
 8107c2c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107c34:	b2db      	uxtb	r3, r3
 8107c36:	2b21      	cmp	r3, #33	; 0x21
 8107c38:	d107      	bne.n	8107c4a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8107c3a:	2101      	movs	r1, #1
 8107c3c:	6878      	ldr	r0, [r7, #4]
 8107c3e:	f000 ffc1 	bl	8108bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	2211      	movs	r2, #17
 8107c46:	631a      	str	r2, [r3, #48]	; 0x30
 8107c48:	e00c      	b.n	8107c64 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107c50:	b2db      	uxtb	r3, r3
 8107c52:	2b22      	cmp	r3, #34	; 0x22
 8107c54:	d106      	bne.n	8107c64 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8107c56:	2102      	movs	r1, #2
 8107c58:	6878      	ldr	r0, [r7, #4]
 8107c5a:	f000 ffb3 	bl	8108bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8107c5e:	687b      	ldr	r3, [r7, #4]
 8107c60:	2212      	movs	r2, #18
 8107c62:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107c64:	687b      	ldr	r3, [r7, #4]
 8107c66:	681b      	ldr	r3, [r3, #0]
 8107c68:	6859      	ldr	r1, [r3, #4]
 8107c6a:	687b      	ldr	r3, [r7, #4]
 8107c6c:	681a      	ldr	r2, [r3, #0]
 8107c6e:	4b4d      	ldr	r3, [pc, #308]	; (8107da4 <I2C_ITMasterCplt+0x18c>)
 8107c70:	400b      	ands	r3, r1
 8107c72:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8107c74:	687b      	ldr	r3, [r7, #4]
 8107c76:	2200      	movs	r2, #0
 8107c78:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8107c7a:	687b      	ldr	r3, [r7, #4]
 8107c7c:	4a4a      	ldr	r2, [pc, #296]	; (8107da8 <I2C_ITMasterCplt+0x190>)
 8107c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8107c80:	697b      	ldr	r3, [r7, #20]
 8107c82:	091b      	lsrs	r3, r3, #4
 8107c84:	f003 0301 	and.w	r3, r3, #1
 8107c88:	2b00      	cmp	r3, #0
 8107c8a:	d009      	beq.n	8107ca0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8107c8c:	687b      	ldr	r3, [r7, #4]
 8107c8e:	681b      	ldr	r3, [r3, #0]
 8107c90:	2210      	movs	r2, #16
 8107c92:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8107c94:	687b      	ldr	r3, [r7, #4]
 8107c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107c98:	f043 0204 	orr.w	r2, r3, #4
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107ca6:	b2db      	uxtb	r3, r3
 8107ca8:	2b60      	cmp	r3, #96	; 0x60
 8107caa:	d10b      	bne.n	8107cc4 <I2C_ITMasterCplt+0xac>
 8107cac:	697b      	ldr	r3, [r7, #20]
 8107cae:	089b      	lsrs	r3, r3, #2
 8107cb0:	f003 0301 	and.w	r3, r3, #1
 8107cb4:	2b00      	cmp	r3, #0
 8107cb6:	d005      	beq.n	8107cc4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8107cb8:	687b      	ldr	r3, [r7, #4]
 8107cba:	681b      	ldr	r3, [r3, #0]
 8107cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107cbe:	b2db      	uxtb	r3, r3
 8107cc0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8107cc2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107cc4:	6878      	ldr	r0, [r7, #4]
 8107cc6:	f000 fbb6 	bl	8108436 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107cce:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8107cd0:	687b      	ldr	r3, [r7, #4]
 8107cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107cd6:	b2db      	uxtb	r3, r3
 8107cd8:	2b60      	cmp	r3, #96	; 0x60
 8107cda:	d002      	beq.n	8107ce2 <I2C_ITMasterCplt+0xca>
 8107cdc:	693b      	ldr	r3, [r7, #16]
 8107cde:	2b00      	cmp	r3, #0
 8107ce0:	d006      	beq.n	8107cf0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107ce6:	4619      	mov	r1, r3
 8107ce8:	6878      	ldr	r0, [r7, #4]
 8107cea:	f000 faad 	bl	8108248 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8107cee:	e054      	b.n	8107d9a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107cf6:	b2db      	uxtb	r3, r3
 8107cf8:	2b21      	cmp	r3, #33	; 0x21
 8107cfa:	d124      	bne.n	8107d46 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8107cfc:	687b      	ldr	r3, [r7, #4]
 8107cfe:	2220      	movs	r2, #32
 8107d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	2200      	movs	r2, #0
 8107d08:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8107d0a:	687b      	ldr	r3, [r7, #4]
 8107d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8107d10:	b2db      	uxtb	r3, r3
 8107d12:	2b40      	cmp	r3, #64	; 0x40
 8107d14:	d10b      	bne.n	8107d2e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	2200      	movs	r2, #0
 8107d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	2200      	movs	r2, #0
 8107d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8107d26:	6878      	ldr	r0, [r7, #4]
 8107d28:	f7fa fb8a 	bl	8102440 <HAL_I2C_MemTxCpltCallback>
}
 8107d2c:	e035      	b.n	8107d9a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	2200      	movs	r2, #0
 8107d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	2200      	movs	r2, #0
 8107d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8107d3e:	6878      	ldr	r0, [r7, #4]
 8107d40:	f7ff f975 	bl	810702e <HAL_I2C_MasterTxCpltCallback>
}
 8107d44:	e029      	b.n	8107d9a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8107d46:	687b      	ldr	r3, [r7, #4]
 8107d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107d4c:	b2db      	uxtb	r3, r3
 8107d4e:	2b22      	cmp	r3, #34	; 0x22
 8107d50:	d123      	bne.n	8107d9a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8107d52:	687b      	ldr	r3, [r7, #4]
 8107d54:	2220      	movs	r2, #32
 8107d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8107d5a:	687b      	ldr	r3, [r7, #4]
 8107d5c:	2200      	movs	r2, #0
 8107d5e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8107d66:	b2db      	uxtb	r3, r3
 8107d68:	2b40      	cmp	r3, #64	; 0x40
 8107d6a:	d10b      	bne.n	8107d84 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	2200      	movs	r2, #0
 8107d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	2200      	movs	r2, #0
 8107d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8107d7c:	6878      	ldr	r0, [r7, #4]
 8107d7e:	f7fa fb5d 	bl	810243c <HAL_I2C_MemRxCpltCallback>
}
 8107d82:	e00a      	b.n	8107d9a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	2200      	movs	r2, #0
 8107d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	2200      	movs	r2, #0
 8107d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8107d94:	6878      	ldr	r0, [r7, #4]
 8107d96:	f7ff f954 	bl	8107042 <HAL_I2C_MasterRxCpltCallback>
}
 8107d9a:	bf00      	nop
 8107d9c:	3718      	adds	r7, #24
 8107d9e:	46bd      	mov	sp, r7
 8107da0:	bd80      	pop	{r7, pc}
 8107da2:	bf00      	nop
 8107da4:	fe00e800 	.word	0xfe00e800
 8107da8:	ffff0000 	.word	0xffff0000

08107dac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8107dac:	b580      	push	{r7, lr}
 8107dae:	b086      	sub	sp, #24
 8107db0:	af00      	add	r7, sp, #0
 8107db2:	6078      	str	r0, [r7, #4]
 8107db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	681b      	ldr	r3, [r3, #0]
 8107dba:	681b      	ldr	r3, [r3, #0]
 8107dbc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8107dbe:	683b      	ldr	r3, [r7, #0]
 8107dc0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8107dc2:	687b      	ldr	r3, [r7, #4]
 8107dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8107dc8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8107dca:	687b      	ldr	r3, [r7, #4]
 8107dcc:	681b      	ldr	r3, [r3, #0]
 8107dce:	2220      	movs	r2, #32
 8107dd0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8107dd2:	7bfb      	ldrb	r3, [r7, #15]
 8107dd4:	2b21      	cmp	r3, #33	; 0x21
 8107dd6:	d002      	beq.n	8107dde <I2C_ITSlaveCplt+0x32>
 8107dd8:	7bfb      	ldrb	r3, [r7, #15]
 8107dda:	2b29      	cmp	r3, #41	; 0x29
 8107ddc:	d108      	bne.n	8107df0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8107dde:	f248 0101 	movw	r1, #32769	; 0x8001
 8107de2:	6878      	ldr	r0, [r7, #4]
 8107de4:	f000 feee 	bl	8108bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8107de8:	687b      	ldr	r3, [r7, #4]
 8107dea:	2221      	movs	r2, #33	; 0x21
 8107dec:	631a      	str	r2, [r3, #48]	; 0x30
 8107dee:	e00d      	b.n	8107e0c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8107df0:	7bfb      	ldrb	r3, [r7, #15]
 8107df2:	2b22      	cmp	r3, #34	; 0x22
 8107df4:	d002      	beq.n	8107dfc <I2C_ITSlaveCplt+0x50>
 8107df6:	7bfb      	ldrb	r3, [r7, #15]
 8107df8:	2b2a      	cmp	r3, #42	; 0x2a
 8107dfa:	d107      	bne.n	8107e0c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8107dfc:	f248 0102 	movw	r1, #32770	; 0x8002
 8107e00:	6878      	ldr	r0, [r7, #4]
 8107e02:	f000 fedf 	bl	8108bc4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8107e06:	687b      	ldr	r3, [r7, #4]
 8107e08:	2222      	movs	r2, #34	; 0x22
 8107e0a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	681b      	ldr	r3, [r3, #0]
 8107e10:	685a      	ldr	r2, [r3, #4]
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8107e1a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	681b      	ldr	r3, [r3, #0]
 8107e20:	6859      	ldr	r1, [r3, #4]
 8107e22:	687b      	ldr	r3, [r7, #4]
 8107e24:	681a      	ldr	r2, [r3, #0]
 8107e26:	4b80      	ldr	r3, [pc, #512]	; (8108028 <I2C_ITSlaveCplt+0x27c>)
 8107e28:	400b      	ands	r3, r1
 8107e2a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8107e2c:	6878      	ldr	r0, [r7, #4]
 8107e2e:	f000 fb02 	bl	8108436 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8107e32:	693b      	ldr	r3, [r7, #16]
 8107e34:	0b9b      	lsrs	r3, r3, #14
 8107e36:	f003 0301 	and.w	r3, r3, #1
 8107e3a:	2b00      	cmp	r3, #0
 8107e3c:	d07a      	beq.n	8107f34 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8107e3e:	687b      	ldr	r3, [r7, #4]
 8107e40:	681b      	ldr	r3, [r3, #0]
 8107e42:	681a      	ldr	r2, [r3, #0]
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	681b      	ldr	r3, [r3, #0]
 8107e48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107e4c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8107e4e:	687b      	ldr	r3, [r7, #4]
 8107e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e52:	2b00      	cmp	r3, #0
 8107e54:	f000 8111 	beq.w	810807a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8107e58:	687b      	ldr	r3, [r7, #4]
 8107e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e5c:	681b      	ldr	r3, [r3, #0]
 8107e5e:	4a73      	ldr	r2, [pc, #460]	; (810802c <I2C_ITSlaveCplt+0x280>)
 8107e60:	4293      	cmp	r3, r2
 8107e62:	d059      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107e64:	687b      	ldr	r3, [r7, #4]
 8107e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e68:	681b      	ldr	r3, [r3, #0]
 8107e6a:	4a71      	ldr	r2, [pc, #452]	; (8108030 <I2C_ITSlaveCplt+0x284>)
 8107e6c:	4293      	cmp	r3, r2
 8107e6e:	d053      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107e70:	687b      	ldr	r3, [r7, #4]
 8107e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e74:	681b      	ldr	r3, [r3, #0]
 8107e76:	4a6f      	ldr	r2, [pc, #444]	; (8108034 <I2C_ITSlaveCplt+0x288>)
 8107e78:	4293      	cmp	r3, r2
 8107e7a:	d04d      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e80:	681b      	ldr	r3, [r3, #0]
 8107e82:	4a6d      	ldr	r2, [pc, #436]	; (8108038 <I2C_ITSlaveCplt+0x28c>)
 8107e84:	4293      	cmp	r3, r2
 8107e86:	d047      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107e88:	687b      	ldr	r3, [r7, #4]
 8107e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e8c:	681b      	ldr	r3, [r3, #0]
 8107e8e:	4a6b      	ldr	r2, [pc, #428]	; (810803c <I2C_ITSlaveCplt+0x290>)
 8107e90:	4293      	cmp	r3, r2
 8107e92:	d041      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107e94:	687b      	ldr	r3, [r7, #4]
 8107e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e98:	681b      	ldr	r3, [r3, #0]
 8107e9a:	4a69      	ldr	r2, [pc, #420]	; (8108040 <I2C_ITSlaveCplt+0x294>)
 8107e9c:	4293      	cmp	r3, r2
 8107e9e:	d03b      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107ea0:	687b      	ldr	r3, [r7, #4]
 8107ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ea4:	681b      	ldr	r3, [r3, #0]
 8107ea6:	4a67      	ldr	r2, [pc, #412]	; (8108044 <I2C_ITSlaveCplt+0x298>)
 8107ea8:	4293      	cmp	r3, r2
 8107eaa:	d035      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107eb0:	681b      	ldr	r3, [r3, #0]
 8107eb2:	4a65      	ldr	r2, [pc, #404]	; (8108048 <I2C_ITSlaveCplt+0x29c>)
 8107eb4:	4293      	cmp	r3, r2
 8107eb6:	d02f      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107eb8:	687b      	ldr	r3, [r7, #4]
 8107eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ebc:	681b      	ldr	r3, [r3, #0]
 8107ebe:	4a63      	ldr	r2, [pc, #396]	; (810804c <I2C_ITSlaveCplt+0x2a0>)
 8107ec0:	4293      	cmp	r3, r2
 8107ec2:	d029      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ec8:	681b      	ldr	r3, [r3, #0]
 8107eca:	4a61      	ldr	r2, [pc, #388]	; (8108050 <I2C_ITSlaveCplt+0x2a4>)
 8107ecc:	4293      	cmp	r3, r2
 8107ece:	d023      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107ed0:	687b      	ldr	r3, [r7, #4]
 8107ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ed4:	681b      	ldr	r3, [r3, #0]
 8107ed6:	4a5f      	ldr	r2, [pc, #380]	; (8108054 <I2C_ITSlaveCplt+0x2a8>)
 8107ed8:	4293      	cmp	r3, r2
 8107eda:	d01d      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107edc:	687b      	ldr	r3, [r7, #4]
 8107ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ee0:	681b      	ldr	r3, [r3, #0]
 8107ee2:	4a5d      	ldr	r2, [pc, #372]	; (8108058 <I2C_ITSlaveCplt+0x2ac>)
 8107ee4:	4293      	cmp	r3, r2
 8107ee6:	d017      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107ee8:	687b      	ldr	r3, [r7, #4]
 8107eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107eec:	681b      	ldr	r3, [r3, #0]
 8107eee:	4a5b      	ldr	r2, [pc, #364]	; (810805c <I2C_ITSlaveCplt+0x2b0>)
 8107ef0:	4293      	cmp	r3, r2
 8107ef2:	d011      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107ef4:	687b      	ldr	r3, [r7, #4]
 8107ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ef8:	681b      	ldr	r3, [r3, #0]
 8107efa:	4a59      	ldr	r2, [pc, #356]	; (8108060 <I2C_ITSlaveCplt+0x2b4>)
 8107efc:	4293      	cmp	r3, r2
 8107efe:	d00b      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f04:	681b      	ldr	r3, [r3, #0]
 8107f06:	4a57      	ldr	r2, [pc, #348]	; (8108064 <I2C_ITSlaveCplt+0x2b8>)
 8107f08:	4293      	cmp	r3, r2
 8107f0a:	d005      	beq.n	8107f18 <I2C_ITSlaveCplt+0x16c>
 8107f0c:	687b      	ldr	r3, [r7, #4]
 8107f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f10:	681b      	ldr	r3, [r3, #0]
 8107f12:	4a55      	ldr	r2, [pc, #340]	; (8108068 <I2C_ITSlaveCplt+0x2bc>)
 8107f14:	4293      	cmp	r3, r2
 8107f16:	d105      	bne.n	8107f24 <I2C_ITSlaveCplt+0x178>
 8107f18:	687b      	ldr	r3, [r7, #4]
 8107f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f1c:	681b      	ldr	r3, [r3, #0]
 8107f1e:	685b      	ldr	r3, [r3, #4]
 8107f20:	b29b      	uxth	r3, r3
 8107f22:	e004      	b.n	8107f2e <I2C_ITSlaveCplt+0x182>
 8107f24:	687b      	ldr	r3, [r7, #4]
 8107f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f28:	681b      	ldr	r3, [r3, #0]
 8107f2a:	685b      	ldr	r3, [r3, #4]
 8107f2c:	b29b      	uxth	r3, r3
 8107f2e:	687a      	ldr	r2, [r7, #4]
 8107f30:	8553      	strh	r3, [r2, #42]	; 0x2a
 8107f32:	e0a2      	b.n	810807a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8107f34:	693b      	ldr	r3, [r7, #16]
 8107f36:	0bdb      	lsrs	r3, r3, #15
 8107f38:	f003 0301 	and.w	r3, r3, #1
 8107f3c:	2b00      	cmp	r3, #0
 8107f3e:	f000 809c 	beq.w	810807a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8107f42:	687b      	ldr	r3, [r7, #4]
 8107f44:	681b      	ldr	r3, [r3, #0]
 8107f46:	681a      	ldr	r2, [r3, #0]
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	681b      	ldr	r3, [r3, #0]
 8107f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107f50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f56:	2b00      	cmp	r3, #0
 8107f58:	f000 808f 	beq.w	810807a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8107f5c:	687b      	ldr	r3, [r7, #4]
 8107f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	4a32      	ldr	r2, [pc, #200]	; (810802c <I2C_ITSlaveCplt+0x280>)
 8107f64:	4293      	cmp	r3, r2
 8107f66:	d059      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f6c:	681b      	ldr	r3, [r3, #0]
 8107f6e:	4a30      	ldr	r2, [pc, #192]	; (8108030 <I2C_ITSlaveCplt+0x284>)
 8107f70:	4293      	cmp	r3, r2
 8107f72:	d053      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107f74:	687b      	ldr	r3, [r7, #4]
 8107f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	4a2e      	ldr	r2, [pc, #184]	; (8108034 <I2C_ITSlaveCplt+0x288>)
 8107f7c:	4293      	cmp	r3, r2
 8107f7e:	d04d      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107f80:	687b      	ldr	r3, [r7, #4]
 8107f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f84:	681b      	ldr	r3, [r3, #0]
 8107f86:	4a2c      	ldr	r2, [pc, #176]	; (8108038 <I2C_ITSlaveCplt+0x28c>)
 8107f88:	4293      	cmp	r3, r2
 8107f8a:	d047      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107f8c:	687b      	ldr	r3, [r7, #4]
 8107f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f90:	681b      	ldr	r3, [r3, #0]
 8107f92:	4a2a      	ldr	r2, [pc, #168]	; (810803c <I2C_ITSlaveCplt+0x290>)
 8107f94:	4293      	cmp	r3, r2
 8107f96:	d041      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107f98:	687b      	ldr	r3, [r7, #4]
 8107f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107f9c:	681b      	ldr	r3, [r3, #0]
 8107f9e:	4a28      	ldr	r2, [pc, #160]	; (8108040 <I2C_ITSlaveCplt+0x294>)
 8107fa0:	4293      	cmp	r3, r2
 8107fa2:	d03b      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107fa4:	687b      	ldr	r3, [r7, #4]
 8107fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fa8:	681b      	ldr	r3, [r3, #0]
 8107faa:	4a26      	ldr	r2, [pc, #152]	; (8108044 <I2C_ITSlaveCplt+0x298>)
 8107fac:	4293      	cmp	r3, r2
 8107fae:	d035      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107fb0:	687b      	ldr	r3, [r7, #4]
 8107fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fb4:	681b      	ldr	r3, [r3, #0]
 8107fb6:	4a24      	ldr	r2, [pc, #144]	; (8108048 <I2C_ITSlaveCplt+0x29c>)
 8107fb8:	4293      	cmp	r3, r2
 8107fba:	d02f      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fc0:	681b      	ldr	r3, [r3, #0]
 8107fc2:	4a22      	ldr	r2, [pc, #136]	; (810804c <I2C_ITSlaveCplt+0x2a0>)
 8107fc4:	4293      	cmp	r3, r2
 8107fc6:	d029      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107fc8:	687b      	ldr	r3, [r7, #4]
 8107fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fcc:	681b      	ldr	r3, [r3, #0]
 8107fce:	4a20      	ldr	r2, [pc, #128]	; (8108050 <I2C_ITSlaveCplt+0x2a4>)
 8107fd0:	4293      	cmp	r3, r2
 8107fd2:	d023      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107fd4:	687b      	ldr	r3, [r7, #4]
 8107fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fd8:	681b      	ldr	r3, [r3, #0]
 8107fda:	4a1e      	ldr	r2, [pc, #120]	; (8108054 <I2C_ITSlaveCplt+0x2a8>)
 8107fdc:	4293      	cmp	r3, r2
 8107fde:	d01d      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107fe4:	681b      	ldr	r3, [r3, #0]
 8107fe6:	4a1c      	ldr	r2, [pc, #112]	; (8108058 <I2C_ITSlaveCplt+0x2ac>)
 8107fe8:	4293      	cmp	r3, r2
 8107fea:	d017      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107fec:	687b      	ldr	r3, [r7, #4]
 8107fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ff0:	681b      	ldr	r3, [r3, #0]
 8107ff2:	4a1a      	ldr	r2, [pc, #104]	; (810805c <I2C_ITSlaveCplt+0x2b0>)
 8107ff4:	4293      	cmp	r3, r2
 8107ff6:	d011      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107ffc:	681b      	ldr	r3, [r3, #0]
 8107ffe:	4a18      	ldr	r2, [pc, #96]	; (8108060 <I2C_ITSlaveCplt+0x2b4>)
 8108000:	4293      	cmp	r3, r2
 8108002:	d00b      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8108004:	687b      	ldr	r3, [r7, #4]
 8108006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108008:	681b      	ldr	r3, [r3, #0]
 810800a:	4a16      	ldr	r2, [pc, #88]	; (8108064 <I2C_ITSlaveCplt+0x2b8>)
 810800c:	4293      	cmp	r3, r2
 810800e:	d005      	beq.n	810801c <I2C_ITSlaveCplt+0x270>
 8108010:	687b      	ldr	r3, [r7, #4]
 8108012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	4a14      	ldr	r2, [pc, #80]	; (8108068 <I2C_ITSlaveCplt+0x2bc>)
 8108018:	4293      	cmp	r3, r2
 810801a:	d127      	bne.n	810806c <I2C_ITSlaveCplt+0x2c0>
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108020:	681b      	ldr	r3, [r3, #0]
 8108022:	685b      	ldr	r3, [r3, #4]
 8108024:	b29b      	uxth	r3, r3
 8108026:	e026      	b.n	8108076 <I2C_ITSlaveCplt+0x2ca>
 8108028:	fe00e800 	.word	0xfe00e800
 810802c:	40020010 	.word	0x40020010
 8108030:	40020028 	.word	0x40020028
 8108034:	40020040 	.word	0x40020040
 8108038:	40020058 	.word	0x40020058
 810803c:	40020070 	.word	0x40020070
 8108040:	40020088 	.word	0x40020088
 8108044:	400200a0 	.word	0x400200a0
 8108048:	400200b8 	.word	0x400200b8
 810804c:	40020410 	.word	0x40020410
 8108050:	40020428 	.word	0x40020428
 8108054:	40020440 	.word	0x40020440
 8108058:	40020458 	.word	0x40020458
 810805c:	40020470 	.word	0x40020470
 8108060:	40020488 	.word	0x40020488
 8108064:	400204a0 	.word	0x400204a0
 8108068:	400204b8 	.word	0x400204b8
 810806c:	687b      	ldr	r3, [r7, #4]
 810806e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108070:	681b      	ldr	r3, [r3, #0]
 8108072:	685b      	ldr	r3, [r3, #4]
 8108074:	b29b      	uxth	r3, r3
 8108076:	687a      	ldr	r2, [r7, #4]
 8108078:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 810807a:	697b      	ldr	r3, [r7, #20]
 810807c:	089b      	lsrs	r3, r3, #2
 810807e:	f003 0301 	and.w	r3, r3, #1
 8108082:	2b00      	cmp	r3, #0
 8108084:	d020      	beq.n	81080c8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8108086:	697b      	ldr	r3, [r7, #20]
 8108088:	f023 0304 	bic.w	r3, r3, #4
 810808c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810808e:	687b      	ldr	r3, [r7, #4]
 8108090:	681b      	ldr	r3, [r3, #0]
 8108092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108094:	687b      	ldr	r3, [r7, #4]
 8108096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108098:	b2d2      	uxtb	r2, r2
 810809a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 810809c:	687b      	ldr	r3, [r7, #4]
 810809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81080a0:	1c5a      	adds	r2, r3, #1
 81080a2:	687b      	ldr	r3, [r7, #4]
 81080a4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 81080a6:	687b      	ldr	r3, [r7, #4]
 81080a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81080aa:	2b00      	cmp	r3, #0
 81080ac:	d00c      	beq.n	81080c8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 81080ae:	687b      	ldr	r3, [r7, #4]
 81080b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81080b2:	3b01      	subs	r3, #1
 81080b4:	b29a      	uxth	r2, r3
 81080b6:	687b      	ldr	r3, [r7, #4]
 81080b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81080ba:	687b      	ldr	r3, [r7, #4]
 81080bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81080be:	b29b      	uxth	r3, r3
 81080c0:	3b01      	subs	r3, #1
 81080c2:	b29a      	uxth	r2, r3
 81080c4:	687b      	ldr	r3, [r7, #4]
 81080c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 81080c8:	687b      	ldr	r3, [r7, #4]
 81080ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81080cc:	b29b      	uxth	r3, r3
 81080ce:	2b00      	cmp	r3, #0
 81080d0:	d005      	beq.n	81080de <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81080d2:	687b      	ldr	r3, [r7, #4]
 81080d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080d6:	f043 0204 	orr.w	r2, r3, #4
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 81080de:	687b      	ldr	r3, [r7, #4]
 81080e0:	2200      	movs	r2, #0
 81080e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 81080e6:	687b      	ldr	r3, [r7, #4]
 81080e8:	2200      	movs	r2, #0
 81080ea:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 81080ec:	687b      	ldr	r3, [r7, #4]
 81080ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080f0:	2b00      	cmp	r3, #0
 81080f2:	d010      	beq.n	8108116 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080f8:	4619      	mov	r1, r3
 81080fa:	6878      	ldr	r0, [r7, #4]
 81080fc:	f000 f8a4 	bl	8108248 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8108100:	687b      	ldr	r3, [r7, #4]
 8108102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108106:	b2db      	uxtb	r3, r3
 8108108:	2b28      	cmp	r3, #40	; 0x28
 810810a:	d141      	bne.n	8108190 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 810810c:	6979      	ldr	r1, [r7, #20]
 810810e:	6878      	ldr	r0, [r7, #4]
 8108110:	f000 f844 	bl	810819c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8108114:	e03c      	b.n	8108190 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810811a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 810811e:	d014      	beq.n	810814a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8108120:	6878      	ldr	r0, [r7, #4]
 8108122:	f7ff fd1a 	bl	8107b5a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8108126:	687b      	ldr	r3, [r7, #4]
 8108128:	4a1b      	ldr	r2, [pc, #108]	; (8108198 <I2C_ITSlaveCplt+0x3ec>)
 810812a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 810812c:	687b      	ldr	r3, [r7, #4]
 810812e:	2220      	movs	r2, #32
 8108130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108134:	687b      	ldr	r3, [r7, #4]
 8108136:	2200      	movs	r2, #0
 8108138:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 810813a:	687b      	ldr	r3, [r7, #4]
 810813c:	2200      	movs	r2, #0
 810813e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8108142:	6878      	ldr	r0, [r7, #4]
 8108144:	f7fe ffa9 	bl	810709a <HAL_I2C_ListenCpltCallback>
}
 8108148:	e022      	b.n	8108190 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810814a:	687b      	ldr	r3, [r7, #4]
 810814c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108150:	b2db      	uxtb	r3, r3
 8108152:	2b22      	cmp	r3, #34	; 0x22
 8108154:	d10e      	bne.n	8108174 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8108156:	687b      	ldr	r3, [r7, #4]
 8108158:	2220      	movs	r2, #32
 810815a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810815e:	687b      	ldr	r3, [r7, #4]
 8108160:	2200      	movs	r2, #0
 8108162:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8108164:	687b      	ldr	r3, [r7, #4]
 8108166:	2200      	movs	r2, #0
 8108168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 810816c:	6878      	ldr	r0, [r7, #4]
 810816e:	f7fe ff7c 	bl	810706a <HAL_I2C_SlaveRxCpltCallback>
}
 8108172:	e00d      	b.n	8108190 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8108174:	687b      	ldr	r3, [r7, #4]
 8108176:	2220      	movs	r2, #32
 8108178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 810817c:	687b      	ldr	r3, [r7, #4]
 810817e:	2200      	movs	r2, #0
 8108180:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8108182:	687b      	ldr	r3, [r7, #4]
 8108184:	2200      	movs	r2, #0
 8108186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 810818a:	6878      	ldr	r0, [r7, #4]
 810818c:	f7fe ff63 	bl	8107056 <HAL_I2C_SlaveTxCpltCallback>
}
 8108190:	bf00      	nop
 8108192:	3718      	adds	r7, #24
 8108194:	46bd      	mov	sp, r7
 8108196:	bd80      	pop	{r7, pc}
 8108198:	ffff0000 	.word	0xffff0000

0810819c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 810819c:	b580      	push	{r7, lr}
 810819e:	b082      	sub	sp, #8
 81081a0:	af00      	add	r7, sp, #0
 81081a2:	6078      	str	r0, [r7, #4]
 81081a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 81081a6:	687b      	ldr	r3, [r7, #4]
 81081a8:	4a26      	ldr	r2, [pc, #152]	; (8108244 <I2C_ITListenCplt+0xa8>)
 81081aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 81081ac:	687b      	ldr	r3, [r7, #4]
 81081ae:	2200      	movs	r2, #0
 81081b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	2220      	movs	r2, #32
 81081b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81081ba:	687b      	ldr	r3, [r7, #4]
 81081bc:	2200      	movs	r2, #0
 81081be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 81081c2:	687b      	ldr	r3, [r7, #4]
 81081c4:	2200      	movs	r2, #0
 81081c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 81081c8:	683b      	ldr	r3, [r7, #0]
 81081ca:	089b      	lsrs	r3, r3, #2
 81081cc:	f003 0301 	and.w	r3, r3, #1
 81081d0:	2b00      	cmp	r3, #0
 81081d2:	d022      	beq.n	810821a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81081d4:	687b      	ldr	r3, [r7, #4]
 81081d6:	681b      	ldr	r3, [r3, #0]
 81081d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81081da:	687b      	ldr	r3, [r7, #4]
 81081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81081de:	b2d2      	uxtb	r2, r2
 81081e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 81081e2:	687b      	ldr	r3, [r7, #4]
 81081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81081e6:	1c5a      	adds	r2, r3, #1
 81081e8:	687b      	ldr	r3, [r7, #4]
 81081ea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 81081ec:	687b      	ldr	r3, [r7, #4]
 81081ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81081f0:	2b00      	cmp	r3, #0
 81081f2:	d012      	beq.n	810821a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 81081f4:	687b      	ldr	r3, [r7, #4]
 81081f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81081f8:	3b01      	subs	r3, #1
 81081fa:	b29a      	uxth	r2, r3
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8108200:	687b      	ldr	r3, [r7, #4]
 8108202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108204:	b29b      	uxth	r3, r3
 8108206:	3b01      	subs	r3, #1
 8108208:	b29a      	uxth	r2, r3
 810820a:	687b      	ldr	r3, [r7, #4]
 810820c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810820e:	687b      	ldr	r3, [r7, #4]
 8108210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108212:	f043 0204 	orr.w	r2, r3, #4
 8108216:	687b      	ldr	r3, [r7, #4]
 8108218:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 810821a:	f248 0103 	movw	r1, #32771	; 0x8003
 810821e:	6878      	ldr	r0, [r7, #4]
 8108220:	f000 fcd0 	bl	8108bc4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108224:	687b      	ldr	r3, [r7, #4]
 8108226:	681b      	ldr	r3, [r3, #0]
 8108228:	2210      	movs	r2, #16
 810822a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 810822c:	687b      	ldr	r3, [r7, #4]
 810822e:	2200      	movs	r2, #0
 8108230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8108234:	6878      	ldr	r0, [r7, #4]
 8108236:	f7fe ff30 	bl	810709a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 810823a:	bf00      	nop
 810823c:	3708      	adds	r7, #8
 810823e:	46bd      	mov	sp, r7
 8108240:	bd80      	pop	{r7, pc}
 8108242:	bf00      	nop
 8108244:	ffff0000 	.word	0xffff0000

08108248 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8108248:	b580      	push	{r7, lr}
 810824a:	b084      	sub	sp, #16
 810824c:	af00      	add	r7, sp, #0
 810824e:	6078      	str	r0, [r7, #4]
 8108250:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8108252:	687b      	ldr	r3, [r7, #4]
 8108254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 810825a:	687b      	ldr	r3, [r7, #4]
 810825c:	2200      	movs	r2, #0
 810825e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8108262:	687b      	ldr	r3, [r7, #4]
 8108264:	4a5d      	ldr	r2, [pc, #372]	; (81083dc <I2C_ITError+0x194>)
 8108266:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8108268:	687b      	ldr	r3, [r7, #4]
 810826a:	2200      	movs	r2, #0
 810826c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 810826e:	687b      	ldr	r3, [r7, #4]
 8108270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108272:	683b      	ldr	r3, [r7, #0]
 8108274:	431a      	orrs	r2, r3
 8108276:	687b      	ldr	r3, [r7, #4]
 8108278:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 810827a:	7bfb      	ldrb	r3, [r7, #15]
 810827c:	2b28      	cmp	r3, #40	; 0x28
 810827e:	d005      	beq.n	810828c <I2C_ITError+0x44>
 8108280:	7bfb      	ldrb	r3, [r7, #15]
 8108282:	2b29      	cmp	r3, #41	; 0x29
 8108284:	d002      	beq.n	810828c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8108286:	7bfb      	ldrb	r3, [r7, #15]
 8108288:	2b2a      	cmp	r3, #42	; 0x2a
 810828a:	d10b      	bne.n	81082a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 810828c:	2103      	movs	r1, #3
 810828e:	6878      	ldr	r0, [r7, #4]
 8108290:	f000 fc98 	bl	8108bc4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8108294:	687b      	ldr	r3, [r7, #4]
 8108296:	2228      	movs	r2, #40	; 0x28
 8108298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 810829c:	687b      	ldr	r3, [r7, #4]
 810829e:	4a50      	ldr	r2, [pc, #320]	; (81083e0 <I2C_ITError+0x198>)
 81082a0:	635a      	str	r2, [r3, #52]	; 0x34
 81082a2:	e011      	b.n	81082c8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 81082a4:	f248 0103 	movw	r1, #32771	; 0x8003
 81082a8:	6878      	ldr	r0, [r7, #4]
 81082aa:	f000 fc8b 	bl	8108bc4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 81082ae:	687b      	ldr	r3, [r7, #4]
 81082b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81082b4:	b2db      	uxtb	r3, r3
 81082b6:	2b60      	cmp	r3, #96	; 0x60
 81082b8:	d003      	beq.n	81082c2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	2220      	movs	r2, #32
 81082be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 81082c2:	687b      	ldr	r3, [r7, #4]
 81082c4:	2200      	movs	r2, #0
 81082c6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81082cc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 81082ce:	687b      	ldr	r3, [r7, #4]
 81082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81082d2:	2b00      	cmp	r3, #0
 81082d4:	d039      	beq.n	810834a <I2C_ITError+0x102>
 81082d6:	68bb      	ldr	r3, [r7, #8]
 81082d8:	2b11      	cmp	r3, #17
 81082da:	d002      	beq.n	81082e2 <I2C_ITError+0x9a>
 81082dc:	68bb      	ldr	r3, [r7, #8]
 81082de:	2b21      	cmp	r3, #33	; 0x21
 81082e0:	d133      	bne.n	810834a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 81082e2:	687b      	ldr	r3, [r7, #4]
 81082e4:	681b      	ldr	r3, [r3, #0]
 81082e6:	681b      	ldr	r3, [r3, #0]
 81082e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81082ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81082f0:	d107      	bne.n	8108302 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81082f2:	687b      	ldr	r3, [r7, #4]
 81082f4:	681b      	ldr	r3, [r3, #0]
 81082f6:	681a      	ldr	r2, [r3, #0]
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	681b      	ldr	r3, [r3, #0]
 81082fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8108300:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108302:	687b      	ldr	r3, [r7, #4]
 8108304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108306:	4618      	mov	r0, r3
 8108308:	f7fd fc72 	bl	8105bf0 <HAL_DMA_GetState>
 810830c:	4603      	mov	r3, r0
 810830e:	2b01      	cmp	r3, #1
 8108310:	d017      	beq.n	8108342 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8108312:	687b      	ldr	r3, [r7, #4]
 8108314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108316:	4a33      	ldr	r2, [pc, #204]	; (81083e4 <I2C_ITError+0x19c>)
 8108318:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810831a:	687b      	ldr	r3, [r7, #4]
 810831c:	2200      	movs	r2, #0
 810831e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8108322:	687b      	ldr	r3, [r7, #4]
 8108324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108326:	4618      	mov	r0, r3
 8108328:	f7fc faf2 	bl	8104910 <HAL_DMA_Abort_IT>
 810832c:	4603      	mov	r3, r0
 810832e:	2b00      	cmp	r3, #0
 8108330:	d04d      	beq.n	81083ce <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8108332:	687b      	ldr	r3, [r7, #4]
 8108334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108338:	687a      	ldr	r2, [r7, #4]
 810833a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 810833c:	4610      	mov	r0, r2
 810833e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108340:	e045      	b.n	81083ce <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8108342:	6878      	ldr	r0, [r7, #4]
 8108344:	f000 f850 	bl	81083e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8108348:	e041      	b.n	81083ce <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 810834a:	687b      	ldr	r3, [r7, #4]
 810834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810834e:	2b00      	cmp	r3, #0
 8108350:	d039      	beq.n	81083c6 <I2C_ITError+0x17e>
 8108352:	68bb      	ldr	r3, [r7, #8]
 8108354:	2b12      	cmp	r3, #18
 8108356:	d002      	beq.n	810835e <I2C_ITError+0x116>
 8108358:	68bb      	ldr	r3, [r7, #8]
 810835a:	2b22      	cmp	r3, #34	; 0x22
 810835c:	d133      	bne.n	81083c6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 810835e:	687b      	ldr	r3, [r7, #4]
 8108360:	681b      	ldr	r3, [r3, #0]
 8108362:	681b      	ldr	r3, [r3, #0]
 8108364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8108368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810836c:	d107      	bne.n	810837e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	681a      	ldr	r2, [r3, #0]
 8108374:	687b      	ldr	r3, [r7, #4]
 8108376:	681b      	ldr	r3, [r3, #0]
 8108378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810837c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 810837e:	687b      	ldr	r3, [r7, #4]
 8108380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108382:	4618      	mov	r0, r3
 8108384:	f7fd fc34 	bl	8105bf0 <HAL_DMA_GetState>
 8108388:	4603      	mov	r3, r0
 810838a:	2b01      	cmp	r3, #1
 810838c:	d017      	beq.n	81083be <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 810838e:	687b      	ldr	r3, [r7, #4]
 8108390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108392:	4a14      	ldr	r2, [pc, #80]	; (81083e4 <I2C_ITError+0x19c>)
 8108394:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8108396:	687b      	ldr	r3, [r7, #4]
 8108398:	2200      	movs	r2, #0
 810839a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 810839e:	687b      	ldr	r3, [r7, #4]
 81083a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81083a2:	4618      	mov	r0, r3
 81083a4:	f7fc fab4 	bl	8104910 <HAL_DMA_Abort_IT>
 81083a8:	4603      	mov	r3, r0
 81083aa:	2b00      	cmp	r3, #0
 81083ac:	d011      	beq.n	81083d2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81083b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81083b4:	687a      	ldr	r2, [r7, #4]
 81083b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 81083b8:	4610      	mov	r0, r2
 81083ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81083bc:	e009      	b.n	81083d2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 81083be:	6878      	ldr	r0, [r7, #4]
 81083c0:	f000 f812 	bl	81083e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81083c4:	e005      	b.n	81083d2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 81083c6:	6878      	ldr	r0, [r7, #4]
 81083c8:	f000 f80e 	bl	81083e8 <I2C_TreatErrorCallback>
  }
}
 81083cc:	e002      	b.n	81083d4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 81083ce:	bf00      	nop
 81083d0:	e000      	b.n	81083d4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81083d2:	bf00      	nop
}
 81083d4:	bf00      	nop
 81083d6:	3710      	adds	r7, #16
 81083d8:	46bd      	mov	sp, r7
 81083da:	bd80      	pop	{r7, pc}
 81083dc:	ffff0000 	.word	0xffff0000
 81083e0:	081070d7 	.word	0x081070d7
 81083e4:	08108821 	.word	0x08108821

081083e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 81083e8:	b580      	push	{r7, lr}
 81083ea:	b082      	sub	sp, #8
 81083ec:	af00      	add	r7, sp, #0
 81083ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 81083f0:	687b      	ldr	r3, [r7, #4]
 81083f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81083f6:	b2db      	uxtb	r3, r3
 81083f8:	2b60      	cmp	r3, #96	; 0x60
 81083fa:	d10e      	bne.n	810841a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 81083fc:	687b      	ldr	r3, [r7, #4]
 81083fe:	2220      	movs	r2, #32
 8108400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8108404:	687b      	ldr	r3, [r7, #4]
 8108406:	2200      	movs	r2, #0
 8108408:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810840a:	687b      	ldr	r3, [r7, #4]
 810840c:	2200      	movs	r2, #0
 810840e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8108412:	6878      	ldr	r0, [r7, #4]
 8108414:	f7fe fe55 	bl	81070c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8108418:	e009      	b.n	810842e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 810841a:	687b      	ldr	r3, [r7, #4]
 810841c:	2200      	movs	r2, #0
 810841e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8108420:	687b      	ldr	r3, [r7, #4]
 8108422:	2200      	movs	r2, #0
 8108424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8108428:	6878      	ldr	r0, [r7, #4]
 810842a:	f7fe fe40 	bl	81070ae <HAL_I2C_ErrorCallback>
}
 810842e:	bf00      	nop
 8108430:	3708      	adds	r7, #8
 8108432:	46bd      	mov	sp, r7
 8108434:	bd80      	pop	{r7, pc}

08108436 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8108436:	b480      	push	{r7}
 8108438:	b083      	sub	sp, #12
 810843a:	af00      	add	r7, sp, #0
 810843c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810843e:	687b      	ldr	r3, [r7, #4]
 8108440:	681b      	ldr	r3, [r3, #0]
 8108442:	699b      	ldr	r3, [r3, #24]
 8108444:	f003 0302 	and.w	r3, r3, #2
 8108448:	2b02      	cmp	r3, #2
 810844a:	d103      	bne.n	8108454 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810844c:	687b      	ldr	r3, [r7, #4]
 810844e:	681b      	ldr	r3, [r3, #0]
 8108450:	2200      	movs	r2, #0
 8108452:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8108454:	687b      	ldr	r3, [r7, #4]
 8108456:	681b      	ldr	r3, [r3, #0]
 8108458:	699b      	ldr	r3, [r3, #24]
 810845a:	f003 0301 	and.w	r3, r3, #1
 810845e:	2b01      	cmp	r3, #1
 8108460:	d007      	beq.n	8108472 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8108462:	687b      	ldr	r3, [r7, #4]
 8108464:	681b      	ldr	r3, [r3, #0]
 8108466:	699a      	ldr	r2, [r3, #24]
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	681b      	ldr	r3, [r3, #0]
 810846c:	f042 0201 	orr.w	r2, r2, #1
 8108470:	619a      	str	r2, [r3, #24]
  }
}
 8108472:	bf00      	nop
 8108474:	370c      	adds	r7, #12
 8108476:	46bd      	mov	sp, r7
 8108478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810847c:	4770      	bx	lr

0810847e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 810847e:	b580      	push	{r7, lr}
 8108480:	b084      	sub	sp, #16
 8108482:	af00      	add	r7, sp, #0
 8108484:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8108486:	687b      	ldr	r3, [r7, #4]
 8108488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810848a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810848c:	68fb      	ldr	r3, [r7, #12]
 810848e:	681b      	ldr	r3, [r3, #0]
 8108490:	681a      	ldr	r2, [r3, #0]
 8108492:	68fb      	ldr	r3, [r7, #12]
 8108494:	681b      	ldr	r3, [r3, #0]
 8108496:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 810849a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 810849c:	68fb      	ldr	r3, [r7, #12]
 810849e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81084a0:	b29b      	uxth	r3, r3
 81084a2:	2b00      	cmp	r3, #0
 81084a4:	d104      	bne.n	81084b0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 81084a6:	2120      	movs	r1, #32
 81084a8:	68f8      	ldr	r0, [r7, #12]
 81084aa:	f000 fb27 	bl	8108afc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 81084ae:	e02d      	b.n	810850c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 81084b0:	68fb      	ldr	r3, [r7, #12]
 81084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81084b4:	68fa      	ldr	r2, [r7, #12]
 81084b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 81084b8:	441a      	add	r2, r3
 81084ba:	68fb      	ldr	r3, [r7, #12]
 81084bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81084be:	68fb      	ldr	r3, [r7, #12]
 81084c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81084c2:	b29b      	uxth	r3, r3
 81084c4:	2bff      	cmp	r3, #255	; 0xff
 81084c6:	d903      	bls.n	81084d0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81084c8:	68fb      	ldr	r3, [r7, #12]
 81084ca:	22ff      	movs	r2, #255	; 0xff
 81084cc:	851a      	strh	r2, [r3, #40]	; 0x28
 81084ce:	e004      	b.n	81084da <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 81084d0:	68fb      	ldr	r3, [r7, #12]
 81084d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81084d4:	b29a      	uxth	r2, r3
 81084d6:	68fb      	ldr	r3, [r7, #12]
 81084d8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 81084da:	68fb      	ldr	r3, [r7, #12]
 81084dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 81084de:	68fb      	ldr	r3, [r7, #12]
 81084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81084e2:	4619      	mov	r1, r3
 81084e4:	68fb      	ldr	r3, [r7, #12]
 81084e6:	681b      	ldr	r3, [r3, #0]
 81084e8:	3328      	adds	r3, #40	; 0x28
 81084ea:	461a      	mov	r2, r3
 81084ec:	68fb      	ldr	r3, [r7, #12]
 81084ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81084f0:	f7fb fc86 	bl	8103e00 <HAL_DMA_Start_IT>
 81084f4:	4603      	mov	r3, r0
 81084f6:	2b00      	cmp	r3, #0
 81084f8:	d004      	beq.n	8108504 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 81084fa:	2110      	movs	r1, #16
 81084fc:	68f8      	ldr	r0, [r7, #12]
 81084fe:	f7ff fea3 	bl	8108248 <I2C_ITError>
}
 8108502:	e003      	b.n	810850c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8108504:	2140      	movs	r1, #64	; 0x40
 8108506:	68f8      	ldr	r0, [r7, #12]
 8108508:	f000 faf8 	bl	8108afc <I2C_Enable_IRQ>
}
 810850c:	bf00      	nop
 810850e:	3710      	adds	r7, #16
 8108510:	46bd      	mov	sp, r7
 8108512:	bd80      	pop	{r7, pc}

08108514 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8108514:	b580      	push	{r7, lr}
 8108516:	b084      	sub	sp, #16
 8108518:	af00      	add	r7, sp, #0
 810851a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 810851c:	687b      	ldr	r3, [r7, #4]
 810851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108520:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8108522:	68fb      	ldr	r3, [r7, #12]
 8108524:	681b      	ldr	r3, [r3, #0]
 8108526:	681a      	ldr	r2, [r3, #0]
 8108528:	68fb      	ldr	r3, [r7, #12]
 810852a:	681b      	ldr	r3, [r3, #0]
 810852c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8108530:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8108532:	68fb      	ldr	r3, [r7, #12]
 8108534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108536:	b29b      	uxth	r3, r3
 8108538:	2b00      	cmp	r3, #0
 810853a:	d104      	bne.n	8108546 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 810853c:	2120      	movs	r1, #32
 810853e:	68f8      	ldr	r0, [r7, #12]
 8108540:	f000 fadc 	bl	8108afc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8108544:	e02d      	b.n	81085a2 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8108546:	68fb      	ldr	r3, [r7, #12]
 8108548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810854a:	68fa      	ldr	r2, [r7, #12]
 810854c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 810854e:	441a      	add	r2, r3
 8108550:	68fb      	ldr	r3, [r7, #12]
 8108552:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8108554:	68fb      	ldr	r3, [r7, #12]
 8108556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8108558:	b29b      	uxth	r3, r3
 810855a:	2bff      	cmp	r3, #255	; 0xff
 810855c:	d903      	bls.n	8108566 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810855e:	68fb      	ldr	r3, [r7, #12]
 8108560:	22ff      	movs	r2, #255	; 0xff
 8108562:	851a      	strh	r2, [r3, #40]	; 0x28
 8108564:	e004      	b.n	8108570 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8108566:	68fb      	ldr	r3, [r7, #12]
 8108568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810856a:	b29a      	uxth	r2, r3
 810856c:	68fb      	ldr	r3, [r7, #12]
 810856e:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8108570:	68fb      	ldr	r3, [r7, #12]
 8108572:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8108574:	68fb      	ldr	r3, [r7, #12]
 8108576:	681b      	ldr	r3, [r3, #0]
 8108578:	3324      	adds	r3, #36	; 0x24
 810857a:	4619      	mov	r1, r3
 810857c:	68fb      	ldr	r3, [r7, #12]
 810857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108580:	461a      	mov	r2, r3
 8108582:	68fb      	ldr	r3, [r7, #12]
 8108584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8108586:	f7fb fc3b 	bl	8103e00 <HAL_DMA_Start_IT>
 810858a:	4603      	mov	r3, r0
 810858c:	2b00      	cmp	r3, #0
 810858e:	d004      	beq.n	810859a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8108590:	2110      	movs	r1, #16
 8108592:	68f8      	ldr	r0, [r7, #12]
 8108594:	f7ff fe58 	bl	8108248 <I2C_ITError>
}
 8108598:	e003      	b.n	81085a2 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 810859a:	2140      	movs	r1, #64	; 0x40
 810859c:	68f8      	ldr	r0, [r7, #12]
 810859e:	f000 faad 	bl	8108afc <I2C_Enable_IRQ>
}
 81085a2:	bf00      	nop
 81085a4:	3710      	adds	r7, #16
 81085a6:	46bd      	mov	sp, r7
 81085a8:	bd80      	pop	{r7, pc}
	...

081085ac <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 81085ac:	b580      	push	{r7, lr}
 81085ae:	b084      	sub	sp, #16
 81085b0:	af00      	add	r7, sp, #0
 81085b2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 81085b4:	2300      	movs	r3, #0
 81085b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 81085b8:	687b      	ldr	r3, [r7, #4]
 81085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085bc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 81085be:	68bb      	ldr	r3, [r7, #8]
 81085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085c2:	2b00      	cmp	r3, #0
 81085c4:	d076      	beq.n	81086b4 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 81085c6:	68bb      	ldr	r3, [r7, #8]
 81085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085ca:	681b      	ldr	r3, [r3, #0]
 81085cc:	4a71      	ldr	r2, [pc, #452]	; (8108794 <I2C_DMAError+0x1e8>)
 81085ce:	4293      	cmp	r3, r2
 81085d0:	d059      	beq.n	8108686 <I2C_DMAError+0xda>
 81085d2:	68bb      	ldr	r3, [r7, #8]
 81085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085d6:	681b      	ldr	r3, [r3, #0]
 81085d8:	4a6f      	ldr	r2, [pc, #444]	; (8108798 <I2C_DMAError+0x1ec>)
 81085da:	4293      	cmp	r3, r2
 81085dc:	d053      	beq.n	8108686 <I2C_DMAError+0xda>
 81085de:	68bb      	ldr	r3, [r7, #8]
 81085e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085e2:	681b      	ldr	r3, [r3, #0]
 81085e4:	4a6d      	ldr	r2, [pc, #436]	; (810879c <I2C_DMAError+0x1f0>)
 81085e6:	4293      	cmp	r3, r2
 81085e8:	d04d      	beq.n	8108686 <I2C_DMAError+0xda>
 81085ea:	68bb      	ldr	r3, [r7, #8]
 81085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085ee:	681b      	ldr	r3, [r3, #0]
 81085f0:	4a6b      	ldr	r2, [pc, #428]	; (81087a0 <I2C_DMAError+0x1f4>)
 81085f2:	4293      	cmp	r3, r2
 81085f4:	d047      	beq.n	8108686 <I2C_DMAError+0xda>
 81085f6:	68bb      	ldr	r3, [r7, #8]
 81085f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81085fa:	681b      	ldr	r3, [r3, #0]
 81085fc:	4a69      	ldr	r2, [pc, #420]	; (81087a4 <I2C_DMAError+0x1f8>)
 81085fe:	4293      	cmp	r3, r2
 8108600:	d041      	beq.n	8108686 <I2C_DMAError+0xda>
 8108602:	68bb      	ldr	r3, [r7, #8]
 8108604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108606:	681b      	ldr	r3, [r3, #0]
 8108608:	4a67      	ldr	r2, [pc, #412]	; (81087a8 <I2C_DMAError+0x1fc>)
 810860a:	4293      	cmp	r3, r2
 810860c:	d03b      	beq.n	8108686 <I2C_DMAError+0xda>
 810860e:	68bb      	ldr	r3, [r7, #8]
 8108610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108612:	681b      	ldr	r3, [r3, #0]
 8108614:	4a65      	ldr	r2, [pc, #404]	; (81087ac <I2C_DMAError+0x200>)
 8108616:	4293      	cmp	r3, r2
 8108618:	d035      	beq.n	8108686 <I2C_DMAError+0xda>
 810861a:	68bb      	ldr	r3, [r7, #8]
 810861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810861e:	681b      	ldr	r3, [r3, #0]
 8108620:	4a63      	ldr	r2, [pc, #396]	; (81087b0 <I2C_DMAError+0x204>)
 8108622:	4293      	cmp	r3, r2
 8108624:	d02f      	beq.n	8108686 <I2C_DMAError+0xda>
 8108626:	68bb      	ldr	r3, [r7, #8]
 8108628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810862a:	681b      	ldr	r3, [r3, #0]
 810862c:	4a61      	ldr	r2, [pc, #388]	; (81087b4 <I2C_DMAError+0x208>)
 810862e:	4293      	cmp	r3, r2
 8108630:	d029      	beq.n	8108686 <I2C_DMAError+0xda>
 8108632:	68bb      	ldr	r3, [r7, #8]
 8108634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108636:	681b      	ldr	r3, [r3, #0]
 8108638:	4a5f      	ldr	r2, [pc, #380]	; (81087b8 <I2C_DMAError+0x20c>)
 810863a:	4293      	cmp	r3, r2
 810863c:	d023      	beq.n	8108686 <I2C_DMAError+0xda>
 810863e:	68bb      	ldr	r3, [r7, #8]
 8108640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108642:	681b      	ldr	r3, [r3, #0]
 8108644:	4a5d      	ldr	r2, [pc, #372]	; (81087bc <I2C_DMAError+0x210>)
 8108646:	4293      	cmp	r3, r2
 8108648:	d01d      	beq.n	8108686 <I2C_DMAError+0xda>
 810864a:	68bb      	ldr	r3, [r7, #8]
 810864c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810864e:	681b      	ldr	r3, [r3, #0]
 8108650:	4a5b      	ldr	r2, [pc, #364]	; (81087c0 <I2C_DMAError+0x214>)
 8108652:	4293      	cmp	r3, r2
 8108654:	d017      	beq.n	8108686 <I2C_DMAError+0xda>
 8108656:	68bb      	ldr	r3, [r7, #8]
 8108658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810865a:	681b      	ldr	r3, [r3, #0]
 810865c:	4a59      	ldr	r2, [pc, #356]	; (81087c4 <I2C_DMAError+0x218>)
 810865e:	4293      	cmp	r3, r2
 8108660:	d011      	beq.n	8108686 <I2C_DMAError+0xda>
 8108662:	68bb      	ldr	r3, [r7, #8]
 8108664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108666:	681b      	ldr	r3, [r3, #0]
 8108668:	4a57      	ldr	r2, [pc, #348]	; (81087c8 <I2C_DMAError+0x21c>)
 810866a:	4293      	cmp	r3, r2
 810866c:	d00b      	beq.n	8108686 <I2C_DMAError+0xda>
 810866e:	68bb      	ldr	r3, [r7, #8]
 8108670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108672:	681b      	ldr	r3, [r3, #0]
 8108674:	4a55      	ldr	r2, [pc, #340]	; (81087cc <I2C_DMAError+0x220>)
 8108676:	4293      	cmp	r3, r2
 8108678:	d005      	beq.n	8108686 <I2C_DMAError+0xda>
 810867a:	68bb      	ldr	r3, [r7, #8]
 810867c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810867e:	681b      	ldr	r3, [r3, #0]
 8108680:	4a53      	ldr	r2, [pc, #332]	; (81087d0 <I2C_DMAError+0x224>)
 8108682:	4293      	cmp	r3, r2
 8108684:	d109      	bne.n	810869a <I2C_DMAError+0xee>
 8108686:	68bb      	ldr	r3, [r7, #8]
 8108688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810868a:	681b      	ldr	r3, [r3, #0]
 810868c:	685b      	ldr	r3, [r3, #4]
 810868e:	2b00      	cmp	r3, #0
 8108690:	bf0c      	ite	eq
 8108692:	2301      	moveq	r3, #1
 8108694:	2300      	movne	r3, #0
 8108696:	b2db      	uxtb	r3, r3
 8108698:	e008      	b.n	81086ac <I2C_DMAError+0x100>
 810869a:	68bb      	ldr	r3, [r7, #8]
 810869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810869e:	681b      	ldr	r3, [r3, #0]
 81086a0:	685b      	ldr	r3, [r3, #4]
 81086a2:	2b00      	cmp	r3, #0
 81086a4:	bf0c      	ite	eq
 81086a6:	2301      	moveq	r3, #1
 81086a8:	2300      	movne	r3, #0
 81086aa:	b2db      	uxtb	r3, r3
 81086ac:	2b00      	cmp	r3, #0
 81086ae:	d001      	beq.n	81086b4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 81086b0:	2301      	movs	r3, #1
 81086b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 81086b4:	68bb      	ldr	r3, [r7, #8]
 81086b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086b8:	2b00      	cmp	r3, #0
 81086ba:	f000 8098 	beq.w	81087ee <I2C_DMAError+0x242>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 81086be:	68bb      	ldr	r3, [r7, #8]
 81086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086c2:	681b      	ldr	r3, [r3, #0]
 81086c4:	4a33      	ldr	r2, [pc, #204]	; (8108794 <I2C_DMAError+0x1e8>)
 81086c6:	4293      	cmp	r3, r2
 81086c8:	d059      	beq.n	810877e <I2C_DMAError+0x1d2>
 81086ca:	68bb      	ldr	r3, [r7, #8]
 81086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086ce:	681b      	ldr	r3, [r3, #0]
 81086d0:	4a31      	ldr	r2, [pc, #196]	; (8108798 <I2C_DMAError+0x1ec>)
 81086d2:	4293      	cmp	r3, r2
 81086d4:	d053      	beq.n	810877e <I2C_DMAError+0x1d2>
 81086d6:	68bb      	ldr	r3, [r7, #8]
 81086d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086da:	681b      	ldr	r3, [r3, #0]
 81086dc:	4a2f      	ldr	r2, [pc, #188]	; (810879c <I2C_DMAError+0x1f0>)
 81086de:	4293      	cmp	r3, r2
 81086e0:	d04d      	beq.n	810877e <I2C_DMAError+0x1d2>
 81086e2:	68bb      	ldr	r3, [r7, #8]
 81086e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086e6:	681b      	ldr	r3, [r3, #0]
 81086e8:	4a2d      	ldr	r2, [pc, #180]	; (81087a0 <I2C_DMAError+0x1f4>)
 81086ea:	4293      	cmp	r3, r2
 81086ec:	d047      	beq.n	810877e <I2C_DMAError+0x1d2>
 81086ee:	68bb      	ldr	r3, [r7, #8]
 81086f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086f2:	681b      	ldr	r3, [r3, #0]
 81086f4:	4a2b      	ldr	r2, [pc, #172]	; (81087a4 <I2C_DMAError+0x1f8>)
 81086f6:	4293      	cmp	r3, r2
 81086f8:	d041      	beq.n	810877e <I2C_DMAError+0x1d2>
 81086fa:	68bb      	ldr	r3, [r7, #8]
 81086fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086fe:	681b      	ldr	r3, [r3, #0]
 8108700:	4a29      	ldr	r2, [pc, #164]	; (81087a8 <I2C_DMAError+0x1fc>)
 8108702:	4293      	cmp	r3, r2
 8108704:	d03b      	beq.n	810877e <I2C_DMAError+0x1d2>
 8108706:	68bb      	ldr	r3, [r7, #8]
 8108708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810870a:	681b      	ldr	r3, [r3, #0]
 810870c:	4a27      	ldr	r2, [pc, #156]	; (81087ac <I2C_DMAError+0x200>)
 810870e:	4293      	cmp	r3, r2
 8108710:	d035      	beq.n	810877e <I2C_DMAError+0x1d2>
 8108712:	68bb      	ldr	r3, [r7, #8]
 8108714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108716:	681b      	ldr	r3, [r3, #0]
 8108718:	4a25      	ldr	r2, [pc, #148]	; (81087b0 <I2C_DMAError+0x204>)
 810871a:	4293      	cmp	r3, r2
 810871c:	d02f      	beq.n	810877e <I2C_DMAError+0x1d2>
 810871e:	68bb      	ldr	r3, [r7, #8]
 8108720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108722:	681b      	ldr	r3, [r3, #0]
 8108724:	4a23      	ldr	r2, [pc, #140]	; (81087b4 <I2C_DMAError+0x208>)
 8108726:	4293      	cmp	r3, r2
 8108728:	d029      	beq.n	810877e <I2C_DMAError+0x1d2>
 810872a:	68bb      	ldr	r3, [r7, #8]
 810872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810872e:	681b      	ldr	r3, [r3, #0]
 8108730:	4a21      	ldr	r2, [pc, #132]	; (81087b8 <I2C_DMAError+0x20c>)
 8108732:	4293      	cmp	r3, r2
 8108734:	d023      	beq.n	810877e <I2C_DMAError+0x1d2>
 8108736:	68bb      	ldr	r3, [r7, #8]
 8108738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810873a:	681b      	ldr	r3, [r3, #0]
 810873c:	4a1f      	ldr	r2, [pc, #124]	; (81087bc <I2C_DMAError+0x210>)
 810873e:	4293      	cmp	r3, r2
 8108740:	d01d      	beq.n	810877e <I2C_DMAError+0x1d2>
 8108742:	68bb      	ldr	r3, [r7, #8]
 8108744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108746:	681b      	ldr	r3, [r3, #0]
 8108748:	4a1d      	ldr	r2, [pc, #116]	; (81087c0 <I2C_DMAError+0x214>)
 810874a:	4293      	cmp	r3, r2
 810874c:	d017      	beq.n	810877e <I2C_DMAError+0x1d2>
 810874e:	68bb      	ldr	r3, [r7, #8]
 8108750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108752:	681b      	ldr	r3, [r3, #0]
 8108754:	4a1b      	ldr	r2, [pc, #108]	; (81087c4 <I2C_DMAError+0x218>)
 8108756:	4293      	cmp	r3, r2
 8108758:	d011      	beq.n	810877e <I2C_DMAError+0x1d2>
 810875a:	68bb      	ldr	r3, [r7, #8]
 810875c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810875e:	681b      	ldr	r3, [r3, #0]
 8108760:	4a19      	ldr	r2, [pc, #100]	; (81087c8 <I2C_DMAError+0x21c>)
 8108762:	4293      	cmp	r3, r2
 8108764:	d00b      	beq.n	810877e <I2C_DMAError+0x1d2>
 8108766:	68bb      	ldr	r3, [r7, #8]
 8108768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810876a:	681b      	ldr	r3, [r3, #0]
 810876c:	4a17      	ldr	r2, [pc, #92]	; (81087cc <I2C_DMAError+0x220>)
 810876e:	4293      	cmp	r3, r2
 8108770:	d005      	beq.n	810877e <I2C_DMAError+0x1d2>
 8108772:	68bb      	ldr	r3, [r7, #8]
 8108774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108776:	681b      	ldr	r3, [r3, #0]
 8108778:	4a15      	ldr	r2, [pc, #84]	; (81087d0 <I2C_DMAError+0x224>)
 810877a:	4293      	cmp	r3, r2
 810877c:	d12a      	bne.n	81087d4 <I2C_DMAError+0x228>
 810877e:	68bb      	ldr	r3, [r7, #8]
 8108780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	685b      	ldr	r3, [r3, #4]
 8108786:	2b00      	cmp	r3, #0
 8108788:	bf0c      	ite	eq
 810878a:	2301      	moveq	r3, #1
 810878c:	2300      	movne	r3, #0
 810878e:	b2db      	uxtb	r3, r3
 8108790:	e029      	b.n	81087e6 <I2C_DMAError+0x23a>
 8108792:	bf00      	nop
 8108794:	40020010 	.word	0x40020010
 8108798:	40020028 	.word	0x40020028
 810879c:	40020040 	.word	0x40020040
 81087a0:	40020058 	.word	0x40020058
 81087a4:	40020070 	.word	0x40020070
 81087a8:	40020088 	.word	0x40020088
 81087ac:	400200a0 	.word	0x400200a0
 81087b0:	400200b8 	.word	0x400200b8
 81087b4:	40020410 	.word	0x40020410
 81087b8:	40020428 	.word	0x40020428
 81087bc:	40020440 	.word	0x40020440
 81087c0:	40020458 	.word	0x40020458
 81087c4:	40020470 	.word	0x40020470
 81087c8:	40020488 	.word	0x40020488
 81087cc:	400204a0 	.word	0x400204a0
 81087d0:	400204b8 	.word	0x400204b8
 81087d4:	68bb      	ldr	r3, [r7, #8]
 81087d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81087d8:	681b      	ldr	r3, [r3, #0]
 81087da:	685b      	ldr	r3, [r3, #4]
 81087dc:	2b00      	cmp	r3, #0
 81087de:	bf0c      	ite	eq
 81087e0:	2301      	moveq	r3, #1
 81087e2:	2300      	movne	r3, #0
 81087e4:	b2db      	uxtb	r3, r3
 81087e6:	2b00      	cmp	r3, #0
 81087e8:	d001      	beq.n	81087ee <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 81087ea:	2301      	movs	r3, #1
 81087ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 81087ee:	6878      	ldr	r0, [r7, #4]
 81087f0:	f7fd fa0c 	bl	8105c0c <HAL_DMA_GetError>
 81087f4:	4603      	mov	r3, r0
 81087f6:	2b02      	cmp	r3, #2
 81087f8:	d00e      	beq.n	8108818 <I2C_DMAError+0x26c>
 81087fa:	68fb      	ldr	r3, [r7, #12]
 81087fc:	2b00      	cmp	r3, #0
 81087fe:	d00b      	beq.n	8108818 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8108800:	68bb      	ldr	r3, [r7, #8]
 8108802:	681b      	ldr	r3, [r3, #0]
 8108804:	685a      	ldr	r2, [r3, #4]
 8108806:	68bb      	ldr	r3, [r7, #8]
 8108808:	681b      	ldr	r3, [r3, #0]
 810880a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810880e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8108810:	2110      	movs	r1, #16
 8108812:	68b8      	ldr	r0, [r7, #8]
 8108814:	f7ff fd18 	bl	8108248 <I2C_ITError>
  }
}
 8108818:	bf00      	nop
 810881a:	3710      	adds	r7, #16
 810881c:	46bd      	mov	sp, r7
 810881e:	bd80      	pop	{r7, pc}

08108820 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8108820:	b580      	push	{r7, lr}
 8108822:	b084      	sub	sp, #16
 8108824:	af00      	add	r7, sp, #0
 8108826:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8108828:	687b      	ldr	r3, [r7, #4]
 810882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810882c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 810882e:	68fb      	ldr	r3, [r7, #12]
 8108830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108832:	2b00      	cmp	r3, #0
 8108834:	d003      	beq.n	810883e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8108836:	68fb      	ldr	r3, [r7, #12]
 8108838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810883a:	2200      	movs	r2, #0
 810883c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 810883e:	68fb      	ldr	r3, [r7, #12]
 8108840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108842:	2b00      	cmp	r3, #0
 8108844:	d003      	beq.n	810884e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8108846:	68fb      	ldr	r3, [r7, #12]
 8108848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810884a:	2200      	movs	r2, #0
 810884c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 810884e:	68f8      	ldr	r0, [r7, #12]
 8108850:	f7ff fdca 	bl	81083e8 <I2C_TreatErrorCallback>
}
 8108854:	bf00      	nop
 8108856:	3710      	adds	r7, #16
 8108858:	46bd      	mov	sp, r7
 810885a:	bd80      	pop	{r7, pc}

0810885c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 810885c:	b580      	push	{r7, lr}
 810885e:	b084      	sub	sp, #16
 8108860:	af00      	add	r7, sp, #0
 8108862:	60f8      	str	r0, [r7, #12]
 8108864:	60b9      	str	r1, [r7, #8]
 8108866:	603b      	str	r3, [r7, #0]
 8108868:	4613      	mov	r3, r2
 810886a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810886c:	e022      	b.n	81088b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810886e:	683b      	ldr	r3, [r7, #0]
 8108870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108874:	d01e      	beq.n	81088b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108876:	f7fa fb23 	bl	8102ec0 <HAL_GetTick>
 810887a:	4602      	mov	r2, r0
 810887c:	69bb      	ldr	r3, [r7, #24]
 810887e:	1ad3      	subs	r3, r2, r3
 8108880:	683a      	ldr	r2, [r7, #0]
 8108882:	429a      	cmp	r2, r3
 8108884:	d302      	bcc.n	810888c <I2C_WaitOnFlagUntilTimeout+0x30>
 8108886:	683b      	ldr	r3, [r7, #0]
 8108888:	2b00      	cmp	r3, #0
 810888a:	d113      	bne.n	81088b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810888c:	68fb      	ldr	r3, [r7, #12]
 810888e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108890:	f043 0220 	orr.w	r2, r3, #32
 8108894:	68fb      	ldr	r3, [r7, #12]
 8108896:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8108898:	68fb      	ldr	r3, [r7, #12]
 810889a:	2220      	movs	r2, #32
 810889c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81088a0:	68fb      	ldr	r3, [r7, #12]
 81088a2:	2200      	movs	r2, #0
 81088a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81088a8:	68fb      	ldr	r3, [r7, #12]
 81088aa:	2200      	movs	r2, #0
 81088ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 81088b0:	2301      	movs	r3, #1
 81088b2:	e00f      	b.n	81088d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81088b4:	68fb      	ldr	r3, [r7, #12]
 81088b6:	681b      	ldr	r3, [r3, #0]
 81088b8:	699a      	ldr	r2, [r3, #24]
 81088ba:	68bb      	ldr	r3, [r7, #8]
 81088bc:	4013      	ands	r3, r2
 81088be:	68ba      	ldr	r2, [r7, #8]
 81088c0:	429a      	cmp	r2, r3
 81088c2:	bf0c      	ite	eq
 81088c4:	2301      	moveq	r3, #1
 81088c6:	2300      	movne	r3, #0
 81088c8:	b2db      	uxtb	r3, r3
 81088ca:	461a      	mov	r2, r3
 81088cc:	79fb      	ldrb	r3, [r7, #7]
 81088ce:	429a      	cmp	r2, r3
 81088d0:	d0cd      	beq.n	810886e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81088d2:	2300      	movs	r3, #0
}
 81088d4:	4618      	mov	r0, r3
 81088d6:	3710      	adds	r7, #16
 81088d8:	46bd      	mov	sp, r7
 81088da:	bd80      	pop	{r7, pc}

081088dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81088dc:	b580      	push	{r7, lr}
 81088de:	b084      	sub	sp, #16
 81088e0:	af00      	add	r7, sp, #0
 81088e2:	60f8      	str	r0, [r7, #12]
 81088e4:	60b9      	str	r1, [r7, #8]
 81088e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81088e8:	e02c      	b.n	8108944 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81088ea:	687a      	ldr	r2, [r7, #4]
 81088ec:	68b9      	ldr	r1, [r7, #8]
 81088ee:	68f8      	ldr	r0, [r7, #12]
 81088f0:	f000 f870 	bl	81089d4 <I2C_IsAcknowledgeFailed>
 81088f4:	4603      	mov	r3, r0
 81088f6:	2b00      	cmp	r3, #0
 81088f8:	d001      	beq.n	81088fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81088fa:	2301      	movs	r3, #1
 81088fc:	e02a      	b.n	8108954 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81088fe:	68bb      	ldr	r3, [r7, #8]
 8108900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108904:	d01e      	beq.n	8108944 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108906:	f7fa fadb 	bl	8102ec0 <HAL_GetTick>
 810890a:	4602      	mov	r2, r0
 810890c:	687b      	ldr	r3, [r7, #4]
 810890e:	1ad3      	subs	r3, r2, r3
 8108910:	68ba      	ldr	r2, [r7, #8]
 8108912:	429a      	cmp	r2, r3
 8108914:	d302      	bcc.n	810891c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8108916:	68bb      	ldr	r3, [r7, #8]
 8108918:	2b00      	cmp	r3, #0
 810891a:	d113      	bne.n	8108944 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810891c:	68fb      	ldr	r3, [r7, #12]
 810891e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108920:	f043 0220 	orr.w	r2, r3, #32
 8108924:	68fb      	ldr	r3, [r7, #12]
 8108926:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8108928:	68fb      	ldr	r3, [r7, #12]
 810892a:	2220      	movs	r2, #32
 810892c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8108930:	68fb      	ldr	r3, [r7, #12]
 8108932:	2200      	movs	r2, #0
 8108934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8108938:	68fb      	ldr	r3, [r7, #12]
 810893a:	2200      	movs	r2, #0
 810893c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8108940:	2301      	movs	r3, #1
 8108942:	e007      	b.n	8108954 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8108944:	68fb      	ldr	r3, [r7, #12]
 8108946:	681b      	ldr	r3, [r3, #0]
 8108948:	699b      	ldr	r3, [r3, #24]
 810894a:	f003 0302 	and.w	r3, r3, #2
 810894e:	2b02      	cmp	r3, #2
 8108950:	d1cb      	bne.n	81088ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8108952:	2300      	movs	r3, #0
}
 8108954:	4618      	mov	r0, r3
 8108956:	3710      	adds	r7, #16
 8108958:	46bd      	mov	sp, r7
 810895a:	bd80      	pop	{r7, pc}

0810895c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810895c:	b580      	push	{r7, lr}
 810895e:	b084      	sub	sp, #16
 8108960:	af00      	add	r7, sp, #0
 8108962:	60f8      	str	r0, [r7, #12]
 8108964:	60b9      	str	r1, [r7, #8]
 8108966:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108968:	e028      	b.n	81089bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810896a:	687a      	ldr	r2, [r7, #4]
 810896c:	68b9      	ldr	r1, [r7, #8]
 810896e:	68f8      	ldr	r0, [r7, #12]
 8108970:	f000 f830 	bl	81089d4 <I2C_IsAcknowledgeFailed>
 8108974:	4603      	mov	r3, r0
 8108976:	2b00      	cmp	r3, #0
 8108978:	d001      	beq.n	810897e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810897a:	2301      	movs	r3, #1
 810897c:	e026      	b.n	81089cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810897e:	f7fa fa9f 	bl	8102ec0 <HAL_GetTick>
 8108982:	4602      	mov	r2, r0
 8108984:	687b      	ldr	r3, [r7, #4]
 8108986:	1ad3      	subs	r3, r2, r3
 8108988:	68ba      	ldr	r2, [r7, #8]
 810898a:	429a      	cmp	r2, r3
 810898c:	d302      	bcc.n	8108994 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810898e:	68bb      	ldr	r3, [r7, #8]
 8108990:	2b00      	cmp	r3, #0
 8108992:	d113      	bne.n	81089bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108994:	68fb      	ldr	r3, [r7, #12]
 8108996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108998:	f043 0220 	orr.w	r2, r3, #32
 810899c:	68fb      	ldr	r3, [r7, #12]
 810899e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 81089a0:	68fb      	ldr	r3, [r7, #12]
 81089a2:	2220      	movs	r2, #32
 81089a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81089a8:	68fb      	ldr	r3, [r7, #12]
 81089aa:	2200      	movs	r2, #0
 81089ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81089b0:	68fb      	ldr	r3, [r7, #12]
 81089b2:	2200      	movs	r2, #0
 81089b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 81089b8:	2301      	movs	r3, #1
 81089ba:	e007      	b.n	81089cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81089bc:	68fb      	ldr	r3, [r7, #12]
 81089be:	681b      	ldr	r3, [r3, #0]
 81089c0:	699b      	ldr	r3, [r3, #24]
 81089c2:	f003 0320 	and.w	r3, r3, #32
 81089c6:	2b20      	cmp	r3, #32
 81089c8:	d1cf      	bne.n	810896a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 81089ca:	2300      	movs	r3, #0
}
 81089cc:	4618      	mov	r0, r3
 81089ce:	3710      	adds	r7, #16
 81089d0:	46bd      	mov	sp, r7
 81089d2:	bd80      	pop	{r7, pc}

081089d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81089d4:	b580      	push	{r7, lr}
 81089d6:	b084      	sub	sp, #16
 81089d8:	af00      	add	r7, sp, #0
 81089da:	60f8      	str	r0, [r7, #12]
 81089dc:	60b9      	str	r1, [r7, #8]
 81089de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81089e0:	68fb      	ldr	r3, [r7, #12]
 81089e2:	681b      	ldr	r3, [r3, #0]
 81089e4:	699b      	ldr	r3, [r3, #24]
 81089e6:	f003 0310 	and.w	r3, r3, #16
 81089ea:	2b10      	cmp	r3, #16
 81089ec:	d151      	bne.n	8108a92 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81089ee:	e022      	b.n	8108a36 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81089f0:	68bb      	ldr	r3, [r7, #8]
 81089f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81089f6:	d01e      	beq.n	8108a36 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81089f8:	f7fa fa62 	bl	8102ec0 <HAL_GetTick>
 81089fc:	4602      	mov	r2, r0
 81089fe:	687b      	ldr	r3, [r7, #4]
 8108a00:	1ad3      	subs	r3, r2, r3
 8108a02:	68ba      	ldr	r2, [r7, #8]
 8108a04:	429a      	cmp	r2, r3
 8108a06:	d302      	bcc.n	8108a0e <I2C_IsAcknowledgeFailed+0x3a>
 8108a08:	68bb      	ldr	r3, [r7, #8]
 8108a0a:	2b00      	cmp	r3, #0
 8108a0c:	d113      	bne.n	8108a36 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8108a0e:	68fb      	ldr	r3, [r7, #12]
 8108a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108a12:	f043 0220 	orr.w	r2, r3, #32
 8108a16:	68fb      	ldr	r3, [r7, #12]
 8108a18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8108a1a:	68fb      	ldr	r3, [r7, #12]
 8108a1c:	2220      	movs	r2, #32
 8108a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8108a22:	68fb      	ldr	r3, [r7, #12]
 8108a24:	2200      	movs	r2, #0
 8108a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8108a2a:	68fb      	ldr	r3, [r7, #12]
 8108a2c:	2200      	movs	r2, #0
 8108a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8108a32:	2301      	movs	r3, #1
 8108a34:	e02e      	b.n	8108a94 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8108a36:	68fb      	ldr	r3, [r7, #12]
 8108a38:	681b      	ldr	r3, [r3, #0]
 8108a3a:	699b      	ldr	r3, [r3, #24]
 8108a3c:	f003 0320 	and.w	r3, r3, #32
 8108a40:	2b20      	cmp	r3, #32
 8108a42:	d1d5      	bne.n	81089f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8108a44:	68fb      	ldr	r3, [r7, #12]
 8108a46:	681b      	ldr	r3, [r3, #0]
 8108a48:	2210      	movs	r2, #16
 8108a4a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8108a4c:	68fb      	ldr	r3, [r7, #12]
 8108a4e:	681b      	ldr	r3, [r3, #0]
 8108a50:	2220      	movs	r2, #32
 8108a52:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8108a54:	68f8      	ldr	r0, [r7, #12]
 8108a56:	f7ff fcee 	bl	8108436 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8108a5a:	68fb      	ldr	r3, [r7, #12]
 8108a5c:	681b      	ldr	r3, [r3, #0]
 8108a5e:	6859      	ldr	r1, [r3, #4]
 8108a60:	68fb      	ldr	r3, [r7, #12]
 8108a62:	681a      	ldr	r2, [r3, #0]
 8108a64:	4b0d      	ldr	r3, [pc, #52]	; (8108a9c <I2C_IsAcknowledgeFailed+0xc8>)
 8108a66:	400b      	ands	r3, r1
 8108a68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8108a6a:	68fb      	ldr	r3, [r7, #12]
 8108a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108a6e:	f043 0204 	orr.w	r2, r3, #4
 8108a72:	68fb      	ldr	r3, [r7, #12]
 8108a74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8108a76:	68fb      	ldr	r3, [r7, #12]
 8108a78:	2220      	movs	r2, #32
 8108a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8108a7e:	68fb      	ldr	r3, [r7, #12]
 8108a80:	2200      	movs	r2, #0
 8108a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108a86:	68fb      	ldr	r3, [r7, #12]
 8108a88:	2200      	movs	r2, #0
 8108a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8108a8e:	2301      	movs	r3, #1
 8108a90:	e000      	b.n	8108a94 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8108a92:	2300      	movs	r3, #0
}
 8108a94:	4618      	mov	r0, r3
 8108a96:	3710      	adds	r7, #16
 8108a98:	46bd      	mov	sp, r7
 8108a9a:	bd80      	pop	{r7, pc}
 8108a9c:	fe00e800 	.word	0xfe00e800

08108aa0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8108aa0:	b480      	push	{r7}
 8108aa2:	b085      	sub	sp, #20
 8108aa4:	af00      	add	r7, sp, #0
 8108aa6:	60f8      	str	r0, [r7, #12]
 8108aa8:	607b      	str	r3, [r7, #4]
 8108aaa:	460b      	mov	r3, r1
 8108aac:	817b      	strh	r3, [r7, #10]
 8108aae:	4613      	mov	r3, r2
 8108ab0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8108ab2:	68fb      	ldr	r3, [r7, #12]
 8108ab4:	681b      	ldr	r3, [r3, #0]
 8108ab6:	685a      	ldr	r2, [r3, #4]
 8108ab8:	69bb      	ldr	r3, [r7, #24]
 8108aba:	0d5b      	lsrs	r3, r3, #21
 8108abc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8108ac0:	4b0d      	ldr	r3, [pc, #52]	; (8108af8 <I2C_TransferConfig+0x58>)
 8108ac2:	430b      	orrs	r3, r1
 8108ac4:	43db      	mvns	r3, r3
 8108ac6:	ea02 0103 	and.w	r1, r2, r3
 8108aca:	897b      	ldrh	r3, [r7, #10]
 8108acc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8108ad0:	7a7b      	ldrb	r3, [r7, #9]
 8108ad2:	041b      	lsls	r3, r3, #16
 8108ad4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8108ad8:	431a      	orrs	r2, r3
 8108ada:	687b      	ldr	r3, [r7, #4]
 8108adc:	431a      	orrs	r2, r3
 8108ade:	69bb      	ldr	r3, [r7, #24]
 8108ae0:	431a      	orrs	r2, r3
 8108ae2:	68fb      	ldr	r3, [r7, #12]
 8108ae4:	681b      	ldr	r3, [r3, #0]
 8108ae6:	430a      	orrs	r2, r1
 8108ae8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8108aea:	bf00      	nop
 8108aec:	3714      	adds	r7, #20
 8108aee:	46bd      	mov	sp, r7
 8108af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108af4:	4770      	bx	lr
 8108af6:	bf00      	nop
 8108af8:	03ff63ff 	.word	0x03ff63ff

08108afc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108afc:	b480      	push	{r7}
 8108afe:	b085      	sub	sp, #20
 8108b00:	af00      	add	r7, sp, #0
 8108b02:	6078      	str	r0, [r7, #4]
 8108b04:	460b      	mov	r3, r1
 8108b06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108b08:	2300      	movs	r3, #0
 8108b0a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8108b0c:	687b      	ldr	r3, [r7, #4]
 8108b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108b10:	4a2a      	ldr	r2, [pc, #168]	; (8108bbc <I2C_Enable_IRQ+0xc0>)
 8108b12:	4293      	cmp	r3, r2
 8108b14:	d004      	beq.n	8108b20 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8108b1a:	4a29      	ldr	r2, [pc, #164]	; (8108bc0 <I2C_Enable_IRQ+0xc4>)
 8108b1c:	4293      	cmp	r3, r2
 8108b1e:	d11d      	bne.n	8108b5c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108b24:	2b00      	cmp	r3, #0
 8108b26:	da03      	bge.n	8108b30 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108b28:	68fb      	ldr	r3, [r7, #12]
 8108b2a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8108b2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108b30:	887b      	ldrh	r3, [r7, #2]
 8108b32:	2b10      	cmp	r3, #16
 8108b34:	d103      	bne.n	8108b3e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108b36:	68fb      	ldr	r3, [r7, #12]
 8108b38:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8108b3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108b3e:	887b      	ldrh	r3, [r7, #2]
 8108b40:	2b20      	cmp	r3, #32
 8108b42:	d103      	bne.n	8108b4c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8108b44:	68fb      	ldr	r3, [r7, #12]
 8108b46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8108b4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108b4c:	887b      	ldrh	r3, [r7, #2]
 8108b4e:	2b40      	cmp	r3, #64	; 0x40
 8108b50:	d125      	bne.n	8108b9e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8108b52:	68fb      	ldr	r3, [r7, #12]
 8108b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108b58:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108b5a:	e020      	b.n	8108b9e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108b5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108b60:	2b00      	cmp	r3, #0
 8108b62:	da03      	bge.n	8108b6c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108b64:	68fb      	ldr	r3, [r7, #12]
 8108b66:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8108b6a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108b6c:	887b      	ldrh	r3, [r7, #2]
 8108b6e:	f003 0301 	and.w	r3, r3, #1
 8108b72:	2b00      	cmp	r3, #0
 8108b74:	d003      	beq.n	8108b7e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8108b76:	68fb      	ldr	r3, [r7, #12]
 8108b78:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8108b7c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108b7e:	887b      	ldrh	r3, [r7, #2]
 8108b80:	f003 0302 	and.w	r3, r3, #2
 8108b84:	2b00      	cmp	r3, #0
 8108b86:	d003      	beq.n	8108b90 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8108b88:	68fb      	ldr	r3, [r7, #12]
 8108b8a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8108b8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108b90:	887b      	ldrh	r3, [r7, #2]
 8108b92:	2b20      	cmp	r3, #32
 8108b94:	d103      	bne.n	8108b9e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8108b96:	68fb      	ldr	r3, [r7, #12]
 8108b98:	f043 0320 	orr.w	r3, r3, #32
 8108b9c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8108b9e:	687b      	ldr	r3, [r7, #4]
 8108ba0:	681b      	ldr	r3, [r3, #0]
 8108ba2:	6819      	ldr	r1, [r3, #0]
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	681b      	ldr	r3, [r3, #0]
 8108ba8:	68fa      	ldr	r2, [r7, #12]
 8108baa:	430a      	orrs	r2, r1
 8108bac:	601a      	str	r2, [r3, #0]
}
 8108bae:	bf00      	nop
 8108bb0:	3714      	adds	r7, #20
 8108bb2:	46bd      	mov	sp, r7
 8108bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bb8:	4770      	bx	lr
 8108bba:	bf00      	nop
 8108bbc:	081072dd 	.word	0x081072dd
 8108bc0:	081074c5 	.word	0x081074c5

08108bc4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8108bc4:	b480      	push	{r7}
 8108bc6:	b085      	sub	sp, #20
 8108bc8:	af00      	add	r7, sp, #0
 8108bca:	6078      	str	r0, [r7, #4]
 8108bcc:	460b      	mov	r3, r1
 8108bce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8108bd0:	2300      	movs	r3, #0
 8108bd2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8108bd4:	887b      	ldrh	r3, [r7, #2]
 8108bd6:	f003 0301 	and.w	r3, r3, #1
 8108bda:	2b00      	cmp	r3, #0
 8108bdc:	d00f      	beq.n	8108bfe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8108bde:	68fb      	ldr	r3, [r7, #12]
 8108be0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8108be4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108be6:	687b      	ldr	r3, [r7, #4]
 8108be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108bec:	b2db      	uxtb	r3, r3
 8108bee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108bf2:	2b28      	cmp	r3, #40	; 0x28
 8108bf4:	d003      	beq.n	8108bfe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108bf6:	68fb      	ldr	r3, [r7, #12]
 8108bf8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8108bfc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8108bfe:	887b      	ldrh	r3, [r7, #2]
 8108c00:	f003 0302 	and.w	r3, r3, #2
 8108c04:	2b00      	cmp	r3, #0
 8108c06:	d00f      	beq.n	8108c28 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8108c08:	68fb      	ldr	r3, [r7, #12]
 8108c0a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8108c0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8108c10:	687b      	ldr	r3, [r7, #4]
 8108c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108c16:	b2db      	uxtb	r3, r3
 8108c18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8108c1c:	2b28      	cmp	r3, #40	; 0x28
 8108c1e:	d003      	beq.n	8108c28 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108c20:	68fb      	ldr	r3, [r7, #12]
 8108c22:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8108c26:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8108c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8108c2c:	2b00      	cmp	r3, #0
 8108c2e:	da03      	bge.n	8108c38 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8108c30:	68fb      	ldr	r3, [r7, #12]
 8108c32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8108c36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8108c38:	887b      	ldrh	r3, [r7, #2]
 8108c3a:	2b10      	cmp	r3, #16
 8108c3c:	d103      	bne.n	8108c46 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8108c3e:	68fb      	ldr	r3, [r7, #12]
 8108c40:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8108c44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8108c46:	887b      	ldrh	r3, [r7, #2]
 8108c48:	2b20      	cmp	r3, #32
 8108c4a:	d103      	bne.n	8108c54 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8108c4c:	68fb      	ldr	r3, [r7, #12]
 8108c4e:	f043 0320 	orr.w	r3, r3, #32
 8108c52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8108c54:	887b      	ldrh	r3, [r7, #2]
 8108c56:	2b40      	cmp	r3, #64	; 0x40
 8108c58:	d103      	bne.n	8108c62 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8108c5a:	68fb      	ldr	r3, [r7, #12]
 8108c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108c60:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8108c62:	687b      	ldr	r3, [r7, #4]
 8108c64:	681b      	ldr	r3, [r3, #0]
 8108c66:	6819      	ldr	r1, [r3, #0]
 8108c68:	68fb      	ldr	r3, [r7, #12]
 8108c6a:	43da      	mvns	r2, r3
 8108c6c:	687b      	ldr	r3, [r7, #4]
 8108c6e:	681b      	ldr	r3, [r3, #0]
 8108c70:	400a      	ands	r2, r1
 8108c72:	601a      	str	r2, [r3, #0]
}
 8108c74:	bf00      	nop
 8108c76:	3714      	adds	r7, #20
 8108c78:	46bd      	mov	sp, r7
 8108c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c7e:	4770      	bx	lr

08108c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8108c80:	b480      	push	{r7}
 8108c82:	b083      	sub	sp, #12
 8108c84:	af00      	add	r7, sp, #0
 8108c86:	6078      	str	r0, [r7, #4]
 8108c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108c8a:	687b      	ldr	r3, [r7, #4]
 8108c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108c90:	b2db      	uxtb	r3, r3
 8108c92:	2b20      	cmp	r3, #32
 8108c94:	d138      	bne.n	8108d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108c96:	687b      	ldr	r3, [r7, #4]
 8108c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108c9c:	2b01      	cmp	r3, #1
 8108c9e:	d101      	bne.n	8108ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8108ca0:	2302      	movs	r3, #2
 8108ca2:	e032      	b.n	8108d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8108ca4:	687b      	ldr	r3, [r7, #4]
 8108ca6:	2201      	movs	r2, #1
 8108ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108cac:	687b      	ldr	r3, [r7, #4]
 8108cae:	2224      	movs	r2, #36	; 0x24
 8108cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108cb4:	687b      	ldr	r3, [r7, #4]
 8108cb6:	681b      	ldr	r3, [r3, #0]
 8108cb8:	681a      	ldr	r2, [r3, #0]
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	681b      	ldr	r3, [r3, #0]
 8108cbe:	f022 0201 	bic.w	r2, r2, #1
 8108cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8108cc4:	687b      	ldr	r3, [r7, #4]
 8108cc6:	681b      	ldr	r3, [r3, #0]
 8108cc8:	681a      	ldr	r2, [r3, #0]
 8108cca:	687b      	ldr	r3, [r7, #4]
 8108ccc:	681b      	ldr	r3, [r3, #0]
 8108cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8108cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8108cd4:	687b      	ldr	r3, [r7, #4]
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	6819      	ldr	r1, [r3, #0]
 8108cda:	687b      	ldr	r3, [r7, #4]
 8108cdc:	681b      	ldr	r3, [r3, #0]
 8108cde:	683a      	ldr	r2, [r7, #0]
 8108ce0:	430a      	orrs	r2, r1
 8108ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108ce4:	687b      	ldr	r3, [r7, #4]
 8108ce6:	681b      	ldr	r3, [r3, #0]
 8108ce8:	681a      	ldr	r2, [r3, #0]
 8108cea:	687b      	ldr	r3, [r7, #4]
 8108cec:	681b      	ldr	r3, [r3, #0]
 8108cee:	f042 0201 	orr.w	r2, r2, #1
 8108cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	2220      	movs	r2, #32
 8108cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108cfc:	687b      	ldr	r3, [r7, #4]
 8108cfe:	2200      	movs	r2, #0
 8108d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108d04:	2300      	movs	r3, #0
 8108d06:	e000      	b.n	8108d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8108d08:	2302      	movs	r3, #2
  }
}
 8108d0a:	4618      	mov	r0, r3
 8108d0c:	370c      	adds	r7, #12
 8108d0e:	46bd      	mov	sp, r7
 8108d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d14:	4770      	bx	lr

08108d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8108d16:	b480      	push	{r7}
 8108d18:	b085      	sub	sp, #20
 8108d1a:	af00      	add	r7, sp, #0
 8108d1c:	6078      	str	r0, [r7, #4]
 8108d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8108d20:	687b      	ldr	r3, [r7, #4]
 8108d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8108d26:	b2db      	uxtb	r3, r3
 8108d28:	2b20      	cmp	r3, #32
 8108d2a:	d139      	bne.n	8108da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8108d2c:	687b      	ldr	r3, [r7, #4]
 8108d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8108d32:	2b01      	cmp	r3, #1
 8108d34:	d101      	bne.n	8108d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8108d36:	2302      	movs	r3, #2
 8108d38:	e033      	b.n	8108da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8108d3a:	687b      	ldr	r3, [r7, #4]
 8108d3c:	2201      	movs	r2, #1
 8108d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8108d42:	687b      	ldr	r3, [r7, #4]
 8108d44:	2224      	movs	r2, #36	; 0x24
 8108d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8108d4a:	687b      	ldr	r3, [r7, #4]
 8108d4c:	681b      	ldr	r3, [r3, #0]
 8108d4e:	681a      	ldr	r2, [r3, #0]
 8108d50:	687b      	ldr	r3, [r7, #4]
 8108d52:	681b      	ldr	r3, [r3, #0]
 8108d54:	f022 0201 	bic.w	r2, r2, #1
 8108d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8108d5a:	687b      	ldr	r3, [r7, #4]
 8108d5c:	681b      	ldr	r3, [r3, #0]
 8108d5e:	681b      	ldr	r3, [r3, #0]
 8108d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8108d62:	68fb      	ldr	r3, [r7, #12]
 8108d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8108d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8108d6a:	683b      	ldr	r3, [r7, #0]
 8108d6c:	021b      	lsls	r3, r3, #8
 8108d6e:	68fa      	ldr	r2, [r7, #12]
 8108d70:	4313      	orrs	r3, r2
 8108d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8108d74:	687b      	ldr	r3, [r7, #4]
 8108d76:	681b      	ldr	r3, [r3, #0]
 8108d78:	68fa      	ldr	r2, [r7, #12]
 8108d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8108d7c:	687b      	ldr	r3, [r7, #4]
 8108d7e:	681b      	ldr	r3, [r3, #0]
 8108d80:	681a      	ldr	r2, [r3, #0]
 8108d82:	687b      	ldr	r3, [r7, #4]
 8108d84:	681b      	ldr	r3, [r3, #0]
 8108d86:	f042 0201 	orr.w	r2, r2, #1
 8108d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8108d8c:	687b      	ldr	r3, [r7, #4]
 8108d8e:	2220      	movs	r2, #32
 8108d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8108d94:	687b      	ldr	r3, [r7, #4]
 8108d96:	2200      	movs	r2, #0
 8108d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8108d9c:	2300      	movs	r3, #0
 8108d9e:	e000      	b.n	8108da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8108da0:	2302      	movs	r3, #2
  }
}
 8108da2:	4618      	mov	r0, r3
 8108da4:	3714      	adds	r7, #20
 8108da6:	46bd      	mov	sp, r7
 8108da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dac:	4770      	bx	lr
	...

08108db0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8108db0:	b580      	push	{r7, lr}
 8108db2:	b084      	sub	sp, #16
 8108db4:	af00      	add	r7, sp, #0
 8108db6:	60f8      	str	r0, [r7, #12]
 8108db8:	460b      	mov	r3, r1
 8108dba:	607a      	str	r2, [r7, #4]
 8108dbc:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8108dbe:	4b37      	ldr	r3, [pc, #220]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108dc0:	681b      	ldr	r3, [r3, #0]
 8108dc2:	f023 0201 	bic.w	r2, r3, #1
 8108dc6:	4935      	ldr	r1, [pc, #212]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108dc8:	68fb      	ldr	r3, [r7, #12]
 8108dca:	4313      	orrs	r3, r2
 8108dcc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8108dce:	687b      	ldr	r3, [r7, #4]
 8108dd0:	2b00      	cmp	r3, #0
 8108dd2:	d123      	bne.n	8108e1c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8108dd4:	f7fa fca6 	bl	8103724 <HAL_GetCurrentCPUID>
 8108dd8:	4603      	mov	r3, r0
 8108dda:	2b03      	cmp	r3, #3
 8108ddc:	d158      	bne.n	8108e90 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8108dde:	4b2f      	ldr	r3, [pc, #188]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108de0:	691b      	ldr	r3, [r3, #16]
 8108de2:	4a2e      	ldr	r2, [pc, #184]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108de4:	f023 0301 	bic.w	r3, r3, #1
 8108de8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108dea:	4b2d      	ldr	r3, [pc, #180]	; (8108ea0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108dec:	691b      	ldr	r3, [r3, #16]
 8108dee:	4a2c      	ldr	r2, [pc, #176]	; (8108ea0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108df0:	f043 0304 	orr.w	r3, r3, #4
 8108df4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8108df6:	f3bf 8f4f 	dsb	sy
}
 8108dfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108dfc:	f3bf 8f6f 	isb	sy
}
 8108e00:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108e02:	7afb      	ldrb	r3, [r7, #11]
 8108e04:	2b01      	cmp	r3, #1
 8108e06:	d101      	bne.n	8108e0c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108e08:	bf30      	wfi
 8108e0a:	e000      	b.n	8108e0e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108e0c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108e0e:	4b24      	ldr	r3, [pc, #144]	; (8108ea0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e10:	691b      	ldr	r3, [r3, #16]
 8108e12:	4a23      	ldr	r2, [pc, #140]	; (8108ea0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e14:	f023 0304 	bic.w	r3, r3, #4
 8108e18:	6113      	str	r3, [r2, #16]
 8108e1a:	e03c      	b.n	8108e96 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8108e1c:	687b      	ldr	r3, [r7, #4]
 8108e1e:	2b01      	cmp	r3, #1
 8108e20:	d123      	bne.n	8108e6a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8108e22:	f7fa fc7f 	bl	8103724 <HAL_GetCurrentCPUID>
 8108e26:	4603      	mov	r3, r0
 8108e28:	2b01      	cmp	r3, #1
 8108e2a:	d133      	bne.n	8108e94 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8108e2c:	4b1b      	ldr	r3, [pc, #108]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e2e:	695b      	ldr	r3, [r3, #20]
 8108e30:	4a1a      	ldr	r2, [pc, #104]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e32:	f023 0302 	bic.w	r3, r3, #2
 8108e36:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108e38:	4b19      	ldr	r3, [pc, #100]	; (8108ea0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e3a:	691b      	ldr	r3, [r3, #16]
 8108e3c:	4a18      	ldr	r2, [pc, #96]	; (8108ea0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e3e:	f043 0304 	orr.w	r3, r3, #4
 8108e42:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8108e44:	f3bf 8f4f 	dsb	sy
}
 8108e48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8108e4a:	f3bf 8f6f 	isb	sy
}
 8108e4e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8108e50:	7afb      	ldrb	r3, [r7, #11]
 8108e52:	2b01      	cmp	r3, #1
 8108e54:	d101      	bne.n	8108e5a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8108e56:	bf30      	wfi
 8108e58:	e000      	b.n	8108e5c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8108e5a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8108e5c:	4b10      	ldr	r3, [pc, #64]	; (8108ea0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e5e:	691b      	ldr	r3, [r3, #16]
 8108e60:	4a0f      	ldr	r2, [pc, #60]	; (8108ea0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8108e62:	f023 0304 	bic.w	r3, r3, #4
 8108e66:	6113      	str	r3, [r2, #16]
 8108e68:	e015      	b.n	8108e96 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108e6a:	f7fa fc5b 	bl	8103724 <HAL_GetCurrentCPUID>
 8108e6e:	4603      	mov	r3, r0
 8108e70:	2b03      	cmp	r3, #3
 8108e72:	d106      	bne.n	8108e82 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8108e74:	4b09      	ldr	r3, [pc, #36]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e76:	691b      	ldr	r3, [r3, #16]
 8108e78:	4a08      	ldr	r2, [pc, #32]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e7a:	f023 0304 	bic.w	r3, r3, #4
 8108e7e:	6113      	str	r3, [r2, #16]
 8108e80:	e009      	b.n	8108e96 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8108e82:	4b06      	ldr	r3, [pc, #24]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e84:	695b      	ldr	r3, [r3, #20]
 8108e86:	4a05      	ldr	r2, [pc, #20]	; (8108e9c <HAL_PWREx_EnterSTOPMode+0xec>)
 8108e88:	f023 0304 	bic.w	r3, r3, #4
 8108e8c:	6153      	str	r3, [r2, #20]
 8108e8e:	e002      	b.n	8108e96 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108e90:	bf00      	nop
 8108e92:	e000      	b.n	8108e96 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8108e94:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8108e96:	3710      	adds	r7, #16
 8108e98:	46bd      	mov	sp, r7
 8108e9a:	bd80      	pop	{r7, pc}
 8108e9c:	58024800 	.word	0x58024800
 8108ea0:	e000ed00 	.word	0xe000ed00

08108ea4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8108ea4:	b580      	push	{r7, lr}
 8108ea6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8108ea8:	f7fa fc3c 	bl	8103724 <HAL_GetCurrentCPUID>
 8108eac:	4603      	mov	r3, r0
 8108eae:	2b03      	cmp	r3, #3
 8108eb0:	d101      	bne.n	8108eb6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8108eb2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8108eb4:	e001      	b.n	8108eba <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8108eb6:	bf40      	sev
    __WFE ();
 8108eb8:	bf20      	wfe
}
 8108eba:	bf00      	nop
 8108ebc:	bd80      	pop	{r7, pc}
	...

08108ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8108ec0:	b480      	push	{r7}
 8108ec2:	b089      	sub	sp, #36	; 0x24
 8108ec4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8108ec6:	4bb3      	ldr	r3, [pc, #716]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108ec8:	691b      	ldr	r3, [r3, #16]
 8108eca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108ece:	2b18      	cmp	r3, #24
 8108ed0:	f200 8155 	bhi.w	810917e <HAL_RCC_GetSysClockFreq+0x2be>
 8108ed4:	a201      	add	r2, pc, #4	; (adr r2, 8108edc <HAL_RCC_GetSysClockFreq+0x1c>)
 8108ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108eda:	bf00      	nop
 8108edc:	08108f41 	.word	0x08108f41
 8108ee0:	0810917f 	.word	0x0810917f
 8108ee4:	0810917f 	.word	0x0810917f
 8108ee8:	0810917f 	.word	0x0810917f
 8108eec:	0810917f 	.word	0x0810917f
 8108ef0:	0810917f 	.word	0x0810917f
 8108ef4:	0810917f 	.word	0x0810917f
 8108ef8:	0810917f 	.word	0x0810917f
 8108efc:	08108f67 	.word	0x08108f67
 8108f00:	0810917f 	.word	0x0810917f
 8108f04:	0810917f 	.word	0x0810917f
 8108f08:	0810917f 	.word	0x0810917f
 8108f0c:	0810917f 	.word	0x0810917f
 8108f10:	0810917f 	.word	0x0810917f
 8108f14:	0810917f 	.word	0x0810917f
 8108f18:	0810917f 	.word	0x0810917f
 8108f1c:	08108f6d 	.word	0x08108f6d
 8108f20:	0810917f 	.word	0x0810917f
 8108f24:	0810917f 	.word	0x0810917f
 8108f28:	0810917f 	.word	0x0810917f
 8108f2c:	0810917f 	.word	0x0810917f
 8108f30:	0810917f 	.word	0x0810917f
 8108f34:	0810917f 	.word	0x0810917f
 8108f38:	0810917f 	.word	0x0810917f
 8108f3c:	08108f73 	.word	0x08108f73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108f40:	4b94      	ldr	r3, [pc, #592]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f42:	681b      	ldr	r3, [r3, #0]
 8108f44:	f003 0320 	and.w	r3, r3, #32
 8108f48:	2b00      	cmp	r3, #0
 8108f4a:	d009      	beq.n	8108f60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108f4c:	4b91      	ldr	r3, [pc, #580]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f4e:	681b      	ldr	r3, [r3, #0]
 8108f50:	08db      	lsrs	r3, r3, #3
 8108f52:	f003 0303 	and.w	r3, r3, #3
 8108f56:	4a90      	ldr	r2, [pc, #576]	; (8109198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108f58:	fa22 f303 	lsr.w	r3, r2, r3
 8108f5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8108f5e:	e111      	b.n	8109184 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8108f60:	4b8d      	ldr	r3, [pc, #564]	; (8109198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108f62:	61bb      	str	r3, [r7, #24]
    break;
 8108f64:	e10e      	b.n	8109184 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8108f66:	4b8d      	ldr	r3, [pc, #564]	; (810919c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8108f68:	61bb      	str	r3, [r7, #24]
    break;
 8108f6a:	e10b      	b.n	8109184 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8108f6c:	4b8c      	ldr	r3, [pc, #560]	; (81091a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8108f6e:	61bb      	str	r3, [r7, #24]
    break;
 8108f70:	e108      	b.n	8109184 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108f72:	4b88      	ldr	r3, [pc, #544]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f76:	f003 0303 	and.w	r3, r3, #3
 8108f7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8108f7c:	4b85      	ldr	r3, [pc, #532]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f80:	091b      	lsrs	r3, r3, #4
 8108f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108f86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8108f88:	4b82      	ldr	r3, [pc, #520]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108f8c:	f003 0301 	and.w	r3, r3, #1
 8108f90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8108f92:	4b80      	ldr	r3, [pc, #512]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f96:	08db      	lsrs	r3, r3, #3
 8108f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108f9c:	68fa      	ldr	r2, [r7, #12]
 8108f9e:	fb02 f303 	mul.w	r3, r2, r3
 8108fa2:	ee07 3a90 	vmov	s15, r3
 8108fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108faa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8108fae:	693b      	ldr	r3, [r7, #16]
 8108fb0:	2b00      	cmp	r3, #0
 8108fb2:	f000 80e1 	beq.w	8109178 <HAL_RCC_GetSysClockFreq+0x2b8>
 8108fb6:	697b      	ldr	r3, [r7, #20]
 8108fb8:	2b02      	cmp	r3, #2
 8108fba:	f000 8083 	beq.w	81090c4 <HAL_RCC_GetSysClockFreq+0x204>
 8108fbe:	697b      	ldr	r3, [r7, #20]
 8108fc0:	2b02      	cmp	r3, #2
 8108fc2:	f200 80a1 	bhi.w	8109108 <HAL_RCC_GetSysClockFreq+0x248>
 8108fc6:	697b      	ldr	r3, [r7, #20]
 8108fc8:	2b00      	cmp	r3, #0
 8108fca:	d003      	beq.n	8108fd4 <HAL_RCC_GetSysClockFreq+0x114>
 8108fcc:	697b      	ldr	r3, [r7, #20]
 8108fce:	2b01      	cmp	r3, #1
 8108fd0:	d056      	beq.n	8109080 <HAL_RCC_GetSysClockFreq+0x1c0>
 8108fd2:	e099      	b.n	8109108 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108fd4:	4b6f      	ldr	r3, [pc, #444]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108fd6:	681b      	ldr	r3, [r3, #0]
 8108fd8:	f003 0320 	and.w	r3, r3, #32
 8108fdc:	2b00      	cmp	r3, #0
 8108fde:	d02d      	beq.n	810903c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108fe0:	4b6c      	ldr	r3, [pc, #432]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8108fe2:	681b      	ldr	r3, [r3, #0]
 8108fe4:	08db      	lsrs	r3, r3, #3
 8108fe6:	f003 0303 	and.w	r3, r3, #3
 8108fea:	4a6b      	ldr	r2, [pc, #428]	; (8109198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8108fec:	fa22 f303 	lsr.w	r3, r2, r3
 8108ff0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	ee07 3a90 	vmov	s15, r3
 8108ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108ffc:	693b      	ldr	r3, [r7, #16]
 8108ffe:	ee07 3a90 	vmov	s15, r3
 8109002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810900a:	4b62      	ldr	r3, [pc, #392]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810900c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810900e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109012:	ee07 3a90 	vmov	s15, r3
 8109016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810901a:	ed97 6a02 	vldr	s12, [r7, #8]
 810901e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810902a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810902e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109036:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810903a:	e087      	b.n	810914c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810903c:	693b      	ldr	r3, [r7, #16]
 810903e:	ee07 3a90 	vmov	s15, r3
 8109042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109046:	eddf 6a58 	vldr	s13, [pc, #352]	; 81091a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810904e:	4b51      	ldr	r3, [pc, #324]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109056:	ee07 3a90 	vmov	s15, r3
 810905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810905e:	ed97 6a02 	vldr	s12, [r7, #8]
 8109062:	eddf 5a50 	vldr	s11, [pc, #320]	; 81091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810906a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810906e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109076:	ee67 7a27 	vmul.f32	s15, s14, s15
 810907a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810907e:	e065      	b.n	810914c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109080:	693b      	ldr	r3, [r7, #16]
 8109082:	ee07 3a90 	vmov	s15, r3
 8109086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810908a:	eddf 6a48 	vldr	s13, [pc, #288]	; 81091ac <HAL_RCC_GetSysClockFreq+0x2ec>
 810908e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109092:	4b40      	ldr	r3, [pc, #256]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810909a:	ee07 3a90 	vmov	s15, r3
 810909e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81090a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81090a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81090aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81090ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81090b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81090b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81090be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81090c2:	e043      	b.n	810914c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81090c4:	693b      	ldr	r3, [r7, #16]
 81090c6:	ee07 3a90 	vmov	s15, r3
 81090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81090ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 81091b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81090d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81090d6:	4b2f      	ldr	r3, [pc, #188]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81090d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81090de:	ee07 3a90 	vmov	s15, r3
 81090e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81090e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81090ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81090ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81090f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81090f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81090fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81090fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109106:	e021      	b.n	810914c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8109108:	693b      	ldr	r3, [r7, #16]
 810910a:	ee07 3a90 	vmov	s15, r3
 810910e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109112:	eddf 6a26 	vldr	s13, [pc, #152]	; 81091ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8109116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810911a:	4b1e      	ldr	r3, [pc, #120]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810911c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810911e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109122:	ee07 3a90 	vmov	s15, r3
 8109126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810912a:	ed97 6a02 	vldr	s12, [r7, #8]
 810912e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810913a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810913e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810914a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810914c:	4b11      	ldr	r3, [pc, #68]	; (8109194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810914e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109150:	0a5b      	lsrs	r3, r3, #9
 8109152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109156:	3301      	adds	r3, #1
 8109158:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810915a:	683b      	ldr	r3, [r7, #0]
 810915c:	ee07 3a90 	vmov	s15, r3
 8109160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8109164:	edd7 6a07 	vldr	s13, [r7, #28]
 8109168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810916c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109170:	ee17 3a90 	vmov	r3, s15
 8109174:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8109176:	e005      	b.n	8109184 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8109178:	2300      	movs	r3, #0
 810917a:	61bb      	str	r3, [r7, #24]
    break;
 810917c:	e002      	b.n	8109184 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810917e:	4b07      	ldr	r3, [pc, #28]	; (810919c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109180:	61bb      	str	r3, [r7, #24]
    break;
 8109182:	bf00      	nop
  }

  return sysclockfreq;
 8109184:	69bb      	ldr	r3, [r7, #24]
}
 8109186:	4618      	mov	r0, r3
 8109188:	3724      	adds	r7, #36	; 0x24
 810918a:	46bd      	mov	sp, r7
 810918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109190:	4770      	bx	lr
 8109192:	bf00      	nop
 8109194:	58024400 	.word	0x58024400
 8109198:	03d09000 	.word	0x03d09000
 810919c:	003d0900 	.word	0x003d0900
 81091a0:	00f42400 	.word	0x00f42400
 81091a4:	46000000 	.word	0x46000000
 81091a8:	4c742400 	.word	0x4c742400
 81091ac:	4a742400 	.word	0x4a742400
 81091b0:	4b742400 	.word	0x4b742400

081091b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81091b4:	b580      	push	{r7, lr}
 81091b6:	b082      	sub	sp, #8
 81091b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81091ba:	f7ff fe81 	bl	8108ec0 <HAL_RCC_GetSysClockFreq>
 81091be:	4602      	mov	r2, r0
 81091c0:	4b11      	ldr	r3, [pc, #68]	; (8109208 <HAL_RCC_GetHCLKFreq+0x54>)
 81091c2:	699b      	ldr	r3, [r3, #24]
 81091c4:	0a1b      	lsrs	r3, r3, #8
 81091c6:	f003 030f 	and.w	r3, r3, #15
 81091ca:	4910      	ldr	r1, [pc, #64]	; (810920c <HAL_RCC_GetHCLKFreq+0x58>)
 81091cc:	5ccb      	ldrb	r3, [r1, r3]
 81091ce:	f003 031f 	and.w	r3, r3, #31
 81091d2:	fa22 f303 	lsr.w	r3, r2, r3
 81091d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81091d8:	4b0b      	ldr	r3, [pc, #44]	; (8109208 <HAL_RCC_GetHCLKFreq+0x54>)
 81091da:	699b      	ldr	r3, [r3, #24]
 81091dc:	f003 030f 	and.w	r3, r3, #15
 81091e0:	4a0a      	ldr	r2, [pc, #40]	; (810920c <HAL_RCC_GetHCLKFreq+0x58>)
 81091e2:	5cd3      	ldrb	r3, [r2, r3]
 81091e4:	f003 031f 	and.w	r3, r3, #31
 81091e8:	687a      	ldr	r2, [r7, #4]
 81091ea:	fa22 f303 	lsr.w	r3, r2, r3
 81091ee:	4a08      	ldr	r2, [pc, #32]	; (8109210 <HAL_RCC_GetHCLKFreq+0x5c>)
 81091f0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81091f2:	4b07      	ldr	r3, [pc, #28]	; (8109210 <HAL_RCC_GetHCLKFreq+0x5c>)
 81091f4:	681b      	ldr	r3, [r3, #0]
 81091f6:	4a07      	ldr	r2, [pc, #28]	; (8109214 <HAL_RCC_GetHCLKFreq+0x60>)
 81091f8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81091fa:	4b05      	ldr	r3, [pc, #20]	; (8109210 <HAL_RCC_GetHCLKFreq+0x5c>)
 81091fc:	681b      	ldr	r3, [r3, #0]
}
 81091fe:	4618      	mov	r0, r3
 8109200:	3708      	adds	r7, #8
 8109202:	46bd      	mov	sp, r7
 8109204:	bd80      	pop	{r7, pc}
 8109206:	bf00      	nop
 8109208:	58024400 	.word	0x58024400
 810920c:	0810e918 	.word	0x0810e918
 8109210:	10000004 	.word	0x10000004
 8109214:	10000000 	.word	0x10000000

08109218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8109218:	b580      	push	{r7, lr}
 810921a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810921c:	f7ff ffca 	bl	81091b4 <HAL_RCC_GetHCLKFreq>
 8109220:	4602      	mov	r2, r0
 8109222:	4b06      	ldr	r3, [pc, #24]	; (810923c <HAL_RCC_GetPCLK1Freq+0x24>)
 8109224:	69db      	ldr	r3, [r3, #28]
 8109226:	091b      	lsrs	r3, r3, #4
 8109228:	f003 0307 	and.w	r3, r3, #7
 810922c:	4904      	ldr	r1, [pc, #16]	; (8109240 <HAL_RCC_GetPCLK1Freq+0x28>)
 810922e:	5ccb      	ldrb	r3, [r1, r3]
 8109230:	f003 031f 	and.w	r3, r3, #31
 8109234:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8109238:	4618      	mov	r0, r3
 810923a:	bd80      	pop	{r7, pc}
 810923c:	58024400 	.word	0x58024400
 8109240:	0810e918 	.word	0x0810e918

08109244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8109244:	b580      	push	{r7, lr}
 8109246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8109248:	f7ff ffb4 	bl	81091b4 <HAL_RCC_GetHCLKFreq>
 810924c:	4602      	mov	r2, r0
 810924e:	4b06      	ldr	r3, [pc, #24]	; (8109268 <HAL_RCC_GetPCLK2Freq+0x24>)
 8109250:	69db      	ldr	r3, [r3, #28]
 8109252:	0a1b      	lsrs	r3, r3, #8
 8109254:	f003 0307 	and.w	r3, r3, #7
 8109258:	4904      	ldr	r1, [pc, #16]	; (810926c <HAL_RCC_GetPCLK2Freq+0x28>)
 810925a:	5ccb      	ldrb	r3, [r1, r3]
 810925c:	f003 031f 	and.w	r3, r3, #31
 8109260:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8109264:	4618      	mov	r0, r3
 8109266:	bd80      	pop	{r7, pc}
 8109268:	58024400 	.word	0x58024400
 810926c:	0810e918 	.word	0x0810e918

08109270 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8109270:	b580      	push	{r7, lr}
 8109272:	b086      	sub	sp, #24
 8109274:	af00      	add	r7, sp, #0
 8109276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8109278:	2300      	movs	r3, #0
 810927a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810927c:	2300      	movs	r3, #0
 810927e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	681b      	ldr	r3, [r3, #0]
 8109284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109288:	2b00      	cmp	r3, #0
 810928a:	d03f      	beq.n	810930c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810928c:	687b      	ldr	r3, [r7, #4]
 810928e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109290:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109294:	d02a      	beq.n	81092ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8109296:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810929a:	d824      	bhi.n	81092e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810929c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81092a0:	d018      	beq.n	81092d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81092a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81092a6:	d81e      	bhi.n	81092e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81092a8:	2b00      	cmp	r3, #0
 81092aa:	d003      	beq.n	81092b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81092ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81092b0:	d007      	beq.n	81092c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 81092b2:	e018      	b.n	81092e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81092b4:	4ba3      	ldr	r3, [pc, #652]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81092b8:	4aa2      	ldr	r2, [pc, #648]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81092ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81092be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81092c0:	e015      	b.n	81092ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81092c2:	687b      	ldr	r3, [r7, #4]
 81092c4:	3304      	adds	r3, #4
 81092c6:	2102      	movs	r1, #2
 81092c8:	4618      	mov	r0, r3
 81092ca:	f001 f9d5 	bl	810a678 <RCCEx_PLL2_Config>
 81092ce:	4603      	mov	r3, r0
 81092d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81092d2:	e00c      	b.n	81092ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81092d4:	687b      	ldr	r3, [r7, #4]
 81092d6:	3324      	adds	r3, #36	; 0x24
 81092d8:	2102      	movs	r1, #2
 81092da:	4618      	mov	r0, r3
 81092dc:	f001 fa7e 	bl	810a7dc <RCCEx_PLL3_Config>
 81092e0:	4603      	mov	r3, r0
 81092e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81092e4:	e003      	b.n	81092ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81092e6:	2301      	movs	r3, #1
 81092e8:	75fb      	strb	r3, [r7, #23]
      break;
 81092ea:	e000      	b.n	81092ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81092ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 81092ee:	7dfb      	ldrb	r3, [r7, #23]
 81092f0:	2b00      	cmp	r3, #0
 81092f2:	d109      	bne.n	8109308 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81092f4:	4b93      	ldr	r3, [pc, #588]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81092f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81092f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81092fc:	687b      	ldr	r3, [r7, #4]
 81092fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109300:	4990      	ldr	r1, [pc, #576]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8109302:	4313      	orrs	r3, r2
 8109304:	650b      	str	r3, [r1, #80]	; 0x50
 8109306:	e001      	b.n	810930c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109308:	7dfb      	ldrb	r3, [r7, #23]
 810930a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810930c:	687b      	ldr	r3, [r7, #4]
 810930e:	681b      	ldr	r3, [r3, #0]
 8109310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109314:	2b00      	cmp	r3, #0
 8109316:	d03d      	beq.n	8109394 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8109318:	687b      	ldr	r3, [r7, #4]
 810931a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810931c:	2b04      	cmp	r3, #4
 810931e:	d826      	bhi.n	810936e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8109320:	a201      	add	r2, pc, #4	; (adr r2, 8109328 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8109322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109326:	bf00      	nop
 8109328:	0810933d 	.word	0x0810933d
 810932c:	0810934b 	.word	0x0810934b
 8109330:	0810935d 	.word	0x0810935d
 8109334:	08109375 	.word	0x08109375
 8109338:	08109375 	.word	0x08109375
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810933c:	4b81      	ldr	r3, [pc, #516]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109340:	4a80      	ldr	r2, [pc, #512]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8109342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109346:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109348:	e015      	b.n	8109376 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810934a:	687b      	ldr	r3, [r7, #4]
 810934c:	3304      	adds	r3, #4
 810934e:	2100      	movs	r1, #0
 8109350:	4618      	mov	r0, r3
 8109352:	f001 f991 	bl	810a678 <RCCEx_PLL2_Config>
 8109356:	4603      	mov	r3, r0
 8109358:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810935a:	e00c      	b.n	8109376 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810935c:	687b      	ldr	r3, [r7, #4]
 810935e:	3324      	adds	r3, #36	; 0x24
 8109360:	2100      	movs	r1, #0
 8109362:	4618      	mov	r0, r3
 8109364:	f001 fa3a 	bl	810a7dc <RCCEx_PLL3_Config>
 8109368:	4603      	mov	r3, r0
 810936a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810936c:	e003      	b.n	8109376 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810936e:	2301      	movs	r3, #1
 8109370:	75fb      	strb	r3, [r7, #23]
      break;
 8109372:	e000      	b.n	8109376 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8109374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109376:	7dfb      	ldrb	r3, [r7, #23]
 8109378:	2b00      	cmp	r3, #0
 810937a:	d109      	bne.n	8109390 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810937c:	4b71      	ldr	r3, [pc, #452]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810937e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109380:	f023 0207 	bic.w	r2, r3, #7
 8109384:	687b      	ldr	r3, [r7, #4]
 8109386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109388:	496e      	ldr	r1, [pc, #440]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810938a:	4313      	orrs	r3, r2
 810938c:	650b      	str	r3, [r1, #80]	; 0x50
 810938e:	e001      	b.n	8109394 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109390:	7dfb      	ldrb	r3, [r7, #23]
 8109392:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8109394:	687b      	ldr	r3, [r7, #4]
 8109396:	681b      	ldr	r3, [r3, #0]
 8109398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810939c:	2b00      	cmp	r3, #0
 810939e:	d042      	beq.n	8109426 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81093a0:	687b      	ldr	r3, [r7, #4]
 81093a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81093a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81093a8:	d02b      	beq.n	8109402 <HAL_RCCEx_PeriphCLKConfig+0x192>
 81093aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81093ae:	d825      	bhi.n	81093fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81093b0:	2bc0      	cmp	r3, #192	; 0xc0
 81093b2:	d028      	beq.n	8109406 <HAL_RCCEx_PeriphCLKConfig+0x196>
 81093b4:	2bc0      	cmp	r3, #192	; 0xc0
 81093b6:	d821      	bhi.n	81093fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81093b8:	2b80      	cmp	r3, #128	; 0x80
 81093ba:	d016      	beq.n	81093ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81093bc:	2b80      	cmp	r3, #128	; 0x80
 81093be:	d81d      	bhi.n	81093fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81093c0:	2b00      	cmp	r3, #0
 81093c2:	d002      	beq.n	81093ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81093c4:	2b40      	cmp	r3, #64	; 0x40
 81093c6:	d007      	beq.n	81093d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81093c8:	e018      	b.n	81093fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81093ca:	4b5e      	ldr	r3, [pc, #376]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81093cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81093ce:	4a5d      	ldr	r2, [pc, #372]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81093d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81093d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81093d6:	e017      	b.n	8109408 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	3304      	adds	r3, #4
 81093dc:	2100      	movs	r1, #0
 81093de:	4618      	mov	r0, r3
 81093e0:	f001 f94a 	bl	810a678 <RCCEx_PLL2_Config>
 81093e4:	4603      	mov	r3, r0
 81093e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81093e8:	e00e      	b.n	8109408 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81093ea:	687b      	ldr	r3, [r7, #4]
 81093ec:	3324      	adds	r3, #36	; 0x24
 81093ee:	2100      	movs	r1, #0
 81093f0:	4618      	mov	r0, r3
 81093f2:	f001 f9f3 	bl	810a7dc <RCCEx_PLL3_Config>
 81093f6:	4603      	mov	r3, r0
 81093f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81093fa:	e005      	b.n	8109408 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81093fc:	2301      	movs	r3, #1
 81093fe:	75fb      	strb	r3, [r7, #23]
      break;
 8109400:	e002      	b.n	8109408 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8109402:	bf00      	nop
 8109404:	e000      	b.n	8109408 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8109406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109408:	7dfb      	ldrb	r3, [r7, #23]
 810940a:	2b00      	cmp	r3, #0
 810940c:	d109      	bne.n	8109422 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810940e:	4b4d      	ldr	r3, [pc, #308]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8109410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109412:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8109416:	687b      	ldr	r3, [r7, #4]
 8109418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810941a:	494a      	ldr	r1, [pc, #296]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810941c:	4313      	orrs	r3, r2
 810941e:	650b      	str	r3, [r1, #80]	; 0x50
 8109420:	e001      	b.n	8109426 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109422:	7dfb      	ldrb	r3, [r7, #23]
 8109424:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8109426:	687b      	ldr	r3, [r7, #4]
 8109428:	681b      	ldr	r3, [r3, #0]
 810942a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810942e:	2b00      	cmp	r3, #0
 8109430:	d049      	beq.n	81094c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8109438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810943c:	d030      	beq.n	81094a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 810943e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8109442:	d82a      	bhi.n	810949a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109444:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8109448:	d02c      	beq.n	81094a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810944a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810944e:	d824      	bhi.n	810949a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8109450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8109454:	d018      	beq.n	8109488 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8109456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810945a:	d81e      	bhi.n	810949a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810945c:	2b00      	cmp	r3, #0
 810945e:	d003      	beq.n	8109468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8109460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109464:	d007      	beq.n	8109476 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8109466:	e018      	b.n	810949a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109468:	4b36      	ldr	r3, [pc, #216]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810946c:	4a35      	ldr	r2, [pc, #212]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810946e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109472:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109474:	e017      	b.n	81094a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	3304      	adds	r3, #4
 810947a:	2100      	movs	r1, #0
 810947c:	4618      	mov	r0, r3
 810947e:	f001 f8fb 	bl	810a678 <RCCEx_PLL2_Config>
 8109482:	4603      	mov	r3, r0
 8109484:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8109486:	e00e      	b.n	81094a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8109488:	687b      	ldr	r3, [r7, #4]
 810948a:	3324      	adds	r3, #36	; 0x24
 810948c:	2100      	movs	r1, #0
 810948e:	4618      	mov	r0, r3
 8109490:	f001 f9a4 	bl	810a7dc <RCCEx_PLL3_Config>
 8109494:	4603      	mov	r3, r0
 8109496:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109498:	e005      	b.n	81094a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810949a:	2301      	movs	r3, #1
 810949c:	75fb      	strb	r3, [r7, #23]
      break;
 810949e:	e002      	b.n	81094a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81094a0:	bf00      	nop
 81094a2:	e000      	b.n	81094a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81094a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81094a6:	7dfb      	ldrb	r3, [r7, #23]
 81094a8:	2b00      	cmp	r3, #0
 81094aa:	d10a      	bne.n	81094c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81094ac:	4b25      	ldr	r3, [pc, #148]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81094ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81094b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81094b4:	687b      	ldr	r3, [r7, #4]
 81094b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81094ba:	4922      	ldr	r1, [pc, #136]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81094bc:	4313      	orrs	r3, r2
 81094be:	658b      	str	r3, [r1, #88]	; 0x58
 81094c0:	e001      	b.n	81094c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81094c2:	7dfb      	ldrb	r3, [r7, #23]
 81094c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	681b      	ldr	r3, [r3, #0]
 81094ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81094ce:	2b00      	cmp	r3, #0
 81094d0:	d04b      	beq.n	810956a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81094d2:	687b      	ldr	r3, [r7, #4]
 81094d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81094d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81094dc:	d030      	beq.n	8109540 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81094de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81094e2:	d82a      	bhi.n	810953a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81094e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81094e8:	d02e      	beq.n	8109548 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81094ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81094ee:	d824      	bhi.n	810953a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81094f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81094f4:	d018      	beq.n	8109528 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81094f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81094fa:	d81e      	bhi.n	810953a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81094fc:	2b00      	cmp	r3, #0
 81094fe:	d003      	beq.n	8109508 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8109500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8109504:	d007      	beq.n	8109516 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8109506:	e018      	b.n	810953a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109508:	4b0e      	ldr	r3, [pc, #56]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810950c:	4a0d      	ldr	r2, [pc, #52]	; (8109544 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810950e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109514:	e019      	b.n	810954a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	3304      	adds	r3, #4
 810951a:	2100      	movs	r1, #0
 810951c:	4618      	mov	r0, r3
 810951e:	f001 f8ab 	bl	810a678 <RCCEx_PLL2_Config>
 8109522:	4603      	mov	r3, r0
 8109524:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8109526:	e010      	b.n	810954a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	3324      	adds	r3, #36	; 0x24
 810952c:	2100      	movs	r1, #0
 810952e:	4618      	mov	r0, r3
 8109530:	f001 f954 	bl	810a7dc <RCCEx_PLL3_Config>
 8109534:	4603      	mov	r3, r0
 8109536:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8109538:	e007      	b.n	810954a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810953a:	2301      	movs	r3, #1
 810953c:	75fb      	strb	r3, [r7, #23]
      break;
 810953e:	e004      	b.n	810954a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8109540:	bf00      	nop
 8109542:	e002      	b.n	810954a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8109544:	58024400 	.word	0x58024400
      break;
 8109548:	bf00      	nop
    }

    if(ret == HAL_OK)
 810954a:	7dfb      	ldrb	r3, [r7, #23]
 810954c:	2b00      	cmp	r3, #0
 810954e:	d10a      	bne.n	8109566 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8109550:	4b99      	ldr	r3, [pc, #612]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109554:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8109558:	687b      	ldr	r3, [r7, #4]
 810955a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810955e:	4996      	ldr	r1, [pc, #600]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109560:	4313      	orrs	r3, r2
 8109562:	658b      	str	r3, [r1, #88]	; 0x58
 8109564:	e001      	b.n	810956a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109566:	7dfb      	ldrb	r3, [r7, #23]
 8109568:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810956a:	687b      	ldr	r3, [r7, #4]
 810956c:	681b      	ldr	r3, [r3, #0]
 810956e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109572:	2b00      	cmp	r3, #0
 8109574:	d032      	beq.n	81095dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8109576:	687b      	ldr	r3, [r7, #4]
 8109578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810957a:	2b30      	cmp	r3, #48	; 0x30
 810957c:	d01c      	beq.n	81095b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 810957e:	2b30      	cmp	r3, #48	; 0x30
 8109580:	d817      	bhi.n	81095b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8109582:	2b20      	cmp	r3, #32
 8109584:	d00c      	beq.n	81095a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8109586:	2b20      	cmp	r3, #32
 8109588:	d813      	bhi.n	81095b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 810958a:	2b00      	cmp	r3, #0
 810958c:	d016      	beq.n	81095bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 810958e:	2b10      	cmp	r3, #16
 8109590:	d10f      	bne.n	81095b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109592:	4b89      	ldr	r3, [pc, #548]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109596:	4a88      	ldr	r2, [pc, #544]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810959c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810959e:	e00e      	b.n	81095be <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81095a0:	687b      	ldr	r3, [r7, #4]
 81095a2:	3304      	adds	r3, #4
 81095a4:	2102      	movs	r1, #2
 81095a6:	4618      	mov	r0, r3
 81095a8:	f001 f866 	bl	810a678 <RCCEx_PLL2_Config>
 81095ac:	4603      	mov	r3, r0
 81095ae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81095b0:	e005      	b.n	81095be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81095b2:	2301      	movs	r3, #1
 81095b4:	75fb      	strb	r3, [r7, #23]
      break;
 81095b6:	e002      	b.n	81095be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81095b8:	bf00      	nop
 81095ba:	e000      	b.n	81095be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 81095bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81095be:	7dfb      	ldrb	r3, [r7, #23]
 81095c0:	2b00      	cmp	r3, #0
 81095c2:	d109      	bne.n	81095d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81095c4:	4b7c      	ldr	r3, [pc, #496]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81095c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81095c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81095d0:	4979      	ldr	r1, [pc, #484]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81095d2:	4313      	orrs	r3, r2
 81095d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 81095d6:	e001      	b.n	81095dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81095d8:	7dfb      	ldrb	r3, [r7, #23]
 81095da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81095dc:	687b      	ldr	r3, [r7, #4]
 81095de:	681b      	ldr	r3, [r3, #0]
 81095e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81095e4:	2b00      	cmp	r3, #0
 81095e6:	d047      	beq.n	8109678 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81095ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81095f0:	d030      	beq.n	8109654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 81095f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81095f6:	d82a      	bhi.n	810964e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81095f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81095fc:	d02c      	beq.n	8109658 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 81095fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8109602:	d824      	bhi.n	810964e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8109604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109608:	d018      	beq.n	810963c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 810960a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810960e:	d81e      	bhi.n	810964e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8109610:	2b00      	cmp	r3, #0
 8109612:	d003      	beq.n	810961c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8109614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109618:	d007      	beq.n	810962a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 810961a:	e018      	b.n	810964e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810961c:	4b66      	ldr	r3, [pc, #408]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109620:	4a65      	ldr	r2, [pc, #404]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109626:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8109628:	e017      	b.n	810965a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810962a:	687b      	ldr	r3, [r7, #4]
 810962c:	3304      	adds	r3, #4
 810962e:	2100      	movs	r1, #0
 8109630:	4618      	mov	r0, r3
 8109632:	f001 f821 	bl	810a678 <RCCEx_PLL2_Config>
 8109636:	4603      	mov	r3, r0
 8109638:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810963a:	e00e      	b.n	810965a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810963c:	687b      	ldr	r3, [r7, #4]
 810963e:	3324      	adds	r3, #36	; 0x24
 8109640:	2100      	movs	r1, #0
 8109642:	4618      	mov	r0, r3
 8109644:	f001 f8ca 	bl	810a7dc <RCCEx_PLL3_Config>
 8109648:	4603      	mov	r3, r0
 810964a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810964c:	e005      	b.n	810965a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810964e:	2301      	movs	r3, #1
 8109650:	75fb      	strb	r3, [r7, #23]
      break;
 8109652:	e002      	b.n	810965a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8109654:	bf00      	nop
 8109656:	e000      	b.n	810965a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8109658:	bf00      	nop
    }

    if(ret == HAL_OK)
 810965a:	7dfb      	ldrb	r3, [r7, #23]
 810965c:	2b00      	cmp	r3, #0
 810965e:	d109      	bne.n	8109674 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8109660:	4b55      	ldr	r3, [pc, #340]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109664:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810966c:	4952      	ldr	r1, [pc, #328]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810966e:	4313      	orrs	r3, r2
 8109670:	650b      	str	r3, [r1, #80]	; 0x50
 8109672:	e001      	b.n	8109678 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109674:	7dfb      	ldrb	r3, [r7, #23]
 8109676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	681b      	ldr	r3, [r3, #0]
 810967c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8109680:	2b00      	cmp	r3, #0
 8109682:	d049      	beq.n	8109718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8109684:	687b      	ldr	r3, [r7, #4]
 8109686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810968c:	d02e      	beq.n	81096ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 810968e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8109692:	d828      	bhi.n	81096e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8109694:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8109698:	d02a      	beq.n	81096f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 810969a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810969e:	d822      	bhi.n	81096e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81096a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81096a4:	d026      	beq.n	81096f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 81096a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81096aa:	d81c      	bhi.n	81096e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81096ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81096b0:	d010      	beq.n	81096d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 81096b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81096b6:	d816      	bhi.n	81096e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 81096b8:	2b00      	cmp	r3, #0
 81096ba:	d01d      	beq.n	81096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 81096bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81096c0:	d111      	bne.n	81096e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81096c2:	687b      	ldr	r3, [r7, #4]
 81096c4:	3304      	adds	r3, #4
 81096c6:	2101      	movs	r1, #1
 81096c8:	4618      	mov	r0, r3
 81096ca:	f000 ffd5 	bl	810a678 <RCCEx_PLL2_Config>
 81096ce:	4603      	mov	r3, r0
 81096d0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81096d2:	e012      	b.n	81096fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81096d4:	687b      	ldr	r3, [r7, #4]
 81096d6:	3324      	adds	r3, #36	; 0x24
 81096d8:	2101      	movs	r1, #1
 81096da:	4618      	mov	r0, r3
 81096dc:	f001 f87e 	bl	810a7dc <RCCEx_PLL3_Config>
 81096e0:	4603      	mov	r3, r0
 81096e2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81096e4:	e009      	b.n	81096fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81096e6:	2301      	movs	r3, #1
 81096e8:	75fb      	strb	r3, [r7, #23]
      break;
 81096ea:	e006      	b.n	81096fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81096ec:	bf00      	nop
 81096ee:	e004      	b.n	81096fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81096f0:	bf00      	nop
 81096f2:	e002      	b.n	81096fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81096f4:	bf00      	nop
 81096f6:	e000      	b.n	81096fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81096f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81096fa:	7dfb      	ldrb	r3, [r7, #23]
 81096fc:	2b00      	cmp	r3, #0
 81096fe:	d109      	bne.n	8109714 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8109700:	4b2d      	ldr	r3, [pc, #180]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8109702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109704:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8109708:	687b      	ldr	r3, [r7, #4]
 810970a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810970c:	492a      	ldr	r1, [pc, #168]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810970e:	4313      	orrs	r3, r2
 8109710:	650b      	str	r3, [r1, #80]	; 0x50
 8109712:	e001      	b.n	8109718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109714:	7dfb      	ldrb	r3, [r7, #23]
 8109716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	681b      	ldr	r3, [r3, #0]
 810971c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8109720:	2b00      	cmp	r3, #0
 8109722:	d04d      	beq.n	81097c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8109724:	687b      	ldr	r3, [r7, #4]
 8109726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810972a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810972e:	d02e      	beq.n	810978e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8109730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109734:	d828      	bhi.n	8109788 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8109736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810973a:	d02a      	beq.n	8109792 <HAL_RCCEx_PeriphCLKConfig+0x522>
 810973c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109740:	d822      	bhi.n	8109788 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8109742:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109746:	d026      	beq.n	8109796 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8109748:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810974c:	d81c      	bhi.n	8109788 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810974e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109752:	d010      	beq.n	8109776 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8109754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109758:	d816      	bhi.n	8109788 <HAL_RCCEx_PeriphCLKConfig+0x518>
 810975a:	2b00      	cmp	r3, #0
 810975c:	d01d      	beq.n	810979a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 810975e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109762:	d111      	bne.n	8109788 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	3304      	adds	r3, #4
 8109768:	2101      	movs	r1, #1
 810976a:	4618      	mov	r0, r3
 810976c:	f000 ff84 	bl	810a678 <RCCEx_PLL2_Config>
 8109770:	4603      	mov	r3, r0
 8109772:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8109774:	e012      	b.n	810979c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109776:	687b      	ldr	r3, [r7, #4]
 8109778:	3324      	adds	r3, #36	; 0x24
 810977a:	2101      	movs	r1, #1
 810977c:	4618      	mov	r0, r3
 810977e:	f001 f82d 	bl	810a7dc <RCCEx_PLL3_Config>
 8109782:	4603      	mov	r3, r0
 8109784:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8109786:	e009      	b.n	810979c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8109788:	2301      	movs	r3, #1
 810978a:	75fb      	strb	r3, [r7, #23]
      break;
 810978c:	e006      	b.n	810979c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810978e:	bf00      	nop
 8109790:	e004      	b.n	810979c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8109792:	bf00      	nop
 8109794:	e002      	b.n	810979c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8109796:	bf00      	nop
 8109798:	e000      	b.n	810979c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810979a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810979c:	7dfb      	ldrb	r3, [r7, #23]
 810979e:	2b00      	cmp	r3, #0
 81097a0:	d10c      	bne.n	81097bc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81097a2:	4b05      	ldr	r3, [pc, #20]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81097a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81097a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81097aa:	687b      	ldr	r3, [r7, #4]
 81097ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81097b0:	4901      	ldr	r1, [pc, #4]	; (81097b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81097b2:	4313      	orrs	r3, r2
 81097b4:	658b      	str	r3, [r1, #88]	; 0x58
 81097b6:	e003      	b.n	81097c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 81097b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81097bc:	7dfb      	ldrb	r3, [r7, #23]
 81097be:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	681b      	ldr	r3, [r3, #0]
 81097c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81097c8:	2b00      	cmp	r3, #0
 81097ca:	d02f      	beq.n	810982c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81097cc:	687b      	ldr	r3, [r7, #4]
 81097ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81097d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81097d4:	d00e      	beq.n	81097f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 81097d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81097da:	d814      	bhi.n	8109806 <HAL_RCCEx_PeriphCLKConfig+0x596>
 81097dc:	2b00      	cmp	r3, #0
 81097de:	d015      	beq.n	810980c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 81097e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81097e4:	d10f      	bne.n	8109806 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81097e6:	4bb0      	ldr	r3, [pc, #704]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81097ea:	4aaf      	ldr	r2, [pc, #700]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81097ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81097f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81097f2:	e00c      	b.n	810980e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81097f4:	687b      	ldr	r3, [r7, #4]
 81097f6:	3304      	adds	r3, #4
 81097f8:	2101      	movs	r1, #1
 81097fa:	4618      	mov	r0, r3
 81097fc:	f000 ff3c 	bl	810a678 <RCCEx_PLL2_Config>
 8109800:	4603      	mov	r3, r0
 8109802:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8109804:	e003      	b.n	810980e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109806:	2301      	movs	r3, #1
 8109808:	75fb      	strb	r3, [r7, #23]
      break;
 810980a:	e000      	b.n	810980e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 810980c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810980e:	7dfb      	ldrb	r3, [r7, #23]
 8109810:	2b00      	cmp	r3, #0
 8109812:	d109      	bne.n	8109828 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8109814:	4ba4      	ldr	r3, [pc, #656]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109818:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810981c:	687b      	ldr	r3, [r7, #4]
 810981e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109820:	49a1      	ldr	r1, [pc, #644]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109822:	4313      	orrs	r3, r2
 8109824:	650b      	str	r3, [r1, #80]	; 0x50
 8109826:	e001      	b.n	810982c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109828:	7dfb      	ldrb	r3, [r7, #23]
 810982a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810982c:	687b      	ldr	r3, [r7, #4]
 810982e:	681b      	ldr	r3, [r3, #0]
 8109830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8109834:	2b00      	cmp	r3, #0
 8109836:	d032      	beq.n	810989e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8109838:	687b      	ldr	r3, [r7, #4]
 810983a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810983c:	2b03      	cmp	r3, #3
 810983e:	d81b      	bhi.n	8109878 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8109840:	a201      	add	r2, pc, #4	; (adr r2, 8109848 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8109842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109846:	bf00      	nop
 8109848:	0810987f 	.word	0x0810987f
 810984c:	08109859 	.word	0x08109859
 8109850:	08109867 	.word	0x08109867
 8109854:	0810987f 	.word	0x0810987f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109858:	4b93      	ldr	r3, [pc, #588]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810985c:	4a92      	ldr	r2, [pc, #584]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810985e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8109864:	e00c      	b.n	8109880 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109866:	687b      	ldr	r3, [r7, #4]
 8109868:	3304      	adds	r3, #4
 810986a:	2102      	movs	r1, #2
 810986c:	4618      	mov	r0, r3
 810986e:	f000 ff03 	bl	810a678 <RCCEx_PLL2_Config>
 8109872:	4603      	mov	r3, r0
 8109874:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8109876:	e003      	b.n	8109880 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8109878:	2301      	movs	r3, #1
 810987a:	75fb      	strb	r3, [r7, #23]
      break;
 810987c:	e000      	b.n	8109880 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810987e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109880:	7dfb      	ldrb	r3, [r7, #23]
 8109882:	2b00      	cmp	r3, #0
 8109884:	d109      	bne.n	810989a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8109886:	4b88      	ldr	r3, [pc, #544]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810988a:	f023 0203 	bic.w	r2, r3, #3
 810988e:	687b      	ldr	r3, [r7, #4]
 8109890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109892:	4985      	ldr	r1, [pc, #532]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109894:	4313      	orrs	r3, r2
 8109896:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109898:	e001      	b.n	810989e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810989a:	7dfb      	ldrb	r3, [r7, #23]
 810989c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810989e:	687b      	ldr	r3, [r7, #4]
 81098a0:	681b      	ldr	r3, [r3, #0]
 81098a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81098a6:	2b00      	cmp	r3, #0
 81098a8:	f000 8088 	beq.w	81099bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81098ac:	4b7f      	ldr	r3, [pc, #508]	; (8109aac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81098ae:	681b      	ldr	r3, [r3, #0]
 81098b0:	4a7e      	ldr	r2, [pc, #504]	; (8109aac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81098b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81098b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81098b8:	f7f9 fb02 	bl	8102ec0 <HAL_GetTick>
 81098bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81098be:	e009      	b.n	81098d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81098c0:	f7f9 fafe 	bl	8102ec0 <HAL_GetTick>
 81098c4:	4602      	mov	r2, r0
 81098c6:	693b      	ldr	r3, [r7, #16]
 81098c8:	1ad3      	subs	r3, r2, r3
 81098ca:	2b64      	cmp	r3, #100	; 0x64
 81098cc:	d902      	bls.n	81098d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81098ce:	2303      	movs	r3, #3
 81098d0:	75fb      	strb	r3, [r7, #23]
        break;
 81098d2:	e005      	b.n	81098e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81098d4:	4b75      	ldr	r3, [pc, #468]	; (8109aac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 81098d6:	681b      	ldr	r3, [r3, #0]
 81098d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81098dc:	2b00      	cmp	r3, #0
 81098de:	d0ef      	beq.n	81098c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81098e0:	7dfb      	ldrb	r3, [r7, #23]
 81098e2:	2b00      	cmp	r3, #0
 81098e4:	d168      	bne.n	81099b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81098e6:	4b70      	ldr	r3, [pc, #448]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81098e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81098ea:	687b      	ldr	r3, [r7, #4]
 81098ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81098f0:	4053      	eors	r3, r2
 81098f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81098f6:	2b00      	cmp	r3, #0
 81098f8:	d013      	beq.n	8109922 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81098fa:	4b6b      	ldr	r3, [pc, #428]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81098fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81098fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109902:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8109904:	4b68      	ldr	r3, [pc, #416]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109908:	4a67      	ldr	r2, [pc, #412]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810990a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810990e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8109910:	4b65      	ldr	r3, [pc, #404]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109914:	4a64      	ldr	r2, [pc, #400]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810991a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810991c:	4a62      	ldr	r2, [pc, #392]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810991e:	68fb      	ldr	r3, [r7, #12]
 8109920:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8109922:	687b      	ldr	r3, [r7, #4]
 8109924:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810992c:	d115      	bne.n	810995a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810992e:	f7f9 fac7 	bl	8102ec0 <HAL_GetTick>
 8109932:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8109934:	e00b      	b.n	810994e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8109936:	f7f9 fac3 	bl	8102ec0 <HAL_GetTick>
 810993a:	4602      	mov	r2, r0
 810993c:	693b      	ldr	r3, [r7, #16]
 810993e:	1ad3      	subs	r3, r2, r3
 8109940:	f241 3288 	movw	r2, #5000	; 0x1388
 8109944:	4293      	cmp	r3, r2
 8109946:	d902      	bls.n	810994e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8109948:	2303      	movs	r3, #3
 810994a:	75fb      	strb	r3, [r7, #23]
            break;
 810994c:	e005      	b.n	810995a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810994e:	4b56      	ldr	r3, [pc, #344]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109952:	f003 0302 	and.w	r3, r3, #2
 8109956:	2b00      	cmp	r3, #0
 8109958:	d0ed      	beq.n	8109936 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810995a:	7dfb      	ldrb	r3, [r7, #23]
 810995c:	2b00      	cmp	r3, #0
 810995e:	d128      	bne.n	81099b2 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8109966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810996a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810996e:	d10f      	bne.n	8109990 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8109970:	4b4d      	ldr	r3, [pc, #308]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109972:	691b      	ldr	r3, [r3, #16]
 8109974:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8109978:	687b      	ldr	r3, [r7, #4]
 810997a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810997e:	091b      	lsrs	r3, r3, #4
 8109980:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8109984:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8109988:	4947      	ldr	r1, [pc, #284]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810998a:	4313      	orrs	r3, r2
 810998c:	610b      	str	r3, [r1, #16]
 810998e:	e005      	b.n	810999c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8109990:	4b45      	ldr	r3, [pc, #276]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109992:	691b      	ldr	r3, [r3, #16]
 8109994:	4a44      	ldr	r2, [pc, #272]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8109996:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810999a:	6113      	str	r3, [r2, #16]
 810999c:	4b42      	ldr	r3, [pc, #264]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810999e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81099a0:	687b      	ldr	r3, [r7, #4]
 81099a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81099a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81099aa:	493f      	ldr	r1, [pc, #252]	; (8109aa8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81099ac:	4313      	orrs	r3, r2
 81099ae:	670b      	str	r3, [r1, #112]	; 0x70
 81099b0:	e004      	b.n	81099bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81099b2:	7dfb      	ldrb	r3, [r7, #23]
 81099b4:	75bb      	strb	r3, [r7, #22]
 81099b6:	e001      	b.n	81099bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81099b8:	7dfb      	ldrb	r3, [r7, #23]
 81099ba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81099bc:	687b      	ldr	r3, [r7, #4]
 81099be:	681b      	ldr	r3, [r3, #0]
 81099c0:	f003 0301 	and.w	r3, r3, #1
 81099c4:	2b00      	cmp	r3, #0
 81099c6:	f000 8083 	beq.w	8109ad0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81099ca:	687b      	ldr	r3, [r7, #4]
 81099cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81099ce:	2b28      	cmp	r3, #40	; 0x28
 81099d0:	d866      	bhi.n	8109aa0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81099d2:	a201      	add	r2, pc, #4	; (adr r2, 81099d8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81099d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81099d8:	08109ab1 	.word	0x08109ab1
 81099dc:	08109aa1 	.word	0x08109aa1
 81099e0:	08109aa1 	.word	0x08109aa1
 81099e4:	08109aa1 	.word	0x08109aa1
 81099e8:	08109aa1 	.word	0x08109aa1
 81099ec:	08109aa1 	.word	0x08109aa1
 81099f0:	08109aa1 	.word	0x08109aa1
 81099f4:	08109aa1 	.word	0x08109aa1
 81099f8:	08109a7d 	.word	0x08109a7d
 81099fc:	08109aa1 	.word	0x08109aa1
 8109a00:	08109aa1 	.word	0x08109aa1
 8109a04:	08109aa1 	.word	0x08109aa1
 8109a08:	08109aa1 	.word	0x08109aa1
 8109a0c:	08109aa1 	.word	0x08109aa1
 8109a10:	08109aa1 	.word	0x08109aa1
 8109a14:	08109aa1 	.word	0x08109aa1
 8109a18:	08109a8f 	.word	0x08109a8f
 8109a1c:	08109aa1 	.word	0x08109aa1
 8109a20:	08109aa1 	.word	0x08109aa1
 8109a24:	08109aa1 	.word	0x08109aa1
 8109a28:	08109aa1 	.word	0x08109aa1
 8109a2c:	08109aa1 	.word	0x08109aa1
 8109a30:	08109aa1 	.word	0x08109aa1
 8109a34:	08109aa1 	.word	0x08109aa1
 8109a38:	08109ab1 	.word	0x08109ab1
 8109a3c:	08109aa1 	.word	0x08109aa1
 8109a40:	08109aa1 	.word	0x08109aa1
 8109a44:	08109aa1 	.word	0x08109aa1
 8109a48:	08109aa1 	.word	0x08109aa1
 8109a4c:	08109aa1 	.word	0x08109aa1
 8109a50:	08109aa1 	.word	0x08109aa1
 8109a54:	08109aa1 	.word	0x08109aa1
 8109a58:	08109ab1 	.word	0x08109ab1
 8109a5c:	08109aa1 	.word	0x08109aa1
 8109a60:	08109aa1 	.word	0x08109aa1
 8109a64:	08109aa1 	.word	0x08109aa1
 8109a68:	08109aa1 	.word	0x08109aa1
 8109a6c:	08109aa1 	.word	0x08109aa1
 8109a70:	08109aa1 	.word	0x08109aa1
 8109a74:	08109aa1 	.word	0x08109aa1
 8109a78:	08109ab1 	.word	0x08109ab1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109a7c:	687b      	ldr	r3, [r7, #4]
 8109a7e:	3304      	adds	r3, #4
 8109a80:	2101      	movs	r1, #1
 8109a82:	4618      	mov	r0, r3
 8109a84:	f000 fdf8 	bl	810a678 <RCCEx_PLL2_Config>
 8109a88:	4603      	mov	r3, r0
 8109a8a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8109a8c:	e011      	b.n	8109ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109a8e:	687b      	ldr	r3, [r7, #4]
 8109a90:	3324      	adds	r3, #36	; 0x24
 8109a92:	2101      	movs	r1, #1
 8109a94:	4618      	mov	r0, r3
 8109a96:	f000 fea1 	bl	810a7dc <RCCEx_PLL3_Config>
 8109a9a:	4603      	mov	r3, r0
 8109a9c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8109a9e:	e008      	b.n	8109ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109aa0:	2301      	movs	r3, #1
 8109aa2:	75fb      	strb	r3, [r7, #23]
      break;
 8109aa4:	e005      	b.n	8109ab2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8109aa6:	bf00      	nop
 8109aa8:	58024400 	.word	0x58024400
 8109aac:	58024800 	.word	0x58024800
      break;
 8109ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109ab2:	7dfb      	ldrb	r3, [r7, #23]
 8109ab4:	2b00      	cmp	r3, #0
 8109ab6:	d109      	bne.n	8109acc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8109ab8:	4b96      	ldr	r3, [pc, #600]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109abc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8109ac0:	687b      	ldr	r3, [r7, #4]
 8109ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109ac4:	4993      	ldr	r1, [pc, #588]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109ac6:	4313      	orrs	r3, r2
 8109ac8:	654b      	str	r3, [r1, #84]	; 0x54
 8109aca:	e001      	b.n	8109ad0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109acc:	7dfb      	ldrb	r3, [r7, #23]
 8109ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8109ad0:	687b      	ldr	r3, [r7, #4]
 8109ad2:	681b      	ldr	r3, [r3, #0]
 8109ad4:	f003 0302 	and.w	r3, r3, #2
 8109ad8:	2b00      	cmp	r3, #0
 8109ada:	d038      	beq.n	8109b4e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8109adc:	687b      	ldr	r3, [r7, #4]
 8109ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109ae0:	2b05      	cmp	r3, #5
 8109ae2:	d821      	bhi.n	8109b28 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8109ae4:	a201      	add	r2, pc, #4	; (adr r2, 8109aec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8109ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109aea:	bf00      	nop
 8109aec:	08109b2f 	.word	0x08109b2f
 8109af0:	08109b05 	.word	0x08109b05
 8109af4:	08109b17 	.word	0x08109b17
 8109af8:	08109b2f 	.word	0x08109b2f
 8109afc:	08109b2f 	.word	0x08109b2f
 8109b00:	08109b2f 	.word	0x08109b2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109b04:	687b      	ldr	r3, [r7, #4]
 8109b06:	3304      	adds	r3, #4
 8109b08:	2101      	movs	r1, #1
 8109b0a:	4618      	mov	r0, r3
 8109b0c:	f000 fdb4 	bl	810a678 <RCCEx_PLL2_Config>
 8109b10:	4603      	mov	r3, r0
 8109b12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8109b14:	e00c      	b.n	8109b30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109b16:	687b      	ldr	r3, [r7, #4]
 8109b18:	3324      	adds	r3, #36	; 0x24
 8109b1a:	2101      	movs	r1, #1
 8109b1c:	4618      	mov	r0, r3
 8109b1e:	f000 fe5d 	bl	810a7dc <RCCEx_PLL3_Config>
 8109b22:	4603      	mov	r3, r0
 8109b24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8109b26:	e003      	b.n	8109b30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109b28:	2301      	movs	r3, #1
 8109b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8109b2c:	e000      	b.n	8109b30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8109b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109b30:	7dfb      	ldrb	r3, [r7, #23]
 8109b32:	2b00      	cmp	r3, #0
 8109b34:	d109      	bne.n	8109b4a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8109b36:	4b77      	ldr	r3, [pc, #476]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109b3a:	f023 0207 	bic.w	r2, r3, #7
 8109b3e:	687b      	ldr	r3, [r7, #4]
 8109b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109b42:	4974      	ldr	r1, [pc, #464]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109b44:	4313      	orrs	r3, r2
 8109b46:	654b      	str	r3, [r1, #84]	; 0x54
 8109b48:	e001      	b.n	8109b4e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109b4a:	7dfb      	ldrb	r3, [r7, #23]
 8109b4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8109b4e:	687b      	ldr	r3, [r7, #4]
 8109b50:	681b      	ldr	r3, [r3, #0]
 8109b52:	f003 0304 	and.w	r3, r3, #4
 8109b56:	2b00      	cmp	r3, #0
 8109b58:	d03a      	beq.n	8109bd0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109b60:	2b05      	cmp	r3, #5
 8109b62:	d821      	bhi.n	8109ba8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8109b64:	a201      	add	r2, pc, #4	; (adr r2, 8109b6c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8109b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109b6a:	bf00      	nop
 8109b6c:	08109baf 	.word	0x08109baf
 8109b70:	08109b85 	.word	0x08109b85
 8109b74:	08109b97 	.word	0x08109b97
 8109b78:	08109baf 	.word	0x08109baf
 8109b7c:	08109baf 	.word	0x08109baf
 8109b80:	08109baf 	.word	0x08109baf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8109b84:	687b      	ldr	r3, [r7, #4]
 8109b86:	3304      	adds	r3, #4
 8109b88:	2101      	movs	r1, #1
 8109b8a:	4618      	mov	r0, r3
 8109b8c:	f000 fd74 	bl	810a678 <RCCEx_PLL2_Config>
 8109b90:	4603      	mov	r3, r0
 8109b92:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8109b94:	e00c      	b.n	8109bb0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109b96:	687b      	ldr	r3, [r7, #4]
 8109b98:	3324      	adds	r3, #36	; 0x24
 8109b9a:	2101      	movs	r1, #1
 8109b9c:	4618      	mov	r0, r3
 8109b9e:	f000 fe1d 	bl	810a7dc <RCCEx_PLL3_Config>
 8109ba2:	4603      	mov	r3, r0
 8109ba4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8109ba6:	e003      	b.n	8109bb0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109ba8:	2301      	movs	r3, #1
 8109baa:	75fb      	strb	r3, [r7, #23]
      break;
 8109bac:	e000      	b.n	8109bb0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8109bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109bb0:	7dfb      	ldrb	r3, [r7, #23]
 8109bb2:	2b00      	cmp	r3, #0
 8109bb4:	d10a      	bne.n	8109bcc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8109bb6:	4b57      	ldr	r3, [pc, #348]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109bba:	f023 0207 	bic.w	r2, r3, #7
 8109bbe:	687b      	ldr	r3, [r7, #4]
 8109bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109bc4:	4953      	ldr	r1, [pc, #332]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109bc6:	4313      	orrs	r3, r2
 8109bc8:	658b      	str	r3, [r1, #88]	; 0x58
 8109bca:	e001      	b.n	8109bd0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109bcc:	7dfb      	ldrb	r3, [r7, #23]
 8109bce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8109bd0:	687b      	ldr	r3, [r7, #4]
 8109bd2:	681b      	ldr	r3, [r3, #0]
 8109bd4:	f003 0320 	and.w	r3, r3, #32
 8109bd8:	2b00      	cmp	r3, #0
 8109bda:	d04b      	beq.n	8109c74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8109bdc:	687b      	ldr	r3, [r7, #4]
 8109bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109be6:	d02e      	beq.n	8109c46 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8109be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8109bec:	d828      	bhi.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8109bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109bf2:	d02a      	beq.n	8109c4a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8109bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109bf8:	d822      	bhi.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8109bfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109bfe:	d026      	beq.n	8109c4e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8109c00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8109c04:	d81c      	bhi.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8109c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109c0a:	d010      	beq.n	8109c2e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8109c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8109c10:	d816      	bhi.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8109c12:	2b00      	cmp	r3, #0
 8109c14:	d01d      	beq.n	8109c52 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8109c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8109c1a:	d111      	bne.n	8109c40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109c1c:	687b      	ldr	r3, [r7, #4]
 8109c1e:	3304      	adds	r3, #4
 8109c20:	2100      	movs	r1, #0
 8109c22:	4618      	mov	r0, r3
 8109c24:	f000 fd28 	bl	810a678 <RCCEx_PLL2_Config>
 8109c28:	4603      	mov	r3, r0
 8109c2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8109c2c:	e012      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109c2e:	687b      	ldr	r3, [r7, #4]
 8109c30:	3324      	adds	r3, #36	; 0x24
 8109c32:	2102      	movs	r1, #2
 8109c34:	4618      	mov	r0, r3
 8109c36:	f000 fdd1 	bl	810a7dc <RCCEx_PLL3_Config>
 8109c3a:	4603      	mov	r3, r0
 8109c3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8109c3e:	e009      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109c40:	2301      	movs	r3, #1
 8109c42:	75fb      	strb	r3, [r7, #23]
      break;
 8109c44:	e006      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8109c46:	bf00      	nop
 8109c48:	e004      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8109c4a:	bf00      	nop
 8109c4c:	e002      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8109c4e:	bf00      	nop
 8109c50:	e000      	b.n	8109c54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8109c52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109c54:	7dfb      	ldrb	r3, [r7, #23]
 8109c56:	2b00      	cmp	r3, #0
 8109c58:	d10a      	bne.n	8109c70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8109c5a:	4b2e      	ldr	r3, [pc, #184]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109c5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8109c68:	492a      	ldr	r1, [pc, #168]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109c6a:	4313      	orrs	r3, r2
 8109c6c:	654b      	str	r3, [r1, #84]	; 0x54
 8109c6e:	e001      	b.n	8109c74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109c70:	7dfb      	ldrb	r3, [r7, #23]
 8109c72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8109c74:	687b      	ldr	r3, [r7, #4]
 8109c76:	681b      	ldr	r3, [r3, #0]
 8109c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109c7c:	2b00      	cmp	r3, #0
 8109c7e:	d04d      	beq.n	8109d1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8109c80:	687b      	ldr	r3, [r7, #4]
 8109c82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8109c86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8109c8a:	d02e      	beq.n	8109cea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8109c8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8109c90:	d828      	bhi.n	8109ce4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8109c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109c96:	d02a      	beq.n	8109cee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8109c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109c9c:	d822      	bhi.n	8109ce4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8109c9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8109ca2:	d026      	beq.n	8109cf2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8109ca4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8109ca8:	d81c      	bhi.n	8109ce4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8109caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109cae:	d010      	beq.n	8109cd2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8109cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8109cb4:	d816      	bhi.n	8109ce4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8109cb6:	2b00      	cmp	r3, #0
 8109cb8:	d01d      	beq.n	8109cf6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8109cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8109cbe:	d111      	bne.n	8109ce4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109cc0:	687b      	ldr	r3, [r7, #4]
 8109cc2:	3304      	adds	r3, #4
 8109cc4:	2100      	movs	r1, #0
 8109cc6:	4618      	mov	r0, r3
 8109cc8:	f000 fcd6 	bl	810a678 <RCCEx_PLL2_Config>
 8109ccc:	4603      	mov	r3, r0
 8109cce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8109cd0:	e012      	b.n	8109cf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109cd2:	687b      	ldr	r3, [r7, #4]
 8109cd4:	3324      	adds	r3, #36	; 0x24
 8109cd6:	2102      	movs	r1, #2
 8109cd8:	4618      	mov	r0, r3
 8109cda:	f000 fd7f 	bl	810a7dc <RCCEx_PLL3_Config>
 8109cde:	4603      	mov	r3, r0
 8109ce0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8109ce2:	e009      	b.n	8109cf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109ce4:	2301      	movs	r3, #1
 8109ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8109ce8:	e006      	b.n	8109cf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8109cea:	bf00      	nop
 8109cec:	e004      	b.n	8109cf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8109cee:	bf00      	nop
 8109cf0:	e002      	b.n	8109cf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8109cf2:	bf00      	nop
 8109cf4:	e000      	b.n	8109cf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8109cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109cf8:	7dfb      	ldrb	r3, [r7, #23]
 8109cfa:	2b00      	cmp	r3, #0
 8109cfc:	d10c      	bne.n	8109d18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8109cfe:	4b05      	ldr	r3, [pc, #20]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109d02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8109d06:	687b      	ldr	r3, [r7, #4]
 8109d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8109d0c:	4901      	ldr	r1, [pc, #4]	; (8109d14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8109d0e:	4313      	orrs	r3, r2
 8109d10:	658b      	str	r3, [r1, #88]	; 0x58
 8109d12:	e003      	b.n	8109d1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8109d14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109d18:	7dfb      	ldrb	r3, [r7, #23]
 8109d1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8109d1c:	687b      	ldr	r3, [r7, #4]
 8109d1e:	681b      	ldr	r3, [r3, #0]
 8109d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109d24:	2b00      	cmp	r3, #0
 8109d26:	d04b      	beq.n	8109dc0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8109d28:	687b      	ldr	r3, [r7, #4]
 8109d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8109d2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8109d32:	d02e      	beq.n	8109d92 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8109d34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8109d38:	d828      	bhi.n	8109d8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8109d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109d3e:	d02a      	beq.n	8109d96 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8109d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109d44:	d822      	bhi.n	8109d8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8109d46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8109d4a:	d026      	beq.n	8109d9a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8109d4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8109d50:	d81c      	bhi.n	8109d8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8109d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109d56:	d010      	beq.n	8109d7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8109d58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109d5c:	d816      	bhi.n	8109d8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8109d5e:	2b00      	cmp	r3, #0
 8109d60:	d01d      	beq.n	8109d9e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8109d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109d66:	d111      	bne.n	8109d8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109d68:	687b      	ldr	r3, [r7, #4]
 8109d6a:	3304      	adds	r3, #4
 8109d6c:	2100      	movs	r1, #0
 8109d6e:	4618      	mov	r0, r3
 8109d70:	f000 fc82 	bl	810a678 <RCCEx_PLL2_Config>
 8109d74:	4603      	mov	r3, r0
 8109d76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8109d78:	e012      	b.n	8109da0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	3324      	adds	r3, #36	; 0x24
 8109d7e:	2102      	movs	r1, #2
 8109d80:	4618      	mov	r0, r3
 8109d82:	f000 fd2b 	bl	810a7dc <RCCEx_PLL3_Config>
 8109d86:	4603      	mov	r3, r0
 8109d88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8109d8a:	e009      	b.n	8109da0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109d8c:	2301      	movs	r3, #1
 8109d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8109d90:	e006      	b.n	8109da0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8109d92:	bf00      	nop
 8109d94:	e004      	b.n	8109da0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8109d96:	bf00      	nop
 8109d98:	e002      	b.n	8109da0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8109d9a:	bf00      	nop
 8109d9c:	e000      	b.n	8109da0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8109d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109da0:	7dfb      	ldrb	r3, [r7, #23]
 8109da2:	2b00      	cmp	r3, #0
 8109da4:	d10a      	bne.n	8109dbc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8109da6:	4b9d      	ldr	r3, [pc, #628]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8109dae:	687b      	ldr	r3, [r7, #4]
 8109db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8109db4:	4999      	ldr	r1, [pc, #612]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109db6:	4313      	orrs	r3, r2
 8109db8:	658b      	str	r3, [r1, #88]	; 0x58
 8109dba:	e001      	b.n	8109dc0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109dbc:	7dfb      	ldrb	r3, [r7, #23]
 8109dbe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8109dc0:	687b      	ldr	r3, [r7, #4]
 8109dc2:	681b      	ldr	r3, [r3, #0]
 8109dc4:	f003 0308 	and.w	r3, r3, #8
 8109dc8:	2b00      	cmp	r3, #0
 8109dca:	d01a      	beq.n	8109e02 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8109dcc:	687b      	ldr	r3, [r7, #4]
 8109dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109dd6:	d10a      	bne.n	8109dee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8109dd8:	687b      	ldr	r3, [r7, #4]
 8109dda:	3324      	adds	r3, #36	; 0x24
 8109ddc:	2102      	movs	r1, #2
 8109dde:	4618      	mov	r0, r3
 8109de0:	f000 fcfc 	bl	810a7dc <RCCEx_PLL3_Config>
 8109de4:	4603      	mov	r3, r0
 8109de6:	2b00      	cmp	r3, #0
 8109de8:	d001      	beq.n	8109dee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8109dea:	2301      	movs	r3, #1
 8109dec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8109dee:	4b8b      	ldr	r3, [pc, #556]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109df2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8109df6:	687b      	ldr	r3, [r7, #4]
 8109df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109dfc:	4987      	ldr	r1, [pc, #540]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109dfe:	4313      	orrs	r3, r2
 8109e00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8109e02:	687b      	ldr	r3, [r7, #4]
 8109e04:	681b      	ldr	r3, [r3, #0]
 8109e06:	f003 0310 	and.w	r3, r3, #16
 8109e0a:	2b00      	cmp	r3, #0
 8109e0c:	d01a      	beq.n	8109e44 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8109e0e:	687b      	ldr	r3, [r7, #4]
 8109e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8109e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109e18:	d10a      	bne.n	8109e30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8109e1a:	687b      	ldr	r3, [r7, #4]
 8109e1c:	3324      	adds	r3, #36	; 0x24
 8109e1e:	2102      	movs	r1, #2
 8109e20:	4618      	mov	r0, r3
 8109e22:	f000 fcdb 	bl	810a7dc <RCCEx_PLL3_Config>
 8109e26:	4603      	mov	r3, r0
 8109e28:	2b00      	cmp	r3, #0
 8109e2a:	d001      	beq.n	8109e30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8109e2c:	2301      	movs	r3, #1
 8109e2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8109e30:	4b7a      	ldr	r3, [pc, #488]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8109e38:	687b      	ldr	r3, [r7, #4]
 8109e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8109e3e:	4977      	ldr	r1, [pc, #476]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109e40:	4313      	orrs	r3, r2
 8109e42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8109e44:	687b      	ldr	r3, [r7, #4]
 8109e46:	681b      	ldr	r3, [r3, #0]
 8109e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8109e4c:	2b00      	cmp	r3, #0
 8109e4e:	d034      	beq.n	8109eba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8109e50:	687b      	ldr	r3, [r7, #4]
 8109e52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8109e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109e5a:	d01d      	beq.n	8109e98 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8109e5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8109e60:	d817      	bhi.n	8109e92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8109e62:	2b00      	cmp	r3, #0
 8109e64:	d003      	beq.n	8109e6e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8109e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109e6a:	d009      	beq.n	8109e80 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8109e6c:	e011      	b.n	8109e92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8109e6e:	687b      	ldr	r3, [r7, #4]
 8109e70:	3304      	adds	r3, #4
 8109e72:	2100      	movs	r1, #0
 8109e74:	4618      	mov	r0, r3
 8109e76:	f000 fbff 	bl	810a678 <RCCEx_PLL2_Config>
 8109e7a:	4603      	mov	r3, r0
 8109e7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8109e7e:	e00c      	b.n	8109e9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8109e80:	687b      	ldr	r3, [r7, #4]
 8109e82:	3324      	adds	r3, #36	; 0x24
 8109e84:	2102      	movs	r1, #2
 8109e86:	4618      	mov	r0, r3
 8109e88:	f000 fca8 	bl	810a7dc <RCCEx_PLL3_Config>
 8109e8c:	4603      	mov	r3, r0
 8109e8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8109e90:	e003      	b.n	8109e9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109e92:	2301      	movs	r3, #1
 8109e94:	75fb      	strb	r3, [r7, #23]
      break;
 8109e96:	e000      	b.n	8109e9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8109e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109e9a:	7dfb      	ldrb	r3, [r7, #23]
 8109e9c:	2b00      	cmp	r3, #0
 8109e9e:	d10a      	bne.n	8109eb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8109ea0:	4b5e      	ldr	r3, [pc, #376]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109ea4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8109ea8:	687b      	ldr	r3, [r7, #4]
 8109eaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8109eae:	495b      	ldr	r1, [pc, #364]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109eb0:	4313      	orrs	r3, r2
 8109eb2:	658b      	str	r3, [r1, #88]	; 0x58
 8109eb4:	e001      	b.n	8109eba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109eb6:	7dfb      	ldrb	r3, [r7, #23]
 8109eb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8109eba:	687b      	ldr	r3, [r7, #4]
 8109ebc:	681b      	ldr	r3, [r3, #0]
 8109ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8109ec2:	2b00      	cmp	r3, #0
 8109ec4:	d033      	beq.n	8109f2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8109ec6:	687b      	ldr	r3, [r7, #4]
 8109ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109ecc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109ed0:	d01c      	beq.n	8109f0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8109ed2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8109ed6:	d816      	bhi.n	8109f06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8109ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109edc:	d003      	beq.n	8109ee6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8109ede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8109ee2:	d007      	beq.n	8109ef4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8109ee4:	e00f      	b.n	8109f06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109ee6:	4b4d      	ldr	r3, [pc, #308]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109eea:	4a4c      	ldr	r2, [pc, #304]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8109ef2:	e00c      	b.n	8109f0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8109ef4:	687b      	ldr	r3, [r7, #4]
 8109ef6:	3324      	adds	r3, #36	; 0x24
 8109ef8:	2101      	movs	r1, #1
 8109efa:	4618      	mov	r0, r3
 8109efc:	f000 fc6e 	bl	810a7dc <RCCEx_PLL3_Config>
 8109f00:	4603      	mov	r3, r0
 8109f02:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8109f04:	e003      	b.n	8109f0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109f06:	2301      	movs	r3, #1
 8109f08:	75fb      	strb	r3, [r7, #23]
      break;
 8109f0a:	e000      	b.n	8109f0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8109f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109f0e:	7dfb      	ldrb	r3, [r7, #23]
 8109f10:	2b00      	cmp	r3, #0
 8109f12:	d10a      	bne.n	8109f2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8109f14:	4b41      	ldr	r3, [pc, #260]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109f18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109f1c:	687b      	ldr	r3, [r7, #4]
 8109f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109f22:	493e      	ldr	r1, [pc, #248]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f24:	4313      	orrs	r3, r2
 8109f26:	654b      	str	r3, [r1, #84]	; 0x54
 8109f28:	e001      	b.n	8109f2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109f2a:	7dfb      	ldrb	r3, [r7, #23]
 8109f2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8109f2e:	687b      	ldr	r3, [r7, #4]
 8109f30:	681b      	ldr	r3, [r3, #0]
 8109f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109f36:	2b00      	cmp	r3, #0
 8109f38:	d029      	beq.n	8109f8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8109f3a:	687b      	ldr	r3, [r7, #4]
 8109f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109f3e:	2b00      	cmp	r3, #0
 8109f40:	d003      	beq.n	8109f4a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8109f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109f46:	d007      	beq.n	8109f58 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8109f48:	e00f      	b.n	8109f6a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109f4a:	4b34      	ldr	r3, [pc, #208]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f4e:	4a33      	ldr	r2, [pc, #204]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109f54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109f56:	e00b      	b.n	8109f70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8109f58:	687b      	ldr	r3, [r7, #4]
 8109f5a:	3304      	adds	r3, #4
 8109f5c:	2102      	movs	r1, #2
 8109f5e:	4618      	mov	r0, r3
 8109f60:	f000 fb8a 	bl	810a678 <RCCEx_PLL2_Config>
 8109f64:	4603      	mov	r3, r0
 8109f66:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8109f68:	e002      	b.n	8109f70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8109f6a:	2301      	movs	r3, #1
 8109f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8109f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8109f70:	7dfb      	ldrb	r3, [r7, #23]
 8109f72:	2b00      	cmp	r3, #0
 8109f74:	d109      	bne.n	8109f8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8109f76:	4b29      	ldr	r3, [pc, #164]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109f7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8109f7e:	687b      	ldr	r3, [r7, #4]
 8109f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8109f82:	4926      	ldr	r1, [pc, #152]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109f84:	4313      	orrs	r3, r2
 8109f86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8109f88:	e001      	b.n	8109f8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8109f8a:	7dfb      	ldrb	r3, [r7, #23]
 8109f8c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8109f8e:	687b      	ldr	r3, [r7, #4]
 8109f90:	681b      	ldr	r3, [r3, #0]
 8109f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109f96:	2b00      	cmp	r3, #0
 8109f98:	d00a      	beq.n	8109fb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8109f9a:	687b      	ldr	r3, [r7, #4]
 8109f9c:	3324      	adds	r3, #36	; 0x24
 8109f9e:	2102      	movs	r1, #2
 8109fa0:	4618      	mov	r0, r3
 8109fa2:	f000 fc1b 	bl	810a7dc <RCCEx_PLL3_Config>
 8109fa6:	4603      	mov	r3, r0
 8109fa8:	2b00      	cmp	r3, #0
 8109faa:	d001      	beq.n	8109fb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8109fac:	2301      	movs	r3, #1
 8109fae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8109fb0:	687b      	ldr	r3, [r7, #4]
 8109fb2:	681b      	ldr	r3, [r3, #0]
 8109fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8109fb8:	2b00      	cmp	r3, #0
 8109fba:	d033      	beq.n	810a024 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8109fbc:	687b      	ldr	r3, [r7, #4]
 8109fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8109fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109fc4:	d017      	beq.n	8109ff6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8109fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109fca:	d811      	bhi.n	8109ff0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8109fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109fd0:	d013      	beq.n	8109ffa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8109fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109fd6:	d80b      	bhi.n	8109ff0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8109fd8:	2b00      	cmp	r3, #0
 8109fda:	d010      	beq.n	8109ffe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8109fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109fe0:	d106      	bne.n	8109ff0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8109fe2:	4b0e      	ldr	r3, [pc, #56]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109fe6:	4a0d      	ldr	r2, [pc, #52]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8109fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8109fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8109fee:	e007      	b.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8109ff0:	2301      	movs	r3, #1
 8109ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8109ff4:	e004      	b.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8109ff6:	bf00      	nop
 8109ff8:	e002      	b.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8109ffa:	bf00      	nop
 8109ffc:	e000      	b.n	810a000 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8109ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 810a000:	7dfb      	ldrb	r3, [r7, #23]
 810a002:	2b00      	cmp	r3, #0
 810a004:	d10c      	bne.n	810a020 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810a006:	4b05      	ldr	r3, [pc, #20]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810a008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a00a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a012:	4902      	ldr	r1, [pc, #8]	; (810a01c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810a014:	4313      	orrs	r3, r2
 810a016:	654b      	str	r3, [r1, #84]	; 0x54
 810a018:	e004      	b.n	810a024 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810a01a:	bf00      	nop
 810a01c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a020:	7dfb      	ldrb	r3, [r7, #23]
 810a022:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810a024:	687b      	ldr	r3, [r7, #4]
 810a026:	681b      	ldr	r3, [r3, #0]
 810a028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810a02c:	2b00      	cmp	r3, #0
 810a02e:	d008      	beq.n	810a042 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810a030:	4b31      	ldr	r3, [pc, #196]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a034:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810a038:	687b      	ldr	r3, [r7, #4]
 810a03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a03c:	492e      	ldr	r1, [pc, #184]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a03e:	4313      	orrs	r3, r2
 810a040:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810a042:	687b      	ldr	r3, [r7, #4]
 810a044:	681b      	ldr	r3, [r3, #0]
 810a046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810a04a:	2b00      	cmp	r3, #0
 810a04c:	d009      	beq.n	810a062 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810a04e:	4b2a      	ldr	r3, [pc, #168]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a050:	691b      	ldr	r3, [r3, #16]
 810a052:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810a056:	687b      	ldr	r3, [r7, #4]
 810a058:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810a05c:	4926      	ldr	r1, [pc, #152]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a05e:	4313      	orrs	r3, r2
 810a060:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810a062:	687b      	ldr	r3, [r7, #4]
 810a064:	681b      	ldr	r3, [r3, #0]
 810a066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810a06a:	2b00      	cmp	r3, #0
 810a06c:	d008      	beq.n	810a080 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810a06e:	4b22      	ldr	r3, [pc, #136]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a072:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810a076:	687b      	ldr	r3, [r7, #4]
 810a078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810a07a:	491f      	ldr	r1, [pc, #124]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a07c:	4313      	orrs	r3, r2
 810a07e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810a080:	687b      	ldr	r3, [r7, #4]
 810a082:	681b      	ldr	r3, [r3, #0]
 810a084:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810a088:	2b00      	cmp	r3, #0
 810a08a:	d00d      	beq.n	810a0a8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810a08c:	4b1a      	ldr	r3, [pc, #104]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a08e:	691b      	ldr	r3, [r3, #16]
 810a090:	4a19      	ldr	r2, [pc, #100]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810a096:	6113      	str	r3, [r2, #16]
 810a098:	4b17      	ldr	r3, [pc, #92]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a09a:	691a      	ldr	r2, [r3, #16]
 810a09c:	687b      	ldr	r3, [r7, #4]
 810a09e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810a0a2:	4915      	ldr	r1, [pc, #84]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0a4:	4313      	orrs	r3, r2
 810a0a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810a0a8:	687b      	ldr	r3, [r7, #4]
 810a0aa:	681b      	ldr	r3, [r3, #0]
 810a0ac:	2b00      	cmp	r3, #0
 810a0ae:	da08      	bge.n	810a0c2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810a0b0:	4b11      	ldr	r3, [pc, #68]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a0b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810a0b8:	687b      	ldr	r3, [r7, #4]
 810a0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a0bc:	490e      	ldr	r1, [pc, #56]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0be:	4313      	orrs	r3, r2
 810a0c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810a0c2:	687b      	ldr	r3, [r7, #4]
 810a0c4:	681b      	ldr	r3, [r3, #0]
 810a0c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810a0ca:	2b00      	cmp	r3, #0
 810a0cc:	d009      	beq.n	810a0e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810a0ce:	4b0a      	ldr	r3, [pc, #40]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a0d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810a0d6:	687b      	ldr	r3, [r7, #4]
 810a0d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810a0dc:	4906      	ldr	r1, [pc, #24]	; (810a0f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810a0de:	4313      	orrs	r3, r2
 810a0e0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810a0e2:	7dbb      	ldrb	r3, [r7, #22]
 810a0e4:	2b00      	cmp	r3, #0
 810a0e6:	d101      	bne.n	810a0ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 810a0e8:	2300      	movs	r3, #0
 810a0ea:	e000      	b.n	810a0ee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 810a0ec:	2301      	movs	r3, #1
}
 810a0ee:	4618      	mov	r0, r3
 810a0f0:	3718      	adds	r7, #24
 810a0f2:	46bd      	mov	sp, r7
 810a0f4:	bd80      	pop	{r7, pc}
 810a0f6:	bf00      	nop
 810a0f8:	58024400 	.word	0x58024400

0810a0fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810a0fc:	b580      	push	{r7, lr}
 810a0fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810a100:	f7ff f858 	bl	81091b4 <HAL_RCC_GetHCLKFreq>
 810a104:	4602      	mov	r2, r0
 810a106:	4b06      	ldr	r3, [pc, #24]	; (810a120 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810a108:	6a1b      	ldr	r3, [r3, #32]
 810a10a:	091b      	lsrs	r3, r3, #4
 810a10c:	f003 0307 	and.w	r3, r3, #7
 810a110:	4904      	ldr	r1, [pc, #16]	; (810a124 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810a112:	5ccb      	ldrb	r3, [r1, r3]
 810a114:	f003 031f 	and.w	r3, r3, #31
 810a118:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810a11c:	4618      	mov	r0, r3
 810a11e:	bd80      	pop	{r7, pc}
 810a120:	58024400 	.word	0x58024400
 810a124:	0810e918 	.word	0x0810e918

0810a128 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810a128:	b480      	push	{r7}
 810a12a:	b089      	sub	sp, #36	; 0x24
 810a12c:	af00      	add	r7, sp, #0
 810a12e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a130:	4ba1      	ldr	r3, [pc, #644]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a134:	f003 0303 	and.w	r3, r3, #3
 810a138:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810a13a:	4b9f      	ldr	r3, [pc, #636]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a13e:	0b1b      	lsrs	r3, r3, #12
 810a140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810a144:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810a146:	4b9c      	ldr	r3, [pc, #624]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a14a:	091b      	lsrs	r3, r3, #4
 810a14c:	f003 0301 	and.w	r3, r3, #1
 810a150:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810a152:	4b99      	ldr	r3, [pc, #612]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a156:	08db      	lsrs	r3, r3, #3
 810a158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a15c:	693a      	ldr	r2, [r7, #16]
 810a15e:	fb02 f303 	mul.w	r3, r2, r3
 810a162:	ee07 3a90 	vmov	s15, r3
 810a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a16a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810a16e:	697b      	ldr	r3, [r7, #20]
 810a170:	2b00      	cmp	r3, #0
 810a172:	f000 8111 	beq.w	810a398 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810a176:	69bb      	ldr	r3, [r7, #24]
 810a178:	2b02      	cmp	r3, #2
 810a17a:	f000 8083 	beq.w	810a284 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810a17e:	69bb      	ldr	r3, [r7, #24]
 810a180:	2b02      	cmp	r3, #2
 810a182:	f200 80a1 	bhi.w	810a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810a186:	69bb      	ldr	r3, [r7, #24]
 810a188:	2b00      	cmp	r3, #0
 810a18a:	d003      	beq.n	810a194 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810a18c:	69bb      	ldr	r3, [r7, #24]
 810a18e:	2b01      	cmp	r3, #1
 810a190:	d056      	beq.n	810a240 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810a192:	e099      	b.n	810a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a194:	4b88      	ldr	r3, [pc, #544]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a196:	681b      	ldr	r3, [r3, #0]
 810a198:	f003 0320 	and.w	r3, r3, #32
 810a19c:	2b00      	cmp	r3, #0
 810a19e:	d02d      	beq.n	810a1fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810a1a0:	4b85      	ldr	r3, [pc, #532]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a1a2:	681b      	ldr	r3, [r3, #0]
 810a1a4:	08db      	lsrs	r3, r3, #3
 810a1a6:	f003 0303 	and.w	r3, r3, #3
 810a1aa:	4a84      	ldr	r2, [pc, #528]	; (810a3bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810a1ac:	fa22 f303 	lsr.w	r3, r2, r3
 810a1b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a1b2:	68bb      	ldr	r3, [r7, #8]
 810a1b4:	ee07 3a90 	vmov	s15, r3
 810a1b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a1bc:	697b      	ldr	r3, [r7, #20]
 810a1be:	ee07 3a90 	vmov	s15, r3
 810a1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a1ca:	4b7b      	ldr	r3, [pc, #492]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a1d2:	ee07 3a90 	vmov	s15, r3
 810a1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a1da:	ed97 6a03 	vldr	s12, [r7, #12]
 810a1de:	eddf 5a78 	vldr	s11, [pc, #480]	; 810a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810a1fa:	e087      	b.n	810a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a1fc:	697b      	ldr	r3, [r7, #20]
 810a1fe:	ee07 3a90 	vmov	s15, r3
 810a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a206:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810a3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a20e:	4b6a      	ldr	r3, [pc, #424]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a216:	ee07 3a90 	vmov	s15, r3
 810a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a21e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a222:	eddf 5a67 	vldr	s11, [pc, #412]	; 810a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a22e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a23a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a23e:	e065      	b.n	810a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a240:	697b      	ldr	r3, [r7, #20]
 810a242:	ee07 3a90 	vmov	s15, r3
 810a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a24a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810a24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a252:	4b59      	ldr	r3, [pc, #356]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a25a:	ee07 3a90 	vmov	s15, r3
 810a25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a262:	ed97 6a03 	vldr	s12, [r7, #12]
 810a266:	eddf 5a56 	vldr	s11, [pc, #344]	; 810a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a27e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a282:	e043      	b.n	810a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a284:	697b      	ldr	r3, [r7, #20]
 810a286:	ee07 3a90 	vmov	s15, r3
 810a28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a28e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810a3cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810a292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a296:	4b48      	ldr	r3, [pc, #288]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a29e:	ee07 3a90 	vmov	s15, r3
 810a2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 810a2aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 810a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a2c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a2c6:	e021      	b.n	810a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810a2c8:	697b      	ldr	r3, [r7, #20]
 810a2ca:	ee07 3a90 	vmov	s15, r3
 810a2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a2d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810a2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a2da:	4b37      	ldr	r3, [pc, #220]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a2e2:	ee07 3a90 	vmov	s15, r3
 810a2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 810a2ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 810a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810a2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a302:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a30a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810a30c:	4b2a      	ldr	r3, [pc, #168]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a310:	0a5b      	lsrs	r3, r3, #9
 810a312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a316:	ee07 3a90 	vmov	s15, r3
 810a31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a31e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a322:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a326:	edd7 6a07 	vldr	s13, [r7, #28]
 810a32a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a332:	ee17 2a90 	vmov	r2, s15
 810a336:	687b      	ldr	r3, [r7, #4]
 810a338:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810a33a:	4b1f      	ldr	r3, [pc, #124]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a33e:	0c1b      	lsrs	r3, r3, #16
 810a340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a344:	ee07 3a90 	vmov	s15, r3
 810a348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a34c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a350:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a354:	edd7 6a07 	vldr	s13, [r7, #28]
 810a358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a360:	ee17 2a90 	vmov	r2, s15
 810a364:	687b      	ldr	r3, [r7, #4]
 810a366:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810a368:	4b13      	ldr	r3, [pc, #76]	; (810a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810a36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a36c:	0e1b      	lsrs	r3, r3, #24
 810a36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a372:	ee07 3a90 	vmov	s15, r3
 810a376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a37a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a37e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a382:	edd7 6a07 	vldr	s13, [r7, #28]
 810a386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a38e:	ee17 2a90 	vmov	r2, s15
 810a392:	687b      	ldr	r3, [r7, #4]
 810a394:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810a396:	e008      	b.n	810a3aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810a398:	687b      	ldr	r3, [r7, #4]
 810a39a:	2200      	movs	r2, #0
 810a39c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810a39e:	687b      	ldr	r3, [r7, #4]
 810a3a0:	2200      	movs	r2, #0
 810a3a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810a3a4:	687b      	ldr	r3, [r7, #4]
 810a3a6:	2200      	movs	r2, #0
 810a3a8:	609a      	str	r2, [r3, #8]
}
 810a3aa:	bf00      	nop
 810a3ac:	3724      	adds	r7, #36	; 0x24
 810a3ae:	46bd      	mov	sp, r7
 810a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3b4:	4770      	bx	lr
 810a3b6:	bf00      	nop
 810a3b8:	58024400 	.word	0x58024400
 810a3bc:	03d09000 	.word	0x03d09000
 810a3c0:	46000000 	.word	0x46000000
 810a3c4:	4c742400 	.word	0x4c742400
 810a3c8:	4a742400 	.word	0x4a742400
 810a3cc:	4b742400 	.word	0x4b742400

0810a3d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810a3d0:	b480      	push	{r7}
 810a3d2:	b089      	sub	sp, #36	; 0x24
 810a3d4:	af00      	add	r7, sp, #0
 810a3d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a3d8:	4ba1      	ldr	r3, [pc, #644]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a3dc:	f003 0303 	and.w	r3, r3, #3
 810a3e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810a3e2:	4b9f      	ldr	r3, [pc, #636]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a3e6:	0d1b      	lsrs	r3, r3, #20
 810a3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810a3ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810a3ee:	4b9c      	ldr	r3, [pc, #624]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a3f2:	0a1b      	lsrs	r3, r3, #8
 810a3f4:	f003 0301 	and.w	r3, r3, #1
 810a3f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810a3fa:	4b99      	ldr	r3, [pc, #612]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a3fe:	08db      	lsrs	r3, r3, #3
 810a400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a404:	693a      	ldr	r2, [r7, #16]
 810a406:	fb02 f303 	mul.w	r3, r2, r3
 810a40a:	ee07 3a90 	vmov	s15, r3
 810a40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a412:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810a416:	697b      	ldr	r3, [r7, #20]
 810a418:	2b00      	cmp	r3, #0
 810a41a:	f000 8111 	beq.w	810a640 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810a41e:	69bb      	ldr	r3, [r7, #24]
 810a420:	2b02      	cmp	r3, #2
 810a422:	f000 8083 	beq.w	810a52c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810a426:	69bb      	ldr	r3, [r7, #24]
 810a428:	2b02      	cmp	r3, #2
 810a42a:	f200 80a1 	bhi.w	810a570 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810a42e:	69bb      	ldr	r3, [r7, #24]
 810a430:	2b00      	cmp	r3, #0
 810a432:	d003      	beq.n	810a43c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810a434:	69bb      	ldr	r3, [r7, #24]
 810a436:	2b01      	cmp	r3, #1
 810a438:	d056      	beq.n	810a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810a43a:	e099      	b.n	810a570 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a43c:	4b88      	ldr	r3, [pc, #544]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a43e:	681b      	ldr	r3, [r3, #0]
 810a440:	f003 0320 	and.w	r3, r3, #32
 810a444:	2b00      	cmp	r3, #0
 810a446:	d02d      	beq.n	810a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810a448:	4b85      	ldr	r3, [pc, #532]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a44a:	681b      	ldr	r3, [r3, #0]
 810a44c:	08db      	lsrs	r3, r3, #3
 810a44e:	f003 0303 	and.w	r3, r3, #3
 810a452:	4a84      	ldr	r2, [pc, #528]	; (810a664 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810a454:	fa22 f303 	lsr.w	r3, r2, r3
 810a458:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a45a:	68bb      	ldr	r3, [r7, #8]
 810a45c:	ee07 3a90 	vmov	s15, r3
 810a460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a464:	697b      	ldr	r3, [r7, #20]
 810a466:	ee07 3a90 	vmov	s15, r3
 810a46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a472:	4b7b      	ldr	r3, [pc, #492]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a47a:	ee07 3a90 	vmov	s15, r3
 810a47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a482:	ed97 6a03 	vldr	s12, [r7, #12]
 810a486:	eddf 5a78 	vldr	s11, [pc, #480]	; 810a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a49e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810a4a2:	e087      	b.n	810a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a4a4:	697b      	ldr	r3, [r7, #20]
 810a4a6:	ee07 3a90 	vmov	s15, r3
 810a4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a4ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810a66c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810a4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a4b6:	4b6a      	ldr	r3, [pc, #424]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a4be:	ee07 3a90 	vmov	s15, r3
 810a4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a4c6:	ed97 6a03 	vldr	s12, [r7, #12]
 810a4ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 810a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a4d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a4e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a4e6:	e065      	b.n	810a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a4e8:	697b      	ldr	r3, [r7, #20]
 810a4ea:	ee07 3a90 	vmov	s15, r3
 810a4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a4f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a4fa:	4b59      	ldr	r3, [pc, #356]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a502:	ee07 3a90 	vmov	s15, r3
 810a506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a50a:	ed97 6a03 	vldr	s12, [r7, #12]
 810a50e:	eddf 5a56 	vldr	s11, [pc, #344]	; 810a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a51a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a522:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a52a:	e043      	b.n	810a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a52c:	697b      	ldr	r3, [r7, #20]
 810a52e:	ee07 3a90 	vmov	s15, r3
 810a532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a536:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810a674 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810a53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a53e:	4b48      	ldr	r3, [pc, #288]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a546:	ee07 3a90 	vmov	s15, r3
 810a54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a54e:	ed97 6a03 	vldr	s12, [r7, #12]
 810a552:	eddf 5a45 	vldr	s11, [pc, #276]	; 810a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a55e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a56a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a56e:	e021      	b.n	810a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810a570:	697b      	ldr	r3, [r7, #20]
 810a572:	ee07 3a90 	vmov	s15, r3
 810a576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a57a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810a670 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810a57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a582:	4b37      	ldr	r3, [pc, #220]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a58a:	ee07 3a90 	vmov	s15, r3
 810a58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a592:	ed97 6a03 	vldr	s12, [r7, #12]
 810a596:	eddf 5a34 	vldr	s11, [pc, #208]	; 810a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810a59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a5a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a5ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810a5b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810a5b4:	4b2a      	ldr	r3, [pc, #168]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a5b8:	0a5b      	lsrs	r3, r3, #9
 810a5ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a5be:	ee07 3a90 	vmov	s15, r3
 810a5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a5c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a5ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a5ce:	edd7 6a07 	vldr	s13, [r7, #28]
 810a5d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a5d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a5da:	ee17 2a90 	vmov	r2, s15
 810a5de:	687b      	ldr	r3, [r7, #4]
 810a5e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810a5e2:	4b1f      	ldr	r3, [pc, #124]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a5e6:	0c1b      	lsrs	r3, r3, #16
 810a5e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a5ec:	ee07 3a90 	vmov	s15, r3
 810a5f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a5f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a5f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a5fc:	edd7 6a07 	vldr	s13, [r7, #28]
 810a600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a608:	ee17 2a90 	vmov	r2, s15
 810a60c:	687b      	ldr	r3, [r7, #4]
 810a60e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810a610:	4b13      	ldr	r3, [pc, #76]	; (810a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a614:	0e1b      	lsrs	r3, r3, #24
 810a616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a61a:	ee07 3a90 	vmov	s15, r3
 810a61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810a626:	ee37 7a87 	vadd.f32	s14, s15, s14
 810a62a:	edd7 6a07 	vldr	s13, [r7, #28]
 810a62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a636:	ee17 2a90 	vmov	r2, s15
 810a63a:	687b      	ldr	r3, [r7, #4]
 810a63c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810a63e:	e008      	b.n	810a652 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810a640:	687b      	ldr	r3, [r7, #4]
 810a642:	2200      	movs	r2, #0
 810a644:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810a646:	687b      	ldr	r3, [r7, #4]
 810a648:	2200      	movs	r2, #0
 810a64a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810a64c:	687b      	ldr	r3, [r7, #4]
 810a64e:	2200      	movs	r2, #0
 810a650:	609a      	str	r2, [r3, #8]
}
 810a652:	bf00      	nop
 810a654:	3724      	adds	r7, #36	; 0x24
 810a656:	46bd      	mov	sp, r7
 810a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a65c:	4770      	bx	lr
 810a65e:	bf00      	nop
 810a660:	58024400 	.word	0x58024400
 810a664:	03d09000 	.word	0x03d09000
 810a668:	46000000 	.word	0x46000000
 810a66c:	4c742400 	.word	0x4c742400
 810a670:	4a742400 	.word	0x4a742400
 810a674:	4b742400 	.word	0x4b742400

0810a678 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810a678:	b580      	push	{r7, lr}
 810a67a:	b084      	sub	sp, #16
 810a67c:	af00      	add	r7, sp, #0
 810a67e:	6078      	str	r0, [r7, #4]
 810a680:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a682:	2300      	movs	r3, #0
 810a684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a686:	4b54      	ldr	r3, [pc, #336]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a68a:	f003 0303 	and.w	r3, r3, #3
 810a68e:	2b03      	cmp	r3, #3
 810a690:	d101      	bne.n	810a696 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810a692:	2301      	movs	r3, #1
 810a694:	e09b      	b.n	810a7ce <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810a696:	4b50      	ldr	r3, [pc, #320]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a698:	681b      	ldr	r3, [r3, #0]
 810a69a:	4a4f      	ldr	r2, [pc, #316]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a69c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810a6a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a6a2:	f7f8 fc0d 	bl	8102ec0 <HAL_GetTick>
 810a6a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a6a8:	e008      	b.n	810a6bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a6aa:	f7f8 fc09 	bl	8102ec0 <HAL_GetTick>
 810a6ae:	4602      	mov	r2, r0
 810a6b0:	68bb      	ldr	r3, [r7, #8]
 810a6b2:	1ad3      	subs	r3, r2, r3
 810a6b4:	2b02      	cmp	r3, #2
 810a6b6:	d901      	bls.n	810a6bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a6b8:	2303      	movs	r3, #3
 810a6ba:	e088      	b.n	810a7ce <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810a6bc:	4b46      	ldr	r3, [pc, #280]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a6be:	681b      	ldr	r3, [r3, #0]
 810a6c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a6c4:	2b00      	cmp	r3, #0
 810a6c6:	d1f0      	bne.n	810a6aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810a6c8:	4b43      	ldr	r3, [pc, #268]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a6cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810a6d0:	687b      	ldr	r3, [r7, #4]
 810a6d2:	681b      	ldr	r3, [r3, #0]
 810a6d4:	031b      	lsls	r3, r3, #12
 810a6d6:	4940      	ldr	r1, [pc, #256]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a6d8:	4313      	orrs	r3, r2
 810a6da:	628b      	str	r3, [r1, #40]	; 0x28
 810a6dc:	687b      	ldr	r3, [r7, #4]
 810a6de:	685b      	ldr	r3, [r3, #4]
 810a6e0:	3b01      	subs	r3, #1
 810a6e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a6e6:	687b      	ldr	r3, [r7, #4]
 810a6e8:	689b      	ldr	r3, [r3, #8]
 810a6ea:	3b01      	subs	r3, #1
 810a6ec:	025b      	lsls	r3, r3, #9
 810a6ee:	b29b      	uxth	r3, r3
 810a6f0:	431a      	orrs	r2, r3
 810a6f2:	687b      	ldr	r3, [r7, #4]
 810a6f4:	68db      	ldr	r3, [r3, #12]
 810a6f6:	3b01      	subs	r3, #1
 810a6f8:	041b      	lsls	r3, r3, #16
 810a6fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a6fe:	431a      	orrs	r2, r3
 810a700:	687b      	ldr	r3, [r7, #4]
 810a702:	691b      	ldr	r3, [r3, #16]
 810a704:	3b01      	subs	r3, #1
 810a706:	061b      	lsls	r3, r3, #24
 810a708:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a70c:	4932      	ldr	r1, [pc, #200]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a70e:	4313      	orrs	r3, r2
 810a710:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810a712:	4b31      	ldr	r3, [pc, #196]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a716:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810a71a:	687b      	ldr	r3, [r7, #4]
 810a71c:	695b      	ldr	r3, [r3, #20]
 810a71e:	492e      	ldr	r1, [pc, #184]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a720:	4313      	orrs	r3, r2
 810a722:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810a724:	4b2c      	ldr	r3, [pc, #176]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a728:	f023 0220 	bic.w	r2, r3, #32
 810a72c:	687b      	ldr	r3, [r7, #4]
 810a72e:	699b      	ldr	r3, [r3, #24]
 810a730:	4929      	ldr	r1, [pc, #164]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a732:	4313      	orrs	r3, r2
 810a734:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810a736:	4b28      	ldr	r3, [pc, #160]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a73a:	4a27      	ldr	r2, [pc, #156]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a73c:	f023 0310 	bic.w	r3, r3, #16
 810a740:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810a742:	4b25      	ldr	r3, [pc, #148]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a74a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a74e:	687a      	ldr	r2, [r7, #4]
 810a750:	69d2      	ldr	r2, [r2, #28]
 810a752:	00d2      	lsls	r2, r2, #3
 810a754:	4920      	ldr	r1, [pc, #128]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a756:	4313      	orrs	r3, r2
 810a758:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810a75a:	4b1f      	ldr	r3, [pc, #124]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a75e:	4a1e      	ldr	r2, [pc, #120]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a760:	f043 0310 	orr.w	r3, r3, #16
 810a764:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a766:	683b      	ldr	r3, [r7, #0]
 810a768:	2b00      	cmp	r3, #0
 810a76a:	d106      	bne.n	810a77a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810a76c:	4b1a      	ldr	r3, [pc, #104]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a770:	4a19      	ldr	r2, [pc, #100]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a772:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810a776:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a778:	e00f      	b.n	810a79a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a77a:	683b      	ldr	r3, [r7, #0]
 810a77c:	2b01      	cmp	r3, #1
 810a77e:	d106      	bne.n	810a78e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810a780:	4b15      	ldr	r3, [pc, #84]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a784:	4a14      	ldr	r2, [pc, #80]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810a78a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a78c:	e005      	b.n	810a79a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810a78e:	4b12      	ldr	r3, [pc, #72]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a792:	4a11      	ldr	r2, [pc, #68]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810a798:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810a79a:	4b0f      	ldr	r3, [pc, #60]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a79c:	681b      	ldr	r3, [r3, #0]
 810a79e:	4a0e      	ldr	r2, [pc, #56]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a7a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810a7a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a7a6:	f7f8 fb8b 	bl	8102ec0 <HAL_GetTick>
 810a7aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a7ac:	e008      	b.n	810a7c0 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810a7ae:	f7f8 fb87 	bl	8102ec0 <HAL_GetTick>
 810a7b2:	4602      	mov	r2, r0
 810a7b4:	68bb      	ldr	r3, [r7, #8]
 810a7b6:	1ad3      	subs	r3, r2, r3
 810a7b8:	2b02      	cmp	r3, #2
 810a7ba:	d901      	bls.n	810a7c0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a7bc:	2303      	movs	r3, #3
 810a7be:	e006      	b.n	810a7ce <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810a7c0:	4b05      	ldr	r3, [pc, #20]	; (810a7d8 <RCCEx_PLL2_Config+0x160>)
 810a7c2:	681b      	ldr	r3, [r3, #0]
 810a7c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a7c8:	2b00      	cmp	r3, #0
 810a7ca:	d0f0      	beq.n	810a7ae <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 810a7ce:	4618      	mov	r0, r3
 810a7d0:	3710      	adds	r7, #16
 810a7d2:	46bd      	mov	sp, r7
 810a7d4:	bd80      	pop	{r7, pc}
 810a7d6:	bf00      	nop
 810a7d8:	58024400 	.word	0x58024400

0810a7dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810a7dc:	b580      	push	{r7, lr}
 810a7de:	b084      	sub	sp, #16
 810a7e0:	af00      	add	r7, sp, #0
 810a7e2:	6078      	str	r0, [r7, #4]
 810a7e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810a7e6:	2300      	movs	r3, #0
 810a7e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810a7ea:	4b54      	ldr	r3, [pc, #336]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a7ee:	f003 0303 	and.w	r3, r3, #3
 810a7f2:	2b03      	cmp	r3, #3
 810a7f4:	d101      	bne.n	810a7fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810a7f6:	2301      	movs	r3, #1
 810a7f8:	e09b      	b.n	810a932 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810a7fa:	4b50      	ldr	r3, [pc, #320]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a7fc:	681b      	ldr	r3, [r3, #0]
 810a7fe:	4a4f      	ldr	r2, [pc, #316]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a806:	f7f8 fb5b 	bl	8102ec0 <HAL_GetTick>
 810a80a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a80c:	e008      	b.n	810a820 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a80e:	f7f8 fb57 	bl	8102ec0 <HAL_GetTick>
 810a812:	4602      	mov	r2, r0
 810a814:	68bb      	ldr	r3, [r7, #8]
 810a816:	1ad3      	subs	r3, r2, r3
 810a818:	2b02      	cmp	r3, #2
 810a81a:	d901      	bls.n	810a820 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810a81c:	2303      	movs	r3, #3
 810a81e:	e088      	b.n	810a932 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810a820:	4b46      	ldr	r3, [pc, #280]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a822:	681b      	ldr	r3, [r3, #0]
 810a824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a828:	2b00      	cmp	r3, #0
 810a82a:	d1f0      	bne.n	810a80e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810a82c:	4b43      	ldr	r3, [pc, #268]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a830:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810a834:	687b      	ldr	r3, [r7, #4]
 810a836:	681b      	ldr	r3, [r3, #0]
 810a838:	051b      	lsls	r3, r3, #20
 810a83a:	4940      	ldr	r1, [pc, #256]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a83c:	4313      	orrs	r3, r2
 810a83e:	628b      	str	r3, [r1, #40]	; 0x28
 810a840:	687b      	ldr	r3, [r7, #4]
 810a842:	685b      	ldr	r3, [r3, #4]
 810a844:	3b01      	subs	r3, #1
 810a846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810a84a:	687b      	ldr	r3, [r7, #4]
 810a84c:	689b      	ldr	r3, [r3, #8]
 810a84e:	3b01      	subs	r3, #1
 810a850:	025b      	lsls	r3, r3, #9
 810a852:	b29b      	uxth	r3, r3
 810a854:	431a      	orrs	r2, r3
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	68db      	ldr	r3, [r3, #12]
 810a85a:	3b01      	subs	r3, #1
 810a85c:	041b      	lsls	r3, r3, #16
 810a85e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810a862:	431a      	orrs	r2, r3
 810a864:	687b      	ldr	r3, [r7, #4]
 810a866:	691b      	ldr	r3, [r3, #16]
 810a868:	3b01      	subs	r3, #1
 810a86a:	061b      	lsls	r3, r3, #24
 810a86c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810a870:	4932      	ldr	r1, [pc, #200]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a872:	4313      	orrs	r3, r2
 810a874:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810a876:	4b31      	ldr	r3, [pc, #196]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a87a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810a87e:	687b      	ldr	r3, [r7, #4]
 810a880:	695b      	ldr	r3, [r3, #20]
 810a882:	492e      	ldr	r1, [pc, #184]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a884:	4313      	orrs	r3, r2
 810a886:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810a888:	4b2c      	ldr	r3, [pc, #176]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a88c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810a890:	687b      	ldr	r3, [r7, #4]
 810a892:	699b      	ldr	r3, [r3, #24]
 810a894:	4929      	ldr	r1, [pc, #164]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a896:	4313      	orrs	r3, r2
 810a898:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810a89a:	4b28      	ldr	r3, [pc, #160]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a89e:	4a27      	ldr	r2, [pc, #156]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a8a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810a8a6:	4b25      	ldr	r3, [pc, #148]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a8aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810a8ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810a8b2:	687a      	ldr	r2, [r7, #4]
 810a8b4:	69d2      	ldr	r2, [r2, #28]
 810a8b6:	00d2      	lsls	r2, r2, #3
 810a8b8:	4920      	ldr	r1, [pc, #128]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8ba:	4313      	orrs	r3, r2
 810a8bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810a8be:	4b1f      	ldr	r3, [pc, #124]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8c2:	4a1e      	ldr	r2, [pc, #120]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810a8c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810a8ca:	683b      	ldr	r3, [r7, #0]
 810a8cc:	2b00      	cmp	r3, #0
 810a8ce:	d106      	bne.n	810a8de <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810a8d0:	4b1a      	ldr	r3, [pc, #104]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8d4:	4a19      	ldr	r2, [pc, #100]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810a8da:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a8dc:	e00f      	b.n	810a8fe <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810a8de:	683b      	ldr	r3, [r7, #0]
 810a8e0:	2b01      	cmp	r3, #1
 810a8e2:	d106      	bne.n	810a8f2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810a8e4:	4b15      	ldr	r3, [pc, #84]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8e8:	4a14      	ldr	r2, [pc, #80]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810a8ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 810a8f0:	e005      	b.n	810a8fe <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810a8f2:	4b12      	ldr	r3, [pc, #72]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8f6:	4a11      	ldr	r2, [pc, #68]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a8f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810a8fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810a8fe:	4b0f      	ldr	r3, [pc, #60]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a900:	681b      	ldr	r3, [r3, #0]
 810a902:	4a0e      	ldr	r2, [pc, #56]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810a908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810a90a:	f7f8 fad9 	bl	8102ec0 <HAL_GetTick>
 810a90e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a910:	e008      	b.n	810a924 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810a912:	f7f8 fad5 	bl	8102ec0 <HAL_GetTick>
 810a916:	4602      	mov	r2, r0
 810a918:	68bb      	ldr	r3, [r7, #8]
 810a91a:	1ad3      	subs	r3, r2, r3
 810a91c:	2b02      	cmp	r3, #2
 810a91e:	d901      	bls.n	810a924 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810a920:	2303      	movs	r3, #3
 810a922:	e006      	b.n	810a932 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810a924:	4b05      	ldr	r3, [pc, #20]	; (810a93c <RCCEx_PLL3_Config+0x160>)
 810a926:	681b      	ldr	r3, [r3, #0]
 810a928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a92c:	2b00      	cmp	r3, #0
 810a92e:	d0f0      	beq.n	810a912 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810a930:	7bfb      	ldrb	r3, [r7, #15]
}
 810a932:	4618      	mov	r0, r3
 810a934:	3710      	adds	r7, #16
 810a936:	46bd      	mov	sp, r7
 810a938:	bd80      	pop	{r7, pc}
 810a93a:	bf00      	nop
 810a93c:	58024400 	.word	0x58024400

0810a940 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810a940:	b580      	push	{r7, lr}
 810a942:	b084      	sub	sp, #16
 810a944:	af00      	add	r7, sp, #0
 810a946:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810a948:	2300      	movs	r3, #0
 810a94a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810a94c:	687b      	ldr	r3, [r7, #4]
 810a94e:	2b00      	cmp	r3, #0
 810a950:	d101      	bne.n	810a956 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810a952:	2301      	movs	r3, #1
 810a954:	e0eb      	b.n	810ab2e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810a956:	687b      	ldr	r3, [r7, #4]
 810a958:	2200      	movs	r2, #0
 810a95a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810a95c:	687b      	ldr	r3, [r7, #4]
 810a95e:	681b      	ldr	r3, [r3, #0]
 810a960:	4a75      	ldr	r2, [pc, #468]	; (810ab38 <HAL_SPI_Init+0x1f8>)
 810a962:	4293      	cmp	r3, r2
 810a964:	d00f      	beq.n	810a986 <HAL_SPI_Init+0x46>
 810a966:	687b      	ldr	r3, [r7, #4]
 810a968:	681b      	ldr	r3, [r3, #0]
 810a96a:	4a74      	ldr	r2, [pc, #464]	; (810ab3c <HAL_SPI_Init+0x1fc>)
 810a96c:	4293      	cmp	r3, r2
 810a96e:	d00a      	beq.n	810a986 <HAL_SPI_Init+0x46>
 810a970:	687b      	ldr	r3, [r7, #4]
 810a972:	681b      	ldr	r3, [r3, #0]
 810a974:	4a72      	ldr	r2, [pc, #456]	; (810ab40 <HAL_SPI_Init+0x200>)
 810a976:	4293      	cmp	r3, r2
 810a978:	d005      	beq.n	810a986 <HAL_SPI_Init+0x46>
 810a97a:	687b      	ldr	r3, [r7, #4]
 810a97c:	68db      	ldr	r3, [r3, #12]
 810a97e:	2b0f      	cmp	r3, #15
 810a980:	d901      	bls.n	810a986 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810a982:	2301      	movs	r3, #1
 810a984:	e0d3      	b.n	810ab2e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810a986:	6878      	ldr	r0, [r7, #4]
 810a988:	f001 fa94 	bl	810beb4 <SPI_GetPacketSize>
 810a98c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a98e:	687b      	ldr	r3, [r7, #4]
 810a990:	681b      	ldr	r3, [r3, #0]
 810a992:	4a69      	ldr	r2, [pc, #420]	; (810ab38 <HAL_SPI_Init+0x1f8>)
 810a994:	4293      	cmp	r3, r2
 810a996:	d00c      	beq.n	810a9b2 <HAL_SPI_Init+0x72>
 810a998:	687b      	ldr	r3, [r7, #4]
 810a99a:	681b      	ldr	r3, [r3, #0]
 810a99c:	4a67      	ldr	r2, [pc, #412]	; (810ab3c <HAL_SPI_Init+0x1fc>)
 810a99e:	4293      	cmp	r3, r2
 810a9a0:	d007      	beq.n	810a9b2 <HAL_SPI_Init+0x72>
 810a9a2:	687b      	ldr	r3, [r7, #4]
 810a9a4:	681b      	ldr	r3, [r3, #0]
 810a9a6:	4a66      	ldr	r2, [pc, #408]	; (810ab40 <HAL_SPI_Init+0x200>)
 810a9a8:	4293      	cmp	r3, r2
 810a9aa:	d002      	beq.n	810a9b2 <HAL_SPI_Init+0x72>
 810a9ac:	68bb      	ldr	r3, [r7, #8]
 810a9ae:	2b08      	cmp	r3, #8
 810a9b0:	d811      	bhi.n	810a9d6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a9b2:	687b      	ldr	r3, [r7, #4]
 810a9b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a9b6:	4a60      	ldr	r2, [pc, #384]	; (810ab38 <HAL_SPI_Init+0x1f8>)
 810a9b8:	4293      	cmp	r3, r2
 810a9ba:	d009      	beq.n	810a9d0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a9bc:	687b      	ldr	r3, [r7, #4]
 810a9be:	681b      	ldr	r3, [r3, #0]
 810a9c0:	4a5e      	ldr	r2, [pc, #376]	; (810ab3c <HAL_SPI_Init+0x1fc>)
 810a9c2:	4293      	cmp	r3, r2
 810a9c4:	d004      	beq.n	810a9d0 <HAL_SPI_Init+0x90>
 810a9c6:	687b      	ldr	r3, [r7, #4]
 810a9c8:	681b      	ldr	r3, [r3, #0]
 810a9ca:	4a5d      	ldr	r2, [pc, #372]	; (810ab40 <HAL_SPI_Init+0x200>)
 810a9cc:	4293      	cmp	r3, r2
 810a9ce:	d104      	bne.n	810a9da <HAL_SPI_Init+0x9a>
 810a9d0:	68bb      	ldr	r3, [r7, #8]
 810a9d2:	2b10      	cmp	r3, #16
 810a9d4:	d901      	bls.n	810a9da <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810a9d6:	2301      	movs	r3, #1
 810a9d8:	e0a9      	b.n	810ab2e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810a9da:	687b      	ldr	r3, [r7, #4]
 810a9dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a9e0:	b2db      	uxtb	r3, r3
 810a9e2:	2b00      	cmp	r3, #0
 810a9e4:	d106      	bne.n	810a9f4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810a9e6:	687b      	ldr	r3, [r7, #4]
 810a9e8:	2200      	movs	r2, #0
 810a9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810a9ee:	6878      	ldr	r0, [r7, #4]
 810a9f0:	f7f7 fdc6 	bl	8102580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810a9f4:	687b      	ldr	r3, [r7, #4]
 810a9f6:	2202      	movs	r2, #2
 810a9f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a9fc:	687b      	ldr	r3, [r7, #4]
 810a9fe:	681b      	ldr	r3, [r3, #0]
 810aa00:	681a      	ldr	r2, [r3, #0]
 810aa02:	687b      	ldr	r3, [r7, #4]
 810aa04:	681b      	ldr	r3, [r3, #0]
 810aa06:	f022 0201 	bic.w	r2, r2, #1
 810aa0a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810aa0c:	687b      	ldr	r3, [r7, #4]
 810aa0e:	699b      	ldr	r3, [r3, #24]
 810aa10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810aa14:	d119      	bne.n	810aa4a <HAL_SPI_Init+0x10a>
 810aa16:	687b      	ldr	r3, [r7, #4]
 810aa18:	685b      	ldr	r3, [r3, #4]
 810aa1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810aa1e:	d103      	bne.n	810aa28 <HAL_SPI_Init+0xe8>
 810aa20:	687b      	ldr	r3, [r7, #4]
 810aa22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810aa24:	2b00      	cmp	r3, #0
 810aa26:	d008      	beq.n	810aa3a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810aa28:	687b      	ldr	r3, [r7, #4]
 810aa2a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810aa2c:	2b00      	cmp	r3, #0
 810aa2e:	d10c      	bne.n	810aa4a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810aa30:	687b      	ldr	r3, [r7, #4]
 810aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810aa34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810aa38:	d107      	bne.n	810aa4a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810aa3a:	687b      	ldr	r3, [r7, #4]
 810aa3c:	681b      	ldr	r3, [r3, #0]
 810aa3e:	681a      	ldr	r2, [r3, #0]
 810aa40:	687b      	ldr	r3, [r7, #4]
 810aa42:	681b      	ldr	r3, [r3, #0]
 810aa44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810aa48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810aa4a:	687b      	ldr	r3, [r7, #4]
 810aa4c:	69da      	ldr	r2, [r3, #28]
 810aa4e:	687b      	ldr	r3, [r7, #4]
 810aa50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa52:	431a      	orrs	r2, r3
 810aa54:	68fb      	ldr	r3, [r7, #12]
 810aa56:	431a      	orrs	r2, r3
 810aa58:	687b      	ldr	r3, [r7, #4]
 810aa5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810aa5c:	ea42 0103 	orr.w	r1, r2, r3
 810aa60:	687b      	ldr	r3, [r7, #4]
 810aa62:	68da      	ldr	r2, [r3, #12]
 810aa64:	687b      	ldr	r3, [r7, #4]
 810aa66:	681b      	ldr	r3, [r3, #0]
 810aa68:	430a      	orrs	r2, r1
 810aa6a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810aa6c:	687b      	ldr	r3, [r7, #4]
 810aa6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810aa70:	687b      	ldr	r3, [r7, #4]
 810aa72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810aa74:	431a      	orrs	r2, r3
 810aa76:	687b      	ldr	r3, [r7, #4]
 810aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810aa7a:	431a      	orrs	r2, r3
 810aa7c:	687b      	ldr	r3, [r7, #4]
 810aa7e:	699b      	ldr	r3, [r3, #24]
 810aa80:	431a      	orrs	r2, r3
 810aa82:	687b      	ldr	r3, [r7, #4]
 810aa84:	691b      	ldr	r3, [r3, #16]
 810aa86:	431a      	orrs	r2, r3
 810aa88:	687b      	ldr	r3, [r7, #4]
 810aa8a:	695b      	ldr	r3, [r3, #20]
 810aa8c:	431a      	orrs	r2, r3
 810aa8e:	687b      	ldr	r3, [r7, #4]
 810aa90:	6a1b      	ldr	r3, [r3, #32]
 810aa92:	431a      	orrs	r2, r3
 810aa94:	687b      	ldr	r3, [r7, #4]
 810aa96:	685b      	ldr	r3, [r3, #4]
 810aa98:	431a      	orrs	r2, r3
 810aa9a:	687b      	ldr	r3, [r7, #4]
 810aa9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810aa9e:	431a      	orrs	r2, r3
 810aaa0:	687b      	ldr	r3, [r7, #4]
 810aaa2:	689b      	ldr	r3, [r3, #8]
 810aaa4:	431a      	orrs	r2, r3
 810aaa6:	687b      	ldr	r3, [r7, #4]
 810aaa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810aaaa:	ea42 0103 	orr.w	r1, r2, r3
 810aaae:	687b      	ldr	r3, [r7, #4]
 810aab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810aab2:	687b      	ldr	r3, [r7, #4]
 810aab4:	681b      	ldr	r3, [r3, #0]
 810aab6:	430a      	orrs	r2, r1
 810aab8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810aaba:	687b      	ldr	r3, [r7, #4]
 810aabc:	685b      	ldr	r3, [r3, #4]
 810aabe:	2b00      	cmp	r3, #0
 810aac0:	d113      	bne.n	810aaea <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810aac2:	687b      	ldr	r3, [r7, #4]
 810aac4:	681b      	ldr	r3, [r3, #0]
 810aac6:	689b      	ldr	r3, [r3, #8]
 810aac8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810aacc:	687b      	ldr	r3, [r7, #4]
 810aace:	681b      	ldr	r3, [r3, #0]
 810aad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810aad4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810aad6:	687b      	ldr	r3, [r7, #4]
 810aad8:	681b      	ldr	r3, [r3, #0]
 810aada:	689b      	ldr	r3, [r3, #8]
 810aadc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810aae0:	687b      	ldr	r3, [r7, #4]
 810aae2:	681b      	ldr	r3, [r3, #0]
 810aae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810aae8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810aaea:	687b      	ldr	r3, [r7, #4]
 810aaec:	681b      	ldr	r3, [r3, #0]
 810aaee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810aaf0:	687b      	ldr	r3, [r7, #4]
 810aaf2:	681b      	ldr	r3, [r3, #0]
 810aaf4:	f022 0201 	bic.w	r2, r2, #1
 810aaf8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810aafa:	687b      	ldr	r3, [r7, #4]
 810aafc:	685b      	ldr	r3, [r3, #4]
 810aafe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810ab02:	2b00      	cmp	r3, #0
 810ab04:	d00a      	beq.n	810ab1c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810ab06:	687b      	ldr	r3, [r7, #4]
 810ab08:	681b      	ldr	r3, [r3, #0]
 810ab0a:	68db      	ldr	r3, [r3, #12]
 810ab0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810ab10:	687b      	ldr	r3, [r7, #4]
 810ab12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810ab14:	687b      	ldr	r3, [r7, #4]
 810ab16:	681b      	ldr	r3, [r3, #0]
 810ab18:	430a      	orrs	r2, r1
 810ab1a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810ab1c:	687b      	ldr	r3, [r7, #4]
 810ab1e:	2200      	movs	r2, #0
 810ab20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810ab24:	687b      	ldr	r3, [r7, #4]
 810ab26:	2201      	movs	r2, #1
 810ab28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810ab2c:	2300      	movs	r3, #0
}
 810ab2e:	4618      	mov	r0, r3
 810ab30:	3710      	adds	r7, #16
 810ab32:	46bd      	mov	sp, r7
 810ab34:	bd80      	pop	{r7, pc}
 810ab36:	bf00      	nop
 810ab38:	40013000 	.word	0x40013000
 810ab3c:	40003800 	.word	0x40003800
 810ab40:	40003c00 	.word	0x40003c00

0810ab44 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810ab44:	b580      	push	{r7, lr}
 810ab46:	b08a      	sub	sp, #40	; 0x28
 810ab48:	af02      	add	r7, sp, #8
 810ab4a:	60f8      	str	r0, [r7, #12]
 810ab4c:	60b9      	str	r1, [r7, #8]
 810ab4e:	603b      	str	r3, [r7, #0]
 810ab50:	4613      	mov	r3, r2
 810ab52:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810ab54:	68fb      	ldr	r3, [r7, #12]
 810ab56:	681b      	ldr	r3, [r3, #0]
 810ab58:	3320      	adds	r3, #32
 810ab5a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810ab5c:	2300      	movs	r3, #0
 810ab5e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 810ab60:	68fb      	ldr	r3, [r7, #12]
 810ab62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810ab66:	2b01      	cmp	r3, #1
 810ab68:	d101      	bne.n	810ab6e <HAL_SPI_Transmit+0x2a>
 810ab6a:	2302      	movs	r3, #2
 810ab6c:	e1d4      	b.n	810af18 <HAL_SPI_Transmit+0x3d4>
 810ab6e:	68fb      	ldr	r3, [r7, #12]
 810ab70:	2201      	movs	r2, #1
 810ab72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810ab76:	f7f8 f9a3 	bl	8102ec0 <HAL_GetTick>
 810ab7a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 810ab7c:	68fb      	ldr	r3, [r7, #12]
 810ab7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810ab82:	b2db      	uxtb	r3, r3
 810ab84:	2b01      	cmp	r3, #1
 810ab86:	d007      	beq.n	810ab98 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 810ab88:	2302      	movs	r3, #2
 810ab8a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810ab8c:	68fb      	ldr	r3, [r7, #12]
 810ab8e:	2200      	movs	r2, #0
 810ab90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810ab94:	7efb      	ldrb	r3, [r7, #27]
 810ab96:	e1bf      	b.n	810af18 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 810ab98:	68bb      	ldr	r3, [r7, #8]
 810ab9a:	2b00      	cmp	r3, #0
 810ab9c:	d002      	beq.n	810aba4 <HAL_SPI_Transmit+0x60>
 810ab9e:	88fb      	ldrh	r3, [r7, #6]
 810aba0:	2b00      	cmp	r3, #0
 810aba2:	d107      	bne.n	810abb4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 810aba4:	2301      	movs	r3, #1
 810aba6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810aba8:	68fb      	ldr	r3, [r7, #12]
 810abaa:	2200      	movs	r2, #0
 810abac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810abb0:	7efb      	ldrb	r3, [r7, #27]
 810abb2:	e1b1      	b.n	810af18 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 810abb4:	68fb      	ldr	r3, [r7, #12]
 810abb6:	2203      	movs	r2, #3
 810abb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810abbc:	68fb      	ldr	r3, [r7, #12]
 810abbe:	2200      	movs	r2, #0
 810abc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 810abc4:	68fb      	ldr	r3, [r7, #12]
 810abc6:	68ba      	ldr	r2, [r7, #8]
 810abc8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810abca:	68fb      	ldr	r3, [r7, #12]
 810abcc:	88fa      	ldrh	r2, [r7, #6]
 810abce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810abd2:	68fb      	ldr	r3, [r7, #12]
 810abd4:	88fa      	ldrh	r2, [r7, #6]
 810abd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 810abda:	68fb      	ldr	r3, [r7, #12]
 810abdc:	2200      	movs	r2, #0
 810abde:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 810abe0:	68fb      	ldr	r3, [r7, #12]
 810abe2:	2200      	movs	r2, #0
 810abe4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 810abe8:	68fb      	ldr	r3, [r7, #12]
 810abea:	2200      	movs	r2, #0
 810abec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 810abf0:	68fb      	ldr	r3, [r7, #12]
 810abf2:	2200      	movs	r2, #0
 810abf4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 810abf6:	68fb      	ldr	r3, [r7, #12]
 810abf8:	2200      	movs	r2, #0
 810abfa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810abfc:	68fb      	ldr	r3, [r7, #12]
 810abfe:	689b      	ldr	r3, [r3, #8]
 810ac00:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810ac04:	d107      	bne.n	810ac16 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 810ac06:	68fb      	ldr	r3, [r7, #12]
 810ac08:	681b      	ldr	r3, [r3, #0]
 810ac0a:	681a      	ldr	r2, [r3, #0]
 810ac0c:	68fb      	ldr	r3, [r7, #12]
 810ac0e:	681b      	ldr	r3, [r3, #0]
 810ac10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810ac14:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810ac16:	68fb      	ldr	r3, [r7, #12]
 810ac18:	681b      	ldr	r3, [r3, #0]
 810ac1a:	685b      	ldr	r3, [r3, #4]
 810ac1c:	0c1b      	lsrs	r3, r3, #16
 810ac1e:	041b      	lsls	r3, r3, #16
 810ac20:	88f9      	ldrh	r1, [r7, #6]
 810ac22:	68fa      	ldr	r2, [r7, #12]
 810ac24:	6812      	ldr	r2, [r2, #0]
 810ac26:	430b      	orrs	r3, r1
 810ac28:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810ac2a:	68fb      	ldr	r3, [r7, #12]
 810ac2c:	681b      	ldr	r3, [r3, #0]
 810ac2e:	681a      	ldr	r2, [r3, #0]
 810ac30:	68fb      	ldr	r3, [r7, #12]
 810ac32:	681b      	ldr	r3, [r3, #0]
 810ac34:	f042 0201 	orr.w	r2, r2, #1
 810ac38:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810ac3a:	68fb      	ldr	r3, [r7, #12]
 810ac3c:	685b      	ldr	r3, [r3, #4]
 810ac3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810ac42:	d107      	bne.n	810ac54 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810ac44:	68fb      	ldr	r3, [r7, #12]
 810ac46:	681b      	ldr	r3, [r3, #0]
 810ac48:	681a      	ldr	r2, [r3, #0]
 810ac4a:	68fb      	ldr	r3, [r7, #12]
 810ac4c:	681b      	ldr	r3, [r3, #0]
 810ac4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810ac52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810ac54:	68fb      	ldr	r3, [r7, #12]
 810ac56:	68db      	ldr	r3, [r3, #12]
 810ac58:	2b0f      	cmp	r3, #15
 810ac5a:	d947      	bls.n	810acec <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810ac5c:	e03f      	b.n	810acde <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810ac5e:	68fb      	ldr	r3, [r7, #12]
 810ac60:	681b      	ldr	r3, [r3, #0]
 810ac62:	695b      	ldr	r3, [r3, #20]
 810ac64:	f003 0302 	and.w	r3, r3, #2
 810ac68:	2b02      	cmp	r3, #2
 810ac6a:	d114      	bne.n	810ac96 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810ac6c:	68fb      	ldr	r3, [r7, #12]
 810ac6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810ac70:	68fb      	ldr	r3, [r7, #12]
 810ac72:	681b      	ldr	r3, [r3, #0]
 810ac74:	6812      	ldr	r2, [r2, #0]
 810ac76:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810ac78:	68fb      	ldr	r3, [r7, #12]
 810ac7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ac7c:	1d1a      	adds	r2, r3, #4
 810ac7e:	68fb      	ldr	r3, [r7, #12]
 810ac80:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 810ac82:	68fb      	ldr	r3, [r7, #12]
 810ac84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ac88:	b29b      	uxth	r3, r3
 810ac8a:	3b01      	subs	r3, #1
 810ac8c:	b29a      	uxth	r2, r3
 810ac8e:	68fb      	ldr	r3, [r7, #12]
 810ac90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ac94:	e023      	b.n	810acde <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810ac96:	f7f8 f913 	bl	8102ec0 <HAL_GetTick>
 810ac9a:	4602      	mov	r2, r0
 810ac9c:	697b      	ldr	r3, [r7, #20]
 810ac9e:	1ad3      	subs	r3, r2, r3
 810aca0:	683a      	ldr	r2, [r7, #0]
 810aca2:	429a      	cmp	r2, r3
 810aca4:	d803      	bhi.n	810acae <HAL_SPI_Transmit+0x16a>
 810aca6:	683b      	ldr	r3, [r7, #0]
 810aca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810acac:	d102      	bne.n	810acb4 <HAL_SPI_Transmit+0x170>
 810acae:	683b      	ldr	r3, [r7, #0]
 810acb0:	2b00      	cmp	r3, #0
 810acb2:	d114      	bne.n	810acde <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810acb4:	68f8      	ldr	r0, [r7, #12]
 810acb6:	f001 f82f 	bl	810bd18 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810acba:	68fb      	ldr	r3, [r7, #12]
 810acbc:	2200      	movs	r2, #0
 810acbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810acc2:	68fb      	ldr	r3, [r7, #12]
 810acc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810acc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810accc:	68fb      	ldr	r3, [r7, #12]
 810acce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810acd2:	68fb      	ldr	r3, [r7, #12]
 810acd4:	2201      	movs	r2, #1
 810acd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810acda:	2301      	movs	r3, #1
 810acdc:	e11c      	b.n	810af18 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810acde:	68fb      	ldr	r3, [r7, #12]
 810ace0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ace4:	b29b      	uxth	r3, r3
 810ace6:	2b00      	cmp	r3, #0
 810ace8:	d1b9      	bne.n	810ac5e <HAL_SPI_Transmit+0x11a>
 810acea:	e0ef      	b.n	810aecc <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810acec:	68fb      	ldr	r3, [r7, #12]
 810acee:	68db      	ldr	r3, [r3, #12]
 810acf0:	2b07      	cmp	r3, #7
 810acf2:	f240 80e4 	bls.w	810aebe <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810acf6:	e05d      	b.n	810adb4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810acf8:	68fb      	ldr	r3, [r7, #12]
 810acfa:	681b      	ldr	r3, [r3, #0]
 810acfc:	695b      	ldr	r3, [r3, #20]
 810acfe:	f003 0302 	and.w	r3, r3, #2
 810ad02:	2b02      	cmp	r3, #2
 810ad04:	d132      	bne.n	810ad6c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810ad06:	68fb      	ldr	r3, [r7, #12]
 810ad08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ad0c:	b29b      	uxth	r3, r3
 810ad0e:	2b01      	cmp	r3, #1
 810ad10:	d918      	bls.n	810ad44 <HAL_SPI_Transmit+0x200>
 810ad12:	68fb      	ldr	r3, [r7, #12]
 810ad14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ad16:	2b00      	cmp	r3, #0
 810ad18:	d014      	beq.n	810ad44 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810ad1a:	68fb      	ldr	r3, [r7, #12]
 810ad1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810ad1e:	68fb      	ldr	r3, [r7, #12]
 810ad20:	681b      	ldr	r3, [r3, #0]
 810ad22:	6812      	ldr	r2, [r2, #0]
 810ad24:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810ad26:	68fb      	ldr	r3, [r7, #12]
 810ad28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ad2a:	1d1a      	adds	r2, r3, #4
 810ad2c:	68fb      	ldr	r3, [r7, #12]
 810ad2e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810ad30:	68fb      	ldr	r3, [r7, #12]
 810ad32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ad36:	b29b      	uxth	r3, r3
 810ad38:	3b02      	subs	r3, #2
 810ad3a:	b29a      	uxth	r2, r3
 810ad3c:	68fb      	ldr	r3, [r7, #12]
 810ad3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ad42:	e037      	b.n	810adb4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810ad44:	68fb      	ldr	r3, [r7, #12]
 810ad46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ad48:	881a      	ldrh	r2, [r3, #0]
 810ad4a:	69fb      	ldr	r3, [r7, #28]
 810ad4c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810ad4e:	68fb      	ldr	r3, [r7, #12]
 810ad50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ad52:	1c9a      	adds	r2, r3, #2
 810ad54:	68fb      	ldr	r3, [r7, #12]
 810ad56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810ad58:	68fb      	ldr	r3, [r7, #12]
 810ad5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ad5e:	b29b      	uxth	r3, r3
 810ad60:	3b01      	subs	r3, #1
 810ad62:	b29a      	uxth	r2, r3
 810ad64:	68fb      	ldr	r3, [r7, #12]
 810ad66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ad6a:	e023      	b.n	810adb4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810ad6c:	f7f8 f8a8 	bl	8102ec0 <HAL_GetTick>
 810ad70:	4602      	mov	r2, r0
 810ad72:	697b      	ldr	r3, [r7, #20]
 810ad74:	1ad3      	subs	r3, r2, r3
 810ad76:	683a      	ldr	r2, [r7, #0]
 810ad78:	429a      	cmp	r2, r3
 810ad7a:	d803      	bhi.n	810ad84 <HAL_SPI_Transmit+0x240>
 810ad7c:	683b      	ldr	r3, [r7, #0]
 810ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ad82:	d102      	bne.n	810ad8a <HAL_SPI_Transmit+0x246>
 810ad84:	683b      	ldr	r3, [r7, #0]
 810ad86:	2b00      	cmp	r3, #0
 810ad88:	d114      	bne.n	810adb4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810ad8a:	68f8      	ldr	r0, [r7, #12]
 810ad8c:	f000 ffc4 	bl	810bd18 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810ad90:	68fb      	ldr	r3, [r7, #12]
 810ad92:	2200      	movs	r2, #0
 810ad94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810ad98:	68fb      	ldr	r3, [r7, #12]
 810ad9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810ad9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810ada2:	68fb      	ldr	r3, [r7, #12]
 810ada4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810ada8:	68fb      	ldr	r3, [r7, #12]
 810adaa:	2201      	movs	r2, #1
 810adac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810adb0:	2301      	movs	r3, #1
 810adb2:	e0b1      	b.n	810af18 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810adb4:	68fb      	ldr	r3, [r7, #12]
 810adb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810adba:	b29b      	uxth	r3, r3
 810adbc:	2b00      	cmp	r3, #0
 810adbe:	d19b      	bne.n	810acf8 <HAL_SPI_Transmit+0x1b4>
 810adc0:	e084      	b.n	810aecc <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810adc2:	68fb      	ldr	r3, [r7, #12]
 810adc4:	681b      	ldr	r3, [r3, #0]
 810adc6:	695b      	ldr	r3, [r3, #20]
 810adc8:	f003 0302 	and.w	r3, r3, #2
 810adcc:	2b02      	cmp	r3, #2
 810adce:	d152      	bne.n	810ae76 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810add0:	68fb      	ldr	r3, [r7, #12]
 810add2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810add6:	b29b      	uxth	r3, r3
 810add8:	2b03      	cmp	r3, #3
 810adda:	d918      	bls.n	810ae0e <HAL_SPI_Transmit+0x2ca>
 810addc:	68fb      	ldr	r3, [r7, #12]
 810adde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ade0:	2b40      	cmp	r3, #64	; 0x40
 810ade2:	d914      	bls.n	810ae0e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810ade4:	68fb      	ldr	r3, [r7, #12]
 810ade6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810ade8:	68fb      	ldr	r3, [r7, #12]
 810adea:	681b      	ldr	r3, [r3, #0]
 810adec:	6812      	ldr	r2, [r2, #0]
 810adee:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810adf0:	68fb      	ldr	r3, [r7, #12]
 810adf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810adf4:	1d1a      	adds	r2, r3, #4
 810adf6:	68fb      	ldr	r3, [r7, #12]
 810adf8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810adfa:	68fb      	ldr	r3, [r7, #12]
 810adfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ae00:	b29b      	uxth	r3, r3
 810ae02:	3b04      	subs	r3, #4
 810ae04:	b29a      	uxth	r2, r3
 810ae06:	68fb      	ldr	r3, [r7, #12]
 810ae08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ae0c:	e057      	b.n	810aebe <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810ae0e:	68fb      	ldr	r3, [r7, #12]
 810ae10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ae14:	b29b      	uxth	r3, r3
 810ae16:	2b01      	cmp	r3, #1
 810ae18:	d917      	bls.n	810ae4a <HAL_SPI_Transmit+0x306>
 810ae1a:	68fb      	ldr	r3, [r7, #12]
 810ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ae1e:	2b00      	cmp	r3, #0
 810ae20:	d013      	beq.n	810ae4a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810ae22:	68fb      	ldr	r3, [r7, #12]
 810ae24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ae26:	881a      	ldrh	r2, [r3, #0]
 810ae28:	69fb      	ldr	r3, [r7, #28]
 810ae2a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810ae2c:	68fb      	ldr	r3, [r7, #12]
 810ae2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ae30:	1c9a      	adds	r2, r3, #2
 810ae32:	68fb      	ldr	r3, [r7, #12]
 810ae34:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810ae36:	68fb      	ldr	r3, [r7, #12]
 810ae38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ae3c:	b29b      	uxth	r3, r3
 810ae3e:	3b02      	subs	r3, #2
 810ae40:	b29a      	uxth	r2, r3
 810ae42:	68fb      	ldr	r3, [r7, #12]
 810ae44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ae48:	e039      	b.n	810aebe <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810ae4a:	68fb      	ldr	r3, [r7, #12]
 810ae4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810ae4e:	68fb      	ldr	r3, [r7, #12]
 810ae50:	681b      	ldr	r3, [r3, #0]
 810ae52:	3320      	adds	r3, #32
 810ae54:	7812      	ldrb	r2, [r2, #0]
 810ae56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810ae58:	68fb      	ldr	r3, [r7, #12]
 810ae5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ae5c:	1c5a      	adds	r2, r3, #1
 810ae5e:	68fb      	ldr	r3, [r7, #12]
 810ae60:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810ae62:	68fb      	ldr	r3, [r7, #12]
 810ae64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810ae68:	b29b      	uxth	r3, r3
 810ae6a:	3b01      	subs	r3, #1
 810ae6c:	b29a      	uxth	r2, r3
 810ae6e:	68fb      	ldr	r3, [r7, #12]
 810ae70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810ae74:	e023      	b.n	810aebe <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810ae76:	f7f8 f823 	bl	8102ec0 <HAL_GetTick>
 810ae7a:	4602      	mov	r2, r0
 810ae7c:	697b      	ldr	r3, [r7, #20]
 810ae7e:	1ad3      	subs	r3, r2, r3
 810ae80:	683a      	ldr	r2, [r7, #0]
 810ae82:	429a      	cmp	r2, r3
 810ae84:	d803      	bhi.n	810ae8e <HAL_SPI_Transmit+0x34a>
 810ae86:	683b      	ldr	r3, [r7, #0]
 810ae88:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ae8c:	d102      	bne.n	810ae94 <HAL_SPI_Transmit+0x350>
 810ae8e:	683b      	ldr	r3, [r7, #0]
 810ae90:	2b00      	cmp	r3, #0
 810ae92:	d114      	bne.n	810aebe <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810ae94:	68f8      	ldr	r0, [r7, #12]
 810ae96:	f000 ff3f 	bl	810bd18 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810ae9a:	68fb      	ldr	r3, [r7, #12]
 810ae9c:	2200      	movs	r2, #0
 810ae9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810aea2:	68fb      	ldr	r3, [r7, #12]
 810aea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aea8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810aeac:	68fb      	ldr	r3, [r7, #12]
 810aeae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810aeb2:	68fb      	ldr	r3, [r7, #12]
 810aeb4:	2201      	movs	r2, #1
 810aeb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810aeba:	2301      	movs	r3, #1
 810aebc:	e02c      	b.n	810af18 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810aebe:	68fb      	ldr	r3, [r7, #12]
 810aec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810aec4:	b29b      	uxth	r3, r3
 810aec6:	2b00      	cmp	r3, #0
 810aec8:	f47f af7b 	bne.w	810adc2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810aecc:	683b      	ldr	r3, [r7, #0]
 810aece:	9300      	str	r3, [sp, #0]
 810aed0:	697b      	ldr	r3, [r7, #20]
 810aed2:	2200      	movs	r2, #0
 810aed4:	2108      	movs	r1, #8
 810aed6:	68f8      	ldr	r0, [r7, #12]
 810aed8:	f000 ffbe 	bl	810be58 <SPI_WaitOnFlagUntilTimeout>
 810aedc:	4603      	mov	r3, r0
 810aede:	2b00      	cmp	r3, #0
 810aee0:	d007      	beq.n	810aef2 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810aee2:	68fb      	ldr	r3, [r7, #12]
 810aee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810aee8:	f043 0220 	orr.w	r2, r3, #32
 810aeec:	68fb      	ldr	r3, [r7, #12]
 810aeee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810aef2:	68f8      	ldr	r0, [r7, #12]
 810aef4:	f000 ff10 	bl	810bd18 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810aef8:	68fb      	ldr	r3, [r7, #12]
 810aefa:	2200      	movs	r2, #0
 810aefc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810af00:	68fb      	ldr	r3, [r7, #12]
 810af02:	2201      	movs	r2, #1
 810af04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810af08:	68fb      	ldr	r3, [r7, #12]
 810af0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810af0e:	2b00      	cmp	r3, #0
 810af10:	d001      	beq.n	810af16 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 810af12:	2301      	movs	r3, #1
 810af14:	e000      	b.n	810af18 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 810af16:	7efb      	ldrb	r3, [r7, #27]
}
 810af18:	4618      	mov	r0, r3
 810af1a:	3720      	adds	r7, #32
 810af1c:	46bd      	mov	sp, r7
 810af1e:	bd80      	pop	{r7, pc}

0810af20 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810af20:	b580      	push	{r7, lr}
 810af22:	b08a      	sub	sp, #40	; 0x28
 810af24:	af02      	add	r7, sp, #8
 810af26:	60f8      	str	r0, [r7, #12]
 810af28:	60b9      	str	r1, [r7, #8]
 810af2a:	603b      	str	r3, [r7, #0]
 810af2c:	4613      	mov	r3, r2
 810af2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810af30:	2300      	movs	r3, #0
 810af32:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810af34:	68fb      	ldr	r3, [r7, #12]
 810af36:	681b      	ldr	r3, [r3, #0]
 810af38:	3330      	adds	r3, #48	; 0x30
 810af3a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 810af3c:	68fb      	ldr	r3, [r7, #12]
 810af3e:	685b      	ldr	r3, [r3, #4]
 810af40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810af44:	d112      	bne.n	810af6c <HAL_SPI_Receive+0x4c>
 810af46:	68fb      	ldr	r3, [r7, #12]
 810af48:	689b      	ldr	r3, [r3, #8]
 810af4a:	2b00      	cmp	r3, #0
 810af4c:	d10e      	bne.n	810af6c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 810af4e:	68fb      	ldr	r3, [r7, #12]
 810af50:	2204      	movs	r2, #4
 810af52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 810af56:	88fa      	ldrh	r2, [r7, #6]
 810af58:	683b      	ldr	r3, [r7, #0]
 810af5a:	9300      	str	r3, [sp, #0]
 810af5c:	4613      	mov	r3, r2
 810af5e:	68ba      	ldr	r2, [r7, #8]
 810af60:	68b9      	ldr	r1, [r7, #8]
 810af62:	68f8      	ldr	r0, [r7, #12]
 810af64:	f000 f9cc 	bl	810b300 <HAL_SPI_TransmitReceive>
 810af68:	4603      	mov	r3, r0
 810af6a:	e1c5      	b.n	810b2f8 <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 810af6c:	68fb      	ldr	r3, [r7, #12]
 810af6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810af72:	2b01      	cmp	r3, #1
 810af74:	d101      	bne.n	810af7a <HAL_SPI_Receive+0x5a>
 810af76:	2302      	movs	r3, #2
 810af78:	e1be      	b.n	810b2f8 <HAL_SPI_Receive+0x3d8>
 810af7a:	68fb      	ldr	r3, [r7, #12]
 810af7c:	2201      	movs	r2, #1
 810af7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810af82:	f7f7 ff9d 	bl	8102ec0 <HAL_GetTick>
 810af86:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 810af88:	68fb      	ldr	r3, [r7, #12]
 810af8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810af8e:	b2db      	uxtb	r3, r3
 810af90:	2b01      	cmp	r3, #1
 810af92:	d007      	beq.n	810afa4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 810af94:	2302      	movs	r3, #2
 810af96:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 810af98:	68fb      	ldr	r3, [r7, #12]
 810af9a:	2200      	movs	r2, #0
 810af9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810afa0:	7ffb      	ldrb	r3, [r7, #31]
 810afa2:	e1a9      	b.n	810b2f8 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 810afa4:	68bb      	ldr	r3, [r7, #8]
 810afa6:	2b00      	cmp	r3, #0
 810afa8:	d002      	beq.n	810afb0 <HAL_SPI_Receive+0x90>
 810afaa:	88fb      	ldrh	r3, [r7, #6]
 810afac:	2b00      	cmp	r3, #0
 810afae:	d107      	bne.n	810afc0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 810afb0:	2301      	movs	r3, #1
 810afb2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 810afb4:	68fb      	ldr	r3, [r7, #12]
 810afb6:	2200      	movs	r2, #0
 810afb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810afbc:	7ffb      	ldrb	r3, [r7, #31]
 810afbe:	e19b      	b.n	810b2f8 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 810afc0:	68fb      	ldr	r3, [r7, #12]
 810afc2:	2204      	movs	r2, #4
 810afc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810afc8:	68fb      	ldr	r3, [r7, #12]
 810afca:	2200      	movs	r2, #0
 810afcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 810afd0:	68fb      	ldr	r3, [r7, #12]
 810afd2:	68ba      	ldr	r2, [r7, #8]
 810afd4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 810afd6:	68fb      	ldr	r3, [r7, #12]
 810afd8:	88fa      	ldrh	r2, [r7, #6]
 810afda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810afde:	68fb      	ldr	r3, [r7, #12]
 810afe0:	88fa      	ldrh	r2, [r7, #6]
 810afe2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 810afe6:	68fb      	ldr	r3, [r7, #12]
 810afe8:	2200      	movs	r2, #0
 810afea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 810afec:	68fb      	ldr	r3, [r7, #12]
 810afee:	2200      	movs	r2, #0
 810aff0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 810aff4:	68fb      	ldr	r3, [r7, #12]
 810aff6:	2200      	movs	r2, #0
 810aff8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 810affc:	68fb      	ldr	r3, [r7, #12]
 810affe:	2200      	movs	r2, #0
 810b000:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810b002:	68fb      	ldr	r3, [r7, #12]
 810b004:	2200      	movs	r2, #0
 810b006:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810b008:	68fb      	ldr	r3, [r7, #12]
 810b00a:	689b      	ldr	r3, [r3, #8]
 810b00c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810b010:	d107      	bne.n	810b022 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 810b012:	68fb      	ldr	r3, [r7, #12]
 810b014:	681b      	ldr	r3, [r3, #0]
 810b016:	681a      	ldr	r2, [r3, #0]
 810b018:	68fb      	ldr	r3, [r7, #12]
 810b01a:	681b      	ldr	r3, [r3, #0]
 810b01c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 810b020:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810b022:	68fb      	ldr	r3, [r7, #12]
 810b024:	681b      	ldr	r3, [r3, #0]
 810b026:	685b      	ldr	r3, [r3, #4]
 810b028:	0c1b      	lsrs	r3, r3, #16
 810b02a:	041b      	lsls	r3, r3, #16
 810b02c:	88f9      	ldrh	r1, [r7, #6]
 810b02e:	68fa      	ldr	r2, [r7, #12]
 810b030:	6812      	ldr	r2, [r2, #0]
 810b032:	430b      	orrs	r3, r1
 810b034:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810b036:	68fb      	ldr	r3, [r7, #12]
 810b038:	681b      	ldr	r3, [r3, #0]
 810b03a:	681a      	ldr	r2, [r3, #0]
 810b03c:	68fb      	ldr	r3, [r7, #12]
 810b03e:	681b      	ldr	r3, [r3, #0]
 810b040:	f042 0201 	orr.w	r2, r2, #1
 810b044:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810b046:	68fb      	ldr	r3, [r7, #12]
 810b048:	685b      	ldr	r3, [r3, #4]
 810b04a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b04e:	d107      	bne.n	810b060 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810b050:	68fb      	ldr	r3, [r7, #12]
 810b052:	681b      	ldr	r3, [r3, #0]
 810b054:	681a      	ldr	r2, [r3, #0]
 810b056:	68fb      	ldr	r3, [r7, #12]
 810b058:	681b      	ldr	r3, [r3, #0]
 810b05a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810b05e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810b060:	68fb      	ldr	r3, [r7, #12]
 810b062:	68db      	ldr	r3, [r3, #12]
 810b064:	2b0f      	cmp	r3, #15
 810b066:	d948      	bls.n	810b0fa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 810b068:	e040      	b.n	810b0ec <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 810b06a:	68fb      	ldr	r3, [r7, #12]
 810b06c:	681b      	ldr	r3, [r3, #0]
 810b06e:	695a      	ldr	r2, [r3, #20]
 810b070:	f248 0308 	movw	r3, #32776	; 0x8008
 810b074:	4013      	ands	r3, r2
 810b076:	2b00      	cmp	r3, #0
 810b078:	d014      	beq.n	810b0a4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b07a:	68fb      	ldr	r3, [r7, #12]
 810b07c:	681a      	ldr	r2, [r3, #0]
 810b07e:	68fb      	ldr	r3, [r7, #12]
 810b080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b082:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b084:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810b086:	68fb      	ldr	r3, [r7, #12]
 810b088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b08a:	1d1a      	adds	r2, r3, #4
 810b08c:	68fb      	ldr	r3, [r7, #12]
 810b08e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 810b090:	68fb      	ldr	r3, [r7, #12]
 810b092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b096:	b29b      	uxth	r3, r3
 810b098:	3b01      	subs	r3, #1
 810b09a:	b29a      	uxth	r2, r3
 810b09c:	68fb      	ldr	r3, [r7, #12]
 810b09e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b0a2:	e023      	b.n	810b0ec <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b0a4:	f7f7 ff0c 	bl	8102ec0 <HAL_GetTick>
 810b0a8:	4602      	mov	r2, r0
 810b0aa:	697b      	ldr	r3, [r7, #20]
 810b0ac:	1ad3      	subs	r3, r2, r3
 810b0ae:	683a      	ldr	r2, [r7, #0]
 810b0b0:	429a      	cmp	r2, r3
 810b0b2:	d803      	bhi.n	810b0bc <HAL_SPI_Receive+0x19c>
 810b0b4:	683b      	ldr	r3, [r7, #0]
 810b0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b0ba:	d102      	bne.n	810b0c2 <HAL_SPI_Receive+0x1a2>
 810b0bc:	683b      	ldr	r3, [r7, #0]
 810b0be:	2b00      	cmp	r3, #0
 810b0c0:	d114      	bne.n	810b0ec <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810b0c2:	68f8      	ldr	r0, [r7, #12]
 810b0c4:	f000 fe28 	bl	810bd18 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810b0c8:	68fb      	ldr	r3, [r7, #12]
 810b0ca:	2200      	movs	r2, #0
 810b0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b0d0:	68fb      	ldr	r3, [r7, #12]
 810b0d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b0d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b0da:	68fb      	ldr	r3, [r7, #12]
 810b0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810b0e0:	68fb      	ldr	r3, [r7, #12]
 810b0e2:	2201      	movs	r2, #1
 810b0e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810b0e8:	2301      	movs	r3, #1
 810b0ea:	e105      	b.n	810b2f8 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810b0ec:	68fb      	ldr	r3, [r7, #12]
 810b0ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b0f2:	b29b      	uxth	r3, r3
 810b0f4:	2b00      	cmp	r3, #0
 810b0f6:	d1b8      	bne.n	810b06a <HAL_SPI_Receive+0x14a>
 810b0f8:	e0eb      	b.n	810b2d2 <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810b0fa:	68fb      	ldr	r3, [r7, #12]
 810b0fc:	68db      	ldr	r3, [r3, #12]
 810b0fe:	2b07      	cmp	r3, #7
 810b100:	f240 80e0 	bls.w	810b2c4 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 810b104:	e05b      	b.n	810b1be <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 810b106:	68fb      	ldr	r3, [r7, #12]
 810b108:	681b      	ldr	r3, [r3, #0]
 810b10a:	695b      	ldr	r3, [r3, #20]
 810b10c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b110:	2b00      	cmp	r3, #0
 810b112:	d030      	beq.n	810b176 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810b114:	68fb      	ldr	r3, [r7, #12]
 810b116:	681b      	ldr	r3, [r3, #0]
 810b118:	695b      	ldr	r3, [r3, #20]
 810b11a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b11e:	2b00      	cmp	r3, #0
 810b120:	d014      	beq.n	810b14c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b122:	68fb      	ldr	r3, [r7, #12]
 810b124:	681a      	ldr	r2, [r3, #0]
 810b126:	68fb      	ldr	r3, [r7, #12]
 810b128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b12a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b12c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b12e:	68fb      	ldr	r3, [r7, #12]
 810b130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b132:	1d1a      	adds	r2, r3, #4
 810b134:	68fb      	ldr	r3, [r7, #12]
 810b136:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b138:	68fb      	ldr	r3, [r7, #12]
 810b13a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b13e:	b29b      	uxth	r3, r3
 810b140:	3b02      	subs	r3, #2
 810b142:	b29a      	uxth	r2, r3
 810b144:	68fb      	ldr	r3, [r7, #12]
 810b146:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b14a:	e038      	b.n	810b1be <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b14c:	68fb      	ldr	r3, [r7, #12]
 810b14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b150:	69ba      	ldr	r2, [r7, #24]
 810b152:	8812      	ldrh	r2, [r2, #0]
 810b154:	b292      	uxth	r2, r2
 810b156:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b158:	68fb      	ldr	r3, [r7, #12]
 810b15a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b15c:	1c9a      	adds	r2, r3, #2
 810b15e:	68fb      	ldr	r3, [r7, #12]
 810b160:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b162:	68fb      	ldr	r3, [r7, #12]
 810b164:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b168:	b29b      	uxth	r3, r3
 810b16a:	3b01      	subs	r3, #1
 810b16c:	b29a      	uxth	r2, r3
 810b16e:	68fb      	ldr	r3, [r7, #12]
 810b170:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b174:	e023      	b.n	810b1be <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b176:	f7f7 fea3 	bl	8102ec0 <HAL_GetTick>
 810b17a:	4602      	mov	r2, r0
 810b17c:	697b      	ldr	r3, [r7, #20]
 810b17e:	1ad3      	subs	r3, r2, r3
 810b180:	683a      	ldr	r2, [r7, #0]
 810b182:	429a      	cmp	r2, r3
 810b184:	d803      	bhi.n	810b18e <HAL_SPI_Receive+0x26e>
 810b186:	683b      	ldr	r3, [r7, #0]
 810b188:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b18c:	d102      	bne.n	810b194 <HAL_SPI_Receive+0x274>
 810b18e:	683b      	ldr	r3, [r7, #0]
 810b190:	2b00      	cmp	r3, #0
 810b192:	d114      	bne.n	810b1be <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810b194:	68f8      	ldr	r0, [r7, #12]
 810b196:	f000 fdbf 	bl	810bd18 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810b19a:	68fb      	ldr	r3, [r7, #12]
 810b19c:	2200      	movs	r2, #0
 810b19e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b1a2:	68fb      	ldr	r3, [r7, #12]
 810b1a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b1a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b1ac:	68fb      	ldr	r3, [r7, #12]
 810b1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810b1b2:	68fb      	ldr	r3, [r7, #12]
 810b1b4:	2201      	movs	r2, #1
 810b1b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810b1ba:	2301      	movs	r3, #1
 810b1bc:	e09c      	b.n	810b2f8 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810b1be:	68fb      	ldr	r3, [r7, #12]
 810b1c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b1c4:	b29b      	uxth	r3, r3
 810b1c6:	2b00      	cmp	r3, #0
 810b1c8:	d19d      	bne.n	810b106 <HAL_SPI_Receive+0x1e6>
 810b1ca:	e082      	b.n	810b2d2 <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 810b1cc:	68fb      	ldr	r3, [r7, #12]
 810b1ce:	681b      	ldr	r3, [r3, #0]
 810b1d0:	695b      	ldr	r3, [r3, #20]
 810b1d2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b1d6:	2b00      	cmp	r3, #0
 810b1d8:	d050      	beq.n	810b27c <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810b1da:	68fb      	ldr	r3, [r7, #12]
 810b1dc:	681b      	ldr	r3, [r3, #0]
 810b1de:	695b      	ldr	r3, [r3, #20]
 810b1e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b1e4:	2b00      	cmp	r3, #0
 810b1e6:	d014      	beq.n	810b212 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b1e8:	68fb      	ldr	r3, [r7, #12]
 810b1ea:	681a      	ldr	r2, [r3, #0]
 810b1ec:	68fb      	ldr	r3, [r7, #12]
 810b1ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b1f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b1f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b1f4:	68fb      	ldr	r3, [r7, #12]
 810b1f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b1f8:	1d1a      	adds	r2, r3, #4
 810b1fa:	68fb      	ldr	r3, [r7, #12]
 810b1fc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810b1fe:	68fb      	ldr	r3, [r7, #12]
 810b200:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b204:	b29b      	uxth	r3, r3
 810b206:	3b04      	subs	r3, #4
 810b208:	b29a      	uxth	r2, r3
 810b20a:	68fb      	ldr	r3, [r7, #12]
 810b20c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b210:	e058      	b.n	810b2c4 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 810b212:	68fb      	ldr	r3, [r7, #12]
 810b214:	681b      	ldr	r3, [r3, #0]
 810b216:	695b      	ldr	r3, [r3, #20]
 810b218:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810b21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b220:	d914      	bls.n	810b24c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b222:	68fb      	ldr	r3, [r7, #12]
 810b224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b226:	69ba      	ldr	r2, [r7, #24]
 810b228:	8812      	ldrh	r2, [r2, #0]
 810b22a:	b292      	uxth	r2, r2
 810b22c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b22e:	68fb      	ldr	r3, [r7, #12]
 810b230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b232:	1c9a      	adds	r2, r3, #2
 810b234:	68fb      	ldr	r3, [r7, #12]
 810b236:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b238:	68fb      	ldr	r3, [r7, #12]
 810b23a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b23e:	b29b      	uxth	r3, r3
 810b240:	3b02      	subs	r3, #2
 810b242:	b29a      	uxth	r2, r3
 810b244:	68fb      	ldr	r3, [r7, #12]
 810b246:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b24a:	e03b      	b.n	810b2c4 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b24c:	68fb      	ldr	r3, [r7, #12]
 810b24e:	681b      	ldr	r3, [r3, #0]
 810b250:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810b254:	68fb      	ldr	r3, [r7, #12]
 810b256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b258:	7812      	ldrb	r2, [r2, #0]
 810b25a:	b2d2      	uxtb	r2, r2
 810b25c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b25e:	68fb      	ldr	r3, [r7, #12]
 810b260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b262:	1c5a      	adds	r2, r3, #1
 810b264:	68fb      	ldr	r3, [r7, #12]
 810b266:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b268:	68fb      	ldr	r3, [r7, #12]
 810b26a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b26e:	b29b      	uxth	r3, r3
 810b270:	3b01      	subs	r3, #1
 810b272:	b29a      	uxth	r2, r3
 810b274:	68fb      	ldr	r3, [r7, #12]
 810b276:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810b27a:	e023      	b.n	810b2c4 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b27c:	f7f7 fe20 	bl	8102ec0 <HAL_GetTick>
 810b280:	4602      	mov	r2, r0
 810b282:	697b      	ldr	r3, [r7, #20]
 810b284:	1ad3      	subs	r3, r2, r3
 810b286:	683a      	ldr	r2, [r7, #0]
 810b288:	429a      	cmp	r2, r3
 810b28a:	d803      	bhi.n	810b294 <HAL_SPI_Receive+0x374>
 810b28c:	683b      	ldr	r3, [r7, #0]
 810b28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b292:	d102      	bne.n	810b29a <HAL_SPI_Receive+0x37a>
 810b294:	683b      	ldr	r3, [r7, #0]
 810b296:	2b00      	cmp	r3, #0
 810b298:	d114      	bne.n	810b2c4 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810b29a:	68f8      	ldr	r0, [r7, #12]
 810b29c:	f000 fd3c 	bl	810bd18 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 810b2a0:	68fb      	ldr	r3, [r7, #12]
 810b2a2:	2200      	movs	r2, #0
 810b2a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b2a8:	68fb      	ldr	r3, [r7, #12]
 810b2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b2ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b2b2:	68fb      	ldr	r3, [r7, #12]
 810b2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810b2b8:	68fb      	ldr	r3, [r7, #12]
 810b2ba:	2201      	movs	r2, #1
 810b2bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 810b2c0:	2301      	movs	r3, #1
 810b2c2:	e019      	b.n	810b2f8 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810b2c4:	68fb      	ldr	r3, [r7, #12]
 810b2c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b2ca:	b29b      	uxth	r3, r3
 810b2cc:	2b00      	cmp	r3, #0
 810b2ce:	f47f af7d 	bne.w	810b1cc <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810b2d2:	68f8      	ldr	r0, [r7, #12]
 810b2d4:	f000 fd20 	bl	810bd18 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810b2d8:	68fb      	ldr	r3, [r7, #12]
 810b2da:	2200      	movs	r2, #0
 810b2dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810b2e0:	68fb      	ldr	r3, [r7, #12]
 810b2e2:	2201      	movs	r2, #1
 810b2e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810b2e8:	68fb      	ldr	r3, [r7, #12]
 810b2ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b2ee:	2b00      	cmp	r3, #0
 810b2f0:	d001      	beq.n	810b2f6 <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 810b2f2:	2301      	movs	r3, #1
 810b2f4:	e000      	b.n	810b2f8 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 810b2f6:	7ffb      	ldrb	r3, [r7, #31]
}
 810b2f8:	4618      	mov	r0, r3
 810b2fa:	3720      	adds	r7, #32
 810b2fc:	46bd      	mov	sp, r7
 810b2fe:	bd80      	pop	{r7, pc}

0810b300 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 810b300:	b580      	push	{r7, lr}
 810b302:	b08e      	sub	sp, #56	; 0x38
 810b304:	af02      	add	r7, sp, #8
 810b306:	60f8      	str	r0, [r7, #12]
 810b308:	60b9      	str	r1, [r7, #8]
 810b30a:	607a      	str	r2, [r7, #4]
 810b30c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810b30e:	2300      	movs	r3, #0
 810b310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810b314:	68fb      	ldr	r3, [r7, #12]
 810b316:	681b      	ldr	r3, [r3, #0]
 810b318:	3320      	adds	r3, #32
 810b31a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810b31c:	68fb      	ldr	r3, [r7, #12]
 810b31e:	681b      	ldr	r3, [r3, #0]
 810b320:	3330      	adds	r3, #48	; 0x30
 810b322:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 810b324:	68fb      	ldr	r3, [r7, #12]
 810b326:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810b32a:	2b01      	cmp	r3, #1
 810b32c:	d101      	bne.n	810b332 <HAL_SPI_TransmitReceive+0x32>
 810b32e:	2302      	movs	r3, #2
 810b330:	e2cb      	b.n	810b8ca <HAL_SPI_TransmitReceive+0x5ca>
 810b332:	68fb      	ldr	r3, [r7, #12]
 810b334:	2201      	movs	r2, #1
 810b336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810b33a:	f7f7 fdc1 	bl	8102ec0 <HAL_GetTick>
 810b33e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 810b340:	887b      	ldrh	r3, [r7, #2]
 810b342:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 810b344:	887b      	ldrh	r3, [r7, #2]
 810b346:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 810b348:	68fb      	ldr	r3, [r7, #12]
 810b34a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b34e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 810b350:	68fb      	ldr	r3, [r7, #12]
 810b352:	685b      	ldr	r3, [r3, #4]
 810b354:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 810b356:	7efb      	ldrb	r3, [r7, #27]
 810b358:	2b01      	cmp	r3, #1
 810b35a:	d014      	beq.n	810b386 <HAL_SPI_TransmitReceive+0x86>
 810b35c:	697b      	ldr	r3, [r7, #20]
 810b35e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b362:	d106      	bne.n	810b372 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 810b364:	68fb      	ldr	r3, [r7, #12]
 810b366:	689b      	ldr	r3, [r3, #8]
 810b368:	2b00      	cmp	r3, #0
 810b36a:	d102      	bne.n	810b372 <HAL_SPI_TransmitReceive+0x72>
 810b36c:	7efb      	ldrb	r3, [r7, #27]
 810b36e:	2b04      	cmp	r3, #4
 810b370:	d009      	beq.n	810b386 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 810b372:	2302      	movs	r3, #2
 810b374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810b378:	68fb      	ldr	r3, [r7, #12]
 810b37a:	2200      	movs	r2, #0
 810b37c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810b380:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810b384:	e2a1      	b.n	810b8ca <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 810b386:	68bb      	ldr	r3, [r7, #8]
 810b388:	2b00      	cmp	r3, #0
 810b38a:	d005      	beq.n	810b398 <HAL_SPI_TransmitReceive+0x98>
 810b38c:	687b      	ldr	r3, [r7, #4]
 810b38e:	2b00      	cmp	r3, #0
 810b390:	d002      	beq.n	810b398 <HAL_SPI_TransmitReceive+0x98>
 810b392:	887b      	ldrh	r3, [r7, #2]
 810b394:	2b00      	cmp	r3, #0
 810b396:	d109      	bne.n	810b3ac <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 810b398:	2301      	movs	r3, #1
 810b39a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810b39e:	68fb      	ldr	r3, [r7, #12]
 810b3a0:	2200      	movs	r2, #0
 810b3a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810b3a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810b3aa:	e28e      	b.n	810b8ca <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810b3ac:	68fb      	ldr	r3, [r7, #12]
 810b3ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b3b2:	b2db      	uxtb	r3, r3
 810b3b4:	2b04      	cmp	r3, #4
 810b3b6:	d003      	beq.n	810b3c0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 810b3b8:	68fb      	ldr	r3, [r7, #12]
 810b3ba:	2205      	movs	r2, #5
 810b3bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810b3c0:	68fb      	ldr	r3, [r7, #12]
 810b3c2:	2200      	movs	r2, #0
 810b3c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810b3c8:	68fb      	ldr	r3, [r7, #12]
 810b3ca:	687a      	ldr	r2, [r7, #4]
 810b3cc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 810b3ce:	68fb      	ldr	r3, [r7, #12]
 810b3d0:	887a      	ldrh	r2, [r7, #2]
 810b3d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 810b3d6:	68fb      	ldr	r3, [r7, #12]
 810b3d8:	887a      	ldrh	r2, [r7, #2]
 810b3da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810b3de:	68fb      	ldr	r3, [r7, #12]
 810b3e0:	68ba      	ldr	r2, [r7, #8]
 810b3e2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 810b3e4:	68fb      	ldr	r3, [r7, #12]
 810b3e6:	887a      	ldrh	r2, [r7, #2]
 810b3e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 810b3ec:	68fb      	ldr	r3, [r7, #12]
 810b3ee:	887a      	ldrh	r2, [r7, #2]
 810b3f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 810b3f4:	68fb      	ldr	r3, [r7, #12]
 810b3f6:	2200      	movs	r2, #0
 810b3f8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810b3fa:	68fb      	ldr	r3, [r7, #12]
 810b3fc:	2200      	movs	r2, #0
 810b3fe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810b400:	68fb      	ldr	r3, [r7, #12]
 810b402:	681b      	ldr	r3, [r3, #0]
 810b404:	685b      	ldr	r3, [r3, #4]
 810b406:	0c1b      	lsrs	r3, r3, #16
 810b408:	041b      	lsls	r3, r3, #16
 810b40a:	8879      	ldrh	r1, [r7, #2]
 810b40c:	68fa      	ldr	r2, [r7, #12]
 810b40e:	6812      	ldr	r2, [r2, #0]
 810b410:	430b      	orrs	r3, r1
 810b412:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 810b414:	68fb      	ldr	r3, [r7, #12]
 810b416:	681b      	ldr	r3, [r3, #0]
 810b418:	681a      	ldr	r2, [r3, #0]
 810b41a:	68fb      	ldr	r3, [r7, #12]
 810b41c:	681b      	ldr	r3, [r3, #0]
 810b41e:	f042 0201 	orr.w	r2, r2, #1
 810b422:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810b424:	68fb      	ldr	r3, [r7, #12]
 810b426:	685b      	ldr	r3, [r3, #4]
 810b428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b42c:	d107      	bne.n	810b43e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810b42e:	68fb      	ldr	r3, [r7, #12]
 810b430:	681b      	ldr	r3, [r3, #0]
 810b432:	681a      	ldr	r2, [r3, #0]
 810b434:	68fb      	ldr	r3, [r7, #12]
 810b436:	681b      	ldr	r3, [r3, #0]
 810b438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810b43c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810b43e:	68fb      	ldr	r3, [r7, #12]
 810b440:	68db      	ldr	r3, [r3, #12]
 810b442:	2b0f      	cmp	r3, #15
 810b444:	d970      	bls.n	810b528 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b446:	e068      	b.n	810b51a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810b448:	68fb      	ldr	r3, [r7, #12]
 810b44a:	681b      	ldr	r3, [r3, #0]
 810b44c:	695b      	ldr	r3, [r3, #20]
 810b44e:	f003 0302 	and.w	r3, r3, #2
 810b452:	2b02      	cmp	r3, #2
 810b454:	d11a      	bne.n	810b48c <HAL_SPI_TransmitReceive+0x18c>
 810b456:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b458:	2b00      	cmp	r3, #0
 810b45a:	d017      	beq.n	810b48c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810b45c:	68fb      	ldr	r3, [r7, #12]
 810b45e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b460:	68fb      	ldr	r3, [r7, #12]
 810b462:	681b      	ldr	r3, [r3, #0]
 810b464:	6812      	ldr	r2, [r2, #0]
 810b466:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810b468:	68fb      	ldr	r3, [r7, #12]
 810b46a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b46c:	1d1a      	adds	r2, r3, #4
 810b46e:	68fb      	ldr	r3, [r7, #12]
 810b470:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 810b472:	68fb      	ldr	r3, [r7, #12]
 810b474:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b478:	b29b      	uxth	r3, r3
 810b47a:	3b01      	subs	r3, #1
 810b47c:	b29a      	uxth	r2, r3
 810b47e:	68fb      	ldr	r3, [r7, #12]
 810b480:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810b484:	68fb      	ldr	r3, [r7, #12]
 810b486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b48a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 810b48c:	68fb      	ldr	r3, [r7, #12]
 810b48e:	681b      	ldr	r3, [r3, #0]
 810b490:	695a      	ldr	r2, [r3, #20]
 810b492:	f248 0308 	movw	r3, #32776	; 0x8008
 810b496:	4013      	ands	r3, r2
 810b498:	2b00      	cmp	r3, #0
 810b49a:	d01a      	beq.n	810b4d2 <HAL_SPI_TransmitReceive+0x1d2>
 810b49c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b49e:	2b00      	cmp	r3, #0
 810b4a0:	d017      	beq.n	810b4d2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b4a2:	68fb      	ldr	r3, [r7, #12]
 810b4a4:	681a      	ldr	r2, [r3, #0]
 810b4a6:	68fb      	ldr	r3, [r7, #12]
 810b4a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b4aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b4ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810b4ae:	68fb      	ldr	r3, [r7, #12]
 810b4b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b4b2:	1d1a      	adds	r2, r3, #4
 810b4b4:	68fb      	ldr	r3, [r7, #12]
 810b4b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 810b4b8:	68fb      	ldr	r3, [r7, #12]
 810b4ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b4be:	b29b      	uxth	r3, r3
 810b4c0:	3b01      	subs	r3, #1
 810b4c2:	b29a      	uxth	r2, r3
 810b4c4:	68fb      	ldr	r3, [r7, #12]
 810b4c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 810b4ca:	68fb      	ldr	r3, [r7, #12]
 810b4cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b4d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b4d2:	f7f7 fcf5 	bl	8102ec0 <HAL_GetTick>
 810b4d6:	4602      	mov	r2, r0
 810b4d8:	69fb      	ldr	r3, [r7, #28]
 810b4da:	1ad3      	subs	r3, r2, r3
 810b4dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810b4de:	429a      	cmp	r2, r3
 810b4e0:	d803      	bhi.n	810b4ea <HAL_SPI_TransmitReceive+0x1ea>
 810b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b4e8:	d102      	bne.n	810b4f0 <HAL_SPI_TransmitReceive+0x1f0>
 810b4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b4ec:	2b00      	cmp	r3, #0
 810b4ee:	d114      	bne.n	810b51a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810b4f0:	68f8      	ldr	r0, [r7, #12]
 810b4f2:	f000 fc11 	bl	810bd18 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 810b4f6:	68fb      	ldr	r3, [r7, #12]
 810b4f8:	2200      	movs	r2, #0
 810b4fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b4fe:	68fb      	ldr	r3, [r7, #12]
 810b500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b504:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b508:	68fb      	ldr	r3, [r7, #12]
 810b50a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810b50e:	68fb      	ldr	r3, [r7, #12]
 810b510:	2201      	movs	r2, #1
 810b512:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 810b516:	2301      	movs	r3, #1
 810b518:	e1d7      	b.n	810b8ca <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b51a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b51c:	2b00      	cmp	r3, #0
 810b51e:	d193      	bne.n	810b448 <HAL_SPI_TransmitReceive+0x148>
 810b520:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b522:	2b00      	cmp	r3, #0
 810b524:	d190      	bne.n	810b448 <HAL_SPI_TransmitReceive+0x148>
 810b526:	e1a9      	b.n	810b87c <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810b528:	68fb      	ldr	r3, [r7, #12]
 810b52a:	68db      	ldr	r3, [r3, #12]
 810b52c:	2b07      	cmp	r3, #7
 810b52e:	f240 819d 	bls.w	810b86c <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b532:	e0a6      	b.n	810b682 <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 810b534:	68fb      	ldr	r3, [r7, #12]
 810b536:	681b      	ldr	r3, [r3, #0]
 810b538:	695b      	ldr	r3, [r3, #20]
 810b53a:	f003 0302 	and.w	r3, r3, #2
 810b53e:	2b02      	cmp	r3, #2
 810b540:	d139      	bne.n	810b5b6 <HAL_SPI_TransmitReceive+0x2b6>
 810b542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b544:	2b00      	cmp	r3, #0
 810b546:	d036      	beq.n	810b5b6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810b548:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b54a:	2b01      	cmp	r3, #1
 810b54c:	d91c      	bls.n	810b588 <HAL_SPI_TransmitReceive+0x288>
 810b54e:	68fb      	ldr	r3, [r7, #12]
 810b550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b552:	2b00      	cmp	r3, #0
 810b554:	d018      	beq.n	810b588 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810b556:	68fb      	ldr	r3, [r7, #12]
 810b558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b55a:	68fb      	ldr	r3, [r7, #12]
 810b55c:	681b      	ldr	r3, [r3, #0]
 810b55e:	6812      	ldr	r2, [r2, #0]
 810b560:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810b562:	68fb      	ldr	r3, [r7, #12]
 810b564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b566:	1d1a      	adds	r2, r3, #4
 810b568:	68fb      	ldr	r3, [r7, #12]
 810b56a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810b56c:	68fb      	ldr	r3, [r7, #12]
 810b56e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b572:	b29b      	uxth	r3, r3
 810b574:	3b02      	subs	r3, #2
 810b576:	b29a      	uxth	r2, r3
 810b578:	68fb      	ldr	r3, [r7, #12]
 810b57a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b57e:	68fb      	ldr	r3, [r7, #12]
 810b580:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b584:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810b586:	e016      	b.n	810b5b6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810b588:	68fb      	ldr	r3, [r7, #12]
 810b58a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b58c:	881a      	ldrh	r2, [r3, #0]
 810b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b590:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810b592:	68fb      	ldr	r3, [r7, #12]
 810b594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b596:	1c9a      	adds	r2, r3, #2
 810b598:	68fb      	ldr	r3, [r7, #12]
 810b59a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810b59c:	68fb      	ldr	r3, [r7, #12]
 810b59e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b5a2:	b29b      	uxth	r3, r3
 810b5a4:	3b01      	subs	r3, #1
 810b5a6:	b29a      	uxth	r2, r3
 810b5a8:	68fb      	ldr	r3, [r7, #12]
 810b5aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b5ae:	68fb      	ldr	r3, [r7, #12]
 810b5b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b5b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 810b5b6:	68fb      	ldr	r3, [r7, #12]
 810b5b8:	681b      	ldr	r3, [r3, #0]
 810b5ba:	695b      	ldr	r3, [r3, #20]
 810b5bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b5c0:	2b00      	cmp	r3, #0
 810b5c2:	d03a      	beq.n	810b63a <HAL_SPI_TransmitReceive+0x33a>
 810b5c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b5c6:	2b00      	cmp	r3, #0
 810b5c8:	d037      	beq.n	810b63a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810b5ca:	68fb      	ldr	r3, [r7, #12]
 810b5cc:	681b      	ldr	r3, [r3, #0]
 810b5ce:	695b      	ldr	r3, [r3, #20]
 810b5d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b5d4:	2b00      	cmp	r3, #0
 810b5d6:	d018      	beq.n	810b60a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b5d8:	68fb      	ldr	r3, [r7, #12]
 810b5da:	681a      	ldr	r2, [r3, #0]
 810b5dc:	68fb      	ldr	r3, [r7, #12]
 810b5de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b5e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b5e2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b5e4:	68fb      	ldr	r3, [r7, #12]
 810b5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b5e8:	1d1a      	adds	r2, r3, #4
 810b5ea:	68fb      	ldr	r3, [r7, #12]
 810b5ec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b5ee:	68fb      	ldr	r3, [r7, #12]
 810b5f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b5f4:	b29b      	uxth	r3, r3
 810b5f6:	3b02      	subs	r3, #2
 810b5f8:	b29a      	uxth	r2, r3
 810b5fa:	68fb      	ldr	r3, [r7, #12]
 810b5fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b600:	68fb      	ldr	r3, [r7, #12]
 810b602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b606:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810b608:	e017      	b.n	810b63a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b60a:	68fb      	ldr	r3, [r7, #12]
 810b60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b60e:	6a3a      	ldr	r2, [r7, #32]
 810b610:	8812      	ldrh	r2, [r2, #0]
 810b612:	b292      	uxth	r2, r2
 810b614:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b616:	68fb      	ldr	r3, [r7, #12]
 810b618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b61a:	1c9a      	adds	r2, r3, #2
 810b61c:	68fb      	ldr	r3, [r7, #12]
 810b61e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b620:	68fb      	ldr	r3, [r7, #12]
 810b622:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b626:	b29b      	uxth	r3, r3
 810b628:	3b01      	subs	r3, #1
 810b62a:	b29a      	uxth	r2, r3
 810b62c:	68fb      	ldr	r3, [r7, #12]
 810b62e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b632:	68fb      	ldr	r3, [r7, #12]
 810b634:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b638:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b63a:	f7f7 fc41 	bl	8102ec0 <HAL_GetTick>
 810b63e:	4602      	mov	r2, r0
 810b640:	69fb      	ldr	r3, [r7, #28]
 810b642:	1ad3      	subs	r3, r2, r3
 810b644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810b646:	429a      	cmp	r2, r3
 810b648:	d803      	bhi.n	810b652 <HAL_SPI_TransmitReceive+0x352>
 810b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b650:	d102      	bne.n	810b658 <HAL_SPI_TransmitReceive+0x358>
 810b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b654:	2b00      	cmp	r3, #0
 810b656:	d114      	bne.n	810b682 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810b658:	68f8      	ldr	r0, [r7, #12]
 810b65a:	f000 fb5d 	bl	810bd18 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 810b65e:	68fb      	ldr	r3, [r7, #12]
 810b660:	2200      	movs	r2, #0
 810b662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b666:	68fb      	ldr	r3, [r7, #12]
 810b668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b66c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b670:	68fb      	ldr	r3, [r7, #12]
 810b672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810b676:	68fb      	ldr	r3, [r7, #12]
 810b678:	2201      	movs	r2, #1
 810b67a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 810b67e:	2301      	movs	r3, #1
 810b680:	e123      	b.n	810b8ca <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b684:	2b00      	cmp	r3, #0
 810b686:	f47f af55 	bne.w	810b534 <HAL_SPI_TransmitReceive+0x234>
 810b68a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b68c:	2b00      	cmp	r3, #0
 810b68e:	f47f af51 	bne.w	810b534 <HAL_SPI_TransmitReceive+0x234>
 810b692:	e0f3      	b.n	810b87c <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810b694:	68fb      	ldr	r3, [r7, #12]
 810b696:	681b      	ldr	r3, [r3, #0]
 810b698:	695b      	ldr	r3, [r3, #20]
 810b69a:	f003 0302 	and.w	r3, r3, #2
 810b69e:	2b02      	cmp	r3, #2
 810b6a0:	d15a      	bne.n	810b758 <HAL_SPI_TransmitReceive+0x458>
 810b6a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b6a4:	2b00      	cmp	r3, #0
 810b6a6:	d057      	beq.n	810b758 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810b6a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b6aa:	2b03      	cmp	r3, #3
 810b6ac:	d91c      	bls.n	810b6e8 <HAL_SPI_TransmitReceive+0x3e8>
 810b6ae:	68fb      	ldr	r3, [r7, #12]
 810b6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b6b2:	2b40      	cmp	r3, #64	; 0x40
 810b6b4:	d918      	bls.n	810b6e8 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810b6b6:	68fb      	ldr	r3, [r7, #12]
 810b6b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b6ba:	68fb      	ldr	r3, [r7, #12]
 810b6bc:	681b      	ldr	r3, [r3, #0]
 810b6be:	6812      	ldr	r2, [r2, #0]
 810b6c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810b6c2:	68fb      	ldr	r3, [r7, #12]
 810b6c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b6c6:	1d1a      	adds	r2, r3, #4
 810b6c8:	68fb      	ldr	r3, [r7, #12]
 810b6ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810b6cc:	68fb      	ldr	r3, [r7, #12]
 810b6ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b6d2:	b29b      	uxth	r3, r3
 810b6d4:	3b04      	subs	r3, #4
 810b6d6:	b29a      	uxth	r2, r3
 810b6d8:	68fb      	ldr	r3, [r7, #12]
 810b6da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b6de:	68fb      	ldr	r3, [r7, #12]
 810b6e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b6e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810b6e6:	e037      	b.n	810b758 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810b6e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b6ea:	2b01      	cmp	r3, #1
 810b6ec:	d91b      	bls.n	810b726 <HAL_SPI_TransmitReceive+0x426>
 810b6ee:	68fb      	ldr	r3, [r7, #12]
 810b6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b6f2:	2b00      	cmp	r3, #0
 810b6f4:	d017      	beq.n	810b726 <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810b6f6:	68fb      	ldr	r3, [r7, #12]
 810b6f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b6fa:	881a      	ldrh	r2, [r3, #0]
 810b6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b6fe:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810b700:	68fb      	ldr	r3, [r7, #12]
 810b702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b704:	1c9a      	adds	r2, r3, #2
 810b706:	68fb      	ldr	r3, [r7, #12]
 810b708:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810b70a:	68fb      	ldr	r3, [r7, #12]
 810b70c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b710:	b29b      	uxth	r3, r3
 810b712:	3b02      	subs	r3, #2
 810b714:	b29a      	uxth	r2, r3
 810b716:	68fb      	ldr	r3, [r7, #12]
 810b718:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b71c:	68fb      	ldr	r3, [r7, #12]
 810b71e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b722:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810b724:	e018      	b.n	810b758 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810b726:	68fb      	ldr	r3, [r7, #12]
 810b728:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810b72a:	68fb      	ldr	r3, [r7, #12]
 810b72c:	681b      	ldr	r3, [r3, #0]
 810b72e:	3320      	adds	r3, #32
 810b730:	7812      	ldrb	r2, [r2, #0]
 810b732:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810b734:	68fb      	ldr	r3, [r7, #12]
 810b736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810b738:	1c5a      	adds	r2, r3, #1
 810b73a:	68fb      	ldr	r3, [r7, #12]
 810b73c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810b73e:	68fb      	ldr	r3, [r7, #12]
 810b740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b744:	b29b      	uxth	r3, r3
 810b746:	3b01      	subs	r3, #1
 810b748:	b29a      	uxth	r2, r3
 810b74a:	68fb      	ldr	r3, [r7, #12]
 810b74c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810b750:	68fb      	ldr	r3, [r7, #12]
 810b752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810b756:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 810b758:	68fb      	ldr	r3, [r7, #12]
 810b75a:	681b      	ldr	r3, [r3, #0]
 810b75c:	695b      	ldr	r3, [r3, #20]
 810b75e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810b762:	2b00      	cmp	r3, #0
 810b764:	d05e      	beq.n	810b824 <HAL_SPI_TransmitReceive+0x524>
 810b766:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b768:	2b00      	cmp	r3, #0
 810b76a:	d05b      	beq.n	810b824 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810b76c:	68fb      	ldr	r3, [r7, #12]
 810b76e:	681b      	ldr	r3, [r3, #0]
 810b770:	695b      	ldr	r3, [r3, #20]
 810b772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810b776:	2b00      	cmp	r3, #0
 810b778:	d018      	beq.n	810b7ac <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810b77a:	68fb      	ldr	r3, [r7, #12]
 810b77c:	681a      	ldr	r2, [r3, #0]
 810b77e:	68fb      	ldr	r3, [r7, #12]
 810b780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b782:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810b784:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810b786:	68fb      	ldr	r3, [r7, #12]
 810b788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b78a:	1d1a      	adds	r2, r3, #4
 810b78c:	68fb      	ldr	r3, [r7, #12]
 810b78e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810b790:	68fb      	ldr	r3, [r7, #12]
 810b792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b796:	b29b      	uxth	r3, r3
 810b798:	3b04      	subs	r3, #4
 810b79a:	b29a      	uxth	r2, r3
 810b79c:	68fb      	ldr	r3, [r7, #12]
 810b79e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b7a2:	68fb      	ldr	r3, [r7, #12]
 810b7a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b7a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810b7aa:	e03b      	b.n	810b824 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 810b7ac:	68fb      	ldr	r3, [r7, #12]
 810b7ae:	681b      	ldr	r3, [r3, #0]
 810b7b0:	695b      	ldr	r3, [r3, #20]
 810b7b2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810b7b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b7ba:	d918      	bls.n	810b7ee <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810b7bc:	68fb      	ldr	r3, [r7, #12]
 810b7be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b7c0:	6a3a      	ldr	r2, [r7, #32]
 810b7c2:	8812      	ldrh	r2, [r2, #0]
 810b7c4:	b292      	uxth	r2, r2
 810b7c6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810b7c8:	68fb      	ldr	r3, [r7, #12]
 810b7ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b7cc:	1c9a      	adds	r2, r3, #2
 810b7ce:	68fb      	ldr	r3, [r7, #12]
 810b7d0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810b7d2:	68fb      	ldr	r3, [r7, #12]
 810b7d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b7d8:	b29b      	uxth	r3, r3
 810b7da:	3b02      	subs	r3, #2
 810b7dc:	b29a      	uxth	r2, r3
 810b7de:	68fb      	ldr	r3, [r7, #12]
 810b7e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b7e4:	68fb      	ldr	r3, [r7, #12]
 810b7e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b7ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810b7ec:	e01a      	b.n	810b824 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810b7ee:	68fb      	ldr	r3, [r7, #12]
 810b7f0:	681b      	ldr	r3, [r3, #0]
 810b7f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810b7f6:	68fb      	ldr	r3, [r7, #12]
 810b7f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b7fa:	7812      	ldrb	r2, [r2, #0]
 810b7fc:	b2d2      	uxtb	r2, r2
 810b7fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810b800:	68fb      	ldr	r3, [r7, #12]
 810b802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b804:	1c5a      	adds	r2, r3, #1
 810b806:	68fb      	ldr	r3, [r7, #12]
 810b808:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810b80a:	68fb      	ldr	r3, [r7, #12]
 810b80c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b810:	b29b      	uxth	r3, r3
 810b812:	3b01      	subs	r3, #1
 810b814:	b29a      	uxth	r2, r3
 810b816:	68fb      	ldr	r3, [r7, #12]
 810b818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810b81c:	68fb      	ldr	r3, [r7, #12]
 810b81e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810b822:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810b824:	f7f7 fb4c 	bl	8102ec0 <HAL_GetTick>
 810b828:	4602      	mov	r2, r0
 810b82a:	69fb      	ldr	r3, [r7, #28]
 810b82c:	1ad3      	subs	r3, r2, r3
 810b82e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810b830:	429a      	cmp	r2, r3
 810b832:	d803      	bhi.n	810b83c <HAL_SPI_TransmitReceive+0x53c>
 810b834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b836:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b83a:	d102      	bne.n	810b842 <HAL_SPI_TransmitReceive+0x542>
 810b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b83e:	2b00      	cmp	r3, #0
 810b840:	d114      	bne.n	810b86c <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810b842:	68f8      	ldr	r0, [r7, #12]
 810b844:	f000 fa68 	bl	810bd18 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 810b848:	68fb      	ldr	r3, [r7, #12]
 810b84a:	2200      	movs	r2, #0
 810b84c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810b850:	68fb      	ldr	r3, [r7, #12]
 810b852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b856:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810b85a:	68fb      	ldr	r3, [r7, #12]
 810b85c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810b860:	68fb      	ldr	r3, [r7, #12]
 810b862:	2201      	movs	r2, #1
 810b864:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 810b868:	2301      	movs	r3, #1
 810b86a:	e02e      	b.n	810b8ca <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810b86c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810b86e:	2b00      	cmp	r3, #0
 810b870:	f47f af10 	bne.w	810b694 <HAL_SPI_TransmitReceive+0x394>
 810b874:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810b876:	2b00      	cmp	r3, #0
 810b878:	f47f af0c 	bne.w	810b694 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810b87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b87e:	9300      	str	r3, [sp, #0]
 810b880:	69fb      	ldr	r3, [r7, #28]
 810b882:	2200      	movs	r2, #0
 810b884:	2108      	movs	r1, #8
 810b886:	68f8      	ldr	r0, [r7, #12]
 810b888:	f000 fae6 	bl	810be58 <SPI_WaitOnFlagUntilTimeout>
 810b88c:	4603      	mov	r3, r0
 810b88e:	2b00      	cmp	r3, #0
 810b890:	d007      	beq.n	810b8a2 <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810b892:	68fb      	ldr	r3, [r7, #12]
 810b894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b898:	f043 0220 	orr.w	r2, r3, #32
 810b89c:	68fb      	ldr	r3, [r7, #12]
 810b89e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810b8a2:	68f8      	ldr	r0, [r7, #12]
 810b8a4:	f000 fa38 	bl	810bd18 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 810b8a8:	68fb      	ldr	r3, [r7, #12]
 810b8aa:	2200      	movs	r2, #0
 810b8ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810b8b0:	68fb      	ldr	r3, [r7, #12]
 810b8b2:	2201      	movs	r2, #1
 810b8b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810b8b8:	68fb      	ldr	r3, [r7, #12]
 810b8ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b8be:	2b00      	cmp	r3, #0
 810b8c0:	d001      	beq.n	810b8c6 <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 810b8c2:	2301      	movs	r3, #1
 810b8c4:	e001      	b.n	810b8ca <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 810b8c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 810b8ca:	4618      	mov	r0, r3
 810b8cc:	3730      	adds	r7, #48	; 0x30
 810b8ce:	46bd      	mov	sp, r7
 810b8d0:	bd80      	pop	{r7, pc}
	...

0810b8d4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810b8d4:	b580      	push	{r7, lr}
 810b8d6:	b08a      	sub	sp, #40	; 0x28
 810b8d8:	af00      	add	r7, sp, #0
 810b8da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810b8dc:	687b      	ldr	r3, [r7, #4]
 810b8de:	681b      	ldr	r3, [r3, #0]
 810b8e0:	691b      	ldr	r3, [r3, #16]
 810b8e2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810b8e4:	687b      	ldr	r3, [r7, #4]
 810b8e6:	681b      	ldr	r3, [r3, #0]
 810b8e8:	695b      	ldr	r3, [r3, #20]
 810b8ea:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810b8ec:	6a3a      	ldr	r2, [r7, #32]
 810b8ee:	69fb      	ldr	r3, [r7, #28]
 810b8f0:	4013      	ands	r3, r2
 810b8f2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810b8f4:	687b      	ldr	r3, [r7, #4]
 810b8f6:	681b      	ldr	r3, [r3, #0]
 810b8f8:	689b      	ldr	r3, [r3, #8]
 810b8fa:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810b8fc:	2300      	movs	r3, #0
 810b8fe:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810b900:	687b      	ldr	r3, [r7, #4]
 810b902:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810b906:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810b908:	687b      	ldr	r3, [r7, #4]
 810b90a:	681b      	ldr	r3, [r3, #0]
 810b90c:	3330      	adds	r3, #48	; 0x30
 810b90e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810b910:	69bb      	ldr	r3, [r7, #24]
 810b912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b916:	2b00      	cmp	r3, #0
 810b918:	d113      	bne.n	810b942 <HAL_SPI_IRQHandler+0x6e>
 810b91a:	69bb      	ldr	r3, [r7, #24]
 810b91c:	f003 0320 	and.w	r3, r3, #32
 810b920:	2b00      	cmp	r3, #0
 810b922:	d10e      	bne.n	810b942 <HAL_SPI_IRQHandler+0x6e>
 810b924:	69bb      	ldr	r3, [r7, #24]
 810b926:	f003 0304 	and.w	r3, r3, #4
 810b92a:	2b00      	cmp	r3, #0
 810b92c:	d009      	beq.n	810b942 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810b92e:	687b      	ldr	r3, [r7, #4]
 810b930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b932:	6878      	ldr	r0, [r7, #4]
 810b934:	4798      	blx	r3
    hspi->RxISR(hspi);
 810b936:	687b      	ldr	r3, [r7, #4]
 810b938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b93a:	6878      	ldr	r0, [r7, #4]
 810b93c:	4798      	blx	r3
    handled = 1UL;
 810b93e:	2301      	movs	r3, #1
 810b940:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810b942:	69bb      	ldr	r3, [r7, #24]
 810b944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b948:	2b00      	cmp	r3, #0
 810b94a:	d10f      	bne.n	810b96c <HAL_SPI_IRQHandler+0x98>
 810b94c:	69bb      	ldr	r3, [r7, #24]
 810b94e:	f003 0301 	and.w	r3, r3, #1
 810b952:	2b00      	cmp	r3, #0
 810b954:	d00a      	beq.n	810b96c <HAL_SPI_IRQHandler+0x98>
 810b956:	69bb      	ldr	r3, [r7, #24]
 810b958:	f003 0304 	and.w	r3, r3, #4
 810b95c:	2b00      	cmp	r3, #0
 810b95e:	d105      	bne.n	810b96c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810b960:	687b      	ldr	r3, [r7, #4]
 810b962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b964:	6878      	ldr	r0, [r7, #4]
 810b966:	4798      	blx	r3
    handled = 1UL;
 810b968:	2301      	movs	r3, #1
 810b96a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810b96c:	69bb      	ldr	r3, [r7, #24]
 810b96e:	f003 0320 	and.w	r3, r3, #32
 810b972:	2b00      	cmp	r3, #0
 810b974:	d10f      	bne.n	810b996 <HAL_SPI_IRQHandler+0xc2>
 810b976:	69bb      	ldr	r3, [r7, #24]
 810b978:	f003 0302 	and.w	r3, r3, #2
 810b97c:	2b00      	cmp	r3, #0
 810b97e:	d00a      	beq.n	810b996 <HAL_SPI_IRQHandler+0xc2>
 810b980:	69bb      	ldr	r3, [r7, #24]
 810b982:	f003 0304 	and.w	r3, r3, #4
 810b986:	2b00      	cmp	r3, #0
 810b988:	d105      	bne.n	810b996 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810b98a:	687b      	ldr	r3, [r7, #4]
 810b98c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b98e:	6878      	ldr	r0, [r7, #4]
 810b990:	4798      	blx	r3
    handled = 1UL;
 810b992:	2301      	movs	r3, #1
 810b994:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b998:	2b00      	cmp	r3, #0
 810b99a:	f040 8171 	bne.w	810bc80 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810b99e:	69bb      	ldr	r3, [r7, #24]
 810b9a0:	f003 0308 	and.w	r3, r3, #8
 810b9a4:	2b00      	cmp	r3, #0
 810b9a6:	f000 80a0 	beq.w	810baea <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810b9aa:	687b      	ldr	r3, [r7, #4]
 810b9ac:	681b      	ldr	r3, [r3, #0]
 810b9ae:	699a      	ldr	r2, [r3, #24]
 810b9b0:	687b      	ldr	r3, [r7, #4]
 810b9b2:	681b      	ldr	r3, [r3, #0]
 810b9b4:	f042 0208 	orr.w	r2, r2, #8
 810b9b8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810b9ba:	687b      	ldr	r3, [r7, #4]
 810b9bc:	681b      	ldr	r3, [r3, #0]
 810b9be:	699a      	ldr	r2, [r3, #24]
 810b9c0:	687b      	ldr	r3, [r7, #4]
 810b9c2:	681b      	ldr	r3, [r3, #0]
 810b9c4:	f042 0210 	orr.w	r2, r2, #16
 810b9c8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810b9ca:	687b      	ldr	r3, [r7, #4]
 810b9cc:	681b      	ldr	r3, [r3, #0]
 810b9ce:	699a      	ldr	r2, [r3, #24]
 810b9d0:	687b      	ldr	r3, [r7, #4]
 810b9d2:	681b      	ldr	r3, [r3, #0]
 810b9d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810b9d8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810b9da:	687b      	ldr	r3, [r7, #4]
 810b9dc:	681b      	ldr	r3, [r3, #0]
 810b9de:	691a      	ldr	r2, [r3, #16]
 810b9e0:	687b      	ldr	r3, [r7, #4]
 810b9e2:	681b      	ldr	r3, [r3, #0]
 810b9e4:	f022 0208 	bic.w	r2, r2, #8
 810b9e8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810b9ea:	697b      	ldr	r3, [r7, #20]
 810b9ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810b9f0:	2b00      	cmp	r3, #0
 810b9f2:	d00f      	beq.n	810ba14 <HAL_SPI_IRQHandler+0x140>
 810b9f4:	7cfb      	ldrb	r3, [r7, #19]
 810b9f6:	2b04      	cmp	r3, #4
 810b9f8:	d004      	beq.n	810ba04 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810b9fa:	687b      	ldr	r3, [r7, #4]
 810b9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b9fe:	69db      	ldr	r3, [r3, #28]
 810ba00:	2b00      	cmp	r3, #0
 810ba02:	d007      	beq.n	810ba14 <HAL_SPI_IRQHandler+0x140>
 810ba04:	7cfb      	ldrb	r3, [r7, #19]
 810ba06:	2b03      	cmp	r3, #3
 810ba08:	d059      	beq.n	810babe <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810ba0a:	687b      	ldr	r3, [r7, #4]
 810ba0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ba0e:	69db      	ldr	r3, [r3, #28]
 810ba10:	2b00      	cmp	r3, #0
 810ba12:	d154      	bne.n	810babe <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810ba14:	687b      	ldr	r3, [r7, #4]
 810ba16:	681b      	ldr	r3, [r3, #0]
 810ba18:	689b      	ldr	r3, [r3, #8]
 810ba1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810ba1e:	2b00      	cmp	r3, #0
 810ba20:	d13d      	bne.n	810ba9e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810ba22:	e036      	b.n	810ba92 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810ba24:	687b      	ldr	r3, [r7, #4]
 810ba26:	68db      	ldr	r3, [r3, #12]
 810ba28:	2b0f      	cmp	r3, #15
 810ba2a:	d90b      	bls.n	810ba44 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810ba2c:	687b      	ldr	r3, [r7, #4]
 810ba2e:	681a      	ldr	r2, [r3, #0]
 810ba30:	687b      	ldr	r3, [r7, #4]
 810ba32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810ba36:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810ba38:	687b      	ldr	r3, [r7, #4]
 810ba3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba3c:	1d1a      	adds	r2, r3, #4
 810ba3e:	687b      	ldr	r3, [r7, #4]
 810ba40:	665a      	str	r2, [r3, #100]	; 0x64
 810ba42:	e01d      	b.n	810ba80 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810ba44:	687b      	ldr	r3, [r7, #4]
 810ba46:	68db      	ldr	r3, [r3, #12]
 810ba48:	2b07      	cmp	r3, #7
 810ba4a:	d90b      	bls.n	810ba64 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810ba4c:	687b      	ldr	r3, [r7, #4]
 810ba4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba50:	68fa      	ldr	r2, [r7, #12]
 810ba52:	8812      	ldrh	r2, [r2, #0]
 810ba54:	b292      	uxth	r2, r2
 810ba56:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810ba58:	687b      	ldr	r3, [r7, #4]
 810ba5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba5c:	1c9a      	adds	r2, r3, #2
 810ba5e:	687b      	ldr	r3, [r7, #4]
 810ba60:	665a      	str	r2, [r3, #100]	; 0x64
 810ba62:	e00d      	b.n	810ba80 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810ba64:	687b      	ldr	r3, [r7, #4]
 810ba66:	681b      	ldr	r3, [r3, #0]
 810ba68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810ba6c:	687b      	ldr	r3, [r7, #4]
 810ba6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba70:	7812      	ldrb	r2, [r2, #0]
 810ba72:	b2d2      	uxtb	r2, r2
 810ba74:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810ba76:	687b      	ldr	r3, [r7, #4]
 810ba78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810ba7a:	1c5a      	adds	r2, r3, #1
 810ba7c:	687b      	ldr	r3, [r7, #4]
 810ba7e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810ba80:	687b      	ldr	r3, [r7, #4]
 810ba82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ba86:	b29b      	uxth	r3, r3
 810ba88:	3b01      	subs	r3, #1
 810ba8a:	b29a      	uxth	r2, r3
 810ba8c:	687b      	ldr	r3, [r7, #4]
 810ba8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810ba92:	687b      	ldr	r3, [r7, #4]
 810ba94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810ba98:	b29b      	uxth	r3, r3
 810ba9a:	2b00      	cmp	r3, #0
 810ba9c:	d1c2      	bne.n	810ba24 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810ba9e:	6878      	ldr	r0, [r7, #4]
 810baa0:	f000 f93a 	bl	810bd18 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810baa4:	687b      	ldr	r3, [r7, #4]
 810baa6:	2201      	movs	r2, #1
 810baa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810baac:	687b      	ldr	r3, [r7, #4]
 810baae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bab2:	2b00      	cmp	r3, #0
 810bab4:	d003      	beq.n	810babe <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810bab6:	6878      	ldr	r0, [r7, #4]
 810bab8:	f000 f90a 	bl	810bcd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810babc:	e0e5      	b.n	810bc8a <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810babe:	7cfb      	ldrb	r3, [r7, #19]
 810bac0:	2b05      	cmp	r3, #5
 810bac2:	d103      	bne.n	810bacc <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810bac4:	6878      	ldr	r0, [r7, #4]
 810bac6:	f000 f8f9 	bl	810bcbc <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810baca:	e0db      	b.n	810bc84 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810bacc:	7cfb      	ldrb	r3, [r7, #19]
 810bace:	2b04      	cmp	r3, #4
 810bad0:	d103      	bne.n	810bada <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810bad2:	6878      	ldr	r0, [r7, #4]
 810bad4:	f000 f8e8 	bl	810bca8 <HAL_SPI_RxCpltCallback>
    return;
 810bad8:	e0d4      	b.n	810bc84 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810bada:	7cfb      	ldrb	r3, [r7, #19]
 810badc:	2b03      	cmp	r3, #3
 810bade:	f040 80d1 	bne.w	810bc84 <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810bae2:	6878      	ldr	r0, [r7, #4]
 810bae4:	f000 f8d6 	bl	810bc94 <HAL_SPI_TxCpltCallback>
    return;
 810bae8:	e0cc      	b.n	810bc84 <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810baea:	69fb      	ldr	r3, [r7, #28]
 810baec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810baf0:	2b00      	cmp	r3, #0
 810baf2:	d00d      	beq.n	810bb10 <HAL_SPI_IRQHandler+0x23c>
 810baf4:	6a3b      	ldr	r3, [r7, #32]
 810baf6:	f003 0308 	and.w	r3, r3, #8
 810bafa:	2b00      	cmp	r3, #0
 810bafc:	d008      	beq.n	810bb10 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810bafe:	687b      	ldr	r3, [r7, #4]
 810bb00:	681b      	ldr	r3, [r3, #0]
 810bb02:	699a      	ldr	r2, [r3, #24]
 810bb04:	687b      	ldr	r3, [r7, #4]
 810bb06:	681b      	ldr	r3, [r3, #0]
 810bb08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810bb0c:	619a      	str	r2, [r3, #24]

    return;
 810bb0e:	e0bc      	b.n	810bc8a <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810bb10:	69bb      	ldr	r3, [r7, #24]
 810bb12:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810bb16:	2b00      	cmp	r3, #0
 810bb18:	f000 80b7 	beq.w	810bc8a <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810bb1c:	69bb      	ldr	r3, [r7, #24]
 810bb1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810bb22:	2b00      	cmp	r3, #0
 810bb24:	d00f      	beq.n	810bb46 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810bb26:	687b      	ldr	r3, [r7, #4]
 810bb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bb2c:	f043 0204 	orr.w	r2, r3, #4
 810bb30:	687b      	ldr	r3, [r7, #4]
 810bb32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810bb36:	687b      	ldr	r3, [r7, #4]
 810bb38:	681b      	ldr	r3, [r3, #0]
 810bb3a:	699a      	ldr	r2, [r3, #24]
 810bb3c:	687b      	ldr	r3, [r7, #4]
 810bb3e:	681b      	ldr	r3, [r3, #0]
 810bb40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810bb44:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810bb46:	69bb      	ldr	r3, [r7, #24]
 810bb48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810bb4c:	2b00      	cmp	r3, #0
 810bb4e:	d00f      	beq.n	810bb70 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810bb50:	687b      	ldr	r3, [r7, #4]
 810bb52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bb56:	f043 0201 	orr.w	r2, r3, #1
 810bb5a:	687b      	ldr	r3, [r7, #4]
 810bb5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810bb60:	687b      	ldr	r3, [r7, #4]
 810bb62:	681b      	ldr	r3, [r3, #0]
 810bb64:	699a      	ldr	r2, [r3, #24]
 810bb66:	687b      	ldr	r3, [r7, #4]
 810bb68:	681b      	ldr	r3, [r3, #0]
 810bb6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810bb6e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810bb70:	69bb      	ldr	r3, [r7, #24]
 810bb72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810bb76:	2b00      	cmp	r3, #0
 810bb78:	d00f      	beq.n	810bb9a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810bb7a:	687b      	ldr	r3, [r7, #4]
 810bb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bb80:	f043 0208 	orr.w	r2, r3, #8
 810bb84:	687b      	ldr	r3, [r7, #4]
 810bb86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810bb8a:	687b      	ldr	r3, [r7, #4]
 810bb8c:	681b      	ldr	r3, [r3, #0]
 810bb8e:	699a      	ldr	r2, [r3, #24]
 810bb90:	687b      	ldr	r3, [r7, #4]
 810bb92:	681b      	ldr	r3, [r3, #0]
 810bb94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810bb98:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810bb9a:	69bb      	ldr	r3, [r7, #24]
 810bb9c:	f003 0320 	and.w	r3, r3, #32
 810bba0:	2b00      	cmp	r3, #0
 810bba2:	d00f      	beq.n	810bbc4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810bba4:	687b      	ldr	r3, [r7, #4]
 810bba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bbaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810bbae:	687b      	ldr	r3, [r7, #4]
 810bbb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810bbb4:	687b      	ldr	r3, [r7, #4]
 810bbb6:	681b      	ldr	r3, [r3, #0]
 810bbb8:	699a      	ldr	r2, [r3, #24]
 810bbba:	687b      	ldr	r3, [r7, #4]
 810bbbc:	681b      	ldr	r3, [r3, #0]
 810bbbe:	f042 0220 	orr.w	r2, r2, #32
 810bbc2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810bbc4:	687b      	ldr	r3, [r7, #4]
 810bbc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bbca:	2b00      	cmp	r3, #0
 810bbcc:	d05c      	beq.n	810bc88 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810bbce:	687b      	ldr	r3, [r7, #4]
 810bbd0:	681b      	ldr	r3, [r3, #0]
 810bbd2:	681a      	ldr	r2, [r3, #0]
 810bbd4:	687b      	ldr	r3, [r7, #4]
 810bbd6:	681b      	ldr	r3, [r3, #0]
 810bbd8:	f022 0201 	bic.w	r2, r2, #1
 810bbdc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810bbde:	687b      	ldr	r3, [r7, #4]
 810bbe0:	681b      	ldr	r3, [r3, #0]
 810bbe2:	691b      	ldr	r3, [r3, #16]
 810bbe4:	687a      	ldr	r2, [r7, #4]
 810bbe6:	6812      	ldr	r2, [r2, #0]
 810bbe8:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810bbec:	f023 0303 	bic.w	r3, r3, #3
 810bbf0:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810bbf2:	697b      	ldr	r3, [r7, #20]
 810bbf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810bbf8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810bbfc:	d138      	bne.n	810bc70 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810bbfe:	687b      	ldr	r3, [r7, #4]
 810bc00:	681b      	ldr	r3, [r3, #0]
 810bc02:	689a      	ldr	r2, [r3, #8]
 810bc04:	687b      	ldr	r3, [r7, #4]
 810bc06:	681b      	ldr	r3, [r3, #0]
 810bc08:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810bc0c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810bc0e:	687b      	ldr	r3, [r7, #4]
 810bc10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bc12:	2b00      	cmp	r3, #0
 810bc14:	d013      	beq.n	810bc3e <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810bc16:	687b      	ldr	r3, [r7, #4]
 810bc18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bc1a:	4a1d      	ldr	r2, [pc, #116]	; (810bc90 <HAL_SPI_IRQHandler+0x3bc>)
 810bc1c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810bc1e:	687b      	ldr	r3, [r7, #4]
 810bc20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810bc22:	4618      	mov	r0, r3
 810bc24:	f7f8 fe74 	bl	8104910 <HAL_DMA_Abort_IT>
 810bc28:	4603      	mov	r3, r0
 810bc2a:	2b00      	cmp	r3, #0
 810bc2c:	d007      	beq.n	810bc3e <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810bc2e:	687b      	ldr	r3, [r7, #4]
 810bc30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bc34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810bc38:	687b      	ldr	r3, [r7, #4]
 810bc3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810bc3e:	687b      	ldr	r3, [r7, #4]
 810bc40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bc42:	2b00      	cmp	r3, #0
 810bc44:	d020      	beq.n	810bc88 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810bc46:	687b      	ldr	r3, [r7, #4]
 810bc48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bc4a:	4a11      	ldr	r2, [pc, #68]	; (810bc90 <HAL_SPI_IRQHandler+0x3bc>)
 810bc4c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810bc4e:	687b      	ldr	r3, [r7, #4]
 810bc50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bc52:	4618      	mov	r0, r3
 810bc54:	f7f8 fe5c 	bl	8104910 <HAL_DMA_Abort_IT>
 810bc58:	4603      	mov	r3, r0
 810bc5a:	2b00      	cmp	r3, #0
 810bc5c:	d014      	beq.n	810bc88 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810bc5e:	687b      	ldr	r3, [r7, #4]
 810bc60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bc64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810bc68:	687b      	ldr	r3, [r7, #4]
 810bc6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810bc6e:	e00b      	b.n	810bc88 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810bc70:	687b      	ldr	r3, [r7, #4]
 810bc72:	2201      	movs	r2, #1
 810bc74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810bc78:	6878      	ldr	r0, [r7, #4]
 810bc7a:	f000 f829 	bl	810bcd0 <HAL_SPI_ErrorCallback>
    return;
 810bc7e:	e003      	b.n	810bc88 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810bc80:	bf00      	nop
 810bc82:	e002      	b.n	810bc8a <HAL_SPI_IRQHandler+0x3b6>
    return;
 810bc84:	bf00      	nop
 810bc86:	e000      	b.n	810bc8a <HAL_SPI_IRQHandler+0x3b6>
    return;
 810bc88:	bf00      	nop
  }
}
 810bc8a:	3728      	adds	r7, #40	; 0x28
 810bc8c:	46bd      	mov	sp, r7
 810bc8e:	bd80      	pop	{r7, pc}
 810bc90:	0810bce5 	.word	0x0810bce5

0810bc94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810bc94:	b480      	push	{r7}
 810bc96:	b083      	sub	sp, #12
 810bc98:	af00      	add	r7, sp, #0
 810bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810bc9c:	bf00      	nop
 810bc9e:	370c      	adds	r7, #12
 810bca0:	46bd      	mov	sp, r7
 810bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bca6:	4770      	bx	lr

0810bca8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810bca8:	b480      	push	{r7}
 810bcaa:	b083      	sub	sp, #12
 810bcac:	af00      	add	r7, sp, #0
 810bcae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810bcb0:	bf00      	nop
 810bcb2:	370c      	adds	r7, #12
 810bcb4:	46bd      	mov	sp, r7
 810bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcba:	4770      	bx	lr

0810bcbc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810bcbc:	b480      	push	{r7}
 810bcbe:	b083      	sub	sp, #12
 810bcc0:	af00      	add	r7, sp, #0
 810bcc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 810bcc4:	bf00      	nop
 810bcc6:	370c      	adds	r7, #12
 810bcc8:	46bd      	mov	sp, r7
 810bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcce:	4770      	bx	lr

0810bcd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810bcd0:	b480      	push	{r7}
 810bcd2:	b083      	sub	sp, #12
 810bcd4:	af00      	add	r7, sp, #0
 810bcd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810bcd8:	bf00      	nop
 810bcda:	370c      	adds	r7, #12
 810bcdc:	46bd      	mov	sp, r7
 810bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bce2:	4770      	bx	lr

0810bce4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810bce4:	b580      	push	{r7, lr}
 810bce6:	b084      	sub	sp, #16
 810bce8:	af00      	add	r7, sp, #0
 810bcea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810bcec:	687b      	ldr	r3, [r7, #4]
 810bcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810bcf0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810bcf2:	68fb      	ldr	r3, [r7, #12]
 810bcf4:	2200      	movs	r2, #0
 810bcf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810bcfa:	68fb      	ldr	r3, [r7, #12]
 810bcfc:	2200      	movs	r2, #0
 810bcfe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810bd02:	68fb      	ldr	r3, [r7, #12]
 810bd04:	2201      	movs	r2, #1
 810bd06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810bd0a:	68f8      	ldr	r0, [r7, #12]
 810bd0c:	f7ff ffe0 	bl	810bcd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810bd10:	bf00      	nop
 810bd12:	3710      	adds	r7, #16
 810bd14:	46bd      	mov	sp, r7
 810bd16:	bd80      	pop	{r7, pc}

0810bd18 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810bd18:	b480      	push	{r7}
 810bd1a:	b085      	sub	sp, #20
 810bd1c:	af00      	add	r7, sp, #0
 810bd1e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810bd20:	687b      	ldr	r3, [r7, #4]
 810bd22:	681b      	ldr	r3, [r3, #0]
 810bd24:	695b      	ldr	r3, [r3, #20]
 810bd26:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810bd28:	687b      	ldr	r3, [r7, #4]
 810bd2a:	681b      	ldr	r3, [r3, #0]
 810bd2c:	699a      	ldr	r2, [r3, #24]
 810bd2e:	687b      	ldr	r3, [r7, #4]
 810bd30:	681b      	ldr	r3, [r3, #0]
 810bd32:	f042 0208 	orr.w	r2, r2, #8
 810bd36:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810bd38:	687b      	ldr	r3, [r7, #4]
 810bd3a:	681b      	ldr	r3, [r3, #0]
 810bd3c:	699a      	ldr	r2, [r3, #24]
 810bd3e:	687b      	ldr	r3, [r7, #4]
 810bd40:	681b      	ldr	r3, [r3, #0]
 810bd42:	f042 0210 	orr.w	r2, r2, #16
 810bd46:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810bd48:	687b      	ldr	r3, [r7, #4]
 810bd4a:	681b      	ldr	r3, [r3, #0]
 810bd4c:	681a      	ldr	r2, [r3, #0]
 810bd4e:	687b      	ldr	r3, [r7, #4]
 810bd50:	681b      	ldr	r3, [r3, #0]
 810bd52:	f022 0201 	bic.w	r2, r2, #1
 810bd56:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810bd58:	687b      	ldr	r3, [r7, #4]
 810bd5a:	681b      	ldr	r3, [r3, #0]
 810bd5c:	691b      	ldr	r3, [r3, #16]
 810bd5e:	687a      	ldr	r2, [r7, #4]
 810bd60:	6812      	ldr	r2, [r2, #0]
 810bd62:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810bd66:	f023 0303 	bic.w	r3, r3, #3
 810bd6a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810bd6c:	687b      	ldr	r3, [r7, #4]
 810bd6e:	681b      	ldr	r3, [r3, #0]
 810bd70:	689a      	ldr	r2, [r3, #8]
 810bd72:	687b      	ldr	r3, [r7, #4]
 810bd74:	681b      	ldr	r3, [r3, #0]
 810bd76:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810bd7a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810bd7c:	687b      	ldr	r3, [r7, #4]
 810bd7e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810bd82:	b2db      	uxtb	r3, r3
 810bd84:	2b04      	cmp	r3, #4
 810bd86:	d014      	beq.n	810bdb2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810bd88:	68fb      	ldr	r3, [r7, #12]
 810bd8a:	f003 0320 	and.w	r3, r3, #32
 810bd8e:	2b00      	cmp	r3, #0
 810bd90:	d00f      	beq.n	810bdb2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810bd92:	687b      	ldr	r3, [r7, #4]
 810bd94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bd98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810bd9c:	687b      	ldr	r3, [r7, #4]
 810bd9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810bda2:	687b      	ldr	r3, [r7, #4]
 810bda4:	681b      	ldr	r3, [r3, #0]
 810bda6:	699a      	ldr	r2, [r3, #24]
 810bda8:	687b      	ldr	r3, [r7, #4]
 810bdaa:	681b      	ldr	r3, [r3, #0]
 810bdac:	f042 0220 	orr.w	r2, r2, #32
 810bdb0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810bdb2:	687b      	ldr	r3, [r7, #4]
 810bdb4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810bdb8:	b2db      	uxtb	r3, r3
 810bdba:	2b03      	cmp	r3, #3
 810bdbc:	d014      	beq.n	810bde8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810bdbe:	68fb      	ldr	r3, [r7, #12]
 810bdc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810bdc4:	2b00      	cmp	r3, #0
 810bdc6:	d00f      	beq.n	810bde8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810bdc8:	687b      	ldr	r3, [r7, #4]
 810bdca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bdce:	f043 0204 	orr.w	r2, r3, #4
 810bdd2:	687b      	ldr	r3, [r7, #4]
 810bdd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810bdd8:	687b      	ldr	r3, [r7, #4]
 810bdda:	681b      	ldr	r3, [r3, #0]
 810bddc:	699a      	ldr	r2, [r3, #24]
 810bdde:	687b      	ldr	r3, [r7, #4]
 810bde0:	681b      	ldr	r3, [r3, #0]
 810bde2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810bde6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810bde8:	68fb      	ldr	r3, [r7, #12]
 810bdea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810bdee:	2b00      	cmp	r3, #0
 810bdf0:	d00f      	beq.n	810be12 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810bdf2:	687b      	ldr	r3, [r7, #4]
 810bdf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bdf8:	f043 0201 	orr.w	r2, r3, #1
 810bdfc:	687b      	ldr	r3, [r7, #4]
 810bdfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810be02:	687b      	ldr	r3, [r7, #4]
 810be04:	681b      	ldr	r3, [r3, #0]
 810be06:	699a      	ldr	r2, [r3, #24]
 810be08:	687b      	ldr	r3, [r7, #4]
 810be0a:	681b      	ldr	r3, [r3, #0]
 810be0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810be10:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810be12:	68fb      	ldr	r3, [r7, #12]
 810be14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810be18:	2b00      	cmp	r3, #0
 810be1a:	d00f      	beq.n	810be3c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810be1c:	687b      	ldr	r3, [r7, #4]
 810be1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810be22:	f043 0208 	orr.w	r2, r3, #8
 810be26:	687b      	ldr	r3, [r7, #4]
 810be28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810be2c:	687b      	ldr	r3, [r7, #4]
 810be2e:	681b      	ldr	r3, [r3, #0]
 810be30:	699a      	ldr	r2, [r3, #24]
 810be32:	687b      	ldr	r3, [r7, #4]
 810be34:	681b      	ldr	r3, [r3, #0]
 810be36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810be3a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810be3c:	687b      	ldr	r3, [r7, #4]
 810be3e:	2200      	movs	r2, #0
 810be40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810be44:	687b      	ldr	r3, [r7, #4]
 810be46:	2200      	movs	r2, #0
 810be48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810be4c:	bf00      	nop
 810be4e:	3714      	adds	r7, #20
 810be50:	46bd      	mov	sp, r7
 810be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be56:	4770      	bx	lr

0810be58 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 810be58:	b580      	push	{r7, lr}
 810be5a:	b084      	sub	sp, #16
 810be5c:	af00      	add	r7, sp, #0
 810be5e:	60f8      	str	r0, [r7, #12]
 810be60:	60b9      	str	r1, [r7, #8]
 810be62:	603b      	str	r3, [r7, #0]
 810be64:	4613      	mov	r3, r2
 810be66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810be68:	e010      	b.n	810be8c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810be6a:	f7f7 f829 	bl	8102ec0 <HAL_GetTick>
 810be6e:	4602      	mov	r2, r0
 810be70:	683b      	ldr	r3, [r7, #0]
 810be72:	1ad3      	subs	r3, r2, r3
 810be74:	69ba      	ldr	r2, [r7, #24]
 810be76:	429a      	cmp	r2, r3
 810be78:	d803      	bhi.n	810be82 <SPI_WaitOnFlagUntilTimeout+0x2a>
 810be7a:	69bb      	ldr	r3, [r7, #24]
 810be7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810be80:	d102      	bne.n	810be88 <SPI_WaitOnFlagUntilTimeout+0x30>
 810be82:	69bb      	ldr	r3, [r7, #24]
 810be84:	2b00      	cmp	r3, #0
 810be86:	d101      	bne.n	810be8c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 810be88:	2303      	movs	r3, #3
 810be8a:	e00f      	b.n	810beac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810be8c:	68fb      	ldr	r3, [r7, #12]
 810be8e:	681b      	ldr	r3, [r3, #0]
 810be90:	695a      	ldr	r2, [r3, #20]
 810be92:	68bb      	ldr	r3, [r7, #8]
 810be94:	4013      	ands	r3, r2
 810be96:	68ba      	ldr	r2, [r7, #8]
 810be98:	429a      	cmp	r2, r3
 810be9a:	bf0c      	ite	eq
 810be9c:	2301      	moveq	r3, #1
 810be9e:	2300      	movne	r3, #0
 810bea0:	b2db      	uxtb	r3, r3
 810bea2:	461a      	mov	r2, r3
 810bea4:	79fb      	ldrb	r3, [r7, #7]
 810bea6:	429a      	cmp	r2, r3
 810bea8:	d0df      	beq.n	810be6a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 810beaa:	2300      	movs	r3, #0
}
 810beac:	4618      	mov	r0, r3
 810beae:	3710      	adds	r7, #16
 810beb0:	46bd      	mov	sp, r7
 810beb2:	bd80      	pop	{r7, pc}

0810beb4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810beb4:	b480      	push	{r7}
 810beb6:	b085      	sub	sp, #20
 810beb8:	af00      	add	r7, sp, #0
 810beba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810bebc:	687b      	ldr	r3, [r7, #4]
 810bebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810bec0:	095b      	lsrs	r3, r3, #5
 810bec2:	3301      	adds	r3, #1
 810bec4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810bec6:	687b      	ldr	r3, [r7, #4]
 810bec8:	68db      	ldr	r3, [r3, #12]
 810beca:	3301      	adds	r3, #1
 810becc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810bece:	68bb      	ldr	r3, [r7, #8]
 810bed0:	3307      	adds	r3, #7
 810bed2:	08db      	lsrs	r3, r3, #3
 810bed4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810bed6:	68bb      	ldr	r3, [r7, #8]
 810bed8:	68fa      	ldr	r2, [r7, #12]
 810beda:	fb02 f303 	mul.w	r3, r2, r3
}
 810bede:	4618      	mov	r0, r3
 810bee0:	3714      	adds	r7, #20
 810bee2:	46bd      	mov	sp, r7
 810bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bee8:	4770      	bx	lr

0810beea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810beea:	b580      	push	{r7, lr}
 810beec:	b082      	sub	sp, #8
 810beee:	af00      	add	r7, sp, #0
 810bef0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810bef2:	687b      	ldr	r3, [r7, #4]
 810bef4:	2b00      	cmp	r3, #0
 810bef6:	d101      	bne.n	810befc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810bef8:	2301      	movs	r3, #1
 810befa:	e042      	b.n	810bf82 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810befc:	687b      	ldr	r3, [r7, #4]
 810befe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bf02:	2b00      	cmp	r3, #0
 810bf04:	d106      	bne.n	810bf14 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810bf06:	687b      	ldr	r3, [r7, #4]
 810bf08:	2200      	movs	r2, #0
 810bf0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810bf0e:	6878      	ldr	r0, [r7, #4]
 810bf10:	f7f6 fe30 	bl	8102b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810bf14:	687b      	ldr	r3, [r7, #4]
 810bf16:	2224      	movs	r2, #36	; 0x24
 810bf18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810bf1c:	687b      	ldr	r3, [r7, #4]
 810bf1e:	681b      	ldr	r3, [r3, #0]
 810bf20:	681a      	ldr	r2, [r3, #0]
 810bf22:	687b      	ldr	r3, [r7, #4]
 810bf24:	681b      	ldr	r3, [r3, #0]
 810bf26:	f022 0201 	bic.w	r2, r2, #1
 810bf2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810bf2c:	6878      	ldr	r0, [r7, #4]
 810bf2e:	f000 fbd7 	bl	810c6e0 <UART_SetConfig>
 810bf32:	4603      	mov	r3, r0
 810bf34:	2b01      	cmp	r3, #1
 810bf36:	d101      	bne.n	810bf3c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810bf38:	2301      	movs	r3, #1
 810bf3a:	e022      	b.n	810bf82 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810bf3c:	687b      	ldr	r3, [r7, #4]
 810bf3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bf40:	2b00      	cmp	r3, #0
 810bf42:	d002      	beq.n	810bf4a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810bf44:	6878      	ldr	r0, [r7, #4]
 810bf46:	f001 f935 	bl	810d1b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810bf4a:	687b      	ldr	r3, [r7, #4]
 810bf4c:	681b      	ldr	r3, [r3, #0]
 810bf4e:	685a      	ldr	r2, [r3, #4]
 810bf50:	687b      	ldr	r3, [r7, #4]
 810bf52:	681b      	ldr	r3, [r3, #0]
 810bf54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810bf58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810bf5a:	687b      	ldr	r3, [r7, #4]
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	689a      	ldr	r2, [r3, #8]
 810bf60:	687b      	ldr	r3, [r7, #4]
 810bf62:	681b      	ldr	r3, [r3, #0]
 810bf64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810bf68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810bf6a:	687b      	ldr	r3, [r7, #4]
 810bf6c:	681b      	ldr	r3, [r3, #0]
 810bf6e:	681a      	ldr	r2, [r3, #0]
 810bf70:	687b      	ldr	r3, [r7, #4]
 810bf72:	681b      	ldr	r3, [r3, #0]
 810bf74:	f042 0201 	orr.w	r2, r2, #1
 810bf78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810bf7a:	6878      	ldr	r0, [r7, #4]
 810bf7c:	f001 f9bc 	bl	810d2f8 <UART_CheckIdleState>
 810bf80:	4603      	mov	r3, r0
}
 810bf82:	4618      	mov	r0, r3
 810bf84:	3708      	adds	r7, #8
 810bf86:	46bd      	mov	sp, r7
 810bf88:	bd80      	pop	{r7, pc}
	...

0810bf8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810bf8c:	b580      	push	{r7, lr}
 810bf8e:	b084      	sub	sp, #16
 810bf90:	af00      	add	r7, sp, #0
 810bf92:	60f8      	str	r0, [r7, #12]
 810bf94:	60b9      	str	r1, [r7, #8]
 810bf96:	4613      	mov	r3, r2
 810bf98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810bf9a:	68fb      	ldr	r3, [r7, #12]
 810bf9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bfa0:	2b20      	cmp	r3, #32
 810bfa2:	d168      	bne.n	810c076 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810bfa4:	68bb      	ldr	r3, [r7, #8]
 810bfa6:	2b00      	cmp	r3, #0
 810bfa8:	d002      	beq.n	810bfb0 <HAL_UART_Transmit_DMA+0x24>
 810bfaa:	88fb      	ldrh	r3, [r7, #6]
 810bfac:	2b00      	cmp	r3, #0
 810bfae:	d101      	bne.n	810bfb4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810bfb0:	2301      	movs	r3, #1
 810bfb2:	e061      	b.n	810c078 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810bfb4:	68fb      	ldr	r3, [r7, #12]
 810bfb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810bfba:	2b01      	cmp	r3, #1
 810bfbc:	d101      	bne.n	810bfc2 <HAL_UART_Transmit_DMA+0x36>
 810bfbe:	2302      	movs	r3, #2
 810bfc0:	e05a      	b.n	810c078 <HAL_UART_Transmit_DMA+0xec>
 810bfc2:	68fb      	ldr	r3, [r7, #12]
 810bfc4:	2201      	movs	r2, #1
 810bfc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 810bfca:	68fb      	ldr	r3, [r7, #12]
 810bfcc:	68ba      	ldr	r2, [r7, #8]
 810bfce:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810bfd0:	68fb      	ldr	r3, [r7, #12]
 810bfd2:	88fa      	ldrh	r2, [r7, #6]
 810bfd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810bfd8:	68fb      	ldr	r3, [r7, #12]
 810bfda:	88fa      	ldrh	r2, [r7, #6]
 810bfdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bfe0:	68fb      	ldr	r3, [r7, #12]
 810bfe2:	2200      	movs	r2, #0
 810bfe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810bfe8:	68fb      	ldr	r3, [r7, #12]
 810bfea:	2221      	movs	r2, #33	; 0x21
 810bfec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 810bff0:	68fb      	ldr	r3, [r7, #12]
 810bff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bff4:	2b00      	cmp	r3, #0
 810bff6:	d02c      	beq.n	810c052 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810bff8:	68fb      	ldr	r3, [r7, #12]
 810bffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810bffc:	4a20      	ldr	r2, [pc, #128]	; (810c080 <HAL_UART_Transmit_DMA+0xf4>)
 810bffe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810c000:	68fb      	ldr	r3, [r7, #12]
 810c002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c004:	4a1f      	ldr	r2, [pc, #124]	; (810c084 <HAL_UART_Transmit_DMA+0xf8>)
 810c006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810c008:	68fb      	ldr	r3, [r7, #12]
 810c00a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c00c:	4a1e      	ldr	r2, [pc, #120]	; (810c088 <HAL_UART_Transmit_DMA+0xfc>)
 810c00e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810c010:	68fb      	ldr	r3, [r7, #12]
 810c012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810c014:	2200      	movs	r2, #0
 810c016:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810c018:	68fb      	ldr	r3, [r7, #12]
 810c01a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 810c01c:	68fb      	ldr	r3, [r7, #12]
 810c01e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c020:	4619      	mov	r1, r3
 810c022:	68fb      	ldr	r3, [r7, #12]
 810c024:	681b      	ldr	r3, [r3, #0]
 810c026:	3328      	adds	r3, #40	; 0x28
 810c028:	461a      	mov	r2, r3
 810c02a:	88fb      	ldrh	r3, [r7, #6]
 810c02c:	f7f7 fee8 	bl	8103e00 <HAL_DMA_Start_IT>
 810c030:	4603      	mov	r3, r0
 810c032:	2b00      	cmp	r3, #0
 810c034:	d00d      	beq.n	810c052 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810c036:	68fb      	ldr	r3, [r7, #12]
 810c038:	2210      	movs	r2, #16
 810c03a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 810c03e:	68fb      	ldr	r3, [r7, #12]
 810c040:	2200      	movs	r2, #0
 810c042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810c046:	68fb      	ldr	r3, [r7, #12]
 810c048:	2220      	movs	r2, #32
 810c04a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 810c04e:	2301      	movs	r3, #1
 810c050:	e012      	b.n	810c078 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810c052:	68fb      	ldr	r3, [r7, #12]
 810c054:	681b      	ldr	r3, [r3, #0]
 810c056:	2240      	movs	r2, #64	; 0x40
 810c058:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810c05a:	68fb      	ldr	r3, [r7, #12]
 810c05c:	2200      	movs	r2, #0
 810c05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810c062:	68fb      	ldr	r3, [r7, #12]
 810c064:	681b      	ldr	r3, [r3, #0]
 810c066:	689a      	ldr	r2, [r3, #8]
 810c068:	68fb      	ldr	r3, [r7, #12]
 810c06a:	681b      	ldr	r3, [r3, #0]
 810c06c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810c070:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810c072:	2300      	movs	r3, #0
 810c074:	e000      	b.n	810c078 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810c076:	2302      	movs	r3, #2
  }
}
 810c078:	4618      	mov	r0, r3
 810c07a:	3710      	adds	r7, #16
 810c07c:	46bd      	mov	sp, r7
 810c07e:	bd80      	pop	{r7, pc}
 810c080:	0810d60d 	.word	0x0810d60d
 810c084:	0810d65d 	.word	0x0810d65d
 810c088:	0810d747 	.word	0x0810d747

0810c08c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810c08c:	b580      	push	{r7, lr}
 810c08e:	b084      	sub	sp, #16
 810c090:	af00      	add	r7, sp, #0
 810c092:	60f8      	str	r0, [r7, #12]
 810c094:	60b9      	str	r1, [r7, #8]
 810c096:	4613      	mov	r3, r2
 810c098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810c09a:	68fb      	ldr	r3, [r7, #12]
 810c09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810c0a0:	2b20      	cmp	r3, #32
 810c0a2:	d131      	bne.n	810c108 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 810c0a4:	68bb      	ldr	r3, [r7, #8]
 810c0a6:	2b00      	cmp	r3, #0
 810c0a8:	d002      	beq.n	810c0b0 <HAL_UART_Receive_DMA+0x24>
 810c0aa:	88fb      	ldrh	r3, [r7, #6]
 810c0ac:	2b00      	cmp	r3, #0
 810c0ae:	d101      	bne.n	810c0b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 810c0b0:	2301      	movs	r3, #1
 810c0b2:	e02a      	b.n	810c10a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 810c0b4:	68fb      	ldr	r3, [r7, #12]
 810c0b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810c0ba:	2b01      	cmp	r3, #1
 810c0bc:	d101      	bne.n	810c0c2 <HAL_UART_Receive_DMA+0x36>
 810c0be:	2302      	movs	r3, #2
 810c0c0:	e023      	b.n	810c10a <HAL_UART_Receive_DMA+0x7e>
 810c0c2:	68fb      	ldr	r3, [r7, #12]
 810c0c4:	2201      	movs	r2, #1
 810c0c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c0ca:	68fb      	ldr	r3, [r7, #12]
 810c0cc:	2200      	movs	r2, #0
 810c0ce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810c0d0:	68fb      	ldr	r3, [r7, #12]
 810c0d2:	681b      	ldr	r3, [r3, #0]
 810c0d4:	4a0f      	ldr	r2, [pc, #60]	; (810c114 <HAL_UART_Receive_DMA+0x88>)
 810c0d6:	4293      	cmp	r3, r2
 810c0d8:	d00e      	beq.n	810c0f8 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810c0da:	68fb      	ldr	r3, [r7, #12]
 810c0dc:	681b      	ldr	r3, [r3, #0]
 810c0de:	685b      	ldr	r3, [r3, #4]
 810c0e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c0e4:	2b00      	cmp	r3, #0
 810c0e6:	d007      	beq.n	810c0f8 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810c0e8:	68fb      	ldr	r3, [r7, #12]
 810c0ea:	681b      	ldr	r3, [r3, #0]
 810c0ec:	681a      	ldr	r2, [r3, #0]
 810c0ee:	68fb      	ldr	r3, [r7, #12]
 810c0f0:	681b      	ldr	r3, [r3, #0]
 810c0f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 810c0f6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 810c0f8:	88fb      	ldrh	r3, [r7, #6]
 810c0fa:	461a      	mov	r2, r3
 810c0fc:	68b9      	ldr	r1, [r7, #8]
 810c0fe:	68f8      	ldr	r0, [r7, #12]
 810c100:	f001 f9c6 	bl	810d490 <UART_Start_Receive_DMA>
 810c104:	4603      	mov	r3, r0
 810c106:	e000      	b.n	810c10a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 810c108:	2302      	movs	r3, #2
  }
}
 810c10a:	4618      	mov	r0, r3
 810c10c:	3710      	adds	r7, #16
 810c10e:	46bd      	mov	sp, r7
 810c110:	bd80      	pop	{r7, pc}
 810c112:	bf00      	nop
 810c114:	58000c00 	.word	0x58000c00

0810c118 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 810c118:	b580      	push	{r7, lr}
 810c11a:	b088      	sub	sp, #32
 810c11c:	af00      	add	r7, sp, #0
 810c11e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 810c120:	687b      	ldr	r3, [r7, #4]
 810c122:	681b      	ldr	r3, [r3, #0]
 810c124:	69db      	ldr	r3, [r3, #28]
 810c126:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 810c128:	687b      	ldr	r3, [r7, #4]
 810c12a:	681b      	ldr	r3, [r3, #0]
 810c12c:	681b      	ldr	r3, [r3, #0]
 810c12e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810c130:	687b      	ldr	r3, [r7, #4]
 810c132:	681b      	ldr	r3, [r3, #0]
 810c134:	689b      	ldr	r3, [r3, #8]
 810c136:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 810c138:	69fa      	ldr	r2, [r7, #28]
 810c13a:	f640 030f 	movw	r3, #2063	; 0x80f
 810c13e:	4013      	ands	r3, r2
 810c140:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 810c142:	693b      	ldr	r3, [r7, #16]
 810c144:	2b00      	cmp	r3, #0
 810c146:	d118      	bne.n	810c17a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c148:	69fb      	ldr	r3, [r7, #28]
 810c14a:	f003 0320 	and.w	r3, r3, #32
 810c14e:	2b00      	cmp	r3, #0
 810c150:	d013      	beq.n	810c17a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c152:	69bb      	ldr	r3, [r7, #24]
 810c154:	f003 0320 	and.w	r3, r3, #32
 810c158:	2b00      	cmp	r3, #0
 810c15a:	d104      	bne.n	810c166 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c15c:	697b      	ldr	r3, [r7, #20]
 810c15e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810c162:	2b00      	cmp	r3, #0
 810c164:	d009      	beq.n	810c17a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 810c166:	687b      	ldr	r3, [r7, #4]
 810c168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810c16a:	2b00      	cmp	r3, #0
 810c16c:	f000 8282 	beq.w	810c674 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 810c170:	687b      	ldr	r3, [r7, #4]
 810c172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810c174:	6878      	ldr	r0, [r7, #4]
 810c176:	4798      	blx	r3
      }
      return;
 810c178:	e27c      	b.n	810c674 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810c17a:	693b      	ldr	r3, [r7, #16]
 810c17c:	2b00      	cmp	r3, #0
 810c17e:	f000 80ef 	beq.w	810c360 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810c182:	697a      	ldr	r2, [r7, #20]
 810c184:	4b73      	ldr	r3, [pc, #460]	; (810c354 <HAL_UART_IRQHandler+0x23c>)
 810c186:	4013      	ands	r3, r2
 810c188:	2b00      	cmp	r3, #0
 810c18a:	d105      	bne.n	810c198 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810c18c:	69ba      	ldr	r2, [r7, #24]
 810c18e:	4b72      	ldr	r3, [pc, #456]	; (810c358 <HAL_UART_IRQHandler+0x240>)
 810c190:	4013      	ands	r3, r2
 810c192:	2b00      	cmp	r3, #0
 810c194:	f000 80e4 	beq.w	810c360 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 810c198:	69fb      	ldr	r3, [r7, #28]
 810c19a:	f003 0301 	and.w	r3, r3, #1
 810c19e:	2b00      	cmp	r3, #0
 810c1a0:	d010      	beq.n	810c1c4 <HAL_UART_IRQHandler+0xac>
 810c1a2:	69bb      	ldr	r3, [r7, #24]
 810c1a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810c1a8:	2b00      	cmp	r3, #0
 810c1aa:	d00b      	beq.n	810c1c4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810c1ac:	687b      	ldr	r3, [r7, #4]
 810c1ae:	681b      	ldr	r3, [r3, #0]
 810c1b0:	2201      	movs	r2, #1
 810c1b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 810c1b4:	687b      	ldr	r3, [r7, #4]
 810c1b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c1ba:	f043 0201 	orr.w	r2, r3, #1
 810c1be:	687b      	ldr	r3, [r7, #4]
 810c1c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c1c4:	69fb      	ldr	r3, [r7, #28]
 810c1c6:	f003 0302 	and.w	r3, r3, #2
 810c1ca:	2b00      	cmp	r3, #0
 810c1cc:	d010      	beq.n	810c1f0 <HAL_UART_IRQHandler+0xd8>
 810c1ce:	697b      	ldr	r3, [r7, #20]
 810c1d0:	f003 0301 	and.w	r3, r3, #1
 810c1d4:	2b00      	cmp	r3, #0
 810c1d6:	d00b      	beq.n	810c1f0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810c1d8:	687b      	ldr	r3, [r7, #4]
 810c1da:	681b      	ldr	r3, [r3, #0]
 810c1dc:	2202      	movs	r2, #2
 810c1de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810c1e0:	687b      	ldr	r3, [r7, #4]
 810c1e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c1e6:	f043 0204 	orr.w	r2, r3, #4
 810c1ea:	687b      	ldr	r3, [r7, #4]
 810c1ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810c1f0:	69fb      	ldr	r3, [r7, #28]
 810c1f2:	f003 0304 	and.w	r3, r3, #4
 810c1f6:	2b00      	cmp	r3, #0
 810c1f8:	d010      	beq.n	810c21c <HAL_UART_IRQHandler+0x104>
 810c1fa:	697b      	ldr	r3, [r7, #20]
 810c1fc:	f003 0301 	and.w	r3, r3, #1
 810c200:	2b00      	cmp	r3, #0
 810c202:	d00b      	beq.n	810c21c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810c204:	687b      	ldr	r3, [r7, #4]
 810c206:	681b      	ldr	r3, [r3, #0]
 810c208:	2204      	movs	r2, #4
 810c20a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810c20c:	687b      	ldr	r3, [r7, #4]
 810c20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c212:	f043 0202 	orr.w	r2, r3, #2
 810c216:	687b      	ldr	r3, [r7, #4]
 810c218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 810c21c:	69fb      	ldr	r3, [r7, #28]
 810c21e:	f003 0308 	and.w	r3, r3, #8
 810c222:	2b00      	cmp	r3, #0
 810c224:	d015      	beq.n	810c252 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c226:	69bb      	ldr	r3, [r7, #24]
 810c228:	f003 0320 	and.w	r3, r3, #32
 810c22c:	2b00      	cmp	r3, #0
 810c22e:	d104      	bne.n	810c23a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 810c230:	697a      	ldr	r2, [r7, #20]
 810c232:	4b48      	ldr	r3, [pc, #288]	; (810c354 <HAL_UART_IRQHandler+0x23c>)
 810c234:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 810c236:	2b00      	cmp	r3, #0
 810c238:	d00b      	beq.n	810c252 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810c23a:	687b      	ldr	r3, [r7, #4]
 810c23c:	681b      	ldr	r3, [r3, #0]
 810c23e:	2208      	movs	r2, #8
 810c240:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810c242:	687b      	ldr	r3, [r7, #4]
 810c244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c248:	f043 0208 	orr.w	r2, r3, #8
 810c24c:	687b      	ldr	r3, [r7, #4]
 810c24e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810c252:	69fb      	ldr	r3, [r7, #28]
 810c254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810c258:	2b00      	cmp	r3, #0
 810c25a:	d011      	beq.n	810c280 <HAL_UART_IRQHandler+0x168>
 810c25c:	69bb      	ldr	r3, [r7, #24]
 810c25e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810c262:	2b00      	cmp	r3, #0
 810c264:	d00c      	beq.n	810c280 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c266:	687b      	ldr	r3, [r7, #4]
 810c268:	681b      	ldr	r3, [r3, #0]
 810c26a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810c26e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810c270:	687b      	ldr	r3, [r7, #4]
 810c272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c276:	f043 0220 	orr.w	r2, r3, #32
 810c27a:	687b      	ldr	r3, [r7, #4]
 810c27c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810c280:	687b      	ldr	r3, [r7, #4]
 810c282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c286:	2b00      	cmp	r3, #0
 810c288:	f000 81f6 	beq.w	810c678 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810c28c:	69fb      	ldr	r3, [r7, #28]
 810c28e:	f003 0320 	and.w	r3, r3, #32
 810c292:	2b00      	cmp	r3, #0
 810c294:	d011      	beq.n	810c2ba <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810c296:	69bb      	ldr	r3, [r7, #24]
 810c298:	f003 0320 	and.w	r3, r3, #32
 810c29c:	2b00      	cmp	r3, #0
 810c29e:	d104      	bne.n	810c2aa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810c2a0:	697b      	ldr	r3, [r7, #20]
 810c2a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810c2a6:	2b00      	cmp	r3, #0
 810c2a8:	d007      	beq.n	810c2ba <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810c2aa:	687b      	ldr	r3, [r7, #4]
 810c2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810c2ae:	2b00      	cmp	r3, #0
 810c2b0:	d003      	beq.n	810c2ba <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810c2b2:	687b      	ldr	r3, [r7, #4]
 810c2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810c2b6:	6878      	ldr	r0, [r7, #4]
 810c2b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810c2ba:	687b      	ldr	r3, [r7, #4]
 810c2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810c2c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c2c2:	687b      	ldr	r3, [r7, #4]
 810c2c4:	681b      	ldr	r3, [r3, #0]
 810c2c6:	689b      	ldr	r3, [r3, #8]
 810c2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c2cc:	2b40      	cmp	r3, #64	; 0x40
 810c2ce:	d004      	beq.n	810c2da <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810c2d0:	68fb      	ldr	r3, [r7, #12]
 810c2d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810c2d6:	2b00      	cmp	r3, #0
 810c2d8:	d031      	beq.n	810c33e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810c2da:	6878      	ldr	r0, [r7, #4]
 810c2dc:	f001 f964 	bl	810d5a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c2e0:	687b      	ldr	r3, [r7, #4]
 810c2e2:	681b      	ldr	r3, [r3, #0]
 810c2e4:	689b      	ldr	r3, [r3, #8]
 810c2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c2ea:	2b40      	cmp	r3, #64	; 0x40
 810c2ec:	d123      	bne.n	810c336 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c2ee:	687b      	ldr	r3, [r7, #4]
 810c2f0:	681b      	ldr	r3, [r3, #0]
 810c2f2:	689a      	ldr	r2, [r3, #8]
 810c2f4:	687b      	ldr	r3, [r7, #4]
 810c2f6:	681b      	ldr	r3, [r3, #0]
 810c2f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c2fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810c2fe:	687b      	ldr	r3, [r7, #4]
 810c300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c302:	2b00      	cmp	r3, #0
 810c304:	d013      	beq.n	810c32e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810c306:	687b      	ldr	r3, [r7, #4]
 810c308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c30a:	4a14      	ldr	r2, [pc, #80]	; (810c35c <HAL_UART_IRQHandler+0x244>)
 810c30c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810c30e:	687b      	ldr	r3, [r7, #4]
 810c310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c312:	4618      	mov	r0, r3
 810c314:	f7f8 fafc 	bl	8104910 <HAL_DMA_Abort_IT>
 810c318:	4603      	mov	r3, r0
 810c31a:	2b00      	cmp	r3, #0
 810c31c:	d017      	beq.n	810c34e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810c31e:	687b      	ldr	r3, [r7, #4]
 810c320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c324:	687a      	ldr	r2, [r7, #4]
 810c326:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 810c328:	4610      	mov	r0, r2
 810c32a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c32c:	e00f      	b.n	810c34e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810c32e:	6878      	ldr	r0, [r7, #4]
 810c330:	f000 f9c0 	bl	810c6b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c334:	e00b      	b.n	810c34e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810c336:	6878      	ldr	r0, [r7, #4]
 810c338:	f000 f9bc 	bl	810c6b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c33c:	e007      	b.n	810c34e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810c33e:	6878      	ldr	r0, [r7, #4]
 810c340:	f000 f9b8 	bl	810c6b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810c344:	687b      	ldr	r3, [r7, #4]
 810c346:	2200      	movs	r2, #0
 810c348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 810c34c:	e194      	b.n	810c678 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c34e:	bf00      	nop
    return;
 810c350:	e192      	b.n	810c678 <HAL_UART_IRQHandler+0x560>
 810c352:	bf00      	nop
 810c354:	10000001 	.word	0x10000001
 810c358:	04000120 	.word	0x04000120
 810c35c:	0810d7c7 	.word	0x0810d7c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c360:	687b      	ldr	r3, [r7, #4]
 810c362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810c364:	2b01      	cmp	r3, #1
 810c366:	f040 8111 	bne.w	810c58c <HAL_UART_IRQHandler+0x474>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810c36a:	69fb      	ldr	r3, [r7, #28]
 810c36c:	f003 0310 	and.w	r3, r3, #16
 810c370:	2b00      	cmp	r3, #0
 810c372:	f000 810b 	beq.w	810c58c <HAL_UART_IRQHandler+0x474>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810c376:	69bb      	ldr	r3, [r7, #24]
 810c378:	f003 0310 	and.w	r3, r3, #16
 810c37c:	2b00      	cmp	r3, #0
 810c37e:	f000 8105 	beq.w	810c58c <HAL_UART_IRQHandler+0x474>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810c382:	687b      	ldr	r3, [r7, #4]
 810c384:	681b      	ldr	r3, [r3, #0]
 810c386:	2210      	movs	r2, #16
 810c388:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810c38a:	687b      	ldr	r3, [r7, #4]
 810c38c:	681b      	ldr	r3, [r3, #0]
 810c38e:	689b      	ldr	r3, [r3, #8]
 810c390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c394:	2b40      	cmp	r3, #64	; 0x40
 810c396:	f040 80bb 	bne.w	810c510 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810c39a:	687b      	ldr	r3, [r7, #4]
 810c39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c39e:	681b      	ldr	r3, [r3, #0]
 810c3a0:	4a90      	ldr	r2, [pc, #576]	; (810c5e4 <HAL_UART_IRQHandler+0x4cc>)
 810c3a2:	4293      	cmp	r3, r2
 810c3a4:	d059      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c3a6:	687b      	ldr	r3, [r7, #4]
 810c3a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3aa:	681b      	ldr	r3, [r3, #0]
 810c3ac:	4a8e      	ldr	r2, [pc, #568]	; (810c5e8 <HAL_UART_IRQHandler+0x4d0>)
 810c3ae:	4293      	cmp	r3, r2
 810c3b0:	d053      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c3b2:	687b      	ldr	r3, [r7, #4]
 810c3b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3b6:	681b      	ldr	r3, [r3, #0]
 810c3b8:	4a8c      	ldr	r2, [pc, #560]	; (810c5ec <HAL_UART_IRQHandler+0x4d4>)
 810c3ba:	4293      	cmp	r3, r2
 810c3bc:	d04d      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c3be:	687b      	ldr	r3, [r7, #4]
 810c3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3c2:	681b      	ldr	r3, [r3, #0]
 810c3c4:	4a8a      	ldr	r2, [pc, #552]	; (810c5f0 <HAL_UART_IRQHandler+0x4d8>)
 810c3c6:	4293      	cmp	r3, r2
 810c3c8:	d047      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c3ca:	687b      	ldr	r3, [r7, #4]
 810c3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3ce:	681b      	ldr	r3, [r3, #0]
 810c3d0:	4a88      	ldr	r2, [pc, #544]	; (810c5f4 <HAL_UART_IRQHandler+0x4dc>)
 810c3d2:	4293      	cmp	r3, r2
 810c3d4:	d041      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c3d6:	687b      	ldr	r3, [r7, #4]
 810c3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3da:	681b      	ldr	r3, [r3, #0]
 810c3dc:	4a86      	ldr	r2, [pc, #536]	; (810c5f8 <HAL_UART_IRQHandler+0x4e0>)
 810c3de:	4293      	cmp	r3, r2
 810c3e0:	d03b      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c3e2:	687b      	ldr	r3, [r7, #4]
 810c3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3e6:	681b      	ldr	r3, [r3, #0]
 810c3e8:	4a84      	ldr	r2, [pc, #528]	; (810c5fc <HAL_UART_IRQHandler+0x4e4>)
 810c3ea:	4293      	cmp	r3, r2
 810c3ec:	d035      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c3ee:	687b      	ldr	r3, [r7, #4]
 810c3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3f2:	681b      	ldr	r3, [r3, #0]
 810c3f4:	4a82      	ldr	r2, [pc, #520]	; (810c600 <HAL_UART_IRQHandler+0x4e8>)
 810c3f6:	4293      	cmp	r3, r2
 810c3f8:	d02f      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c3fa:	687b      	ldr	r3, [r7, #4]
 810c3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c3fe:	681b      	ldr	r3, [r3, #0]
 810c400:	4a80      	ldr	r2, [pc, #512]	; (810c604 <HAL_UART_IRQHandler+0x4ec>)
 810c402:	4293      	cmp	r3, r2
 810c404:	d029      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c406:	687b      	ldr	r3, [r7, #4]
 810c408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c40a:	681b      	ldr	r3, [r3, #0]
 810c40c:	4a7e      	ldr	r2, [pc, #504]	; (810c608 <HAL_UART_IRQHandler+0x4f0>)
 810c40e:	4293      	cmp	r3, r2
 810c410:	d023      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c412:	687b      	ldr	r3, [r7, #4]
 810c414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c416:	681b      	ldr	r3, [r3, #0]
 810c418:	4a7c      	ldr	r2, [pc, #496]	; (810c60c <HAL_UART_IRQHandler+0x4f4>)
 810c41a:	4293      	cmp	r3, r2
 810c41c:	d01d      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c41e:	687b      	ldr	r3, [r7, #4]
 810c420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c422:	681b      	ldr	r3, [r3, #0]
 810c424:	4a7a      	ldr	r2, [pc, #488]	; (810c610 <HAL_UART_IRQHandler+0x4f8>)
 810c426:	4293      	cmp	r3, r2
 810c428:	d017      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c42a:	687b      	ldr	r3, [r7, #4]
 810c42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c42e:	681b      	ldr	r3, [r3, #0]
 810c430:	4a78      	ldr	r2, [pc, #480]	; (810c614 <HAL_UART_IRQHandler+0x4fc>)
 810c432:	4293      	cmp	r3, r2
 810c434:	d011      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c436:	687b      	ldr	r3, [r7, #4]
 810c438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c43a:	681b      	ldr	r3, [r3, #0]
 810c43c:	4a76      	ldr	r2, [pc, #472]	; (810c618 <HAL_UART_IRQHandler+0x500>)
 810c43e:	4293      	cmp	r3, r2
 810c440:	d00b      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c442:	687b      	ldr	r3, [r7, #4]
 810c444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c446:	681b      	ldr	r3, [r3, #0]
 810c448:	4a74      	ldr	r2, [pc, #464]	; (810c61c <HAL_UART_IRQHandler+0x504>)
 810c44a:	4293      	cmp	r3, r2
 810c44c:	d005      	beq.n	810c45a <HAL_UART_IRQHandler+0x342>
 810c44e:	687b      	ldr	r3, [r7, #4]
 810c450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c452:	681b      	ldr	r3, [r3, #0]
 810c454:	4a72      	ldr	r2, [pc, #456]	; (810c620 <HAL_UART_IRQHandler+0x508>)
 810c456:	4293      	cmp	r3, r2
 810c458:	d105      	bne.n	810c466 <HAL_UART_IRQHandler+0x34e>
 810c45a:	687b      	ldr	r3, [r7, #4]
 810c45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c45e:	681b      	ldr	r3, [r3, #0]
 810c460:	685b      	ldr	r3, [r3, #4]
 810c462:	b29b      	uxth	r3, r3
 810c464:	e004      	b.n	810c470 <HAL_UART_IRQHandler+0x358>
 810c466:	687b      	ldr	r3, [r7, #4]
 810c468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c46a:	681b      	ldr	r3, [r3, #0]
 810c46c:	685b      	ldr	r3, [r3, #4]
 810c46e:	b29b      	uxth	r3, r3
 810c470:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 810c472:	893b      	ldrh	r3, [r7, #8]
 810c474:	2b00      	cmp	r3, #0
 810c476:	f000 8101 	beq.w	810c67c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810c47a:	687b      	ldr	r3, [r7, #4]
 810c47c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810c480:	893a      	ldrh	r2, [r7, #8]
 810c482:	429a      	cmp	r2, r3
 810c484:	f080 80fa 	bcs.w	810c67c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810c488:	687b      	ldr	r3, [r7, #4]
 810c48a:	893a      	ldrh	r2, [r7, #8]
 810c48c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810c490:	687b      	ldr	r3, [r7, #4]
 810c492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c494:	69db      	ldr	r3, [r3, #28]
 810c496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c49a:	d02b      	beq.n	810c4f4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810c49c:	687b      	ldr	r3, [r7, #4]
 810c49e:	681b      	ldr	r3, [r3, #0]
 810c4a0:	681a      	ldr	r2, [r3, #0]
 810c4a2:	687b      	ldr	r3, [r7, #4]
 810c4a4:	681b      	ldr	r3, [r3, #0]
 810c4a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810c4aa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810c4ac:	687b      	ldr	r3, [r7, #4]
 810c4ae:	681b      	ldr	r3, [r3, #0]
 810c4b0:	689a      	ldr	r2, [r3, #8]
 810c4b2:	687b      	ldr	r3, [r7, #4]
 810c4b4:	681b      	ldr	r3, [r3, #0]
 810c4b6:	f022 0201 	bic.w	r2, r2, #1
 810c4ba:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810c4bc:	687b      	ldr	r3, [r7, #4]
 810c4be:	681b      	ldr	r3, [r3, #0]
 810c4c0:	689a      	ldr	r2, [r3, #8]
 810c4c2:	687b      	ldr	r3, [r7, #4]
 810c4c4:	681b      	ldr	r3, [r3, #0]
 810c4c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810c4ca:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810c4cc:	687b      	ldr	r3, [r7, #4]
 810c4ce:	2220      	movs	r2, #32
 810c4d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c4d4:	687b      	ldr	r3, [r7, #4]
 810c4d6:	2200      	movs	r2, #0
 810c4d8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c4da:	687b      	ldr	r3, [r7, #4]
 810c4dc:	681b      	ldr	r3, [r3, #0]
 810c4de:	681a      	ldr	r2, [r3, #0]
 810c4e0:	687b      	ldr	r3, [r7, #4]
 810c4e2:	681b      	ldr	r3, [r3, #0]
 810c4e4:	f022 0210 	bic.w	r2, r2, #16
 810c4e8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810c4ea:	687b      	ldr	r3, [r7, #4]
 810c4ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810c4ee:	4618      	mov	r0, r3
 810c4f0:	f7f7 fef0 	bl	81042d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810c4f4:	687b      	ldr	r3, [r7, #4]
 810c4f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810c4fa:	687b      	ldr	r3, [r7, #4]
 810c4fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810c500:	b29b      	uxth	r3, r3
 810c502:	1ad3      	subs	r3, r2, r3
 810c504:	b29b      	uxth	r3, r3
 810c506:	4619      	mov	r1, r3
 810c508:	6878      	ldr	r0, [r7, #4]
 810c50a:	f000 f8dd 	bl	810c6c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810c50e:	e0b5      	b.n	810c67c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810c510:	687b      	ldr	r3, [r7, #4]
 810c512:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810c516:	687b      	ldr	r3, [r7, #4]
 810c518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810c51c:	b29b      	uxth	r3, r3
 810c51e:	1ad3      	subs	r3, r2, r3
 810c520:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 810c522:	687b      	ldr	r3, [r7, #4]
 810c524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810c528:	b29b      	uxth	r3, r3
 810c52a:	2b00      	cmp	r3, #0
 810c52c:	f000 80a8 	beq.w	810c680 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 810c530:	897b      	ldrh	r3, [r7, #10]
 810c532:	2b00      	cmp	r3, #0
 810c534:	f000 80a4 	beq.w	810c680 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c538:	687b      	ldr	r3, [r7, #4]
 810c53a:	681b      	ldr	r3, [r3, #0]
 810c53c:	681a      	ldr	r2, [r3, #0]
 810c53e:	687b      	ldr	r3, [r7, #4]
 810c540:	681b      	ldr	r3, [r3, #0]
 810c542:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810c546:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810c548:	687b      	ldr	r3, [r7, #4]
 810c54a:	681b      	ldr	r3, [r3, #0]
 810c54c:	689b      	ldr	r3, [r3, #8]
 810c54e:	687a      	ldr	r2, [r7, #4]
 810c550:	6812      	ldr	r2, [r2, #0]
 810c552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810c556:	f023 0301 	bic.w	r3, r3, #1
 810c55a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810c55c:	687b      	ldr	r3, [r7, #4]
 810c55e:	2220      	movs	r2, #32
 810c560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c564:	687b      	ldr	r3, [r7, #4]
 810c566:	2200      	movs	r2, #0
 810c568:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810c56a:	687b      	ldr	r3, [r7, #4]
 810c56c:	2200      	movs	r2, #0
 810c56e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c570:	687b      	ldr	r3, [r7, #4]
 810c572:	681b      	ldr	r3, [r3, #0]
 810c574:	681a      	ldr	r2, [r3, #0]
 810c576:	687b      	ldr	r3, [r7, #4]
 810c578:	681b      	ldr	r3, [r3, #0]
 810c57a:	f022 0210 	bic.w	r2, r2, #16
 810c57e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810c580:	897b      	ldrh	r3, [r7, #10]
 810c582:	4619      	mov	r1, r3
 810c584:	6878      	ldr	r0, [r7, #4]
 810c586:	f000 f89f 	bl	810c6c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810c58a:	e079      	b.n	810c680 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810c58c:	69fb      	ldr	r3, [r7, #28]
 810c58e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810c592:	2b00      	cmp	r3, #0
 810c594:	d00d      	beq.n	810c5b2 <HAL_UART_IRQHandler+0x49a>
 810c596:	697b      	ldr	r3, [r7, #20]
 810c598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810c59c:	2b00      	cmp	r3, #0
 810c59e:	d008      	beq.n	810c5b2 <HAL_UART_IRQHandler+0x49a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810c5a0:	687b      	ldr	r3, [r7, #4]
 810c5a2:	681b      	ldr	r3, [r3, #0]
 810c5a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810c5a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810c5aa:	6878      	ldr	r0, [r7, #4]
 810c5ac:	f001 f93b 	bl	810d826 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810c5b0:	e069      	b.n	810c686 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810c5b2:	69fb      	ldr	r3, [r7, #28]
 810c5b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c5b8:	2b00      	cmp	r3, #0
 810c5ba:	d033      	beq.n	810c624 <HAL_UART_IRQHandler+0x50c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810c5bc:	69bb      	ldr	r3, [r7, #24]
 810c5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c5c2:	2b00      	cmp	r3, #0
 810c5c4:	d104      	bne.n	810c5d0 <HAL_UART_IRQHandler+0x4b8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810c5c6:	697b      	ldr	r3, [r7, #20]
 810c5c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c5cc:	2b00      	cmp	r3, #0
 810c5ce:	d029      	beq.n	810c624 <HAL_UART_IRQHandler+0x50c>
  {
    if (huart->TxISR != NULL)
 810c5d0:	687b      	ldr	r3, [r7, #4]
 810c5d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810c5d4:	2b00      	cmp	r3, #0
 810c5d6:	d055      	beq.n	810c684 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 810c5d8:	687b      	ldr	r3, [r7, #4]
 810c5da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810c5dc:	6878      	ldr	r0, [r7, #4]
 810c5de:	4798      	blx	r3
    }
    return;
 810c5e0:	e050      	b.n	810c684 <HAL_UART_IRQHandler+0x56c>
 810c5e2:	bf00      	nop
 810c5e4:	40020010 	.word	0x40020010
 810c5e8:	40020028 	.word	0x40020028
 810c5ec:	40020040 	.word	0x40020040
 810c5f0:	40020058 	.word	0x40020058
 810c5f4:	40020070 	.word	0x40020070
 810c5f8:	40020088 	.word	0x40020088
 810c5fc:	400200a0 	.word	0x400200a0
 810c600:	400200b8 	.word	0x400200b8
 810c604:	40020410 	.word	0x40020410
 810c608:	40020428 	.word	0x40020428
 810c60c:	40020440 	.word	0x40020440
 810c610:	40020458 	.word	0x40020458
 810c614:	40020470 	.word	0x40020470
 810c618:	40020488 	.word	0x40020488
 810c61c:	400204a0 	.word	0x400204a0
 810c620:	400204b8 	.word	0x400204b8
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810c624:	69fb      	ldr	r3, [r7, #28]
 810c626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c62a:	2b00      	cmp	r3, #0
 810c62c:	d008      	beq.n	810c640 <HAL_UART_IRQHandler+0x528>
 810c62e:	69bb      	ldr	r3, [r7, #24]
 810c630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c634:	2b00      	cmp	r3, #0
 810c636:	d003      	beq.n	810c640 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 810c638:	6878      	ldr	r0, [r7, #4]
 810c63a:	f001 f8da 	bl	810d7f2 <UART_EndTransmit_IT>
    return;
 810c63e:	e022      	b.n	810c686 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810c640:	69fb      	ldr	r3, [r7, #28]
 810c642:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810c646:	2b00      	cmp	r3, #0
 810c648:	d008      	beq.n	810c65c <HAL_UART_IRQHandler+0x544>
 810c64a:	69bb      	ldr	r3, [r7, #24]
 810c64c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810c650:	2b00      	cmp	r3, #0
 810c652:	d003      	beq.n	810c65c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810c654:	6878      	ldr	r0, [r7, #4]
 810c656:	f001 f8fa 	bl	810d84e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810c65a:	e014      	b.n	810c686 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810c65c:	69fb      	ldr	r3, [r7, #28]
 810c65e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810c662:	2b00      	cmp	r3, #0
 810c664:	d00f      	beq.n	810c686 <HAL_UART_IRQHandler+0x56e>
 810c666:	69bb      	ldr	r3, [r7, #24]
 810c668:	2b00      	cmp	r3, #0
 810c66a:	da0c      	bge.n	810c686 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810c66c:	6878      	ldr	r0, [r7, #4]
 810c66e:	f001 f8e4 	bl	810d83a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810c672:	e008      	b.n	810c686 <HAL_UART_IRQHandler+0x56e>
      return;
 810c674:	bf00      	nop
 810c676:	e006      	b.n	810c686 <HAL_UART_IRQHandler+0x56e>
    return;
 810c678:	bf00      	nop
 810c67a:	e004      	b.n	810c686 <HAL_UART_IRQHandler+0x56e>
      return;
 810c67c:	bf00      	nop
 810c67e:	e002      	b.n	810c686 <HAL_UART_IRQHandler+0x56e>
      return;
 810c680:	bf00      	nop
 810c682:	e000      	b.n	810c686 <HAL_UART_IRQHandler+0x56e>
    return;
 810c684:	bf00      	nop
  }
}
 810c686:	3720      	adds	r7, #32
 810c688:	46bd      	mov	sp, r7
 810c68a:	bd80      	pop	{r7, pc}

0810c68c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810c68c:	b480      	push	{r7}
 810c68e:	b083      	sub	sp, #12
 810c690:	af00      	add	r7, sp, #0
 810c692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810c694:	bf00      	nop
 810c696:	370c      	adds	r7, #12
 810c698:	46bd      	mov	sp, r7
 810c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c69e:	4770      	bx	lr

0810c6a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810c6a0:	b480      	push	{r7}
 810c6a2:	b083      	sub	sp, #12
 810c6a4:	af00      	add	r7, sp, #0
 810c6a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810c6a8:	bf00      	nop
 810c6aa:	370c      	adds	r7, #12
 810c6ac:	46bd      	mov	sp, r7
 810c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6b2:	4770      	bx	lr

0810c6b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810c6b4:	b480      	push	{r7}
 810c6b6:	b083      	sub	sp, #12
 810c6b8:	af00      	add	r7, sp, #0
 810c6ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810c6bc:	bf00      	nop
 810c6be:	370c      	adds	r7, #12
 810c6c0:	46bd      	mov	sp, r7
 810c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6c6:	4770      	bx	lr

0810c6c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810c6c8:	b480      	push	{r7}
 810c6ca:	b083      	sub	sp, #12
 810c6cc:	af00      	add	r7, sp, #0
 810c6ce:	6078      	str	r0, [r7, #4]
 810c6d0:	460b      	mov	r3, r1
 810c6d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810c6d4:	bf00      	nop
 810c6d6:	370c      	adds	r7, #12
 810c6d8:	46bd      	mov	sp, r7
 810c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6de:	4770      	bx	lr

0810c6e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810c6e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810c6e4:	b092      	sub	sp, #72	; 0x48
 810c6e6:	af00      	add	r7, sp, #0
 810c6e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810c6ea:	2300      	movs	r3, #0
 810c6ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810c6f0:	697b      	ldr	r3, [r7, #20]
 810c6f2:	689a      	ldr	r2, [r3, #8]
 810c6f4:	697b      	ldr	r3, [r7, #20]
 810c6f6:	691b      	ldr	r3, [r3, #16]
 810c6f8:	431a      	orrs	r2, r3
 810c6fa:	697b      	ldr	r3, [r7, #20]
 810c6fc:	695b      	ldr	r3, [r3, #20]
 810c6fe:	431a      	orrs	r2, r3
 810c700:	697b      	ldr	r3, [r7, #20]
 810c702:	69db      	ldr	r3, [r3, #28]
 810c704:	4313      	orrs	r3, r2
 810c706:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810c708:	697b      	ldr	r3, [r7, #20]
 810c70a:	681b      	ldr	r3, [r3, #0]
 810c70c:	681a      	ldr	r2, [r3, #0]
 810c70e:	4bbd      	ldr	r3, [pc, #756]	; (810ca04 <UART_SetConfig+0x324>)
 810c710:	4013      	ands	r3, r2
 810c712:	697a      	ldr	r2, [r7, #20]
 810c714:	6812      	ldr	r2, [r2, #0]
 810c716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810c718:	430b      	orrs	r3, r1
 810c71a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810c71c:	697b      	ldr	r3, [r7, #20]
 810c71e:	681b      	ldr	r3, [r3, #0]
 810c720:	685b      	ldr	r3, [r3, #4]
 810c722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810c726:	697b      	ldr	r3, [r7, #20]
 810c728:	68da      	ldr	r2, [r3, #12]
 810c72a:	697b      	ldr	r3, [r7, #20]
 810c72c:	681b      	ldr	r3, [r3, #0]
 810c72e:	430a      	orrs	r2, r1
 810c730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810c732:	697b      	ldr	r3, [r7, #20]
 810c734:	699b      	ldr	r3, [r3, #24]
 810c736:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810c738:	697b      	ldr	r3, [r7, #20]
 810c73a:	681b      	ldr	r3, [r3, #0]
 810c73c:	4ab2      	ldr	r2, [pc, #712]	; (810ca08 <UART_SetConfig+0x328>)
 810c73e:	4293      	cmp	r3, r2
 810c740:	d004      	beq.n	810c74c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810c742:	697b      	ldr	r3, [r7, #20]
 810c744:	6a1b      	ldr	r3, [r3, #32]
 810c746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810c748:	4313      	orrs	r3, r2
 810c74a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810c74c:	697b      	ldr	r3, [r7, #20]
 810c74e:	681b      	ldr	r3, [r3, #0]
 810c750:	689b      	ldr	r3, [r3, #8]
 810c752:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810c756:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810c75a:	697a      	ldr	r2, [r7, #20]
 810c75c:	6812      	ldr	r2, [r2, #0]
 810c75e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810c760:	430b      	orrs	r3, r1
 810c762:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810c764:	697b      	ldr	r3, [r7, #20]
 810c766:	681b      	ldr	r3, [r3, #0]
 810c768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c76a:	f023 010f 	bic.w	r1, r3, #15
 810c76e:	697b      	ldr	r3, [r7, #20]
 810c770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810c772:	697b      	ldr	r3, [r7, #20]
 810c774:	681b      	ldr	r3, [r3, #0]
 810c776:	430a      	orrs	r2, r1
 810c778:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810c77a:	697b      	ldr	r3, [r7, #20]
 810c77c:	681b      	ldr	r3, [r3, #0]
 810c77e:	4aa3      	ldr	r2, [pc, #652]	; (810ca0c <UART_SetConfig+0x32c>)
 810c780:	4293      	cmp	r3, r2
 810c782:	d177      	bne.n	810c874 <UART_SetConfig+0x194>
 810c784:	4ba2      	ldr	r3, [pc, #648]	; (810ca10 <UART_SetConfig+0x330>)
 810c786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810c78c:	2b28      	cmp	r3, #40	; 0x28
 810c78e:	d86d      	bhi.n	810c86c <UART_SetConfig+0x18c>
 810c790:	a201      	add	r2, pc, #4	; (adr r2, 810c798 <UART_SetConfig+0xb8>)
 810c792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c796:	bf00      	nop
 810c798:	0810c83d 	.word	0x0810c83d
 810c79c:	0810c86d 	.word	0x0810c86d
 810c7a0:	0810c86d 	.word	0x0810c86d
 810c7a4:	0810c86d 	.word	0x0810c86d
 810c7a8:	0810c86d 	.word	0x0810c86d
 810c7ac:	0810c86d 	.word	0x0810c86d
 810c7b0:	0810c86d 	.word	0x0810c86d
 810c7b4:	0810c86d 	.word	0x0810c86d
 810c7b8:	0810c845 	.word	0x0810c845
 810c7bc:	0810c86d 	.word	0x0810c86d
 810c7c0:	0810c86d 	.word	0x0810c86d
 810c7c4:	0810c86d 	.word	0x0810c86d
 810c7c8:	0810c86d 	.word	0x0810c86d
 810c7cc:	0810c86d 	.word	0x0810c86d
 810c7d0:	0810c86d 	.word	0x0810c86d
 810c7d4:	0810c86d 	.word	0x0810c86d
 810c7d8:	0810c84d 	.word	0x0810c84d
 810c7dc:	0810c86d 	.word	0x0810c86d
 810c7e0:	0810c86d 	.word	0x0810c86d
 810c7e4:	0810c86d 	.word	0x0810c86d
 810c7e8:	0810c86d 	.word	0x0810c86d
 810c7ec:	0810c86d 	.word	0x0810c86d
 810c7f0:	0810c86d 	.word	0x0810c86d
 810c7f4:	0810c86d 	.word	0x0810c86d
 810c7f8:	0810c855 	.word	0x0810c855
 810c7fc:	0810c86d 	.word	0x0810c86d
 810c800:	0810c86d 	.word	0x0810c86d
 810c804:	0810c86d 	.word	0x0810c86d
 810c808:	0810c86d 	.word	0x0810c86d
 810c80c:	0810c86d 	.word	0x0810c86d
 810c810:	0810c86d 	.word	0x0810c86d
 810c814:	0810c86d 	.word	0x0810c86d
 810c818:	0810c85d 	.word	0x0810c85d
 810c81c:	0810c86d 	.word	0x0810c86d
 810c820:	0810c86d 	.word	0x0810c86d
 810c824:	0810c86d 	.word	0x0810c86d
 810c828:	0810c86d 	.word	0x0810c86d
 810c82c:	0810c86d 	.word	0x0810c86d
 810c830:	0810c86d 	.word	0x0810c86d
 810c834:	0810c86d 	.word	0x0810c86d
 810c838:	0810c865 	.word	0x0810c865
 810c83c:	2301      	movs	r3, #1
 810c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c842:	e220      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c844:	2304      	movs	r3, #4
 810c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c84a:	e21c      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c84c:	2308      	movs	r3, #8
 810c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c852:	e218      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c854:	2310      	movs	r3, #16
 810c856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c85a:	e214      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c85c:	2320      	movs	r3, #32
 810c85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c862:	e210      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c864:	2340      	movs	r3, #64	; 0x40
 810c866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c86a:	e20c      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c86c:	2380      	movs	r3, #128	; 0x80
 810c86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c872:	e208      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c874:	697b      	ldr	r3, [r7, #20]
 810c876:	681b      	ldr	r3, [r3, #0]
 810c878:	4a66      	ldr	r2, [pc, #408]	; (810ca14 <UART_SetConfig+0x334>)
 810c87a:	4293      	cmp	r3, r2
 810c87c:	d130      	bne.n	810c8e0 <UART_SetConfig+0x200>
 810c87e:	4b64      	ldr	r3, [pc, #400]	; (810ca10 <UART_SetConfig+0x330>)
 810c880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c882:	f003 0307 	and.w	r3, r3, #7
 810c886:	2b05      	cmp	r3, #5
 810c888:	d826      	bhi.n	810c8d8 <UART_SetConfig+0x1f8>
 810c88a:	a201      	add	r2, pc, #4	; (adr r2, 810c890 <UART_SetConfig+0x1b0>)
 810c88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c890:	0810c8a9 	.word	0x0810c8a9
 810c894:	0810c8b1 	.word	0x0810c8b1
 810c898:	0810c8b9 	.word	0x0810c8b9
 810c89c:	0810c8c1 	.word	0x0810c8c1
 810c8a0:	0810c8c9 	.word	0x0810c8c9
 810c8a4:	0810c8d1 	.word	0x0810c8d1
 810c8a8:	2300      	movs	r3, #0
 810c8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8ae:	e1ea      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c8b0:	2304      	movs	r3, #4
 810c8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8b6:	e1e6      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c8b8:	2308      	movs	r3, #8
 810c8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8be:	e1e2      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c8c0:	2310      	movs	r3, #16
 810c8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8c6:	e1de      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c8c8:	2320      	movs	r3, #32
 810c8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8ce:	e1da      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c8d0:	2340      	movs	r3, #64	; 0x40
 810c8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8d6:	e1d6      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c8d8:	2380      	movs	r3, #128	; 0x80
 810c8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c8de:	e1d2      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c8e0:	697b      	ldr	r3, [r7, #20]
 810c8e2:	681b      	ldr	r3, [r3, #0]
 810c8e4:	4a4c      	ldr	r2, [pc, #304]	; (810ca18 <UART_SetConfig+0x338>)
 810c8e6:	4293      	cmp	r3, r2
 810c8e8:	d130      	bne.n	810c94c <UART_SetConfig+0x26c>
 810c8ea:	4b49      	ldr	r3, [pc, #292]	; (810ca10 <UART_SetConfig+0x330>)
 810c8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c8ee:	f003 0307 	and.w	r3, r3, #7
 810c8f2:	2b05      	cmp	r3, #5
 810c8f4:	d826      	bhi.n	810c944 <UART_SetConfig+0x264>
 810c8f6:	a201      	add	r2, pc, #4	; (adr r2, 810c8fc <UART_SetConfig+0x21c>)
 810c8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c8fc:	0810c915 	.word	0x0810c915
 810c900:	0810c91d 	.word	0x0810c91d
 810c904:	0810c925 	.word	0x0810c925
 810c908:	0810c92d 	.word	0x0810c92d
 810c90c:	0810c935 	.word	0x0810c935
 810c910:	0810c93d 	.word	0x0810c93d
 810c914:	2300      	movs	r3, #0
 810c916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c91a:	e1b4      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c91c:	2304      	movs	r3, #4
 810c91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c922:	e1b0      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c924:	2308      	movs	r3, #8
 810c926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c92a:	e1ac      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c92c:	2310      	movs	r3, #16
 810c92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c932:	e1a8      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c934:	2320      	movs	r3, #32
 810c936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c93a:	e1a4      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c93c:	2340      	movs	r3, #64	; 0x40
 810c93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c942:	e1a0      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c944:	2380      	movs	r3, #128	; 0x80
 810c946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c94a:	e19c      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c94c:	697b      	ldr	r3, [r7, #20]
 810c94e:	681b      	ldr	r3, [r3, #0]
 810c950:	4a32      	ldr	r2, [pc, #200]	; (810ca1c <UART_SetConfig+0x33c>)
 810c952:	4293      	cmp	r3, r2
 810c954:	d130      	bne.n	810c9b8 <UART_SetConfig+0x2d8>
 810c956:	4b2e      	ldr	r3, [pc, #184]	; (810ca10 <UART_SetConfig+0x330>)
 810c958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c95a:	f003 0307 	and.w	r3, r3, #7
 810c95e:	2b05      	cmp	r3, #5
 810c960:	d826      	bhi.n	810c9b0 <UART_SetConfig+0x2d0>
 810c962:	a201      	add	r2, pc, #4	; (adr r2, 810c968 <UART_SetConfig+0x288>)
 810c964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c968:	0810c981 	.word	0x0810c981
 810c96c:	0810c989 	.word	0x0810c989
 810c970:	0810c991 	.word	0x0810c991
 810c974:	0810c999 	.word	0x0810c999
 810c978:	0810c9a1 	.word	0x0810c9a1
 810c97c:	0810c9a9 	.word	0x0810c9a9
 810c980:	2300      	movs	r3, #0
 810c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c986:	e17e      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c988:	2304      	movs	r3, #4
 810c98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c98e:	e17a      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c990:	2308      	movs	r3, #8
 810c992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c996:	e176      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c998:	2310      	movs	r3, #16
 810c99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c99e:	e172      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c9a0:	2320      	movs	r3, #32
 810c9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9a6:	e16e      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c9a8:	2340      	movs	r3, #64	; 0x40
 810c9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9ae:	e16a      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c9b0:	2380      	movs	r3, #128	; 0x80
 810c9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9b6:	e166      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c9b8:	697b      	ldr	r3, [r7, #20]
 810c9ba:	681b      	ldr	r3, [r3, #0]
 810c9bc:	4a18      	ldr	r2, [pc, #96]	; (810ca20 <UART_SetConfig+0x340>)
 810c9be:	4293      	cmp	r3, r2
 810c9c0:	d140      	bne.n	810ca44 <UART_SetConfig+0x364>
 810c9c2:	4b13      	ldr	r3, [pc, #76]	; (810ca10 <UART_SetConfig+0x330>)
 810c9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c9c6:	f003 0307 	and.w	r3, r3, #7
 810c9ca:	2b05      	cmp	r3, #5
 810c9cc:	d836      	bhi.n	810ca3c <UART_SetConfig+0x35c>
 810c9ce:	a201      	add	r2, pc, #4	; (adr r2, 810c9d4 <UART_SetConfig+0x2f4>)
 810c9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c9d4:	0810c9ed 	.word	0x0810c9ed
 810c9d8:	0810c9f5 	.word	0x0810c9f5
 810c9dc:	0810c9fd 	.word	0x0810c9fd
 810c9e0:	0810ca25 	.word	0x0810ca25
 810c9e4:	0810ca2d 	.word	0x0810ca2d
 810c9e8:	0810ca35 	.word	0x0810ca35
 810c9ec:	2300      	movs	r3, #0
 810c9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9f2:	e148      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c9f4:	2304      	movs	r3, #4
 810c9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810c9fa:	e144      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810c9fc:	2308      	movs	r3, #8
 810c9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca02:	e140      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810ca04:	cfff69f3 	.word	0xcfff69f3
 810ca08:	58000c00 	.word	0x58000c00
 810ca0c:	40011000 	.word	0x40011000
 810ca10:	58024400 	.word	0x58024400
 810ca14:	40004400 	.word	0x40004400
 810ca18:	40004800 	.word	0x40004800
 810ca1c:	40004c00 	.word	0x40004c00
 810ca20:	40005000 	.word	0x40005000
 810ca24:	2310      	movs	r3, #16
 810ca26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca2a:	e12c      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810ca2c:	2320      	movs	r3, #32
 810ca2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca32:	e128      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810ca34:	2340      	movs	r3, #64	; 0x40
 810ca36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca3a:	e124      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810ca3c:	2380      	movs	r3, #128	; 0x80
 810ca3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ca42:	e120      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810ca44:	697b      	ldr	r3, [r7, #20]
 810ca46:	681b      	ldr	r3, [r3, #0]
 810ca48:	4acb      	ldr	r2, [pc, #812]	; (810cd78 <UART_SetConfig+0x698>)
 810ca4a:	4293      	cmp	r3, r2
 810ca4c:	d176      	bne.n	810cb3c <UART_SetConfig+0x45c>
 810ca4e:	4bcb      	ldr	r3, [pc, #812]	; (810cd7c <UART_SetConfig+0x69c>)
 810ca50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ca52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810ca56:	2b28      	cmp	r3, #40	; 0x28
 810ca58:	d86c      	bhi.n	810cb34 <UART_SetConfig+0x454>
 810ca5a:	a201      	add	r2, pc, #4	; (adr r2, 810ca60 <UART_SetConfig+0x380>)
 810ca5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ca60:	0810cb05 	.word	0x0810cb05
 810ca64:	0810cb35 	.word	0x0810cb35
 810ca68:	0810cb35 	.word	0x0810cb35
 810ca6c:	0810cb35 	.word	0x0810cb35
 810ca70:	0810cb35 	.word	0x0810cb35
 810ca74:	0810cb35 	.word	0x0810cb35
 810ca78:	0810cb35 	.word	0x0810cb35
 810ca7c:	0810cb35 	.word	0x0810cb35
 810ca80:	0810cb0d 	.word	0x0810cb0d
 810ca84:	0810cb35 	.word	0x0810cb35
 810ca88:	0810cb35 	.word	0x0810cb35
 810ca8c:	0810cb35 	.word	0x0810cb35
 810ca90:	0810cb35 	.word	0x0810cb35
 810ca94:	0810cb35 	.word	0x0810cb35
 810ca98:	0810cb35 	.word	0x0810cb35
 810ca9c:	0810cb35 	.word	0x0810cb35
 810caa0:	0810cb15 	.word	0x0810cb15
 810caa4:	0810cb35 	.word	0x0810cb35
 810caa8:	0810cb35 	.word	0x0810cb35
 810caac:	0810cb35 	.word	0x0810cb35
 810cab0:	0810cb35 	.word	0x0810cb35
 810cab4:	0810cb35 	.word	0x0810cb35
 810cab8:	0810cb35 	.word	0x0810cb35
 810cabc:	0810cb35 	.word	0x0810cb35
 810cac0:	0810cb1d 	.word	0x0810cb1d
 810cac4:	0810cb35 	.word	0x0810cb35
 810cac8:	0810cb35 	.word	0x0810cb35
 810cacc:	0810cb35 	.word	0x0810cb35
 810cad0:	0810cb35 	.word	0x0810cb35
 810cad4:	0810cb35 	.word	0x0810cb35
 810cad8:	0810cb35 	.word	0x0810cb35
 810cadc:	0810cb35 	.word	0x0810cb35
 810cae0:	0810cb25 	.word	0x0810cb25
 810cae4:	0810cb35 	.word	0x0810cb35
 810cae8:	0810cb35 	.word	0x0810cb35
 810caec:	0810cb35 	.word	0x0810cb35
 810caf0:	0810cb35 	.word	0x0810cb35
 810caf4:	0810cb35 	.word	0x0810cb35
 810caf8:	0810cb35 	.word	0x0810cb35
 810cafc:	0810cb35 	.word	0x0810cb35
 810cb00:	0810cb2d 	.word	0x0810cb2d
 810cb04:	2301      	movs	r3, #1
 810cb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb0a:	e0bc      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb0c:	2304      	movs	r3, #4
 810cb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb12:	e0b8      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb14:	2308      	movs	r3, #8
 810cb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb1a:	e0b4      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb1c:	2310      	movs	r3, #16
 810cb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb22:	e0b0      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb24:	2320      	movs	r3, #32
 810cb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb2a:	e0ac      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb2c:	2340      	movs	r3, #64	; 0x40
 810cb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb32:	e0a8      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb34:	2380      	movs	r3, #128	; 0x80
 810cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb3a:	e0a4      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb3c:	697b      	ldr	r3, [r7, #20]
 810cb3e:	681b      	ldr	r3, [r3, #0]
 810cb40:	4a8f      	ldr	r2, [pc, #572]	; (810cd80 <UART_SetConfig+0x6a0>)
 810cb42:	4293      	cmp	r3, r2
 810cb44:	d130      	bne.n	810cba8 <UART_SetConfig+0x4c8>
 810cb46:	4b8d      	ldr	r3, [pc, #564]	; (810cd7c <UART_SetConfig+0x69c>)
 810cb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810cb4a:	f003 0307 	and.w	r3, r3, #7
 810cb4e:	2b05      	cmp	r3, #5
 810cb50:	d826      	bhi.n	810cba0 <UART_SetConfig+0x4c0>
 810cb52:	a201      	add	r2, pc, #4	; (adr r2, 810cb58 <UART_SetConfig+0x478>)
 810cb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cb58:	0810cb71 	.word	0x0810cb71
 810cb5c:	0810cb79 	.word	0x0810cb79
 810cb60:	0810cb81 	.word	0x0810cb81
 810cb64:	0810cb89 	.word	0x0810cb89
 810cb68:	0810cb91 	.word	0x0810cb91
 810cb6c:	0810cb99 	.word	0x0810cb99
 810cb70:	2300      	movs	r3, #0
 810cb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb76:	e086      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb78:	2304      	movs	r3, #4
 810cb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb7e:	e082      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb80:	2308      	movs	r3, #8
 810cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb86:	e07e      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb88:	2310      	movs	r3, #16
 810cb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb8e:	e07a      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb90:	2320      	movs	r3, #32
 810cb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb96:	e076      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cb98:	2340      	movs	r3, #64	; 0x40
 810cb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cb9e:	e072      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cba0:	2380      	movs	r3, #128	; 0x80
 810cba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cba6:	e06e      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cba8:	697b      	ldr	r3, [r7, #20]
 810cbaa:	681b      	ldr	r3, [r3, #0]
 810cbac:	4a75      	ldr	r2, [pc, #468]	; (810cd84 <UART_SetConfig+0x6a4>)
 810cbae:	4293      	cmp	r3, r2
 810cbb0:	d130      	bne.n	810cc14 <UART_SetConfig+0x534>
 810cbb2:	4b72      	ldr	r3, [pc, #456]	; (810cd7c <UART_SetConfig+0x69c>)
 810cbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810cbb6:	f003 0307 	and.w	r3, r3, #7
 810cbba:	2b05      	cmp	r3, #5
 810cbbc:	d826      	bhi.n	810cc0c <UART_SetConfig+0x52c>
 810cbbe:	a201      	add	r2, pc, #4	; (adr r2, 810cbc4 <UART_SetConfig+0x4e4>)
 810cbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cbc4:	0810cbdd 	.word	0x0810cbdd
 810cbc8:	0810cbe5 	.word	0x0810cbe5
 810cbcc:	0810cbed 	.word	0x0810cbed
 810cbd0:	0810cbf5 	.word	0x0810cbf5
 810cbd4:	0810cbfd 	.word	0x0810cbfd
 810cbd8:	0810cc05 	.word	0x0810cc05
 810cbdc:	2300      	movs	r3, #0
 810cbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cbe2:	e050      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cbe4:	2304      	movs	r3, #4
 810cbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cbea:	e04c      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cbec:	2308      	movs	r3, #8
 810cbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cbf2:	e048      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cbf4:	2310      	movs	r3, #16
 810cbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cbfa:	e044      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cbfc:	2320      	movs	r3, #32
 810cbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc02:	e040      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc04:	2340      	movs	r3, #64	; 0x40
 810cc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc0a:	e03c      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc0c:	2380      	movs	r3, #128	; 0x80
 810cc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc12:	e038      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc14:	697b      	ldr	r3, [r7, #20]
 810cc16:	681b      	ldr	r3, [r3, #0]
 810cc18:	4a5b      	ldr	r2, [pc, #364]	; (810cd88 <UART_SetConfig+0x6a8>)
 810cc1a:	4293      	cmp	r3, r2
 810cc1c:	d130      	bne.n	810cc80 <UART_SetConfig+0x5a0>
 810cc1e:	4b57      	ldr	r3, [pc, #348]	; (810cd7c <UART_SetConfig+0x69c>)
 810cc20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810cc22:	f003 0307 	and.w	r3, r3, #7
 810cc26:	2b05      	cmp	r3, #5
 810cc28:	d826      	bhi.n	810cc78 <UART_SetConfig+0x598>
 810cc2a:	a201      	add	r2, pc, #4	; (adr r2, 810cc30 <UART_SetConfig+0x550>)
 810cc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cc30:	0810cc49 	.word	0x0810cc49
 810cc34:	0810cc51 	.word	0x0810cc51
 810cc38:	0810cc59 	.word	0x0810cc59
 810cc3c:	0810cc61 	.word	0x0810cc61
 810cc40:	0810cc69 	.word	0x0810cc69
 810cc44:	0810cc71 	.word	0x0810cc71
 810cc48:	2302      	movs	r3, #2
 810cc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc4e:	e01a      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc50:	2304      	movs	r3, #4
 810cc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc56:	e016      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc58:	2308      	movs	r3, #8
 810cc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc5e:	e012      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc60:	2310      	movs	r3, #16
 810cc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc66:	e00e      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc68:	2320      	movs	r3, #32
 810cc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc6e:	e00a      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc70:	2340      	movs	r3, #64	; 0x40
 810cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc76:	e006      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc78:	2380      	movs	r3, #128	; 0x80
 810cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810cc7e:	e002      	b.n	810cc86 <UART_SetConfig+0x5a6>
 810cc80:	2380      	movs	r3, #128	; 0x80
 810cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810cc86:	697b      	ldr	r3, [r7, #20]
 810cc88:	681b      	ldr	r3, [r3, #0]
 810cc8a:	4a3f      	ldr	r2, [pc, #252]	; (810cd88 <UART_SetConfig+0x6a8>)
 810cc8c:	4293      	cmp	r3, r2
 810cc8e:	f040 80f8 	bne.w	810ce82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810cc92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810cc96:	2b20      	cmp	r3, #32
 810cc98:	dc46      	bgt.n	810cd28 <UART_SetConfig+0x648>
 810cc9a:	2b02      	cmp	r3, #2
 810cc9c:	f2c0 8082 	blt.w	810cda4 <UART_SetConfig+0x6c4>
 810cca0:	3b02      	subs	r3, #2
 810cca2:	2b1e      	cmp	r3, #30
 810cca4:	d87e      	bhi.n	810cda4 <UART_SetConfig+0x6c4>
 810cca6:	a201      	add	r2, pc, #4	; (adr r2, 810ccac <UART_SetConfig+0x5cc>)
 810cca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ccac:	0810cd2f 	.word	0x0810cd2f
 810ccb0:	0810cda5 	.word	0x0810cda5
 810ccb4:	0810cd37 	.word	0x0810cd37
 810ccb8:	0810cda5 	.word	0x0810cda5
 810ccbc:	0810cda5 	.word	0x0810cda5
 810ccc0:	0810cda5 	.word	0x0810cda5
 810ccc4:	0810cd47 	.word	0x0810cd47
 810ccc8:	0810cda5 	.word	0x0810cda5
 810cccc:	0810cda5 	.word	0x0810cda5
 810ccd0:	0810cda5 	.word	0x0810cda5
 810ccd4:	0810cda5 	.word	0x0810cda5
 810ccd8:	0810cda5 	.word	0x0810cda5
 810ccdc:	0810cda5 	.word	0x0810cda5
 810cce0:	0810cda5 	.word	0x0810cda5
 810cce4:	0810cd57 	.word	0x0810cd57
 810cce8:	0810cda5 	.word	0x0810cda5
 810ccec:	0810cda5 	.word	0x0810cda5
 810ccf0:	0810cda5 	.word	0x0810cda5
 810ccf4:	0810cda5 	.word	0x0810cda5
 810ccf8:	0810cda5 	.word	0x0810cda5
 810ccfc:	0810cda5 	.word	0x0810cda5
 810cd00:	0810cda5 	.word	0x0810cda5
 810cd04:	0810cda5 	.word	0x0810cda5
 810cd08:	0810cda5 	.word	0x0810cda5
 810cd0c:	0810cda5 	.word	0x0810cda5
 810cd10:	0810cda5 	.word	0x0810cda5
 810cd14:	0810cda5 	.word	0x0810cda5
 810cd18:	0810cda5 	.word	0x0810cda5
 810cd1c:	0810cda5 	.word	0x0810cda5
 810cd20:	0810cda5 	.word	0x0810cda5
 810cd24:	0810cd97 	.word	0x0810cd97
 810cd28:	2b40      	cmp	r3, #64	; 0x40
 810cd2a:	d037      	beq.n	810cd9c <UART_SetConfig+0x6bc>
 810cd2c:	e03a      	b.n	810cda4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810cd2e:	f7fd f9e5 	bl	810a0fc <HAL_RCCEx_GetD3PCLK1Freq>
 810cd32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810cd34:	e03c      	b.n	810cdb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810cd36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810cd3a:	4618      	mov	r0, r3
 810cd3c:	f7fd f9f4 	bl	810a128 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cd44:	e034      	b.n	810cdb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810cd46:	f107 0318 	add.w	r3, r7, #24
 810cd4a:	4618      	mov	r0, r3
 810cd4c:	f7fd fb40 	bl	810a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810cd50:	69fb      	ldr	r3, [r7, #28]
 810cd52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cd54:	e02c      	b.n	810cdb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810cd56:	4b09      	ldr	r3, [pc, #36]	; (810cd7c <UART_SetConfig+0x69c>)
 810cd58:	681b      	ldr	r3, [r3, #0]
 810cd5a:	f003 0320 	and.w	r3, r3, #32
 810cd5e:	2b00      	cmp	r3, #0
 810cd60:	d016      	beq.n	810cd90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810cd62:	4b06      	ldr	r3, [pc, #24]	; (810cd7c <UART_SetConfig+0x69c>)
 810cd64:	681b      	ldr	r3, [r3, #0]
 810cd66:	08db      	lsrs	r3, r3, #3
 810cd68:	f003 0303 	and.w	r3, r3, #3
 810cd6c:	4a07      	ldr	r2, [pc, #28]	; (810cd8c <UART_SetConfig+0x6ac>)
 810cd6e:	fa22 f303 	lsr.w	r3, r2, r3
 810cd72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810cd74:	e01c      	b.n	810cdb0 <UART_SetConfig+0x6d0>
 810cd76:	bf00      	nop
 810cd78:	40011400 	.word	0x40011400
 810cd7c:	58024400 	.word	0x58024400
 810cd80:	40007800 	.word	0x40007800
 810cd84:	40007c00 	.word	0x40007c00
 810cd88:	58000c00 	.word	0x58000c00
 810cd8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810cd90:	4b9e      	ldr	r3, [pc, #632]	; (810d00c <UART_SetConfig+0x92c>)
 810cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cd94:	e00c      	b.n	810cdb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810cd96:	4b9e      	ldr	r3, [pc, #632]	; (810d010 <UART_SetConfig+0x930>)
 810cd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cd9a:	e009      	b.n	810cdb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810cd9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810cda0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cda2:	e005      	b.n	810cdb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810cda4:	2300      	movs	r3, #0
 810cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810cda8:	2301      	movs	r3, #1
 810cdaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810cdae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810cdb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cdb2:	2b00      	cmp	r3, #0
 810cdb4:	f000 81e0 	beq.w	810d178 <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810cdb8:	697b      	ldr	r3, [r7, #20]
 810cdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810cdbc:	4a95      	ldr	r2, [pc, #596]	; (810d014 <UART_SetConfig+0x934>)
 810cdbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810cdc2:	461a      	mov	r2, r3
 810cdc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cdc6:	fbb3 f3f2 	udiv	r3, r3, r2
 810cdca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810cdcc:	697b      	ldr	r3, [r7, #20]
 810cdce:	685a      	ldr	r2, [r3, #4]
 810cdd0:	4613      	mov	r3, r2
 810cdd2:	005b      	lsls	r3, r3, #1
 810cdd4:	4413      	add	r3, r2
 810cdd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810cdd8:	429a      	cmp	r2, r3
 810cdda:	d305      	bcc.n	810cde8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810cddc:	697b      	ldr	r3, [r7, #20]
 810cdde:	685b      	ldr	r3, [r3, #4]
 810cde0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810cde2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810cde4:	429a      	cmp	r2, r3
 810cde6:	d903      	bls.n	810cdf0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810cde8:	2301      	movs	r3, #1
 810cdea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810cdee:	e1c3      	b.n	810d178 <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810cdf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cdf2:	2200      	movs	r2, #0
 810cdf4:	60bb      	str	r3, [r7, #8]
 810cdf6:	60fa      	str	r2, [r7, #12]
 810cdf8:	697b      	ldr	r3, [r7, #20]
 810cdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810cdfc:	4a85      	ldr	r2, [pc, #532]	; (810d014 <UART_SetConfig+0x934>)
 810cdfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ce02:	b29b      	uxth	r3, r3
 810ce04:	2200      	movs	r2, #0
 810ce06:	603b      	str	r3, [r7, #0]
 810ce08:	607a      	str	r2, [r7, #4]
 810ce0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810ce0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810ce12:	f7f4 f87b 	bl	8100f0c <__aeabi_uldivmod>
 810ce16:	4602      	mov	r2, r0
 810ce18:	460b      	mov	r3, r1
 810ce1a:	4610      	mov	r0, r2
 810ce1c:	4619      	mov	r1, r3
 810ce1e:	f04f 0200 	mov.w	r2, #0
 810ce22:	f04f 0300 	mov.w	r3, #0
 810ce26:	020b      	lsls	r3, r1, #8
 810ce28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810ce2c:	0202      	lsls	r2, r0, #8
 810ce2e:	6979      	ldr	r1, [r7, #20]
 810ce30:	6849      	ldr	r1, [r1, #4]
 810ce32:	0849      	lsrs	r1, r1, #1
 810ce34:	2000      	movs	r0, #0
 810ce36:	460c      	mov	r4, r1
 810ce38:	4605      	mov	r5, r0
 810ce3a:	eb12 0804 	adds.w	r8, r2, r4
 810ce3e:	eb43 0905 	adc.w	r9, r3, r5
 810ce42:	697b      	ldr	r3, [r7, #20]
 810ce44:	685b      	ldr	r3, [r3, #4]
 810ce46:	2200      	movs	r2, #0
 810ce48:	469a      	mov	sl, r3
 810ce4a:	4693      	mov	fp, r2
 810ce4c:	4652      	mov	r2, sl
 810ce4e:	465b      	mov	r3, fp
 810ce50:	4640      	mov	r0, r8
 810ce52:	4649      	mov	r1, r9
 810ce54:	f7f4 f85a 	bl	8100f0c <__aeabi_uldivmod>
 810ce58:	4602      	mov	r2, r0
 810ce5a:	460b      	mov	r3, r1
 810ce5c:	4613      	mov	r3, r2
 810ce5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ce62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810ce66:	d308      	bcc.n	810ce7a <UART_SetConfig+0x79a>
 810ce68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ce6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ce6e:	d204      	bcs.n	810ce7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810ce70:	697b      	ldr	r3, [r7, #20]
 810ce72:	681b      	ldr	r3, [r3, #0]
 810ce74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810ce76:	60da      	str	r2, [r3, #12]
 810ce78:	e17e      	b.n	810d178 <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 810ce7a:	2301      	movs	r3, #1
 810ce7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810ce80:	e17a      	b.n	810d178 <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810ce82:	697b      	ldr	r3, [r7, #20]
 810ce84:	69db      	ldr	r3, [r3, #28]
 810ce86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810ce8a:	f040 80c7 	bne.w	810d01c <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 810ce8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810ce92:	2b20      	cmp	r3, #32
 810ce94:	dc48      	bgt.n	810cf28 <UART_SetConfig+0x848>
 810ce96:	2b00      	cmp	r3, #0
 810ce98:	db7b      	blt.n	810cf92 <UART_SetConfig+0x8b2>
 810ce9a:	2b20      	cmp	r3, #32
 810ce9c:	d879      	bhi.n	810cf92 <UART_SetConfig+0x8b2>
 810ce9e:	a201      	add	r2, pc, #4	; (adr r2, 810cea4 <UART_SetConfig+0x7c4>)
 810cea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cea4:	0810cf2f 	.word	0x0810cf2f
 810cea8:	0810cf37 	.word	0x0810cf37
 810ceac:	0810cf93 	.word	0x0810cf93
 810ceb0:	0810cf93 	.word	0x0810cf93
 810ceb4:	0810cf3f 	.word	0x0810cf3f
 810ceb8:	0810cf93 	.word	0x0810cf93
 810cebc:	0810cf93 	.word	0x0810cf93
 810cec0:	0810cf93 	.word	0x0810cf93
 810cec4:	0810cf4f 	.word	0x0810cf4f
 810cec8:	0810cf93 	.word	0x0810cf93
 810cecc:	0810cf93 	.word	0x0810cf93
 810ced0:	0810cf93 	.word	0x0810cf93
 810ced4:	0810cf93 	.word	0x0810cf93
 810ced8:	0810cf93 	.word	0x0810cf93
 810cedc:	0810cf93 	.word	0x0810cf93
 810cee0:	0810cf93 	.word	0x0810cf93
 810cee4:	0810cf5f 	.word	0x0810cf5f
 810cee8:	0810cf93 	.word	0x0810cf93
 810ceec:	0810cf93 	.word	0x0810cf93
 810cef0:	0810cf93 	.word	0x0810cf93
 810cef4:	0810cf93 	.word	0x0810cf93
 810cef8:	0810cf93 	.word	0x0810cf93
 810cefc:	0810cf93 	.word	0x0810cf93
 810cf00:	0810cf93 	.word	0x0810cf93
 810cf04:	0810cf93 	.word	0x0810cf93
 810cf08:	0810cf93 	.word	0x0810cf93
 810cf0c:	0810cf93 	.word	0x0810cf93
 810cf10:	0810cf93 	.word	0x0810cf93
 810cf14:	0810cf93 	.word	0x0810cf93
 810cf18:	0810cf93 	.word	0x0810cf93
 810cf1c:	0810cf93 	.word	0x0810cf93
 810cf20:	0810cf93 	.word	0x0810cf93
 810cf24:	0810cf85 	.word	0x0810cf85
 810cf28:	2b40      	cmp	r3, #64	; 0x40
 810cf2a:	d02e      	beq.n	810cf8a <UART_SetConfig+0x8aa>
 810cf2c:	e031      	b.n	810cf92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810cf2e:	f7fc f973 	bl	8109218 <HAL_RCC_GetPCLK1Freq>
 810cf32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810cf34:	e033      	b.n	810cf9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810cf36:	f7fc f985 	bl	8109244 <HAL_RCC_GetPCLK2Freq>
 810cf3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810cf3c:	e02f      	b.n	810cf9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810cf3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810cf42:	4618      	mov	r0, r3
 810cf44:	f7fd f8f0 	bl	810a128 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cf4c:	e027      	b.n	810cf9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810cf4e:	f107 0318 	add.w	r3, r7, #24
 810cf52:	4618      	mov	r0, r3
 810cf54:	f7fd fa3c 	bl	810a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810cf58:	69fb      	ldr	r3, [r7, #28]
 810cf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cf5c:	e01f      	b.n	810cf9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810cf5e:	4b2e      	ldr	r3, [pc, #184]	; (810d018 <UART_SetConfig+0x938>)
 810cf60:	681b      	ldr	r3, [r3, #0]
 810cf62:	f003 0320 	and.w	r3, r3, #32
 810cf66:	2b00      	cmp	r3, #0
 810cf68:	d009      	beq.n	810cf7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810cf6a:	4b2b      	ldr	r3, [pc, #172]	; (810d018 <UART_SetConfig+0x938>)
 810cf6c:	681b      	ldr	r3, [r3, #0]
 810cf6e:	08db      	lsrs	r3, r3, #3
 810cf70:	f003 0303 	and.w	r3, r3, #3
 810cf74:	4a25      	ldr	r2, [pc, #148]	; (810d00c <UART_SetConfig+0x92c>)
 810cf76:	fa22 f303 	lsr.w	r3, r2, r3
 810cf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810cf7c:	e00f      	b.n	810cf9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810cf7e:	4b23      	ldr	r3, [pc, #140]	; (810d00c <UART_SetConfig+0x92c>)
 810cf80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cf82:	e00c      	b.n	810cf9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810cf84:	4b22      	ldr	r3, [pc, #136]	; (810d010 <UART_SetConfig+0x930>)
 810cf86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cf88:	e009      	b.n	810cf9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810cf8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810cf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810cf90:	e005      	b.n	810cf9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810cf92:	2300      	movs	r3, #0
 810cf94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810cf96:	2301      	movs	r3, #1
 810cf98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810cf9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810cf9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cfa0:	2b00      	cmp	r3, #0
 810cfa2:	f000 80e9 	beq.w	810d178 <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810cfa6:	697b      	ldr	r3, [r7, #20]
 810cfa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810cfaa:	4a1a      	ldr	r2, [pc, #104]	; (810d014 <UART_SetConfig+0x934>)
 810cfac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810cfb0:	461a      	mov	r2, r3
 810cfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810cfb4:	fbb3 f3f2 	udiv	r3, r3, r2
 810cfb8:	005a      	lsls	r2, r3, #1
 810cfba:	697b      	ldr	r3, [r7, #20]
 810cfbc:	685b      	ldr	r3, [r3, #4]
 810cfbe:	085b      	lsrs	r3, r3, #1
 810cfc0:	441a      	add	r2, r3
 810cfc2:	697b      	ldr	r3, [r7, #20]
 810cfc4:	685b      	ldr	r3, [r3, #4]
 810cfc6:	fbb2 f3f3 	udiv	r3, r2, r3
 810cfca:	b29b      	uxth	r3, r3
 810cfcc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810cfd0:	2b0f      	cmp	r3, #15
 810cfd2:	d916      	bls.n	810d002 <UART_SetConfig+0x922>
 810cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810cfd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810cfda:	d212      	bcs.n	810d002 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810cfde:	b29b      	uxth	r3, r3
 810cfe0:	f023 030f 	bic.w	r3, r3, #15
 810cfe4:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810cfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810cfe8:	085b      	lsrs	r3, r3, #1
 810cfea:	b29b      	uxth	r3, r3
 810cfec:	f003 0307 	and.w	r3, r3, #7
 810cff0:	b29a      	uxth	r2, r3
 810cff2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810cff4:	4313      	orrs	r3, r2
 810cff6:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810cff8:	697b      	ldr	r3, [r7, #20]
 810cffa:	681b      	ldr	r3, [r3, #0]
 810cffc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810cffe:	60da      	str	r2, [r3, #12]
 810d000:	e0ba      	b.n	810d178 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 810d002:	2301      	movs	r3, #1
 810d004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810d008:	e0b6      	b.n	810d178 <UART_SetConfig+0xa98>
 810d00a:	bf00      	nop
 810d00c:	03d09000 	.word	0x03d09000
 810d010:	003d0900 	.word	0x003d0900
 810d014:	0810e9b4 	.word	0x0810e9b4
 810d018:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810d01c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810d020:	2b20      	cmp	r3, #32
 810d022:	dc49      	bgt.n	810d0b8 <UART_SetConfig+0x9d8>
 810d024:	2b00      	cmp	r3, #0
 810d026:	db7c      	blt.n	810d122 <UART_SetConfig+0xa42>
 810d028:	2b20      	cmp	r3, #32
 810d02a:	d87a      	bhi.n	810d122 <UART_SetConfig+0xa42>
 810d02c:	a201      	add	r2, pc, #4	; (adr r2, 810d034 <UART_SetConfig+0x954>)
 810d02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d032:	bf00      	nop
 810d034:	0810d0bf 	.word	0x0810d0bf
 810d038:	0810d0c7 	.word	0x0810d0c7
 810d03c:	0810d123 	.word	0x0810d123
 810d040:	0810d123 	.word	0x0810d123
 810d044:	0810d0cf 	.word	0x0810d0cf
 810d048:	0810d123 	.word	0x0810d123
 810d04c:	0810d123 	.word	0x0810d123
 810d050:	0810d123 	.word	0x0810d123
 810d054:	0810d0df 	.word	0x0810d0df
 810d058:	0810d123 	.word	0x0810d123
 810d05c:	0810d123 	.word	0x0810d123
 810d060:	0810d123 	.word	0x0810d123
 810d064:	0810d123 	.word	0x0810d123
 810d068:	0810d123 	.word	0x0810d123
 810d06c:	0810d123 	.word	0x0810d123
 810d070:	0810d123 	.word	0x0810d123
 810d074:	0810d0ef 	.word	0x0810d0ef
 810d078:	0810d123 	.word	0x0810d123
 810d07c:	0810d123 	.word	0x0810d123
 810d080:	0810d123 	.word	0x0810d123
 810d084:	0810d123 	.word	0x0810d123
 810d088:	0810d123 	.word	0x0810d123
 810d08c:	0810d123 	.word	0x0810d123
 810d090:	0810d123 	.word	0x0810d123
 810d094:	0810d123 	.word	0x0810d123
 810d098:	0810d123 	.word	0x0810d123
 810d09c:	0810d123 	.word	0x0810d123
 810d0a0:	0810d123 	.word	0x0810d123
 810d0a4:	0810d123 	.word	0x0810d123
 810d0a8:	0810d123 	.word	0x0810d123
 810d0ac:	0810d123 	.word	0x0810d123
 810d0b0:	0810d123 	.word	0x0810d123
 810d0b4:	0810d115 	.word	0x0810d115
 810d0b8:	2b40      	cmp	r3, #64	; 0x40
 810d0ba:	d02e      	beq.n	810d11a <UART_SetConfig+0xa3a>
 810d0bc:	e031      	b.n	810d122 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810d0be:	f7fc f8ab 	bl	8109218 <HAL_RCC_GetPCLK1Freq>
 810d0c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810d0c4:	e033      	b.n	810d12e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810d0c6:	f7fc f8bd 	bl	8109244 <HAL_RCC_GetPCLK2Freq>
 810d0ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810d0cc:	e02f      	b.n	810d12e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810d0ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810d0d2:	4618      	mov	r0, r3
 810d0d4:	f7fd f828 	bl	810a128 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810d0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810d0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d0dc:	e027      	b.n	810d12e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810d0de:	f107 0318 	add.w	r3, r7, #24
 810d0e2:	4618      	mov	r0, r3
 810d0e4:	f7fd f974 	bl	810a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810d0e8:	69fb      	ldr	r3, [r7, #28]
 810d0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d0ec:	e01f      	b.n	810d12e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d0ee:	4b2d      	ldr	r3, [pc, #180]	; (810d1a4 <UART_SetConfig+0xac4>)
 810d0f0:	681b      	ldr	r3, [r3, #0]
 810d0f2:	f003 0320 	and.w	r3, r3, #32
 810d0f6:	2b00      	cmp	r3, #0
 810d0f8:	d009      	beq.n	810d10e <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810d0fa:	4b2a      	ldr	r3, [pc, #168]	; (810d1a4 <UART_SetConfig+0xac4>)
 810d0fc:	681b      	ldr	r3, [r3, #0]
 810d0fe:	08db      	lsrs	r3, r3, #3
 810d100:	f003 0303 	and.w	r3, r3, #3
 810d104:	4a28      	ldr	r2, [pc, #160]	; (810d1a8 <UART_SetConfig+0xac8>)
 810d106:	fa22 f303 	lsr.w	r3, r2, r3
 810d10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810d10c:	e00f      	b.n	810d12e <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 810d10e:	4b26      	ldr	r3, [pc, #152]	; (810d1a8 <UART_SetConfig+0xac8>)
 810d110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d112:	e00c      	b.n	810d12e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810d114:	4b25      	ldr	r3, [pc, #148]	; (810d1ac <UART_SetConfig+0xacc>)
 810d116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d118:	e009      	b.n	810d12e <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810d11a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810d11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810d120:	e005      	b.n	810d12e <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 810d122:	2300      	movs	r3, #0
 810d124:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810d126:	2301      	movs	r3, #1
 810d128:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810d12c:	bf00      	nop
    }

    if (pclk != 0U)
 810d12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d130:	2b00      	cmp	r3, #0
 810d132:	d021      	beq.n	810d178 <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810d134:	697b      	ldr	r3, [r7, #20]
 810d136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d138:	4a1d      	ldr	r2, [pc, #116]	; (810d1b0 <UART_SetConfig+0xad0>)
 810d13a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810d13e:	461a      	mov	r2, r3
 810d140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810d142:	fbb3 f2f2 	udiv	r2, r3, r2
 810d146:	697b      	ldr	r3, [r7, #20]
 810d148:	685b      	ldr	r3, [r3, #4]
 810d14a:	085b      	lsrs	r3, r3, #1
 810d14c:	441a      	add	r2, r3
 810d14e:	697b      	ldr	r3, [r7, #20]
 810d150:	685b      	ldr	r3, [r3, #4]
 810d152:	fbb2 f3f3 	udiv	r3, r2, r3
 810d156:	b29b      	uxth	r3, r3
 810d158:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d15c:	2b0f      	cmp	r3, #15
 810d15e:	d908      	bls.n	810d172 <UART_SetConfig+0xa92>
 810d160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810d162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810d166:	d204      	bcs.n	810d172 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 810d168:	697b      	ldr	r3, [r7, #20]
 810d16a:	681b      	ldr	r3, [r3, #0]
 810d16c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810d16e:	60da      	str	r2, [r3, #12]
 810d170:	e002      	b.n	810d178 <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 810d172:	2301      	movs	r3, #1
 810d174:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810d178:	697b      	ldr	r3, [r7, #20]
 810d17a:	2201      	movs	r2, #1
 810d17c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810d180:	697b      	ldr	r3, [r7, #20]
 810d182:	2201      	movs	r2, #1
 810d184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810d188:	697b      	ldr	r3, [r7, #20]
 810d18a:	2200      	movs	r2, #0
 810d18c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810d18e:	697b      	ldr	r3, [r7, #20]
 810d190:	2200      	movs	r2, #0
 810d192:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810d194:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810d198:	4618      	mov	r0, r3
 810d19a:	3748      	adds	r7, #72	; 0x48
 810d19c:	46bd      	mov	sp, r7
 810d19e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810d1a2:	bf00      	nop
 810d1a4:	58024400 	.word	0x58024400
 810d1a8:	03d09000 	.word	0x03d09000
 810d1ac:	003d0900 	.word	0x003d0900
 810d1b0:	0810e9b4 	.word	0x0810e9b4

0810d1b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810d1b4:	b480      	push	{r7}
 810d1b6:	b083      	sub	sp, #12
 810d1b8:	af00      	add	r7, sp, #0
 810d1ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810d1bc:	687b      	ldr	r3, [r7, #4]
 810d1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d1c0:	f003 0301 	and.w	r3, r3, #1
 810d1c4:	2b00      	cmp	r3, #0
 810d1c6:	d00a      	beq.n	810d1de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810d1c8:	687b      	ldr	r3, [r7, #4]
 810d1ca:	681b      	ldr	r3, [r3, #0]
 810d1cc:	685b      	ldr	r3, [r3, #4]
 810d1ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810d1d2:	687b      	ldr	r3, [r7, #4]
 810d1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810d1d6:	687b      	ldr	r3, [r7, #4]
 810d1d8:	681b      	ldr	r3, [r3, #0]
 810d1da:	430a      	orrs	r2, r1
 810d1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810d1de:	687b      	ldr	r3, [r7, #4]
 810d1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d1e2:	f003 0302 	and.w	r3, r3, #2
 810d1e6:	2b00      	cmp	r3, #0
 810d1e8:	d00a      	beq.n	810d200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810d1ea:	687b      	ldr	r3, [r7, #4]
 810d1ec:	681b      	ldr	r3, [r3, #0]
 810d1ee:	685b      	ldr	r3, [r3, #4]
 810d1f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810d1f4:	687b      	ldr	r3, [r7, #4]
 810d1f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810d1f8:	687b      	ldr	r3, [r7, #4]
 810d1fa:	681b      	ldr	r3, [r3, #0]
 810d1fc:	430a      	orrs	r2, r1
 810d1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810d200:	687b      	ldr	r3, [r7, #4]
 810d202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d204:	f003 0304 	and.w	r3, r3, #4
 810d208:	2b00      	cmp	r3, #0
 810d20a:	d00a      	beq.n	810d222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810d20c:	687b      	ldr	r3, [r7, #4]
 810d20e:	681b      	ldr	r3, [r3, #0]
 810d210:	685b      	ldr	r3, [r3, #4]
 810d212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810d216:	687b      	ldr	r3, [r7, #4]
 810d218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810d21a:	687b      	ldr	r3, [r7, #4]
 810d21c:	681b      	ldr	r3, [r3, #0]
 810d21e:	430a      	orrs	r2, r1
 810d220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810d222:	687b      	ldr	r3, [r7, #4]
 810d224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d226:	f003 0308 	and.w	r3, r3, #8
 810d22a:	2b00      	cmp	r3, #0
 810d22c:	d00a      	beq.n	810d244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810d22e:	687b      	ldr	r3, [r7, #4]
 810d230:	681b      	ldr	r3, [r3, #0]
 810d232:	685b      	ldr	r3, [r3, #4]
 810d234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810d238:	687b      	ldr	r3, [r7, #4]
 810d23a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810d23c:	687b      	ldr	r3, [r7, #4]
 810d23e:	681b      	ldr	r3, [r3, #0]
 810d240:	430a      	orrs	r2, r1
 810d242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810d244:	687b      	ldr	r3, [r7, #4]
 810d246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d248:	f003 0310 	and.w	r3, r3, #16
 810d24c:	2b00      	cmp	r3, #0
 810d24e:	d00a      	beq.n	810d266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810d250:	687b      	ldr	r3, [r7, #4]
 810d252:	681b      	ldr	r3, [r3, #0]
 810d254:	689b      	ldr	r3, [r3, #8]
 810d256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810d25a:	687b      	ldr	r3, [r7, #4]
 810d25c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810d25e:	687b      	ldr	r3, [r7, #4]
 810d260:	681b      	ldr	r3, [r3, #0]
 810d262:	430a      	orrs	r2, r1
 810d264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810d266:	687b      	ldr	r3, [r7, #4]
 810d268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d26a:	f003 0320 	and.w	r3, r3, #32
 810d26e:	2b00      	cmp	r3, #0
 810d270:	d00a      	beq.n	810d288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810d272:	687b      	ldr	r3, [r7, #4]
 810d274:	681b      	ldr	r3, [r3, #0]
 810d276:	689b      	ldr	r3, [r3, #8]
 810d278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810d27c:	687b      	ldr	r3, [r7, #4]
 810d27e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810d280:	687b      	ldr	r3, [r7, #4]
 810d282:	681b      	ldr	r3, [r3, #0]
 810d284:	430a      	orrs	r2, r1
 810d286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810d288:	687b      	ldr	r3, [r7, #4]
 810d28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d290:	2b00      	cmp	r3, #0
 810d292:	d01a      	beq.n	810d2ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810d294:	687b      	ldr	r3, [r7, #4]
 810d296:	681b      	ldr	r3, [r3, #0]
 810d298:	685b      	ldr	r3, [r3, #4]
 810d29a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810d29e:	687b      	ldr	r3, [r7, #4]
 810d2a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810d2a2:	687b      	ldr	r3, [r7, #4]
 810d2a4:	681b      	ldr	r3, [r3, #0]
 810d2a6:	430a      	orrs	r2, r1
 810d2a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810d2aa:	687b      	ldr	r3, [r7, #4]
 810d2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810d2ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810d2b2:	d10a      	bne.n	810d2ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810d2b4:	687b      	ldr	r3, [r7, #4]
 810d2b6:	681b      	ldr	r3, [r3, #0]
 810d2b8:	685b      	ldr	r3, [r3, #4]
 810d2ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810d2be:	687b      	ldr	r3, [r7, #4]
 810d2c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810d2c2:	687b      	ldr	r3, [r7, #4]
 810d2c4:	681b      	ldr	r3, [r3, #0]
 810d2c6:	430a      	orrs	r2, r1
 810d2c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810d2ca:	687b      	ldr	r3, [r7, #4]
 810d2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d2d2:	2b00      	cmp	r3, #0
 810d2d4:	d00a      	beq.n	810d2ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810d2d6:	687b      	ldr	r3, [r7, #4]
 810d2d8:	681b      	ldr	r3, [r3, #0]
 810d2da:	685b      	ldr	r3, [r3, #4]
 810d2dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810d2e0:	687b      	ldr	r3, [r7, #4]
 810d2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810d2e4:	687b      	ldr	r3, [r7, #4]
 810d2e6:	681b      	ldr	r3, [r3, #0]
 810d2e8:	430a      	orrs	r2, r1
 810d2ea:	605a      	str	r2, [r3, #4]
  }
}
 810d2ec:	bf00      	nop
 810d2ee:	370c      	adds	r7, #12
 810d2f0:	46bd      	mov	sp, r7
 810d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d2f6:	4770      	bx	lr

0810d2f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810d2f8:	b580      	push	{r7, lr}
 810d2fa:	b086      	sub	sp, #24
 810d2fc:	af02      	add	r7, sp, #8
 810d2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d300:	687b      	ldr	r3, [r7, #4]
 810d302:	2200      	movs	r2, #0
 810d304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810d308:	f7f5 fdda 	bl	8102ec0 <HAL_GetTick>
 810d30c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810d30e:	687b      	ldr	r3, [r7, #4]
 810d310:	681b      	ldr	r3, [r3, #0]
 810d312:	681b      	ldr	r3, [r3, #0]
 810d314:	f003 0308 	and.w	r3, r3, #8
 810d318:	2b08      	cmp	r3, #8
 810d31a:	d10e      	bne.n	810d33a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810d31c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810d320:	9300      	str	r3, [sp, #0]
 810d322:	68fb      	ldr	r3, [r7, #12]
 810d324:	2200      	movs	r2, #0
 810d326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810d32a:	6878      	ldr	r0, [r7, #4]
 810d32c:	f000 f82f 	bl	810d38e <UART_WaitOnFlagUntilTimeout>
 810d330:	4603      	mov	r3, r0
 810d332:	2b00      	cmp	r3, #0
 810d334:	d001      	beq.n	810d33a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810d336:	2303      	movs	r3, #3
 810d338:	e025      	b.n	810d386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810d33a:	687b      	ldr	r3, [r7, #4]
 810d33c:	681b      	ldr	r3, [r3, #0]
 810d33e:	681b      	ldr	r3, [r3, #0]
 810d340:	f003 0304 	and.w	r3, r3, #4
 810d344:	2b04      	cmp	r3, #4
 810d346:	d10e      	bne.n	810d366 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810d348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810d34c:	9300      	str	r3, [sp, #0]
 810d34e:	68fb      	ldr	r3, [r7, #12]
 810d350:	2200      	movs	r2, #0
 810d352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810d356:	6878      	ldr	r0, [r7, #4]
 810d358:	f000 f819 	bl	810d38e <UART_WaitOnFlagUntilTimeout>
 810d35c:	4603      	mov	r3, r0
 810d35e:	2b00      	cmp	r3, #0
 810d360:	d001      	beq.n	810d366 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810d362:	2303      	movs	r3, #3
 810d364:	e00f      	b.n	810d386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810d366:	687b      	ldr	r3, [r7, #4]
 810d368:	2220      	movs	r2, #32
 810d36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810d36e:	687b      	ldr	r3, [r7, #4]
 810d370:	2220      	movs	r2, #32
 810d372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d376:	687b      	ldr	r3, [r7, #4]
 810d378:	2200      	movs	r2, #0
 810d37a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810d37c:	687b      	ldr	r3, [r7, #4]
 810d37e:	2200      	movs	r2, #0
 810d380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d384:	2300      	movs	r3, #0
}
 810d386:	4618      	mov	r0, r3
 810d388:	3710      	adds	r7, #16
 810d38a:	46bd      	mov	sp, r7
 810d38c:	bd80      	pop	{r7, pc}

0810d38e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810d38e:	b580      	push	{r7, lr}
 810d390:	b084      	sub	sp, #16
 810d392:	af00      	add	r7, sp, #0
 810d394:	60f8      	str	r0, [r7, #12]
 810d396:	60b9      	str	r1, [r7, #8]
 810d398:	603b      	str	r3, [r7, #0]
 810d39a:	4613      	mov	r3, r2
 810d39c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810d39e:	e062      	b.n	810d466 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810d3a0:	69bb      	ldr	r3, [r7, #24]
 810d3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d3a6:	d05e      	beq.n	810d466 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810d3a8:	f7f5 fd8a 	bl	8102ec0 <HAL_GetTick>
 810d3ac:	4602      	mov	r2, r0
 810d3ae:	683b      	ldr	r3, [r7, #0]
 810d3b0:	1ad3      	subs	r3, r2, r3
 810d3b2:	69ba      	ldr	r2, [r7, #24]
 810d3b4:	429a      	cmp	r2, r3
 810d3b6:	d302      	bcc.n	810d3be <UART_WaitOnFlagUntilTimeout+0x30>
 810d3b8:	69bb      	ldr	r3, [r7, #24]
 810d3ba:	2b00      	cmp	r3, #0
 810d3bc:	d11d      	bne.n	810d3fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810d3be:	68fb      	ldr	r3, [r7, #12]
 810d3c0:	681b      	ldr	r3, [r3, #0]
 810d3c2:	681a      	ldr	r2, [r3, #0]
 810d3c4:	68fb      	ldr	r3, [r7, #12]
 810d3c6:	681b      	ldr	r3, [r3, #0]
 810d3c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810d3cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d3ce:	68fb      	ldr	r3, [r7, #12]
 810d3d0:	681b      	ldr	r3, [r3, #0]
 810d3d2:	689a      	ldr	r2, [r3, #8]
 810d3d4:	68fb      	ldr	r3, [r7, #12]
 810d3d6:	681b      	ldr	r3, [r3, #0]
 810d3d8:	f022 0201 	bic.w	r2, r2, #1
 810d3dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810d3de:	68fb      	ldr	r3, [r7, #12]
 810d3e0:	2220      	movs	r2, #32
 810d3e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810d3e6:	68fb      	ldr	r3, [r7, #12]
 810d3e8:	2220      	movs	r2, #32
 810d3ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810d3ee:	68fb      	ldr	r3, [r7, #12]
 810d3f0:	2200      	movs	r2, #0
 810d3f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810d3f6:	2303      	movs	r3, #3
 810d3f8:	e045      	b.n	810d486 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810d3fa:	68fb      	ldr	r3, [r7, #12]
 810d3fc:	681b      	ldr	r3, [r3, #0]
 810d3fe:	681b      	ldr	r3, [r3, #0]
 810d400:	f003 0304 	and.w	r3, r3, #4
 810d404:	2b00      	cmp	r3, #0
 810d406:	d02e      	beq.n	810d466 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810d408:	68fb      	ldr	r3, [r7, #12]
 810d40a:	681b      	ldr	r3, [r3, #0]
 810d40c:	69db      	ldr	r3, [r3, #28]
 810d40e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810d412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810d416:	d126      	bne.n	810d466 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810d418:	68fb      	ldr	r3, [r7, #12]
 810d41a:	681b      	ldr	r3, [r3, #0]
 810d41c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810d420:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810d422:	68fb      	ldr	r3, [r7, #12]
 810d424:	681b      	ldr	r3, [r3, #0]
 810d426:	681a      	ldr	r2, [r3, #0]
 810d428:	68fb      	ldr	r3, [r7, #12]
 810d42a:	681b      	ldr	r3, [r3, #0]
 810d42c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810d430:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d432:	68fb      	ldr	r3, [r7, #12]
 810d434:	681b      	ldr	r3, [r3, #0]
 810d436:	689a      	ldr	r2, [r3, #8]
 810d438:	68fb      	ldr	r3, [r7, #12]
 810d43a:	681b      	ldr	r3, [r3, #0]
 810d43c:	f022 0201 	bic.w	r2, r2, #1
 810d440:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810d442:	68fb      	ldr	r3, [r7, #12]
 810d444:	2220      	movs	r2, #32
 810d446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810d44a:	68fb      	ldr	r3, [r7, #12]
 810d44c:	2220      	movs	r2, #32
 810d44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810d452:	68fb      	ldr	r3, [r7, #12]
 810d454:	2220      	movs	r2, #32
 810d456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810d45a:	68fb      	ldr	r3, [r7, #12]
 810d45c:	2200      	movs	r2, #0
 810d45e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810d462:	2303      	movs	r3, #3
 810d464:	e00f      	b.n	810d486 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810d466:	68fb      	ldr	r3, [r7, #12]
 810d468:	681b      	ldr	r3, [r3, #0]
 810d46a:	69da      	ldr	r2, [r3, #28]
 810d46c:	68bb      	ldr	r3, [r7, #8]
 810d46e:	4013      	ands	r3, r2
 810d470:	68ba      	ldr	r2, [r7, #8]
 810d472:	429a      	cmp	r2, r3
 810d474:	bf0c      	ite	eq
 810d476:	2301      	moveq	r3, #1
 810d478:	2300      	movne	r3, #0
 810d47a:	b2db      	uxtb	r3, r3
 810d47c:	461a      	mov	r2, r3
 810d47e:	79fb      	ldrb	r3, [r7, #7]
 810d480:	429a      	cmp	r2, r3
 810d482:	d08d      	beq.n	810d3a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810d484:	2300      	movs	r3, #0
}
 810d486:	4618      	mov	r0, r3
 810d488:	3710      	adds	r7, #16
 810d48a:	46bd      	mov	sp, r7
 810d48c:	bd80      	pop	{r7, pc}
	...

0810d490 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810d490:	b580      	push	{r7, lr}
 810d492:	b084      	sub	sp, #16
 810d494:	af00      	add	r7, sp, #0
 810d496:	60f8      	str	r0, [r7, #12]
 810d498:	60b9      	str	r1, [r7, #8]
 810d49a:	4613      	mov	r3, r2
 810d49c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810d49e:	68fb      	ldr	r3, [r7, #12]
 810d4a0:	68ba      	ldr	r2, [r7, #8]
 810d4a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 810d4a4:	68fb      	ldr	r3, [r7, #12]
 810d4a6:	88fa      	ldrh	r2, [r7, #6]
 810d4a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810d4ac:	68fb      	ldr	r3, [r7, #12]
 810d4ae:	2200      	movs	r2, #0
 810d4b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810d4b4:	68fb      	ldr	r3, [r7, #12]
 810d4b6:	2222      	movs	r2, #34	; 0x22
 810d4b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 810d4bc:	68fb      	ldr	r3, [r7, #12]
 810d4be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4c0:	2b00      	cmp	r3, #0
 810d4c2:	d02c      	beq.n	810d51e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810d4c4:	68fb      	ldr	r3, [r7, #12]
 810d4c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4c8:	4a25      	ldr	r2, [pc, #148]	; (810d560 <UART_Start_Receive_DMA+0xd0>)
 810d4ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810d4cc:	68fb      	ldr	r3, [r7, #12]
 810d4ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4d0:	4a24      	ldr	r2, [pc, #144]	; (810d564 <UART_Start_Receive_DMA+0xd4>)
 810d4d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810d4d4:	68fb      	ldr	r3, [r7, #12]
 810d4d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4d8:	4a23      	ldr	r2, [pc, #140]	; (810d568 <UART_Start_Receive_DMA+0xd8>)
 810d4da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810d4dc:	68fb      	ldr	r3, [r7, #12]
 810d4de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810d4e0:	2200      	movs	r2, #0
 810d4e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810d4e4:	68fb      	ldr	r3, [r7, #12]
 810d4e6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 810d4e8:	68fb      	ldr	r3, [r7, #12]
 810d4ea:	681b      	ldr	r3, [r3, #0]
 810d4ec:	3324      	adds	r3, #36	; 0x24
 810d4ee:	4619      	mov	r1, r3
 810d4f0:	68fb      	ldr	r3, [r7, #12]
 810d4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810d4f4:	461a      	mov	r2, r3
 810d4f6:	88fb      	ldrh	r3, [r7, #6]
 810d4f8:	f7f6 fc82 	bl	8103e00 <HAL_DMA_Start_IT>
 810d4fc:	4603      	mov	r3, r0
 810d4fe:	2b00      	cmp	r3, #0
 810d500:	d00d      	beq.n	810d51e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810d502:	68fb      	ldr	r3, [r7, #12]
 810d504:	2210      	movs	r2, #16
 810d506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810d50a:	68fb      	ldr	r3, [r7, #12]
 810d50c:	2200      	movs	r2, #0
 810d50e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 810d512:	68fb      	ldr	r3, [r7, #12]
 810d514:	2220      	movs	r2, #32
 810d516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 810d51a:	2301      	movs	r3, #1
 810d51c:	e01c      	b.n	810d558 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 810d51e:	68fb      	ldr	r3, [r7, #12]
 810d520:	2200      	movs	r2, #0
 810d522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810d526:	68fb      	ldr	r3, [r7, #12]
 810d528:	681b      	ldr	r3, [r3, #0]
 810d52a:	681a      	ldr	r2, [r3, #0]
 810d52c:	68fb      	ldr	r3, [r7, #12]
 810d52e:	681b      	ldr	r3, [r3, #0]
 810d530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810d534:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d536:	68fb      	ldr	r3, [r7, #12]
 810d538:	681b      	ldr	r3, [r3, #0]
 810d53a:	689a      	ldr	r2, [r3, #8]
 810d53c:	68fb      	ldr	r3, [r7, #12]
 810d53e:	681b      	ldr	r3, [r3, #0]
 810d540:	f042 0201 	orr.w	r2, r2, #1
 810d544:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810d546:	68fb      	ldr	r3, [r7, #12]
 810d548:	681b      	ldr	r3, [r3, #0]
 810d54a:	689a      	ldr	r2, [r3, #8]
 810d54c:	68fb      	ldr	r3, [r7, #12]
 810d54e:	681b      	ldr	r3, [r3, #0]
 810d550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810d554:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 810d556:	2300      	movs	r3, #0
}
 810d558:	4618      	mov	r0, r3
 810d55a:	3710      	adds	r7, #16
 810d55c:	46bd      	mov	sp, r7
 810d55e:	bd80      	pop	{r7, pc}
 810d560:	0810d679 	.word	0x0810d679
 810d564:	0810d70f 	.word	0x0810d70f
 810d568:	0810d747 	.word	0x0810d747

0810d56c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810d56c:	b480      	push	{r7}
 810d56e:	b083      	sub	sp, #12
 810d570:	af00      	add	r7, sp, #0
 810d572:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810d574:	687b      	ldr	r3, [r7, #4]
 810d576:	681b      	ldr	r3, [r3, #0]
 810d578:	681a      	ldr	r2, [r3, #0]
 810d57a:	687b      	ldr	r3, [r7, #4]
 810d57c:	681b      	ldr	r3, [r3, #0]
 810d57e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810d582:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810d584:	687b      	ldr	r3, [r7, #4]
 810d586:	681b      	ldr	r3, [r3, #0]
 810d588:	689a      	ldr	r2, [r3, #8]
 810d58a:	687b      	ldr	r3, [r7, #4]
 810d58c:	681b      	ldr	r3, [r3, #0]
 810d58e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810d592:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810d594:	687b      	ldr	r3, [r7, #4]
 810d596:	2220      	movs	r2, #32
 810d598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 810d59c:	bf00      	nop
 810d59e:	370c      	adds	r7, #12
 810d5a0:	46bd      	mov	sp, r7
 810d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5a6:	4770      	bx	lr

0810d5a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810d5a8:	b480      	push	{r7}
 810d5aa:	b083      	sub	sp, #12
 810d5ac:	af00      	add	r7, sp, #0
 810d5ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810d5b0:	687b      	ldr	r3, [r7, #4]
 810d5b2:	681b      	ldr	r3, [r3, #0]
 810d5b4:	681a      	ldr	r2, [r3, #0]
 810d5b6:	687b      	ldr	r3, [r7, #4]
 810d5b8:	681b      	ldr	r3, [r3, #0]
 810d5ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810d5be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810d5c0:	687b      	ldr	r3, [r7, #4]
 810d5c2:	681b      	ldr	r3, [r3, #0]
 810d5c4:	689b      	ldr	r3, [r3, #8]
 810d5c6:	687a      	ldr	r2, [r7, #4]
 810d5c8:	6812      	ldr	r2, [r2, #0]
 810d5ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810d5ce:	f023 0301 	bic.w	r3, r3, #1
 810d5d2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d5d4:	687b      	ldr	r3, [r7, #4]
 810d5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d5d8:	2b01      	cmp	r3, #1
 810d5da:	d107      	bne.n	810d5ec <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d5dc:	687b      	ldr	r3, [r7, #4]
 810d5de:	681b      	ldr	r3, [r3, #0]
 810d5e0:	681a      	ldr	r2, [r3, #0]
 810d5e2:	687b      	ldr	r3, [r7, #4]
 810d5e4:	681b      	ldr	r3, [r3, #0]
 810d5e6:	f022 0210 	bic.w	r2, r2, #16
 810d5ea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810d5ec:	687b      	ldr	r3, [r7, #4]
 810d5ee:	2220      	movs	r2, #32
 810d5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810d5f4:	687b      	ldr	r3, [r7, #4]
 810d5f6:	2200      	movs	r2, #0
 810d5f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810d5fa:	687b      	ldr	r3, [r7, #4]
 810d5fc:	2200      	movs	r2, #0
 810d5fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 810d600:	bf00      	nop
 810d602:	370c      	adds	r7, #12
 810d604:	46bd      	mov	sp, r7
 810d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d60a:	4770      	bx	lr

0810d60c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810d60c:	b580      	push	{r7, lr}
 810d60e:	b084      	sub	sp, #16
 810d610:	af00      	add	r7, sp, #0
 810d612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d614:	687b      	ldr	r3, [r7, #4]
 810d616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d618:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810d61a:	687b      	ldr	r3, [r7, #4]
 810d61c:	69db      	ldr	r3, [r3, #28]
 810d61e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d622:	d014      	beq.n	810d64e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810d624:	68fb      	ldr	r3, [r7, #12]
 810d626:	2200      	movs	r2, #0
 810d628:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810d62c:	68fb      	ldr	r3, [r7, #12]
 810d62e:	681b      	ldr	r3, [r3, #0]
 810d630:	689a      	ldr	r2, [r3, #8]
 810d632:	68fb      	ldr	r3, [r7, #12]
 810d634:	681b      	ldr	r3, [r3, #0]
 810d636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810d63a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810d63c:	68fb      	ldr	r3, [r7, #12]
 810d63e:	681b      	ldr	r3, [r3, #0]
 810d640:	681a      	ldr	r2, [r3, #0]
 810d642:	68fb      	ldr	r3, [r7, #12]
 810d644:	681b      	ldr	r3, [r3, #0]
 810d646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810d64a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810d64c:	e002      	b.n	810d654 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810d64e:	68f8      	ldr	r0, [r7, #12]
 810d650:	f7f5 fa42 	bl	8102ad8 <HAL_UART_TxCpltCallback>
}
 810d654:	bf00      	nop
 810d656:	3710      	adds	r7, #16
 810d658:	46bd      	mov	sp, r7
 810d65a:	bd80      	pop	{r7, pc}

0810d65c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810d65c:	b580      	push	{r7, lr}
 810d65e:	b084      	sub	sp, #16
 810d660:	af00      	add	r7, sp, #0
 810d662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d664:	687b      	ldr	r3, [r7, #4]
 810d666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d668:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810d66a:	68f8      	ldr	r0, [r7, #12]
 810d66c:	f7ff f80e 	bl	810c68c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d670:	bf00      	nop
 810d672:	3710      	adds	r7, #16
 810d674:	46bd      	mov	sp, r7
 810d676:	bd80      	pop	{r7, pc}

0810d678 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810d678:	b580      	push	{r7, lr}
 810d67a:	b084      	sub	sp, #16
 810d67c:	af00      	add	r7, sp, #0
 810d67e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d680:	687b      	ldr	r3, [r7, #4]
 810d682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d684:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810d686:	687b      	ldr	r3, [r7, #4]
 810d688:	69db      	ldr	r3, [r3, #28]
 810d68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810d68e:	d02b      	beq.n	810d6e8 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 810d690:	68fb      	ldr	r3, [r7, #12]
 810d692:	2200      	movs	r2, #0
 810d694:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810d698:	68fb      	ldr	r3, [r7, #12]
 810d69a:	681b      	ldr	r3, [r3, #0]
 810d69c:	681a      	ldr	r2, [r3, #0]
 810d69e:	68fb      	ldr	r3, [r7, #12]
 810d6a0:	681b      	ldr	r3, [r3, #0]
 810d6a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810d6a6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810d6a8:	68fb      	ldr	r3, [r7, #12]
 810d6aa:	681b      	ldr	r3, [r3, #0]
 810d6ac:	689a      	ldr	r2, [r3, #8]
 810d6ae:	68fb      	ldr	r3, [r7, #12]
 810d6b0:	681b      	ldr	r3, [r3, #0]
 810d6b2:	f022 0201 	bic.w	r2, r2, #1
 810d6b6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810d6b8:	68fb      	ldr	r3, [r7, #12]
 810d6ba:	681b      	ldr	r3, [r3, #0]
 810d6bc:	689a      	ldr	r2, [r3, #8]
 810d6be:	68fb      	ldr	r3, [r7, #12]
 810d6c0:	681b      	ldr	r3, [r3, #0]
 810d6c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810d6c6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810d6c8:	68fb      	ldr	r3, [r7, #12]
 810d6ca:	2220      	movs	r2, #32
 810d6cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d6d0:	68fb      	ldr	r3, [r7, #12]
 810d6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d6d4:	2b01      	cmp	r3, #1
 810d6d6:	d107      	bne.n	810d6e8 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810d6d8:	68fb      	ldr	r3, [r7, #12]
 810d6da:	681b      	ldr	r3, [r3, #0]
 810d6dc:	681a      	ldr	r2, [r3, #0]
 810d6de:	68fb      	ldr	r3, [r7, #12]
 810d6e0:	681b      	ldr	r3, [r3, #0]
 810d6e2:	f022 0210 	bic.w	r2, r2, #16
 810d6e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d6e8:	68fb      	ldr	r3, [r7, #12]
 810d6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d6ec:	2b01      	cmp	r3, #1
 810d6ee:	d107      	bne.n	810d700 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810d6f0:	68fb      	ldr	r3, [r7, #12]
 810d6f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810d6f6:	4619      	mov	r1, r3
 810d6f8:	68f8      	ldr	r0, [r7, #12]
 810d6fa:	f7fe ffe5 	bl	810c6c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810d6fe:	e002      	b.n	810d706 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 810d700:	68f8      	ldr	r0, [r7, #12]
 810d702:	f7f5 f99b 	bl	8102a3c <HAL_UART_RxCpltCallback>
}
 810d706:	bf00      	nop
 810d708:	3710      	adds	r7, #16
 810d70a:	46bd      	mov	sp, r7
 810d70c:	bd80      	pop	{r7, pc}

0810d70e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810d70e:	b580      	push	{r7, lr}
 810d710:	b084      	sub	sp, #16
 810d712:	af00      	add	r7, sp, #0
 810d714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d716:	687b      	ldr	r3, [r7, #4]
 810d718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d71a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810d71c:	68fb      	ldr	r3, [r7, #12]
 810d71e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d720:	2b01      	cmp	r3, #1
 810d722:	d109      	bne.n	810d738 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810d724:	68fb      	ldr	r3, [r7, #12]
 810d726:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810d72a:	085b      	lsrs	r3, r3, #1
 810d72c:	b29b      	uxth	r3, r3
 810d72e:	4619      	mov	r1, r3
 810d730:	68f8      	ldr	r0, [r7, #12]
 810d732:	f7fe ffc9 	bl	810c6c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810d736:	e002      	b.n	810d73e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 810d738:	68f8      	ldr	r0, [r7, #12]
 810d73a:	f7fe ffb1 	bl	810c6a0 <HAL_UART_RxHalfCpltCallback>
}
 810d73e:	bf00      	nop
 810d740:	3710      	adds	r7, #16
 810d742:	46bd      	mov	sp, r7
 810d744:	bd80      	pop	{r7, pc}

0810d746 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810d746:	b580      	push	{r7, lr}
 810d748:	b086      	sub	sp, #24
 810d74a:	af00      	add	r7, sp, #0
 810d74c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d74e:	687b      	ldr	r3, [r7, #4]
 810d750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d752:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810d754:	697b      	ldr	r3, [r7, #20]
 810d756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810d75a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810d75c:	697b      	ldr	r3, [r7, #20]
 810d75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810d762:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810d764:	697b      	ldr	r3, [r7, #20]
 810d766:	681b      	ldr	r3, [r3, #0]
 810d768:	689b      	ldr	r3, [r3, #8]
 810d76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d76e:	2b80      	cmp	r3, #128	; 0x80
 810d770:	d109      	bne.n	810d786 <UART_DMAError+0x40>
 810d772:	693b      	ldr	r3, [r7, #16]
 810d774:	2b21      	cmp	r3, #33	; 0x21
 810d776:	d106      	bne.n	810d786 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810d778:	697b      	ldr	r3, [r7, #20]
 810d77a:	2200      	movs	r2, #0
 810d77c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810d780:	6978      	ldr	r0, [r7, #20]
 810d782:	f7ff fef3 	bl	810d56c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810d786:	697b      	ldr	r3, [r7, #20]
 810d788:	681b      	ldr	r3, [r3, #0]
 810d78a:	689b      	ldr	r3, [r3, #8]
 810d78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d790:	2b40      	cmp	r3, #64	; 0x40
 810d792:	d109      	bne.n	810d7a8 <UART_DMAError+0x62>
 810d794:	68fb      	ldr	r3, [r7, #12]
 810d796:	2b22      	cmp	r3, #34	; 0x22
 810d798:	d106      	bne.n	810d7a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810d79a:	697b      	ldr	r3, [r7, #20]
 810d79c:	2200      	movs	r2, #0
 810d79e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810d7a2:	6978      	ldr	r0, [r7, #20]
 810d7a4:	f7ff ff00 	bl	810d5a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810d7a8:	697b      	ldr	r3, [r7, #20]
 810d7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810d7ae:	f043 0210 	orr.w	r2, r3, #16
 810d7b2:	697b      	ldr	r3, [r7, #20]
 810d7b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810d7b8:	6978      	ldr	r0, [r7, #20]
 810d7ba:	f7fe ff7b 	bl	810c6b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d7be:	bf00      	nop
 810d7c0:	3718      	adds	r7, #24
 810d7c2:	46bd      	mov	sp, r7
 810d7c4:	bd80      	pop	{r7, pc}

0810d7c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810d7c6:	b580      	push	{r7, lr}
 810d7c8:	b084      	sub	sp, #16
 810d7ca:	af00      	add	r7, sp, #0
 810d7cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810d7ce:	687b      	ldr	r3, [r7, #4]
 810d7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d7d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810d7d4:	68fb      	ldr	r3, [r7, #12]
 810d7d6:	2200      	movs	r2, #0
 810d7d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810d7dc:	68fb      	ldr	r3, [r7, #12]
 810d7de:	2200      	movs	r2, #0
 810d7e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810d7e4:	68f8      	ldr	r0, [r7, #12]
 810d7e6:	f7fe ff65 	bl	810c6b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d7ea:	bf00      	nop
 810d7ec:	3710      	adds	r7, #16
 810d7ee:	46bd      	mov	sp, r7
 810d7f0:	bd80      	pop	{r7, pc}

0810d7f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810d7f2:	b580      	push	{r7, lr}
 810d7f4:	b082      	sub	sp, #8
 810d7f6:	af00      	add	r7, sp, #0
 810d7f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810d7fa:	687b      	ldr	r3, [r7, #4]
 810d7fc:	681b      	ldr	r3, [r3, #0]
 810d7fe:	681a      	ldr	r2, [r3, #0]
 810d800:	687b      	ldr	r3, [r7, #4]
 810d802:	681b      	ldr	r3, [r3, #0]
 810d804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810d808:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810d80a:	687b      	ldr	r3, [r7, #4]
 810d80c:	2220      	movs	r2, #32
 810d80e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810d812:	687b      	ldr	r3, [r7, #4]
 810d814:	2200      	movs	r2, #0
 810d816:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810d818:	6878      	ldr	r0, [r7, #4]
 810d81a:	f7f5 f95d 	bl	8102ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810d81e:	bf00      	nop
 810d820:	3708      	adds	r7, #8
 810d822:	46bd      	mov	sp, r7
 810d824:	bd80      	pop	{r7, pc}

0810d826 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810d826:	b480      	push	{r7}
 810d828:	b083      	sub	sp, #12
 810d82a:	af00      	add	r7, sp, #0
 810d82c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810d82e:	bf00      	nop
 810d830:	370c      	adds	r7, #12
 810d832:	46bd      	mov	sp, r7
 810d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d838:	4770      	bx	lr

0810d83a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810d83a:	b480      	push	{r7}
 810d83c:	b083      	sub	sp, #12
 810d83e:	af00      	add	r7, sp, #0
 810d840:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810d842:	bf00      	nop
 810d844:	370c      	adds	r7, #12
 810d846:	46bd      	mov	sp, r7
 810d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d84c:	4770      	bx	lr

0810d84e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810d84e:	b480      	push	{r7}
 810d850:	b083      	sub	sp, #12
 810d852:	af00      	add	r7, sp, #0
 810d854:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810d856:	bf00      	nop
 810d858:	370c      	adds	r7, #12
 810d85a:	46bd      	mov	sp, r7
 810d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d860:	4770      	bx	lr

0810d862 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810d862:	b480      	push	{r7}
 810d864:	b085      	sub	sp, #20
 810d866:	af00      	add	r7, sp, #0
 810d868:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810d86a:	687b      	ldr	r3, [r7, #4]
 810d86c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d870:	2b01      	cmp	r3, #1
 810d872:	d101      	bne.n	810d878 <HAL_UARTEx_DisableFifoMode+0x16>
 810d874:	2302      	movs	r3, #2
 810d876:	e027      	b.n	810d8c8 <HAL_UARTEx_DisableFifoMode+0x66>
 810d878:	687b      	ldr	r3, [r7, #4]
 810d87a:	2201      	movs	r2, #1
 810d87c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810d880:	687b      	ldr	r3, [r7, #4]
 810d882:	2224      	movs	r2, #36	; 0x24
 810d884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810d888:	687b      	ldr	r3, [r7, #4]
 810d88a:	681b      	ldr	r3, [r3, #0]
 810d88c:	681b      	ldr	r3, [r3, #0]
 810d88e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810d890:	687b      	ldr	r3, [r7, #4]
 810d892:	681b      	ldr	r3, [r3, #0]
 810d894:	681a      	ldr	r2, [r3, #0]
 810d896:	687b      	ldr	r3, [r7, #4]
 810d898:	681b      	ldr	r3, [r3, #0]
 810d89a:	f022 0201 	bic.w	r2, r2, #1
 810d89e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810d8a0:	68fb      	ldr	r3, [r7, #12]
 810d8a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810d8a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810d8a8:	687b      	ldr	r3, [r7, #4]
 810d8aa:	2200      	movs	r2, #0
 810d8ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810d8ae:	687b      	ldr	r3, [r7, #4]
 810d8b0:	681b      	ldr	r3, [r3, #0]
 810d8b2:	68fa      	ldr	r2, [r7, #12]
 810d8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810d8b6:	687b      	ldr	r3, [r7, #4]
 810d8b8:	2220      	movs	r2, #32
 810d8ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810d8be:	687b      	ldr	r3, [r7, #4]
 810d8c0:	2200      	movs	r2, #0
 810d8c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d8c6:	2300      	movs	r3, #0
}
 810d8c8:	4618      	mov	r0, r3
 810d8ca:	3714      	adds	r7, #20
 810d8cc:	46bd      	mov	sp, r7
 810d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d8d2:	4770      	bx	lr

0810d8d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810d8d4:	b580      	push	{r7, lr}
 810d8d6:	b084      	sub	sp, #16
 810d8d8:	af00      	add	r7, sp, #0
 810d8da:	6078      	str	r0, [r7, #4]
 810d8dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810d8de:	687b      	ldr	r3, [r7, #4]
 810d8e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d8e4:	2b01      	cmp	r3, #1
 810d8e6:	d101      	bne.n	810d8ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810d8e8:	2302      	movs	r3, #2
 810d8ea:	e02d      	b.n	810d948 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810d8ec:	687b      	ldr	r3, [r7, #4]
 810d8ee:	2201      	movs	r2, #1
 810d8f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810d8f4:	687b      	ldr	r3, [r7, #4]
 810d8f6:	2224      	movs	r2, #36	; 0x24
 810d8f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810d8fc:	687b      	ldr	r3, [r7, #4]
 810d8fe:	681b      	ldr	r3, [r3, #0]
 810d900:	681b      	ldr	r3, [r3, #0]
 810d902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810d904:	687b      	ldr	r3, [r7, #4]
 810d906:	681b      	ldr	r3, [r3, #0]
 810d908:	681a      	ldr	r2, [r3, #0]
 810d90a:	687b      	ldr	r3, [r7, #4]
 810d90c:	681b      	ldr	r3, [r3, #0]
 810d90e:	f022 0201 	bic.w	r2, r2, #1
 810d912:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810d914:	687b      	ldr	r3, [r7, #4]
 810d916:	681b      	ldr	r3, [r3, #0]
 810d918:	689b      	ldr	r3, [r3, #8]
 810d91a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810d91e:	687b      	ldr	r3, [r7, #4]
 810d920:	681b      	ldr	r3, [r3, #0]
 810d922:	683a      	ldr	r2, [r7, #0]
 810d924:	430a      	orrs	r2, r1
 810d926:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810d928:	6878      	ldr	r0, [r7, #4]
 810d92a:	f000 f84f 	bl	810d9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810d92e:	687b      	ldr	r3, [r7, #4]
 810d930:	681b      	ldr	r3, [r3, #0]
 810d932:	68fa      	ldr	r2, [r7, #12]
 810d934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810d936:	687b      	ldr	r3, [r7, #4]
 810d938:	2220      	movs	r2, #32
 810d93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810d93e:	687b      	ldr	r3, [r7, #4]
 810d940:	2200      	movs	r2, #0
 810d942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d946:	2300      	movs	r3, #0
}
 810d948:	4618      	mov	r0, r3
 810d94a:	3710      	adds	r7, #16
 810d94c:	46bd      	mov	sp, r7
 810d94e:	bd80      	pop	{r7, pc}

0810d950 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810d950:	b580      	push	{r7, lr}
 810d952:	b084      	sub	sp, #16
 810d954:	af00      	add	r7, sp, #0
 810d956:	6078      	str	r0, [r7, #4]
 810d958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810d95a:	687b      	ldr	r3, [r7, #4]
 810d95c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810d960:	2b01      	cmp	r3, #1
 810d962:	d101      	bne.n	810d968 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810d964:	2302      	movs	r3, #2
 810d966:	e02d      	b.n	810d9c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810d968:	687b      	ldr	r3, [r7, #4]
 810d96a:	2201      	movs	r2, #1
 810d96c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810d970:	687b      	ldr	r3, [r7, #4]
 810d972:	2224      	movs	r2, #36	; 0x24
 810d974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810d978:	687b      	ldr	r3, [r7, #4]
 810d97a:	681b      	ldr	r3, [r3, #0]
 810d97c:	681b      	ldr	r3, [r3, #0]
 810d97e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810d980:	687b      	ldr	r3, [r7, #4]
 810d982:	681b      	ldr	r3, [r3, #0]
 810d984:	681a      	ldr	r2, [r3, #0]
 810d986:	687b      	ldr	r3, [r7, #4]
 810d988:	681b      	ldr	r3, [r3, #0]
 810d98a:	f022 0201 	bic.w	r2, r2, #1
 810d98e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810d990:	687b      	ldr	r3, [r7, #4]
 810d992:	681b      	ldr	r3, [r3, #0]
 810d994:	689b      	ldr	r3, [r3, #8]
 810d996:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810d99a:	687b      	ldr	r3, [r7, #4]
 810d99c:	681b      	ldr	r3, [r3, #0]
 810d99e:	683a      	ldr	r2, [r7, #0]
 810d9a0:	430a      	orrs	r2, r1
 810d9a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810d9a4:	6878      	ldr	r0, [r7, #4]
 810d9a6:	f000 f811 	bl	810d9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810d9aa:	687b      	ldr	r3, [r7, #4]
 810d9ac:	681b      	ldr	r3, [r3, #0]
 810d9ae:	68fa      	ldr	r2, [r7, #12]
 810d9b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810d9b2:	687b      	ldr	r3, [r7, #4]
 810d9b4:	2220      	movs	r2, #32
 810d9b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810d9ba:	687b      	ldr	r3, [r7, #4]
 810d9bc:	2200      	movs	r2, #0
 810d9be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810d9c2:	2300      	movs	r3, #0
}
 810d9c4:	4618      	mov	r0, r3
 810d9c6:	3710      	adds	r7, #16
 810d9c8:	46bd      	mov	sp, r7
 810d9ca:	bd80      	pop	{r7, pc}

0810d9cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810d9cc:	b480      	push	{r7}
 810d9ce:	b085      	sub	sp, #20
 810d9d0:	af00      	add	r7, sp, #0
 810d9d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810d9d4:	687b      	ldr	r3, [r7, #4]
 810d9d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d9d8:	2b00      	cmp	r3, #0
 810d9da:	d108      	bne.n	810d9ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810d9dc:	687b      	ldr	r3, [r7, #4]
 810d9de:	2201      	movs	r2, #1
 810d9e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810d9e4:	687b      	ldr	r3, [r7, #4]
 810d9e6:	2201      	movs	r2, #1
 810d9e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810d9ec:	e031      	b.n	810da52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810d9ee:	2310      	movs	r3, #16
 810d9f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810d9f2:	2310      	movs	r3, #16
 810d9f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810d9f6:	687b      	ldr	r3, [r7, #4]
 810d9f8:	681b      	ldr	r3, [r3, #0]
 810d9fa:	689b      	ldr	r3, [r3, #8]
 810d9fc:	0e5b      	lsrs	r3, r3, #25
 810d9fe:	b2db      	uxtb	r3, r3
 810da00:	f003 0307 	and.w	r3, r3, #7
 810da04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810da06:	687b      	ldr	r3, [r7, #4]
 810da08:	681b      	ldr	r3, [r3, #0]
 810da0a:	689b      	ldr	r3, [r3, #8]
 810da0c:	0f5b      	lsrs	r3, r3, #29
 810da0e:	b2db      	uxtb	r3, r3
 810da10:	f003 0307 	and.w	r3, r3, #7
 810da14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810da16:	7bbb      	ldrb	r3, [r7, #14]
 810da18:	7b3a      	ldrb	r2, [r7, #12]
 810da1a:	4911      	ldr	r1, [pc, #68]	; (810da60 <UARTEx_SetNbDataToProcess+0x94>)
 810da1c:	5c8a      	ldrb	r2, [r1, r2]
 810da1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810da22:	7b3a      	ldrb	r2, [r7, #12]
 810da24:	490f      	ldr	r1, [pc, #60]	; (810da64 <UARTEx_SetNbDataToProcess+0x98>)
 810da26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810da28:	fb93 f3f2 	sdiv	r3, r3, r2
 810da2c:	b29a      	uxth	r2, r3
 810da2e:	687b      	ldr	r3, [r7, #4]
 810da30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810da34:	7bfb      	ldrb	r3, [r7, #15]
 810da36:	7b7a      	ldrb	r2, [r7, #13]
 810da38:	4909      	ldr	r1, [pc, #36]	; (810da60 <UARTEx_SetNbDataToProcess+0x94>)
 810da3a:	5c8a      	ldrb	r2, [r1, r2]
 810da3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810da40:	7b7a      	ldrb	r2, [r7, #13]
 810da42:	4908      	ldr	r1, [pc, #32]	; (810da64 <UARTEx_SetNbDataToProcess+0x98>)
 810da44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810da46:	fb93 f3f2 	sdiv	r3, r3, r2
 810da4a:	b29a      	uxth	r2, r3
 810da4c:	687b      	ldr	r3, [r7, #4]
 810da4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810da52:	bf00      	nop
 810da54:	3714      	adds	r7, #20
 810da56:	46bd      	mov	sp, r7
 810da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 810da5c:	4770      	bx	lr
 810da5e:	bf00      	nop
 810da60:	0810e9cc 	.word	0x0810e9cc
 810da64:	0810e9d4 	.word	0x0810e9d4

0810da68 <pow>:
 810da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810da6a:	ed2d 8b02 	vpush	{d8}
 810da6e:	eeb0 8a40 	vmov.f32	s16, s0
 810da72:	eef0 8a60 	vmov.f32	s17, s1
 810da76:	ec55 4b11 	vmov	r4, r5, d1
 810da7a:	f000 f865 	bl	810db48 <__ieee754_pow>
 810da7e:	4622      	mov	r2, r4
 810da80:	462b      	mov	r3, r5
 810da82:	4620      	mov	r0, r4
 810da84:	4629      	mov	r1, r5
 810da86:	ec57 6b10 	vmov	r6, r7, d0
 810da8a:	f7f3 f87b 	bl	8100b84 <__aeabi_dcmpun>
 810da8e:	2800      	cmp	r0, #0
 810da90:	d13b      	bne.n	810db0a <pow+0xa2>
 810da92:	ec51 0b18 	vmov	r0, r1, d8
 810da96:	2200      	movs	r2, #0
 810da98:	2300      	movs	r3, #0
 810da9a:	f7f3 f841 	bl	8100b20 <__aeabi_dcmpeq>
 810da9e:	b1b8      	cbz	r0, 810dad0 <pow+0x68>
 810daa0:	2200      	movs	r2, #0
 810daa2:	2300      	movs	r3, #0
 810daa4:	4620      	mov	r0, r4
 810daa6:	4629      	mov	r1, r5
 810daa8:	f7f3 f83a 	bl	8100b20 <__aeabi_dcmpeq>
 810daac:	2800      	cmp	r0, #0
 810daae:	d146      	bne.n	810db3e <pow+0xd6>
 810dab0:	ec45 4b10 	vmov	d0, r4, r5
 810dab4:	f000 fe61 	bl	810e77a <finite>
 810dab8:	b338      	cbz	r0, 810db0a <pow+0xa2>
 810daba:	2200      	movs	r2, #0
 810dabc:	2300      	movs	r3, #0
 810dabe:	4620      	mov	r0, r4
 810dac0:	4629      	mov	r1, r5
 810dac2:	f7f3 f837 	bl	8100b34 <__aeabi_dcmplt>
 810dac6:	b300      	cbz	r0, 810db0a <pow+0xa2>
 810dac8:	f000 fee8 	bl	810e89c <__errno>
 810dacc:	2322      	movs	r3, #34	; 0x22
 810dace:	e01b      	b.n	810db08 <pow+0xa0>
 810dad0:	ec47 6b10 	vmov	d0, r6, r7
 810dad4:	f000 fe51 	bl	810e77a <finite>
 810dad8:	b9e0      	cbnz	r0, 810db14 <pow+0xac>
 810dada:	eeb0 0a48 	vmov.f32	s0, s16
 810dade:	eef0 0a68 	vmov.f32	s1, s17
 810dae2:	f000 fe4a 	bl	810e77a <finite>
 810dae6:	b1a8      	cbz	r0, 810db14 <pow+0xac>
 810dae8:	ec45 4b10 	vmov	d0, r4, r5
 810daec:	f000 fe45 	bl	810e77a <finite>
 810daf0:	b180      	cbz	r0, 810db14 <pow+0xac>
 810daf2:	4632      	mov	r2, r6
 810daf4:	463b      	mov	r3, r7
 810daf6:	4630      	mov	r0, r6
 810daf8:	4639      	mov	r1, r7
 810dafa:	f7f3 f843 	bl	8100b84 <__aeabi_dcmpun>
 810dafe:	2800      	cmp	r0, #0
 810db00:	d0e2      	beq.n	810dac8 <pow+0x60>
 810db02:	f000 fecb 	bl	810e89c <__errno>
 810db06:	2321      	movs	r3, #33	; 0x21
 810db08:	6003      	str	r3, [r0, #0]
 810db0a:	ecbd 8b02 	vpop	{d8}
 810db0e:	ec47 6b10 	vmov	d0, r6, r7
 810db12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810db14:	2200      	movs	r2, #0
 810db16:	2300      	movs	r3, #0
 810db18:	4630      	mov	r0, r6
 810db1a:	4639      	mov	r1, r7
 810db1c:	f7f3 f800 	bl	8100b20 <__aeabi_dcmpeq>
 810db20:	2800      	cmp	r0, #0
 810db22:	d0f2      	beq.n	810db0a <pow+0xa2>
 810db24:	eeb0 0a48 	vmov.f32	s0, s16
 810db28:	eef0 0a68 	vmov.f32	s1, s17
 810db2c:	f000 fe25 	bl	810e77a <finite>
 810db30:	2800      	cmp	r0, #0
 810db32:	d0ea      	beq.n	810db0a <pow+0xa2>
 810db34:	ec45 4b10 	vmov	d0, r4, r5
 810db38:	f000 fe1f 	bl	810e77a <finite>
 810db3c:	e7c3      	b.n	810dac6 <pow+0x5e>
 810db3e:	4f01      	ldr	r7, [pc, #4]	; (810db44 <pow+0xdc>)
 810db40:	2600      	movs	r6, #0
 810db42:	e7e2      	b.n	810db0a <pow+0xa2>
 810db44:	3ff00000 	.word	0x3ff00000

0810db48 <__ieee754_pow>:
 810db48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810db4c:	ed2d 8b06 	vpush	{d8-d10}
 810db50:	b089      	sub	sp, #36	; 0x24
 810db52:	ed8d 1b00 	vstr	d1, [sp]
 810db56:	e9dd 2900 	ldrd	r2, r9, [sp]
 810db5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 810db5e:	ea58 0102 	orrs.w	r1, r8, r2
 810db62:	ec57 6b10 	vmov	r6, r7, d0
 810db66:	d115      	bne.n	810db94 <__ieee754_pow+0x4c>
 810db68:	19b3      	adds	r3, r6, r6
 810db6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 810db6e:	4152      	adcs	r2, r2
 810db70:	4299      	cmp	r1, r3
 810db72:	4b89      	ldr	r3, [pc, #548]	; (810dd98 <__ieee754_pow+0x250>)
 810db74:	4193      	sbcs	r3, r2
 810db76:	f080 84d2 	bcs.w	810e51e <__ieee754_pow+0x9d6>
 810db7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810db7e:	4630      	mov	r0, r6
 810db80:	4639      	mov	r1, r7
 810db82:	f7f2 fbaf 	bl	81002e4 <__adddf3>
 810db86:	ec41 0b10 	vmov	d0, r0, r1
 810db8a:	b009      	add	sp, #36	; 0x24
 810db8c:	ecbd 8b06 	vpop	{d8-d10}
 810db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810db94:	4b81      	ldr	r3, [pc, #516]	; (810dd9c <__ieee754_pow+0x254>)
 810db96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 810db9a:	429c      	cmp	r4, r3
 810db9c:	ee10 aa10 	vmov	sl, s0
 810dba0:	463d      	mov	r5, r7
 810dba2:	dc06      	bgt.n	810dbb2 <__ieee754_pow+0x6a>
 810dba4:	d101      	bne.n	810dbaa <__ieee754_pow+0x62>
 810dba6:	2e00      	cmp	r6, #0
 810dba8:	d1e7      	bne.n	810db7a <__ieee754_pow+0x32>
 810dbaa:	4598      	cmp	r8, r3
 810dbac:	dc01      	bgt.n	810dbb2 <__ieee754_pow+0x6a>
 810dbae:	d10f      	bne.n	810dbd0 <__ieee754_pow+0x88>
 810dbb0:	b172      	cbz	r2, 810dbd0 <__ieee754_pow+0x88>
 810dbb2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 810dbb6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 810dbba:	ea55 050a 	orrs.w	r5, r5, sl
 810dbbe:	d1dc      	bne.n	810db7a <__ieee754_pow+0x32>
 810dbc0:	e9dd 3200 	ldrd	r3, r2, [sp]
 810dbc4:	18db      	adds	r3, r3, r3
 810dbc6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 810dbca:	4152      	adcs	r2, r2
 810dbcc:	429d      	cmp	r5, r3
 810dbce:	e7d0      	b.n	810db72 <__ieee754_pow+0x2a>
 810dbd0:	2d00      	cmp	r5, #0
 810dbd2:	da3b      	bge.n	810dc4c <__ieee754_pow+0x104>
 810dbd4:	4b72      	ldr	r3, [pc, #456]	; (810dda0 <__ieee754_pow+0x258>)
 810dbd6:	4598      	cmp	r8, r3
 810dbd8:	dc51      	bgt.n	810dc7e <__ieee754_pow+0x136>
 810dbda:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 810dbde:	4598      	cmp	r8, r3
 810dbe0:	f340 84ac 	ble.w	810e53c <__ieee754_pow+0x9f4>
 810dbe4:	ea4f 5328 	mov.w	r3, r8, asr #20
 810dbe8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810dbec:	2b14      	cmp	r3, #20
 810dbee:	dd0f      	ble.n	810dc10 <__ieee754_pow+0xc8>
 810dbf0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 810dbf4:	fa22 f103 	lsr.w	r1, r2, r3
 810dbf8:	fa01 f303 	lsl.w	r3, r1, r3
 810dbfc:	4293      	cmp	r3, r2
 810dbfe:	f040 849d 	bne.w	810e53c <__ieee754_pow+0x9f4>
 810dc02:	f001 0101 	and.w	r1, r1, #1
 810dc06:	f1c1 0302 	rsb	r3, r1, #2
 810dc0a:	9304      	str	r3, [sp, #16]
 810dc0c:	b182      	cbz	r2, 810dc30 <__ieee754_pow+0xe8>
 810dc0e:	e05f      	b.n	810dcd0 <__ieee754_pow+0x188>
 810dc10:	2a00      	cmp	r2, #0
 810dc12:	d15b      	bne.n	810dccc <__ieee754_pow+0x184>
 810dc14:	f1c3 0314 	rsb	r3, r3, #20
 810dc18:	fa48 f103 	asr.w	r1, r8, r3
 810dc1c:	fa01 f303 	lsl.w	r3, r1, r3
 810dc20:	4543      	cmp	r3, r8
 810dc22:	f040 8488 	bne.w	810e536 <__ieee754_pow+0x9ee>
 810dc26:	f001 0101 	and.w	r1, r1, #1
 810dc2a:	f1c1 0302 	rsb	r3, r1, #2
 810dc2e:	9304      	str	r3, [sp, #16]
 810dc30:	4b5c      	ldr	r3, [pc, #368]	; (810dda4 <__ieee754_pow+0x25c>)
 810dc32:	4598      	cmp	r8, r3
 810dc34:	d132      	bne.n	810dc9c <__ieee754_pow+0x154>
 810dc36:	f1b9 0f00 	cmp.w	r9, #0
 810dc3a:	f280 8478 	bge.w	810e52e <__ieee754_pow+0x9e6>
 810dc3e:	4959      	ldr	r1, [pc, #356]	; (810dda4 <__ieee754_pow+0x25c>)
 810dc40:	4632      	mov	r2, r6
 810dc42:	463b      	mov	r3, r7
 810dc44:	2000      	movs	r0, #0
 810dc46:	f7f2 fe2d 	bl	81008a4 <__aeabi_ddiv>
 810dc4a:	e79c      	b.n	810db86 <__ieee754_pow+0x3e>
 810dc4c:	2300      	movs	r3, #0
 810dc4e:	9304      	str	r3, [sp, #16]
 810dc50:	2a00      	cmp	r2, #0
 810dc52:	d13d      	bne.n	810dcd0 <__ieee754_pow+0x188>
 810dc54:	4b51      	ldr	r3, [pc, #324]	; (810dd9c <__ieee754_pow+0x254>)
 810dc56:	4598      	cmp	r8, r3
 810dc58:	d1ea      	bne.n	810dc30 <__ieee754_pow+0xe8>
 810dc5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810dc5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810dc62:	ea53 030a 	orrs.w	r3, r3, sl
 810dc66:	f000 845a 	beq.w	810e51e <__ieee754_pow+0x9d6>
 810dc6a:	4b4f      	ldr	r3, [pc, #316]	; (810dda8 <__ieee754_pow+0x260>)
 810dc6c:	429c      	cmp	r4, r3
 810dc6e:	dd08      	ble.n	810dc82 <__ieee754_pow+0x13a>
 810dc70:	f1b9 0f00 	cmp.w	r9, #0
 810dc74:	f2c0 8457 	blt.w	810e526 <__ieee754_pow+0x9de>
 810dc78:	e9dd 0100 	ldrd	r0, r1, [sp]
 810dc7c:	e783      	b.n	810db86 <__ieee754_pow+0x3e>
 810dc7e:	2302      	movs	r3, #2
 810dc80:	e7e5      	b.n	810dc4e <__ieee754_pow+0x106>
 810dc82:	f1b9 0f00 	cmp.w	r9, #0
 810dc86:	f04f 0000 	mov.w	r0, #0
 810dc8a:	f04f 0100 	mov.w	r1, #0
 810dc8e:	f6bf af7a 	bge.w	810db86 <__ieee754_pow+0x3e>
 810dc92:	e9dd 0300 	ldrd	r0, r3, [sp]
 810dc96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810dc9a:	e774      	b.n	810db86 <__ieee754_pow+0x3e>
 810dc9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 810dca0:	d106      	bne.n	810dcb0 <__ieee754_pow+0x168>
 810dca2:	4632      	mov	r2, r6
 810dca4:	463b      	mov	r3, r7
 810dca6:	4630      	mov	r0, r6
 810dca8:	4639      	mov	r1, r7
 810dcaa:	f7f2 fcd1 	bl	8100650 <__aeabi_dmul>
 810dcae:	e76a      	b.n	810db86 <__ieee754_pow+0x3e>
 810dcb0:	4b3e      	ldr	r3, [pc, #248]	; (810ddac <__ieee754_pow+0x264>)
 810dcb2:	4599      	cmp	r9, r3
 810dcb4:	d10c      	bne.n	810dcd0 <__ieee754_pow+0x188>
 810dcb6:	2d00      	cmp	r5, #0
 810dcb8:	db0a      	blt.n	810dcd0 <__ieee754_pow+0x188>
 810dcba:	ec47 6b10 	vmov	d0, r6, r7
 810dcbe:	b009      	add	sp, #36	; 0x24
 810dcc0:	ecbd 8b06 	vpop	{d8-d10}
 810dcc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dcc8:	f000 bc6c 	b.w	810e5a4 <__ieee754_sqrt>
 810dccc:	2300      	movs	r3, #0
 810dcce:	9304      	str	r3, [sp, #16]
 810dcd0:	ec47 6b10 	vmov	d0, r6, r7
 810dcd4:	f000 fd48 	bl	810e768 <fabs>
 810dcd8:	ec51 0b10 	vmov	r0, r1, d0
 810dcdc:	f1ba 0f00 	cmp.w	sl, #0
 810dce0:	d129      	bne.n	810dd36 <__ieee754_pow+0x1ee>
 810dce2:	b124      	cbz	r4, 810dcee <__ieee754_pow+0x1a6>
 810dce4:	4b2f      	ldr	r3, [pc, #188]	; (810dda4 <__ieee754_pow+0x25c>)
 810dce6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 810dcea:	429a      	cmp	r2, r3
 810dcec:	d123      	bne.n	810dd36 <__ieee754_pow+0x1ee>
 810dcee:	f1b9 0f00 	cmp.w	r9, #0
 810dcf2:	da05      	bge.n	810dd00 <__ieee754_pow+0x1b8>
 810dcf4:	4602      	mov	r2, r0
 810dcf6:	460b      	mov	r3, r1
 810dcf8:	2000      	movs	r0, #0
 810dcfa:	492a      	ldr	r1, [pc, #168]	; (810dda4 <__ieee754_pow+0x25c>)
 810dcfc:	f7f2 fdd2 	bl	81008a4 <__aeabi_ddiv>
 810dd00:	2d00      	cmp	r5, #0
 810dd02:	f6bf af40 	bge.w	810db86 <__ieee754_pow+0x3e>
 810dd06:	9b04      	ldr	r3, [sp, #16]
 810dd08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810dd0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810dd10:	4323      	orrs	r3, r4
 810dd12:	d108      	bne.n	810dd26 <__ieee754_pow+0x1de>
 810dd14:	4602      	mov	r2, r0
 810dd16:	460b      	mov	r3, r1
 810dd18:	4610      	mov	r0, r2
 810dd1a:	4619      	mov	r1, r3
 810dd1c:	f7f2 fae0 	bl	81002e0 <__aeabi_dsub>
 810dd20:	4602      	mov	r2, r0
 810dd22:	460b      	mov	r3, r1
 810dd24:	e78f      	b.n	810dc46 <__ieee754_pow+0xfe>
 810dd26:	9b04      	ldr	r3, [sp, #16]
 810dd28:	2b01      	cmp	r3, #1
 810dd2a:	f47f af2c 	bne.w	810db86 <__ieee754_pow+0x3e>
 810dd2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810dd32:	4619      	mov	r1, r3
 810dd34:	e727      	b.n	810db86 <__ieee754_pow+0x3e>
 810dd36:	0feb      	lsrs	r3, r5, #31
 810dd38:	3b01      	subs	r3, #1
 810dd3a:	9306      	str	r3, [sp, #24]
 810dd3c:	9a06      	ldr	r2, [sp, #24]
 810dd3e:	9b04      	ldr	r3, [sp, #16]
 810dd40:	4313      	orrs	r3, r2
 810dd42:	d102      	bne.n	810dd4a <__ieee754_pow+0x202>
 810dd44:	4632      	mov	r2, r6
 810dd46:	463b      	mov	r3, r7
 810dd48:	e7e6      	b.n	810dd18 <__ieee754_pow+0x1d0>
 810dd4a:	4b19      	ldr	r3, [pc, #100]	; (810ddb0 <__ieee754_pow+0x268>)
 810dd4c:	4598      	cmp	r8, r3
 810dd4e:	f340 80fb 	ble.w	810df48 <__ieee754_pow+0x400>
 810dd52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810dd56:	4598      	cmp	r8, r3
 810dd58:	4b13      	ldr	r3, [pc, #76]	; (810dda8 <__ieee754_pow+0x260>)
 810dd5a:	dd0c      	ble.n	810dd76 <__ieee754_pow+0x22e>
 810dd5c:	429c      	cmp	r4, r3
 810dd5e:	dc0f      	bgt.n	810dd80 <__ieee754_pow+0x238>
 810dd60:	f1b9 0f00 	cmp.w	r9, #0
 810dd64:	da0f      	bge.n	810dd86 <__ieee754_pow+0x23e>
 810dd66:	2000      	movs	r0, #0
 810dd68:	b009      	add	sp, #36	; 0x24
 810dd6a:	ecbd 8b06 	vpop	{d8-d10}
 810dd6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd72:	f000 bcf0 	b.w	810e756 <__math_oflow>
 810dd76:	429c      	cmp	r4, r3
 810dd78:	dbf2      	blt.n	810dd60 <__ieee754_pow+0x218>
 810dd7a:	4b0a      	ldr	r3, [pc, #40]	; (810dda4 <__ieee754_pow+0x25c>)
 810dd7c:	429c      	cmp	r4, r3
 810dd7e:	dd19      	ble.n	810ddb4 <__ieee754_pow+0x26c>
 810dd80:	f1b9 0f00 	cmp.w	r9, #0
 810dd84:	dcef      	bgt.n	810dd66 <__ieee754_pow+0x21e>
 810dd86:	2000      	movs	r0, #0
 810dd88:	b009      	add	sp, #36	; 0x24
 810dd8a:	ecbd 8b06 	vpop	{d8-d10}
 810dd8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd92:	f000 bcd7 	b.w	810e744 <__math_uflow>
 810dd96:	bf00      	nop
 810dd98:	fff00000 	.word	0xfff00000
 810dd9c:	7ff00000 	.word	0x7ff00000
 810dda0:	433fffff 	.word	0x433fffff
 810dda4:	3ff00000 	.word	0x3ff00000
 810dda8:	3fefffff 	.word	0x3fefffff
 810ddac:	3fe00000 	.word	0x3fe00000
 810ddb0:	41e00000 	.word	0x41e00000
 810ddb4:	4b60      	ldr	r3, [pc, #384]	; (810df38 <__ieee754_pow+0x3f0>)
 810ddb6:	2200      	movs	r2, #0
 810ddb8:	f7f2 fa92 	bl	81002e0 <__aeabi_dsub>
 810ddbc:	a354      	add	r3, pc, #336	; (adr r3, 810df10 <__ieee754_pow+0x3c8>)
 810ddbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ddc2:	4604      	mov	r4, r0
 810ddc4:	460d      	mov	r5, r1
 810ddc6:	f7f2 fc43 	bl	8100650 <__aeabi_dmul>
 810ddca:	a353      	add	r3, pc, #332	; (adr r3, 810df18 <__ieee754_pow+0x3d0>)
 810ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ddd0:	4606      	mov	r6, r0
 810ddd2:	460f      	mov	r7, r1
 810ddd4:	4620      	mov	r0, r4
 810ddd6:	4629      	mov	r1, r5
 810ddd8:	f7f2 fc3a 	bl	8100650 <__aeabi_dmul>
 810dddc:	4b57      	ldr	r3, [pc, #348]	; (810df3c <__ieee754_pow+0x3f4>)
 810ddde:	4682      	mov	sl, r0
 810dde0:	468b      	mov	fp, r1
 810dde2:	2200      	movs	r2, #0
 810dde4:	4620      	mov	r0, r4
 810dde6:	4629      	mov	r1, r5
 810dde8:	f7f2 fc32 	bl	8100650 <__aeabi_dmul>
 810ddec:	4602      	mov	r2, r0
 810ddee:	460b      	mov	r3, r1
 810ddf0:	a14b      	add	r1, pc, #300	; (adr r1, 810df20 <__ieee754_pow+0x3d8>)
 810ddf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ddf6:	f7f2 fa73 	bl	81002e0 <__aeabi_dsub>
 810ddfa:	4622      	mov	r2, r4
 810ddfc:	462b      	mov	r3, r5
 810ddfe:	f7f2 fc27 	bl	8100650 <__aeabi_dmul>
 810de02:	4602      	mov	r2, r0
 810de04:	460b      	mov	r3, r1
 810de06:	2000      	movs	r0, #0
 810de08:	494d      	ldr	r1, [pc, #308]	; (810df40 <__ieee754_pow+0x3f8>)
 810de0a:	f7f2 fa69 	bl	81002e0 <__aeabi_dsub>
 810de0e:	4622      	mov	r2, r4
 810de10:	4680      	mov	r8, r0
 810de12:	4689      	mov	r9, r1
 810de14:	462b      	mov	r3, r5
 810de16:	4620      	mov	r0, r4
 810de18:	4629      	mov	r1, r5
 810de1a:	f7f2 fc19 	bl	8100650 <__aeabi_dmul>
 810de1e:	4602      	mov	r2, r0
 810de20:	460b      	mov	r3, r1
 810de22:	4640      	mov	r0, r8
 810de24:	4649      	mov	r1, r9
 810de26:	f7f2 fc13 	bl	8100650 <__aeabi_dmul>
 810de2a:	a33f      	add	r3, pc, #252	; (adr r3, 810df28 <__ieee754_pow+0x3e0>)
 810de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de30:	f7f2 fc0e 	bl	8100650 <__aeabi_dmul>
 810de34:	4602      	mov	r2, r0
 810de36:	460b      	mov	r3, r1
 810de38:	4650      	mov	r0, sl
 810de3a:	4659      	mov	r1, fp
 810de3c:	f7f2 fa50 	bl	81002e0 <__aeabi_dsub>
 810de40:	4602      	mov	r2, r0
 810de42:	460b      	mov	r3, r1
 810de44:	4680      	mov	r8, r0
 810de46:	4689      	mov	r9, r1
 810de48:	4630      	mov	r0, r6
 810de4a:	4639      	mov	r1, r7
 810de4c:	f7f2 fa4a 	bl	81002e4 <__adddf3>
 810de50:	2000      	movs	r0, #0
 810de52:	4632      	mov	r2, r6
 810de54:	463b      	mov	r3, r7
 810de56:	4604      	mov	r4, r0
 810de58:	460d      	mov	r5, r1
 810de5a:	f7f2 fa41 	bl	81002e0 <__aeabi_dsub>
 810de5e:	4602      	mov	r2, r0
 810de60:	460b      	mov	r3, r1
 810de62:	4640      	mov	r0, r8
 810de64:	4649      	mov	r1, r9
 810de66:	f7f2 fa3b 	bl	81002e0 <__aeabi_dsub>
 810de6a:	9b04      	ldr	r3, [sp, #16]
 810de6c:	9a06      	ldr	r2, [sp, #24]
 810de6e:	3b01      	subs	r3, #1
 810de70:	4313      	orrs	r3, r2
 810de72:	4682      	mov	sl, r0
 810de74:	468b      	mov	fp, r1
 810de76:	f040 81e7 	bne.w	810e248 <__ieee754_pow+0x700>
 810de7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 810df30 <__ieee754_pow+0x3e8>
 810de7e:	eeb0 8a47 	vmov.f32	s16, s14
 810de82:	eef0 8a67 	vmov.f32	s17, s15
 810de86:	e9dd 6700 	ldrd	r6, r7, [sp]
 810de8a:	2600      	movs	r6, #0
 810de8c:	4632      	mov	r2, r6
 810de8e:	463b      	mov	r3, r7
 810de90:	e9dd 0100 	ldrd	r0, r1, [sp]
 810de94:	f7f2 fa24 	bl	81002e0 <__aeabi_dsub>
 810de98:	4622      	mov	r2, r4
 810de9a:	462b      	mov	r3, r5
 810de9c:	f7f2 fbd8 	bl	8100650 <__aeabi_dmul>
 810dea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 810dea4:	4680      	mov	r8, r0
 810dea6:	4689      	mov	r9, r1
 810dea8:	4650      	mov	r0, sl
 810deaa:	4659      	mov	r1, fp
 810deac:	f7f2 fbd0 	bl	8100650 <__aeabi_dmul>
 810deb0:	4602      	mov	r2, r0
 810deb2:	460b      	mov	r3, r1
 810deb4:	4640      	mov	r0, r8
 810deb6:	4649      	mov	r1, r9
 810deb8:	f7f2 fa14 	bl	81002e4 <__adddf3>
 810debc:	4632      	mov	r2, r6
 810debe:	463b      	mov	r3, r7
 810dec0:	4680      	mov	r8, r0
 810dec2:	4689      	mov	r9, r1
 810dec4:	4620      	mov	r0, r4
 810dec6:	4629      	mov	r1, r5
 810dec8:	f7f2 fbc2 	bl	8100650 <__aeabi_dmul>
 810decc:	460b      	mov	r3, r1
 810dece:	4604      	mov	r4, r0
 810ded0:	460d      	mov	r5, r1
 810ded2:	4602      	mov	r2, r0
 810ded4:	4649      	mov	r1, r9
 810ded6:	4640      	mov	r0, r8
 810ded8:	f7f2 fa04 	bl	81002e4 <__adddf3>
 810dedc:	4b19      	ldr	r3, [pc, #100]	; (810df44 <__ieee754_pow+0x3fc>)
 810dede:	4299      	cmp	r1, r3
 810dee0:	ec45 4b19 	vmov	d9, r4, r5
 810dee4:	4606      	mov	r6, r0
 810dee6:	460f      	mov	r7, r1
 810dee8:	468b      	mov	fp, r1
 810deea:	f340 82f1 	ble.w	810e4d0 <__ieee754_pow+0x988>
 810deee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810def2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810def6:	4303      	orrs	r3, r0
 810def8:	f000 81e4 	beq.w	810e2c4 <__ieee754_pow+0x77c>
 810defc:	ec51 0b18 	vmov	r0, r1, d8
 810df00:	2200      	movs	r2, #0
 810df02:	2300      	movs	r3, #0
 810df04:	f7f2 fe16 	bl	8100b34 <__aeabi_dcmplt>
 810df08:	3800      	subs	r0, #0
 810df0a:	bf18      	it	ne
 810df0c:	2001      	movne	r0, #1
 810df0e:	e72b      	b.n	810dd68 <__ieee754_pow+0x220>
 810df10:	60000000 	.word	0x60000000
 810df14:	3ff71547 	.word	0x3ff71547
 810df18:	f85ddf44 	.word	0xf85ddf44
 810df1c:	3e54ae0b 	.word	0x3e54ae0b
 810df20:	55555555 	.word	0x55555555
 810df24:	3fd55555 	.word	0x3fd55555
 810df28:	652b82fe 	.word	0x652b82fe
 810df2c:	3ff71547 	.word	0x3ff71547
 810df30:	00000000 	.word	0x00000000
 810df34:	bff00000 	.word	0xbff00000
 810df38:	3ff00000 	.word	0x3ff00000
 810df3c:	3fd00000 	.word	0x3fd00000
 810df40:	3fe00000 	.word	0x3fe00000
 810df44:	408fffff 	.word	0x408fffff
 810df48:	4bd5      	ldr	r3, [pc, #852]	; (810e2a0 <__ieee754_pow+0x758>)
 810df4a:	402b      	ands	r3, r5
 810df4c:	2200      	movs	r2, #0
 810df4e:	b92b      	cbnz	r3, 810df5c <__ieee754_pow+0x414>
 810df50:	4bd4      	ldr	r3, [pc, #848]	; (810e2a4 <__ieee754_pow+0x75c>)
 810df52:	f7f2 fb7d 	bl	8100650 <__aeabi_dmul>
 810df56:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810df5a:	460c      	mov	r4, r1
 810df5c:	1523      	asrs	r3, r4, #20
 810df5e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810df62:	4413      	add	r3, r2
 810df64:	9305      	str	r3, [sp, #20]
 810df66:	4bd0      	ldr	r3, [pc, #832]	; (810e2a8 <__ieee754_pow+0x760>)
 810df68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810df6c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810df70:	429c      	cmp	r4, r3
 810df72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810df76:	dd08      	ble.n	810df8a <__ieee754_pow+0x442>
 810df78:	4bcc      	ldr	r3, [pc, #816]	; (810e2ac <__ieee754_pow+0x764>)
 810df7a:	429c      	cmp	r4, r3
 810df7c:	f340 8162 	ble.w	810e244 <__ieee754_pow+0x6fc>
 810df80:	9b05      	ldr	r3, [sp, #20]
 810df82:	3301      	adds	r3, #1
 810df84:	9305      	str	r3, [sp, #20]
 810df86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810df8a:	2400      	movs	r4, #0
 810df8c:	00e3      	lsls	r3, r4, #3
 810df8e:	9307      	str	r3, [sp, #28]
 810df90:	4bc7      	ldr	r3, [pc, #796]	; (810e2b0 <__ieee754_pow+0x768>)
 810df92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810df96:	ed93 7b00 	vldr	d7, [r3]
 810df9a:	4629      	mov	r1, r5
 810df9c:	ec53 2b17 	vmov	r2, r3, d7
 810dfa0:	eeb0 9a47 	vmov.f32	s18, s14
 810dfa4:	eef0 9a67 	vmov.f32	s19, s15
 810dfa8:	4682      	mov	sl, r0
 810dfaa:	f7f2 f999 	bl	81002e0 <__aeabi_dsub>
 810dfae:	4652      	mov	r2, sl
 810dfb0:	4606      	mov	r6, r0
 810dfb2:	460f      	mov	r7, r1
 810dfb4:	462b      	mov	r3, r5
 810dfb6:	ec51 0b19 	vmov	r0, r1, d9
 810dfba:	f7f2 f993 	bl	81002e4 <__adddf3>
 810dfbe:	4602      	mov	r2, r0
 810dfc0:	460b      	mov	r3, r1
 810dfc2:	2000      	movs	r0, #0
 810dfc4:	49bb      	ldr	r1, [pc, #748]	; (810e2b4 <__ieee754_pow+0x76c>)
 810dfc6:	f7f2 fc6d 	bl	81008a4 <__aeabi_ddiv>
 810dfca:	ec41 0b1a 	vmov	d10, r0, r1
 810dfce:	4602      	mov	r2, r0
 810dfd0:	460b      	mov	r3, r1
 810dfd2:	4630      	mov	r0, r6
 810dfd4:	4639      	mov	r1, r7
 810dfd6:	f7f2 fb3b 	bl	8100650 <__aeabi_dmul>
 810dfda:	2300      	movs	r3, #0
 810dfdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810dfe0:	9302      	str	r3, [sp, #8]
 810dfe2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810dfe6:	46ab      	mov	fp, r5
 810dfe8:	106d      	asrs	r5, r5, #1
 810dfea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810dfee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810dff2:	ec41 0b18 	vmov	d8, r0, r1
 810dff6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810dffa:	2200      	movs	r2, #0
 810dffc:	4640      	mov	r0, r8
 810dffe:	4649      	mov	r1, r9
 810e000:	4614      	mov	r4, r2
 810e002:	461d      	mov	r5, r3
 810e004:	f7f2 fb24 	bl	8100650 <__aeabi_dmul>
 810e008:	4602      	mov	r2, r0
 810e00a:	460b      	mov	r3, r1
 810e00c:	4630      	mov	r0, r6
 810e00e:	4639      	mov	r1, r7
 810e010:	f7f2 f966 	bl	81002e0 <__aeabi_dsub>
 810e014:	ec53 2b19 	vmov	r2, r3, d9
 810e018:	4606      	mov	r6, r0
 810e01a:	460f      	mov	r7, r1
 810e01c:	4620      	mov	r0, r4
 810e01e:	4629      	mov	r1, r5
 810e020:	f7f2 f95e 	bl	81002e0 <__aeabi_dsub>
 810e024:	4602      	mov	r2, r0
 810e026:	460b      	mov	r3, r1
 810e028:	4650      	mov	r0, sl
 810e02a:	4659      	mov	r1, fp
 810e02c:	f7f2 f958 	bl	81002e0 <__aeabi_dsub>
 810e030:	4642      	mov	r2, r8
 810e032:	464b      	mov	r3, r9
 810e034:	f7f2 fb0c 	bl	8100650 <__aeabi_dmul>
 810e038:	4602      	mov	r2, r0
 810e03a:	460b      	mov	r3, r1
 810e03c:	4630      	mov	r0, r6
 810e03e:	4639      	mov	r1, r7
 810e040:	f7f2 f94e 	bl	81002e0 <__aeabi_dsub>
 810e044:	ec53 2b1a 	vmov	r2, r3, d10
 810e048:	f7f2 fb02 	bl	8100650 <__aeabi_dmul>
 810e04c:	ec53 2b18 	vmov	r2, r3, d8
 810e050:	ec41 0b19 	vmov	d9, r0, r1
 810e054:	ec51 0b18 	vmov	r0, r1, d8
 810e058:	f7f2 fafa 	bl	8100650 <__aeabi_dmul>
 810e05c:	a37c      	add	r3, pc, #496	; (adr r3, 810e250 <__ieee754_pow+0x708>)
 810e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e062:	4604      	mov	r4, r0
 810e064:	460d      	mov	r5, r1
 810e066:	f7f2 faf3 	bl	8100650 <__aeabi_dmul>
 810e06a:	a37b      	add	r3, pc, #492	; (adr r3, 810e258 <__ieee754_pow+0x710>)
 810e06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e070:	f7f2 f938 	bl	81002e4 <__adddf3>
 810e074:	4622      	mov	r2, r4
 810e076:	462b      	mov	r3, r5
 810e078:	f7f2 faea 	bl	8100650 <__aeabi_dmul>
 810e07c:	a378      	add	r3, pc, #480	; (adr r3, 810e260 <__ieee754_pow+0x718>)
 810e07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e082:	f7f2 f92f 	bl	81002e4 <__adddf3>
 810e086:	4622      	mov	r2, r4
 810e088:	462b      	mov	r3, r5
 810e08a:	f7f2 fae1 	bl	8100650 <__aeabi_dmul>
 810e08e:	a376      	add	r3, pc, #472	; (adr r3, 810e268 <__ieee754_pow+0x720>)
 810e090:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e094:	f7f2 f926 	bl	81002e4 <__adddf3>
 810e098:	4622      	mov	r2, r4
 810e09a:	462b      	mov	r3, r5
 810e09c:	f7f2 fad8 	bl	8100650 <__aeabi_dmul>
 810e0a0:	a373      	add	r3, pc, #460	; (adr r3, 810e270 <__ieee754_pow+0x728>)
 810e0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e0a6:	f7f2 f91d 	bl	81002e4 <__adddf3>
 810e0aa:	4622      	mov	r2, r4
 810e0ac:	462b      	mov	r3, r5
 810e0ae:	f7f2 facf 	bl	8100650 <__aeabi_dmul>
 810e0b2:	a371      	add	r3, pc, #452	; (adr r3, 810e278 <__ieee754_pow+0x730>)
 810e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e0b8:	f7f2 f914 	bl	81002e4 <__adddf3>
 810e0bc:	4622      	mov	r2, r4
 810e0be:	4606      	mov	r6, r0
 810e0c0:	460f      	mov	r7, r1
 810e0c2:	462b      	mov	r3, r5
 810e0c4:	4620      	mov	r0, r4
 810e0c6:	4629      	mov	r1, r5
 810e0c8:	f7f2 fac2 	bl	8100650 <__aeabi_dmul>
 810e0cc:	4602      	mov	r2, r0
 810e0ce:	460b      	mov	r3, r1
 810e0d0:	4630      	mov	r0, r6
 810e0d2:	4639      	mov	r1, r7
 810e0d4:	f7f2 fabc 	bl	8100650 <__aeabi_dmul>
 810e0d8:	4642      	mov	r2, r8
 810e0da:	4604      	mov	r4, r0
 810e0dc:	460d      	mov	r5, r1
 810e0de:	464b      	mov	r3, r9
 810e0e0:	ec51 0b18 	vmov	r0, r1, d8
 810e0e4:	f7f2 f8fe 	bl	81002e4 <__adddf3>
 810e0e8:	ec53 2b19 	vmov	r2, r3, d9
 810e0ec:	f7f2 fab0 	bl	8100650 <__aeabi_dmul>
 810e0f0:	4622      	mov	r2, r4
 810e0f2:	462b      	mov	r3, r5
 810e0f4:	f7f2 f8f6 	bl	81002e4 <__adddf3>
 810e0f8:	4642      	mov	r2, r8
 810e0fa:	4682      	mov	sl, r0
 810e0fc:	468b      	mov	fp, r1
 810e0fe:	464b      	mov	r3, r9
 810e100:	4640      	mov	r0, r8
 810e102:	4649      	mov	r1, r9
 810e104:	f7f2 faa4 	bl	8100650 <__aeabi_dmul>
 810e108:	4b6b      	ldr	r3, [pc, #428]	; (810e2b8 <__ieee754_pow+0x770>)
 810e10a:	2200      	movs	r2, #0
 810e10c:	4606      	mov	r6, r0
 810e10e:	460f      	mov	r7, r1
 810e110:	f7f2 f8e8 	bl	81002e4 <__adddf3>
 810e114:	4652      	mov	r2, sl
 810e116:	465b      	mov	r3, fp
 810e118:	f7f2 f8e4 	bl	81002e4 <__adddf3>
 810e11c:	2000      	movs	r0, #0
 810e11e:	4604      	mov	r4, r0
 810e120:	460d      	mov	r5, r1
 810e122:	4602      	mov	r2, r0
 810e124:	460b      	mov	r3, r1
 810e126:	4640      	mov	r0, r8
 810e128:	4649      	mov	r1, r9
 810e12a:	f7f2 fa91 	bl	8100650 <__aeabi_dmul>
 810e12e:	4b62      	ldr	r3, [pc, #392]	; (810e2b8 <__ieee754_pow+0x770>)
 810e130:	4680      	mov	r8, r0
 810e132:	4689      	mov	r9, r1
 810e134:	2200      	movs	r2, #0
 810e136:	4620      	mov	r0, r4
 810e138:	4629      	mov	r1, r5
 810e13a:	f7f2 f8d1 	bl	81002e0 <__aeabi_dsub>
 810e13e:	4632      	mov	r2, r6
 810e140:	463b      	mov	r3, r7
 810e142:	f7f2 f8cd 	bl	81002e0 <__aeabi_dsub>
 810e146:	4602      	mov	r2, r0
 810e148:	460b      	mov	r3, r1
 810e14a:	4650      	mov	r0, sl
 810e14c:	4659      	mov	r1, fp
 810e14e:	f7f2 f8c7 	bl	81002e0 <__aeabi_dsub>
 810e152:	ec53 2b18 	vmov	r2, r3, d8
 810e156:	f7f2 fa7b 	bl	8100650 <__aeabi_dmul>
 810e15a:	4622      	mov	r2, r4
 810e15c:	4606      	mov	r6, r0
 810e15e:	460f      	mov	r7, r1
 810e160:	462b      	mov	r3, r5
 810e162:	ec51 0b19 	vmov	r0, r1, d9
 810e166:	f7f2 fa73 	bl	8100650 <__aeabi_dmul>
 810e16a:	4602      	mov	r2, r0
 810e16c:	460b      	mov	r3, r1
 810e16e:	4630      	mov	r0, r6
 810e170:	4639      	mov	r1, r7
 810e172:	f7f2 f8b7 	bl	81002e4 <__adddf3>
 810e176:	4606      	mov	r6, r0
 810e178:	460f      	mov	r7, r1
 810e17a:	4602      	mov	r2, r0
 810e17c:	460b      	mov	r3, r1
 810e17e:	4640      	mov	r0, r8
 810e180:	4649      	mov	r1, r9
 810e182:	f7f2 f8af 	bl	81002e4 <__adddf3>
 810e186:	a33e      	add	r3, pc, #248	; (adr r3, 810e280 <__ieee754_pow+0x738>)
 810e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e18c:	2000      	movs	r0, #0
 810e18e:	4604      	mov	r4, r0
 810e190:	460d      	mov	r5, r1
 810e192:	f7f2 fa5d 	bl	8100650 <__aeabi_dmul>
 810e196:	4642      	mov	r2, r8
 810e198:	ec41 0b18 	vmov	d8, r0, r1
 810e19c:	464b      	mov	r3, r9
 810e19e:	4620      	mov	r0, r4
 810e1a0:	4629      	mov	r1, r5
 810e1a2:	f7f2 f89d 	bl	81002e0 <__aeabi_dsub>
 810e1a6:	4602      	mov	r2, r0
 810e1a8:	460b      	mov	r3, r1
 810e1aa:	4630      	mov	r0, r6
 810e1ac:	4639      	mov	r1, r7
 810e1ae:	f7f2 f897 	bl	81002e0 <__aeabi_dsub>
 810e1b2:	a335      	add	r3, pc, #212	; (adr r3, 810e288 <__ieee754_pow+0x740>)
 810e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1b8:	f7f2 fa4a 	bl	8100650 <__aeabi_dmul>
 810e1bc:	a334      	add	r3, pc, #208	; (adr r3, 810e290 <__ieee754_pow+0x748>)
 810e1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1c2:	4606      	mov	r6, r0
 810e1c4:	460f      	mov	r7, r1
 810e1c6:	4620      	mov	r0, r4
 810e1c8:	4629      	mov	r1, r5
 810e1ca:	f7f2 fa41 	bl	8100650 <__aeabi_dmul>
 810e1ce:	4602      	mov	r2, r0
 810e1d0:	460b      	mov	r3, r1
 810e1d2:	4630      	mov	r0, r6
 810e1d4:	4639      	mov	r1, r7
 810e1d6:	f7f2 f885 	bl	81002e4 <__adddf3>
 810e1da:	9a07      	ldr	r2, [sp, #28]
 810e1dc:	4b37      	ldr	r3, [pc, #220]	; (810e2bc <__ieee754_pow+0x774>)
 810e1de:	4413      	add	r3, r2
 810e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e1e4:	f7f2 f87e 	bl	81002e4 <__adddf3>
 810e1e8:	4682      	mov	sl, r0
 810e1ea:	9805      	ldr	r0, [sp, #20]
 810e1ec:	468b      	mov	fp, r1
 810e1ee:	f7f2 f9c5 	bl	810057c <__aeabi_i2d>
 810e1f2:	9a07      	ldr	r2, [sp, #28]
 810e1f4:	4b32      	ldr	r3, [pc, #200]	; (810e2c0 <__ieee754_pow+0x778>)
 810e1f6:	4413      	add	r3, r2
 810e1f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 810e1fc:	4606      	mov	r6, r0
 810e1fe:	460f      	mov	r7, r1
 810e200:	4652      	mov	r2, sl
 810e202:	465b      	mov	r3, fp
 810e204:	ec51 0b18 	vmov	r0, r1, d8
 810e208:	f7f2 f86c 	bl	81002e4 <__adddf3>
 810e20c:	4642      	mov	r2, r8
 810e20e:	464b      	mov	r3, r9
 810e210:	f7f2 f868 	bl	81002e4 <__adddf3>
 810e214:	4632      	mov	r2, r6
 810e216:	463b      	mov	r3, r7
 810e218:	f7f2 f864 	bl	81002e4 <__adddf3>
 810e21c:	2000      	movs	r0, #0
 810e21e:	4632      	mov	r2, r6
 810e220:	463b      	mov	r3, r7
 810e222:	4604      	mov	r4, r0
 810e224:	460d      	mov	r5, r1
 810e226:	f7f2 f85b 	bl	81002e0 <__aeabi_dsub>
 810e22a:	4642      	mov	r2, r8
 810e22c:	464b      	mov	r3, r9
 810e22e:	f7f2 f857 	bl	81002e0 <__aeabi_dsub>
 810e232:	ec53 2b18 	vmov	r2, r3, d8
 810e236:	f7f2 f853 	bl	81002e0 <__aeabi_dsub>
 810e23a:	4602      	mov	r2, r0
 810e23c:	460b      	mov	r3, r1
 810e23e:	4650      	mov	r0, sl
 810e240:	4659      	mov	r1, fp
 810e242:	e610      	b.n	810de66 <__ieee754_pow+0x31e>
 810e244:	2401      	movs	r4, #1
 810e246:	e6a1      	b.n	810df8c <__ieee754_pow+0x444>
 810e248:	ed9f 7b13 	vldr	d7, [pc, #76]	; 810e298 <__ieee754_pow+0x750>
 810e24c:	e617      	b.n	810de7e <__ieee754_pow+0x336>
 810e24e:	bf00      	nop
 810e250:	4a454eef 	.word	0x4a454eef
 810e254:	3fca7e28 	.word	0x3fca7e28
 810e258:	93c9db65 	.word	0x93c9db65
 810e25c:	3fcd864a 	.word	0x3fcd864a
 810e260:	a91d4101 	.word	0xa91d4101
 810e264:	3fd17460 	.word	0x3fd17460
 810e268:	518f264d 	.word	0x518f264d
 810e26c:	3fd55555 	.word	0x3fd55555
 810e270:	db6fabff 	.word	0xdb6fabff
 810e274:	3fdb6db6 	.word	0x3fdb6db6
 810e278:	33333303 	.word	0x33333303
 810e27c:	3fe33333 	.word	0x3fe33333
 810e280:	e0000000 	.word	0xe0000000
 810e284:	3feec709 	.word	0x3feec709
 810e288:	dc3a03fd 	.word	0xdc3a03fd
 810e28c:	3feec709 	.word	0x3feec709
 810e290:	145b01f5 	.word	0x145b01f5
 810e294:	be3e2fe0 	.word	0xbe3e2fe0
 810e298:	00000000 	.word	0x00000000
 810e29c:	3ff00000 	.word	0x3ff00000
 810e2a0:	7ff00000 	.word	0x7ff00000
 810e2a4:	43400000 	.word	0x43400000
 810e2a8:	0003988e 	.word	0x0003988e
 810e2ac:	000bb679 	.word	0x000bb679
 810e2b0:	0810e9e0 	.word	0x0810e9e0
 810e2b4:	3ff00000 	.word	0x3ff00000
 810e2b8:	40080000 	.word	0x40080000
 810e2bc:	0810ea00 	.word	0x0810ea00
 810e2c0:	0810e9f0 	.word	0x0810e9f0
 810e2c4:	a3b5      	add	r3, pc, #724	; (adr r3, 810e59c <__ieee754_pow+0xa54>)
 810e2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e2ca:	4640      	mov	r0, r8
 810e2cc:	4649      	mov	r1, r9
 810e2ce:	f7f2 f809 	bl	81002e4 <__adddf3>
 810e2d2:	4622      	mov	r2, r4
 810e2d4:	ec41 0b1a 	vmov	d10, r0, r1
 810e2d8:	462b      	mov	r3, r5
 810e2da:	4630      	mov	r0, r6
 810e2dc:	4639      	mov	r1, r7
 810e2de:	f7f1 ffff 	bl	81002e0 <__aeabi_dsub>
 810e2e2:	4602      	mov	r2, r0
 810e2e4:	460b      	mov	r3, r1
 810e2e6:	ec51 0b1a 	vmov	r0, r1, d10
 810e2ea:	f7f2 fc41 	bl	8100b70 <__aeabi_dcmpgt>
 810e2ee:	2800      	cmp	r0, #0
 810e2f0:	f47f ae04 	bne.w	810defc <__ieee754_pow+0x3b4>
 810e2f4:	4aa4      	ldr	r2, [pc, #656]	; (810e588 <__ieee754_pow+0xa40>)
 810e2f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810e2fa:	4293      	cmp	r3, r2
 810e2fc:	f340 8108 	ble.w	810e510 <__ieee754_pow+0x9c8>
 810e300:	151b      	asrs	r3, r3, #20
 810e302:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810e306:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810e30a:	fa4a f303 	asr.w	r3, sl, r3
 810e30e:	445b      	add	r3, fp
 810e310:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810e314:	4e9d      	ldr	r6, [pc, #628]	; (810e58c <__ieee754_pow+0xa44>)
 810e316:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810e31a:	4116      	asrs	r6, r2
 810e31c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810e320:	2000      	movs	r0, #0
 810e322:	ea23 0106 	bic.w	r1, r3, r6
 810e326:	f1c2 0214 	rsb	r2, r2, #20
 810e32a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810e32e:	fa4a fa02 	asr.w	sl, sl, r2
 810e332:	f1bb 0f00 	cmp.w	fp, #0
 810e336:	4602      	mov	r2, r0
 810e338:	460b      	mov	r3, r1
 810e33a:	4620      	mov	r0, r4
 810e33c:	4629      	mov	r1, r5
 810e33e:	bfb8      	it	lt
 810e340:	f1ca 0a00 	rsblt	sl, sl, #0
 810e344:	f7f1 ffcc 	bl	81002e0 <__aeabi_dsub>
 810e348:	ec41 0b19 	vmov	d9, r0, r1
 810e34c:	4642      	mov	r2, r8
 810e34e:	464b      	mov	r3, r9
 810e350:	ec51 0b19 	vmov	r0, r1, d9
 810e354:	f7f1 ffc6 	bl	81002e4 <__adddf3>
 810e358:	a37b      	add	r3, pc, #492	; (adr r3, 810e548 <__ieee754_pow+0xa00>)
 810e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e35e:	2000      	movs	r0, #0
 810e360:	4604      	mov	r4, r0
 810e362:	460d      	mov	r5, r1
 810e364:	f7f2 f974 	bl	8100650 <__aeabi_dmul>
 810e368:	ec53 2b19 	vmov	r2, r3, d9
 810e36c:	4606      	mov	r6, r0
 810e36e:	460f      	mov	r7, r1
 810e370:	4620      	mov	r0, r4
 810e372:	4629      	mov	r1, r5
 810e374:	f7f1 ffb4 	bl	81002e0 <__aeabi_dsub>
 810e378:	4602      	mov	r2, r0
 810e37a:	460b      	mov	r3, r1
 810e37c:	4640      	mov	r0, r8
 810e37e:	4649      	mov	r1, r9
 810e380:	f7f1 ffae 	bl	81002e0 <__aeabi_dsub>
 810e384:	a372      	add	r3, pc, #456	; (adr r3, 810e550 <__ieee754_pow+0xa08>)
 810e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e38a:	f7f2 f961 	bl	8100650 <__aeabi_dmul>
 810e38e:	a372      	add	r3, pc, #456	; (adr r3, 810e558 <__ieee754_pow+0xa10>)
 810e390:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e394:	4680      	mov	r8, r0
 810e396:	4689      	mov	r9, r1
 810e398:	4620      	mov	r0, r4
 810e39a:	4629      	mov	r1, r5
 810e39c:	f7f2 f958 	bl	8100650 <__aeabi_dmul>
 810e3a0:	4602      	mov	r2, r0
 810e3a2:	460b      	mov	r3, r1
 810e3a4:	4640      	mov	r0, r8
 810e3a6:	4649      	mov	r1, r9
 810e3a8:	f7f1 ff9c 	bl	81002e4 <__adddf3>
 810e3ac:	4604      	mov	r4, r0
 810e3ae:	460d      	mov	r5, r1
 810e3b0:	4602      	mov	r2, r0
 810e3b2:	460b      	mov	r3, r1
 810e3b4:	4630      	mov	r0, r6
 810e3b6:	4639      	mov	r1, r7
 810e3b8:	f7f1 ff94 	bl	81002e4 <__adddf3>
 810e3bc:	4632      	mov	r2, r6
 810e3be:	463b      	mov	r3, r7
 810e3c0:	4680      	mov	r8, r0
 810e3c2:	4689      	mov	r9, r1
 810e3c4:	f7f1 ff8c 	bl	81002e0 <__aeabi_dsub>
 810e3c8:	4602      	mov	r2, r0
 810e3ca:	460b      	mov	r3, r1
 810e3cc:	4620      	mov	r0, r4
 810e3ce:	4629      	mov	r1, r5
 810e3d0:	f7f1 ff86 	bl	81002e0 <__aeabi_dsub>
 810e3d4:	4642      	mov	r2, r8
 810e3d6:	4606      	mov	r6, r0
 810e3d8:	460f      	mov	r7, r1
 810e3da:	464b      	mov	r3, r9
 810e3dc:	4640      	mov	r0, r8
 810e3de:	4649      	mov	r1, r9
 810e3e0:	f7f2 f936 	bl	8100650 <__aeabi_dmul>
 810e3e4:	a35e      	add	r3, pc, #376	; (adr r3, 810e560 <__ieee754_pow+0xa18>)
 810e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e3ea:	4604      	mov	r4, r0
 810e3ec:	460d      	mov	r5, r1
 810e3ee:	f7f2 f92f 	bl	8100650 <__aeabi_dmul>
 810e3f2:	a35d      	add	r3, pc, #372	; (adr r3, 810e568 <__ieee754_pow+0xa20>)
 810e3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e3f8:	f7f1 ff72 	bl	81002e0 <__aeabi_dsub>
 810e3fc:	4622      	mov	r2, r4
 810e3fe:	462b      	mov	r3, r5
 810e400:	f7f2 f926 	bl	8100650 <__aeabi_dmul>
 810e404:	a35a      	add	r3, pc, #360	; (adr r3, 810e570 <__ieee754_pow+0xa28>)
 810e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e40a:	f7f1 ff6b 	bl	81002e4 <__adddf3>
 810e40e:	4622      	mov	r2, r4
 810e410:	462b      	mov	r3, r5
 810e412:	f7f2 f91d 	bl	8100650 <__aeabi_dmul>
 810e416:	a358      	add	r3, pc, #352	; (adr r3, 810e578 <__ieee754_pow+0xa30>)
 810e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e41c:	f7f1 ff60 	bl	81002e0 <__aeabi_dsub>
 810e420:	4622      	mov	r2, r4
 810e422:	462b      	mov	r3, r5
 810e424:	f7f2 f914 	bl	8100650 <__aeabi_dmul>
 810e428:	a355      	add	r3, pc, #340	; (adr r3, 810e580 <__ieee754_pow+0xa38>)
 810e42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e42e:	f7f1 ff59 	bl	81002e4 <__adddf3>
 810e432:	4622      	mov	r2, r4
 810e434:	462b      	mov	r3, r5
 810e436:	f7f2 f90b 	bl	8100650 <__aeabi_dmul>
 810e43a:	4602      	mov	r2, r0
 810e43c:	460b      	mov	r3, r1
 810e43e:	4640      	mov	r0, r8
 810e440:	4649      	mov	r1, r9
 810e442:	f7f1 ff4d 	bl	81002e0 <__aeabi_dsub>
 810e446:	4604      	mov	r4, r0
 810e448:	460d      	mov	r5, r1
 810e44a:	4602      	mov	r2, r0
 810e44c:	460b      	mov	r3, r1
 810e44e:	4640      	mov	r0, r8
 810e450:	4649      	mov	r1, r9
 810e452:	f7f2 f8fd 	bl	8100650 <__aeabi_dmul>
 810e456:	2200      	movs	r2, #0
 810e458:	ec41 0b19 	vmov	d9, r0, r1
 810e45c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810e460:	4620      	mov	r0, r4
 810e462:	4629      	mov	r1, r5
 810e464:	f7f1 ff3c 	bl	81002e0 <__aeabi_dsub>
 810e468:	4602      	mov	r2, r0
 810e46a:	460b      	mov	r3, r1
 810e46c:	ec51 0b19 	vmov	r0, r1, d9
 810e470:	f7f2 fa18 	bl	81008a4 <__aeabi_ddiv>
 810e474:	4632      	mov	r2, r6
 810e476:	4604      	mov	r4, r0
 810e478:	460d      	mov	r5, r1
 810e47a:	463b      	mov	r3, r7
 810e47c:	4640      	mov	r0, r8
 810e47e:	4649      	mov	r1, r9
 810e480:	f7f2 f8e6 	bl	8100650 <__aeabi_dmul>
 810e484:	4632      	mov	r2, r6
 810e486:	463b      	mov	r3, r7
 810e488:	f7f1 ff2c 	bl	81002e4 <__adddf3>
 810e48c:	4602      	mov	r2, r0
 810e48e:	460b      	mov	r3, r1
 810e490:	4620      	mov	r0, r4
 810e492:	4629      	mov	r1, r5
 810e494:	f7f1 ff24 	bl	81002e0 <__aeabi_dsub>
 810e498:	4642      	mov	r2, r8
 810e49a:	464b      	mov	r3, r9
 810e49c:	f7f1 ff20 	bl	81002e0 <__aeabi_dsub>
 810e4a0:	460b      	mov	r3, r1
 810e4a2:	4602      	mov	r2, r0
 810e4a4:	493a      	ldr	r1, [pc, #232]	; (810e590 <__ieee754_pow+0xa48>)
 810e4a6:	2000      	movs	r0, #0
 810e4a8:	f7f1 ff1a 	bl	81002e0 <__aeabi_dsub>
 810e4ac:	ec41 0b10 	vmov	d0, r0, r1
 810e4b0:	ee10 3a90 	vmov	r3, s1
 810e4b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810e4b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810e4bc:	da2b      	bge.n	810e516 <__ieee754_pow+0x9ce>
 810e4be:	4650      	mov	r0, sl
 810e4c0:	f000 f966 	bl	810e790 <scalbn>
 810e4c4:	ec51 0b10 	vmov	r0, r1, d0
 810e4c8:	ec53 2b18 	vmov	r2, r3, d8
 810e4cc:	f7ff bbed 	b.w	810dcaa <__ieee754_pow+0x162>
 810e4d0:	4b30      	ldr	r3, [pc, #192]	; (810e594 <__ieee754_pow+0xa4c>)
 810e4d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810e4d6:	429e      	cmp	r6, r3
 810e4d8:	f77f af0c 	ble.w	810e2f4 <__ieee754_pow+0x7ac>
 810e4dc:	4b2e      	ldr	r3, [pc, #184]	; (810e598 <__ieee754_pow+0xa50>)
 810e4de:	440b      	add	r3, r1
 810e4e0:	4303      	orrs	r3, r0
 810e4e2:	d009      	beq.n	810e4f8 <__ieee754_pow+0x9b0>
 810e4e4:	ec51 0b18 	vmov	r0, r1, d8
 810e4e8:	2200      	movs	r2, #0
 810e4ea:	2300      	movs	r3, #0
 810e4ec:	f7f2 fb22 	bl	8100b34 <__aeabi_dcmplt>
 810e4f0:	3800      	subs	r0, #0
 810e4f2:	bf18      	it	ne
 810e4f4:	2001      	movne	r0, #1
 810e4f6:	e447      	b.n	810dd88 <__ieee754_pow+0x240>
 810e4f8:	4622      	mov	r2, r4
 810e4fa:	462b      	mov	r3, r5
 810e4fc:	f7f1 fef0 	bl	81002e0 <__aeabi_dsub>
 810e500:	4642      	mov	r2, r8
 810e502:	464b      	mov	r3, r9
 810e504:	f7f2 fb2a 	bl	8100b5c <__aeabi_dcmpge>
 810e508:	2800      	cmp	r0, #0
 810e50a:	f43f aef3 	beq.w	810e2f4 <__ieee754_pow+0x7ac>
 810e50e:	e7e9      	b.n	810e4e4 <__ieee754_pow+0x99c>
 810e510:	f04f 0a00 	mov.w	sl, #0
 810e514:	e71a      	b.n	810e34c <__ieee754_pow+0x804>
 810e516:	ec51 0b10 	vmov	r0, r1, d0
 810e51a:	4619      	mov	r1, r3
 810e51c:	e7d4      	b.n	810e4c8 <__ieee754_pow+0x980>
 810e51e:	491c      	ldr	r1, [pc, #112]	; (810e590 <__ieee754_pow+0xa48>)
 810e520:	2000      	movs	r0, #0
 810e522:	f7ff bb30 	b.w	810db86 <__ieee754_pow+0x3e>
 810e526:	2000      	movs	r0, #0
 810e528:	2100      	movs	r1, #0
 810e52a:	f7ff bb2c 	b.w	810db86 <__ieee754_pow+0x3e>
 810e52e:	4630      	mov	r0, r6
 810e530:	4639      	mov	r1, r7
 810e532:	f7ff bb28 	b.w	810db86 <__ieee754_pow+0x3e>
 810e536:	9204      	str	r2, [sp, #16]
 810e538:	f7ff bb7a 	b.w	810dc30 <__ieee754_pow+0xe8>
 810e53c:	2300      	movs	r3, #0
 810e53e:	f7ff bb64 	b.w	810dc0a <__ieee754_pow+0xc2>
 810e542:	bf00      	nop
 810e544:	f3af 8000 	nop.w
 810e548:	00000000 	.word	0x00000000
 810e54c:	3fe62e43 	.word	0x3fe62e43
 810e550:	fefa39ef 	.word	0xfefa39ef
 810e554:	3fe62e42 	.word	0x3fe62e42
 810e558:	0ca86c39 	.word	0x0ca86c39
 810e55c:	be205c61 	.word	0xbe205c61
 810e560:	72bea4d0 	.word	0x72bea4d0
 810e564:	3e663769 	.word	0x3e663769
 810e568:	c5d26bf1 	.word	0xc5d26bf1
 810e56c:	3ebbbd41 	.word	0x3ebbbd41
 810e570:	af25de2c 	.word	0xaf25de2c
 810e574:	3f11566a 	.word	0x3f11566a
 810e578:	16bebd93 	.word	0x16bebd93
 810e57c:	3f66c16c 	.word	0x3f66c16c
 810e580:	5555553e 	.word	0x5555553e
 810e584:	3fc55555 	.word	0x3fc55555
 810e588:	3fe00000 	.word	0x3fe00000
 810e58c:	000fffff 	.word	0x000fffff
 810e590:	3ff00000 	.word	0x3ff00000
 810e594:	4090cbff 	.word	0x4090cbff
 810e598:	3f6f3400 	.word	0x3f6f3400
 810e59c:	652b82fe 	.word	0x652b82fe
 810e5a0:	3c971547 	.word	0x3c971547

0810e5a4 <__ieee754_sqrt>:
 810e5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e5a8:	ec55 4b10 	vmov	r4, r5, d0
 810e5ac:	4e55      	ldr	r6, [pc, #340]	; (810e704 <__ieee754_sqrt+0x160>)
 810e5ae:	43ae      	bics	r6, r5
 810e5b0:	ee10 0a10 	vmov	r0, s0
 810e5b4:	ee10 3a10 	vmov	r3, s0
 810e5b8:	462a      	mov	r2, r5
 810e5ba:	4629      	mov	r1, r5
 810e5bc:	d110      	bne.n	810e5e0 <__ieee754_sqrt+0x3c>
 810e5be:	ee10 2a10 	vmov	r2, s0
 810e5c2:	462b      	mov	r3, r5
 810e5c4:	f7f2 f844 	bl	8100650 <__aeabi_dmul>
 810e5c8:	4602      	mov	r2, r0
 810e5ca:	460b      	mov	r3, r1
 810e5cc:	4620      	mov	r0, r4
 810e5ce:	4629      	mov	r1, r5
 810e5d0:	f7f1 fe88 	bl	81002e4 <__adddf3>
 810e5d4:	4604      	mov	r4, r0
 810e5d6:	460d      	mov	r5, r1
 810e5d8:	ec45 4b10 	vmov	d0, r4, r5
 810e5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e5e0:	2d00      	cmp	r5, #0
 810e5e2:	dc10      	bgt.n	810e606 <__ieee754_sqrt+0x62>
 810e5e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810e5e8:	4330      	orrs	r0, r6
 810e5ea:	d0f5      	beq.n	810e5d8 <__ieee754_sqrt+0x34>
 810e5ec:	b15d      	cbz	r5, 810e606 <__ieee754_sqrt+0x62>
 810e5ee:	ee10 2a10 	vmov	r2, s0
 810e5f2:	462b      	mov	r3, r5
 810e5f4:	ee10 0a10 	vmov	r0, s0
 810e5f8:	f7f1 fe72 	bl	81002e0 <__aeabi_dsub>
 810e5fc:	4602      	mov	r2, r0
 810e5fe:	460b      	mov	r3, r1
 810e600:	f7f2 f950 	bl	81008a4 <__aeabi_ddiv>
 810e604:	e7e6      	b.n	810e5d4 <__ieee754_sqrt+0x30>
 810e606:	1512      	asrs	r2, r2, #20
 810e608:	d074      	beq.n	810e6f4 <__ieee754_sqrt+0x150>
 810e60a:	07d4      	lsls	r4, r2, #31
 810e60c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 810e610:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 810e614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810e618:	bf5e      	ittt	pl
 810e61a:	0fda      	lsrpl	r2, r3, #31
 810e61c:	005b      	lslpl	r3, r3, #1
 810e61e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 810e622:	2400      	movs	r4, #0
 810e624:	0fda      	lsrs	r2, r3, #31
 810e626:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 810e62a:	107f      	asrs	r7, r7, #1
 810e62c:	005b      	lsls	r3, r3, #1
 810e62e:	2516      	movs	r5, #22
 810e630:	4620      	mov	r0, r4
 810e632:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 810e636:	1886      	adds	r6, r0, r2
 810e638:	428e      	cmp	r6, r1
 810e63a:	bfde      	ittt	le
 810e63c:	1b89      	suble	r1, r1, r6
 810e63e:	18b0      	addle	r0, r6, r2
 810e640:	18a4      	addle	r4, r4, r2
 810e642:	0049      	lsls	r1, r1, #1
 810e644:	3d01      	subs	r5, #1
 810e646:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 810e64a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 810e64e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e652:	d1f0      	bne.n	810e636 <__ieee754_sqrt+0x92>
 810e654:	462a      	mov	r2, r5
 810e656:	f04f 0e20 	mov.w	lr, #32
 810e65a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 810e65e:	4281      	cmp	r1, r0
 810e660:	eb06 0c05 	add.w	ip, r6, r5
 810e664:	dc02      	bgt.n	810e66c <__ieee754_sqrt+0xc8>
 810e666:	d113      	bne.n	810e690 <__ieee754_sqrt+0xec>
 810e668:	459c      	cmp	ip, r3
 810e66a:	d811      	bhi.n	810e690 <__ieee754_sqrt+0xec>
 810e66c:	f1bc 0f00 	cmp.w	ip, #0
 810e670:	eb0c 0506 	add.w	r5, ip, r6
 810e674:	da43      	bge.n	810e6fe <__ieee754_sqrt+0x15a>
 810e676:	2d00      	cmp	r5, #0
 810e678:	db41      	blt.n	810e6fe <__ieee754_sqrt+0x15a>
 810e67a:	f100 0801 	add.w	r8, r0, #1
 810e67e:	1a09      	subs	r1, r1, r0
 810e680:	459c      	cmp	ip, r3
 810e682:	bf88      	it	hi
 810e684:	f101 31ff 	addhi.w	r1, r1, #4294967295
 810e688:	eba3 030c 	sub.w	r3, r3, ip
 810e68c:	4432      	add	r2, r6
 810e68e:	4640      	mov	r0, r8
 810e690:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 810e694:	f1be 0e01 	subs.w	lr, lr, #1
 810e698:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 810e69c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e6a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 810e6a4:	d1db      	bne.n	810e65e <__ieee754_sqrt+0xba>
 810e6a6:	430b      	orrs	r3, r1
 810e6a8:	d006      	beq.n	810e6b8 <__ieee754_sqrt+0x114>
 810e6aa:	1c50      	adds	r0, r2, #1
 810e6ac:	bf13      	iteet	ne
 810e6ae:	3201      	addne	r2, #1
 810e6b0:	3401      	addeq	r4, #1
 810e6b2:	4672      	moveq	r2, lr
 810e6b4:	f022 0201 	bicne.w	r2, r2, #1
 810e6b8:	1063      	asrs	r3, r4, #1
 810e6ba:	0852      	lsrs	r2, r2, #1
 810e6bc:	07e1      	lsls	r1, r4, #31
 810e6be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810e6c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810e6c6:	bf48      	it	mi
 810e6c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 810e6cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 810e6d0:	4614      	mov	r4, r2
 810e6d2:	e781      	b.n	810e5d8 <__ieee754_sqrt+0x34>
 810e6d4:	0ad9      	lsrs	r1, r3, #11
 810e6d6:	3815      	subs	r0, #21
 810e6d8:	055b      	lsls	r3, r3, #21
 810e6da:	2900      	cmp	r1, #0
 810e6dc:	d0fa      	beq.n	810e6d4 <__ieee754_sqrt+0x130>
 810e6de:	02cd      	lsls	r5, r1, #11
 810e6e0:	d50a      	bpl.n	810e6f8 <__ieee754_sqrt+0x154>
 810e6e2:	f1c2 0420 	rsb	r4, r2, #32
 810e6e6:	fa23 f404 	lsr.w	r4, r3, r4
 810e6ea:	1e55      	subs	r5, r2, #1
 810e6ec:	4093      	lsls	r3, r2
 810e6ee:	4321      	orrs	r1, r4
 810e6f0:	1b42      	subs	r2, r0, r5
 810e6f2:	e78a      	b.n	810e60a <__ieee754_sqrt+0x66>
 810e6f4:	4610      	mov	r0, r2
 810e6f6:	e7f0      	b.n	810e6da <__ieee754_sqrt+0x136>
 810e6f8:	0049      	lsls	r1, r1, #1
 810e6fa:	3201      	adds	r2, #1
 810e6fc:	e7ef      	b.n	810e6de <__ieee754_sqrt+0x13a>
 810e6fe:	4680      	mov	r8, r0
 810e700:	e7bd      	b.n	810e67e <__ieee754_sqrt+0xda>
 810e702:	bf00      	nop
 810e704:	7ff00000 	.word	0x7ff00000

0810e708 <with_errno>:
 810e708:	b570      	push	{r4, r5, r6, lr}
 810e70a:	4604      	mov	r4, r0
 810e70c:	460d      	mov	r5, r1
 810e70e:	4616      	mov	r6, r2
 810e710:	f000 f8c4 	bl	810e89c <__errno>
 810e714:	4629      	mov	r1, r5
 810e716:	6006      	str	r6, [r0, #0]
 810e718:	4620      	mov	r0, r4
 810e71a:	bd70      	pop	{r4, r5, r6, pc}

0810e71c <xflow>:
 810e71c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810e71e:	4614      	mov	r4, r2
 810e720:	461d      	mov	r5, r3
 810e722:	b108      	cbz	r0, 810e728 <xflow+0xc>
 810e724:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 810e728:	e9cd 2300 	strd	r2, r3, [sp]
 810e72c:	e9dd 2300 	ldrd	r2, r3, [sp]
 810e730:	4620      	mov	r0, r4
 810e732:	4629      	mov	r1, r5
 810e734:	f7f1 ff8c 	bl	8100650 <__aeabi_dmul>
 810e738:	2222      	movs	r2, #34	; 0x22
 810e73a:	b003      	add	sp, #12
 810e73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810e740:	f7ff bfe2 	b.w	810e708 <with_errno>

0810e744 <__math_uflow>:
 810e744:	b508      	push	{r3, lr}
 810e746:	2200      	movs	r2, #0
 810e748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810e74c:	f7ff ffe6 	bl	810e71c <xflow>
 810e750:	ec41 0b10 	vmov	d0, r0, r1
 810e754:	bd08      	pop	{r3, pc}

0810e756 <__math_oflow>:
 810e756:	b508      	push	{r3, lr}
 810e758:	2200      	movs	r2, #0
 810e75a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 810e75e:	f7ff ffdd 	bl	810e71c <xflow>
 810e762:	ec41 0b10 	vmov	d0, r0, r1
 810e766:	bd08      	pop	{r3, pc}

0810e768 <fabs>:
 810e768:	ec51 0b10 	vmov	r0, r1, d0
 810e76c:	ee10 2a10 	vmov	r2, s0
 810e770:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810e774:	ec43 2b10 	vmov	d0, r2, r3
 810e778:	4770      	bx	lr

0810e77a <finite>:
 810e77a:	b082      	sub	sp, #8
 810e77c:	ed8d 0b00 	vstr	d0, [sp]
 810e780:	9801      	ldr	r0, [sp, #4]
 810e782:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810e786:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810e78a:	0fc0      	lsrs	r0, r0, #31
 810e78c:	b002      	add	sp, #8
 810e78e:	4770      	bx	lr

0810e790 <scalbn>:
 810e790:	b570      	push	{r4, r5, r6, lr}
 810e792:	ec55 4b10 	vmov	r4, r5, d0
 810e796:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810e79a:	4606      	mov	r6, r0
 810e79c:	462b      	mov	r3, r5
 810e79e:	b99a      	cbnz	r2, 810e7c8 <scalbn+0x38>
 810e7a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810e7a4:	4323      	orrs	r3, r4
 810e7a6:	d036      	beq.n	810e816 <scalbn+0x86>
 810e7a8:	4b39      	ldr	r3, [pc, #228]	; (810e890 <scalbn+0x100>)
 810e7aa:	4629      	mov	r1, r5
 810e7ac:	ee10 0a10 	vmov	r0, s0
 810e7b0:	2200      	movs	r2, #0
 810e7b2:	f7f1 ff4d 	bl	8100650 <__aeabi_dmul>
 810e7b6:	4b37      	ldr	r3, [pc, #220]	; (810e894 <scalbn+0x104>)
 810e7b8:	429e      	cmp	r6, r3
 810e7ba:	4604      	mov	r4, r0
 810e7bc:	460d      	mov	r5, r1
 810e7be:	da10      	bge.n	810e7e2 <scalbn+0x52>
 810e7c0:	a32b      	add	r3, pc, #172	; (adr r3, 810e870 <scalbn+0xe0>)
 810e7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e7c6:	e03a      	b.n	810e83e <scalbn+0xae>
 810e7c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810e7cc:	428a      	cmp	r2, r1
 810e7ce:	d10c      	bne.n	810e7ea <scalbn+0x5a>
 810e7d0:	ee10 2a10 	vmov	r2, s0
 810e7d4:	4620      	mov	r0, r4
 810e7d6:	4629      	mov	r1, r5
 810e7d8:	f7f1 fd84 	bl	81002e4 <__adddf3>
 810e7dc:	4604      	mov	r4, r0
 810e7de:	460d      	mov	r5, r1
 810e7e0:	e019      	b.n	810e816 <scalbn+0x86>
 810e7e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810e7e6:	460b      	mov	r3, r1
 810e7e8:	3a36      	subs	r2, #54	; 0x36
 810e7ea:	4432      	add	r2, r6
 810e7ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810e7f0:	428a      	cmp	r2, r1
 810e7f2:	dd08      	ble.n	810e806 <scalbn+0x76>
 810e7f4:	2d00      	cmp	r5, #0
 810e7f6:	a120      	add	r1, pc, #128	; (adr r1, 810e878 <scalbn+0xe8>)
 810e7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e7fc:	da1c      	bge.n	810e838 <scalbn+0xa8>
 810e7fe:	a120      	add	r1, pc, #128	; (adr r1, 810e880 <scalbn+0xf0>)
 810e800:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e804:	e018      	b.n	810e838 <scalbn+0xa8>
 810e806:	2a00      	cmp	r2, #0
 810e808:	dd08      	ble.n	810e81c <scalbn+0x8c>
 810e80a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e80e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e812:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810e816:	ec45 4b10 	vmov	d0, r4, r5
 810e81a:	bd70      	pop	{r4, r5, r6, pc}
 810e81c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810e820:	da19      	bge.n	810e856 <scalbn+0xc6>
 810e822:	f24c 3350 	movw	r3, #50000	; 0xc350
 810e826:	429e      	cmp	r6, r3
 810e828:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810e82c:	dd0a      	ble.n	810e844 <scalbn+0xb4>
 810e82e:	a112      	add	r1, pc, #72	; (adr r1, 810e878 <scalbn+0xe8>)
 810e830:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e834:	2b00      	cmp	r3, #0
 810e836:	d1e2      	bne.n	810e7fe <scalbn+0x6e>
 810e838:	a30f      	add	r3, pc, #60	; (adr r3, 810e878 <scalbn+0xe8>)
 810e83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e83e:	f7f1 ff07 	bl	8100650 <__aeabi_dmul>
 810e842:	e7cb      	b.n	810e7dc <scalbn+0x4c>
 810e844:	a10a      	add	r1, pc, #40	; (adr r1, 810e870 <scalbn+0xe0>)
 810e846:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e84a:	2b00      	cmp	r3, #0
 810e84c:	d0b8      	beq.n	810e7c0 <scalbn+0x30>
 810e84e:	a10e      	add	r1, pc, #56	; (adr r1, 810e888 <scalbn+0xf8>)
 810e850:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e854:	e7b4      	b.n	810e7c0 <scalbn+0x30>
 810e856:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e85a:	3236      	adds	r2, #54	; 0x36
 810e85c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e860:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810e864:	4620      	mov	r0, r4
 810e866:	4b0c      	ldr	r3, [pc, #48]	; (810e898 <scalbn+0x108>)
 810e868:	2200      	movs	r2, #0
 810e86a:	e7e8      	b.n	810e83e <scalbn+0xae>
 810e86c:	f3af 8000 	nop.w
 810e870:	c2f8f359 	.word	0xc2f8f359
 810e874:	01a56e1f 	.word	0x01a56e1f
 810e878:	8800759c 	.word	0x8800759c
 810e87c:	7e37e43c 	.word	0x7e37e43c
 810e880:	8800759c 	.word	0x8800759c
 810e884:	fe37e43c 	.word	0xfe37e43c
 810e888:	c2f8f359 	.word	0xc2f8f359
 810e88c:	81a56e1f 	.word	0x81a56e1f
 810e890:	43500000 	.word	0x43500000
 810e894:	ffff3cb0 	.word	0xffff3cb0
 810e898:	3c900000 	.word	0x3c900000

0810e89c <__errno>:
 810e89c:	4b01      	ldr	r3, [pc, #4]	; (810e8a4 <__errno+0x8>)
 810e89e:	6818      	ldr	r0, [r3, #0]
 810e8a0:	4770      	bx	lr
 810e8a2:	bf00      	nop
 810e8a4:	10000010 	.word	0x10000010

0810e8a8 <__libc_init_array>:
 810e8a8:	b570      	push	{r4, r5, r6, lr}
 810e8aa:	4d0d      	ldr	r5, [pc, #52]	; (810e8e0 <__libc_init_array+0x38>)
 810e8ac:	4c0d      	ldr	r4, [pc, #52]	; (810e8e4 <__libc_init_array+0x3c>)
 810e8ae:	1b64      	subs	r4, r4, r5
 810e8b0:	10a4      	asrs	r4, r4, #2
 810e8b2:	2600      	movs	r6, #0
 810e8b4:	42a6      	cmp	r6, r4
 810e8b6:	d109      	bne.n	810e8cc <__libc_init_array+0x24>
 810e8b8:	4d0b      	ldr	r5, [pc, #44]	; (810e8e8 <__libc_init_array+0x40>)
 810e8ba:	4c0c      	ldr	r4, [pc, #48]	; (810e8ec <__libc_init_array+0x44>)
 810e8bc:	f000 f820 	bl	810e900 <_init>
 810e8c0:	1b64      	subs	r4, r4, r5
 810e8c2:	10a4      	asrs	r4, r4, #2
 810e8c4:	2600      	movs	r6, #0
 810e8c6:	42a6      	cmp	r6, r4
 810e8c8:	d105      	bne.n	810e8d6 <__libc_init_array+0x2e>
 810e8ca:	bd70      	pop	{r4, r5, r6, pc}
 810e8cc:	f855 3b04 	ldr.w	r3, [r5], #4
 810e8d0:	4798      	blx	r3
 810e8d2:	3601      	adds	r6, #1
 810e8d4:	e7ee      	b.n	810e8b4 <__libc_init_array+0xc>
 810e8d6:	f855 3b04 	ldr.w	r3, [r5], #4
 810e8da:	4798      	blx	r3
 810e8dc:	3601      	adds	r6, #1
 810e8de:	e7f2      	b.n	810e8c6 <__libc_init_array+0x1e>
 810e8e0:	0810ea18 	.word	0x0810ea18
 810e8e4:	0810ea18 	.word	0x0810ea18
 810e8e8:	0810ea18 	.word	0x0810ea18
 810e8ec:	0810ea1c 	.word	0x0810ea1c

0810e8f0 <memset>:
 810e8f0:	4402      	add	r2, r0
 810e8f2:	4603      	mov	r3, r0
 810e8f4:	4293      	cmp	r3, r2
 810e8f6:	d100      	bne.n	810e8fa <memset+0xa>
 810e8f8:	4770      	bx	lr
 810e8fa:	f803 1b01 	strb.w	r1, [r3], #1
 810e8fe:	e7f9      	b.n	810e8f4 <memset+0x4>

0810e900 <_init>:
 810e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e902:	bf00      	nop
 810e904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e906:	bc08      	pop	{r3}
 810e908:	469e      	mov	lr, r3
 810e90a:	4770      	bx	lr

0810e90c <_fini>:
 810e90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e90e:	bf00      	nop
 810e910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e912:	bc08      	pop	{r3}
 810e914:	469e      	mov	lr, r3
 810e916:	4770      	bx	lr
