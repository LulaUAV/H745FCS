
baremetal_2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e9c  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08108134  08108134  00018134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08108234  08108234  00018234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810823c  0810823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08108240  08108240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  10000000  08108244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005a8  10000028  0810826c  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100005d0  0810826c  000205d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003c289  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f1c  00000000  00000000  0005c2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001c978  00000000  00000000  000621fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000012f8  00000000  00000000  0007eb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00004428  00000000  00000000  0007fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e627  00000000  00000000  00084298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00030044  00000000  00000000  000c28bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00193f16  00000000  00000000  000f2903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00286819  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003c58  00000000  00000000  0028686c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000028 	.word	0x10000028
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810811c 	.word	0x0810811c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	1000002c 	.word	0x1000002c
 81002d4:	0810811c 	.word	0x0810811c

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b974 	b.w	81005d8 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	468e      	mov	lr, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	d14d      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100316:	428a      	cmp	r2, r1
 8100318:	4694      	mov	ip, r2
 810031a:	d969      	bls.n	81003f0 <__udivmoddi4+0xe8>
 810031c:	fab2 f282 	clz	r2, r2
 8100320:	b152      	cbz	r2, 8100338 <__udivmoddi4+0x30>
 8100322:	fa01 f302 	lsl.w	r3, r1, r2
 8100326:	f1c2 0120 	rsb	r1, r2, #32
 810032a:	fa20 f101 	lsr.w	r1, r0, r1
 810032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8100332:	ea41 0e03 	orr.w	lr, r1, r3
 8100336:	4094      	lsls	r4, r2
 8100338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 810033c:	0c21      	lsrs	r1, r4, #16
 810033e:	fbbe f6f8 	udiv	r6, lr, r8
 8100342:	fa1f f78c 	uxth.w	r7, ip
 8100346:	fb08 e316 	mls	r3, r8, r6, lr
 810034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810034e:	fb06 f107 	mul.w	r1, r6, r7
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f106 30ff 	add.w	r0, r6, #4294967295
 810035e:	f080 811f 	bcs.w	81005a0 <__udivmoddi4+0x298>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 811c 	bls.w	81005a0 <__udivmoddi4+0x298>
 8100368:	3e02      	subs	r6, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a5b      	subs	r3, r3, r1
 810036e:	b2a4      	uxth	r4, r4
 8100370:	fbb3 f0f8 	udiv	r0, r3, r8
 8100374:	fb08 3310 	mls	r3, r8, r0, r3
 8100378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810037c:	fb00 f707 	mul.w	r7, r0, r7
 8100380:	42a7      	cmp	r7, r4
 8100382:	d90a      	bls.n	810039a <__udivmoddi4+0x92>
 8100384:	eb1c 0404 	adds.w	r4, ip, r4
 8100388:	f100 33ff 	add.w	r3, r0, #4294967295
 810038c:	f080 810a 	bcs.w	81005a4 <__udivmoddi4+0x29c>
 8100390:	42a7      	cmp	r7, r4
 8100392:	f240 8107 	bls.w	81005a4 <__udivmoddi4+0x29c>
 8100396:	4464      	add	r4, ip
 8100398:	3802      	subs	r0, #2
 810039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810039e:	1be4      	subs	r4, r4, r7
 81003a0:	2600      	movs	r6, #0
 81003a2:	b11d      	cbz	r5, 81003ac <__udivmoddi4+0xa4>
 81003a4:	40d4      	lsrs	r4, r2
 81003a6:	2300      	movs	r3, #0
 81003a8:	e9c5 4300 	strd	r4, r3, [r5]
 81003ac:	4631      	mov	r1, r6
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d909      	bls.n	81003ca <__udivmoddi4+0xc2>
 81003b6:	2d00      	cmp	r5, #0
 81003b8:	f000 80ef 	beq.w	810059a <__udivmoddi4+0x292>
 81003bc:	2600      	movs	r6, #0
 81003be:	e9c5 0100 	strd	r0, r1, [r5]
 81003c2:	4630      	mov	r0, r6
 81003c4:	4631      	mov	r1, r6
 81003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ca:	fab3 f683 	clz	r6, r3
 81003ce:	2e00      	cmp	r6, #0
 81003d0:	d14a      	bne.n	8100468 <__udivmoddi4+0x160>
 81003d2:	428b      	cmp	r3, r1
 81003d4:	d302      	bcc.n	81003dc <__udivmoddi4+0xd4>
 81003d6:	4282      	cmp	r2, r0
 81003d8:	f200 80f9 	bhi.w	81005ce <__udivmoddi4+0x2c6>
 81003dc:	1a84      	subs	r4, r0, r2
 81003de:	eb61 0303 	sbc.w	r3, r1, r3
 81003e2:	2001      	movs	r0, #1
 81003e4:	469e      	mov	lr, r3
 81003e6:	2d00      	cmp	r5, #0
 81003e8:	d0e0      	beq.n	81003ac <__udivmoddi4+0xa4>
 81003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 81003ee:	e7dd      	b.n	81003ac <__udivmoddi4+0xa4>
 81003f0:	b902      	cbnz	r2, 81003f4 <__udivmoddi4+0xec>
 81003f2:	deff      	udf	#255	; 0xff
 81003f4:	fab2 f282 	clz	r2, r2
 81003f8:	2a00      	cmp	r2, #0
 81003fa:	f040 8092 	bne.w	8100522 <__udivmoddi4+0x21a>
 81003fe:	eba1 010c 	sub.w	r1, r1, ip
 8100402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100406:	fa1f fe8c 	uxth.w	lr, ip
 810040a:	2601      	movs	r6, #1
 810040c:	0c20      	lsrs	r0, r4, #16
 810040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100412:	fb07 1113 	mls	r1, r7, r3, r1
 8100416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810041a:	fb0e f003 	mul.w	r0, lr, r3
 810041e:	4288      	cmp	r0, r1
 8100420:	d908      	bls.n	8100434 <__udivmoddi4+0x12c>
 8100422:	eb1c 0101 	adds.w	r1, ip, r1
 8100426:	f103 38ff 	add.w	r8, r3, #4294967295
 810042a:	d202      	bcs.n	8100432 <__udivmoddi4+0x12a>
 810042c:	4288      	cmp	r0, r1
 810042e:	f200 80cb 	bhi.w	81005c8 <__udivmoddi4+0x2c0>
 8100432:	4643      	mov	r3, r8
 8100434:	1a09      	subs	r1, r1, r0
 8100436:	b2a4      	uxth	r4, r4
 8100438:	fbb1 f0f7 	udiv	r0, r1, r7
 810043c:	fb07 1110 	mls	r1, r7, r0, r1
 8100440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100444:	fb0e fe00 	mul.w	lr, lr, r0
 8100448:	45a6      	cmp	lr, r4
 810044a:	d908      	bls.n	810045e <__udivmoddi4+0x156>
 810044c:	eb1c 0404 	adds.w	r4, ip, r4
 8100450:	f100 31ff 	add.w	r1, r0, #4294967295
 8100454:	d202      	bcs.n	810045c <__udivmoddi4+0x154>
 8100456:	45a6      	cmp	lr, r4
 8100458:	f200 80bb 	bhi.w	81005d2 <__udivmoddi4+0x2ca>
 810045c:	4608      	mov	r0, r1
 810045e:	eba4 040e 	sub.w	r4, r4, lr
 8100462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100466:	e79c      	b.n	81003a2 <__udivmoddi4+0x9a>
 8100468:	f1c6 0720 	rsb	r7, r6, #32
 810046c:	40b3      	lsls	r3, r6
 810046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8100472:	ea4c 0c03 	orr.w	ip, ip, r3
 8100476:	fa20 f407 	lsr.w	r4, r0, r7
 810047a:	fa01 f306 	lsl.w	r3, r1, r6
 810047e:	431c      	orrs	r4, r3
 8100480:	40f9      	lsrs	r1, r7
 8100482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100486:	fa00 f306 	lsl.w	r3, r0, r6
 810048a:	fbb1 f8f9 	udiv	r8, r1, r9
 810048e:	0c20      	lsrs	r0, r4, #16
 8100490:	fa1f fe8c 	uxth.w	lr, ip
 8100494:	fb09 1118 	mls	r1, r9, r8, r1
 8100498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810049c:	fb08 f00e 	mul.w	r0, r8, lr
 81004a0:	4288      	cmp	r0, r1
 81004a2:	fa02 f206 	lsl.w	r2, r2, r6
 81004a6:	d90b      	bls.n	81004c0 <__udivmoddi4+0x1b8>
 81004a8:	eb1c 0101 	adds.w	r1, ip, r1
 81004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 81004b0:	f080 8088 	bcs.w	81005c4 <__udivmoddi4+0x2bc>
 81004b4:	4288      	cmp	r0, r1
 81004b6:	f240 8085 	bls.w	81005c4 <__udivmoddi4+0x2bc>
 81004ba:	f1a8 0802 	sub.w	r8, r8, #2
 81004be:	4461      	add	r1, ip
 81004c0:	1a09      	subs	r1, r1, r0
 81004c2:	b2a4      	uxth	r4, r4
 81004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 81004c8:	fb09 1110 	mls	r1, r9, r0, r1
 81004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 81004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 81004d4:	458e      	cmp	lr, r1
 81004d6:	d908      	bls.n	81004ea <__udivmoddi4+0x1e2>
 81004d8:	eb1c 0101 	adds.w	r1, ip, r1
 81004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 81004e0:	d26c      	bcs.n	81005bc <__udivmoddi4+0x2b4>
 81004e2:	458e      	cmp	lr, r1
 81004e4:	d96a      	bls.n	81005bc <__udivmoddi4+0x2b4>
 81004e6:	3802      	subs	r0, #2
 81004e8:	4461      	add	r1, ip
 81004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81004ee:	fba0 9402 	umull	r9, r4, r0, r2
 81004f2:	eba1 010e 	sub.w	r1, r1, lr
 81004f6:	42a1      	cmp	r1, r4
 81004f8:	46c8      	mov	r8, r9
 81004fa:	46a6      	mov	lr, r4
 81004fc:	d356      	bcc.n	81005ac <__udivmoddi4+0x2a4>
 81004fe:	d053      	beq.n	81005a8 <__udivmoddi4+0x2a0>
 8100500:	b15d      	cbz	r5, 810051a <__udivmoddi4+0x212>
 8100502:	ebb3 0208 	subs.w	r2, r3, r8
 8100506:	eb61 010e 	sbc.w	r1, r1, lr
 810050a:	fa01 f707 	lsl.w	r7, r1, r7
 810050e:	fa22 f306 	lsr.w	r3, r2, r6
 8100512:	40f1      	lsrs	r1, r6
 8100514:	431f      	orrs	r7, r3
 8100516:	e9c5 7100 	strd	r7, r1, [r5]
 810051a:	2600      	movs	r6, #0
 810051c:	4631      	mov	r1, r6
 810051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100522:	f1c2 0320 	rsb	r3, r2, #32
 8100526:	40d8      	lsrs	r0, r3
 8100528:	fa0c fc02 	lsl.w	ip, ip, r2
 810052c:	fa21 f303 	lsr.w	r3, r1, r3
 8100530:	4091      	lsls	r1, r2
 8100532:	4301      	orrs	r1, r0
 8100534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100538:	fa1f fe8c 	uxth.w	lr, ip
 810053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8100540:	fb07 3610 	mls	r6, r7, r0, r3
 8100544:	0c0b      	lsrs	r3, r1, #16
 8100546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 810054a:	fb00 f60e 	mul.w	r6, r0, lr
 810054e:	429e      	cmp	r6, r3
 8100550:	fa04 f402 	lsl.w	r4, r4, r2
 8100554:	d908      	bls.n	8100568 <__udivmoddi4+0x260>
 8100556:	eb1c 0303 	adds.w	r3, ip, r3
 810055a:	f100 38ff 	add.w	r8, r0, #4294967295
 810055e:	d22f      	bcs.n	81005c0 <__udivmoddi4+0x2b8>
 8100560:	429e      	cmp	r6, r3
 8100562:	d92d      	bls.n	81005c0 <__udivmoddi4+0x2b8>
 8100564:	3802      	subs	r0, #2
 8100566:	4463      	add	r3, ip
 8100568:	1b9b      	subs	r3, r3, r6
 810056a:	b289      	uxth	r1, r1
 810056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8100570:	fb07 3316 	mls	r3, r7, r6, r3
 8100574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100578:	fb06 f30e 	mul.w	r3, r6, lr
 810057c:	428b      	cmp	r3, r1
 810057e:	d908      	bls.n	8100592 <__udivmoddi4+0x28a>
 8100580:	eb1c 0101 	adds.w	r1, ip, r1
 8100584:	f106 38ff 	add.w	r8, r6, #4294967295
 8100588:	d216      	bcs.n	81005b8 <__udivmoddi4+0x2b0>
 810058a:	428b      	cmp	r3, r1
 810058c:	d914      	bls.n	81005b8 <__udivmoddi4+0x2b0>
 810058e:	3e02      	subs	r6, #2
 8100590:	4461      	add	r1, ip
 8100592:	1ac9      	subs	r1, r1, r3
 8100594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100598:	e738      	b.n	810040c <__udivmoddi4+0x104>
 810059a:	462e      	mov	r6, r5
 810059c:	4628      	mov	r0, r5
 810059e:	e705      	b.n	81003ac <__udivmoddi4+0xa4>
 81005a0:	4606      	mov	r6, r0
 81005a2:	e6e3      	b.n	810036c <__udivmoddi4+0x64>
 81005a4:	4618      	mov	r0, r3
 81005a6:	e6f8      	b.n	810039a <__udivmoddi4+0x92>
 81005a8:	454b      	cmp	r3, r9
 81005aa:	d2a9      	bcs.n	8100500 <__udivmoddi4+0x1f8>
 81005ac:	ebb9 0802 	subs.w	r8, r9, r2
 81005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 81005b4:	3801      	subs	r0, #1
 81005b6:	e7a3      	b.n	8100500 <__udivmoddi4+0x1f8>
 81005b8:	4646      	mov	r6, r8
 81005ba:	e7ea      	b.n	8100592 <__udivmoddi4+0x28a>
 81005bc:	4620      	mov	r0, r4
 81005be:	e794      	b.n	81004ea <__udivmoddi4+0x1e2>
 81005c0:	4640      	mov	r0, r8
 81005c2:	e7d1      	b.n	8100568 <__udivmoddi4+0x260>
 81005c4:	46d0      	mov	r8, sl
 81005c6:	e77b      	b.n	81004c0 <__udivmoddi4+0x1b8>
 81005c8:	3b02      	subs	r3, #2
 81005ca:	4461      	add	r1, ip
 81005cc:	e732      	b.n	8100434 <__udivmoddi4+0x12c>
 81005ce:	4630      	mov	r0, r6
 81005d0:	e709      	b.n	81003e6 <__udivmoddi4+0xde>
 81005d2:	4464      	add	r4, ip
 81005d4:	3802      	subs	r0, #2
 81005d6:	e742      	b.n	810045e <__udivmoddi4+0x156>

081005d8 <__aeabi_idiv0>:
 81005d8:	4770      	bx	lr
 81005da:	bf00      	nop
 81005dc:	0000      	movs	r0, r0
	...

081005e0 <_ZN8EntryAppC1Ev>:
//  *DWT_LAR = 0xC5ACCE55; // enable access
//  *DWT_CYCCNT = 0; // reset the counter
//  *DWT_CONTROL |= 1 ; // enable the counter
//}

EntryApp::EntryApp()
 81005e0:	b510      	push	{r4, lr}
 81005e2:	4604      	mov	r4, r0
 81005e4:	f000 f9cc 	bl	8100980 <_ZN6Bmp280C1Ev>
 81005e8:	f104 0048 	add.w	r0, r4, #72	; 0x48
 81005ec:	f001 f83a 	bl	8101664 <_ZN3GPSC1Ev>
 81005f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 81005f4:	f000 fe16 	bl	8101224 <_ZN3IMUC1Ev>
 81005f8:	a10a      	add	r1, pc, #40	; (adr r1, 8100624 <_ZN8EntryAppC1Ev+0x44>)
 81005fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 81005fe:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8100618 <_ZN8EntryAppC1Ev+0x38>
 8100602:	e9c4 0132 	strd	r0, r1, [r4, #200]	; 0xc8
 8100606:	ed84 7b30 	vstr	d7, [r4, #192]	; 0xc0
 810060a:	4b05      	ldr	r3, [pc, #20]	; (8100620 <_ZN8EntryAppC1Ev+0x40>)
 810060c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
{

}
 8100610:	4620      	mov	r0, r4
 8100612:	bd10      	pop	{r4, pc}
 8100614:	f3af 8000 	nop.w
 8100618:	38000000 	.word	0x38000000
 810061c:	38000010 	.word	0x38000010
 8100620:	38000040 	.word	0x38000040
 8100624:	38000020 	.word	0x38000020
 8100628:	38000030 	.word	0x38000030

0810062c <_ZN8EntryApp10RunSensorsEv>:
 * @note, You can comment out a task if you don't want
 * data from it.
 * @retval None.
 */
void EntryApp::RunSensors()
{
 810062c:	b530      	push	{r4, r5, lr}
 810062e:	4604      	mov	r4, r0
 8100630:	b085      	sub	sp, #20
void EntryApp::AccelTask()
{
	HAL_HSEM_FastTake(HSEM_ACC);
//	EnableTiming();
//	x = *DWT_CYCCNT;
	accelData accel = imu.GetAccelData();
 8100632:	f100 0568 	add.w	r5, r0, #104	; 0x68
	HAL_HSEM_FastTake(HSEM_ACC);
 8100636:	2001      	movs	r0, #1
 8100638:	f002 ffec 	bl	8103614 <HAL_HSEM_FastTake>
	accelData accel = imu.GetAccelData();
 810063c:	4628      	mov	r0, r5
 810063e:	f000 fbdf 	bl	8100e00 <_ZN3IMU12GetAccelDataEv>
//	y = *DWT_CYCCNT;
//	Cycles = (y - x);
	acc_values_m4->x = accel.x;
 8100642:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
	accelData accel = imu.GetAccelData();
 8100646:	ed8d 0a01 	vstr	s0, [sp, #4]
	acc_values_m4->x = accel.x;
 810064a:	ed83 0a00 	vstr	s0, [r3]
	acc_values_m4->y = accel.y;
	acc_values_m4->z = accel.z;
	//HAL_HSEM_FastTake(HSEM_ACC);
	HAL_HSEM_Release(HSEM_ACC, 0);
 810064e:	2100      	movs	r1, #0
	acc_values_m4->y = accel.y;
 8100650:	edc3 0a01 	vstr	s1, [r3, #4]
	HAL_HSEM_Release(HSEM_ACC, 0);
 8100654:	2001      	movs	r0, #1
	acc_values_m4->z = accel.z;
 8100656:	ed83 1a02 	vstr	s2, [r3, #8]
	accelData accel = imu.GetAccelData();
 810065a:	edcd 0a02 	vstr	s1, [sp, #8]
 810065e:	ed8d 1a03 	vstr	s2, [sp, #12]
	HAL_HSEM_Release(HSEM_ACC, 0);
 8100662:	f002 ffe5 	bl	8103630 <HAL_HSEM_Release>
 * @brief Processes Mag Data from IMU
 * @retval None
 */
void EntryApp::MagTask()
{
	HAL_HSEM_FastTake(HSEM_MAG);
 8100666:	2003      	movs	r0, #3
 8100668:	f002 ffd4 	bl	8103614 <HAL_HSEM_FastTake>
	magData mag = imu.GetMagData();
 810066c:	4628      	mov	r0, r5
 810066e:	f000 fc07 	bl	8100e80 <_ZN3IMU10GetMagDataEv>
	mag_values_m4->x = mag.x;
 8100672:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	magData mag = imu.GetMagData();
 8100676:	ed8d 0a01 	vstr	s0, [sp, #4]
	mag_values_m4->x = mag.x;
 810067a:	ed83 0a00 	vstr	s0, [r3]
	mag_values_m4->y = mag.y;
	mag_values_m4->z = mag.z;
	//HAL_HSEM_FastTake(HSEM_MAG);
	HAL_HSEM_Release(HSEM_MAG, 0);
 810067e:	2100      	movs	r1, #0
	mag_values_m4->y = mag.y;
 8100680:	edc3 0a01 	vstr	s1, [r3, #4]
	HAL_HSEM_Release(HSEM_MAG, 0);
 8100684:	2003      	movs	r0, #3
	mag_values_m4->z = mag.z;
 8100686:	ed83 1a02 	vstr	s2, [r3, #8]
	magData mag = imu.GetMagData();
 810068a:	edcd 0a02 	vstr	s1, [sp, #8]
 810068e:	ed8d 1a03 	vstr	s2, [sp, #12]
	HAL_HSEM_Release(HSEM_MAG, 0);
 8100692:	f002 ffcd 	bl	8103630 <HAL_HSEM_Release>
 * from the IMU
 * @retval none
 */
void EntryApp::GyroTask()
{
	HAL_HSEM_FastTake(HSEM_GYRO);
 8100696:	2002      	movs	r0, #2
 8100698:	f002 ffbc 	bl	8103614 <HAL_HSEM_FastTake>
	gyroData gyro = imu.GetGyroData();
 810069c:	4628      	mov	r0, r5
 810069e:	f000 fb6f 	bl	8100d80 <_ZN3IMU11GetGyroDataEv>
	gyro_values_m4->x = gyro.x;
 81006a2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	gyroData gyro = imu.GetGyroData();
 81006a6:	ed8d 0a01 	vstr	s0, [sp, #4]
	gyro_values_m4->y = gyro.y;
	gyro_values_m4->z = gyro.z;
//	HAL_HSEM_FastTake(HSEM_GYRO);
	HAL_HSEM_Release(HSEM_GYRO, 0);
 81006aa:	2100      	movs	r1, #0
 81006ac:	2002      	movs	r0, #2
	gyro_values_m4->x = gyro.x;
 81006ae:	ed83 0a00 	vstr	s0, [r3]
	gyroData gyro = imu.GetGyroData();
 81006b2:	edcd 0a02 	vstr	s1, [sp, #8]
	gyro_values_m4->y = gyro.y;
 81006b6:	edc3 0a01 	vstr	s1, [r3, #4]
	gyroData gyro = imu.GetGyroData();
 81006ba:	ed8d 1a03 	vstr	s2, [sp, #12]
	gyro_values_m4->z = gyro.z;
 81006be:	ed83 1a02 	vstr	s2, [r3, #8]
}
 81006c2:	b005      	add	sp, #20
 81006c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_HSEM_Release(HSEM_GYRO, 0);
 81006c8:	f002 bfb2 	b.w	8103630 <HAL_HSEM_Release>

081006cc <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006cc:	4b07      	ldr	r3, [pc, #28]	; (81006ec <SystemInit+0x20>)
 81006ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 81006d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 81006d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006da:	691a      	ldr	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81006dc:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006e0:	f042 0210 	orr.w	r2, r2, #16
 81006e4:	611a      	str	r2, [r3, #16]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81006e6:	6099      	str	r1, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81006e8:	4770      	bx	lr
 81006ea:	bf00      	nop
 81006ec:	e000ed00 	.word	0xe000ed00

081006f0 <_ZN6Bmp28016ReadCoefficientsEv>:

/*
 *  @brief  Reads the factory-set coefficients
 */
void Bmp280::ReadCoefficients()
{
 81006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 81006f2:	4605      	mov	r5, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81006f4:	4ea0      	ldr	r6, [pc, #640]	; (8100978 <_ZN6Bmp28016ReadCoefficientsEv+0x288>)
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81006f6:	4fa1      	ldr	r7, [pc, #644]	; (810097c <_ZN6Bmp28016ReadCoefficientsEv+0x28c>)
  SerialData[0] = Register | address::SPI_READ;
 81006f8:	2388      	movs	r3, #136	; 0x88
 81006fa:	f805 3f18 	strb.w	r3, [r5, #24]!
{
 81006fe:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100700:	2200      	movs	r2, #0
 8100702:	2110      	movs	r1, #16
 8100704:	4630      	mov	r0, r6
 8100706:	f002 ff81 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810070a:	230a      	movs	r3, #10
 810070c:	2201      	movs	r2, #1
 810070e:	4629      	mov	r1, r5
 8100710:	4638      	mov	r0, r7
 8100712:	f005 fdf1 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8100716:	230a      	movs	r3, #10
 8100718:	2202      	movs	r2, #2
 810071a:	4629      	mov	r1, r5
 810071c:	4638      	mov	r0, r7
 810071e:	f006 fa2d 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100722:	2201      	movs	r2, #1
 8100724:	2110      	movs	r1, #16
 8100726:	4630      	mov	r0, r6
 8100728:	f002 ff70 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_T1 = Read16BitLE(address::REG_DIG_T1);
 810072c:	8b23      	ldrh	r3, [r4, #24]
 810072e:	8623      	strh	r3, [r4, #48]	; 0x30
  SerialData[0] = Register | address::SPI_READ;
 8100730:	238a      	movs	r3, #138	; 0x8a
 8100732:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100734:	2200      	movs	r2, #0
 8100736:	2110      	movs	r1, #16
 8100738:	4630      	mov	r0, r6
 810073a:	f002 ff67 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810073e:	230a      	movs	r3, #10
 8100740:	2201      	movs	r2, #1
 8100742:	4629      	mov	r1, r5
 8100744:	4638      	mov	r0, r7
 8100746:	f005 fdd7 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810074a:	230a      	movs	r3, #10
 810074c:	2202      	movs	r2, #2
 810074e:	4629      	mov	r1, r5
 8100750:	4638      	mov	r0, r7
 8100752:	f006 fa13 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100756:	2201      	movs	r2, #1
 8100758:	2110      	movs	r1, #16
 810075a:	4630      	mov	r0, r6
 810075c:	f002 ff56 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_T2 = Read16BitLE(address::REG_DIG_T2);
 8100760:	8b23      	ldrh	r3, [r4, #24]
 8100762:	8663      	strh	r3, [r4, #50]	; 0x32
  SerialData[0] = Register | address::SPI_READ;
 8100764:	238c      	movs	r3, #140	; 0x8c
 8100766:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100768:	2200      	movs	r2, #0
 810076a:	2110      	movs	r1, #16
 810076c:	4630      	mov	r0, r6
 810076e:	f002 ff4d 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8100772:	230a      	movs	r3, #10
 8100774:	2201      	movs	r2, #1
 8100776:	4629      	mov	r1, r5
 8100778:	4638      	mov	r0, r7
 810077a:	f005 fdbd 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810077e:	230a      	movs	r3, #10
 8100780:	2202      	movs	r2, #2
 8100782:	4629      	mov	r1, r5
 8100784:	4638      	mov	r0, r7
 8100786:	f006 f9f9 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810078a:	2201      	movs	r2, #1
 810078c:	2110      	movs	r1, #16
 810078e:	4630      	mov	r0, r6
 8100790:	f002 ff3c 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_T3 = Read16BitLE(address::REG_DIG_T3);
 8100794:	8b23      	ldrh	r3, [r4, #24]
 8100796:	86a3      	strh	r3, [r4, #52]	; 0x34
  SerialData[0] = Register | address::SPI_READ;
 8100798:	238e      	movs	r3, #142	; 0x8e
 810079a:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810079c:	2200      	movs	r2, #0
 810079e:	2110      	movs	r1, #16
 81007a0:	4630      	mov	r0, r6
 81007a2:	f002 ff33 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81007a6:	230a      	movs	r3, #10
 81007a8:	2201      	movs	r2, #1
 81007aa:	4629      	mov	r1, r5
 81007ac:	4638      	mov	r0, r7
 81007ae:	f005 fda3 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81007b2:	230a      	movs	r3, #10
 81007b4:	2202      	movs	r2, #2
 81007b6:	4629      	mov	r1, r5
 81007b8:	4638      	mov	r0, r7
 81007ba:	f006 f9df 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81007be:	2201      	movs	r2, #1
 81007c0:	2110      	movs	r1, #16
 81007c2:	4630      	mov	r0, r6
 81007c4:	f002 ff22 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_P1 = Read16BitLE(address::REG_DIG_P1);
 81007c8:	8b23      	ldrh	r3, [r4, #24]
 81007ca:	86e3      	strh	r3, [r4, #54]	; 0x36
  SerialData[0] = Register | address::SPI_READ;
 81007cc:	2390      	movs	r3, #144	; 0x90
 81007ce:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81007d0:	2200      	movs	r2, #0
 81007d2:	2110      	movs	r1, #16
 81007d4:	4630      	mov	r0, r6
 81007d6:	f002 ff19 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81007da:	230a      	movs	r3, #10
 81007dc:	2201      	movs	r2, #1
 81007de:	4629      	mov	r1, r5
 81007e0:	4638      	mov	r0, r7
 81007e2:	f005 fd89 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81007e6:	230a      	movs	r3, #10
 81007e8:	2202      	movs	r2, #2
 81007ea:	4629      	mov	r1, r5
 81007ec:	4638      	mov	r0, r7
 81007ee:	f006 f9c5 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81007f2:	2201      	movs	r2, #1
 81007f4:	2110      	movs	r1, #16
 81007f6:	4630      	mov	r0, r6
 81007f8:	f002 ff08 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_P2 = Read16BitLE(address::REG_DIG_P2);
 81007fc:	8b23      	ldrh	r3, [r4, #24]
 81007fe:	8723      	strh	r3, [r4, #56]	; 0x38
  SerialData[0] = Register | address::SPI_READ;
 8100800:	2392      	movs	r3, #146	; 0x92
 8100802:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100804:	2200      	movs	r2, #0
 8100806:	2110      	movs	r1, #16
 8100808:	4630      	mov	r0, r6
 810080a:	f002 feff 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810080e:	230a      	movs	r3, #10
 8100810:	2201      	movs	r2, #1
 8100812:	4629      	mov	r1, r5
 8100814:	4638      	mov	r0, r7
 8100816:	f005 fd6f 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810081a:	230a      	movs	r3, #10
 810081c:	2202      	movs	r2, #2
 810081e:	4629      	mov	r1, r5
 8100820:	4638      	mov	r0, r7
 8100822:	f006 f9ab 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100826:	2201      	movs	r2, #1
 8100828:	2110      	movs	r1, #16
 810082a:	4630      	mov	r0, r6
 810082c:	f002 feee 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_P3 = Read16BitLE(address::REG_DIG_P3);
 8100830:	8b23      	ldrh	r3, [r4, #24]
 8100832:	8763      	strh	r3, [r4, #58]	; 0x3a
  SerialData[0] = Register | address::SPI_READ;
 8100834:	2394      	movs	r3, #148	; 0x94
 8100836:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100838:	2200      	movs	r2, #0
 810083a:	2110      	movs	r1, #16
 810083c:	4630      	mov	r0, r6
 810083e:	f002 fee5 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8100842:	230a      	movs	r3, #10
 8100844:	2201      	movs	r2, #1
 8100846:	4629      	mov	r1, r5
 8100848:	4638      	mov	r0, r7
 810084a:	f005 fd55 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810084e:	230a      	movs	r3, #10
 8100850:	2202      	movs	r2, #2
 8100852:	4629      	mov	r1, r5
 8100854:	4638      	mov	r0, r7
 8100856:	f006 f991 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810085a:	2201      	movs	r2, #1
 810085c:	2110      	movs	r1, #16
 810085e:	4630      	mov	r0, r6
 8100860:	f002 fed4 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_P4 = Read16BitLE(address::REG_DIG_P4);
 8100864:	8b23      	ldrh	r3, [r4, #24]
 8100866:	87a3      	strh	r3, [r4, #60]	; 0x3c
  SerialData[0] = Register | address::SPI_READ;
 8100868:	2396      	movs	r3, #150	; 0x96
 810086a:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810086c:	2200      	movs	r2, #0
 810086e:	2110      	movs	r1, #16
 8100870:	4630      	mov	r0, r6
 8100872:	f002 fecb 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8100876:	230a      	movs	r3, #10
 8100878:	2201      	movs	r2, #1
 810087a:	4629      	mov	r1, r5
 810087c:	4638      	mov	r0, r7
 810087e:	f005 fd3b 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8100882:	230a      	movs	r3, #10
 8100884:	2202      	movs	r2, #2
 8100886:	4629      	mov	r1, r5
 8100888:	4638      	mov	r0, r7
 810088a:	f006 f977 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810088e:	2201      	movs	r2, #1
 8100890:	2110      	movs	r1, #16
 8100892:	4630      	mov	r0, r6
 8100894:	f002 feba 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_P5 = Read16BitLE(address::REG_DIG_P5);
 8100898:	8b23      	ldrh	r3, [r4, #24]
 810089a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  SerialData[0] = Register | address::SPI_READ;
 810089c:	2398      	movs	r3, #152	; 0x98
 810089e:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81008a0:	2200      	movs	r2, #0
 81008a2:	2110      	movs	r1, #16
 81008a4:	4630      	mov	r0, r6
 81008a6:	f002 feb1 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81008aa:	230a      	movs	r3, #10
 81008ac:	2201      	movs	r2, #1
 81008ae:	4629      	mov	r1, r5
 81008b0:	4638      	mov	r0, r7
 81008b2:	f005 fd21 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81008b6:	230a      	movs	r3, #10
 81008b8:	2202      	movs	r2, #2
 81008ba:	4629      	mov	r1, r5
 81008bc:	4638      	mov	r0, r7
 81008be:	f006 f95d 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81008c2:	2201      	movs	r2, #1
 81008c4:	2110      	movs	r1, #16
 81008c6:	4630      	mov	r0, r6
 81008c8:	f002 fea0 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_P6 = Read16BitLE(address::REG_DIG_P6);
 81008cc:	8b23      	ldrh	r3, [r4, #24]
 81008ce:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  SerialData[0] = Register | address::SPI_READ;
 81008d2:	239a      	movs	r3, #154	; 0x9a
 81008d4:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81008d6:	2200      	movs	r2, #0
 81008d8:	2110      	movs	r1, #16
 81008da:	4630      	mov	r0, r6
 81008dc:	f002 fe96 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81008e0:	230a      	movs	r3, #10
 81008e2:	2201      	movs	r2, #1
 81008e4:	4629      	mov	r1, r5
 81008e6:	4638      	mov	r0, r7
 81008e8:	f005 fd06 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81008ec:	230a      	movs	r3, #10
 81008ee:	2202      	movs	r2, #2
 81008f0:	4629      	mov	r1, r5
 81008f2:	4638      	mov	r0, r7
 81008f4:	f006 f942 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81008f8:	2201      	movs	r2, #1
 81008fa:	2110      	movs	r1, #16
 81008fc:	4630      	mov	r0, r6
 81008fe:	f002 fe85 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_P7 = Read16BitLE(address::REG_DIG_P7);
 8100902:	8b23      	ldrh	r3, [r4, #24]
 8100904:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  SerialData[0] = Register | address::SPI_READ;
 8100908:	239c      	movs	r3, #156	; 0x9c
 810090a:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810090c:	2200      	movs	r2, #0
 810090e:	2110      	movs	r1, #16
 8100910:	4630      	mov	r0, r6
 8100912:	f002 fe7b 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8100916:	230a      	movs	r3, #10
 8100918:	2201      	movs	r2, #1
 810091a:	4629      	mov	r1, r5
 810091c:	4638      	mov	r0, r7
 810091e:	f005 fceb 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8100922:	230a      	movs	r3, #10
 8100924:	2202      	movs	r2, #2
 8100926:	4629      	mov	r1, r5
 8100928:	4638      	mov	r0, r7
 810092a:	f006 f927 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810092e:	2201      	movs	r2, #1
 8100930:	2110      	movs	r1, #16
 8100932:	4630      	mov	r0, r6
 8100934:	f002 fe6a 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_P8 = Read16BitLE(address::REG_DIG_P8);
 8100938:	8b23      	ldrh	r3, [r4, #24]
 810093a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  SerialData[0] = Register | address::SPI_READ;
 810093e:	239e      	movs	r3, #158	; 0x9e
 8100940:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100942:	2200      	movs	r2, #0
 8100944:	2110      	movs	r1, #16
 8100946:	4630      	mov	r0, r6
 8100948:	f002 fe60 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810094c:	230a      	movs	r3, #10
 810094e:	2201      	movs	r2, #1
 8100950:	4629      	mov	r1, r5
 8100952:	4638      	mov	r0, r7
 8100954:	f005 fcd0 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8100958:	230a      	movs	r3, #10
 810095a:	4629      	mov	r1, r5
 810095c:	2202      	movs	r2, #2
 810095e:	4638      	mov	r0, r7
 8100960:	f006 f90c 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100964:	2201      	movs	r2, #1
 8100966:	2110      	movs	r1, #16
 8100968:	4630      	mov	r0, r6
 810096a:	f002 fe4f 	bl	810360c <HAL_GPIO_WritePin>
 comp_values.dig_P9 = Read16BitLE(address::REG_DIG_P9);
 810096e:	8b23      	ldrh	r3, [r4, #24]
 8100970:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
}
 8100974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8100976:	bf00      	nop
 8100978:	58020000 	.word	0x58020000
 810097c:	10000358 	.word	0x10000358

08100980 <_ZN6Bmp280C1Ev>:
Bmp280::Bmp280()
 8100980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100982:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100984:	2200      	movs	r2, #0
 8100986:	483e      	ldr	r0, [pc, #248]	; (8100a80 <_ZN6Bmp280C1Ev+0x100>)
 8100988:	2110      	movs	r1, #16
  SerialData[0] = Register | address::SPI_READ;
 810098a:	4627      	mov	r7, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810098c:	f002 fe3e 	bl	810360c <HAL_GPIO_WritePin>
  SerialData[0] = Register | address::SPI_READ;
 8100990:	23d0      	movs	r3, #208	; 0xd0
 8100992:	f807 3f18 	strb.w	r3, [r7, #24]!
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100996:	483a      	ldr	r0, [pc, #232]	; (8100a80 <_ZN6Bmp280C1Ev+0x100>)
 8100998:	2200      	movs	r2, #0
 810099a:	2110      	movs	r1, #16
 810099c:	f002 fe36 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81009a0:	230a      	movs	r3, #10
 81009a2:	2201      	movs	r2, #1
 81009a4:	4639      	mov	r1, r7
 81009a6:	4837      	ldr	r0, [pc, #220]	; (8100a84 <_ZN6Bmp280C1Ev+0x104>)
 81009a8:	f005 fca6 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[1], 1, 10);
 81009ac:	230a      	movs	r3, #10
 81009ae:	2201      	movs	r2, #1
 81009b0:	f104 0119 	add.w	r1, r4, #25
 81009b4:	4833      	ldr	r0, [pc, #204]	; (8100a84 <_ZN6Bmp280C1Ev+0x104>)
 81009b6:	f006 f8e1 	bl	8106b7c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81009ba:	4831      	ldr	r0, [pc, #196]	; (8100a80 <_ZN6Bmp280C1Ev+0x100>)
 81009bc:	2201      	movs	r2, #1
 81009be:	2110      	movs	r1, #16
 81009c0:	f002 fe24 	bl	810360c <HAL_GPIO_WritePin>
  if(Read8Bit(address::REG_ID) != address::CHIP_ID)
 81009c4:	7e63      	ldrb	r3, [r4, #25]
 81009c6:	2b58      	cmp	r3, #88	; 0x58
 81009c8:	d158      	bne.n	8100a7c <_ZN6Bmp280C1Ev+0xfc>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81009ca:	2200      	movs	r2, #0
 81009cc:	2110      	movs	r1, #16
 81009ce:	482c      	ldr	r0, [pc, #176]	; (8100a80 <_ZN6Bmp280C1Ev+0x100>)
 81009d0:	f002 fe1c 	bl	810360c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 81009d4:	20c8      	movs	r0, #200	; 0xc8
 81009d6:	f001 f829 	bl	8101a2c <HAL_Delay>
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::SetConfig()
{
  config.mode = settings::Mode::NORMAL;
 81009da:	2303      	movs	r3, #3
 81009dc:	76e3      	strb	r3, [r4, #27]
  config.pressure_oversampling = settings::Oversampling::X16;
 81009de:	2305      	movs	r3, #5
  config.mode = settings::Mode::NORMAL;
 81009e0:	2500      	movs	r5, #0
  config.temp_oversampling = settings::Oversampling::X2;
 81009e2:	2602      	movs	r6, #2
  config.pressure_oversampling = settings::Oversampling::X16;
 81009e4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  SerialData[0] = Register & address::SPI_WRITE;
 81009e8:	f245 7374 	movw	r3, #22388	; 0x5774
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81009ec:	4824      	ldr	r0, [pc, #144]	; (8100a80 <_ZN6Bmp280C1Ev+0x100>)
  SerialData[0] = Register & address::SPI_WRITE;
 81009ee:	8323      	strh	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81009f0:	462a      	mov	r2, r5
 81009f2:	2110      	movs	r1, #16
  config.mode = settings::Mode::NORMAL;
 81009f4:	7725      	strb	r5, [r4, #28]
 81009f6:	7765      	strb	r5, [r4, #29]
 81009f8:	77a5      	strb	r5, [r4, #30]
  config.pressure_oversampling = settings::Oversampling::X16;
 81009fa:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 81009fe:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8100a02:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
  config.temp_oversampling = settings::Oversampling::X2;
 8100a06:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 8100a0a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8100a0e:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
 8100a12:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100a16:	f002 fdf9 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 2, 30);
 8100a1a:	231e      	movs	r3, #30
 8100a1c:	4632      	mov	r2, r6
 8100a1e:	4639      	mov	r1, r7
 8100a20:	4818      	ldr	r0, [pc, #96]	; (8100a84 <_ZN6Bmp280C1Ev+0x104>)
 8100a22:	f005 fc69 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100a26:	4816      	ldr	r0, [pc, #88]	; (8100a80 <_ZN6Bmp280C1Ev+0x100>)
 8100a28:	2201      	movs	r2, #1
 8100a2a:	2110      	movs	r1, #16
 8100a2c:	f002 fdee 	bl	810360c <HAL_GPIO_WritePin>
  uint8_t oversampling_data  =  (uint8_t) (temp_oversampling << 5 | pres_oversampling << 2  |mode);

  Write8Bit(address::REG_CTRL_MEAS, oversampling_data);


  config.iir_filter = settings::Filter::FILTER_16;
 8100a30:	2304      	movs	r3, #4
 8100a32:	77e3      	strb	r3, [r4, #31]
  SerialData[0] = Register & address::SPI_WRITE;
 8100a34:	f241 0375 	movw	r3, #4213	; 0x1075
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100a38:	4811      	ldr	r0, [pc, #68]	; (8100a80 <_ZN6Bmp280C1Ev+0x100>)
  SerialData[0] = Register & address::SPI_WRITE;
 8100a3a:	8323      	strh	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100a3c:	462a      	mov	r2, r5
 8100a3e:	2110      	movs	r1, #16
  config.iir_filter = settings::Filter::FILTER_16;
 8100a40:	f884 5020 	strb.w	r5, [r4, #32]
 8100a44:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8100a48:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
  config.standby = settings::StandbyTime::STANDBY_0_5;
 8100a4c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
 8100a50:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8100a54:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8100a58:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8100a5c:	f002 fdd6 	bl	810360c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 2, 30);
 8100a60:	231e      	movs	r3, #30
 8100a62:	4632      	mov	r2, r6
 8100a64:	4639      	mov	r1, r7
 8100a66:	4807      	ldr	r0, [pc, #28]	; (8100a84 <_ZN6Bmp280C1Ev+0x104>)
 8100a68:	f005 fc46 	bl	81062f8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100a6c:	4804      	ldr	r0, [pc, #16]	; (8100a80 <_ZN6Bmp280C1Ev+0x100>)
 8100a6e:	2201      	movs	r2, #1
 8100a70:	2110      	movs	r1, #16
 8100a72:	f002 fdcb 	bl	810360c <HAL_GPIO_WritePin>
  ReadCoefficients();
 8100a76:	4620      	mov	r0, r4
 8100a78:	f7ff fe3a 	bl	81006f0 <_ZN6Bmp28016ReadCoefficientsEv>
}
 8100a7c:	4620      	mov	r0, r4
 8100a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8100a80:	58020000 	.word	0x58020000
 8100a84:	10000358 	.word	0x10000358

08100a88 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100a88:	4b2a      	ldr	r3, [pc, #168]	; (8100b34 <MX_DMA_Init+0xac>)
{
 8100a8a:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100a8c:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 8100a90:	f040 0001 	orr.w	r0, r0, #1
 8100a94:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
 8100a98:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8100a9c:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100a9e:	f004 0401 	and.w	r4, r4, #1
 8100aa2:	9400      	str	r4, [sp, #0]
 8100aa4:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8100aa6:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8100aaa:	f044 0402 	orr.w	r4, r4, #2
 8100aae:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8100ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100ab6:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8100ab8:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100abc:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8100abe:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100ac0:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8100ac2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100ac4:	f001 f928 	bl	8101d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100ac8:	200b      	movs	r0, #11
 8100aca:	f001 f963 	bl	8101d94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8100ace:	2200      	movs	r2, #0
 8100ad0:	4611      	mov	r1, r2
 8100ad2:	200c      	movs	r0, #12
 8100ad4:	f001 f920 	bl	8101d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8100ad8:	200c      	movs	r0, #12
 8100ada:	f001 f95b 	bl	8101d94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8100ade:	2200      	movs	r2, #0
 8100ae0:	4611      	mov	r1, r2
 8100ae2:	200d      	movs	r0, #13
 8100ae4:	f001 f918 	bl	8101d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8100ae8:	200d      	movs	r0, #13
 8100aea:	f001 f953 	bl	8101d94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8100aee:	2200      	movs	r2, #0
 8100af0:	4611      	mov	r1, r2
 8100af2:	200e      	movs	r0, #14
 8100af4:	f001 f910 	bl	8101d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8100af8:	200e      	movs	r0, #14
 8100afa:	f001 f94b 	bl	8101d94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8100afe:	2200      	movs	r2, #0
 8100b00:	4611      	mov	r1, r2
 8100b02:	200f      	movs	r0, #15
 8100b04:	f001 f908 	bl	8101d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8100b08:	200f      	movs	r0, #15
 8100b0a:	f001 f943 	bl	8101d94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8100b0e:	2200      	movs	r2, #0
 8100b10:	4611      	mov	r1, r2
 8100b12:	202f      	movs	r0, #47	; 0x2f
 8100b14:	f001 f900 	bl	8101d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8100b18:	202f      	movs	r0, #47	; 0x2f
 8100b1a:	f001 f93b 	bl	8101d94 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8100b1e:	2200      	movs	r2, #0
 8100b20:	2038      	movs	r0, #56	; 0x38
 8100b22:	4611      	mov	r1, r2
 8100b24:	f001 f8f8 	bl	8101d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8100b28:	2038      	movs	r0, #56	; 0x38

}
 8100b2a:	b002      	add	sp, #8
 8100b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8100b30:	f001 b930 	b.w	8101d94 <HAL_NVIC_EnableIRQ>
 8100b34:	58024400 	.word	0x58024400

08100b38 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100b38:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b3a:	2200      	movs	r2, #0
{
 8100b3c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b3e:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8100b42:	e9cd 2206 	strd	r2, r2, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b46:	4b22      	ldr	r3, [pc, #136]	; (8100bd0 <MX_GPIO_Init+0x98>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b48:	9208      	str	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100b4e:	4821      	ldr	r0, [pc, #132]	; (8100bd4 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b50:	f042 0201 	orr.w	r2, r2, #1
 8100b54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8100b58:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100b5c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b5e:	4011      	ands	r1, r2
 8100b60:	9100      	str	r1, [sp, #0]
 8100b62:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100b64:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8100b68:	f041 0120 	orr.w	r1, r1, #32
 8100b6c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8100b70:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8100b74:	f001 0120 	and.w	r1, r1, #32
 8100b78:	9101      	str	r1, [sp, #4]
 8100b7a:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100b7c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8100b80:	f041 0108 	orr.w	r1, r1, #8
 8100b84:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8100b88:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8100b8c:	f001 0108 	and.w	r1, r1, #8
 8100b90:	9102      	str	r1, [sp, #8]
 8100b92:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100b94:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8100b98:	f041 0102 	orr.w	r1, r1, #2
 8100b9c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8100ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ba4:	f003 0302 	and.w	r3, r3, #2
 8100ba8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100baa:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100bac:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8100bae:	f002 fd2d 	bl	810360c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8100bb2:	2210      	movs	r2, #16
 8100bb4:	2301      	movs	r3, #1
 8100bb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100bba:	4806      	ldr	r0, [pc, #24]	; (8100bd4 <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8100bbc:	2200      	movs	r2, #0
 8100bbe:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100bc0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8100bc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100bc6:	f002 fbdd 	bl	8103384 <HAL_GPIO_Init>

}
 8100bca:	b00b      	add	sp, #44	; 0x2c
 8100bcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8100bd0:	58024400 	.word	0x58024400
 8100bd4:	58020000 	.word	0x58020000

08100bd8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8100bd8:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8100bda:	4818      	ldr	r0, [pc, #96]	; (8100c3c <MX_I2C1_Init+0x64>)
 8100bdc:	4c18      	ldr	r4, [pc, #96]	; (8100c40 <MX_I2C1_Init+0x68>)
  hi2c1.Init.Timing = 0x307075B1;
 8100bde:	4919      	ldr	r1, [pc, #100]	; (8100c44 <MX_I2C1_Init+0x6c>)
  hi2c1.Init.OwnAddress1 = 0;
 8100be0:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100be2:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x307075B1;
 8100be4:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100be8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8100bec:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100bf0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100bf4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8100bf6:	f002 fdd9 	bl	81037ac <HAL_I2C_Init>
 8100bfa:	b950      	cbnz	r0, 8100c12 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100bfc:	480f      	ldr	r0, [pc, #60]	; (8100c3c <MX_I2C1_Init+0x64>)
 8100bfe:	2100      	movs	r1, #0
 8100c00:	f004 f844 	bl	8104c8c <HAL_I2CEx_ConfigAnalogFilter>
 8100c04:	b968      	cbnz	r0, 8100c22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8100c06:	480d      	ldr	r0, [pc, #52]	; (8100c3c <MX_I2C1_Init+0x64>)
 8100c08:	2100      	movs	r1, #0
 8100c0a:	f004 f869 	bl	8104ce0 <HAL_I2CEx_ConfigDigitalFilter>
 8100c0e:	b980      	cbnz	r0, 8100c32 <MX_I2C1_Init+0x5a>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8100c10:	bd10      	pop	{r4, pc}
    Error_Handler();
 8100c12:	f000 fb9b 	bl	810134c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100c16:	4809      	ldr	r0, [pc, #36]	; (8100c3c <MX_I2C1_Init+0x64>)
 8100c18:	2100      	movs	r1, #0
 8100c1a:	f004 f837 	bl	8104c8c <HAL_I2CEx_ConfigAnalogFilter>
 8100c1e:	2800      	cmp	r0, #0
 8100c20:	d0f1      	beq.n	8100c06 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8100c22:	f000 fb93 	bl	810134c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8100c26:	4805      	ldr	r0, [pc, #20]	; (8100c3c <MX_I2C1_Init+0x64>)
 8100c28:	2100      	movs	r1, #0
 8100c2a:	f004 f859 	bl	8104ce0 <HAL_I2CEx_ConfigDigitalFilter>
 8100c2e:	2800      	cmp	r0, #0
 8100c30:	d0ee      	beq.n	8100c10 <MX_I2C1_Init+0x38>
}
 8100c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8100c36:	f000 bb89 	b.w	810134c <Error_Handler>
 8100c3a:	bf00      	nop
 8100c3c:	10000210 	.word	0x10000210
 8100c40:	40005400 	.word	0x40005400
 8100c44:	307075b1 	.word	0x307075b1

08100c48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8100c48:	b570      	push	{r4, r5, r6, lr}
 8100c4a:	4604      	mov	r4, r0
 8100c4c:	b0b6      	sub	sp, #216	; 0xd8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100c4e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100c50:	22bc      	movs	r2, #188	; 0xbc
 8100c52:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100c54:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8100c58:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8100c5c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100c5e:	f007 fa55 	bl	810810c <memset>
  if(i2cHandle->Instance==I2C1)
 8100c62:	4b40      	ldr	r3, [pc, #256]	; (8100d64 <HAL_I2C_MspInit+0x11c>)
 8100c64:	6822      	ldr	r2, [r4, #0]
 8100c66:	429a      	cmp	r2, r3
 8100c68:	d001      	beq.n	8100c6e <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8100c6a:	b036      	add	sp, #216	; 0xd8
 8100c6c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8100c6e:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100c70:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8100c72:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100c74:	f004 fb96 	bl	81053a4 <HAL_RCCEx_PeriphCLKConfig>
 8100c78:	2800      	cmp	r0, #0
 8100c7a:	d16a      	bne.n	8100d52 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100c7c:	4d3a      	ldr	r5, [pc, #232]	; (8100d68 <HAL_I2C_MspInit+0x120>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100c7e:	483b      	ldr	r0, [pc, #236]	; (8100d6c <HAL_I2C_MspInit+0x124>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100c80:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8100c84:	4e3a      	ldr	r6, [pc, #232]	; (8100d70 <HAL_I2C_MspInit+0x128>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100c86:	f043 0302 	orr.w	r3, r3, #2
 8100c8a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8100c8e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8100c92:	f003 0302 	and.w	r3, r3, #2
 8100c96:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8100c98:	f44f 7240 	mov.w	r2, #768	; 0x300
 8100c9c:	2312      	movs	r3, #18
 8100c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8100ca2:	2200      	movs	r2, #0
 8100ca4:	2300      	movs	r3, #0
 8100ca6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100caa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8100cac:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100cae:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8100cb0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100cb2:	f002 fb67 	bl	8103384 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8100cb6:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8100cba:	492e      	ldr	r1, [pc, #184]	; (8100d74 <HAL_I2C_MspInit+0x12c>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8100cbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8100cc0:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
 8100cc4:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 8100cc8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8100ccc:	9201      	str	r2, [sp, #4]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8100cce:	2221      	movs	r2, #33	; 0x21
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8100cd0:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8100cd2:	e9c6 1200 	strd	r1, r2, [r6]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8100cd6:	9801      	ldr	r0, [sp, #4]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8100cd8:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8100cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8100cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8100ce2:	4630      	mov	r0, r6
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8100ce4:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8100ce8:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8100cec:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8100cf0:	6232      	str	r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8100cf2:	f001 f933 	bl	8101f5c <HAL_DMA_Init>
 8100cf6:	bb90      	cbnz	r0, 8100d5e <HAL_I2C_MspInit+0x116>
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8100cf8:	4d1f      	ldr	r5, [pc, #124]	; (8100d78 <HAL_I2C_MspInit+0x130>)
 8100cfa:	4920      	ldr	r1, [pc, #128]	; (8100d7c <HAL_I2C_MspInit+0x134>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8100cfc:	63e6      	str	r6, [r4, #60]	; 0x3c
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8100cfe:	2222      	movs	r2, #34	; 0x22
 8100d00:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8100d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8100d08:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8100d0a:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8100d0c:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8100d0e:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8100d10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8100d14:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8100d18:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8100d1c:	e9c5 3207 	strd	r3, r2, [r5, #28]
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8100d20:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8100d22:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8100d24:	f001 f91a 	bl	8101f5c <HAL_DMA_Init>
 8100d28:	b9b0      	cbnz	r0, 8100d58 <HAL_I2C_MspInit+0x110>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8100d2a:	2200      	movs	r2, #0
 8100d2c:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8100d2e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8100d30:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8100d32:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8100d34:	f000 fff0 	bl	8101d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8100d38:	201f      	movs	r0, #31
 8100d3a:	f001 f82b 	bl	8101d94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8100d3e:	2200      	movs	r2, #0
 8100d40:	4611      	mov	r1, r2
 8100d42:	2020      	movs	r0, #32
 8100d44:	f000 ffe8 	bl	8101d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8100d48:	2020      	movs	r0, #32
 8100d4a:	f001 f823 	bl	8101d94 <HAL_NVIC_EnableIRQ>
}
 8100d4e:	b036      	add	sp, #216	; 0xd8
 8100d50:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8100d52:	f000 fafb 	bl	810134c <Error_Handler>
 8100d56:	e791      	b.n	8100c7c <HAL_I2C_MspInit+0x34>
      Error_Handler();
 8100d58:	f000 faf8 	bl	810134c <Error_Handler>
 8100d5c:	e7e5      	b.n	8100d2a <HAL_I2C_MspInit+0xe2>
      Error_Handler();
 8100d5e:	f000 faf5 	bl	810134c <Error_Handler>
 8100d62:	e7c9      	b.n	8100cf8 <HAL_I2C_MspInit+0xb0>
 8100d64:	40005400 	.word	0x40005400
 8100d68:	58024400 	.word	0x58024400
 8100d6c:	58020400 	.word	0x58020400
 8100d70:	10000120 	.word	0x10000120
 8100d74:	40020040 	.word	0x40020040
 8100d78:	10000198 	.word	0x10000198
 8100d7c:	40020058 	.word	0x40020058

08100d80 <_ZN3IMU11GetGyroDataEv>:
  bool is_imu = Setup();

}

gyroData IMU::GetGyroData()
{
 8100d80:	b530      	push	{r4, r5, lr}
 8100d82:	b08b      	sub	sp, #44	; 0x2c
 * @returns number of bytes read
 */
uint8_t IMU::I2CReadBytes(const uint8_t &address, const uint8_t &reg,  uint8_t* buffer, uint8_t numBytes)
{
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8100d84:	ad07      	add	r5, sp, #28
 8100d86:	2406      	movs	r4, #6
 8100d88:	e9cd 5400 	strd	r5, r4, [sp]
 8100d8c:	2218      	movs	r2, #24
{
 8100d8e:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8100d90:	21d6      	movs	r1, #214	; 0xd6
 8100d92:	2301      	movs	r3, #1
 8100d94:	4819      	ldr	r0, [pc, #100]	; (8100dfc <_ZN3IMU11GetGyroDataEv+0x7c>)
 8100d96:	f002 ff7d 	bl	8103c94 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(1);
 8100d9a:	2001      	movs	r0, #1
 8100d9c:	f000 fe46 	bl	8101a2c <HAL_Delay>
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8100da0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return gyro * gyro_res;
 8100da4:	ed94 6a00 	vldr	s12, [r4]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8100da8:	ee07 3a10 	vmov	s14, r3
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8100dac:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8100db0:	ee07 3a90 	vmov	s15, r3
  gyro_values.x = CalcGyro(gx);
 8100db4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8100db8:	ee06 3a90 	vmov	s13, r3
  gyro_values.y = CalcGyro(gy);
 8100dbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  gyro_values.x = CalcGyro(gx);
 8100dc0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  gyro_values.z = CalcGyro(gz);
 8100dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return gyro * gyro_res;
 8100dc8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8100dcc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8100dd0:	ee67 7a86 	vmul.f32	s15, s15, s12
  gyro_values.x = CalcGyro(gx);
 8100dd4:	edc4 6a13 	vstr	s13, [r4, #76]	; 0x4c
  gyro_values.y = CalcGyro(gy);
 8100dd8:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
  gyro_values.z = CalcGyro(gz);
 8100ddc:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
  return gyro_values;
 8100de0:	344c      	adds	r4, #76	; 0x4c
 8100de2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8100de6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8100dea:	eddd 0a08 	vldr	s1, [sp, #32]
 8100dee:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 8100df2:	ed9d 0a07 	vldr	s0, [sp, #28]
 8100df6:	b00b      	add	sp, #44	; 0x2c
 8100df8:	bd30      	pop	{r4, r5, pc}
 8100dfa:	bf00      	nop
 8100dfc:	10000210 	.word	0x10000210

08100e00 <_ZN3IMU12GetAccelDataEv>:
{
 8100e00:	b530      	push	{r4, r5, lr}
 8100e02:	b08b      	sub	sp, #44	; 0x2c
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8100e04:	ad07      	add	r5, sp, #28
 8100e06:	2406      	movs	r4, #6
 8100e08:	e9cd 5400 	strd	r5, r4, [sp]
 8100e0c:	2228      	movs	r2, #40	; 0x28
{
 8100e0e:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8100e10:	21d6      	movs	r1, #214	; 0xd6
 8100e12:	2301      	movs	r3, #1
 8100e14:	4819      	ldr	r0, [pc, #100]	; (8100e7c <_ZN3IMU12GetAccelDataEv+0x7c>)
 8100e16:	f002 ff3d 	bl	8103c94 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(1);
 8100e1a:	2001      	movs	r0, #1
 8100e1c:	f000 fe06 	bl	8101a2c <HAL_Delay>
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into ay
 8100e20:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return accel * acc_res;
 8100e24:	ed94 6a02 	vldr	s12, [r4, #8]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into ay
 8100e28:	ee07 3a10 	vmov	s14, r3
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into az
 8100e2c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8100e30:	ee07 3a90 	vmov	s15, r3
  accel_values.x = CalcAccel(ax);
 8100e34:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8100e38:	ee06 3a90 	vmov	s13, r3
  accel_values.y = CalcAccel(ay);
 8100e3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  accel_values.x = CalcAccel(ax);
 8100e40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  accel_values.z = CalcAccel(az);
 8100e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return accel * acc_res;
 8100e48:	ee66 6a86 	vmul.f32	s13, s13, s12
 8100e4c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8100e50:	ee67 7a86 	vmul.f32	s15, s15, s12
  accel_values.x = CalcAccel(ax);
 8100e54:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
  accel_values.y = CalcAccel(ay);
 8100e58:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
  accel_values.z = CalcAccel(az);
 8100e5c:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
  return accel_values;
 8100e60:	3440      	adds	r4, #64	; 0x40
 8100e62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8100e66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8100e6a:	eddd 0a08 	vldr	s1, [sp, #32]
 8100e6e:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 8100e72:	ed9d 0a07 	vldr	s0, [sp, #28]
 8100e76:	b00b      	add	sp, #44	; 0x2c
 8100e78:	bd30      	pop	{r4, r5, pc}
 8100e7a:	bf00      	nop
 8100e7c:	10000210 	.word	0x10000210

08100e80 <_ZN3IMU10GetMagDataEv>:
{
 8100e80:	b530      	push	{r4, r5, lr}
 8100e82:	b08b      	sub	sp, #44	; 0x2c
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8100e84:	ad07      	add	r5, sp, #28
 8100e86:	2406      	movs	r4, #6
 8100e88:	e9cd 5400 	strd	r5, r4, [sp]
 8100e8c:	2228      	movs	r2, #40	; 0x28
{
 8100e8e:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8100e90:	213c      	movs	r1, #60	; 0x3c
 8100e92:	2301      	movs	r3, #1
 8100e94:	4819      	ldr	r0, [pc, #100]	; (8100efc <_ZN3IMU10GetMagDataEv+0x7c>)
 8100e96:	f002 fefd 	bl	8103c94 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(1);
 8100e9a:	2001      	movs	r0, #1
 8100e9c:	f000 fdc6 	bl	8101a2c <HAL_Delay>
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 8100ea0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return mag * mag_res;
 8100ea4:	ed94 6a01 	vldr	s12, [r4, #4]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 8100ea8:	ee07 3a10 	vmov	s14, r3
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 8100eac:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8100eb0:	ee07 3a90 	vmov	s15, r3
    mag_values.x = CalcMag(mx);
 8100eb4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8100eb8:	ee06 3a90 	vmov	s13, r3
    mag_values.y = CalcMag(my);
 8100ebc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mag_values.x = CalcMag(mx);
 8100ec0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    mag_values.z = CalcMag(mz);
 8100ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return mag * mag_res;
 8100ec8:	ee66 6a86 	vmul.f32	s13, s13, s12
 8100ecc:	ee27 7a06 	vmul.f32	s14, s14, s12
 8100ed0:	ee67 7a86 	vmul.f32	s15, s15, s12
    mag_values.x = CalcMag(mx);
 8100ed4:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    mag_values.y = CalcMag(my);
 8100ed8:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    mag_values.z = CalcMag(mz);
 8100edc:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
  return mag_values;
 8100ee0:	3434      	adds	r4, #52	; 0x34
 8100ee2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8100ee6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8100eea:	eddd 0a08 	vldr	s1, [sp, #32]
 8100eee:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 8100ef2:	ed9d 0a07 	vldr	s0, [sp, #28]
 8100ef6:	b00b      	add	sp, #44	; 0x2c
 8100ef8:	bd30      	pop	{r4, r5, pc}
 8100efa:	bf00      	nop
 8100efc:	10000210 	.word	0x10000210

08100f00 <_ZN3IMU8InitGyroEv>:
{
 8100f00:	b570      	push	{r4, r5, r6, lr}
   if(gyro_settings.enabled == true)
 8100f02:	7c03      	ldrb	r3, [r0, #16]
{
 8100f04:	b084      	sub	sp, #16
 8100f06:	4604      	mov	r4, r0
   if(gyro_settings.enabled == true)
 8100f08:	b103      	cbz	r3, 8100f0c <_ZN3IMU8InitGyroEv+0xc>
       temp_reg_val = gyro_settings.sampleRate;
 8100f0a:	7d03      	ldrb	r3, [r0, #20]
   temp_reg_val |= gyro_settings.scale;
 8100f0c:	8a61      	ldrh	r1, [r4, #18]
   temp_reg_val |= gyro_settings.bandwidth;
 8100f0e:	7d62      	ldrb	r2, [r4, #21]
 */
HAL_StatusTypeDef IMU::WriteByte(const uint8_t &address, const uint8_t &reg, uint8_t data)
{
  HAL_StatusTypeDef status;
//  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8100f10:	4830      	ldr	r0, [pc, #192]	; (8100fd4 <_ZN3IMU8InitGyroEv+0xd4>)
   temp_reg_val |= gyro_settings.bandwidth;
 8100f12:	430a      	orrs	r2, r1
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8100f14:	2501      	movs	r5, #1
   temp_reg_val |= gyro_settings.bandwidth;
 8100f16:	431a      	orrs	r2, r3
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8100f18:	f10d 060f 	add.w	r6, sp, #15
 8100f1c:	462b      	mov	r3, r5
 8100f1e:	21d6      	movs	r1, #214	; 0xd6
 8100f20:	f88d 200f 	strb.w	r2, [sp, #15]
 8100f24:	e9cd 6500 	strd	r6, r5, [sp]
 8100f28:	2210      	movs	r2, #16
 8100f2a:	f002 fdc7 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8100f2e:	4628      	mov	r0, r5
 8100f30:	f000 fd7c 	bl	8101a2c <HAL_Delay>
    WriteByte(gyroaccaddress::LSM9DS1_AG_ADDR, gyroaccaddress::CTRL_REG2_G, temp_reg_val);
 8100f34:	2100      	movs	r1, #0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8100f36:	2211      	movs	r2, #17
 8100f38:	462b      	mov	r3, r5
 8100f3a:	f88d 100f 	strb.w	r1, [sp, #15]
 8100f3e:	e9cd 6500 	strd	r6, r5, [sp]
 8100f42:	21d6      	movs	r1, #214	; 0xd6
 8100f44:	4823      	ldr	r0, [pc, #140]	; (8100fd4 <_ZN3IMU8InitGyroEv+0xd4>)
 8100f46:	f002 fdb9 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8100f4a:	4628      	mov	r0, r5
 8100f4c:	f000 fd6e 	bl	8101a2c <HAL_Delay>
    if(gyro_settings.flipX)
 8100f50:	7e63      	ldrb	r3, [r4, #25]
    if(gyro_settings.flipY)
 8100f52:	7ea0      	ldrb	r0, [r4, #26]
    if(gyro_settings.flipX)
 8100f54:	2b00      	cmp	r3, #0
    if(gyro_settings.flipZ)
 8100f56:	7ee3      	ldrb	r3, [r4, #27]
    if(gyro_settings.flipX)
 8100f58:	bf0b      	itete	eq
 8100f5a:	2110      	moveq	r1, #16
 8100f5c:	2130      	movne	r1, #48	; 0x30
 8100f5e:	2200      	moveq	r2, #0
 8100f60:	2220      	movne	r2, #32
      temp_reg_val |= 1 << 4;
 8100f62:	2800      	cmp	r0, #0
 8100f64:	bf18      	it	ne
 8100f66:	460a      	movne	r2, r1
    if(gyro_settings.flipZ)
 8100f68:	b10b      	cbz	r3, 8100f6e <_ZN3IMU8InitGyroEv+0x6e>
      temp_reg_val |= 1 << 3;
 8100f6a:	f042 0208 	orr.w	r2, r2, #8
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8100f6e:	2501      	movs	r5, #1
 8100f70:	462b      	mov	r3, r5
 8100f72:	21d6      	movs	r1, #214	; 0xd6
 8100f74:	f88d 200f 	strb.w	r2, [sp, #15]
 8100f78:	e9cd 6500 	strd	r6, r5, [sp]
 8100f7c:	2213      	movs	r2, #19
 8100f7e:	4815      	ldr	r0, [pc, #84]	; (8100fd4 <_ZN3IMU8InitGyroEv+0xd4>)
 8100f80:	f002 fd9c 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8100f84:	4628      	mov	r0, r5
 8100f86:	f000 fd51 	bl	8101a2c <HAL_Delay>
    if(gyro_settings.enableZ)
 8100f8a:	7fe3      	ldrb	r3, [r4, #31]
    if(gyro_settings.enableY)
 8100f8c:	7fa1      	ldrb	r1, [r4, #30]
    if(gyro_settings.enableZ)
 8100f8e:	2b00      	cmp	r3, #0
    if(gyro_settings.enableX)
 8100f90:	7f63      	ldrb	r3, [r4, #29]
    if(gyro_settings.enableZ)
 8100f92:	bf0b      	itete	eq
 8100f94:	2210      	moveq	r2, #16
 8100f96:	2230      	movne	r2, #48	; 0x30
 8100f98:	2000      	moveq	r0, #0
 8100f9a:	2020      	movne	r0, #32
      temp_reg_val |= 1 << 4;
 8100f9c:	2900      	cmp	r1, #0
 8100f9e:	bf18      	it	ne
 8100fa0:	4610      	movne	r0, r2
    if(gyro_settings.enableX)
 8100fa2:	b10b      	cbz	r3, 8100fa8 <_ZN3IMU8InitGyroEv+0xa8>
      temp_reg_val |= 1 << 3;
 8100fa4:	f040 0008 	orr.w	r0, r0, #8
    if(gyro_settings.latchInterrupt)
 8100fa8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8100fac:	b10b      	cbz	r3, 8100fb2 <_ZN3IMU8InitGyroEv+0xb2>
      temp_reg_val |= 1 << 1;
 8100fae:	f040 0002 	orr.w	r0, r0, #2
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8100fb2:	2401      	movs	r4, #1
 8100fb4:	4623      	mov	r3, r4
 8100fb6:	221e      	movs	r2, #30
 8100fb8:	21d6      	movs	r1, #214	; 0xd6
 8100fba:	f88d 000f 	strb.w	r0, [sp, #15]
 8100fbe:	e9cd 6400 	strd	r6, r4, [sp]
 8100fc2:	4804      	ldr	r0, [pc, #16]	; (8100fd4 <_ZN3IMU8InitGyroEv+0xd4>)
 8100fc4:	f002 fd7a 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8100fc8:	4620      	mov	r0, r4
 8100fca:	f000 fd2f 	bl	8101a2c <HAL_Delay>
}
 8100fce:	b004      	add	sp, #16
 8100fd0:	bd70      	pop	{r4, r5, r6, pc}
 8100fd2:	bf00      	nop
 8100fd4:	10000210 	.word	0x10000210

08100fd8 <_ZN3IMU9InitAccelEv>:
{
 8100fd8:	b570      	push	{r4, r5, r6, lr}
  if(accel_settings.enableZ)
 8100fda:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
{
 8100fde:	4604      	mov	r4, r0
  if(accel_settings.enableZ)
 8100fe0:	2b00      	cmp	r3, #0
  if(accel_settings.enableY)
 8100fe2:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
  if(accel_settings.enableX)
 8100fe6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  if(accel_settings.enableZ)
 8100fea:	bf0b      	itete	eq
 8100fec:	2110      	moveq	r1, #16
 8100fee:	2130      	movne	r1, #48	; 0x30
 8100ff0:	2200      	moveq	r2, #0
 8100ff2:	2220      	movne	r2, #32
{
 8100ff4:	b084      	sub	sp, #16
    temp_reg_val |= 1 << 4;
 8100ff6:	2800      	cmp	r0, #0
 8100ff8:	bf18      	it	ne
 8100ffa:	460a      	movne	r2, r1
  if(accel_settings.enableX)
 8100ffc:	b10b      	cbz	r3, 8101002 <_ZN3IMU9InitAccelEv+0x2a>
    temp_reg_val |= 1 << 3;
 8100ffe:	f042 0208 	orr.w	r2, r2, #8
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8101002:	2601      	movs	r6, #1
 8101004:	f10d 050f 	add.w	r5, sp, #15
 8101008:	4633      	mov	r3, r6
 810100a:	f88d 200f 	strb.w	r2, [sp, #15]
 810100e:	21d6      	movs	r1, #214	; 0xd6
 8101010:	221f      	movs	r2, #31
 8101012:	e9cd 5600 	strd	r5, r6, [sp]
 8101016:	4812      	ldr	r0, [pc, #72]	; (8101060 <_ZN3IMU9InitAccelEv+0x88>)
 8101018:	f002 fd50 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 810101c:	4630      	mov	r0, r6
 810101e:	f000 fd05 	bl	8101a2c <HAL_Delay>
  if(accel_settings.enabled == true)
 8101022:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 8101026:	b108      	cbz	r0, 810102c <_ZN3IMU9InitAccelEv+0x54>
    temp_reg_val = accel_settings.sampleRate;
 8101028:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  if(accel_settings.bandwidth > 0)
 810102c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
  temp_reg_val |= accel_settings.scale;
 8101030:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
  if(accel_settings.bandwidth > 0)
 8101034:	2b00      	cmp	r3, #0
  temp_reg_val |= accel_settings.scale;
 8101036:	ea40 0002 	orr.w	r0, r0, r2
    temp_reg_val |= accel_settings.bandwidth;
 810103a:	bfc4      	itt	gt
 810103c:	4318      	orrgt	r0, r3
 810103e:	b2c0      	uxtbgt	r0, r0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8101040:	2401      	movs	r4, #1
 8101042:	4623      	mov	r3, r4
 8101044:	2220      	movs	r2, #32
 8101046:	21d6      	movs	r1, #214	; 0xd6
 8101048:	f88d 000f 	strb.w	r0, [sp, #15]
 810104c:	e9cd 5400 	strd	r5, r4, [sp]
 8101050:	4803      	ldr	r0, [pc, #12]	; (8101060 <_ZN3IMU9InitAccelEv+0x88>)
 8101052:	f002 fd33 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8101056:	4620      	mov	r0, r4
 8101058:	f000 fce8 	bl	8101a2c <HAL_Delay>
}
 810105c:	b004      	add	sp, #16
 810105e:	bd70      	pop	{r4, r5, r6, pc}
 8101060:	10000210 	.word	0x10000210

08101064 <_ZN3IMU7InitMagEv>:
{
 8101064:	b570      	push	{r4, r5, r6, lr}
  if(mag_settings.tempCompensationEnable)
 8101066:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
  temp_reg_val |= mag_settings.sampleRate;
 810106a:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
 810106e:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
    temp_reg_val |=  0x1 << 7;
 8101072:	2b00      	cmp	r3, #0
{
 8101074:	b084      	sub	sp, #16
    temp_reg_val |=  0x1 << 7;
 8101076:	bf18      	it	ne
 8101078:	2380      	movne	r3, #128	; 0x80
  temp_reg_val |= mag_settings.sampleRate;
 810107a:	430a      	orrs	r2, r1
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810107c:	2401      	movs	r4, #1
 810107e:	f10d 060f 	add.w	r6, sp, #15
  temp_reg_val |= mag_settings.sampleRate;
 8101082:	4313      	orrs	r3, r2
{
 8101084:	4605      	mov	r5, r0
 8101086:	f88d 300f 	strb.w	r3, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810108a:	2220      	movs	r2, #32
 810108c:	4623      	mov	r3, r4
 810108e:	213c      	movs	r1, #60	; 0x3c
 8101090:	e9cd 6400 	strd	r6, r4, [sp]
 8101094:	4825      	ldr	r0, [pc, #148]	; (810112c <_ZN3IMU7InitMagEv+0xc8>)
 8101096:	f002 fd11 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 810109a:	4620      	mov	r0, r4
 810109c:	f000 fcc6 	bl	8101a2c <HAL_Delay>
   WriteByte(magaddress::LSM9DS1_M_ADDR, magaddress::CTRL_REG2_M, temp_reg_val);
 81010a0:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 81010a4:	f88d 100f 	strb.w	r1, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81010a8:	4623      	mov	r3, r4
 81010aa:	2221      	movs	r2, #33	; 0x21
 81010ac:	213c      	movs	r1, #60	; 0x3c
 81010ae:	e9cd 6400 	strd	r6, r4, [sp]
 81010b2:	481e      	ldr	r0, [pc, #120]	; (810112c <_ZN3IMU7InitMagEv+0xc8>)
 81010b4:	f002 fd02 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 81010b8:	4620      	mov	r0, r4
 81010ba:	f000 fcb7 	bl	8101a2c <HAL_Delay>
   if(mag_settings.lowPowerEnable)
 81010be:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   temp_reg_val |= mag_settings.operatingMode & 0x3;
 81010c2:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81010c6:	4819      	ldr	r0, [pc, #100]	; (810112c <_ZN3IMU7InitMagEv+0xc8>)
     temp_reg_val |= 0x1 << 5;
 81010c8:	2a00      	cmp	r2, #0
 81010ca:	bf0c      	ite	eq
 81010cc:	2200      	moveq	r2, #0
 81010ce:	2220      	movne	r2, #32
   temp_reg_val |= mag_settings.operatingMode & 0x3;
 81010d0:	f003 0303 	and.w	r3, r3, #3
 81010d4:	431a      	orrs	r2, r3
 81010d6:	f88d 200f 	strb.w	r2, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81010da:	4623      	mov	r3, r4
 81010dc:	2222      	movs	r2, #34	; 0x22
 81010de:	213c      	movs	r1, #60	; 0x3c
 81010e0:	e9cd 6400 	strd	r6, r4, [sp]
 81010e4:	f002 fcea 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 81010e8:	4620      	mov	r0, r4
 81010ea:	f000 fc9f 	bl	8101a2c <HAL_Delay>
   WriteByte( magaddress::LSM9DS1_M_ADDR,  magaddress::CTRL_REG4_M, temp_reg_val);
 81010ee:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 81010f2:	f88d 100f 	strb.w	r1, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81010f6:	4623      	mov	r3, r4
 81010f8:	2223      	movs	r2, #35	; 0x23
 81010fa:	213c      	movs	r1, #60	; 0x3c
 81010fc:	e9cd 6400 	strd	r6, r4, [sp]
 8101100:	480a      	ldr	r0, [pc, #40]	; (810112c <_ZN3IMU7InitMagEv+0xc8>)
 8101102:	f002 fcdb 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8101106:	4620      	mov	r0, r4
 8101108:	f000 fc90 	bl	8101a2c <HAL_Delay>
   WriteByte( magaddress::LSM9DS1_M_ADDR,  magaddress::CTRL_REG5_M, temp_reg_val);
 810110c:	2100      	movs	r1, #0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810110e:	4623      	mov	r3, r4
 8101110:	2224      	movs	r2, #36	; 0x24
 8101112:	f88d 100f 	strb.w	r1, [sp, #15]
 8101116:	e9cd 6400 	strd	r6, r4, [sp]
 810111a:	213c      	movs	r1, #60	; 0x3c
 810111c:	4803      	ldr	r0, [pc, #12]	; (810112c <_ZN3IMU7InitMagEv+0xc8>)
 810111e:	f002 fccd 	bl	8103abc <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8101122:	4620      	mov	r0, r4
 8101124:	f000 fc82 	bl	8101a2c <HAL_Delay>
}
 8101128:	b004      	add	sp, #16
 810112a:	bd70      	pop	{r4, r5, r6, pc}
 810112c:	10000210 	.word	0x10000210

08101130 <_ZN3IMU5SetupEv>:
{
 8101130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      mag_res = resolution::MAG_FS_4G;
 8101134:	4b33      	ldr	r3, [pc, #204]	; (8101204 <_ZN3IMU5SetupEv+0xd4>)
 8101136:	6043      	str	r3, [r0, #4]
{
 8101138:	b086      	sub	sp, #24
 gyro_settings.orientation = 0;
 810113a:	4b33      	ldr	r3, [pc, #204]	; (8101208 <_ZN3IMU5SetupEv+0xd8>)
      gyro_res =  resolution::GYRO_FS_245;
 810113c:	4933      	ldr	r1, [pc, #204]	; (810120c <_ZN3IMU5SetupEv+0xdc>)
      acc_res =  resolution::ACC_FS_4G;
 810113e:	4a34      	ldr	r2, [pc, #208]	; (8101210 <_ZN3IMU5SetupEv+0xe0>)
      gyro_res =  resolution::GYRO_FS_245;
 8101140:	6001      	str	r1, [r0, #0]
 gyro_settings.scale = to_underlying(settings::GyroFullScale::FS_245);
 8101142:	2600      	movs	r6, #0
  gyro_settings.enabled = true;
 8101144:	2501      	movs	r5, #1
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8101146:	f04f 0864 	mov.w	r8, #100	; 0x64
 810114a:	f10d 0717 	add.w	r7, sp, #23
      acc_res =  resolution::ACC_FS_4G;
 810114e:	6082      	str	r2, [r0, #8]
  gyro_settings.enabled = true;
 8101150:	7405      	strb	r5, [r0, #16]
 gyro_settings.scale = to_underlying(settings::GyroFullScale::FS_245);
 8101152:	8246      	strh	r6, [r0, #18]
 gyro_settings.HPFCutoff = 0;
 8101154:	6186      	str	r6, [r0, #24]
 gyro_settings.latchInterrupt = 0;
 8101156:	f880 6020 	strb.w	r6, [r0, #32]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 810115a:	e9cd 5801 	strd	r5, r8, [sp, #4]
 810115e:	9700      	str	r7, [sp, #0]
 gyro_settings.orientation = 0;
 8101160:	61c3      	str	r3, [r0, #28]
  accel_settings.scale = to_underlying(settings::AccFullScale::XL_FS_4G);
 8101162:	33c0      	adds	r3, #192	; 0xc0
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 8101164:	4a2b      	ldr	r2, [pc, #172]	; (8101214 <_ZN3IMU5SetupEv+0xe4>)
  accel_settings.scale = to_underlying(settings::AccFullScale::XL_FS_4G);
 8101166:	6243      	str	r3, [r0, #36]	; 0x24
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 8101168:	4b2b      	ldr	r3, [pc, #172]	; (8101218 <_ZN3IMU5SetupEv+0xe8>)
  uint8_t reg_value = 0x00;
 810116a:	f88d 6017 	strb.w	r6, [sp, #23]
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 810116e:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  mag_settings.ZPerformance = to_underlying(settings::MagZOpMode::MAG_UHP_MODE);
 8101172:	4b2a      	ldr	r3, [pc, #168]	; (810121c <_ZN3IMU5SetupEv+0xec>)
 8101174:	6303      	str	r3, [r0, #48]	; 0x30
 gyro_settings.sampleRate = to_underlying(settings::GyroODR::ODR_952);
 8101176:	23c0      	movs	r3, #192	; 0xc0
 8101178:	6143      	str	r3, [r0, #20]
  accel_settings.enabled = true;
 810117a:	f241 0301 	movw	r3, #4097	; 0x1001
 810117e:	8443      	strh	r3, [r0, #34]	; 0x22
{
 8101180:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8101182:	462b      	mov	r3, r5
 8101184:	4826      	ldr	r0, [pc, #152]	; (8101220 <_ZN3IMU5SetupEv+0xf0>)
 8101186:	220f      	movs	r2, #15
 8101188:	21d6      	movs	r1, #214	; 0xd6
 810118a:	f002 fb63 	bl	8103854 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 810118e:	b9d8      	cbnz	r0, 81011c8 <_ZN3IMU5SetupEv+0x98>
  return reg_value;
 8101190:	4684      	mov	ip, r0
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8101192:	462b      	mov	r3, r5
 8101194:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8101198:	4821      	ldr	r0, [pc, #132]	; (8101220 <_ZN3IMU5SetupEv+0xf0>)
 810119a:	9700      	str	r7, [sp, #0]
 810119c:	220f      	movs	r2, #15
 810119e:	213c      	movs	r1, #60	; 0x3c
  return reg_value;
 81011a0:	f89d 6017 	ldrb.w	r6, [sp, #23]
  uint8_t reg_value = 0x00;
 81011a4:	f88d c017 	strb.w	ip, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81011a8:	f002 fb54 	bl	8103854 <HAL_I2C_Mem_Read>
      uint16_t imu_response = (ag_check << 8) | mag_check;
 81011ac:	0233      	lsls	r3, r6, #8
 81011ae:	b21b      	sxth	r3, r3
  if(status != HAL_OK)
 81011b0:	b908      	cbnz	r0, 81011b6 <_ZN3IMU5SetupEv+0x86>
      uint16_t imu_response = (ag_check << 8) | mag_check;
 81011b2:	f89d 5017 	ldrb.w	r5, [sp, #23]
        if(imu_response != ((imuresponse::WHO_AM_I_AG_RSP << 8 ) | imuresponse::WHO_AM_I_M_RSP))
 81011b6:	431d      	orrs	r5, r3
 81011b8:	f646 033d 	movw	r3, #26685	; 0x683d
 81011bc:	429d      	cmp	r5, r3
 81011be:	d013      	beq.n	81011e8 <_ZN3IMU5SetupEv+0xb8>
           return false;
 81011c0:	2000      	movs	r0, #0
}
 81011c2:	b006      	add	sp, #24
 81011c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81011c8:	e9cd 5801 	strd	r5, r8, [sp, #4]
 81011cc:	4814      	ldr	r0, [pc, #80]	; (8101220 <_ZN3IMU5SetupEv+0xf0>)
 81011ce:	9700      	str	r7, [sp, #0]
 81011d0:	462b      	mov	r3, r5
 81011d2:	220f      	movs	r2, #15
 81011d4:	213c      	movs	r1, #60	; 0x3c
  uint8_t reg_value = 0x00;
 81011d6:	f88d 6017 	strb.w	r6, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81011da:	f002 fb3b 	bl	8103854 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 81011de:	2800      	cmp	r0, #0
 81011e0:	d1ee      	bne.n	81011c0 <_ZN3IMU5SetupEv+0x90>
 81011e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 81011e6:	e7e4      	b.n	81011b2 <_ZN3IMU5SetupEv+0x82>
        InitGyro();
 81011e8:	4620      	mov	r0, r4
 81011ea:	f7ff fe89 	bl	8100f00 <_ZN3IMU8InitGyroEv>
        InitAccel();
 81011ee:	4620      	mov	r0, r4
 81011f0:	f7ff fef2 	bl	8100fd8 <_ZN3IMU9InitAccelEv>
        InitMag();
 81011f4:	4620      	mov	r0, r4
 81011f6:	f7ff ff35 	bl	8101064 <_ZN3IMU7InitMagEv>
        return true;
 81011fa:	2001      	movs	r0, #1
}
 81011fc:	b006      	add	sp, #24
 81011fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8101202:	bf00      	nop
 8101204:	3912ccf7 	.word	0x3912ccf7
 8101208:	01010100 	.word	0x01010100
 810120c:	3c0f5c29 	.word	0x3c0f5c29
 8101210:	38ffda40 	.word	0x38ffda40
 8101214:	010000ff 	.word	0x010000ff
 8101218:	60001c00 	.word	0x60001c00
 810121c:	0100000c 	.word	0x0100000c
 8101220:	10000210 	.word	0x10000210

08101224 <_ZN3IMUC1Ev>:
IMU::IMU()
 8101224:	b510      	push	{r4, lr}
 8101226:	4604      	mov	r4, r0
  bool is_imu = Setup();
 8101228:	f7ff ff82 	bl	8101130 <_ZN3IMU5SetupEv>
}
 810122c:	4620      	mov	r0, r4
 810122e:	bd10      	pop	{r4, pc}

08101230 <HAL_I2C_MemRxCpltCallback>:
 8101230:	4770      	bx	lr
 8101232:	bf00      	nop

08101234 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{


}
 8101234:	4770      	bx	lr
 8101236:	bf00      	nop

08101238 <main>:
  /* MPU Configuration--------------------------------------------------------*/
 // MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101238:	4b37      	ldr	r3, [pc, #220]	; (8101318 <main+0xe0>)
{
 810123a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 810123e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101242:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8101246:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 810124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
{
 810124e:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_BOOT));
 8101254:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101256:	9301      	str	r3, [sp, #4]
 8101258:	9b01      	ldr	r3, [sp, #4]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_BOOT));
 810125a:	f002 f9f1 	bl	8103640 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810125e:	f003 fdaf 	bl	8104dc0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101262:	2201      	movs	r2, #1
 8101264:	2102      	movs	r1, #2
 8101266:	2000      	movs	r0, #0
 8101268:	f003 fd66 	bl	8104d38 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_BOOT));
 810126c:	4b2b      	ldr	r3, [pc, #172]	; (810131c <main+0xe4>)
 810126e:	4a2c      	ldr	r2, [pc, #176]	; (8101320 <main+0xe8>)
 8101270:	681b      	ldr	r3, [r3, #0]
 8101272:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8101276:	2b07      	cmp	r3, #7
 8101278:	d047      	beq.n	810130a <main+0xd2>
 810127a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 810127e:	f043 0301 	orr.w	r3, r3, #1
 8101282:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101286:	f000 fb6d 	bl	8101964 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810128a:	f7ff fc55 	bl	8100b38 <MX_GPIO_Init>
  MX_DMA_Init();
 810128e:	f7ff fbfb 	bl	8100a88 <MX_DMA_Init>
  MX_SPI1_Init();
 8101292:	f000 f85d 	bl	8101350 <MX_SPI1_Init>
  MX_I2C1_Init();
 8101296:	f7ff fc9f 	bl	8100bd8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 810129a:	f000 fa39 	bl	8101710 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  EntryApp app;
 810129e:	a802      	add	r0, sp, #8
 81012a0:	f7ff f99e 	bl	81005e0 <_ZN8EntryAppC1Ev>
 81012a4:	4e1f      	ldr	r6, [pc, #124]	; (8101324 <main+0xec>)
 81012a6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 810133c <main+0x104>
 81012aa:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8101340 <main+0x108>
 81012ae:	f8df b094 	ldr.w	fp, [pc, #148]	; 8101344 <main+0x10c>
 81012b2:	4d1d      	ldr	r5, [pc, #116]	; (8101328 <main+0xf0>)
 81012b4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8101348 <main+0x110>
 81012b8:	4c1c      	ldr	r4, [pc, #112]	; (810132c <main+0xf4>)
 81012ba:	4f1d      	ldr	r7, [pc, #116]	; (8101330 <main+0xf8>)
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 81012bc:	6833      	ldr	r3, [r6, #0]
  *SCB_DEMCR |= 0x01000000;
 81012be:	f8d8 2000 	ldr.w	r2, [r8]
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 81012c2:	681b      	ldr	r3, [r3, #0]
  *DWT_LAR = 0xC5ACCE55; // enable access
 81012c4:	491b      	ldr	r1, [pc, #108]	; (8101334 <main+0xfc>)
  if ((*SCB_DHCSR & 1) && (*ITM_TER & 1)) // Enabled?
 81012c6:	07db      	lsls	r3, r3, #31
 81012c8:	bf44      	itt	mi
 81012ca:	f8d9 3000 	ldrmi.w	r3, [r9]
 81012ce:	681b      	ldrmi	r3, [r3, #0]
  *SCB_DEMCR |= 0x01000000;
 81012d0:	6813      	ldr	r3, [r2, #0]
 81012d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81012d6:	6013      	str	r3, [r2, #0]
  *DWT_LAR = 0xC5ACCE55; // enable access
 81012d8:	f8db 3000 	ldr.w	r3, [fp]
  *DWT_CYCCNT = 0; // reset the counter
 81012dc:	682a      	ldr	r2, [r5, #0]
  *DWT_LAR = 0xC5ACCE55; // enable access
 81012de:	6019      	str	r1, [r3, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 81012e0:	f8da 1000 	ldr.w	r1, [sl]
  *DWT_CYCCNT = 0; // reset the counter
 81012e4:	2300      	movs	r3, #0
 81012e6:	6013      	str	r3, [r2, #0]
  *DWT_CONTROL |= 1 ; // enable the counter
 81012e8:	680b      	ldr	r3, [r1, #0]
 81012ea:	f043 0301 	orr.w	r3, r3, #1
 81012ee:	600b      	str	r3, [r1, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	EnableTiming();
	  	x = *DWT_CYCCNT;
 81012f0:	6813      	ldr	r3, [r2, #0]
 81012f2:	6023      	str	r3, [r4, #0]
	  app.RunSensors();
 81012f4:	a802      	add	r0, sp, #8
 81012f6:	f7ff f999 	bl	810062c <_ZN8EntryApp10RunSensorsEv>
	  y = *DWT_CYCCNT;
 81012fa:	682b      	ldr	r3, [r5, #0]
	  Cycles = (y - x);
 81012fc:	6822      	ldr	r2, [r4, #0]
	  y = *DWT_CYCCNT;
 81012fe:	681b      	ldr	r3, [r3, #0]
 8101300:	603b      	str	r3, [r7, #0]
	  Cycles = (y - x);
 8101302:	1a9b      	subs	r3, r3, r2
 8101304:	4a0c      	ldr	r2, [pc, #48]	; (8101338 <main+0x100>)
 8101306:	6013      	str	r3, [r2, #0]
  while (1)
 8101308:	e7d8      	b.n	81012bc <main+0x84>
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_BOOT));
 810130a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 810130e:	f043 0301 	orr.w	r3, r3, #1
 8101312:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101316:	e7b6      	b.n	8101286 <main+0x4e>
 8101318:	58024400 	.word	0x58024400
 810131c:	e000ed00 	.word	0xe000ed00
 8101320:	58026400 	.word	0x58026400
 8101324:	1000001c 	.word	0x1000001c
 8101328:	1000000c 	.word	0x1000000c
 810132c:	10000260 	.word	0x10000260
 8101330:	10000264 	.word	0x10000264
 8101334:	c5acce55 	.word	0xc5acce55
 8101338:	1000025c 	.word	0x1000025c
 810133c:	10000014 	.word	0x10000014
 8101340:	10000018 	.word	0x10000018
 8101344:	10000010 	.word	0x10000010
 8101348:	10000008 	.word	0x10000008

0810134c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810134c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810134e:	e7fe      	b.n	810134e <Error_Handler+0x2>

08101350 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8101350:	4815      	ldr	r0, [pc, #84]	; (81013a8 <MX_SPI1_Init+0x58>)
 8101352:	4916      	ldr	r1, [pc, #88]	; (81013ac <MX_SPI1_Init+0x5c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101354:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
{
 8101358:	b510      	push	{r4, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810135a:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810135e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101362:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8101364:	2407      	movs	r4, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8101366:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810136a:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810136c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8101370:	e9c0 3402 	strd	r3, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101374:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101378:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810137c:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101380:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101384:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101388:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810138c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101390:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hspi1.Init.CRCPolynomial = 0x0;
 8101394:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101396:	f004 ff11 	bl	81061bc <HAL_SPI_Init>
 810139a:	b900      	cbnz	r0, 810139e <MX_SPI1_Init+0x4e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 810139c:	bd10      	pop	{r4, pc}
 810139e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 81013a2:	f7ff bfd3 	b.w	810134c <Error_Handler>
 81013a6:	bf00      	nop
 81013a8:	10000358 	.word	0x10000358
 81013ac:	40013000 	.word	0x40013000

081013b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81013b0:	b570      	push	{r4, r5, r6, lr}
 81013b2:	4604      	mov	r4, r0
 81013b4:	b0b6      	sub	sp, #216	; 0xd8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013b6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81013b8:	22bc      	movs	r2, #188	; 0xbc
 81013ba:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013bc:	e9cd 1102 	strd	r1, r1, [sp, #8]
 81013c0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 81013c4:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81013c6:	f006 fea1 	bl	810810c <memset>
  if(spiHandle->Instance==SPI1)
 81013ca:	4b3c      	ldr	r3, [pc, #240]	; (81014bc <HAL_SPI_MspInit+0x10c>)
 81013cc:	6822      	ldr	r2, [r4, #0]
 81013ce:	429a      	cmp	r2, r3
 81013d0:	d001      	beq.n	81013d6 <HAL_SPI_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81013d2:	b036      	add	sp, #216	; 0xd8
 81013d4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81013da:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81013dc:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81013de:	f003 ffe1 	bl	81053a4 <HAL_RCCEx_PeriphCLKConfig>
 81013e2:	2800      	cmp	r0, #0
 81013e4:	d161      	bne.n	81014aa <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI1_CLK_ENABLE();
 81013e6:	4b36      	ldr	r3, [pc, #216]	; (81014c0 <HAL_SPI_MspInit+0x110>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81013e8:	4836      	ldr	r0, [pc, #216]	; (81014c4 <HAL_SPI_MspInit+0x114>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 81013ea:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    hdma_spi1_rx.Instance = DMA1_Stream0;
 81013ee:	4e36      	ldr	r6, [pc, #216]	; (81014c8 <HAL_SPI_MspInit+0x118>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 81013f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81013f4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 81013f8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 81013fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8101400:	9200      	str	r2, [sp, #0]
 8101402:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101404:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101408:	f042 0201 	orr.w	r2, r2, #1
 810140c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101414:	f003 0301 	and.w	r3, r3, #1
 8101418:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 810141a:	22e0      	movs	r2, #224	; 0xe0
 810141c:	2302      	movs	r3, #2
 810141e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101422:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101424:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8101426:	2300      	movs	r3, #0
 8101428:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810142c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810142e:	2305      	movs	r3, #5
 8101430:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101432:	f001 ffa7 	bl	8103384 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8101436:	4925      	ldr	r1, [pc, #148]	; (81014cc <HAL_SPI_MspInit+0x11c>)
 8101438:	2225      	movs	r2, #37	; 0x25
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810143a:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 810143c:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8101440:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101442:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101446:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810144a:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810144e:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8101452:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101456:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101458:	6273      	str	r3, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 810145a:	f000 fd7f 	bl	8101f5c <HAL_DMA_Init>
 810145e:	bb50      	cbnz	r0, 81014b6 <HAL_SPI_MspInit+0x106>
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8101460:	4d1b      	ldr	r5, [pc, #108]	; (81014d0 <HAL_SPI_MspInit+0x120>)
 8101462:	491c      	ldr	r1, [pc, #112]	; (81014d4 <HAL_SPI_MspInit+0x124>)
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101464:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8101466:	2226      	movs	r2, #38	; 0x26
 8101468:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 810146c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101470:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101472:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101474:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8101476:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101478:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810147c:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101480:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101484:	e9c5 3207 	strd	r3, r2, [r5, #28]
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8101488:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810148a:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 810148c:	f000 fd66 	bl	8101f5c <HAL_DMA_Init>
 8101490:	b970      	cbnz	r0, 81014b0 <HAL_SPI_MspInit+0x100>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8101492:	2200      	movs	r2, #0
 8101494:	4611      	mov	r1, r2
 8101496:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8101498:	67a5      	str	r5, [r4, #120]	; 0x78
 810149a:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 810149c:	f000 fc3c 	bl	8101d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 81014a0:	2023      	movs	r0, #35	; 0x23
 81014a2:	f000 fc77 	bl	8101d94 <HAL_NVIC_EnableIRQ>
}
 81014a6:	b036      	add	sp, #216	; 0xd8
 81014a8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 81014aa:	f7ff ff4f 	bl	810134c <Error_Handler>
 81014ae:	e79a      	b.n	81013e6 <HAL_SPI_MspInit+0x36>
      Error_Handler();
 81014b0:	f7ff ff4c 	bl	810134c <Error_Handler>
 81014b4:	e7ed      	b.n	8101492 <HAL_SPI_MspInit+0xe2>
      Error_Handler();
 81014b6:	f7ff ff49 	bl	810134c <Error_Handler>
 81014ba:	e7d1      	b.n	8101460 <HAL_SPI_MspInit+0xb0>
 81014bc:	40013000 	.word	0x40013000
 81014c0:	58024400 	.word	0x58024400
 81014c4:	58020000 	.word	0x58020000
 81014c8:	10000268 	.word	0x10000268
 81014cc:	40020010 	.word	0x40020010
 81014d0:	100002e0 	.word	0x100002e0
 81014d4:	40020028 	.word	0x40020028

081014d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81014d8:	4b07      	ldr	r3, [pc, #28]	; (81014f8 <HAL_MspInit+0x20>)
 81014da:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 81014de:	f042 0202 	orr.w	r2, r2, #2
 81014e2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 81014e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
{
 81014ea:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81014ec:	f003 0302 	and.w	r3, r3, #2
 81014f0:	9301      	str	r3, [sp, #4]
 81014f2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81014f4:	b002      	add	sp, #8
 81014f6:	4770      	bx	lr
 81014f8:	58024400 	.word	0x58024400

081014fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81014fc:	e7fe      	b.n	81014fc <NMI_Handler>
 81014fe:	bf00      	nop

08101500 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101500:	e7fe      	b.n	8101500 <HardFault_Handler>
 8101502:	bf00      	nop

08101504 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101504:	e7fe      	b.n	8101504 <MemManage_Handler>
 8101506:	bf00      	nop

08101508 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101508:	e7fe      	b.n	8101508 <BusFault_Handler>
 810150a:	bf00      	nop

0810150c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810150c:	e7fe      	b.n	810150c <UsageFault_Handler>
 810150e:	bf00      	nop

08101510 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101510:	4770      	bx	lr
 8101512:	bf00      	nop

08101514 <DebugMon_Handler>:
 8101514:	4770      	bx	lr
 8101516:	bf00      	nop

08101518 <PendSV_Handler>:
 8101518:	4770      	bx	lr
 810151a:	bf00      	nop

0810151c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810151c:	f000 ba74 	b.w	8101a08 <HAL_IncTick>

08101520 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8101520:	4801      	ldr	r0, [pc, #4]	; (8101528 <DMA1_Stream0_IRQHandler+0x8>)
 8101522:	f001 bc37 	b.w	8102d94 <HAL_DMA_IRQHandler>
 8101526:	bf00      	nop
 8101528:	10000268 	.word	0x10000268

0810152c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 810152c:	4801      	ldr	r0, [pc, #4]	; (8101534 <DMA1_Stream1_IRQHandler+0x8>)
 810152e:	f001 bc31 	b.w	8102d94 <HAL_DMA_IRQHandler>
 8101532:	bf00      	nop
 8101534:	100002e0 	.word	0x100002e0

08101538 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8101538:	4801      	ldr	r0, [pc, #4]	; (8101540 <DMA1_Stream2_IRQHandler+0x8>)
 810153a:	f001 bc2b 	b.w	8102d94 <HAL_DMA_IRQHandler>
 810153e:	bf00      	nop
 8101540:	10000120 	.word	0x10000120

08101544 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8101544:	4801      	ldr	r0, [pc, #4]	; (810154c <DMA1_Stream3_IRQHandler+0x8>)
 8101546:	f001 bc25 	b.w	8102d94 <HAL_DMA_IRQHandler>
 810154a:	bf00      	nop
 810154c:	10000198 	.word	0x10000198

08101550 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8101550:	4801      	ldr	r0, [pc, #4]	; (8101558 <DMA1_Stream4_IRQHandler+0x8>)
 8101552:	f001 bc1f 	b.w	8102d94 <HAL_DMA_IRQHandler>
 8101556:	bf00      	nop
 8101558:	100000a8 	.word	0x100000a8

0810155c <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 810155c:	4801      	ldr	r0, [pc, #4]	; (8101564 <ADC_IRQHandler+0x8>)
 810155e:	f000 ba7d 	b.w	8101a5c <HAL_ADC_IRQHandler>
 8101562:	bf00      	nop
 8101564:	10000044 	.word	0x10000044

08101568 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8101568:	4801      	ldr	r0, [pc, #4]	; (8101570 <I2C1_EV_IRQHandler+0x8>)
 810156a:	f002 bc81 	b.w	8103e70 <HAL_I2C_EV_IRQHandler>
 810156e:	bf00      	nop
 8101570:	10000210 	.word	0x10000210

08101574 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8101574:	4801      	ldr	r0, [pc, #4]	; (810157c <I2C1_ER_IRQHandler+0x8>)
 8101576:	f003 bb4b 	b.w	8104c10 <HAL_I2C_ER_IRQHandler>
 810157a:	bf00      	nop
 810157c:	10000210 	.word	0x10000210

08101580 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101580:	4801      	ldr	r0, [pc, #4]	; (8101588 <SPI1_IRQHandler+0x8>)
 8101582:	f005 bd53 	b.w	810702c <HAL_SPI_IRQHandler>
 8101586:	bf00      	nop
 8101588:	10000358 	.word	0x10000358

0810158c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 810158c:	4801      	ldr	r0, [pc, #4]	; (8101594 <USART3_IRQHandler+0x8>)
 810158e:	f005 bf99 	b.w	81074c4 <HAL_UART_IRQHandler>
 8101592:	bf00      	nop
 8101594:	1000053c 	.word	0x1000053c

08101598 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8101598:	4801      	ldr	r0, [pc, #4]	; (81015a0 <DMA1_Stream7_IRQHandler+0x8>)
 810159a:	f001 bbfb 	b.w	8102d94 <HAL_DMA_IRQHandler>
 810159e:	bf00      	nop
 81015a0:	1000044c 	.word	0x1000044c

081015a4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 81015a4:	4801      	ldr	r0, [pc, #4]	; (81015ac <DMA2_Stream0_IRQHandler+0x8>)
 81015a6:	f001 bbf5 	b.w	8102d94 <HAL_DMA_IRQHandler>
 81015aa:	bf00      	nop
 81015ac:	100004c4 	.word	0x100004c4

081015b0 <_ZN3GPS6ConfigEv>:
   /* Retrieve number of satellites used */
   num_satellites = pvt.numSV;
 }

 void GPS::Config()
 {
 81015b0:	b510      	push	{r4, lr}

  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 81015b2:	4c22      	ldr	r4, [pc, #136]	; (810163c <_ZN3GPS6ConfigEv+0x8c>)
 81015b4:	4922      	ldr	r1, [pc, #136]	; (8101640 <_ZN3GPS6ConfigEv+0x90>)
 81015b6:	220e      	movs	r2, #14
 81015b8:	4620      	mov	r0, r4
 81015ba:	f005 fe63 	bl	8107284 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81015be:	2032      	movs	r0, #50	; 0x32
 81015c0:	f000 fa34 	bl	8101a2c <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 81015c4:	491f      	ldr	r1, [pc, #124]	; (8101644 <_ZN3GPS6ConfigEv+0x94>)
 81015c6:	2210      	movs	r2, #16
 81015c8:	4620      	mov	r0, r4
 81015ca:	f005 fe5b 	bl	8107284 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81015ce:	2032      	movs	r0, #50	; 0x32
 81015d0:	f000 fa2c 	bl	8101a2c <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 81015d4:	491c      	ldr	r1, [pc, #112]	; (8101648 <_ZN3GPS6ConfigEv+0x98>)
 81015d6:	2210      	movs	r2, #16
 81015d8:	4620      	mov	r0, r4
 81015da:	f005 fe53 	bl	8107284 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81015de:	2032      	movs	r0, #50	; 0x32
 81015e0:	f000 fa24 	bl	8101a2c <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 81015e4:	4919      	ldr	r1, [pc, #100]	; (810164c <_ZN3GPS6ConfigEv+0x9c>)
 81015e6:	2210      	movs	r2, #16
 81015e8:	4620      	mov	r0, r4
 81015ea:	f005 fe4b 	bl	8107284 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81015ee:	2032      	movs	r0, #50	; 0x32
 81015f0:	f000 fa1c 	bl	8101a2c <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 81015f4:	4916      	ldr	r1, [pc, #88]	; (8101650 <_ZN3GPS6ConfigEv+0xa0>)
 81015f6:	2210      	movs	r2, #16
 81015f8:	4620      	mov	r0, r4
 81015fa:	f005 fe43 	bl	8107284 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81015fe:	2032      	movs	r0, #50	; 0x32
 8101600:	f000 fa14 	bl	8101a2c <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 8101604:	4913      	ldr	r1, [pc, #76]	; (8101654 <_ZN3GPS6ConfigEv+0xa4>)
 8101606:	2210      	movs	r2, #16
 8101608:	4620      	mov	r0, r4
 810160a:	f005 fe3b 	bl	8107284 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810160e:	2032      	movs	r0, #50	; 0x32
 8101610:	f000 fa0c 	bl	8101a2c <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 8101614:	4910      	ldr	r1, [pc, #64]	; (8101658 <_ZN3GPS6ConfigEv+0xa8>)
 8101616:	2210      	movs	r2, #16
 8101618:	4620      	mov	r0, r4
 810161a:	f005 fe33 	bl	8107284 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810161e:	2032      	movs	r0, #50	; 0x32
 8101620:	f000 fa04 	bl	8101a2c <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 8101624:	490d      	ldr	r1, [pc, #52]	; (810165c <_ZN3GPS6ConfigEv+0xac>)
 8101626:	2210      	movs	r2, #16
 8101628:	4620      	mov	r0, r4
 810162a:	f005 fe2b 	bl	8107284 <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_byte, 1);
 810162e:	4620      	mov	r0, r4
 8101630:	490b      	ldr	r1, [pc, #44]	; (8101660 <_ZN3GPS6ConfigEv+0xb0>)

 }
 8101632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_byte, 1);
 8101636:	2201      	movs	r2, #1
 8101638:	f005 be72 	b.w	8107320 <HAL_UART_Receive_DMA>
 810163c:	1000053c 	.word	0x1000053c
 8101640:	08108148 	.word	0x08108148
 8101644:	08108158 	.word	0x08108158
 8101648:	08108168 	.word	0x08108168
 810164c:	08108178 	.word	0x08108178
 8101650:	08108188 	.word	0x08108188
 8101654:	08108198 	.word	0x08108198
 8101658:	081081a8 	.word	0x081081a8
 810165c:	081081b8 	.word	0x081081b8
 8101660:	100003e8 	.word	0x100003e8

08101664 <_ZN3GPSC1Ev>:
GPS::GPS()
 8101664:	b510      	push	{r4, lr}
 8101666:	4604      	mov	r4, r0
  Config();
 8101668:	f7ff ffa2 	bl	81015b0 <_ZN3GPS6ConfigEv>
}
 810166c:	4620      	mov	r0, r4
 810166e:	bd10      	pop	{r4, pc}

08101670 <HAL_UART_RxCpltCallback>:
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 8101670:	4b20      	ldr	r3, [pc, #128]	; (81016f4 <HAL_UART_RxCpltCallback+0x84>)
 8101672:	6802      	ldr	r2, [r0, #0]
 8101674:	429a      	cmp	r2, r3
 8101676:	d000      	beq.n	810167a <HAL_UART_RxCpltCallback+0xa>
 8101678:	4770      	bx	lr
    {
      /*Append Preamble*/
      if(byte_pos < 2)
 810167a:	491f      	ldr	r1, [pc, #124]	; (81016f8 <HAL_UART_RxCpltCallback+0x88>)
 810167c:	680a      	ldr	r2, [r1, #0]
 810167e:	2a01      	cmp	r2, #1
 8101680:	dd20      	ble.n	81016c4 <HAL_UART_RxCpltCallback+0x54>
        }
      }

      else
      {
        if((byte_pos -2) < data_size)
 8101682:	2a61      	cmp	r2, #97	; 0x61
 8101684:	dc27      	bgt.n	81016d6 <HAL_UART_RxCpltCallback+0x66>
        {
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8101686:	4b1d      	ldr	r3, [pc, #116]	; (81016fc <HAL_UART_RxCpltCallback+0x8c>)
 {
 8101688:	b410      	push	{r4}
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 810168a:	4c1d      	ldr	r4, [pc, #116]	; (8101700 <HAL_UART_RxCpltCallback+0x90>)
 810168c:	1898      	adds	r0, r3, r2
        }
        byte_pos++;
 810168e:	3201      	adds	r2, #1
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8101690:	f894 c000 	ldrb.w	ip, [r4]
 8101694:	f800 cc02 	strb.w	ip, [r0, #-2]

        if (byte_pos == (data_size+2))
 8101698:	2a62      	cmp	r2, #98	; 0x62
        byte_pos++;
 810169a:	600a      	str	r2, [r1, #0]
        if (byte_pos == (data_size+2))
 810169c:	d10f      	bne.n	81016be <HAL_UART_RxCpltCallback+0x4e>
 810169e:	2200      	movs	r2, #0
 81016a0:	1e59      	subs	r1, r3, #1
 81016a2:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
 81016a6:	4613      	mov	r3, r2
       ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 81016a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 81016ac:	4403      	add	r3, r0
 81016ae:	b2db      	uxtb	r3, r3
       ck[1] = ck[1] + ck[0];
 81016b0:	441a      	add	r2, r3
    for (int i = 0; i < (int)sizeof(pvt); i++)
 81016b2:	458c      	cmp	ip, r1
       ck[1] = ck[1] + ck[0];
 81016b4:	b2d2      	uxtb	r2, r2
    for (int i = 0; i < (int)sizeof(pvt); i++)
 81016b6:	d1f7      	bne.n	81016a8 <HAL_UART_RxCpltCallback+0x38>
 81016b8:	4912      	ldr	r1, [pc, #72]	; (8101704 <HAL_UART_RxCpltCallback+0x94>)
 81016ba:	700b      	strb	r3, [r1, #0]
 81016bc:	704a      	strb	r2, [r1, #1]
        {
          byte_pos = 0;
        }
      }
    }
 }
 81016be:	f85d 4b04 	ldr.w	r4, [sp], #4
 81016c2:	4770      	bx	lr
        if(data_byte[0] == UBX_HEADER[byte_pos])
 81016c4:	480e      	ldr	r0, [pc, #56]	; (8101700 <HAL_UART_RxCpltCallback+0x90>)
 81016c6:	4b10      	ldr	r3, [pc, #64]	; (8101708 <HAL_UART_RxCpltCallback+0x98>)
 81016c8:	7800      	ldrb	r0, [r0, #0]
 81016ca:	5c9b      	ldrb	r3, [r3, r2]
 81016cc:	4298      	cmp	r0, r3
 81016ce:	d00d      	beq.n	81016ec <HAL_UART_RxCpltCallback+0x7c>
          byte_pos = 0;
 81016d0:	2300      	movs	r3, #0
 81016d2:	600b      	str	r3, [r1, #0]
 81016d4:	4770      	bx	lr
        byte_pos++;
 81016d6:	3201      	adds	r2, #1
        else if (byte_pos == (data_size+3) )
 81016d8:	2a63      	cmp	r2, #99	; 0x63
        byte_pos++;
 81016da:	600a      	str	r2, [r1, #0]
        else if (byte_pos == (data_size+3) )
 81016dc:	d1f8      	bne.n	81016d0 <HAL_UART_RxCpltCallback+0x60>
          if (data_byte[0] != checksum[0])
 81016de:	4a08      	ldr	r2, [pc, #32]	; (8101700 <HAL_UART_RxCpltCallback+0x90>)
 81016e0:	4b08      	ldr	r3, [pc, #32]	; (8101704 <HAL_UART_RxCpltCallback+0x94>)
 81016e2:	7812      	ldrb	r2, [r2, #0]
 81016e4:	781b      	ldrb	r3, [r3, #0]
 81016e6:	429a      	cmp	r2, r3
 81016e8:	d1f2      	bne.n	81016d0 <HAL_UART_RxCpltCallback+0x60>
 81016ea:	4770      	bx	lr
          byte_pos++;
 81016ec:	3201      	adds	r2, #1
 81016ee:	600a      	str	r2, [r1, #0]
 81016f0:	4770      	bx	lr
 81016f2:	bf00      	nop
 81016f4:	40004800 	.word	0x40004800
 81016f8:	100003e0 	.word	0x100003e0
 81016fc:	100003ec 	.word	0x100003ec
 8101700:	100003e8 	.word	0x100003e8
 8101704:	100003e4 	.word	0x100003e4
 8101708:	08108144 	.word	0x08108144

0810170c <HAL_UART_TxCpltCallback>:
  {
     if(huart->Instance == USART3)
     {

     }
  }
 810170c:	4770      	bx	lr
 810170e:	bf00      	nop

08101710 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101710:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101712:	481f      	ldr	r0, [pc, #124]	; (8101790 <MX_USART3_UART_Init+0x80>)
 8101714:	4c1f      	ldr	r4, [pc, #124]	; (8101794 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101716:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 9600;
 8101718:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 810171c:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 9600;
 810171e:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101722:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101726:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810172a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810172e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101732:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101734:	f006 fbea 	bl	8107f0c <HAL_UART_Init>
 8101738:	b970      	cbnz	r0, 8101758 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810173a:	4815      	ldr	r0, [pc, #84]	; (8101790 <MX_USART3_UART_Init+0x80>)
 810173c:	2100      	movs	r1, #0
 810173e:	f006 fc3d 	bl	8107fbc <HAL_UARTEx_SetTxFifoThreshold>
 8101742:	b988      	cbnz	r0, 8101768 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101744:	4812      	ldr	r0, [pc, #72]	; (8101790 <MX_USART3_UART_Init+0x80>)
 8101746:	2100      	movs	r1, #0
 8101748:	f006 fc7a 	bl	8108040 <HAL_UARTEx_SetRxFifoThreshold>
 810174c:	b9a0      	cbnz	r0, 8101778 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810174e:	4810      	ldr	r0, [pc, #64]	; (8101790 <MX_USART3_UART_Init+0x80>)
 8101750:	f006 fc16 	bl	8107f80 <HAL_UARTEx_DisableFifoMode>
 8101754:	b9b8      	cbnz	r0, 8101786 <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101756:	bd10      	pop	{r4, pc}
    Error_Handler();
 8101758:	f7ff fdf8 	bl	810134c <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810175c:	480c      	ldr	r0, [pc, #48]	; (8101790 <MX_USART3_UART_Init+0x80>)
 810175e:	2100      	movs	r1, #0
 8101760:	f006 fc2c 	bl	8107fbc <HAL_UARTEx_SetTxFifoThreshold>
 8101764:	2800      	cmp	r0, #0
 8101766:	d0ed      	beq.n	8101744 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8101768:	f7ff fdf0 	bl	810134c <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810176c:	4808      	ldr	r0, [pc, #32]	; (8101790 <MX_USART3_UART_Init+0x80>)
 810176e:	2100      	movs	r1, #0
 8101770:	f006 fc66 	bl	8108040 <HAL_UARTEx_SetRxFifoThreshold>
 8101774:	2800      	cmp	r0, #0
 8101776:	d0ea      	beq.n	810174e <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8101778:	f7ff fde8 	bl	810134c <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810177c:	4804      	ldr	r0, [pc, #16]	; (8101790 <MX_USART3_UART_Init+0x80>)
 810177e:	f006 fbff 	bl	8107f80 <HAL_UARTEx_DisableFifoMode>
 8101782:	2800      	cmp	r0, #0
 8101784:	d0e7      	beq.n	8101756 <MX_USART3_UART_Init+0x46>
}
 8101786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 810178a:	f7ff bddf 	b.w	810134c <Error_Handler>
 810178e:	bf00      	nop
 8101790:	1000053c 	.word	0x1000053c
 8101794:	40004800 	.word	0x40004800

08101798 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101798:	b570      	push	{r4, r5, r6, lr}
 810179a:	4604      	mov	r4, r0
 810179c:	b0b6      	sub	sp, #216	; 0xd8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810179e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017a0:	22bc      	movs	r2, #188	; 0xbc
 81017a2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017a4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 81017a8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 81017ac:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017ae:	f006 fcad 	bl	810810c <memset>
  if(uartHandle->Instance==USART3)
 81017b2:	4b3d      	ldr	r3, [pc, #244]	; (81018a8 <HAL_UART_MspInit+0x110>)
 81017b4:	6822      	ldr	r2, [r4, #0]
 81017b6:	429a      	cmp	r2, r3
 81017b8:	d001      	beq.n	81017be <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 81017ba:	b036      	add	sp, #216	; 0xd8
 81017bc:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81017be:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017c0:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81017c2:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017c4:	f003 fdee 	bl	81053a4 <HAL_RCCEx_PeriphCLKConfig>
 81017c8:	2800      	cmp	r0, #0
 81017ca:	d164      	bne.n	8101896 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART3_CLK_ENABLE();
 81017cc:	4b37      	ldr	r3, [pc, #220]	; (81018ac <HAL_UART_MspInit+0x114>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81017ce:	4838      	ldr	r0, [pc, #224]	; (81018b0 <HAL_UART_MspInit+0x118>)
    __HAL_RCC_USART3_CLK_ENABLE();
 81017d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_rx.Instance = DMA1_Stream7;
 81017d4:	4e37      	ldr	r6, [pc, #220]	; (81018b4 <HAL_UART_MspInit+0x11c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 81017d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 81017da:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 81017de:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 81017e2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 81017e6:	9200      	str	r2, [sp, #0]
 81017e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81017ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81017ee:	f042 0208 	orr.w	r2, r2, #8
 81017f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017fa:	f003 0308 	and.w	r3, r3, #8
 81017fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101800:	f44f 7240 	mov.w	r2, #768	; 0x300
 8101804:	2302      	movs	r3, #2
 8101806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810180a:	2200      	movs	r2, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810180c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810180e:	2300      	movs	r3, #0
 8101810:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101814:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101816:	2307      	movs	r3, #7
 8101818:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810181a:	f001 fdb3 	bl	8103384 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 810181e:	4926      	ldr	r1, [pc, #152]	; (81018b8 <HAL_UART_MspInit+0x120>)
 8101820:	222d      	movs	r2, #45	; 0x2d
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101822:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8101824:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8101828:	f44f 7280 	mov.w	r2, #256	; 0x100
 810182c:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101830:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101834:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8101838:	4630      	mov	r0, r6
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810183a:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810183e:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101842:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8101846:	f000 fb89 	bl	8101f5c <HAL_DMA_Init>
 810184a:	bb50      	cbnz	r0, 81018a2 <HAL_UART_MspInit+0x10a>
    hdma_usart3_tx.Instance = DMA2_Stream0;
 810184c:	4d1b      	ldr	r5, [pc, #108]	; (81018bc <HAL_UART_MspInit+0x124>)
 810184e:	491c      	ldr	r1, [pc, #112]	; (81018c0 <HAL_UART_MspInit+0x128>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8101850:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8101852:	222e      	movs	r2, #46	; 0x2e
 8101854:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101858:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810185c:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810185e:	2140      	movs	r1, #64	; 0x40
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101860:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8101862:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101864:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101868:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 810186c:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101870:	e9c5 3207 	strd	r3, r2, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8101874:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101876:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8101878:	f000 fb70 	bl	8101f5c <HAL_DMA_Init>
 810187c:	b970      	cbnz	r0, 810189c <HAL_UART_MspInit+0x104>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 810187e:	2200      	movs	r2, #0
 8101880:	2105      	movs	r1, #5
 8101882:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8101884:	67a5      	str	r5, [r4, #120]	; 0x78
 8101886:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8101888:	f000 fa46 	bl	8101d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 810188c:	2027      	movs	r0, #39	; 0x27
 810188e:	f000 fa81 	bl	8101d94 <HAL_NVIC_EnableIRQ>
}
 8101892:	b036      	add	sp, #216	; 0xd8
 8101894:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8101896:	f7ff fd59 	bl	810134c <Error_Handler>
 810189a:	e797      	b.n	81017cc <HAL_UART_MspInit+0x34>
      Error_Handler();
 810189c:	f7ff fd56 	bl	810134c <Error_Handler>
 81018a0:	e7ed      	b.n	810187e <HAL_UART_MspInit+0xe6>
      Error_Handler();
 81018a2:	f7ff fd53 	bl	810134c <Error_Handler>
 81018a6:	e7d1      	b.n	810184c <HAL_UART_MspInit+0xb4>
 81018a8:	40004800 	.word	0x40004800
 81018ac:	58024400 	.word	0x58024400
 81018b0:	58020c00 	.word	0x58020c00
 81018b4:	1000044c 	.word	0x1000044c
 81018b8:	400200b8 	.word	0x400200b8
 81018bc:	100004c4 	.word	0x100004c4
 81018c0:	40020410 	.word	0x40020410

081018c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 81018fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81018c8:	f7fe ff00 	bl	81006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81018cc:	480c      	ldr	r0, [pc, #48]	; (8101900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81018ce:	490d      	ldr	r1, [pc, #52]	; (8101904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81018d0:	4a0d      	ldr	r2, [pc, #52]	; (8101908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81018d4:	e002      	b.n	81018dc <LoopCopyDataInit>

081018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81018da:	3304      	adds	r3, #4

081018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81018e0:	d3f9      	bcc.n	81018d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81018e2:	4a0a      	ldr	r2, [pc, #40]	; (810190c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81018e4:	4c0a      	ldr	r4, [pc, #40]	; (8101910 <LoopFillZerobss+0x22>)
  movs r3, #0
 81018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81018e8:	e001      	b.n	81018ee <LoopFillZerobss>

081018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81018ec:	3204      	adds	r2, #4

081018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81018f0:	d3fb      	bcc.n	81018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81018f2:	f006 fbe7 	bl	81080c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81018f6:	f7ff fc9f 	bl	8101238 <main>
  bx  lr
 81018fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81018fc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101900:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101904:	10000028 	.word	0x10000028
  ldr r2, =_sidata
 8101908:	08108244 	.word	0x08108244
  ldr r2, =_sbss
 810190c:	10000028 	.word	0x10000028
  ldr r4, =_ebss
 8101910:	100005d0 	.word	0x100005d0

08101914 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101914:	e7fe      	b.n	8101914 <ADC3_IRQHandler>
	...

08101918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101918:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810191a:	4b0f      	ldr	r3, [pc, #60]	; (8101958 <HAL_InitTick+0x40>)
 810191c:	781b      	ldrb	r3, [r3, #0]
 810191e:	b90b      	cbnz	r3, 8101924 <HAL_InitTick+0xc>
  {
    return HAL_ERROR;
 8101920:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8101922:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101924:	490d      	ldr	r1, [pc, #52]	; (810195c <HAL_InitTick+0x44>)
 8101926:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 810192a:	4605      	mov	r5, r0
 810192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8101930:	6808      	ldr	r0, [r1, #0]
 8101932:	fbb0 f0f3 	udiv	r0, r0, r3
 8101936:	f000 fa3b 	bl	8101db0 <HAL_SYSTICK_Config>
 810193a:	4604      	mov	r4, r0
 810193c:	2800      	cmp	r0, #0
 810193e:	d1ef      	bne.n	8101920 <HAL_InitTick+0x8>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101940:	2d0f      	cmp	r5, #15
 8101942:	d8ed      	bhi.n	8101920 <HAL_InitTick+0x8>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101944:	4602      	mov	r2, r0
 8101946:	4629      	mov	r1, r5
 8101948:	f04f 30ff 	mov.w	r0, #4294967295
 810194c:	f000 f9e4 	bl	8101d18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101950:	4b03      	ldr	r3, [pc, #12]	; (8101960 <HAL_InitTick+0x48>)
 8101952:	4620      	mov	r0, r4
 8101954:	601d      	str	r5, [r3, #0]
}
 8101956:	bd38      	pop	{r3, r4, r5, pc}
 8101958:	10000020 	.word	0x10000020
 810195c:	10000000 	.word	0x10000000
 8101960:	10000024 	.word	0x10000024

08101964 <HAL_Init>:
{
 8101964:	b510      	push	{r4, lr}
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101966:	4c23      	ldr	r4, [pc, #140]	; (81019f4 <HAL_Init+0x90>)
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101968:	4a23      	ldr	r2, [pc, #140]	; (81019f8 <HAL_Init+0x94>)
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810196a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 810196e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101972:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8101976:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
{
 810197a:	b082      	sub	sp, #8
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810197c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101980:	9301      	str	r3, [sp, #4]
 8101982:	9b01      	ldr	r3, [sp, #4]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101984:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8101988:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810198c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101990:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101994:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101998:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 810199c:	f043 0301 	orr.w	r3, r3, #1
 81019a0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81019a4:	2003      	movs	r0, #3
 81019a6:	f000 f9a5 	bl	8101cf4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81019aa:	f003 fa95 	bl	8104ed8 <HAL_RCC_GetSysClockFreq>
 81019ae:	69a3      	ldr	r3, [r4, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81019b0:	69a2      	ldr	r2, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81019b2:	4912      	ldr	r1, [pc, #72]	; (81019fc <HAL_Init+0x98>)
 81019b4:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81019b8:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81019bc:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81019be:	5c8a      	ldrb	r2, [r1, r2]
 81019c0:	490f      	ldr	r1, [pc, #60]	; (8101a00 <HAL_Init+0x9c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81019c2:	f003 031f 	and.w	r3, r3, #31
 81019c6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81019c8:	f002 031f 	and.w	r3, r2, #31
  SystemCoreClock = SystemD2Clock;
 81019cc:	4a0d      	ldr	r2, [pc, #52]	; (8101a04 <HAL_Init+0xa0>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81019ce:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81019d2:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81019d4:	600b      	str	r3, [r1, #0]
  SystemCoreClock = SystemD2Clock;
 81019d6:	6013      	str	r3, [r2, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81019d8:	f7ff ff9e 	bl	8101918 <HAL_InitTick>
 81019dc:	b118      	cbz	r0, 81019e6 <HAL_Init+0x82>
    return HAL_ERROR;
 81019de:	2401      	movs	r4, #1
}
 81019e0:	4620      	mov	r0, r4
 81019e2:	b002      	add	sp, #8
 81019e4:	bd10      	pop	{r4, pc}
 81019e6:	4604      	mov	r4, r0
  HAL_MspInit();
 81019e8:	f7ff fd76 	bl	81014d8 <HAL_MspInit>
}
 81019ec:	4620      	mov	r0, r4
 81019ee:	b002      	add	sp, #8
 81019f0:	bd10      	pop	{r4, pc}
 81019f2:	bf00      	nop
 81019f4:	58024400 	.word	0x58024400
 81019f8:	40024000 	.word	0x40024000
 81019fc:	08108134 	.word	0x08108134
 8101a00:	10000004 	.word	0x10000004
 8101a04:	10000000 	.word	0x10000000

08101a08 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8101a08:	4a03      	ldr	r2, [pc, #12]	; (8101a18 <HAL_IncTick+0x10>)
 8101a0a:	4b04      	ldr	r3, [pc, #16]	; (8101a1c <HAL_IncTick+0x14>)
 8101a0c:	6811      	ldr	r1, [r2, #0]
 8101a0e:	781b      	ldrb	r3, [r3, #0]
 8101a10:	440b      	add	r3, r1
 8101a12:	6013      	str	r3, [r2, #0]
}
 8101a14:	4770      	bx	lr
 8101a16:	bf00      	nop
 8101a18:	100005cc 	.word	0x100005cc
 8101a1c:	10000020 	.word	0x10000020

08101a20 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8101a20:	4b01      	ldr	r3, [pc, #4]	; (8101a28 <HAL_GetTick+0x8>)
 8101a22:	6818      	ldr	r0, [r3, #0]
}
 8101a24:	4770      	bx	lr
 8101a26:	bf00      	nop
 8101a28:	100005cc 	.word	0x100005cc

08101a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101a2c:	b538      	push	{r3, r4, r5, lr}
 8101a2e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8101a30:	f7ff fff6 	bl	8101a20 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101a34:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8101a36:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8101a38:	d002      	beq.n	8101a40 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8101a3a:	4b04      	ldr	r3, [pc, #16]	; (8101a4c <HAL_Delay+0x20>)
 8101a3c:	781b      	ldrb	r3, [r3, #0]
 8101a3e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101a40:	f7ff ffee 	bl	8101a20 <HAL_GetTick>
 8101a44:	1b43      	subs	r3, r0, r5
 8101a46:	42a3      	cmp	r3, r4
 8101a48:	d3fa      	bcc.n	8101a40 <HAL_Delay+0x14>
  {
  }
}
 8101a4a:	bd38      	pop	{r3, r4, r5, pc}
 8101a4c:	10000020 	.word	0x10000020

08101a50 <HAL_ADC_ConvCpltCallback>:
 8101a50:	4770      	bx	lr
 8101a52:	bf00      	nop

08101a54 <HAL_ADC_LevelOutOfWindowCallback>:
 8101a54:	4770      	bx	lr
 8101a56:	bf00      	nop

08101a58 <HAL_ADC_ErrorCallback>:
 8101a58:	4770      	bx	lr
 8101a5a:	bf00      	nop

08101a5c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8101a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_ier = hadc->Instance->IER;
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101a5e:	4a8d      	ldr	r2, [pc, #564]	; (8101c94 <HAL_ADC_IRQHandler+0x238>)
  uint32_t tmp_isr = hadc->Instance->ISR;
 8101a60:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101a62:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8101a64:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8101a66:	685f      	ldr	r7, [r3, #4]
{
 8101a68:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101a6a:	f000 80d5 	beq.w	8101c18 <HAL_ADC_IRQHandler+0x1bc>
 8101a6e:	488a      	ldr	r0, [pc, #552]	; (8101c98 <HAL_ADC_IRQHandler+0x23c>)
 8101a70:	498a      	ldr	r1, [pc, #552]	; (8101c9c <HAL_ADC_IRQHandler+0x240>)
 8101a72:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8101a76:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 8101a7a:	4283      	cmp	r3, r0
 8101a7c:	bf08      	it	eq
 8101a7e:	460a      	moveq	r2, r1
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8101a80:	6895      	ldr	r5, [r2, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8101a82:	07b1      	lsls	r1, r6, #30
 8101a84:	f005 051f 	and.w	r5, r5, #31
 8101a88:	d502      	bpl.n	8101a90 <HAL_ADC_IRQHandler+0x34>
 8101a8a:	07ba      	lsls	r2, r7, #30
 8101a8c:	f100 808a 	bmi.w	8101ba4 <HAL_ADC_IRQHandler+0x148>
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8101a90:	0771      	lsls	r1, r6, #29
 8101a92:	d57c      	bpl.n	8101b8e <HAL_ADC_IRQHandler+0x132>
 8101a94:	077a      	lsls	r2, r7, #29
 8101a96:	d57a      	bpl.n	8101b8e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8101a98:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8101a9a:	06d2      	lsls	r2, r2, #27
 8101a9c:	d403      	bmi.n	8101aa6 <HAL_ADC_IRQHandler+0x4a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8101a9e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8101aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8101aa4:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8101aa6:	68da      	ldr	r2, [r3, #12]
 8101aa8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8101aac:	d11c      	bne.n	8101ae8 <HAL_ADC_IRQHandler+0x8c>
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8101aae:	4a7a      	ldr	r2, [pc, #488]	; (8101c98 <HAL_ADC_IRQHandler+0x23c>)
 8101ab0:	4293      	cmp	r3, r2
 8101ab2:	f000 80e6 	beq.w	8101c82 <HAL_ADC_IRQHandler+0x226>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8101ab6:	68da      	ldr	r2, [r3, #12]
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8101ab8:	0490      	lsls	r0, r2, #18
 8101aba:	d415      	bmi.n	8101ae8 <HAL_ADC_IRQHandler+0x8c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8101abc:	681a      	ldr	r2, [r3, #0]
 8101abe:	0711      	lsls	r1, r2, #28
 8101ac0:	d512      	bpl.n	8101ae8 <HAL_ADC_IRQHandler+0x8c>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101ac2:	689a      	ldr	r2, [r3, #8]
 8101ac4:	0752      	lsls	r2, r2, #29
 8101ac6:	f100 80fd 	bmi.w	8101cc4 <HAL_ADC_IRQHandler+0x268>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8101aca:	685a      	ldr	r2, [r3, #4]
 8101acc:	f022 020c 	bic.w	r2, r2, #12
 8101ad0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8101ad2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8101ad8:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8101ada:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101adc:	04db      	lsls	r3, r3, #19
 8101ade:	d403      	bmi.n	8101ae8 <HAL_ADC_IRQHandler+0x8c>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8101ae0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101ae2:	f043 0301 	orr.w	r3, r3, #1
 8101ae6:	6563      	str	r3, [r4, #84]	; 0x54
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8101ae8:	4620      	mov	r0, r4
 8101aea:	f7ff ffb1 	bl	8101a50 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8101aee:	6823      	ldr	r3, [r4, #0]
 8101af0:	220c      	movs	r2, #12
 8101af2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8101af4:	06b0      	lsls	r0, r6, #26
 8101af6:	d550      	bpl.n	8101b9a <HAL_ADC_IRQHandler+0x13e>
 8101af8:	06b9      	lsls	r1, r7, #26
 8101afa:	d54e      	bpl.n	8101b9a <HAL_ADC_IRQHandler+0x13e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8101afc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8101afe:	06d1      	lsls	r1, r2, #27
 8101b00:	d403      	bmi.n	8101b0a <HAL_ADC_IRQHandler+0xae>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8101b02:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8101b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8101b08:	6562      	str	r2, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8101b0a:	4863      	ldr	r0, [pc, #396]	; (8101c98 <HAL_ADC_IRQHandler+0x23c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8101b0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8101b0e:	68d9      	ldr	r1, [r3, #12]
 8101b10:	4283      	cmp	r3, r0
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8101b12:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8101b16:	d077      	beq.n	8101c08 <HAL_ADC_IRQHandler+0x1ac>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8101b18:	68d8      	ldr	r0, [r3, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8101b1a:	b12a      	cbz	r2, 8101b28 <HAL_ADC_IRQHandler+0xcc>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8101b1c:	4a60      	ldr	r2, [pc, #384]	; (8101ca0 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8101b1e:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8101b22:	4002      	ands	r2, r0
 8101b24:	430a      	orrs	r2, r1
 8101b26:	d117      	bne.n	8101b58 <HAL_ADC_IRQHandler+0xfc>
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8101b28:	681a      	ldr	r2, [r3, #0]
 8101b2a:	0652      	lsls	r2, r2, #25
 8101b2c:	d514      	bpl.n	8101b58 <HAL_ADC_IRQHandler+0xfc>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8101b2e:	0281      	lsls	r1, r0, #10
 8101b30:	d412      	bmi.n	8101b58 <HAL_ADC_IRQHandler+0xfc>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101b32:	689a      	ldr	r2, [r3, #8]
 8101b34:	0712      	lsls	r2, r2, #28
 8101b36:	f100 80bc 	bmi.w	8101cb2 <HAL_ADC_IRQHandler+0x256>
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8101b3a:	685a      	ldr	r2, [r3, #4]
 8101b3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8101b40:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8101b42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8101b48:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8101b4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101b4c:	05d8      	lsls	r0, r3, #23
 8101b4e:	d403      	bmi.n	8101b58 <HAL_ADC_IRQHandler+0xfc>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8101b50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101b52:	f043 0301 	orr.w	r3, r3, #1
 8101b56:	6563      	str	r3, [r4, #84]	; 0x54
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8101b58:	4620      	mov	r0, r4
 8101b5a:	f000 f8c1 	bl	8101ce0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8101b5e:	6823      	ldr	r3, [r4, #0]
 8101b60:	2260      	movs	r2, #96	; 0x60
 8101b62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8101b64:	0631      	lsls	r1, r6, #24
 8101b66:	d501      	bpl.n	8101b6c <HAL_ADC_IRQHandler+0x110>
 8101b68:	063a      	lsls	r2, r7, #24
 8101b6a:	d463      	bmi.n	8101c34 <HAL_ADC_IRQHandler+0x1d8>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8101b6c:	05f0      	lsls	r0, r6, #23
 8101b6e:	d501      	bpl.n	8101b74 <HAL_ADC_IRQHandler+0x118>
 8101b70:	05f9      	lsls	r1, r7, #23
 8101b72:	d46a      	bmi.n	8101c4a <HAL_ADC_IRQHandler+0x1ee>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8101b74:	05b2      	lsls	r2, r6, #22
 8101b76:	d501      	bpl.n	8101b7c <HAL_ADC_IRQHandler+0x120>
 8101b78:	05b8      	lsls	r0, r7, #22
 8101b7a:	d44f      	bmi.n	8101c1c <HAL_ADC_IRQHandler+0x1c0>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8101b7c:	06f1      	lsls	r1, r6, #27
 8101b7e:	d501      	bpl.n	8101b84 <HAL_ADC_IRQHandler+0x128>
 8101b80:	06fa      	lsls	r2, r7, #27
 8101b82:	d41d      	bmi.n	8101bc0 <HAL_ADC_IRQHandler+0x164>
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8101b84:	0570      	lsls	r0, r6, #21
 8101b86:	d501      	bpl.n	8101b8c <HAL_ADC_IRQHandler+0x130>
 8101b88:	0579      	lsls	r1, r7, #21
 8101b8a:	d46a      	bmi.n	8101c62 <HAL_ADC_IRQHandler+0x206>
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8101b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8101b8e:	0730      	lsls	r0, r6, #28
 8101b90:	d5b0      	bpl.n	8101af4 <HAL_ADC_IRQHandler+0x98>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8101b92:	0739      	lsls	r1, r7, #28
 8101b94:	d480      	bmi.n	8101a98 <HAL_ADC_IRQHandler+0x3c>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8101b96:	06b0      	lsls	r0, r6, #26
 8101b98:	d4ae      	bmi.n	8101af8 <HAL_ADC_IRQHandler+0x9c>
 8101b9a:	0672      	lsls	r2, r6, #25
 8101b9c:	d5e2      	bpl.n	8101b64 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8101b9e:	0678      	lsls	r0, r7, #25
 8101ba0:	d5e0      	bpl.n	8101b64 <HAL_ADC_IRQHandler+0x108>
 8101ba2:	e7ab      	b.n	8101afc <HAL_ADC_IRQHandler+0xa0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8101ba4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101ba6:	06d8      	lsls	r0, r3, #27
 8101ba8:	d403      	bmi.n	8101bb2 <HAL_ADC_IRQHandler+0x156>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8101baa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8101bb0:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8101bb2:	4620      	mov	r0, r4
 8101bb4:	f000 f89c 	bl	8101cf0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8101bb8:	6823      	ldr	r3, [r4, #0]
 8101bba:	2202      	movs	r2, #2
 8101bbc:	601a      	str	r2, [r3, #0]
 8101bbe:	e767      	b.n	8101a90 <HAL_ADC_IRQHandler+0x34>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8101bc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8101bc2:	b192      	cbz	r2, 8101bea <HAL_ADC_IRQHandler+0x18e>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8101bc4:	2d00      	cmp	r5, #0
 8101bc6:	d061      	beq.n	8101c8c <HAL_ADC_IRQHandler+0x230>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8101bc8:	4a32      	ldr	r2, [pc, #200]	; (8101c94 <HAL_ADC_IRQHandler+0x238>)
 8101bca:	4293      	cmp	r3, r2
 8101bcc:	f000 8083 	beq.w	8101cd6 <HAL_ADC_IRQHandler+0x27a>
 8101bd0:	4831      	ldr	r0, [pc, #196]	; (8101c98 <HAL_ADC_IRQHandler+0x23c>)
 8101bd2:	4932      	ldr	r1, [pc, #200]	; (8101c9c <HAL_ADC_IRQHandler+0x240>)
 8101bd4:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8101bd8:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 8101bdc:	4283      	cmp	r3, r0
 8101bde:	bf08      	it	eq
 8101be0:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8101be2:	6892      	ldr	r2, [r2, #8]
 8101be4:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8101be8:	d00b      	beq.n	8101c02 <HAL_ADC_IRQHandler+0x1a6>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8101bea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101bf0:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8101bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8101bf4:	f043 0302 	orr.w	r3, r3, #2
 8101bf8:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8101bfa:	4620      	mov	r0, r4
 8101bfc:	f7ff ff2c 	bl	8101a58 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8101c00:	6823      	ldr	r3, [r4, #0]
 8101c02:	2210      	movs	r2, #16
 8101c04:	601a      	str	r2, [r3, #0]
 8101c06:	e7bd      	b.n	8101b84 <HAL_ADC_IRQHandler+0x128>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101c08:	2d00      	cmp	r5, #0
 8101c0a:	d085      	beq.n	8101b18 <HAL_ADC_IRQHandler+0xbc>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8101c0c:	1fa8      	subs	r0, r5, #6
 8101c0e:	2801      	cmp	r0, #1
 8101c10:	d982      	bls.n	8101b18 <HAL_ADC_IRQHandler+0xbc>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8101c12:	4820      	ldr	r0, [pc, #128]	; (8101c94 <HAL_ADC_IRQHandler+0x238>)
 8101c14:	68c0      	ldr	r0, [r0, #12]
 8101c16:	e780      	b.n	8101b1a <HAL_ADC_IRQHandler+0xbe>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101c18:	4a20      	ldr	r2, [pc, #128]	; (8101c9c <HAL_ADC_IRQHandler+0x240>)
 8101c1a:	e731      	b.n	8101a80 <HAL_ADC_IRQHandler+0x24>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8101c1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101c22:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8101c24:	4620      	mov	r0, r4
 8101c26:	f000 f861 	bl	8101cec <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8101c2a:	6823      	ldr	r3, [r4, #0]
 8101c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101c30:	601a      	str	r2, [r3, #0]
 8101c32:	e7a3      	b.n	8101b7c <HAL_ADC_IRQHandler+0x120>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8101c34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101c3a:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8101c3c:	4620      	mov	r0, r4
 8101c3e:	f7ff ff09 	bl	8101a54 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8101c42:	6823      	ldr	r3, [r4, #0]
 8101c44:	2280      	movs	r2, #128	; 0x80
 8101c46:	601a      	str	r2, [r3, #0]
 8101c48:	e790      	b.n	8101b6c <HAL_ADC_IRQHandler+0x110>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8101c4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c50:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8101c52:	4620      	mov	r0, r4
 8101c54:	f000 f848 	bl	8101ce8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8101c58:	6823      	ldr	r3, [r4, #0]
 8101c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101c5e:	601a      	str	r2, [r3, #0]
 8101c60:	e788      	b.n	8101b74 <HAL_ADC_IRQHandler+0x118>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8101c62:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8101c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8101c68:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8101c6a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8101c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8101c70:	f042 0208 	orr.w	r2, r2, #8
 8101c74:	65a2      	str	r2, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8101c76:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8101c78:	6019      	str	r1, [r3, #0]
}
 8101c7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8101c7e:	f000 b831 	b.w	8101ce4 <HAL_ADCEx_InjectedQueueOverflowCallback>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101c82:	2d09      	cmp	r5, #9
 8101c84:	d90e      	bls.n	8101ca4 <HAL_ADC_IRQHandler+0x248>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8101c86:	4a03      	ldr	r2, [pc, #12]	; (8101c94 <HAL_ADC_IRQHandler+0x238>)
 8101c88:	68d2      	ldr	r2, [r2, #12]
 8101c8a:	e715      	b.n	8101ab8 <HAL_ADC_IRQHandler+0x5c>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8101c8c:	68da      	ldr	r2, [r3, #12]
 8101c8e:	0795      	lsls	r5, r2, #30
 8101c90:	d0b7      	beq.n	8101c02 <HAL_ADC_IRQHandler+0x1a6>
 8101c92:	e7aa      	b.n	8101bea <HAL_ADC_IRQHandler+0x18e>
 8101c94:	40022000 	.word	0x40022000
 8101c98:	40022100 	.word	0x40022100
 8101c9c:	40022300 	.word	0x40022300
 8101ca0:	02002000 	.word	0x02002000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101ca4:	f240 2221 	movw	r2, #545	; 0x221
 8101ca8:	40ea      	lsrs	r2, r5
 8101caa:	07d2      	lsls	r2, r2, #31
 8101cac:	f53f af03 	bmi.w	8101ab6 <HAL_ADC_IRQHandler+0x5a>
 8101cb0:	e7e9      	b.n	8101c86 <HAL_ADC_IRQHandler+0x22a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101cb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101cb4:	f043 0310 	orr.w	r3, r3, #16
 8101cb8:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8101cbc:	f043 0301 	orr.w	r3, r3, #1
 8101cc0:	65a3      	str	r3, [r4, #88]	; 0x58
 8101cc2:	e749      	b.n	8101b58 <HAL_ADC_IRQHandler+0xfc>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101cc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8101cc6:	f043 0310 	orr.w	r3, r3, #16
 8101cca:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101ccc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8101cce:	f043 0301 	orr.w	r3, r3, #1
 8101cd2:	65a3      	str	r3, [r4, #88]	; 0x58
 8101cd4:	e708      	b.n	8101ae8 <HAL_ADC_IRQHandler+0x8c>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8101cd6:	4a01      	ldr	r2, [pc, #4]	; (8101cdc <HAL_ADC_IRQHandler+0x280>)
 8101cd8:	e783      	b.n	8101be2 <HAL_ADC_IRQHandler+0x186>
 8101cda:	bf00      	nop
 8101cdc:	40022300 	.word	0x40022300

08101ce0 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8101ce0:	4770      	bx	lr
 8101ce2:	bf00      	nop

08101ce4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8101ce4:	4770      	bx	lr
 8101ce6:	bf00      	nop

08101ce8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8101ce8:	4770      	bx	lr
 8101cea:	bf00      	nop

08101cec <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8101cec:	4770      	bx	lr
 8101cee:	bf00      	nop

08101cf0 <HAL_ADCEx_EndOfSamplingCallback>:
 8101cf0:	4770      	bx	lr
 8101cf2:	bf00      	nop

08101cf4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101cf4:	4907      	ldr	r1, [pc, #28]	; (8101d14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8101cf6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101cf8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101cfa:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101cfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101d02:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101d04:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101d06:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8101d0e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8101d10:	4770      	bx	lr
 8101d12:	bf00      	nop
 8101d14:	e000ed00 	.word	0xe000ed00

08101d18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101d18:	4b1c      	ldr	r3, [pc, #112]	; (8101d8c <HAL_NVIC_SetPriority+0x74>)
 8101d1a:	68db      	ldr	r3, [r3, #12]
 8101d1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101d20:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101d22:	f1c3 0e07 	rsb	lr, r3, #7
 8101d26:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101d2a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101d2e:	bf28      	it	cs
 8101d30:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101d34:	f1bc 0f06 	cmp.w	ip, #6
 8101d38:	d91b      	bls.n	8101d72 <HAL_NVIC_SetPriority+0x5a>
 8101d3a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101d3c:	f04f 3cff 	mov.w	ip, #4294967295
 8101d40:	fa0c fc03 	lsl.w	ip, ip, r3
 8101d44:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d48:	f04f 3cff 	mov.w	ip, #4294967295
 8101d4c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8101d50:	ea21 010c 	bic.w	r1, r1, ip
 8101d54:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8101d56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d58:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8101d5c:	db0c      	blt.n	8101d78 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d5e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8101d62:	0109      	lsls	r1, r1, #4
 8101d64:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8101d68:	b2c9      	uxtb	r1, r1
 8101d6a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8101d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8101d72:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101d74:	4613      	mov	r3, r2
 8101d76:	e7e7      	b.n	8101d48 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101d78:	4b05      	ldr	r3, [pc, #20]	; (8101d90 <HAL_NVIC_SetPriority+0x78>)
 8101d7a:	f000 000f 	and.w	r0, r0, #15
 8101d7e:	0109      	lsls	r1, r1, #4
 8101d80:	4403      	add	r3, r0
 8101d82:	b2c9      	uxtb	r1, r1
 8101d84:	7619      	strb	r1, [r3, #24]
 8101d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8101d8a:	bf00      	nop
 8101d8c:	e000ed00 	.word	0xe000ed00
 8101d90:	e000ecfc 	.word	0xe000ecfc

08101d94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8101d94:	2800      	cmp	r0, #0
 8101d96:	db08      	blt.n	8101daa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101d98:	4a04      	ldr	r2, [pc, #16]	; (8101dac <HAL_NVIC_EnableIRQ+0x18>)
 8101d9a:	0941      	lsrs	r1, r0, #5
 8101d9c:	2301      	movs	r3, #1
 8101d9e:	f000 001f 	and.w	r0, r0, #31
 8101da2:	fa03 f000 	lsl.w	r0, r3, r0
 8101da6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8101daa:	4770      	bx	lr
 8101dac:	e000e100 	.word	0xe000e100

08101db0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101db0:	3801      	subs	r0, #1
 8101db2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8101db6:	d210      	bcs.n	8101dda <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101db8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101dba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101dbe:	4c08      	ldr	r4, [pc, #32]	; (8101de0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101dc0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101dc2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8101dc6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101dca:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101dcc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101dce:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101dd0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8101dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101dd6:	6119      	str	r1, [r3, #16]
 8101dd8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8101dda:	2001      	movs	r0, #1
 8101ddc:	4770      	bx	lr
 8101dde:	bf00      	nop
 8101de0:	e000ed00 	.word	0xe000ed00

08101de4 <HAL_GetCurrentCPUID>:
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101de4:	4b04      	ldr	r3, [pc, #16]	; (8101df8 <HAL_GetCurrentCPUID+0x14>)
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	f3c3 1303 	ubfx	r3, r3, #4, #4
  {
    return  CM7_CPUID;
  }
  else
  {
    return CM4_CPUID;
 8101dec:	2b07      	cmp	r3, #7
  }
}
 8101dee:	bf0c      	ite	eq
 8101df0:	2003      	moveq	r0, #3
 8101df2:	2001      	movne	r0, #1
 8101df4:	4770      	bx	lr
 8101df6:	bf00      	nop
 8101df8:	e000ed00 	.word	0xe000ed00

08101dfc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101dfc:	492b      	ldr	r1, [pc, #172]	; (8101eac <DMA_CalcBaseAndBitshift+0xb0>)
 8101dfe:	6803      	ldr	r3, [r0, #0]
 8101e00:	428b      	cmp	r3, r1
{
 8101e02:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101e04:	d031      	beq.n	8101e6a <DMA_CalcBaseAndBitshift+0x6e>
 8101e06:	3118      	adds	r1, #24
 8101e08:	428b      	cmp	r3, r1
 8101e0a:	d02e      	beq.n	8101e6a <DMA_CalcBaseAndBitshift+0x6e>
 8101e0c:	3118      	adds	r1, #24
 8101e0e:	428b      	cmp	r3, r1
 8101e10:	d02b      	beq.n	8101e6a <DMA_CalcBaseAndBitshift+0x6e>
 8101e12:	3118      	adds	r1, #24
 8101e14:	428b      	cmp	r3, r1
 8101e16:	d028      	beq.n	8101e6a <DMA_CalcBaseAndBitshift+0x6e>
 8101e18:	3118      	adds	r1, #24
 8101e1a:	428b      	cmp	r3, r1
 8101e1c:	d035      	beq.n	8101e8a <DMA_CalcBaseAndBitshift+0x8e>
 8101e1e:	3118      	adds	r1, #24
 8101e20:	428b      	cmp	r3, r1
 8101e22:	d032      	beq.n	8101e8a <DMA_CalcBaseAndBitshift+0x8e>
 8101e24:	3118      	adds	r1, #24
 8101e26:	428b      	cmp	r3, r1
 8101e28:	d02f      	beq.n	8101e8a <DMA_CalcBaseAndBitshift+0x8e>
 8101e2a:	3118      	adds	r1, #24
 8101e2c:	428b      	cmp	r3, r1
 8101e2e:	d02c      	beq.n	8101e8a <DMA_CalcBaseAndBitshift+0x8e>
 8101e30:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8101e34:	428b      	cmp	r3, r1
 8101e36:	d018      	beq.n	8101e6a <DMA_CalcBaseAndBitshift+0x6e>
 8101e38:	3118      	adds	r1, #24
 8101e3a:	428b      	cmp	r3, r1
 8101e3c:	d015      	beq.n	8101e6a <DMA_CalcBaseAndBitshift+0x6e>
 8101e3e:	3118      	adds	r1, #24
 8101e40:	428b      	cmp	r3, r1
 8101e42:	d012      	beq.n	8101e6a <DMA_CalcBaseAndBitshift+0x6e>
 8101e44:	3118      	adds	r1, #24
 8101e46:	428b      	cmp	r3, r1
 8101e48:	d00f      	beq.n	8101e6a <DMA_CalcBaseAndBitshift+0x6e>
 8101e4a:	3118      	adds	r1, #24
 8101e4c:	428b      	cmp	r3, r1
 8101e4e:	d01c      	beq.n	8101e8a <DMA_CalcBaseAndBitshift+0x8e>
 8101e50:	3118      	adds	r1, #24
 8101e52:	428b      	cmp	r3, r1
 8101e54:	d019      	beq.n	8101e8a <DMA_CalcBaseAndBitshift+0x8e>
 8101e56:	3118      	adds	r1, #24
 8101e58:	428b      	cmp	r3, r1
 8101e5a:	d016      	beq.n	8101e8a <DMA_CalcBaseAndBitshift+0x8e>
 8101e5c:	3118      	adds	r1, #24
 8101e5e:	428b      	cmp	r3, r1
 8101e60:	d013      	beq.n	8101e8a <DMA_CalcBaseAndBitshift+0x8e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8101e62:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
 8101e66:	6590      	str	r0, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8101e68:	4770      	bx	lr
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8101e6a:	4811      	ldr	r0, [pc, #68]	; (8101eb0 <DMA_CalcBaseAndBitshift+0xb4>)
 8101e6c:	b2d9      	uxtb	r1, r3
 8101e6e:	3910      	subs	r1, #16
 8101e70:	fba0 0101 	umull	r0, r1, r0, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8101e74:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8101e78:	480e      	ldr	r0, [pc, #56]	; (8101eb4 <DMA_CalcBaseAndBitshift+0xb8>)
 8101e7a:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8101e7c:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8101e80:	f020 0003 	bic.w	r0, r0, #3
 8101e84:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
 8101e88:	4770      	bx	lr
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8101e8a:	4809      	ldr	r0, [pc, #36]	; (8101eb0 <DMA_CalcBaseAndBitshift+0xb4>)
 8101e8c:	b2d9      	uxtb	r1, r3
 8101e8e:	3910      	subs	r1, #16
 8101e90:	fba0 0101 	umull	r0, r1, r0, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8101e94:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8101e98:	4806      	ldr	r0, [pc, #24]	; (8101eb4 <DMA_CalcBaseAndBitshift+0xb8>)
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8101e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8101e9e:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8101ea0:	f023 0303 	bic.w	r3, r3, #3
 8101ea4:	1d18      	adds	r0, r3, #4
 8101ea6:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
}
 8101eaa:	4770      	bx	lr
 8101eac:	40020010 	.word	0x40020010
 8101eb0:	aaaaaaab 	.word	0xaaaaaaab
 8101eb4:	081081c8 	.word	0x081081c8

08101eb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101eb8:	4a22      	ldr	r2, [pc, #136]	; (8101f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8101eba:	6803      	ldr	r3, [r0, #0]
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101ebc:	4293      	cmp	r3, r2
{
 8101ebe:	b410      	push	{r4}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101ec0:	d029      	beq.n	8101f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8101ec2:	3214      	adds	r2, #20
 8101ec4:	4293      	cmp	r3, r2
 8101ec6:	d026      	beq.n	8101f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8101ec8:	3214      	adds	r2, #20
 8101eca:	4293      	cmp	r3, r2
 8101ecc:	d023      	beq.n	8101f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8101ece:	3214      	adds	r2, #20
 8101ed0:	4293      	cmp	r3, r2
 8101ed2:	d020      	beq.n	8101f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8101ed4:	3214      	adds	r2, #20
 8101ed6:	4293      	cmp	r3, r2
 8101ed8:	d01d      	beq.n	8101f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8101eda:	3214      	adds	r2, #20
 8101edc:	4293      	cmp	r3, r2
 8101ede:	d01a      	beq.n	8101f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8101ee0:	3214      	adds	r2, #20
 8101ee2:	4293      	cmp	r3, r2
 8101ee4:	d017      	beq.n	8101f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8101ee6:	3214      	adds	r2, #20
 8101ee8:	4293      	cmp	r3, r2
 8101eea:	d014      	beq.n	8101f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8101eec:	4916      	ldr	r1, [pc, #88]	; (8101f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8101eee:	4c17      	ldr	r4, [pc, #92]	; (8101f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8101ef0:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8101ef2:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8101ef4:	3a10      	subs	r2, #16
 8101ef6:	fba4 4202 	umull	r4, r2, r4, r2
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8101efa:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8101efc:	ea4f 1312 	mov.w	r3, r2, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8101f00:	d800      	bhi.n	8101f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
 8101f02:	3308      	adds	r3, #8
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8101f04:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8101f08:	4c11      	ldr	r4, [pc, #68]	; (8101f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8101f0a:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8101f0e:	f003 031f 	and.w	r3, r3, #31
 8101f12:	2101      	movs	r1, #1
 8101f14:	e00d      	b.n	8101f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8101f16:	4a0f      	ldr	r2, [pc, #60]	; (8101f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8101f18:	4c0f      	ldr	r4, [pc, #60]	; (8101f58 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8101f1a:	b2db      	uxtb	r3, r3
 8101f1c:	3b08      	subs	r3, #8
 8101f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8101f22:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8101f24:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8101f28:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8101f2c:	f003 031f 	and.w	r3, r3, #31
 8101f30:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8101f32:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8101f34:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8101f38:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8101f3c:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8101f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8101f42:	4770      	bx	lr
 8101f44:	58025408 	.word	0x58025408
 8101f48:	bffdfbf0 	.word	0xbffdfbf0
 8101f4c:	aaaaaaab 	.word	0xaaaaaaab
 8101f50:	40020880 	.word	0x40020880
 8101f54:	cccccccd 	.word	0xcccccccd
 8101f58:	58025880 	.word	0x58025880

08101f5c <HAL_DMA_Init>:
{
 8101f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101f5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8101f60:	f7ff fd5e 	bl	8101a20 <HAL_GetTick>
  if(hdma == NULL)
 8101f64:	2c00      	cmp	r4, #0
 8101f66:	f000 8141 	beq.w	81021ec <HAL_DMA_Init+0x290>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101f6a:	6823      	ldr	r3, [r4, #0]
 8101f6c:	4aa0      	ldr	r2, [pc, #640]	; (81021f0 <HAL_DMA_Init+0x294>)
 8101f6e:	4293      	cmp	r3, r2
 8101f70:	4605      	mov	r5, r0
 8101f72:	d054      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101f74:	3218      	adds	r2, #24
 8101f76:	4293      	cmp	r3, r2
 8101f78:	d051      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101f7a:	3218      	adds	r2, #24
 8101f7c:	4293      	cmp	r3, r2
 8101f7e:	d04e      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101f80:	3218      	adds	r2, #24
 8101f82:	4293      	cmp	r3, r2
 8101f84:	d04b      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101f86:	3218      	adds	r2, #24
 8101f88:	4293      	cmp	r3, r2
 8101f8a:	d048      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101f8c:	3218      	adds	r2, #24
 8101f8e:	4293      	cmp	r3, r2
 8101f90:	d045      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101f92:	3218      	adds	r2, #24
 8101f94:	4293      	cmp	r3, r2
 8101f96:	d042      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101f98:	3218      	adds	r2, #24
 8101f9a:	4293      	cmp	r3, r2
 8101f9c:	d03f      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101f9e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8101fa2:	4293      	cmp	r3, r2
 8101fa4:	d03b      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101fa6:	3218      	adds	r2, #24
 8101fa8:	4293      	cmp	r3, r2
 8101faa:	d038      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101fac:	3218      	adds	r2, #24
 8101fae:	4293      	cmp	r3, r2
 8101fb0:	d035      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101fb2:	3218      	adds	r2, #24
 8101fb4:	4293      	cmp	r3, r2
 8101fb6:	d032      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101fb8:	3218      	adds	r2, #24
 8101fba:	4293      	cmp	r3, r2
 8101fbc:	d02f      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101fbe:	3218      	adds	r2, #24
 8101fc0:	4293      	cmp	r3, r2
 8101fc2:	d02c      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101fc4:	3218      	adds	r2, #24
 8101fc6:	4293      	cmp	r3, r2
 8101fc8:	d029      	beq.n	810201e <HAL_DMA_Init+0xc2>
 8101fca:	3218      	adds	r2, #24
 8101fcc:	4293      	cmp	r3, r2
 8101fce:	d026      	beq.n	810201e <HAL_DMA_Init+0xc2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8101fd0:	4a88      	ldr	r2, [pc, #544]	; (81021f4 <HAL_DMA_Init+0x298>)
 8101fd2:	4293      	cmp	r3, r2
 8101fd4:	f000 8175 	beq.w	81022c2 <HAL_DMA_Init+0x366>
 8101fd8:	4a87      	ldr	r2, [pc, #540]	; (81021f8 <HAL_DMA_Init+0x29c>)
 8101fda:	4293      	cmp	r3, r2
 8101fdc:	f000 8171 	beq.w	81022c2 <HAL_DMA_Init+0x366>
 8101fe0:	3214      	adds	r2, #20
 8101fe2:	4293      	cmp	r3, r2
 8101fe4:	f000 816d 	beq.w	81022c2 <HAL_DMA_Init+0x366>
 8101fe8:	3214      	adds	r2, #20
 8101fea:	4293      	cmp	r3, r2
 8101fec:	f000 8169 	beq.w	81022c2 <HAL_DMA_Init+0x366>
 8101ff0:	3214      	adds	r2, #20
 8101ff2:	4293      	cmp	r3, r2
 8101ff4:	f000 8165 	beq.w	81022c2 <HAL_DMA_Init+0x366>
 8101ff8:	3214      	adds	r2, #20
 8101ffa:	4293      	cmp	r3, r2
 8101ffc:	f000 8161 	beq.w	81022c2 <HAL_DMA_Init+0x366>
 8102000:	3214      	adds	r2, #20
 8102002:	4293      	cmp	r3, r2
 8102004:	f000 815d 	beq.w	81022c2 <HAL_DMA_Init+0x366>
 8102008:	3214      	adds	r2, #20
 810200a:	4293      	cmp	r3, r2
 810200c:	f000 8159 	beq.w	81022c2 <HAL_DMA_Init+0x366>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102010:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102012:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102014:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102016:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 810201a:	2001      	movs	r0, #1
}
 810201c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 810201e:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8102020:	2100      	movs	r1, #0
 8102022:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8102026:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 810202a:	681a      	ldr	r2, [r3, #0]
 810202c:	f022 0201 	bic.w	r2, r2, #1
 8102030:	601a      	str	r2, [r3, #0]
 8102032:	e006      	b.n	8102042 <HAL_DMA_Init+0xe6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102034:	f7ff fcf4 	bl	8101a20 <HAL_GetTick>
 8102038:	1b43      	subs	r3, r0, r5
 810203a:	2b05      	cmp	r3, #5
 810203c:	f200 80bd 	bhi.w	81021ba <HAL_DMA_Init+0x25e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102040:	6823      	ldr	r3, [r4, #0]
 8102042:	681a      	ldr	r2, [r3, #0]
 8102044:	07d6      	lsls	r6, r2, #31
 8102046:	d4f5      	bmi.n	8102034 <HAL_DMA_Init+0xd8>
    registerValue |=  hdma->Init.Direction           |
 8102048:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810204c:	6920      	ldr	r0, [r4, #16]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 810204e:	681d      	ldr	r5, [r3, #0]
    registerValue |=  hdma->Init.Direction           |
 8102050:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102052:	4302      	orrs	r2, r0
 8102054:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102056:	69a1      	ldr	r1, [r4, #24]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102058:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810205a:	69e0      	ldr	r0, [r4, #28]
 810205c:	430a      	orrs	r2, r1
 810205e:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8102060:	4866      	ldr	r0, [pc, #408]	; (81021fc <HAL_DMA_Init+0x2a0>)
 8102062:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8102064:	6a25      	ldr	r5, [r4, #32]
 8102066:	432a      	orrs	r2, r5
    registerValue |=  hdma->Init.Direction           |
 8102068:	4302      	orrs	r2, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810206a:	4865      	ldr	r0, [pc, #404]	; (8102200 <HAL_DMA_Init+0x2a4>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810206c:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810206e:	6800      	ldr	r0, [r0, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102070:	2d04      	cmp	r5, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102072:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8102076:	ea4f 4000 	mov.w	r0, r0, lsl #16
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810207a:	f000 80c5 	beq.w	8102208 <HAL_DMA_Init+0x2ac>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810207e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8102082:	d277      	bcs.n	8102174 <HAL_DMA_Init+0x218>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102084:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102086:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102088:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 810208c:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810208e:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102090:	4620      	mov	r0, r4
 8102092:	f7ff feb3 	bl	8101dfc <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102096:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8102098:	f003 021f 	and.w	r2, r3, #31
 810209c:	233f      	movs	r3, #63	; 0x3f
 810209e:	4093      	lsls	r3, r2
 81020a0:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81020a2:	6823      	ldr	r3, [r4, #0]
 81020a4:	4a52      	ldr	r2, [pc, #328]	; (81021f0 <HAL_DMA_Init+0x294>)
 81020a6:	4293      	cmp	r3, r2
 81020a8:	d045      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020aa:	3218      	adds	r2, #24
 81020ac:	4293      	cmp	r3, r2
 81020ae:	d042      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020b0:	3218      	adds	r2, #24
 81020b2:	4293      	cmp	r3, r2
 81020b4:	d03f      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020b6:	3218      	adds	r2, #24
 81020b8:	4293      	cmp	r3, r2
 81020ba:	d03c      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020bc:	3218      	adds	r2, #24
 81020be:	4293      	cmp	r3, r2
 81020c0:	d039      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020c2:	3218      	adds	r2, #24
 81020c4:	4293      	cmp	r3, r2
 81020c6:	d036      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020c8:	3218      	adds	r2, #24
 81020ca:	4293      	cmp	r3, r2
 81020cc:	d033      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020ce:	3218      	adds	r2, #24
 81020d0:	4293      	cmp	r3, r2
 81020d2:	d030      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020d4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81020d8:	4293      	cmp	r3, r2
 81020da:	d02c      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020dc:	3218      	adds	r2, #24
 81020de:	4293      	cmp	r3, r2
 81020e0:	d029      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020e2:	3218      	adds	r2, #24
 81020e4:	4293      	cmp	r3, r2
 81020e6:	d026      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020e8:	3218      	adds	r2, #24
 81020ea:	4293      	cmp	r3, r2
 81020ec:	d023      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020ee:	3218      	adds	r2, #24
 81020f0:	4293      	cmp	r3, r2
 81020f2:	d020      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020f4:	3218      	adds	r2, #24
 81020f6:	4293      	cmp	r3, r2
 81020f8:	d01d      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 81020fa:	3218      	adds	r2, #24
 81020fc:	4293      	cmp	r3, r2
 81020fe:	d01a      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 8102100:	3218      	adds	r2, #24
 8102102:	4293      	cmp	r3, r2
 8102104:	d017      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 8102106:	4a3b      	ldr	r2, [pc, #236]	; (81021f4 <HAL_DMA_Init+0x298>)
 8102108:	4293      	cmp	r3, r2
 810210a:	d014      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 810210c:	3214      	adds	r2, #20
 810210e:	4293      	cmp	r3, r2
 8102110:	d011      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 8102112:	3214      	adds	r2, #20
 8102114:	4293      	cmp	r3, r2
 8102116:	d00e      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 8102118:	3214      	adds	r2, #20
 810211a:	4293      	cmp	r3, r2
 810211c:	d00b      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 810211e:	3214      	adds	r2, #20
 8102120:	4293      	cmp	r3, r2
 8102122:	d008      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 8102124:	3214      	adds	r2, #20
 8102126:	4293      	cmp	r3, r2
 8102128:	d005      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 810212a:	3214      	adds	r2, #20
 810212c:	4293      	cmp	r3, r2
 810212e:	d002      	beq.n	8102136 <HAL_DMA_Init+0x1da>
 8102130:	3214      	adds	r2, #20
 8102132:	4293      	cmp	r3, r2
 8102134:	d118      	bne.n	8102168 <HAL_DMA_Init+0x20c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102136:	4620      	mov	r0, r4
 8102138:	f7ff febe 	bl	8101eb8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810213c:	68a3      	ldr	r3, [r4, #8]
 810213e:	2b80      	cmp	r3, #128	; 0x80
 8102140:	d048      	beq.n	81021d4 <HAL_DMA_Init+0x278>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102142:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102144:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8102146:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 810214a:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810214c:	3b01      	subs	r3, #1
 810214e:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102150:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102152:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102154:	d845      	bhi.n	81021e2 <HAL_DMA_Init+0x286>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8102156:	1e50      	subs	r0, r2, #1
 8102158:	2807      	cmp	r0, #7
 810215a:	d965      	bls.n	8102228 <HAL_DMA_Init+0x2cc>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810215c:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 8102160:	6f62      	ldr	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102162:	2000      	movs	r0, #0
 8102164:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102166:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102168:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 810216a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810216c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 810216e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8102172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102174:	6860      	ldr	r0, [r4, #4]
 8102176:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 810217a:	2e1f      	cmp	r6, #31
 810217c:	d924      	bls.n	81021c8 <HAL_DMA_Init+0x26c>
 810217e:	384f      	subs	r0, #79	; 0x4f
 8102180:	2803      	cmp	r0, #3
 8102182:	d801      	bhi.n	8102188 <HAL_DMA_Init+0x22c>
        registerValue |= DMA_SxCR_TRBUFF;
 8102184:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102188:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 810218a:	695a      	ldr	r2, [r3, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810218c:	2d04      	cmp	r5, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 810218e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8102192:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102196:	f47f af7a 	bne.w	810208e <HAL_DMA_Init+0x132>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 810219a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 810219c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 810219e:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81021a0:	2e00      	cmp	r6, #0
 81021a2:	f43f af74 	beq.w	810208e <HAL_DMA_Init+0x132>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81021a6:	2900      	cmp	r1, #0
 81021a8:	d166      	bne.n	8102278 <HAL_DMA_Init+0x31c>
    switch (hdma->Init.FIFOThreshold)
 81021aa:	2801      	cmp	r0, #1
 81021ac:	f000 8084 	beq.w	81022b8 <HAL_DMA_Init+0x35c>
 81021b0:	f030 0102 	bics.w	r1, r0, #2
 81021b4:	f47f af6b 	bne.w	810208e <HAL_DMA_Init+0x132>
 81021b8:	e066      	b.n	8102288 <HAL_DMA_Init+0x32c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81021ba:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 81021bc:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81021be:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 81021c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 81021c4:	2001      	movs	r0, #1
}
 81021c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81021c8:	480e      	ldr	r0, [pc, #56]	; (8102204 <HAL_DMA_Init+0x2a8>)
 81021ca:	fa20 f606 	lsr.w	r6, r0, r6
 81021ce:	07f0      	lsls	r0, r6, #31
 81021d0:	d5da      	bpl.n	8102188 <HAL_DMA_Init+0x22c>
 81021d2:	e7d7      	b.n	8102184 <HAL_DMA_Init+0x228>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81021d4:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
 81021d8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81021da:	2300      	movs	r3, #0
 81021dc:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81021de:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81021e0:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 81021e2:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 81021e4:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81021e8:	6763      	str	r3, [r4, #116]	; 0x74
 81021ea:	e7bd      	b.n	8102168 <HAL_DMA_Init+0x20c>
    return HAL_ERROR;
 81021ec:	2001      	movs	r0, #1
}
 81021ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81021f0:	40020010 	.word	0x40020010
 81021f4:	58025408 	.word	0x58025408
 81021f8:	5802541c 	.word	0x5802541c
 81021fc:	fe10803f 	.word	0xfe10803f
 8102200:	5c001000 	.word	0x5c001000
 8102204:	c3c0003f 	.word	0xc3c0003f
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102208:	e9d4 670b 	ldrd	r6, r7, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810220c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102210:	ea46 0c07 	orr.w	ip, r6, r7
 8102214:	ea42 020c 	orr.w	r2, r2, ip
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102218:	d2ac      	bcs.n	8102174 <HAL_DMA_Init+0x218>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 810221a:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 810221c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 810221e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8102222:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102226:	e7b9      	b.n	810219c <HAL_DMA_Init+0x240>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102228:	6823      	ldr	r3, [r4, #0]
 810222a:	4943      	ldr	r1, [pc, #268]	; (8102338 <HAL_DMA_Init+0x3dc>)
 810222c:	428b      	cmp	r3, r1
 810222e:	d019      	beq.n	8102264 <HAL_DMA_Init+0x308>
 8102230:	3114      	adds	r1, #20
 8102232:	428b      	cmp	r3, r1
 8102234:	d016      	beq.n	8102264 <HAL_DMA_Init+0x308>
 8102236:	3114      	adds	r1, #20
 8102238:	428b      	cmp	r3, r1
 810223a:	d013      	beq.n	8102264 <HAL_DMA_Init+0x308>
 810223c:	3114      	adds	r1, #20
 810223e:	428b      	cmp	r3, r1
 8102240:	d010      	beq.n	8102264 <HAL_DMA_Init+0x308>
 8102242:	3114      	adds	r1, #20
 8102244:	428b      	cmp	r3, r1
 8102246:	d00d      	beq.n	8102264 <HAL_DMA_Init+0x308>
 8102248:	3114      	adds	r1, #20
 810224a:	428b      	cmp	r3, r1
 810224c:	d00a      	beq.n	8102264 <HAL_DMA_Init+0x308>
 810224e:	3114      	adds	r1, #20
 8102250:	428b      	cmp	r3, r1
 8102252:	d007      	beq.n	8102264 <HAL_DMA_Init+0x308>
 8102254:	3114      	adds	r1, #20
 8102256:	428b      	cmp	r3, r1
 8102258:	d004      	beq.n	8102264 <HAL_DMA_Init+0x308>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 810225a:	4b38      	ldr	r3, [pc, #224]	; (810233c <HAL_DMA_Init+0x3e0>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 810225c:	4938      	ldr	r1, [pc, #224]	; (8102340 <HAL_DMA_Init+0x3e4>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 810225e:	4413      	add	r3, r2
 8102260:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8102262:	e003      	b.n	810226c <HAL_DMA_Init+0x310>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8102264:	4b37      	ldr	r3, [pc, #220]	; (8102344 <HAL_DMA_Init+0x3e8>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8102266:	4938      	ldr	r1, [pc, #224]	; (8102348 <HAL_DMA_Init+0x3ec>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8102268:	4413      	add	r3, r2
 810226a:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 810226c:	2201      	movs	r2, #1
 810226e:	4082      	lsls	r2, r0
 8102270:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8102274:	6762      	str	r2, [r4, #116]	; 0x74
 8102276:	e774      	b.n	8102162 <HAL_DMA_Init+0x206>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8102278:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 810227c:	d00e      	beq.n	810229c <HAL_DMA_Init+0x340>
    switch (hdma->Init.FIFOThreshold)
 810227e:	2802      	cmp	r0, #2
 8102280:	d905      	bls.n	810228e <HAL_DMA_Init+0x332>
 8102282:	2803      	cmp	r0, #3
 8102284:	f47f af03 	bne.w	810208e <HAL_DMA_Init+0x132>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8102288:	01f1      	lsls	r1, r6, #7
 810228a:	f57f af00 	bpl.w	810208e <HAL_DMA_Init+0x132>
          hdma->State = HAL_DMA_STATE_READY;
 810228e:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102290:	2240      	movs	r2, #64	; 0x40
 8102292:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8102294:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 8102298:	4618      	mov	r0, r3
}
 810229a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 810229c:	2803      	cmp	r0, #3
 810229e:	f63f aef6 	bhi.w	810208e <HAL_DMA_Init+0x132>
 81022a2:	a101      	add	r1, pc, #4	; (adr r1, 81022a8 <HAL_DMA_Init+0x34c>)
 81022a4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 81022a8:	0810228f 	.word	0x0810228f
 81022ac:	08102289 	.word	0x08102289
 81022b0:	0810228f 	.word	0x0810228f
 81022b4:	081022b9 	.word	0x081022b9
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81022b8:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 81022bc:	f47f aee7 	bne.w	810208e <HAL_DMA_Init+0x132>
 81022c0:	e7e5      	b.n	810228e <HAL_DMA_Init+0x332>
    __HAL_UNLOCK(hdma);
 81022c2:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 81022c4:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 81022c6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 81022ca:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81022ce:	6818      	ldr	r0, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81022d0:	68a1      	ldr	r1, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81022d2:	f420 30ff 	bic.w	r0, r0, #130560	; 0x1fe00
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81022d6:	2940      	cmp	r1, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81022d8:	f420 70f8 	bic.w	r0, r0, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81022dc:	d02a      	beq.n	8102334 <HAL_DMA_Init+0x3d8>
 81022de:	2980      	cmp	r1, #128	; 0x80
 81022e0:	bf0c      	ite	eq
 81022e2:	f44f 4580 	moveq.w	r5, #16384	; 0x4000
 81022e6:	2500      	movne	r5, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81022e8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 81022ec:	08d2      	lsrs	r2, r2, #3
 81022ee:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81022f2:	6961      	ldr	r1, [r4, #20]
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81022f4:	6a26      	ldr	r6, [r4, #32]
 81022f6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81022fa:	69a1      	ldr	r1, [r4, #24]
 81022fc:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102300:	69e1      	ldr	r1, [r4, #28]
 8102302:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 8102306:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 810230a:	4910      	ldr	r1, [pc, #64]	; (810234c <HAL_DMA_Init+0x3f0>)
 810230c:	4302      	orrs	r2, r0
 810230e:	4810      	ldr	r0, [pc, #64]	; (8102350 <HAL_DMA_Init+0x3f4>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102310:	432a      	orrs	r2, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102312:	4419      	add	r1, r3
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102314:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102316:	fba0 2301 	umull	r2, r3, r0, r1
 810231a:	091b      	lsrs	r3, r3, #4
 810231c:	009b      	lsls	r3, r3, #2
 810231e:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102320:	4620      	mov	r0, r4
 8102322:	f7ff fd6b 	bl	8101dfc <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102326:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8102328:	f003 021f 	and.w	r2, r3, #31
 810232c:	2301      	movs	r3, #1
 810232e:	4093      	lsls	r3, r2
 8102330:	6043      	str	r3, [r0, #4]
 8102332:	e6b6      	b.n	81020a2 <HAL_DMA_Init+0x146>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102334:	2510      	movs	r5, #16
 8102336:	e7d7      	b.n	81022e8 <HAL_DMA_Init+0x38c>
 8102338:	58025408 	.word	0x58025408
 810233c:	1000823f 	.word	0x1000823f
 8102340:	40020940 	.word	0x40020940
 8102344:	1600963f 	.word	0x1600963f
 8102348:	58025940 	.word	0x58025940
 810234c:	a7fdabf8 	.word	0xa7fdabf8
 8102350:	cccccccd 	.word	0xcccccccd

08102354 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8102354:	2800      	cmp	r0, #0
 8102356:	f000 811a 	beq.w	810258e <HAL_DMA_Start_IT+0x23a>
{
 810235a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 810235c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8102360:	2c01      	cmp	r4, #1
 8102362:	f000 8116 	beq.w	8102592 <HAL_DMA_Start_IT+0x23e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8102366:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 810236a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 810236c:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 810236e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8102372:	d007      	beq.n	8102384 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);
 8102374:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102376:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 810237a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 810237e:	6543      	str	r3, [r0, #84]	; 0x54
    status = HAL_ERROR;
 8102380:	4620      	mov	r0, r4
}
 8102382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8102384:	2402      	movs	r4, #2
 8102386:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810238a:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 810238c:	4da3      	ldr	r5, [pc, #652]	; (810261c <HAL_DMA_Start_IT+0x2c8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810238e:	6544      	str	r4, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8102390:	6804      	ldr	r4, [r0, #0]
 8102392:	42ac      	cmp	r4, r5
 8102394:	f000 808a 	beq.w	81024ac <HAL_DMA_Start_IT+0x158>
 8102398:	3518      	adds	r5, #24
 810239a:	42ac      	cmp	r4, r5
 810239c:	f000 8154 	beq.w	8102648 <HAL_DMA_Start_IT+0x2f4>
 81023a0:	3518      	adds	r5, #24
 81023a2:	42ac      	cmp	r4, r5
 81023a4:	f000 81fc 	beq.w	81027a0 <HAL_DMA_Start_IT+0x44c>
 81023a8:	3518      	adds	r5, #24
 81023aa:	42ac      	cmp	r4, r5
 81023ac:	f000 81ff 	beq.w	81027ae <HAL_DMA_Start_IT+0x45a>
 81023b0:	3518      	adds	r5, #24
 81023b2:	42ac      	cmp	r4, r5
 81023b4:	f000 81cd 	beq.w	8102752 <HAL_DMA_Start_IT+0x3fe>
 81023b8:	3518      	adds	r5, #24
 81023ba:	42ac      	cmp	r4, r5
 81023bc:	f000 820e 	beq.w	81027dc <HAL_DMA_Start_IT+0x488>
 81023c0:	3518      	adds	r5, #24
 81023c2:	42ac      	cmp	r4, r5
 81023c4:	f000 8229 	beq.w	810281a <HAL_DMA_Start_IT+0x4c6>
 81023c8:	3518      	adds	r5, #24
 81023ca:	42ac      	cmp	r4, r5
 81023cc:	f000 8242 	beq.w	8102854 <HAL_DMA_Start_IT+0x500>
 81023d0:	f505 7556 	add.w	r5, r5, #856	; 0x358
 81023d4:	42ac      	cmp	r4, r5
 81023d6:	f000 8246 	beq.w	8102866 <HAL_DMA_Start_IT+0x512>
 81023da:	3518      	adds	r5, #24
 81023dc:	42ac      	cmp	r4, r5
 81023de:	f000 8256 	beq.w	810288e <HAL_DMA_Start_IT+0x53a>
 81023e2:	3518      	adds	r5, #24
 81023e4:	42ac      	cmp	r4, r5
 81023e6:	f000 825d 	beq.w	81028a4 <HAL_DMA_Start_IT+0x550>
 81023ea:	3518      	adds	r5, #24
 81023ec:	42ac      	cmp	r4, r5
 81023ee:	f000 8262 	beq.w	81028b6 <HAL_DMA_Start_IT+0x562>
 81023f2:	3518      	adds	r5, #24
 81023f4:	42ac      	cmp	r4, r5
 81023f6:	f000 8265 	beq.w	81028c4 <HAL_DMA_Start_IT+0x570>
 81023fa:	3518      	adds	r5, #24
 81023fc:	42ac      	cmp	r4, r5
 81023fe:	f000 8272 	beq.w	81028e6 <HAL_DMA_Start_IT+0x592>
 8102402:	3518      	adds	r5, #24
 8102404:	42ac      	cmp	r4, r5
 8102406:	f000 827f 	beq.w	8102908 <HAL_DMA_Start_IT+0x5b4>
 810240a:	3518      	adds	r5, #24
 810240c:	42ac      	cmp	r4, r5
 810240e:	f000 828a 	beq.w	8102926 <HAL_DMA_Start_IT+0x5d2>
 8102412:	6825      	ldr	r5, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102414:	f8d0 e058 	ldr.w	lr, [r0, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8102418:	f025 0501 	bic.w	r5, r5, #1
 810241c:	6025      	str	r5, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810241e:	4d80      	ldr	r5, [pc, #512]	; (8102620 <HAL_DMA_Start_IT+0x2cc>)
 8102420:	42ac      	cmp	r4, r5
 8102422:	f000 8258 	beq.w	81028d6 <HAL_DMA_Start_IT+0x582>
 8102426:	3514      	adds	r5, #20
 8102428:	42ac      	cmp	r4, r5
 810242a:	f000 8254 	beq.w	81028d6 <HAL_DMA_Start_IT+0x582>
 810242e:	3514      	adds	r5, #20
 8102430:	42ac      	cmp	r4, r5
 8102432:	f000 8250 	beq.w	81028d6 <HAL_DMA_Start_IT+0x582>
 8102436:	3514      	adds	r5, #20
 8102438:	42ac      	cmp	r4, r5
 810243a:	f000 824c 	beq.w	81028d6 <HAL_DMA_Start_IT+0x582>
 810243e:	3514      	adds	r5, #20
 8102440:	42ac      	cmp	r4, r5
 8102442:	f000 8248 	beq.w	81028d6 <HAL_DMA_Start_IT+0x582>
 8102446:	3514      	adds	r5, #20
 8102448:	42ac      	cmp	r4, r5
 810244a:	f000 8244 	beq.w	81028d6 <HAL_DMA_Start_IT+0x582>
 810244e:	3514      	adds	r5, #20
 8102450:	42ac      	cmp	r4, r5
 8102452:	f000 8240 	beq.w	81028d6 <HAL_DMA_Start_IT+0x582>
 8102456:	3514      	adds	r5, #20
 8102458:	42ac      	cmp	r4, r5
 810245a:	f000 823c 	beq.w	81028d6 <HAL_DMA_Start_IT+0x582>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 810245e:	6823      	ldr	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8102460:	6c02      	ldr	r2, [r0, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102462:	f023 030e 	bic.w	r3, r3, #14
 8102466:	f043 030a 	orr.w	r3, r3, #10
 810246a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 810246c:	b11a      	cbz	r2, 8102476 <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 810246e:	6823      	ldr	r3, [r4, #0]
 8102470:	f043 0304 	orr.w	r3, r3, #4
 8102474:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102476:	4b6a      	ldr	r3, [pc, #424]	; (8102620 <HAL_DMA_Start_IT+0x2cc>)
 8102478:	429c      	cmp	r4, r3
 810247a:	d015      	beq.n	81024a8 <HAL_DMA_Start_IT+0x154>
 810247c:	4b69      	ldr	r3, [pc, #420]	; (8102624 <HAL_DMA_Start_IT+0x2d0>)
 810247e:	429c      	cmp	r4, r3
 8102480:	d012      	beq.n	81024a8 <HAL_DMA_Start_IT+0x154>
 8102482:	4b69      	ldr	r3, [pc, #420]	; (8102628 <HAL_DMA_Start_IT+0x2d4>)
 8102484:	429c      	cmp	r4, r3
 8102486:	d00f      	beq.n	81024a8 <HAL_DMA_Start_IT+0x154>
 8102488:	4b68      	ldr	r3, [pc, #416]	; (810262c <HAL_DMA_Start_IT+0x2d8>)
 810248a:	429c      	cmp	r4, r3
 810248c:	d00c      	beq.n	81024a8 <HAL_DMA_Start_IT+0x154>
 810248e:	4b68      	ldr	r3, [pc, #416]	; (8102630 <HAL_DMA_Start_IT+0x2dc>)
 8102490:	429c      	cmp	r4, r3
 8102492:	d009      	beq.n	81024a8 <HAL_DMA_Start_IT+0x154>
 8102494:	4b67      	ldr	r3, [pc, #412]	; (8102634 <HAL_DMA_Start_IT+0x2e0>)
 8102496:	429c      	cmp	r4, r3
 8102498:	d006      	beq.n	81024a8 <HAL_DMA_Start_IT+0x154>
 810249a:	4b67      	ldr	r3, [pc, #412]	; (8102638 <HAL_DMA_Start_IT+0x2e4>)
 810249c:	429c      	cmp	r4, r3
 810249e:	d003      	beq.n	81024a8 <HAL_DMA_Start_IT+0x154>
 81024a0:	4b66      	ldr	r3, [pc, #408]	; (810263c <HAL_DMA_Start_IT+0x2e8>)
 81024a2:	429c      	cmp	r4, r3
 81024a4:	f040 80b3 	bne.w	810260e <HAL_DMA_Start_IT+0x2ba>
 81024a8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 81024aa:	e081      	b.n	81025b0 <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 81024ac:	4e64      	ldr	r6, [pc, #400]	; (8102640 <HAL_DMA_Start_IT+0x2ec>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81024ae:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81024b0:	6935      	ldr	r5, [r6, #16]
 81024b2:	f025 0501 	bic.w	r5, r5, #1
 81024b6:	6135      	str	r5, [r6, #16]
    if(hdma->DMAmuxRequestGen != 0U)
 81024b8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81024ba:	6e86      	ldr	r6, [r0, #104]	; 0x68
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81024bc:	f8d0 e058 	ldr.w	lr, [r0, #88]	; 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81024c0:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 81024c2:	b115      	cbz	r5, 81024ca <HAL_DMA_Start_IT+0x176>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81024c4:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	; 0x70
 81024c8:	6077      	str	r7, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81024ca:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 81024cc:	f007 0c1f 	and.w	ip, r7, #31
 81024d0:	273f      	movs	r7, #63	; 0x3f
 81024d2:	fa07 f70c 	lsl.w	r7, r7, ip
 81024d6:	f8ce 7008 	str.w	r7, [lr, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 81024da:	6826      	ldr	r6, [r4, #0]
 81024dc:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 81024e0:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 81024e2:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81024e4:	6883      	ldr	r3, [r0, #8]
 81024e6:	2b40      	cmp	r3, #64	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81024e8:	4b4c      	ldr	r3, [pc, #304]	; (810261c <HAL_DMA_Start_IT+0x2c8>)
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 81024ea:	bf0b      	itete	eq
 81024ec:	60a2      	streq	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 81024ee:	60a1      	strne	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 81024f0:	60e1      	streq	r1, [r4, #12]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81024f2:	60e2      	strne	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81024f4:	429c      	cmp	r4, r3
 81024f6:	d04e      	beq.n	8102596 <HAL_DMA_Start_IT+0x242>
 81024f8:	3318      	adds	r3, #24
 81024fa:	429c      	cmp	r4, r3
 81024fc:	f000 8119 	beq.w	8102732 <HAL_DMA_Start_IT+0x3de>
 8102500:	3318      	adds	r3, #24
 8102502:	429c      	cmp	r4, r3
 8102504:	f000 813c 	beq.w	8102780 <HAL_DMA_Start_IT+0x42c>
 8102508:	3318      	adds	r3, #24
 810250a:	429c      	cmp	r4, r3
 810250c:	f000 8156 	beq.w	81027bc <HAL_DMA_Start_IT+0x468>
 8102510:	3318      	adds	r3, #24
 8102512:	429c      	cmp	r4, r3
 8102514:	f000 8124 	beq.w	8102760 <HAL_DMA_Start_IT+0x40c>
 8102518:	3318      	adds	r3, #24
 810251a:	429c      	cmp	r4, r3
 810251c:	f000 8167 	beq.w	81027ee <HAL_DMA_Start_IT+0x49a>
 8102520:	3318      	adds	r3, #24
 8102522:	429c      	cmp	r4, r3
 8102524:	f000 8177 	beq.w	8102816 <HAL_DMA_Start_IT+0x4c2>
 8102528:	3318      	adds	r3, #24
 810252a:	429c      	cmp	r4, r3
 810252c:	f000 817e 	beq.w	810282c <HAL_DMA_Start_IT+0x4d8>
 8102530:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8102534:	429c      	cmp	r4, r3
 8102536:	f000 819d 	beq.w	8102874 <HAL_DMA_Start_IT+0x520>
 810253a:	3318      	adds	r3, #24
 810253c:	429c      	cmp	r4, r3
 810253e:	f000 81ad 	beq.w	810289c <HAL_DMA_Start_IT+0x548>
 8102542:	3318      	adds	r3, #24
 8102544:	429c      	cmp	r4, r3
 8102546:	f000 81ab 	beq.w	81028a0 <HAL_DMA_Start_IT+0x54c>
 810254a:	3318      	adds	r3, #24
 810254c:	429c      	cmp	r4, r3
 810254e:	f000 81b0 	beq.w	81028b2 <HAL_DMA_Start_IT+0x55e>
 8102552:	3318      	adds	r3, #24
 8102554:	429c      	cmp	r4, r3
 8102556:	f000 81bc 	beq.w	81028d2 <HAL_DMA_Start_IT+0x57e>
 810255a:	3318      	adds	r3, #24
 810255c:	429c      	cmp	r4, r3
 810255e:	f000 81c4 	beq.w	81028ea <HAL_DMA_Start_IT+0x596>
 8102562:	3318      	adds	r3, #24
 8102564:	429c      	cmp	r4, r3
 8102566:	f040 81d8 	bne.w	810291a <HAL_DMA_Start_IT+0x5c6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810256a:	4a36      	ldr	r2, [pc, #216]	; (8102644 <HAL_DMA_Start_IT+0x2f0>)
 810256c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8102570:	f023 031e 	bic.w	r3, r3, #30
 8102574:	f043 0316 	orr.w	r3, r3, #22
 8102578:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 810257c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 810257e:	b1bb      	cbz	r3, 81025b0 <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102580:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8102584:	f043 0308 	orr.w	r3, r3, #8
 8102588:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810258c:	e010      	b.n	81025b0 <HAL_DMA_Start_IT+0x25c>
    return HAL_ERROR;
 810258e:	2001      	movs	r0, #1
}
 8102590:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8102592:	2002      	movs	r0, #2
}
 8102594:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102596:	4a2a      	ldr	r2, [pc, #168]	; (8102640 <HAL_DMA_Start_IT+0x2ec>)
 8102598:	6913      	ldr	r3, [r2, #16]
 810259a:	f023 031e 	bic.w	r3, r3, #30
 810259e:	f043 0316 	orr.w	r3, r3, #22
 81025a2:	6113      	str	r3, [r2, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 81025a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 81025a6:	b11b      	cbz	r3, 81025b0 <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81025a8:	6913      	ldr	r3, [r2, #16]
 81025aa:	f043 0308 	orr.w	r3, r3, #8
 81025ae:	6113      	str	r3, [r2, #16]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 81025b0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 81025b2:	681a      	ldr	r2, [r3, #0]
 81025b4:	03d2      	lsls	r2, r2, #15
 81025b6:	d503      	bpl.n	81025c0 <HAL_DMA_Start_IT+0x26c>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 81025b8:	681a      	ldr	r2, [r3, #0]
 81025ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81025be:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 81025c0:	b11d      	cbz	r5, 81025ca <HAL_DMA_Start_IT+0x276>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 81025c2:	682b      	ldr	r3, [r5, #0]
 81025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81025c8:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 81025ca:	4b14      	ldr	r3, [pc, #80]	; (810261c <HAL_DMA_Start_IT+0x2c8>)
 81025cc:	429c      	cmp	r4, r3
 81025ce:	d01e      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 81025d0:	3318      	adds	r3, #24
 81025d2:	429c      	cmp	r4, r3
 81025d4:	d01b      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 81025d6:	3318      	adds	r3, #24
 81025d8:	429c      	cmp	r4, r3
 81025da:	d018      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 81025dc:	3318      	adds	r3, #24
 81025de:	429c      	cmp	r4, r3
 81025e0:	d015      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 81025e2:	3318      	adds	r3, #24
 81025e4:	429c      	cmp	r4, r3
 81025e6:	d012      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 81025e8:	3318      	adds	r3, #24
 81025ea:	429c      	cmp	r4, r3
 81025ec:	d00f      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 81025ee:	3318      	adds	r3, #24
 81025f0:	429c      	cmp	r4, r3
 81025f2:	d00c      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 81025f4:	3318      	adds	r3, #24
 81025f6:	429c      	cmp	r4, r3
 81025f8:	d009      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 81025fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81025fe:	429c      	cmp	r4, r3
 8102600:	d005      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 8102602:	3318      	adds	r3, #24
 8102604:	429c      	cmp	r4, r3
 8102606:	d002      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 8102608:	3318      	adds	r3, #24
 810260a:	429c      	cmp	r4, r3
 810260c:	d0ff      	beq.n	810260e <HAL_DMA_Start_IT+0x2ba>
 810260e:	6823      	ldr	r3, [r4, #0]
 8102610:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8102614:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8102616:	6023      	str	r3, [r4, #0]
}
 8102618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810261a:	bf00      	nop
 810261c:	40020010 	.word	0x40020010
 8102620:	58025408 	.word	0x58025408
 8102624:	5802541c 	.word	0x5802541c
 8102628:	58025430 	.word	0x58025430
 810262c:	58025444 	.word	0x58025444
 8102630:	58025458 	.word	0x58025458
 8102634:	5802546c 	.word	0x5802546c
 8102638:	58025480 	.word	0x58025480
 810263c:	58025494 	.word	0x58025494
 8102640:	40020000 	.word	0x40020000
 8102644:	40020400 	.word	0x40020400
    __HAL_DMA_DISABLE(hdma);
 8102648:	4ea9      	ldr	r6, [pc, #676]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810264a:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 810264c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 810264e:	f025 0501 	bic.w	r5, r5, #1
 8102652:	62b5      	str	r5, [r6, #40]	; 0x28
    if(hdma->DMAmuxRequestGen != 0U)
 8102654:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102656:	6e86      	ldr	r6, [r0, #104]	; 0x68
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102658:	f8d0 e058 	ldr.w	lr, [r0, #88]	; 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810265c:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 810265e:	2d00      	cmp	r5, #0
 8102660:	f43f af33 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102664:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	; 0x70
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102668:	f8df c298 	ldr.w	ip, [pc, #664]	; 8102904 <HAL_DMA_Start_IT+0x5b0>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810266c:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810266e:	4564      	cmp	r4, ip
 8102670:	f43f af2b 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 8102674:	4f9f      	ldr	r7, [pc, #636]	; (81028f4 <HAL_DMA_Start_IT+0x5a0>)
 8102676:	42bc      	cmp	r4, r7
 8102678:	f43f af27 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 810267c:	3718      	adds	r7, #24
 810267e:	42bc      	cmp	r4, r7
 8102680:	f43f af23 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 8102684:	3718      	adds	r7, #24
 8102686:	42bc      	cmp	r4, r7
 8102688:	f43f af1f 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 810268c:	3718      	adds	r7, #24
 810268e:	42bc      	cmp	r4, r7
 8102690:	f43f af1b 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 8102694:	3718      	adds	r7, #24
 8102696:	42bc      	cmp	r4, r7
 8102698:	f43f af17 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 810269c:	3718      	adds	r7, #24
 810269e:	42bc      	cmp	r4, r7
 81026a0:	f43f af13 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 81026a4:	f507 7756 	add.w	r7, r7, #856	; 0x358
 81026a8:	42bc      	cmp	r4, r7
 81026aa:	f43f af0e 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 81026ae:	3718      	adds	r7, #24
 81026b0:	42bc      	cmp	r4, r7
 81026b2:	f43f af0a 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 81026b6:	3718      	adds	r7, #24
 81026b8:	42bc      	cmp	r4, r7
 81026ba:	f43f af06 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 81026be:	3718      	adds	r7, #24
 81026c0:	42bc      	cmp	r4, r7
 81026c2:	f43f af02 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 81026c6:	3718      	adds	r7, #24
 81026c8:	42bc      	cmp	r4, r7
 81026ca:	f43f aefe 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 81026ce:	3718      	adds	r7, #24
 81026d0:	42bc      	cmp	r4, r7
 81026d2:	f43f aefa 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 81026d6:	3718      	adds	r7, #24
 81026d8:	42bc      	cmp	r4, r7
 81026da:	f43f aef6 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
 81026de:	3718      	adds	r7, #24
 81026e0:	42bc      	cmp	r4, r7
 81026e2:	f43f aef2 	beq.w	81024ca <HAL_DMA_Start_IT+0x176>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81026e6:	4d84      	ldr	r5, [pc, #528]	; (81028f8 <HAL_DMA_Start_IT+0x5a4>)
 81026e8:	42ac      	cmp	r4, r5
 81026ea:	d012      	beq.n	8102712 <HAL_DMA_Start_IT+0x3be>
 81026ec:	4d83      	ldr	r5, [pc, #524]	; (81028fc <HAL_DMA_Start_IT+0x5a8>)
 81026ee:	42ac      	cmp	r4, r5
 81026f0:	d00f      	beq.n	8102712 <HAL_DMA_Start_IT+0x3be>
 81026f2:	3514      	adds	r5, #20
 81026f4:	42ac      	cmp	r4, r5
 81026f6:	d00c      	beq.n	8102712 <HAL_DMA_Start_IT+0x3be>
 81026f8:	3514      	adds	r5, #20
 81026fa:	42ac      	cmp	r4, r5
 81026fc:	d009      	beq.n	8102712 <HAL_DMA_Start_IT+0x3be>
 81026fe:	3514      	adds	r5, #20
 8102700:	42ac      	cmp	r4, r5
 8102702:	d006      	beq.n	8102712 <HAL_DMA_Start_IT+0x3be>
 8102704:	3514      	adds	r5, #20
 8102706:	42ac      	cmp	r4, r5
 8102708:	d003      	beq.n	8102712 <HAL_DMA_Start_IT+0x3be>
 810270a:	3514      	adds	r5, #20
 810270c:	42ac      	cmp	r4, r5
 810270e:	f040 8113 	bne.w	8102938 <HAL_DMA_Start_IT+0x5e4>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8102712:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8102714:	f005 071f 	and.w	r7, r5, #31
 8102718:	2501      	movs	r5, #1
 810271a:	40bd      	lsls	r5, r7
 810271c:	f8ce 5004 	str.w	r5, [lr, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8102720:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8102722:	6883      	ldr	r3, [r0, #8]
 8102724:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8102726:	bf0b      	itete	eq
 8102728:	60a2      	streq	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 810272a:	60a1      	strne	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810272c:	60e1      	streq	r1, [r4, #12]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810272e:	60e2      	strne	r2, [r4, #12]
 8102730:	e695      	b.n	810245e <HAL_DMA_Start_IT+0x10a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102732:	4a6f      	ldr	r2, [pc, #444]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
 8102734:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8102736:	f023 031e 	bic.w	r3, r3, #30
 810273a:	f043 0316 	orr.w	r3, r3, #22
 810273e:	6293      	str	r3, [r2, #40]	; 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8102740:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8102742:	2b00      	cmp	r3, #0
 8102744:	f43f af34 	beq.w	81025b0 <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102748:	6a93      	ldr	r3, [r2, #40]	; 0x28
 810274a:	f043 0308 	orr.w	r3, r3, #8
 810274e:	6293      	str	r3, [r2, #40]	; 0x28
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102750:	e72e      	b.n	81025b0 <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 8102752:	4e67      	ldr	r6, [pc, #412]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102754:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8102756:	6f35      	ldr	r5, [r6, #112]	; 0x70
 8102758:	f025 0501 	bic.w	r5, r5, #1
 810275c:	6735      	str	r5, [r6, #112]	; 0x70
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810275e:	e779      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102760:	4a63      	ldr	r2, [pc, #396]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
 8102762:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8102764:	f023 031e 	bic.w	r3, r3, #30
 8102768:	f043 0316 	orr.w	r3, r3, #22
 810276c:	6713      	str	r3, [r2, #112]	; 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 810276e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8102770:	2b00      	cmp	r3, #0
 8102772:	f43f af1d 	beq.w	81025b0 <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102776:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8102778:	f043 0308 	orr.w	r3, r3, #8
 810277c:	6713      	str	r3, [r2, #112]	; 0x70
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810277e:	e717      	b.n	81025b0 <HAL_DMA_Start_IT+0x25c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102780:	4a5b      	ldr	r2, [pc, #364]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
 8102782:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8102784:	f023 031e 	bic.w	r3, r3, #30
 8102788:	f043 0316 	orr.w	r3, r3, #22
 810278c:	6413      	str	r3, [r2, #64]	; 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 810278e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8102790:	2b00      	cmp	r3, #0
 8102792:	f43f af0d 	beq.w	81025b0 <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102796:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8102798:	f043 0308 	orr.w	r3, r3, #8
 810279c:	6413      	str	r3, [r2, #64]	; 0x40
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810279e:	e707      	b.n	81025b0 <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 81027a0:	4e53      	ldr	r6, [pc, #332]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81027a2:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81027a4:	6c35      	ldr	r5, [r6, #64]	; 0x40
 81027a6:	f025 0501 	bic.w	r5, r5, #1
 81027aa:	6435      	str	r5, [r6, #64]	; 0x40
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81027ac:	e752      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
    __HAL_DMA_DISABLE(hdma);
 81027ae:	4e50      	ldr	r6, [pc, #320]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81027b0:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81027b2:	6db5      	ldr	r5, [r6, #88]	; 0x58
 81027b4:	f025 0501 	bic.w	r5, r5, #1
 81027b8:	65b5      	str	r5, [r6, #88]	; 0x58
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81027ba:	e74b      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81027bc:	4a4c      	ldr	r2, [pc, #304]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
 81027be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 81027c0:	f023 031e 	bic.w	r3, r3, #30
 81027c4:	f043 0316 	orr.w	r3, r3, #22
 81027c8:	6593      	str	r3, [r2, #88]	; 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 81027ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 81027cc:	2b00      	cmp	r3, #0
 81027ce:	f43f aeef 	beq.w	81025b0 <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81027d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 81027d4:	f043 0308 	orr.w	r3, r3, #8
 81027d8:	6593      	str	r3, [r2, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81027da:	e6e9      	b.n	81025b0 <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 81027dc:	4e44      	ldr	r6, [pc, #272]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
 81027de:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81027e2:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81027e4:	f025 0501 	bic.w	r5, r5, #1
 81027e8:	f8c6 5088 	str.w	r5, [r6, #136]	; 0x88
 81027ec:	e732      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81027ee:	4a40      	ldr	r2, [pc, #256]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
 81027f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 81027f4:	f023 031e 	bic.w	r3, r3, #30
 81027f8:	f043 0316 	orr.w	r3, r3, #22
 81027fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8102800:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8102802:	2b00      	cmp	r3, #0
 8102804:	f43f aed4 	beq.w	81025b0 <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102808:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 810280c:	f043 0308 	orr.w	r3, r3, #8
 8102810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102814:	e6cc      	b.n	81025b0 <HAL_DMA_Start_IT+0x25c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102816:	4a36      	ldr	r2, [pc, #216]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
 8102818:	e6a8      	b.n	810256c <HAL_DMA_Start_IT+0x218>
    __HAL_DMA_DISABLE(hdma);
 810281a:	4e35      	ldr	r6, [pc, #212]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810281c:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 810281e:	f8d6 50a0 	ldr.w	r5, [r6, #160]	; 0xa0
 8102822:	f025 0501 	bic.w	r5, r5, #1
 8102826:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810282a:	e713      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810282c:	4a30      	ldr	r2, [pc, #192]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
 810282e:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 8102832:	f023 031e 	bic.w	r3, r3, #30
 8102836:	f043 0316 	orr.w	r3, r3, #22
 810283a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 810283e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8102840:	2b00      	cmp	r3, #0
 8102842:	f43f aeb5 	beq.w	81025b0 <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102846:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 810284a:	f043 0308 	orr.w	r3, r3, #8
 810284e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102852:	e6ad      	b.n	81025b0 <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 8102854:	4e26      	ldr	r6, [pc, #152]	; (81028f0 <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102856:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8102858:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
 810285c:	f025 0501 	bic.w	r5, r5, #1
 8102860:	f8c6 50b8 	str.w	r5, [r6, #184]	; 0xb8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102864:	e6f6      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
    __HAL_DMA_DISABLE(hdma);
 8102866:	4e26      	ldr	r6, [pc, #152]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102868:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 810286a:	6935      	ldr	r5, [r6, #16]
 810286c:	f025 0501 	bic.w	r5, r5, #1
 8102870:	6135      	str	r5, [r6, #16]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102872:	e6ef      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102874:	4a22      	ldr	r2, [pc, #136]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
 8102876:	6913      	ldr	r3, [r2, #16]
 8102878:	f023 031e 	bic.w	r3, r3, #30
 810287c:	f043 0316 	orr.w	r3, r3, #22
 8102880:	6113      	str	r3, [r2, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8102882:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8102884:	2b00      	cmp	r3, #0
 8102886:	f43f ae93 	beq.w	81025b0 <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 810288a:	4a1d      	ldr	r2, [pc, #116]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
 810288c:	e68c      	b.n	81025a8 <HAL_DMA_Start_IT+0x254>
    __HAL_DMA_DISABLE(hdma);
 810288e:	4e1c      	ldr	r6, [pc, #112]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102890:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8102892:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 8102894:	f025 0501 	bic.w	r5, r5, #1
 8102898:	62b5      	str	r5, [r6, #40]	; 0x28
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810289a:	e6db      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810289c:	4a18      	ldr	r2, [pc, #96]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
 810289e:	e749      	b.n	8102734 <HAL_DMA_Start_IT+0x3e0>
 81028a0:	4a17      	ldr	r2, [pc, #92]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
 81028a2:	e76e      	b.n	8102782 <HAL_DMA_Start_IT+0x42e>
    __HAL_DMA_DISABLE(hdma);
 81028a4:	4e16      	ldr	r6, [pc, #88]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81028a6:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81028a8:	6c35      	ldr	r5, [r6, #64]	; 0x40
 81028aa:	f025 0501 	bic.w	r5, r5, #1
 81028ae:	6435      	str	r5, [r6, #64]	; 0x40
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81028b0:	e6d0      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81028b2:	4a13      	ldr	r2, [pc, #76]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
 81028b4:	e783      	b.n	81027be <HAL_DMA_Start_IT+0x46a>
    __HAL_DMA_DISABLE(hdma);
 81028b6:	4e12      	ldr	r6, [pc, #72]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81028b8:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81028ba:	6db5      	ldr	r5, [r6, #88]	; 0x58
 81028bc:	f025 0501 	bic.w	r5, r5, #1
 81028c0:	65b5      	str	r5, [r6, #88]	; 0x58
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81028c2:	e6c7      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
    __HAL_DMA_DISABLE(hdma);
 81028c4:	4e0e      	ldr	r6, [pc, #56]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81028c6:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81028c8:	6f35      	ldr	r5, [r6, #112]	; 0x70
 81028ca:	f025 0501 	bic.w	r5, r5, #1
 81028ce:	6735      	str	r5, [r6, #112]	; 0x70
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81028d0:	e6c0      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81028d2:	4a0b      	ldr	r2, [pc, #44]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
 81028d4:	e745      	b.n	8102762 <HAL_DMA_Start_IT+0x40e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81028d6:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	; 0x64
    if(hdma->DMAmuxRequestGen != 0U)
 81028da:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81028dc:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 81028de:	2d00      	cmp	r5, #0
 81028e0:	f47f aec0 	bne.w	8102664 <HAL_DMA_Start_IT+0x310>
 81028e4:	e715      	b.n	8102712 <HAL_DMA_Start_IT+0x3be>
    __HAL_DMA_DISABLE(hdma);
 81028e6:	4e06      	ldr	r6, [pc, #24]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
 81028e8:	e779      	b.n	81027de <HAL_DMA_Start_IT+0x48a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81028ea:	4a05      	ldr	r2, [pc, #20]	; (8102900 <HAL_DMA_Start_IT+0x5ac>)
 81028ec:	e780      	b.n	81027f0 <HAL_DMA_Start_IT+0x49c>
 81028ee:	bf00      	nop
 81028f0:	40020000 	.word	0x40020000
 81028f4:	40020040 	.word	0x40020040
 81028f8:	58025408 	.word	0x58025408
 81028fc:	5802541c 	.word	0x5802541c
 8102900:	40020400 	.word	0x40020400
 8102904:	40020028 	.word	0x40020028
    __HAL_DMA_DISABLE(hdma);
 8102908:	4e0e      	ldr	r6, [pc, #56]	; (8102944 <HAL_DMA_Start_IT+0x5f0>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810290a:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 810290c:	f8d6 50a0 	ldr.w	r5, [r6, #160]	; 0xa0
 8102910:	f025 0501 	bic.w	r5, r5, #1
 8102914:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102918:	e69c      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810291a:	3318      	adds	r3, #24
 810291c:	429c      	cmp	r4, r3
 810291e:	f47f ad9e 	bne.w	810245e <HAL_DMA_Start_IT+0x10a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102922:	4a08      	ldr	r2, [pc, #32]	; (8102944 <HAL_DMA_Start_IT+0x5f0>)
 8102924:	e783      	b.n	810282e <HAL_DMA_Start_IT+0x4da>
    __HAL_DMA_DISABLE(hdma);
 8102926:	4e07      	ldr	r6, [pc, #28]	; (8102944 <HAL_DMA_Start_IT+0x5f0>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102928:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 810292a:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
 810292e:	f025 0501 	bic.w	r5, r5, #1
 8102932:	f8c6 50b8 	str.w	r5, [r6, #184]	; 0xb8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102936:	e68d      	b.n	8102654 <HAL_DMA_Start_IT+0x300>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102938:	3514      	adds	r5, #20
 810293a:	42ac      	cmp	r4, r5
 810293c:	f43f aee9 	beq.w	8102712 <HAL_DMA_Start_IT+0x3be>
 8102940:	e58d      	b.n	810245e <HAL_DMA_Start_IT+0x10a>
 8102942:	bf00      	nop
 8102944:	40020400 	.word	0x40020400

08102948 <HAL_DMA_Abort>:
{
 8102948:	b570      	push	{r4, r5, r6, lr}
 810294a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 810294c:	f7ff f868 	bl	8101a20 <HAL_GetTick>
  if(hdma == NULL)
 8102950:	2c00      	cmp	r4, #0
 8102952:	f000 8102 	beq.w	8102b5a <HAL_DMA_Abort+0x212>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102956:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 810295a:	2b02      	cmp	r3, #2
 810295c:	d164      	bne.n	8102a28 <HAL_DMA_Abort+0xe0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810295e:	6823      	ldr	r3, [r4, #0]
 8102960:	4aad      	ldr	r2, [pc, #692]	; (8102c18 <HAL_DMA_Abort+0x2d0>)
 8102962:	4293      	cmp	r3, r2
 8102964:	4605      	mov	r5, r0
 8102966:	f000 80fa 	beq.w	8102b5e <HAL_DMA_Abort+0x216>
 810296a:	3218      	adds	r2, #24
 810296c:	4293      	cmp	r3, r2
 810296e:	f000 8100 	beq.w	8102b72 <HAL_DMA_Abort+0x22a>
 8102972:	3218      	adds	r2, #24
 8102974:	4293      	cmp	r3, r2
 8102976:	d05e      	beq.n	8102a36 <HAL_DMA_Abort+0xee>
 8102978:	3218      	adds	r2, #24
 810297a:	4293      	cmp	r3, r2
 810297c:	f000 8111 	beq.w	8102ba2 <HAL_DMA_Abort+0x25a>
 8102980:	3218      	adds	r2, #24
 8102982:	4293      	cmp	r3, r2
 8102984:	f000 8117 	beq.w	8102bb6 <HAL_DMA_Abort+0x26e>
 8102988:	3218      	adds	r2, #24
 810298a:	4293      	cmp	r3, r2
 810298c:	f000 80fb 	beq.w	8102b86 <HAL_DMA_Abort+0x23e>
 8102990:	3218      	adds	r2, #24
 8102992:	4293      	cmp	r3, r2
 8102994:	f000 811b 	beq.w	8102bce <HAL_DMA_Abort+0x286>
 8102998:	3218      	adds	r2, #24
 810299a:	4293      	cmp	r3, r2
 810299c:	f000 8125 	beq.w	8102bea <HAL_DMA_Abort+0x2a2>
 81029a0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81029a4:	4293      	cmp	r3, r2
 81029a6:	f000 8134 	beq.w	8102c12 <HAL_DMA_Abort+0x2ca>
 81029aa:	3218      	adds	r2, #24
 81029ac:	4293      	cmp	r3, r2
 81029ae:	f000 813f 	beq.w	8102c30 <HAL_DMA_Abort+0x2e8>
 81029b2:	3218      	adds	r2, #24
 81029b4:	4293      	cmp	r3, r2
 81029b6:	f000 813d 	beq.w	8102c34 <HAL_DMA_Abort+0x2ec>
 81029ba:	3218      	adds	r2, #24
 81029bc:	4293      	cmp	r3, r2
 81029be:	f000 813b 	beq.w	8102c38 <HAL_DMA_Abort+0x2f0>
 81029c2:	3218      	adds	r2, #24
 81029c4:	4293      	cmp	r3, r2
 81029c6:	f000 8139 	beq.w	8102c3c <HAL_DMA_Abort+0x2f4>
 81029ca:	3218      	adds	r2, #24
 81029cc:	4293      	cmp	r3, r2
 81029ce:	f000 8137 	beq.w	8102c40 <HAL_DMA_Abort+0x2f8>
 81029d2:	3218      	adds	r2, #24
 81029d4:	4293      	cmp	r3, r2
 81029d6:	f000 8143 	beq.w	8102c60 <HAL_DMA_Abort+0x318>
 81029da:	3218      	adds	r2, #24
 81029dc:	4293      	cmp	r3, r2
 81029de:	f000 8131 	beq.w	8102c44 <HAL_DMA_Abort+0x2fc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81029e2:	681a      	ldr	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81029e4:	498d      	ldr	r1, [pc, #564]	; (8102c1c <HAL_DMA_Abort+0x2d4>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81029e6:	f022 020e 	bic.w	r2, r2, #14
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81029ea:	428b      	cmp	r3, r1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81029ec:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81029ee:	461e      	mov	r6, r3
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81029f0:	d014      	beq.n	8102a1c <HAL_DMA_Abort+0xd4>
 81029f2:	4a8b      	ldr	r2, [pc, #556]	; (8102c20 <HAL_DMA_Abort+0x2d8>)
 81029f4:	4293      	cmp	r3, r2
 81029f6:	d011      	beq.n	8102a1c <HAL_DMA_Abort+0xd4>
 81029f8:	3214      	adds	r2, #20
 81029fa:	4293      	cmp	r3, r2
 81029fc:	d00e      	beq.n	8102a1c <HAL_DMA_Abort+0xd4>
 81029fe:	3214      	adds	r2, #20
 8102a00:	4293      	cmp	r3, r2
 8102a02:	d00b      	beq.n	8102a1c <HAL_DMA_Abort+0xd4>
 8102a04:	3214      	adds	r2, #20
 8102a06:	4293      	cmp	r3, r2
 8102a08:	d008      	beq.n	8102a1c <HAL_DMA_Abort+0xd4>
 8102a0a:	3214      	adds	r2, #20
 8102a0c:	4293      	cmp	r3, r2
 8102a0e:	d005      	beq.n	8102a1c <HAL_DMA_Abort+0xd4>
 8102a10:	3214      	adds	r2, #20
 8102a12:	4293      	cmp	r3, r2
 8102a14:	d002      	beq.n	8102a1c <HAL_DMA_Abort+0xd4>
 8102a16:	3214      	adds	r2, #20
 8102a18:	4293      	cmp	r3, r2
 8102a1a:	d11b      	bne.n	8102a54 <HAL_DMA_Abort+0x10c>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102a1c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8102a1e:	680a      	ldr	r2, [r1, #0]
 8102a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102a24:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8102a26:	e015      	b.n	8102a54 <HAL_DMA_Abort+0x10c>
    __HAL_UNLOCK(hdma);
 8102a28:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102a2a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8102a2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102a30:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8102a32:	2001      	movs	r0, #1
}
 8102a34:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102a36:	4a7b      	ldr	r2, [pc, #492]	; (8102c24 <HAL_DMA_Abort+0x2dc>)
 8102a38:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8102a3a:	f021 011e 	bic.w	r1, r1, #30
 8102a3e:	6411      	str	r1, [r2, #64]	; 0x40
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102a40:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8102a42:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102a46:	6551      	str	r1, [r2, #84]	; 0x54
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102a48:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8102a4a:	680a      	ldr	r2, [r1, #0]
 8102a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102a50:	461e      	mov	r6, r3
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102a52:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8102a54:	681a      	ldr	r2, [r3, #0]
 8102a56:	f022 0201 	bic.w	r2, r2, #1
 8102a5a:	601a      	str	r2, [r3, #0]
 8102a5c:	e004      	b.n	8102a68 <HAL_DMA_Abort+0x120>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102a5e:	f7fe ffdf 	bl	8101a20 <HAL_GetTick>
 8102a62:	1b43      	subs	r3, r0, r5
 8102a64:	2b05      	cmp	r3, #5
 8102a66:	d86e      	bhi.n	8102b46 <HAL_DMA_Abort+0x1fe>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8102a68:	6833      	ldr	r3, [r6, #0]
 8102a6a:	07db      	lsls	r3, r3, #31
 8102a6c:	d4f7      	bmi.n	8102a5e <HAL_DMA_Abort+0x116>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102a6e:	6823      	ldr	r3, [r4, #0]
 8102a70:	4a69      	ldr	r2, [pc, #420]	; (8102c18 <HAL_DMA_Abort+0x2d0>)
 8102a72:	4293      	cmp	r3, r2
 8102a74:	d04d      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102a76:	3218      	adds	r2, #24
 8102a78:	4293      	cmp	r3, r2
 8102a7a:	d04a      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102a7c:	3218      	adds	r2, #24
 8102a7e:	4293      	cmp	r3, r2
 8102a80:	d047      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102a82:	3218      	adds	r2, #24
 8102a84:	4293      	cmp	r3, r2
 8102a86:	d044      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102a88:	3218      	adds	r2, #24
 8102a8a:	4293      	cmp	r3, r2
 8102a8c:	d041      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102a8e:	3218      	adds	r2, #24
 8102a90:	4293      	cmp	r3, r2
 8102a92:	d03e      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102a94:	3218      	adds	r2, #24
 8102a96:	4293      	cmp	r3, r2
 8102a98:	d03b      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102a9a:	3218      	adds	r2, #24
 8102a9c:	4293      	cmp	r3, r2
 8102a9e:	d038      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102aa0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8102aa4:	4293      	cmp	r3, r2
 8102aa6:	d034      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102aa8:	3218      	adds	r2, #24
 8102aaa:	4293      	cmp	r3, r2
 8102aac:	d031      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102aae:	3218      	adds	r2, #24
 8102ab0:	4293      	cmp	r3, r2
 8102ab2:	d02e      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102ab4:	3218      	adds	r2, #24
 8102ab6:	4293      	cmp	r3, r2
 8102ab8:	d02b      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102aba:	3218      	adds	r2, #24
 8102abc:	4293      	cmp	r3, r2
 8102abe:	d028      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102ac0:	3218      	adds	r2, #24
 8102ac2:	4293      	cmp	r3, r2
 8102ac4:	d025      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102ac6:	3218      	adds	r2, #24
 8102ac8:	4293      	cmp	r3, r2
 8102aca:	d022      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
 8102acc:	3218      	adds	r2, #24
 8102ace:	4293      	cmp	r3, r2
 8102ad0:	d01f      	beq.n	8102b12 <HAL_DMA_Abort+0x1ca>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102ad2:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102ad6:	f002 011f 	and.w	r1, r2, #31
 8102ada:	2201      	movs	r2, #1
 8102adc:	408a      	lsls	r2, r1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102ade:	494f      	ldr	r1, [pc, #316]	; (8102c1c <HAL_DMA_Abort+0x2d4>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102ae0:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102ae2:	428b      	cmp	r3, r1
 8102ae4:	d01c      	beq.n	8102b20 <HAL_DMA_Abort+0x1d8>
 8102ae6:	4a4e      	ldr	r2, [pc, #312]	; (8102c20 <HAL_DMA_Abort+0x2d8>)
 8102ae8:	4293      	cmp	r3, r2
 8102aea:	d019      	beq.n	8102b20 <HAL_DMA_Abort+0x1d8>
 8102aec:	3214      	adds	r2, #20
 8102aee:	4293      	cmp	r3, r2
 8102af0:	d016      	beq.n	8102b20 <HAL_DMA_Abort+0x1d8>
 8102af2:	3214      	adds	r2, #20
 8102af4:	4293      	cmp	r3, r2
 8102af6:	d013      	beq.n	8102b20 <HAL_DMA_Abort+0x1d8>
 8102af8:	3214      	adds	r2, #20
 8102afa:	4293      	cmp	r3, r2
 8102afc:	d010      	beq.n	8102b20 <HAL_DMA_Abort+0x1d8>
 8102afe:	3214      	adds	r2, #20
 8102b00:	4293      	cmp	r3, r2
 8102b02:	d00d      	beq.n	8102b20 <HAL_DMA_Abort+0x1d8>
 8102b04:	3214      	adds	r2, #20
 8102b06:	4293      	cmp	r3, r2
 8102b08:	d00a      	beq.n	8102b20 <HAL_DMA_Abort+0x1d8>
 8102b0a:	3214      	adds	r2, #20
 8102b0c:	4293      	cmp	r3, r2
 8102b0e:	d113      	bne.n	8102b38 <HAL_DMA_Abort+0x1f0>
 8102b10:	e006      	b.n	8102b20 <HAL_DMA_Abort+0x1d8>
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102b12:	e9d4 1316 	ldrd	r1, r3, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102b16:	f003 021f 	and.w	r2, r3, #31
 8102b1a:	233f      	movs	r3, #63	; 0x3f
 8102b1c:	4093      	lsls	r3, r2
 8102b1e:	608b      	str	r3, [r1, #8]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102b20:	e9d4 131a 	ldrd	r1, r3, [r4, #104]	; 0x68
 8102b24:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8102b26:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8102b28:	b133      	cbz	r3, 8102b38 <HAL_DMA_Abort+0x1f0>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102b2a:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102b2c:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102b34:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102b36:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8102b38:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8102b3a:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8102b3c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8102b40:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8102b44:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102b46:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8102b48:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 8102b4a:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102b4c:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8102b4e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8102b52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8102b56:	2001      	movs	r0, #1
}
 8102b58:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8102b5a:	2001      	movs	r0, #1
}
 8102b5c:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102b5e:	4a31      	ldr	r2, [pc, #196]	; (8102c24 <HAL_DMA_Abort+0x2dc>)
 8102b60:	6911      	ldr	r1, [r2, #16]
 8102b62:	f021 011e 	bic.w	r1, r1, #30
 8102b66:	6111      	str	r1, [r2, #16]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102b68:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8102b6a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102b6e:	6251      	str	r1, [r2, #36]	; 0x24
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102b70:	e76a      	b.n	8102a48 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102b72:	4a2c      	ldr	r2, [pc, #176]	; (8102c24 <HAL_DMA_Abort+0x2dc>)
 8102b74:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8102b76:	f021 011e 	bic.w	r1, r1, #30
 8102b7a:	6291      	str	r1, [r2, #40]	; 0x28
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102b7c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8102b7e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102b82:	63d1      	str	r1, [r2, #60]	; 0x3c
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102b84:	e760      	b.n	8102a48 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102b86:	4a27      	ldr	r2, [pc, #156]	; (8102c24 <HAL_DMA_Abort+0x2dc>)
 8102b88:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8102b8c:	f021 011e 	bic.w	r1, r1, #30
 8102b90:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102b94:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8102b98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102b9c:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102ba0:	e752      	b.n	8102a48 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102ba2:	4a20      	ldr	r2, [pc, #128]	; (8102c24 <HAL_DMA_Abort+0x2dc>)
 8102ba4:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8102ba6:	f021 011e 	bic.w	r1, r1, #30
 8102baa:	6591      	str	r1, [r2, #88]	; 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102bac:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 8102bae:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102bb2:	66d1      	str	r1, [r2, #108]	; 0x6c
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102bb4:	e748      	b.n	8102a48 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102bb6:	4a1b      	ldr	r2, [pc, #108]	; (8102c24 <HAL_DMA_Abort+0x2dc>)
 8102bb8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8102bba:	f021 011e 	bic.w	r1, r1, #30
 8102bbe:	6711      	str	r1, [r2, #112]	; 0x70
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102bc0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8102bc4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102bc8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102bcc:	e73c      	b.n	8102a48 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102bce:	4a15      	ldr	r2, [pc, #84]	; (8102c24 <HAL_DMA_Abort+0x2dc>)
 8102bd0:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8102bd4:	f021 011e 	bic.w	r1, r1, #30
 8102bd8:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102bdc:	f8d2 10b4 	ldr.w	r1, [r2, #180]	; 0xb4
 8102be0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102be4:	f8c2 10b4 	str.w	r1, [r2, #180]	; 0xb4
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102be8:	e72e      	b.n	8102a48 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102bea:	4a0e      	ldr	r2, [pc, #56]	; (8102c24 <HAL_DMA_Abort+0x2dc>)
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102bec:	4e0e      	ldr	r6, [pc, #56]	; (8102c28 <HAL_DMA_Abort+0x2e0>)
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102bee:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 8102bf2:	f021 011e 	bic.w	r1, r1, #30
 8102bf6:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102bfa:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
 8102bfe:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102c02:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102c06:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8102c08:	680a      	ldr	r2, [r1, #0]
 8102c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102c0e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8102c10:	e720      	b.n	8102a54 <HAL_DMA_Abort+0x10c>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102c12:	4a06      	ldr	r2, [pc, #24]	; (8102c2c <HAL_DMA_Abort+0x2e4>)
 8102c14:	e7a4      	b.n	8102b60 <HAL_DMA_Abort+0x218>
 8102c16:	bf00      	nop
 8102c18:	40020010 	.word	0x40020010
 8102c1c:	58025408 	.word	0x58025408
 8102c20:	5802541c 	.word	0x5802541c
 8102c24:	40020000 	.word	0x40020000
 8102c28:	400200b8 	.word	0x400200b8
 8102c2c:	40020400 	.word	0x40020400
 8102c30:	4a0c      	ldr	r2, [pc, #48]	; (8102c64 <HAL_DMA_Abort+0x31c>)
 8102c32:	e79f      	b.n	8102b74 <HAL_DMA_Abort+0x22c>
 8102c34:	4a0b      	ldr	r2, [pc, #44]	; (8102c64 <HAL_DMA_Abort+0x31c>)
 8102c36:	e6ff      	b.n	8102a38 <HAL_DMA_Abort+0xf0>
 8102c38:	4a0a      	ldr	r2, [pc, #40]	; (8102c64 <HAL_DMA_Abort+0x31c>)
 8102c3a:	e7b3      	b.n	8102ba4 <HAL_DMA_Abort+0x25c>
 8102c3c:	4a09      	ldr	r2, [pc, #36]	; (8102c64 <HAL_DMA_Abort+0x31c>)
 8102c3e:	e7bb      	b.n	8102bb8 <HAL_DMA_Abort+0x270>
 8102c40:	4a08      	ldr	r2, [pc, #32]	; (8102c64 <HAL_DMA_Abort+0x31c>)
 8102c42:	e7a1      	b.n	8102b88 <HAL_DMA_Abort+0x240>
 8102c44:	4a07      	ldr	r2, [pc, #28]	; (8102c64 <HAL_DMA_Abort+0x31c>)
 8102c46:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 8102c4a:	f021 011e 	bic.w	r1, r1, #30
 8102c4e:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102c52:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
 8102c56:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8102c5a:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
 8102c5e:	e6f3      	b.n	8102a48 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102c60:	4a00      	ldr	r2, [pc, #0]	; (8102c64 <HAL_DMA_Abort+0x31c>)
 8102c62:	e7b5      	b.n	8102bd0 <HAL_DMA_Abort+0x288>
 8102c64:	40020400 	.word	0x40020400

08102c68 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8102c68:	2800      	cmp	r0, #0
 8102c6a:	d06e      	beq.n	8102d4a <HAL_DMA_Abort_IT+0xe2>
{
 8102c6c:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102c6e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8102c72:	2b02      	cmp	r3, #2
 8102c74:	d15c      	bne.n	8102d30 <HAL_DMA_Abort_IT+0xc8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102c76:	6803      	ldr	r3, [r0, #0]
 8102c78:	4a43      	ldr	r2, [pc, #268]	; (8102d88 <HAL_DMA_Abort_IT+0x120>)
 8102c7a:	4293      	cmp	r3, r2
 8102c7c:	d05c      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102c7e:	3218      	adds	r2, #24
 8102c80:	4293      	cmp	r3, r2
 8102c82:	d059      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102c84:	3218      	adds	r2, #24
 8102c86:	4293      	cmp	r3, r2
 8102c88:	d056      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102c8a:	3218      	adds	r2, #24
 8102c8c:	4293      	cmp	r3, r2
 8102c8e:	d053      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102c90:	3218      	adds	r2, #24
 8102c92:	4293      	cmp	r3, r2
 8102c94:	d050      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102c96:	3218      	adds	r2, #24
 8102c98:	4293      	cmp	r3, r2
 8102c9a:	d04d      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102c9c:	3218      	adds	r2, #24
 8102c9e:	4293      	cmp	r3, r2
 8102ca0:	d04a      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102ca2:	3218      	adds	r2, #24
 8102ca4:	4293      	cmp	r3, r2
 8102ca6:	d047      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102ca8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8102cac:	4293      	cmp	r3, r2
 8102cae:	d043      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102cb0:	3218      	adds	r2, #24
 8102cb2:	4293      	cmp	r3, r2
 8102cb4:	d040      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102cb6:	3218      	adds	r2, #24
 8102cb8:	4293      	cmp	r3, r2
 8102cba:	d03d      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102cbc:	3218      	adds	r2, #24
 8102cbe:	4293      	cmp	r3, r2
 8102cc0:	d03a      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102cc2:	3218      	adds	r2, #24
 8102cc4:	4293      	cmp	r3, r2
 8102cc6:	d037      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102cc8:	3218      	adds	r2, #24
 8102cca:	4293      	cmp	r3, r2
 8102ccc:	d034      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102cce:	3218      	adds	r2, #24
 8102cd0:	4293      	cmp	r3, r2
 8102cd2:	d031      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
 8102cd4:	3218      	adds	r2, #24
 8102cd6:	4293      	cmp	r3, r2
 8102cd8:	d02e      	beq.n	8102d38 <HAL_DMA_Abort_IT+0xd0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102cda:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102cdc:	492b      	ldr	r1, [pc, #172]	; (8102d8c <HAL_DMA_Abort_IT+0x124>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102cde:	f022 020e 	bic.w	r2, r2, #14
 8102ce2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8102ce4:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102ce6:	428b      	cmp	r3, r1
      __HAL_DMA_DISABLE(hdma);
 8102ce8:	f022 0201 	bic.w	r2, r2, #1
 8102cec:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102cee:	d02e      	beq.n	8102d4e <HAL_DMA_Abort_IT+0xe6>
 8102cf0:	4a27      	ldr	r2, [pc, #156]	; (8102d90 <HAL_DMA_Abort_IT+0x128>)
 8102cf2:	4293      	cmp	r3, r2
 8102cf4:	d02b      	beq.n	8102d4e <HAL_DMA_Abort_IT+0xe6>
 8102cf6:	3214      	adds	r2, #20
 8102cf8:	4293      	cmp	r3, r2
 8102cfa:	d028      	beq.n	8102d4e <HAL_DMA_Abort_IT+0xe6>
 8102cfc:	3214      	adds	r2, #20
 8102cfe:	4293      	cmp	r3, r2
 8102d00:	d025      	beq.n	8102d4e <HAL_DMA_Abort_IT+0xe6>
 8102d02:	3214      	adds	r2, #20
 8102d04:	4293      	cmp	r3, r2
 8102d06:	d022      	beq.n	8102d4e <HAL_DMA_Abort_IT+0xe6>
 8102d08:	3214      	adds	r2, #20
 8102d0a:	4293      	cmp	r3, r2
 8102d0c:	d01f      	beq.n	8102d4e <HAL_DMA_Abort_IT+0xe6>
 8102d0e:	3214      	adds	r2, #20
 8102d10:	4293      	cmp	r3, r2
 8102d12:	d01c      	beq.n	8102d4e <HAL_DMA_Abort_IT+0xe6>
 8102d14:	3214      	adds	r2, #20
 8102d16:	4293      	cmp	r3, r2
 8102d18:	d019      	beq.n	8102d4e <HAL_DMA_Abort_IT+0xe6>
      if(hdma->XferAbortCallback != NULL)
 8102d1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8102d1c:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8102d1e:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8102d20:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8102d24:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8102d28:	b35b      	cbz	r3, 8102d82 <HAL_DMA_Abort_IT+0x11a>
        hdma->XferAbortCallback(hdma);
 8102d2a:	4798      	blx	r3
  return HAL_OK;
 8102d2c:	4620      	mov	r0, r4
}
 8102d2e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102d30:	2380      	movs	r3, #128	; 0x80
 8102d32:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8102d34:	2001      	movs	r0, #1
}
 8102d36:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 8102d38:	2204      	movs	r2, #4
 8102d3a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8102d3e:	681a      	ldr	r2, [r3, #0]
 8102d40:	f022 0201 	bic.w	r2, r2, #1
  return HAL_OK;
 8102d44:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8102d46:	601a      	str	r2, [r3, #0]
}
 8102d48:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8102d4a:	2001      	movs	r0, #1
}
 8102d4c:	4770      	bx	lr
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102d4e:	e9d0 3117 	ldrd	r3, r1, [r0, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102d52:	680a      	ldr	r2, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8102d54:	6d85      	ldr	r5, [r0, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8102d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102d5a:	600a      	str	r2, [r1, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102d5c:	f003 031f 	and.w	r3, r3, #31
 8102d60:	2201      	movs	r2, #1
 8102d62:	409a      	lsls	r2, r3
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102d64:	e9d0 431a 	ldrd	r4, r3, [r0, #104]	; 0x68
 8102d68:	6e41      	ldr	r1, [r0, #100]	; 0x64
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102d6a:	606a      	str	r2, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102d6c:	604c      	str	r4, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8102d6e:	2b00      	cmp	r3, #0
 8102d70:	d0d3      	beq.n	8102d1a <HAL_DMA_Abort_IT+0xb2>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102d72:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102d74:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8102d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102d7c:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102d7e:	604c      	str	r4, [r1, #4]
 8102d80:	e7cb      	b.n	8102d1a <HAL_DMA_Abort_IT+0xb2>
  return HAL_OK;
 8102d82:	4618      	mov	r0, r3
}
 8102d84:	bd38      	pop	{r3, r4, r5, pc}
 8102d86:	bf00      	nop
 8102d88:	40020010 	.word	0x40020010
 8102d8c:	58025408 	.word	0x58025408
 8102d90:	5802541c 	.word	0x5802541c

08102d94 <HAL_DMA_IRQHandler>:
{
 8102d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 8102d98:	4b93      	ldr	r3, [pc, #588]	; (8102fe8 <HAL_DMA_IRQHandler+0x254>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8102d9a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8102d9c:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102d9e:	6803      	ldr	r3, [r0, #0]
{
 8102da0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8102da2:	2200      	movs	r2, #0
 8102da4:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102da6:	4a91      	ldr	r2, [pc, #580]	; (8102fec <HAL_DMA_IRQHandler+0x258>)
  tmpisr_dma  = regs_dma->ISR;
 8102da8:	682c      	ldr	r4, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8102daa:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102dac:	4293      	cmp	r3, r2
{
 8102dae:	4680      	mov	r8, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8102db0:	f000 8124 	beq.w	8102ffc <HAL_DMA_IRQHandler+0x268>
 8102db4:	3218      	adds	r2, #24
 8102db6:	4293      	cmp	r3, r2
 8102db8:	d05e      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102dba:	3218      	adds	r2, #24
 8102dbc:	4293      	cmp	r3, r2
 8102dbe:	d05b      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102dc0:	3218      	adds	r2, #24
 8102dc2:	4293      	cmp	r3, r2
 8102dc4:	d058      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102dc6:	3218      	adds	r2, #24
 8102dc8:	4293      	cmp	r3, r2
 8102dca:	d055      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102dcc:	3218      	adds	r2, #24
 8102dce:	4293      	cmp	r3, r2
 8102dd0:	d052      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102dd2:	3218      	adds	r2, #24
 8102dd4:	4293      	cmp	r3, r2
 8102dd6:	d04f      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102dd8:	3218      	adds	r2, #24
 8102dda:	4293      	cmp	r3, r2
 8102ddc:	d04c      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102dde:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8102de2:	4293      	cmp	r3, r2
 8102de4:	d048      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102de6:	3218      	adds	r2, #24
 8102de8:	4293      	cmp	r3, r2
 8102dea:	d045      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102dec:	3218      	adds	r2, #24
 8102dee:	4293      	cmp	r3, r2
 8102df0:	d042      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102df2:	3218      	adds	r2, #24
 8102df4:	4293      	cmp	r3, r2
 8102df6:	d03f      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102df8:	3218      	adds	r2, #24
 8102dfa:	4293      	cmp	r3, r2
 8102dfc:	d03c      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102dfe:	3218      	adds	r2, #24
 8102e00:	4293      	cmp	r3, r2
 8102e02:	d039      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102e04:	3218      	adds	r2, #24
 8102e06:	4293      	cmp	r3, r2
 8102e08:	d036      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
 8102e0a:	3218      	adds	r2, #24
 8102e0c:	4293      	cmp	r3, r2
 8102e0e:	d033      	beq.n	8102e78 <HAL_DMA_IRQHandler+0xe4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8102e10:	4a77      	ldr	r2, [pc, #476]	; (8102ff0 <HAL_DMA_IRQHandler+0x25c>)
 8102e12:	4293      	cmp	r3, r2
 8102e14:	d014      	beq.n	8102e40 <HAL_DMA_IRQHandler+0xac>
 8102e16:	4a77      	ldr	r2, [pc, #476]	; (8102ff4 <HAL_DMA_IRQHandler+0x260>)
 8102e18:	4293      	cmp	r3, r2
 8102e1a:	d011      	beq.n	8102e40 <HAL_DMA_IRQHandler+0xac>
 8102e1c:	3214      	adds	r2, #20
 8102e1e:	4293      	cmp	r3, r2
 8102e20:	d00e      	beq.n	8102e40 <HAL_DMA_IRQHandler+0xac>
 8102e22:	3214      	adds	r2, #20
 8102e24:	4293      	cmp	r3, r2
 8102e26:	d00b      	beq.n	8102e40 <HAL_DMA_IRQHandler+0xac>
 8102e28:	3214      	adds	r2, #20
 8102e2a:	4293      	cmp	r3, r2
 8102e2c:	d008      	beq.n	8102e40 <HAL_DMA_IRQHandler+0xac>
 8102e2e:	3214      	adds	r2, #20
 8102e30:	4293      	cmp	r3, r2
 8102e32:	d005      	beq.n	8102e40 <HAL_DMA_IRQHandler+0xac>
 8102e34:	3214      	adds	r2, #20
 8102e36:	4293      	cmp	r3, r2
 8102e38:	d002      	beq.n	8102e40 <HAL_DMA_IRQHandler+0xac>
 8102e3a:	3214      	adds	r2, #20
 8102e3c:	4293      	cmp	r3, r2
 8102e3e:	d118      	bne.n	8102e72 <HAL_DMA_IRQHandler+0xde>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8102e40:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8102e44:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8102e46:	f004 041f 	and.w	r4, r4, #31
 8102e4a:	2604      	movs	r6, #4
 8102e4c:	40a6      	lsls	r6, r4
 8102e4e:	420e      	tst	r6, r1
 8102e50:	f000 8246 	beq.w	81032e0 <HAL_DMA_IRQHandler+0x54c>
 8102e54:	0757      	lsls	r7, r2, #29
 8102e56:	f140 8243 	bpl.w	81032e0 <HAL_DMA_IRQHandler+0x54c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8102e5a:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8102e5c:	0416      	lsls	r6, r2, #16
 8102e5e:	f140 826c 	bpl.w	810333a <HAL_DMA_IRQHandler+0x5a6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8102e62:	03d5      	lsls	r5, r2, #15
 8102e64:	f100 826f 	bmi.w	8103346 <HAL_DMA_IRQHandler+0x5b2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8102e68:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8102e6c:	2b00      	cmp	r3, #0
 8102e6e:	f040 80b6 	bne.w	8102fde <HAL_DMA_IRQHandler+0x24a>
}
 8102e72:	b002      	add	sp, #8
 8102e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102e78:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 8102e7c:	2608      	movs	r6, #8
 8102e7e:	f001 021f 	and.w	r2, r1, #31
 8102e82:	4096      	lsls	r6, r2
 8102e84:	4234      	tst	r4, r6
 8102e86:	f040 80c1 	bne.w	810300c <HAL_DMA_IRQHandler+0x278>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102e8a:	fa24 f602 	lsr.w	r6, r4, r2
 8102e8e:	07f0      	lsls	r0, r6, #31
 8102e90:	f100 810f 	bmi.w	81030b2 <HAL_DMA_IRQHandler+0x31e>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102e94:	2604      	movs	r6, #4
 8102e96:	fa06 f002 	lsl.w	r0, r6, r2
 8102e9a:	4204      	tst	r4, r0
 8102e9c:	f040 811d 	bne.w	81030da <HAL_DMA_IRQHandler+0x346>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102ea0:	2610      	movs	r6, #16
 8102ea2:	fa06 f202 	lsl.w	r2, r6, r2
 8102ea6:	4214      	tst	r4, r2
 8102ea8:	f040 816c 	bne.w	8103184 <HAL_DMA_IRQHandler+0x3f0>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102eac:	f001 011f 	and.w	r1, r1, #31
 8102eb0:	2320      	movs	r3, #32
 8102eb2:	408b      	lsls	r3, r1
 8102eb4:	4223      	tst	r3, r4
 8102eb6:	d046      	beq.n	8102f46 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8102eb8:	f8d8 4000 	ldr.w	r4, [r8]
 8102ebc:	4a4b      	ldr	r2, [pc, #300]	; (8102fec <HAL_DMA_IRQHandler+0x258>)
 8102ebe:	4294      	cmp	r4, r2
 8102ec0:	f000 81a8 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102ec4:	3218      	adds	r2, #24
 8102ec6:	4294      	cmp	r4, r2
 8102ec8:	f000 81a4 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102ecc:	3218      	adds	r2, #24
 8102ece:	4294      	cmp	r4, r2
 8102ed0:	f000 81a0 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102ed4:	3218      	adds	r2, #24
 8102ed6:	4294      	cmp	r4, r2
 8102ed8:	f000 819c 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102edc:	3218      	adds	r2, #24
 8102ede:	4294      	cmp	r4, r2
 8102ee0:	f000 8198 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102ee4:	3218      	adds	r2, #24
 8102ee6:	4294      	cmp	r4, r2
 8102ee8:	f000 8194 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102eec:	3218      	adds	r2, #24
 8102eee:	4294      	cmp	r4, r2
 8102ef0:	f000 8190 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102ef4:	3218      	adds	r2, #24
 8102ef6:	4294      	cmp	r4, r2
 8102ef8:	f000 818c 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102efc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8102f00:	4294      	cmp	r4, r2
 8102f02:	f000 8187 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102f06:	3218      	adds	r2, #24
 8102f08:	4294      	cmp	r4, r2
 8102f0a:	f000 8183 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102f0e:	3218      	adds	r2, #24
 8102f10:	4294      	cmp	r4, r2
 8102f12:	f000 817f 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102f16:	3218      	adds	r2, #24
 8102f18:	4294      	cmp	r4, r2
 8102f1a:	f000 817b 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102f1e:	3218      	adds	r2, #24
 8102f20:	4294      	cmp	r4, r2
 8102f22:	f000 8177 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102f26:	3218      	adds	r2, #24
 8102f28:	4294      	cmp	r4, r2
 8102f2a:	f000 8173 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102f2e:	3218      	adds	r2, #24
 8102f30:	4294      	cmp	r4, r2
 8102f32:	f000 816f 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102f36:	3218      	adds	r2, #24
 8102f38:	4294      	cmp	r4, r2
 8102f3a:	f000 816b 	beq.w	8103214 <HAL_DMA_IRQHandler+0x480>
 8102f3e:	6822      	ldr	r2, [r4, #0]
 8102f40:	0796      	lsls	r6, r2, #30
 8102f42:	f100 816b 	bmi.w	810321c <HAL_DMA_IRQHandler+0x488>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8102f46:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8102f4a:	2b00      	cmp	r3, #0
 8102f4c:	d091      	beq.n	8102e72 <HAL_DMA_IRQHandler+0xde>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8102f4e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8102f52:	07d9      	lsls	r1, r3, #31
 8102f54:	d53e      	bpl.n	8102fd4 <HAL_DMA_IRQHandler+0x240>
        __HAL_DMA_DISABLE(hdma);
 8102f56:	f8d8 1000 	ldr.w	r1, [r8]
 8102f5a:	4b24      	ldr	r3, [pc, #144]	; (8102fec <HAL_DMA_IRQHandler+0x258>)
        hdma->State = HAL_DMA_STATE_ABORT;
 8102f5c:	2204      	movs	r2, #4
        __HAL_DMA_DISABLE(hdma);
 8102f5e:	4299      	cmp	r1, r3
        hdma->State = HAL_DMA_STATE_ABORT;
 8102f60:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8102f64:	d01b      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f66:	3318      	adds	r3, #24
 8102f68:	4299      	cmp	r1, r3
 8102f6a:	d018      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f6c:	3318      	adds	r3, #24
 8102f6e:	4299      	cmp	r1, r3
 8102f70:	d015      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f72:	3318      	adds	r3, #24
 8102f74:	4299      	cmp	r1, r3
 8102f76:	d012      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f78:	3318      	adds	r3, #24
 8102f7a:	4299      	cmp	r1, r3
 8102f7c:	d00f      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f7e:	3318      	adds	r3, #24
 8102f80:	4299      	cmp	r1, r3
 8102f82:	d00c      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f84:	3318      	adds	r3, #24
 8102f86:	4299      	cmp	r1, r3
 8102f88:	d009      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f8a:	3318      	adds	r3, #24
 8102f8c:	4299      	cmp	r1, r3
 8102f8e:	d006      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f90:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8102f94:	4299      	cmp	r1, r3
 8102f96:	d002      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f98:	3318      	adds	r3, #24
 8102f9a:	4299      	cmp	r1, r3
 8102f9c:	d0ff      	beq.n	8102f9e <HAL_DMA_IRQHandler+0x20a>
 8102f9e:	680b      	ldr	r3, [r1, #0]
 8102fa0:	f023 0301 	bic.w	r3, r3, #1
 8102fa4:	600b      	str	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8102fa6:	4b14      	ldr	r3, [pc, #80]	; (8102ff8 <HAL_DMA_IRQHandler+0x264>)
 8102fa8:	fba3 3707 	umull	r3, r7, r3, r7
 8102fac:	0abf      	lsrs	r7, r7, #10
 8102fae:	e002      	b.n	8102fb6 <HAL_DMA_IRQHandler+0x222>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8102fb0:	680b      	ldr	r3, [r1, #0]
 8102fb2:	07da      	lsls	r2, r3, #31
 8102fb4:	d504      	bpl.n	8102fc0 <HAL_DMA_IRQHandler+0x22c>
          if (++count > timeout)
 8102fb6:	9b01      	ldr	r3, [sp, #4]
 8102fb8:	3301      	adds	r3, #1
 8102fba:	42bb      	cmp	r3, r7
 8102fbc:	9301      	str	r3, [sp, #4]
 8102fbe:	d9f7      	bls.n	8102fb0 <HAL_DMA_IRQHandler+0x21c>
        __HAL_UNLOCK(hdma);
 8102fc0:	2300      	movs	r3, #0
 8102fc2:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102fc6:	680b      	ldr	r3, [r1, #0]
 8102fc8:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8102fca:	bf4c      	ite	mi
 8102fcc:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8102fce:	2301      	movpl	r3, #1
 8102fd0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8102fd4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8102fd8:	2b00      	cmp	r3, #0
 8102fda:	f43f af4a 	beq.w	8102e72 <HAL_DMA_IRQHandler+0xde>
          hdma->XferCpltCallback(hdma);
 8102fde:	4640      	mov	r0, r8
}
 8102fe0:	b002      	add	sp, #8
 8102fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8102fe6:	4718      	bx	r3
 8102fe8:	10000000 	.word	0x10000000
 8102fec:	40020010 	.word	0x40020010
 8102ff0:	58025408 	.word	0x58025408
 8102ff4:	5802541c 	.word	0x5802541c
 8102ff8:	1b4e81b5 	.word	0x1b4e81b5
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8102ffc:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8102ffe:	2608      	movs	r6, #8
 8103000:	f001 021f 	and.w	r2, r1, #31
 8103004:	4096      	lsls	r6, r2
 8103006:	4234      	tst	r4, r6
 8103008:	f000 809c 	beq.w	8103144 <HAL_DMA_IRQHandler+0x3b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 810300c:	6818      	ldr	r0, [r3, #0]
 810300e:	0740      	lsls	r0, r0, #29
 8103010:	d50a      	bpl.n	8103028 <HAL_DMA_IRQHandler+0x294>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103012:	6818      	ldr	r0, [r3, #0]
 8103014:	f020 0004 	bic.w	r0, r0, #4
 8103018:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810301a:	60ae      	str	r6, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 810301c:	f8d8 6054 	ldr.w	r6, [r8, #84]	; 0x54
 8103020:	f046 0601 	orr.w	r6, r6, #1
 8103024:	f8c8 6054 	str.w	r6, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103028:	fa24 f602 	lsr.w	r6, r4, r2
 810302c:	07f6      	lsls	r6, r6, #31
 810302e:	d54c      	bpl.n	81030ca <HAL_DMA_IRQHandler+0x336>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103030:	4e9a      	ldr	r6, [pc, #616]	; (810329c <HAL_DMA_IRQHandler+0x508>)
 8103032:	42b3      	cmp	r3, r6
 8103034:	d03d      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103036:	3618      	adds	r6, #24
 8103038:	42b3      	cmp	r3, r6
 810303a:	d03a      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 810303c:	3618      	adds	r6, #24
 810303e:	42b3      	cmp	r3, r6
 8103040:	d037      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103042:	3618      	adds	r6, #24
 8103044:	42b3      	cmp	r3, r6
 8103046:	d034      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103048:	3618      	adds	r6, #24
 810304a:	42b3      	cmp	r3, r6
 810304c:	d031      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 810304e:	3618      	adds	r6, #24
 8103050:	42b3      	cmp	r3, r6
 8103052:	d02e      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103054:	3618      	adds	r6, #24
 8103056:	42b3      	cmp	r3, r6
 8103058:	d02b      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 810305a:	3618      	adds	r6, #24
 810305c:	42b3      	cmp	r3, r6
 810305e:	d028      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103060:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8103064:	42b3      	cmp	r3, r6
 8103066:	d024      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103068:	3618      	adds	r6, #24
 810306a:	42b3      	cmp	r3, r6
 810306c:	d021      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 810306e:	3618      	adds	r6, #24
 8103070:	42b3      	cmp	r3, r6
 8103072:	d01e      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103074:	3618      	adds	r6, #24
 8103076:	42b3      	cmp	r3, r6
 8103078:	d01b      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 810307a:	3618      	adds	r6, #24
 810307c:	42b3      	cmp	r3, r6
 810307e:	d018      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103080:	3618      	adds	r6, #24
 8103082:	42b3      	cmp	r3, r6
 8103084:	d015      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103086:	3618      	adds	r6, #24
 8103088:	42b3      	cmp	r3, r6
 810308a:	d012      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 810308c:	3618      	adds	r6, #24
 810308e:	42b3      	cmp	r3, r6
 8103090:	d00f      	beq.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
 8103092:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103094:	2604      	movs	r6, #4
 8103096:	4096      	lsls	r6, r2
 8103098:	4226      	tst	r6, r4
 810309a:	d14c      	bne.n	8103136 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810309c:	2610      	movs	r6, #16
 810309e:	fa06 f202 	lsl.w	r2, r6, r2
 81030a2:	4222      	tst	r2, r4
 81030a4:	f43f af02 	beq.w	8102eac <HAL_DMA_IRQHandler+0x118>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 81030a8:	681e      	ldr	r6, [r3, #0]
 81030aa:	0770      	lsls	r0, r6, #29
 81030ac:	f57f aefe 	bpl.w	8102eac <HAL_DMA_IRQHandler+0x118>
 81030b0:	e09b      	b.n	81031ea <HAL_DMA_IRQHandler+0x456>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81030b2:	695e      	ldr	r6, [r3, #20]
 81030b4:	0630      	lsls	r0, r6, #24
 81030b6:	d508      	bpl.n	81030ca <HAL_DMA_IRQHandler+0x336>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81030b8:	2601      	movs	r6, #1
 81030ba:	4096      	lsls	r6, r2
 81030bc:	60ae      	str	r6, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81030be:	f8d8 6054 	ldr.w	r6, [r8, #84]	; 0x54
 81030c2:	f046 0602 	orr.w	r6, r6, #2
 81030c6:	f8c8 6054 	str.w	r6, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81030ca:	2604      	movs	r6, #4
 81030cc:	fa06 f002 	lsl.w	r0, r6, r2
 81030d0:	4220      	tst	r0, r4
 81030d2:	d04b      	beq.n	810316c <HAL_DMA_IRQHandler+0x3d8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81030d4:	4e71      	ldr	r6, [pc, #452]	; (810329c <HAL_DMA_IRQHandler+0x508>)
 81030d6:	42b3      	cmp	r3, r6
 81030d8:	d03e      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 81030da:	4e71      	ldr	r6, [pc, #452]	; (81032a0 <HAL_DMA_IRQHandler+0x50c>)
 81030dc:	42b3      	cmp	r3, r6
 81030de:	d03b      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 81030e0:	3618      	adds	r6, #24
 81030e2:	42b3      	cmp	r3, r6
 81030e4:	d038      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 81030e6:	3618      	adds	r6, #24
 81030e8:	42b3      	cmp	r3, r6
 81030ea:	d035      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 81030ec:	3618      	adds	r6, #24
 81030ee:	42b3      	cmp	r3, r6
 81030f0:	d032      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 81030f2:	3618      	adds	r6, #24
 81030f4:	42b3      	cmp	r3, r6
 81030f6:	d02f      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 81030f8:	3618      	adds	r6, #24
 81030fa:	42b3      	cmp	r3, r6
 81030fc:	d02c      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 81030fe:	3618      	adds	r6, #24
 8103100:	42b3      	cmp	r3, r6
 8103102:	d029      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 8103104:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8103108:	42b3      	cmp	r3, r6
 810310a:	d025      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 810310c:	3618      	adds	r6, #24
 810310e:	42b3      	cmp	r3, r6
 8103110:	d022      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 8103112:	3618      	adds	r6, #24
 8103114:	42b3      	cmp	r3, r6
 8103116:	d01f      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 8103118:	3618      	adds	r6, #24
 810311a:	42b3      	cmp	r3, r6
 810311c:	d01c      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 810311e:	3618      	adds	r6, #24
 8103120:	42b3      	cmp	r3, r6
 8103122:	d019      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 8103124:	3618      	adds	r6, #24
 8103126:	42b3      	cmp	r3, r6
 8103128:	d016      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 810312a:	3618      	adds	r6, #24
 810312c:	42b3      	cmp	r3, r6
 810312e:	d013      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 8103130:	3618      	adds	r6, #24
 8103132:	42b3      	cmp	r3, r6
 8103134:	d010      	beq.n	8103158 <HAL_DMA_IRQHandler+0x3c4>
 8103136:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103138:	2610      	movs	r6, #16
 810313a:	fa06 f202 	lsl.w	r2, r6, r2
 810313e:	4214      	tst	r4, r2
 8103140:	d1b2      	bne.n	81030a8 <HAL_DMA_IRQHandler+0x314>
 8103142:	e6b3      	b.n	8102eac <HAL_DMA_IRQHandler+0x118>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103144:	fa24 f602 	lsr.w	r6, r4, r2
 8103148:	07f6      	lsls	r6, r6, #31
 810314a:	d4b2      	bmi.n	81030b2 <HAL_DMA_IRQHandler+0x31e>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810314c:	2604      	movs	r6, #4
 810314e:	fa06 f002 	lsl.w	r0, r6, r2
 8103152:	4204      	tst	r4, r0
 8103154:	f000 80b8 	beq.w	81032c8 <HAL_DMA_IRQHandler+0x534>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103158:	681e      	ldr	r6, [r3, #0]
 810315a:	07b6      	lsls	r6, r6, #30
 810315c:	d506      	bpl.n	810316c <HAL_DMA_IRQHandler+0x3d8>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810315e:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103160:	f8d8 6054 	ldr.w	r6, [r8, #84]	; 0x54
 8103164:	f046 0604 	orr.w	r6, r6, #4
 8103168:	f8c8 6054 	str.w	r6, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810316c:	2610      	movs	r6, #16
 810316e:	fa06 f202 	lsl.w	r2, r6, r2
 8103172:	4222      	tst	r2, r4
 8103174:	f43f ae9a 	beq.w	8102eac <HAL_DMA_IRQHandler+0x118>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103178:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 810317c:	f506 3600 	add.w	r6, r6, #131072	; 0x20000
 8103180:	42b3      	cmp	r3, r6
 8103182:	d02e      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 8103184:	4e46      	ldr	r6, [pc, #280]	; (81032a0 <HAL_DMA_IRQHandler+0x50c>)
 8103186:	42b3      	cmp	r3, r6
 8103188:	d02b      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 810318a:	3618      	adds	r6, #24
 810318c:	42b3      	cmp	r3, r6
 810318e:	d028      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 8103190:	3618      	adds	r6, #24
 8103192:	42b3      	cmp	r3, r6
 8103194:	d025      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 8103196:	3618      	adds	r6, #24
 8103198:	42b3      	cmp	r3, r6
 810319a:	d022      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 810319c:	3618      	adds	r6, #24
 810319e:	42b3      	cmp	r3, r6
 81031a0:	d01f      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031a2:	3618      	adds	r6, #24
 81031a4:	42b3      	cmp	r3, r6
 81031a6:	d01c      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031a8:	3618      	adds	r6, #24
 81031aa:	42b3      	cmp	r3, r6
 81031ac:	d019      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031ae:	f506 7656 	add.w	r6, r6, #856	; 0x358
 81031b2:	42b3      	cmp	r3, r6
 81031b4:	d015      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031b6:	3618      	adds	r6, #24
 81031b8:	42b3      	cmp	r3, r6
 81031ba:	d012      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031bc:	3618      	adds	r6, #24
 81031be:	42b3      	cmp	r3, r6
 81031c0:	d00f      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031c2:	3618      	adds	r6, #24
 81031c4:	42b3      	cmp	r3, r6
 81031c6:	d00c      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031c8:	3618      	adds	r6, #24
 81031ca:	42b3      	cmp	r3, r6
 81031cc:	d009      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031ce:	3618      	adds	r6, #24
 81031d0:	42b3      	cmp	r3, r6
 81031d2:	d006      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031d4:	3618      	adds	r6, #24
 81031d6:	42b3      	cmp	r3, r6
 81031d8:	d003      	beq.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
 81031da:	3618      	adds	r6, #24
 81031dc:	42b3      	cmp	r3, r6
 81031de:	f47f af63 	bne.w	81030a8 <HAL_DMA_IRQHandler+0x314>
 81031e2:	681e      	ldr	r6, [r3, #0]
 81031e4:	0736      	lsls	r6, r6, #28
 81031e6:	f57f ae61 	bpl.w	8102eac <HAL_DMA_IRQHandler+0x118>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81031ea:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81031ec:	681a      	ldr	r2, [r3, #0]
 81031ee:	0352      	lsls	r2, r2, #13
 81031f0:	d428      	bmi.n	8103244 <HAL_DMA_IRQHandler+0x4b0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81031f2:	681a      	ldr	r2, [r3, #0]
 81031f4:	05d0      	lsls	r0, r2, #23
 81031f6:	d403      	bmi.n	8103200 <HAL_DMA_IRQHandler+0x46c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81031f8:	681a      	ldr	r2, [r3, #0]
 81031fa:	f022 0208 	bic.w	r2, r2, #8
 81031fe:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8103200:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8103204:	2b00      	cmp	r3, #0
 8103206:	f43f ae51 	beq.w	8102eac <HAL_DMA_IRQHandler+0x118>
            hdma->XferHalfCpltCallback(hdma);
 810320a:	4640      	mov	r0, r8
 810320c:	4798      	blx	r3
 810320e:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 8103212:	e64b      	b.n	8102eac <HAL_DMA_IRQHandler+0x118>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103214:	6822      	ldr	r2, [r4, #0]
 8103216:	06d2      	lsls	r2, r2, #27
 8103218:	f57f ae95 	bpl.w	8102f46 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 810321c:	60ab      	str	r3, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 810321e:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 8103222:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103224:	6823      	ldr	r3, [r4, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103226:	d015      	beq.n	8103254 <HAL_DMA_IRQHandler+0x4c0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103228:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810322c:	6823      	ldr	r3, [r4, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810322e:	d039      	beq.n	81032a4 <HAL_DMA_IRQHandler+0x510>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103230:	0318      	lsls	r0, r3, #12
 8103232:	d544      	bpl.n	81032be <HAL_DMA_IRQHandler+0x52a>
          if(hdma->XferCpltCallback != NULL)
 8103234:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8103238:	2b00      	cmp	r3, #0
 810323a:	f43f ae84 	beq.w	8102f46 <HAL_DMA_IRQHandler+0x1b2>
            hdma->XferCpltCallback(hdma);
 810323e:	4640      	mov	r0, r8
 8103240:	4798      	blx	r3
 8103242:	e680      	b.n	8102f46 <HAL_DMA_IRQHandler+0x1b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103244:	681b      	ldr	r3, [r3, #0]
 8103246:	031e      	lsls	r6, r3, #12
 8103248:	d5da      	bpl.n	8103200 <HAL_DMA_IRQHandler+0x46c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 810324a:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 810324e:	2b00      	cmp	r3, #0
 8103250:	d1db      	bne.n	810320a <HAL_DMA_IRQHandler+0x476>
 8103252:	e62b      	b.n	8102eac <HAL_DMA_IRQHandler+0x118>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103254:	f023 0316 	bic.w	r3, r3, #22
 8103258:	6023      	str	r3, [r4, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810325a:	6963      	ldr	r3, [r4, #20]
 810325c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8103260:	6163      	str	r3, [r4, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103262:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8103266:	2b00      	cmp	r3, #0
 8103268:	d035      	beq.n	81032d6 <HAL_DMA_IRQHandler+0x542>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810326a:	6823      	ldr	r3, [r4, #0]
 810326c:	f023 0308 	bic.w	r3, r3, #8
 8103270:	6023      	str	r3, [r4, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103272:	233f      	movs	r3, #63	; 0x3f
          if(hdma->XferAbortCallback != NULL)
 8103274:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103278:	fa03 f101 	lsl.w	r1, r3, r1
          __HAL_UNLOCK(hdma);
 810327c:	2400      	movs	r4, #0
          hdma->State = HAL_DMA_STATE_READY;
 810327e:	2301      	movs	r3, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103280:	60a9      	str	r1, [r5, #8]
          __HAL_UNLOCK(hdma);
 8103282:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8103286:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 810328a:	2a00      	cmp	r2, #0
 810328c:	f43f adf1 	beq.w	8102e72 <HAL_DMA_IRQHandler+0xde>
        hdma->XferErrorCallback(hdma);
 8103290:	4640      	mov	r0, r8
}
 8103292:	b002      	add	sp, #8
 8103294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8103298:	4710      	bx	r2
 810329a:	bf00      	nop
 810329c:	40020010 	.word	0x40020010
 81032a0:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81032a4:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 81032a8:	d1c4      	bne.n	8103234 <HAL_DMA_IRQHandler+0x4a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81032aa:	6822      	ldr	r2, [r4, #0]
 81032ac:	f022 0210 	bic.w	r2, r2, #16
 81032b0:	6022      	str	r2, [r4, #0]
            hdma->State = HAL_DMA_STATE_READY;
 81032b2:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 81032b4:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 81032b8:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
 81032bc:	e7ba      	b.n	8103234 <HAL_DMA_IRQHandler+0x4a0>
            if(hdma->XferM1CpltCallback != NULL)
 81032be:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 81032c2:	2b00      	cmp	r3, #0
 81032c4:	d1bb      	bne.n	810323e <HAL_DMA_IRQHandler+0x4aa>
 81032c6:	e63e      	b.n	8102f46 <HAL_DMA_IRQHandler+0x1b2>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81032c8:	2610      	movs	r6, #16
 81032ca:	fa06 f202 	lsl.w	r2, r6, r2
 81032ce:	4214      	tst	r4, r2
 81032d0:	f43f adec 	beq.w	8102eac <HAL_DMA_IRQHandler+0x118>
 81032d4:	e785      	b.n	81031e2 <HAL_DMA_IRQHandler+0x44e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81032d6:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 81032da:	2b00      	cmp	r3, #0
 81032dc:	d1c5      	bne.n	810326a <HAL_DMA_IRQHandler+0x4d6>
 81032de:	e7c8      	b.n	8103272 <HAL_DMA_IRQHandler+0x4de>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81032e0:	2602      	movs	r6, #2
 81032e2:	40a6      	lsls	r6, r4
 81032e4:	420e      	tst	r6, r1
 81032e6:	d00c      	beq.n	8103302 <HAL_DMA_IRQHandler+0x56e>
 81032e8:	0790      	lsls	r0, r2, #30
 81032ea:	d50a      	bpl.n	8103302 <HAL_DMA_IRQHandler+0x56e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81032ec:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81032ee:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81032f0:	d52f      	bpl.n	8103352 <HAL_DMA_IRQHandler+0x5be>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81032f2:	03d3      	lsls	r3, r2, #15
 81032f4:	d439      	bmi.n	810336a <HAL_DMA_IRQHandler+0x5d6>
          if(hdma->XferM1CpltCallback != NULL)
 81032f6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 81032fa:	2b00      	cmp	r3, #0
 81032fc:	f47f ae6f 	bne.w	8102fde <HAL_DMA_IRQHandler+0x24a>
 8103300:	e5b7      	b.n	8102e72 <HAL_DMA_IRQHandler+0xde>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103302:	2608      	movs	r6, #8
 8103304:	40a6      	lsls	r6, r4
 8103306:	420e      	tst	r6, r1
 8103308:	f43f adb3 	beq.w	8102e72 <HAL_DMA_IRQHandler+0xde>
 810330c:	0717      	lsls	r7, r2, #28
 810330e:	f57f adb0 	bpl.w	8102e72 <HAL_DMA_IRQHandler+0xde>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103312:	681a      	ldr	r2, [r3, #0]
 8103314:	f022 020e 	bic.w	r2, r2, #14
 8103318:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810331a:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 810331c:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103320:	fa03 f404 	lsl.w	r4, r3, r4
      __HAL_UNLOCK(hdma);
 8103324:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103326:	606c      	str	r4, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103328:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 810332c:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8103330:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8103334:	2a00      	cmp	r2, #0
 8103336:	d1ab      	bne.n	8103290 <HAL_DMA_IRQHandler+0x4fc>
 8103338:	e59b      	b.n	8102e72 <HAL_DMA_IRQHandler+0xde>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810333a:	0694      	lsls	r4, r2, #26
 810333c:	d403      	bmi.n	8103346 <HAL_DMA_IRQHandler+0x5b2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810333e:	681a      	ldr	r2, [r3, #0]
 8103340:	f022 0204 	bic.w	r2, r2, #4
 8103344:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8103346:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 810334a:	2b00      	cmp	r3, #0
 810334c:	f47f ae47 	bne.w	8102fde <HAL_DMA_IRQHandler+0x24a>
 8103350:	e58f      	b.n	8102e72 <HAL_DMA_IRQHandler+0xde>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103352:	f012 0220 	ands.w	r2, r2, #32
 8103356:	d108      	bne.n	810336a <HAL_DMA_IRQHandler+0x5d6>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103358:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 810335a:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810335c:	f021 010a 	bic.w	r1, r1, #10
 8103360:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8103362:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8103366:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 810336a:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 810336e:	2b00      	cmp	r3, #0
 8103370:	f47f ae35 	bne.w	8102fde <HAL_DMA_IRQHandler+0x24a>
 8103374:	e57d      	b.n	8102e72 <HAL_DMA_IRQHandler+0xde>
 8103376:	bf00      	nop

08103378 <HAL_DMA_GetState>:
  return hdma->State;
 8103378:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 810337c:	4770      	bx	lr
 810337e:	bf00      	nop

08103380 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8103380:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8103382:	4770      	bx	lr

08103384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103388:	680d      	ldr	r5, [r1, #0]
{
 810338a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810338c:	2d00      	cmp	r5, #0
 810338e:	f000 80b1 	beq.w	81034f4 <HAL_GPIO_Init+0x170>
 8103392:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103396:	4f93      	ldr	r7, [pc, #588]	; (81035e4 <HAL_GPIO_Init+0x260>)
  uint32_t position = 0x00U;
 8103398:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810339a:	2201      	movs	r2, #1
 810339c:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 810339e:	ea12 0e05 	ands.w	lr, r2, r5
 81033a2:	f000 80a0 	beq.w	81034e6 <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81033a6:	684c      	ldr	r4, [r1, #4]
 81033a8:	f024 0810 	bic.w	r8, r4, #16
 81033ac:	f108 36ff 	add.w	r6, r8, #4294967295
 81033b0:	2e01      	cmp	r6, #1
 81033b2:	f240 80a2 	bls.w	81034fa <HAL_GPIO_Init+0x176>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81033b6:	688a      	ldr	r2, [r1, #8]
      temp = GPIOx->PUPDR;
 81033b8:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81033bc:	fa02 f60c 	lsl.w	r6, r2, ip
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81033c0:	2203      	movs	r2, #3
 81033c2:	fa02 f20c 	lsl.w	r2, r2, ip
 81033c6:	ea28 0802 	bic.w	r8, r8, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81033ca:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->PUPDR = temp;
 81033ce:	60c6      	str	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81033d0:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 81033d2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81033d4:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81033d6:	f004 0203 	and.w	r2, r4, #3
 81033da:	fa02 f20c 	lsl.w	r2, r2, ip
 81033de:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 81033e0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81033e2:	00e2      	lsls	r2, r4, #3
 81033e4:	d57f      	bpl.n	81034e6 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81033e6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 81033ea:	f042 0202 	orr.w	r2, r2, #2
 81033ee:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 81033f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 81033f6:	f002 0202 	and.w	r2, r2, #2
 81033fa:	9201      	str	r2, [sp, #4]
 81033fc:	9a01      	ldr	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 81033fe:	f023 0203 	bic.w	r2, r3, #3
 8103402:	f102 42b0 	add.w	r2, r2, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103406:	f003 0903 	and.w	r9, r3, #3
 810340a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 810340e:	260f      	movs	r6, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8103410:	f8d2 8408 	ldr.w	r8, [r2, #1032]	; 0x408
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103414:	fa06 f609 	lsl.w	r6, r6, r9
 8103418:	ea28 0a06 	bic.w	sl, r8, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810341c:	4e72      	ldr	r6, [pc, #456]	; (81035e8 <HAL_GPIO_Init+0x264>)
 810341e:	42b0      	cmp	r0, r6
 8103420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8103424:	d02d      	beq.n	8103482 <HAL_GPIO_Init+0xfe>
 8103426:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 810342a:	42b0      	cmp	r0, r6
 810342c:	f000 80a9 	beq.w	8103582 <HAL_GPIO_Init+0x1fe>
 8103430:	4e6e      	ldr	r6, [pc, #440]	; (81035ec <HAL_GPIO_Init+0x268>)
 8103432:	42b0      	cmp	r0, r6
 8103434:	f000 80ac 	beq.w	8103590 <HAL_GPIO_Init+0x20c>
 8103438:	4e6d      	ldr	r6, [pc, #436]	; (81035f0 <HAL_GPIO_Init+0x26c>)
 810343a:	42b0      	cmp	r0, r6
 810343c:	f000 809a 	beq.w	8103574 <HAL_GPIO_Init+0x1f0>
 8103440:	4e6c      	ldr	r6, [pc, #432]	; (81035f4 <HAL_GPIO_Init+0x270>)
 8103442:	42b0      	cmp	r0, r6
 8103444:	f000 80b2 	beq.w	81035ac <HAL_GPIO_Init+0x228>
 8103448:	4e6b      	ldr	r6, [pc, #428]	; (81035f8 <HAL_GPIO_Init+0x274>)
 810344a:	42b0      	cmp	r0, r6
 810344c:	f000 80b5 	beq.w	81035ba <HAL_GPIO_Init+0x236>
 8103450:	4e6a      	ldr	r6, [pc, #424]	; (81035fc <HAL_GPIO_Init+0x278>)
 8103452:	42b0      	cmp	r0, r6
 8103454:	f000 80a3 	beq.w	810359e <HAL_GPIO_Init+0x21a>
 8103458:	4e69      	ldr	r6, [pc, #420]	; (8103600 <HAL_GPIO_Init+0x27c>)
 810345a:	42b0      	cmp	r0, r6
 810345c:	f000 80b4 	beq.w	81035c8 <HAL_GPIO_Init+0x244>
 8103460:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8103604 <HAL_GPIO_Init+0x280>
 8103464:	4540      	cmp	r0, r8
 8103466:	f000 80b6 	beq.w	81035d6 <HAL_GPIO_Init+0x252>
 810346a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8103608 <HAL_GPIO_Init+0x284>
 810346e:	4540      	cmp	r0, r8
 8103470:	bf0c      	ite	eq
 8103472:	f04f 0809 	moveq.w	r8, #9
 8103476:	f04f 080a 	movne.w	r8, #10
 810347a:	fa08 f909 	lsl.w	r9, r8, r9
 810347e:	ea4a 0a09 	orr.w	sl, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103482:	f8c2 a008 	str.w	sl, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 810348a:	03e6      	lsls	r6, r4, #15
        temp = EXTI_CurrentCPU->IMR1;
 810348c:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
        temp &= ~(iocurrent);
 8103490:	ea6f 080e 	mvn.w	r8, lr
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103494:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8103498:	bf54      	ite	pl
 810349a:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 810349e:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 81034a2:	f8c6 20c0 	str.w	r2, [r6, #192]	; 0xc0

        temp = EXTI_CurrentCPU->EMR1;
 81034a6:	f8d6 60c4 	ldr.w	r6, [r6, #196]	; 0xc4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81034aa:	03a2      	lsls	r2, r4, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81034ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 81034b0:	bf54      	ite	pl
 81034b2:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 81034b6:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI_CurrentCPU->EMR1 = temp;
 81034ba:	f8c2 60c4 	str.w	r6, [r2, #196]	; 0xc4

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81034be:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81034c0:	02e2      	lsls	r2, r4, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 81034c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 81034c6:	bf54      	ite	pl
 81034c8:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 81034cc:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->RTSR1 = temp;
 81034d0:	6016      	str	r6, [r2, #0]

        temp = EXTI->FTSR1;
 81034d2:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81034d4:	02a4      	lsls	r4, r4, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 81034d6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 81034da:	bf54      	ite	pl
 81034dc:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 81034e0:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->FTSR1 = temp;
 81034e4:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 81034e6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81034e8:	fa35 f203 	lsrs.w	r2, r5, r3
 81034ec:	f10c 0c02 	add.w	ip, ip, #2
 81034f0:	f47f af53 	bne.w	810339a <HAL_GPIO_Init+0x16>
  }
}
 81034f4:	b003      	add	sp, #12
 81034f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 81034fa:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81034fe:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103500:	f04f 0903 	mov.w	r9, #3
 8103504:	fa09 f90c 	lsl.w	r9, r9, ip
 8103508:	ea2a 0a09 	bic.w	sl, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 810350c:	fa06 f60c 	lsl.w	r6, r6, ip
 8103510:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8103514:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8103516:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103518:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810351c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8103520:	409e      	lsls	r6, r3
 8103522:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8103524:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8103526:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103528:	ea26 0a09 	bic.w	sl, r6, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810352c:	688e      	ldr	r6, [r1, #8]
 810352e:	fa06 f60c 	lsl.w	r6, r6, ip
 8103532:	ea46 060a 	orr.w	r6, r6, sl
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103536:	f1b8 0f02 	cmp.w	r8, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810353a:	ea6f 0209 	mvn.w	r2, r9
      GPIOx->PUPDR = temp;
 810353e:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103540:	f47f af47 	bne.w	81033d2 <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 8103544:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8103548:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810354c:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 810354e:	f8d8 a020 	ldr.w	sl, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103552:	f003 0907 	and.w	r9, r3, #7
 8103556:	ea4f 0989 	mov.w	r9, r9, lsl #2
 810355a:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810355e:	fa06 f609 	lsl.w	r6, r6, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103562:	fa0b f909 	lsl.w	r9, fp, r9
 8103566:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810356a:	ea46 0609 	orr.w	r6, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 810356e:	f8c8 6020 	str.w	r6, [r8, #32]
 8103572:	e72e      	b.n	81033d2 <HAL_GPIO_Init+0x4e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103574:	f04f 0803 	mov.w	r8, #3
 8103578:	fa08 f909 	lsl.w	r9, r8, r9
 810357c:	ea4a 0a09 	orr.w	sl, sl, r9
 8103580:	e77f      	b.n	8103482 <HAL_GPIO_Init+0xfe>
 8103582:	f04f 0801 	mov.w	r8, #1
 8103586:	fa08 f909 	lsl.w	r9, r8, r9
 810358a:	ea4a 0a09 	orr.w	sl, sl, r9
 810358e:	e778      	b.n	8103482 <HAL_GPIO_Init+0xfe>
 8103590:	f04f 0802 	mov.w	r8, #2
 8103594:	fa08 f909 	lsl.w	r9, r8, r9
 8103598:	ea4a 0a09 	orr.w	sl, sl, r9
 810359c:	e771      	b.n	8103482 <HAL_GPIO_Init+0xfe>
 810359e:	f04f 0806 	mov.w	r8, #6
 81035a2:	fa08 f909 	lsl.w	r9, r8, r9
 81035a6:	ea4a 0a09 	orr.w	sl, sl, r9
 81035aa:	e76a      	b.n	8103482 <HAL_GPIO_Init+0xfe>
 81035ac:	f04f 0804 	mov.w	r8, #4
 81035b0:	fa08 f909 	lsl.w	r9, r8, r9
 81035b4:	ea4a 0a09 	orr.w	sl, sl, r9
 81035b8:	e763      	b.n	8103482 <HAL_GPIO_Init+0xfe>
 81035ba:	f04f 0805 	mov.w	r8, #5
 81035be:	fa08 f909 	lsl.w	r9, r8, r9
 81035c2:	ea4a 0a09 	orr.w	sl, sl, r9
 81035c6:	e75c      	b.n	8103482 <HAL_GPIO_Init+0xfe>
 81035c8:	f04f 0807 	mov.w	r8, #7
 81035cc:	fa08 f909 	lsl.w	r9, r8, r9
 81035d0:	ea4a 0a09 	orr.w	sl, sl, r9
 81035d4:	e755      	b.n	8103482 <HAL_GPIO_Init+0xfe>
 81035d6:	f04f 0808 	mov.w	r8, #8
 81035da:	fa08 f909 	lsl.w	r9, r8, r9
 81035de:	ea4a 0a09 	orr.w	sl, sl, r9
 81035e2:	e74e      	b.n	8103482 <HAL_GPIO_Init+0xfe>
 81035e4:	58024400 	.word	0x58024400
 81035e8:	58020000 	.word	0x58020000
 81035ec:	58020800 	.word	0x58020800
 81035f0:	58020c00 	.word	0x58020c00
 81035f4:	58021000 	.word	0x58021000
 81035f8:	58021400 	.word	0x58021400
 81035fc:	58021800 	.word	0x58021800
 8103600:	58021c00 	.word	0x58021c00
 8103604:	58022000 	.word	0x58022000
 8103608:	58022400 	.word	0x58022400

0810360c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810360c:	b902      	cbnz	r2, 8103610 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810360e:	0409      	lsls	r1, r1, #16
 8103610:	6181      	str	r1, [r0, #24]
  }
}
 8103612:	4770      	bx	lr

08103614 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8103614:	4a04      	ldr	r2, [pc, #16]	; (8103628 <HAL_HSEM_FastTake+0x14>)
 8103616:	4b05      	ldr	r3, [pc, #20]	; (810362c <HAL_HSEM_FastTake+0x18>)
 8103618:	3020      	adds	r0, #32
 810361a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 810361e:	1ac0      	subs	r0, r0, r3
 8103620:	bf18      	it	ne
 8103622:	2001      	movne	r0, #1
 8103624:	4770      	bx	lr
 8103626:	bf00      	nop
 8103628:	58026400 	.word	0x58026400
 810362c:	80000100 	.word	0x80000100

08103630 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8103630:	4b02      	ldr	r3, [pc, #8]	; (810363c <HAL_HSEM_Release+0xc>)
 8103632:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8103636:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 810363a:	4770      	bx	lr
 810363c:	58026400 	.word	0x58026400

08103640 <HAL_HSEM_ActivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103640:	4a02      	ldr	r2, [pc, #8]	; (810364c <HAL_HSEM_ActivateNotification+0xc>)
 8103642:	6913      	ldr	r3, [r2, #16]
 8103644:	4318      	orrs	r0, r3
 8103646:	6110      	str	r0, [r2, #16]
#endif
}
 8103648:	4770      	bx	lr
 810364a:	bf00      	nop
 810364c:	58026500 	.word	0x58026500

08103650 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8103650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103652:	4605      	mov	r5, r0
 8103654:	460e      	mov	r6, r1
 8103656:	4617      	mov	r7, r2
 8103658:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810365a:	682c      	ldr	r4, [r5, #0]
 810365c:	d12c      	bne.n	81036b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 810365e:	69a3      	ldr	r3, [r4, #24]
 8103660:	0799      	lsls	r1, r3, #30
 8103662:	d427      	bmi.n	81036b4 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8103664:	69a3      	ldr	r3, [r4, #24]
 8103666:	06da      	lsls	r2, r3, #27
 8103668:	d5f9      	bpl.n	810365e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810366a:	69a3      	ldr	r3, [r4, #24]
 810366c:	069a      	lsls	r2, r3, #26
 810366e:	d5fc      	bpl.n	810366a <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103670:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103672:	2210      	movs	r2, #16
 8103674:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103676:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103678:	69a3      	ldr	r3, [r4, #24]
 810367a:	079f      	lsls	r7, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 810367c:	bf44      	itt	mi
 810367e:	2300      	movmi	r3, #0
 8103680:	62a3      	strmi	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8103682:	69a3      	ldr	r3, [r4, #24]
 8103684:	07de      	lsls	r6, r3, #31
 8103686:	d403      	bmi.n	8103690 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8103688:	69a3      	ldr	r3, [r4, #24]
 810368a:	f043 0301 	orr.w	r3, r3, #1
 810368e:	61a3      	str	r3, [r4, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103690:	6863      	ldr	r3, [r4, #4]
 8103692:	4919      	ldr	r1, [pc, #100]	; (81036f8 <I2C_WaitOnTXISFlagUntilTimeout+0xa8>)
 8103694:	400b      	ands	r3, r1
 8103696:	6063      	str	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8103698:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810369a:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 810369c:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810369e:	f043 0304 	orr.w	r3, r3, #4
 81036a2:	646b      	str	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81036a4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 81036a8:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81036ac:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      return HAL_ERROR;
 81036b0:	2001      	movs	r0, #1
}
 81036b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 81036b4:	2000      	movs	r0, #0
}
 81036b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81036b8:	69a3      	ldr	r3, [r4, #24]
 81036ba:	079b      	lsls	r3, r3, #30
 81036bc:	d4fa      	bmi.n	81036b4 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81036be:	69a3      	ldr	r3, [r4, #24]
 81036c0:	06d9      	lsls	r1, r3, #27
 81036c2:	d414      	bmi.n	81036ee <I2C_WaitOnTXISFlagUntilTimeout+0x9e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81036c4:	f7fe f9ac 	bl	8101a20 <HAL_GetTick>
 81036c8:	1bc0      	subs	r0, r0, r7
 81036ca:	42b0      	cmp	r0, r6
 81036cc:	d801      	bhi.n	81036d2 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 81036ce:	2e00      	cmp	r6, #0
 81036d0:	d1c2      	bne.n	8103658 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81036d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81036d4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81036d6:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 81036da:	2120      	movs	r1, #32
 81036dc:	e7e1      	b.n	81036a2 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81036de:	f7fe f99f 	bl	8101a20 <HAL_GetTick>
 81036e2:	1bc0      	subs	r0, r0, r7
 81036e4:	4286      	cmp	r6, r0
 81036e6:	d3f4      	bcc.n	81036d2 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 81036e8:	2e00      	cmp	r6, #0
 81036ea:	d0f2      	beq.n	81036d2 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81036ec:	682c      	ldr	r4, [r5, #0]
 81036ee:	69a3      	ldr	r3, [r4, #24]
 81036f0:	069b      	lsls	r3, r3, #26
 81036f2:	d5f4      	bpl.n	81036de <I2C_WaitOnTXISFlagUntilTimeout+0x8e>
 81036f4:	e7bc      	b.n	8103670 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 81036f6:	bf00      	nop
 81036f8:	fe00e800 	.word	0xfe00e800

081036fc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 81036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81036fe:	4605      	mov	r5, r0
 8103700:	4617      	mov	r7, r2
 8103702:	460e      	mov	r6, r1
 8103704:	b929      	cbnz	r1, 8103712 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8103706:	e03d      	b.n	8103784 <I2C_WaitOnSTOPFlagUntilTimeout+0x88>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103708:	f7fe f98a 	bl	8101a20 <HAL_GetTick>
 810370c:	1bc0      	subs	r0, r0, r7
 810370e:	4286      	cmp	r6, r0
 8103710:	d341      	bcc.n	8103796 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103712:	682c      	ldr	r4, [r5, #0]
 8103714:	69a3      	ldr	r3, [r4, #24]
 8103716:	0698      	lsls	r0, r3, #26
 8103718:	d443      	bmi.n	81037a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 810371a:	69a3      	ldr	r3, [r4, #24]
 810371c:	06d9      	lsls	r1, r3, #27
 810371e:	d5f3      	bpl.n	8103708 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8103720:	1c73      	adds	r3, r6, #1
 8103722:	d124      	bne.n	810376e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103724:	69a3      	ldr	r3, [r4, #24]
 8103726:	069e      	lsls	r6, r3, #26
 8103728:	d5fc      	bpl.n	8103724 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810372a:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810372c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810372e:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103730:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103732:	69a3      	ldr	r3, [r4, #24]
 8103734:	0799      	lsls	r1, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8103736:	bf44      	itt	mi
 8103738:	2300      	movmi	r3, #0
 810373a:	62a3      	strmi	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810373c:	69a3      	ldr	r3, [r4, #24]
 810373e:	07da      	lsls	r2, r3, #31
 8103740:	d403      	bmi.n	810374a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8103742:	69a3      	ldr	r3, [r4, #24]
 8103744:	f043 0301 	orr.w	r3, r3, #1
 8103748:	61a3      	str	r3, [r4, #24]
    I2C_RESET_CR2(hi2c);
 810374a:	6863      	ldr	r3, [r4, #4]
 810374c:	4916      	ldr	r1, [pc, #88]	; (81037a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>)
 810374e:	400b      	ands	r3, r1
 8103750:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8103752:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8103754:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8103756:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8103758:	f043 0304 	orr.w	r3, r3, #4
 810375c:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 810375e:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8103762:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8103766:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      return HAL_ERROR;
 810376a:	2001      	movs	r0, #1
}
 810376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810376e:	69a3      	ldr	r3, [r4, #24]
 8103770:	0698      	lsls	r0, r3, #26
 8103772:	d4da      	bmi.n	810372a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103774:	f7fe f954 	bl	8101a20 <HAL_GetTick>
 8103778:	1bc0      	subs	r0, r0, r7
 810377a:	4286      	cmp	r6, r0
 810377c:	d30b      	bcc.n	8103796 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 810377e:	b156      	cbz	r6, 8103796 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103780:	682c      	ldr	r4, [r5, #0]
 8103782:	e7cd      	b.n	8103720 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103784:	6804      	ldr	r4, [r0, #0]
 8103786:	69a3      	ldr	r3, [r4, #24]
 8103788:	069b      	lsls	r3, r3, #26
 810378a:	d40a      	bmi.n	81037a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 810378c:	69a3      	ldr	r3, [r4, #24]
 810378e:	06da      	lsls	r2, r3, #27
 8103790:	d4c6      	bmi.n	8103720 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103792:	f7fe f945 	bl	8101a20 <HAL_GetTick>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103796:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103798:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810379a:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 810379e:	2120      	movs	r1, #32
 81037a0:	e7dc      	b.n	810375c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  return HAL_OK;
 81037a2:	2000      	movs	r0, #0
}
 81037a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81037a6:	bf00      	nop
 81037a8:	fe00e800 	.word	0xfe00e800

081037ac <HAL_I2C_Init>:
  if (hi2c == NULL)
 81037ac:	2800      	cmp	r0, #0
 81037ae:	d04f      	beq.n	8103850 <HAL_I2C_Init+0xa4>
{
 81037b0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 81037b2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 81037b6:	4604      	mov	r4, r0
 81037b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 81037bc:	2b00      	cmp	r3, #0
 81037be:	d042      	beq.n	8103846 <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 81037c0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 81037c2:	2224      	movs	r2, #36	; 0x24
 81037c4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 81037c8:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81037ca:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 81037cc:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81037d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 81037d4:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81037d6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81037d8:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81037da:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81037dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81037e0:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81037e2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81037e4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81037e6:	d02a      	beq.n	810383e <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81037e8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81037ec:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81037ee:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81037f0:	bf04      	itt	eq
 81037f2:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 81037f6:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81037f8:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81037fa:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81037fc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8103800:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8103804:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8103806:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103808:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 810380a:	430a      	orrs	r2, r1
 810380c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810380e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8103812:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103816:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103818:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810381a:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 810381c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810381e:	4301      	orrs	r1, r0
 8103820:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8103822:	6819      	ldr	r1, [r3, #0]
 8103824:	f041 0101 	orr.w	r1, r1, #1
 8103828:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810382a:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 810382c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810382e:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103830:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103834:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103836:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 810383a:	4610      	mov	r0, r2
}
 810383c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810383e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103842:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103844:	e7d8      	b.n	81037f8 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8103846:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 810384a:	f7fd f9fd 	bl	8100c48 <HAL_I2C_MspInit>
 810384e:	e7b7      	b.n	81037c0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8103850:	2001      	movs	r0, #1
}
 8103852:	4770      	bx	lr

08103854 <HAL_I2C_Mem_Read>:
{
 8103854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8103858:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 810385a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 810385e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 8103862:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8103864:	2b20      	cmp	r3, #32
 8103866:	f040 80a8 	bne.w	81039ba <HAL_I2C_Mem_Read+0x166>
    if ((pData == NULL) || (Size == 0U))
 810386a:	9b08      	ldr	r3, [sp, #32]
 810386c:	4604      	mov	r4, r0
 810386e:	2b00      	cmp	r3, #0
 8103870:	f000 809d 	beq.w	81039ae <HAL_I2C_Mem_Read+0x15a>
 8103874:	f1ba 0f00 	cmp.w	sl, #0
 8103878:	f000 8099 	beq.w	81039ae <HAL_I2C_Mem_Read+0x15a>
    __HAL_LOCK(hi2c);
 810387c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8103880:	2b01      	cmp	r3, #1
 8103882:	f000 809a 	beq.w	81039ba <HAL_I2C_Mem_Read+0x166>
 8103886:	2301      	movs	r3, #1
 8103888:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 810388c:	460f      	mov	r7, r1
 810388e:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 8103890:	f7fe f8c6 	bl	8101a20 <HAL_GetTick>
 8103894:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8103896:	e004      	b.n	81038a2 <HAL_I2C_Mem_Read+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103898:	f7fe f8c2 	bl	8101a20 <HAL_GetTick>
 810389c:	1b80      	subs	r0, r0, r6
 810389e:	2819      	cmp	r0, #25
 81038a0:	d876      	bhi.n	8103990 <HAL_I2C_Mem_Read+0x13c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81038a2:	6823      	ldr	r3, [r4, #0]
 81038a4:	6998      	ldr	r0, [r3, #24]
 81038a6:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 81038aa:	d1f5      	bne.n	8103898 <HAL_I2C_Mem_Read+0x44>
    hi2c->pBuffPtr  = pData;
 81038ac:	9a08      	ldr	r2, [sp, #32]
 81038ae:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81038b0:	2222      	movs	r2, #34	; 0x22
 81038b2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81038b6:	2240      	movs	r2, #64	; 0x40
 81038b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81038bc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 81038be:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 81038c2:	685a      	ldr	r2, [r3, #4]
 81038c4:	4978      	ldr	r1, [pc, #480]	; (8103aa8 <HAL_I2C_Mem_Read+0x254>)
    hi2c->XferISR   = NULL;
 81038c6:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 81038c8:	400a      	ands	r2, r1
 81038ca:	fa5f f188 	uxtb.w	r1, r8
 81038ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 81038d2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 81038d6:	433a      	orrs	r2, r7
 81038d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 81038dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 81038e0:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81038e2:	4629      	mov	r1, r5
 81038e4:	4632      	mov	r2, r6
 81038e6:	4620      	mov	r0, r4
 81038e8:	f7ff feb2 	bl	8103650 <I2C_WaitOnTXISFlagUntilTimeout>
 81038ec:	2800      	cmp	r0, #0
 81038ee:	f040 80a7 	bne.w	8103a40 <HAL_I2C_Mem_Read+0x1ec>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81038f2:	f1b8 0f01 	cmp.w	r8, #1
 81038f6:	f040 8097 	bne.w	8103a28 <HAL_I2C_Mem_Read+0x1d4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81038fa:	6822      	ldr	r2, [r4, #0]
 81038fc:	fa5f f389 	uxtb.w	r3, r9
 8103900:	6293      	str	r3, [r2, #40]	; 0x28
 8103902:	1c68      	adds	r0, r5, #1
 8103904:	d15c      	bne.n	81039c0 <HAL_I2C_Mem_Read+0x16c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103906:	6993      	ldr	r3, [r2, #24]
 8103908:	0659      	lsls	r1, r3, #25
 810390a:	d5fc      	bpl.n	8103906 <HAL_I2C_Mem_Read+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810390c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 810390e:	b29b      	uxth	r3, r3
 8103910:	2bff      	cmp	r3, #255	; 0xff
 8103912:	d87f      	bhi.n	8103a14 <HAL_I2C_Mem_Read+0x1c0>
      hi2c->XferSize = hi2c->XferCount;
 8103914:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8103916:	4864      	ldr	r0, [pc, #400]	; (8103aa8 <HAL_I2C_Mem_Read+0x254>)
      hi2c->XferSize = hi2c->XferCount;
 8103918:	b29b      	uxth	r3, r3
 810391a:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 810391c:	b2d9      	uxtb	r1, r3
 810391e:	6853      	ldr	r3, [r2, #4]
 8103920:	4003      	ands	r3, r0
 8103922:	433b      	orrs	r3, r7
 8103924:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8103928:	f043 4302 	orr.w	r3, r3, #2181038080	; 0x82000000
 810392c:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8103930:	6053      	str	r3, [r2, #4]
 8103932:	1c68      	adds	r0, r5, #1
 8103934:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8103ab4 <HAL_I2C_Mem_Read+0x260>
 8103938:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8103ab8 <HAL_I2C_Mem_Read+0x264>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810393c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8103940:	d11c      	bne.n	810397c <HAL_I2C_Mem_Read+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103942:	6993      	ldr	r3, [r2, #24]
 8103944:	0759      	lsls	r1, r3, #29
 8103946:	d5fc      	bpl.n	8103942 <HAL_I2C_Mem_Read+0xee>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810394a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 810394c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 810394e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8103950:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8103952:	3b01      	subs	r3, #1
 8103954:	b29b      	uxth	r3, r3
 8103956:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8103958:	3201      	adds	r2, #1
      hi2c->XferSize--;
 810395a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 810395c:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810395e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8103960:	3b01      	subs	r3, #1
 8103962:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103964:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8103966:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103968:	b10a      	cbz	r2, 810396e <HAL_I2C_Mem_Read+0x11a>
 810396a:	2b00      	cmp	r3, #0
 810396c:	d03e      	beq.n	81039ec <HAL_I2C_Mem_Read+0x198>
    } while (hi2c->XferCount > 0U);
 810396e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8103970:	b29b      	uxth	r3, r3
 8103972:	2b00      	cmp	r3, #0
 8103974:	d077      	beq.n	8103a66 <HAL_I2C_Mem_Read+0x212>
 8103976:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103978:	6822      	ldr	r2, [r4, #0]
 810397a:	d0e2      	beq.n	8103942 <HAL_I2C_Mem_Read+0xee>
 810397c:	6993      	ldr	r3, [r2, #24]
 810397e:	075b      	lsls	r3, r3, #29
 8103980:	d4e2      	bmi.n	8103948 <HAL_I2C_Mem_Read+0xf4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103982:	f7fe f84d 	bl	8101a20 <HAL_GetTick>
 8103986:	1b80      	subs	r0, r0, r6
 8103988:	4285      	cmp	r5, r0
 810398a:	d301      	bcc.n	8103990 <HAL_I2C_Mem_Read+0x13c>
 810398c:	2d00      	cmp	r5, #0
 810398e:	d1f2      	bne.n	8103976 <HAL_I2C_Mem_Read+0x122>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103990:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103992:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103994:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8103998:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810399a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 810399c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 81039a0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81039a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 81039a8:	2001      	movs	r0, #1
}
 81039aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81039ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 81039b2:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 81039b4:	2001      	movs	r0, #1
}
 81039b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 81039ba:	2002      	movs	r0, #2
}
 81039bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81039c0:	6993      	ldr	r3, [r2, #24]
 81039c2:	065b      	lsls	r3, r3, #25
 81039c4:	d4a2      	bmi.n	810390c <HAL_I2C_Mem_Read+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81039c6:	f7fe f82b 	bl	8101a20 <HAL_GetTick>
 81039ca:	1b80      	subs	r0, r0, r6
 81039cc:	4285      	cmp	r5, r0
 81039ce:	d35e      	bcc.n	8103a8e <HAL_I2C_Mem_Read+0x23a>
 81039d0:	2d00      	cmp	r5, #0
 81039d2:	d05c      	beq.n	8103a8e <HAL_I2C_Mem_Read+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81039d4:	6822      	ldr	r2, [r4, #0]
 81039d6:	e794      	b.n	8103902 <HAL_I2C_Mem_Read+0xae>
 81039d8:	6993      	ldr	r3, [r2, #24]
 81039da:	061b      	lsls	r3, r3, #24
 81039dc:	d40c      	bmi.n	81039f8 <HAL_I2C_Mem_Read+0x1a4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81039de:	f7fe f81f 	bl	8101a20 <HAL_GetTick>
 81039e2:	1b80      	subs	r0, r0, r6
 81039e4:	4285      	cmp	r5, r0
 81039e6:	d3d3      	bcc.n	8103990 <HAL_I2C_Mem_Read+0x13c>
 81039e8:	2d00      	cmp	r5, #0
 81039ea:	d0d1      	beq.n	8103990 <HAL_I2C_Mem_Read+0x13c>
 81039ec:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81039ee:	6822      	ldr	r2, [r4, #0]
 81039f0:	d1f2      	bne.n	81039d8 <HAL_I2C_Mem_Read+0x184>
 81039f2:	6993      	ldr	r3, [r2, #24]
 81039f4:	0619      	lsls	r1, r3, #24
 81039f6:	d5fc      	bpl.n	81039f2 <HAL_I2C_Mem_Read+0x19e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81039f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 81039fa:	b29b      	uxth	r3, r3
 81039fc:	2bff      	cmp	r3, #255	; 0xff
 81039fe:	d924      	bls.n	8103a4a <HAL_I2C_Mem_Read+0x1f6>
  MODIFY_REG(hi2c->Instance->CR2,
 8103a00:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103a02:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8103a06:	ea03 0308 	and.w	r3, r3, r8
 8103a0a:	433b      	orrs	r3, r7
 8103a0c:	ea43 030a 	orr.w	r3, r3, sl
 8103a10:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8103a12:	e7ac      	b.n	810396e <HAL_I2C_Mem_Read+0x11a>
  MODIFY_REG(hi2c->Instance->CR2,
 8103a14:	6853      	ldr	r3, [r2, #4]
 8103a16:	4924      	ldr	r1, [pc, #144]	; (8103aa8 <HAL_I2C_Mem_Read+0x254>)
 8103a18:	400b      	ands	r3, r1
 8103a1a:	4924      	ldr	r1, [pc, #144]	; (8103aac <HAL_I2C_Mem_Read+0x258>)
 8103a1c:	433b      	orrs	r3, r7
 8103a1e:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103a20:	23ff      	movs	r3, #255	; 0xff
 8103a22:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8103a24:	6051      	str	r1, [r2, #4]
}
 8103a26:	e784      	b.n	8103932 <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8103a28:	6823      	ldr	r3, [r4, #0]
 8103a2a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8103a2e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103a30:	4629      	mov	r1, r5
 8103a32:	4632      	mov	r2, r6
 8103a34:	4620      	mov	r0, r4
 8103a36:	f7ff fe0b 	bl	8103650 <I2C_WaitOnTXISFlagUntilTimeout>
 8103a3a:	2800      	cmp	r0, #0
 8103a3c:	f43f af5d 	beq.w	81038fa <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 8103a40:	2300      	movs	r3, #0
 8103a42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8103a46:	2001      	movs	r0, #1
 8103a48:	e7b5      	b.n	81039b6 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = hi2c->XferCount;
 8103a4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8103a4c:	b29b      	uxth	r3, r3
 8103a4e:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8103a50:	b2d9      	uxtb	r1, r3
 8103a52:	6853      	ldr	r3, [r2, #4]
 8103a54:	ea03 0308 	and.w	r3, r3, r8
 8103a58:	433b      	orrs	r3, r7
 8103a5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8103a5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103a62:	6053      	str	r3, [r2, #4]
}
 8103a64:	e783      	b.n	810396e <HAL_I2C_Mem_Read+0x11a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103a66:	4632      	mov	r2, r6
 8103a68:	4629      	mov	r1, r5
 8103a6a:	4620      	mov	r0, r4
 8103a6c:	f7ff fe46 	bl	81036fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8103a70:	b9b8      	cbnz	r0, 8103aa2 <HAL_I2C_Mem_Read+0x24e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103a72:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8103a74:	4d0e      	ldr	r5, [pc, #56]	; (8103ab0 <HAL_I2C_Mem_Read+0x25c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103a76:	2120      	movs	r1, #32
 8103a78:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8103a7a:	685a      	ldr	r2, [r3, #4]
 8103a7c:	402a      	ands	r2, r5
 8103a7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8103a80:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8103a84:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103a88:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8103a8c:	e793      	b.n	81039b6 <HAL_I2C_Mem_Read+0x162>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103a8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103a90:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103a92:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103a94:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103a96:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103a98:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103a9c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    return HAL_ERROR;
 8103aa0:	e7ce      	b.n	8103a40 <HAL_I2C_Mem_Read+0x1ec>
      return HAL_ERROR;
 8103aa2:	2001      	movs	r0, #1
 8103aa4:	e787      	b.n	81039b6 <HAL_I2C_Mem_Read+0x162>
 8103aa6:	bf00      	nop
 8103aa8:	fc009800 	.word	0xfc009800
 8103aac:	81ff2400 	.word	0x81ff2400
 8103ab0:	fe00e800 	.word	0xfe00e800
 8103ab4:	fc009c00 	.word	0xfc009c00
 8103ab8:	01ff0000 	.word	0x01ff0000

08103abc <HAL_I2C_Mem_Write_DMA>:
{
 8103abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8103ac0:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8103ac2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8103ac6:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8103aca:	2b20      	cmp	r3, #32
 8103acc:	f040 80a3 	bne.w	8103c16 <HAL_I2C_Mem_Write_DMA+0x15a>
    if ((pData == NULL) || (Size == 0U))
 8103ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8103ad2:	4604      	mov	r4, r0
 8103ad4:	2b00      	cmp	r3, #0
 8103ad6:	f000 8098 	beq.w	8103c0a <HAL_I2C_Mem_Write_DMA+0x14e>
 8103ada:	f1b9 0f00 	cmp.w	r9, #0
 8103ade:	f000 8094 	beq.w	8103c0a <HAL_I2C_Mem_Write_DMA+0x14e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8103ae2:	6803      	ldr	r3, [r0, #0]
 8103ae4:	699b      	ldr	r3, [r3, #24]
 8103ae6:	f413 4800 	ands.w	r8, r3, #32768	; 0x8000
 8103aea:	f040 8094 	bne.w	8103c16 <HAL_I2C_Mem_Write_DMA+0x15a>
    __HAL_LOCK(hi2c);
 8103aee:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8103af2:	2b01      	cmp	r3, #1
 8103af4:	f000 808f 	beq.w	8103c16 <HAL_I2C_Mem_Write_DMA+0x15a>
 8103af8:	2301      	movs	r3, #1
 8103afa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8103afe:	4615      	mov	r5, r2
    tickstart = HAL_GetTick();
 8103b00:	460e      	mov	r6, r1
 8103b02:	f7fd ff8d 	bl	8101a20 <HAL_GetTick>
    hi2c->pBuffPtr    = pData;
 8103b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8103b08:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8103b0a:	2221      	movs	r2, #33	; 0x21
 8103b0c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8103b10:	4b59      	ldr	r3, [pc, #356]	; (8103c78 <HAL_I2C_Mem_Write_DMA+0x1bc>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8103b12:	2240      	movs	r2, #64	; 0x40
 8103b14:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8103b18:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8103b1c:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8103b20:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103b22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8103b24:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8103c90 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8103b28:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103b2c:	b29b      	uxth	r3, r3
 8103b2e:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8103b30:	4607      	mov	r7, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103b32:	d873      	bhi.n	8103c1c <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->XferSize = hi2c->XferCount;
 8103b34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8103b36:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8103b3a:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8103b3c:	6822      	ldr	r2, [r4, #0]
 8103b3e:	494f      	ldr	r1, [pc, #316]	; (8103c7c <HAL_I2C_Mem_Write_DMA+0x1c0>)
 8103b40:	8523      	strh	r3, [r4, #40]	; 0x28
 8103b42:	6853      	ldr	r3, [r2, #4]
 8103b44:	400b      	ands	r3, r1
 8103b46:	fa5f f18b 	uxtb.w	r1, fp
 8103b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8103b4e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8103b52:	4333      	orrs	r3, r6
 8103b54:	f043 4301 	orr.w	r3, r3, #2164260864	; 0x81000000
 8103b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8103b5c:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103b5e:	2119      	movs	r1, #25
 8103b60:	463a      	mov	r2, r7
 8103b62:	4620      	mov	r0, r4
 8103b64:	f7ff fd74 	bl	8103650 <I2C_WaitOnTXISFlagUntilTimeout>
 8103b68:	2800      	cmp	r0, #0
 8103b6a:	d163      	bne.n	8103c34 <HAL_I2C_Mem_Write_DMA+0x178>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8103b6c:	f1bb 0f01 	cmp.w	fp, #1
 8103b70:	d009      	beq.n	8103b86 <HAL_I2C_Mem_Write_DMA+0xca>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8103b72:	6823      	ldr	r3, [r4, #0]
 8103b74:	0a2a      	lsrs	r2, r5, #8
 8103b76:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103b78:	2119      	movs	r1, #25
 8103b7a:	463a      	mov	r2, r7
 8103b7c:	4620      	mov	r0, r4
 8103b7e:	f7ff fd67 	bl	8103650 <I2C_WaitOnTXISFlagUntilTimeout>
 8103b82:	2800      	cmp	r0, #0
 8103b84:	d156      	bne.n	8103c34 <HAL_I2C_Mem_Write_DMA+0x178>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8103b86:	6822      	ldr	r2, [r4, #0]
 8103b88:	b2ed      	uxtb	r5, r5
 8103b8a:	6295      	str	r5, [r2, #40]	; 0x28
 8103b8c:	e005      	b.n	8103b9a <HAL_I2C_Mem_Write_DMA+0xde>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103b8e:	f7fd ff47 	bl	8101a20 <HAL_GetTick>
 8103b92:	1bc3      	subs	r3, r0, r7
 8103b94:	2b19      	cmp	r3, #25
 8103b96:	d845      	bhi.n	8103c24 <HAL_I2C_Mem_Write_DMA+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103b98:	6822      	ldr	r2, [r4, #0]
 8103b9a:	6995      	ldr	r5, [r2, #24]
 8103b9c:	f015 0580 	ands.w	r5, r5, #128	; 0x80
 8103ba0:	d0f5      	beq.n	8103b8e <HAL_I2C_Mem_Write_DMA+0xd2>
    if (hi2c->hdmatx != NULL)
 8103ba2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8103ba4:	2800      	cmp	r0, #0
 8103ba6:	d057      	beq.n	8103c58 <HAL_I2C_Mem_Write_DMA+0x19c>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8103ba8:	4b35      	ldr	r3, [pc, #212]	; (8103c80 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8103baa:	63c3      	str	r3, [r0, #60]	; 0x3c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8103bac:	2500      	movs	r5, #0
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8103bae:	4b35      	ldr	r3, [pc, #212]	; (8103c84 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 8103bb0:	64c3      	str	r3, [r0, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8103bb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8103bb4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8103bb6:	6405      	str	r5, [r0, #64]	; 0x40
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8103bb8:	3228      	adds	r2, #40	; 0x28
      hi2c->hdmatx->XferAbortCallback = NULL;
 8103bba:	6505      	str	r5, [r0, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8103bbc:	f7fe fbca 	bl	8102354 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8103bc0:	2800      	cmp	r0, #0
 8103bc2:	d13c      	bne.n	8103c3e <HAL_I2C_Mem_Write_DMA+0x182>
  MODIFY_REG(hi2c->Instance->CR2,
 8103bc4:	6822      	ldr	r2, [r4, #0]
 8103bc6:	4930      	ldr	r1, [pc, #192]	; (8103c88 <HAL_I2C_Mem_Write_DMA+0x1cc>)
 8103bc8:	6853      	ldr	r3, [r2, #4]
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8103bca:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 8103bcc:	400b      	ands	r3, r1
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8103bce:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8103bd0:	4333      	orrs	r3, r6
 8103bd2:	b2ce      	uxtb	r6, r1
 8103bd4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8103bd8:	ea43 030a 	orr.w	r3, r3, sl
 8103bdc:	6053      	str	r3, [r2, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8103bde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 8103be0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->XferCount -= hi2c->XferSize;
 8103be4:	1a5b      	subs	r3, r3, r1
 8103be6:	b29b      	uxth	r3, r3
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8103be8:	454d      	cmp	r5, r9
      hi2c->XferCount -= hi2c->XferSize;
 8103bea:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8103bec:	d041      	beq.n	8103c72 <HAL_I2C_Mem_Write_DMA+0x1b6>
 8103bee:	4b27      	ldr	r3, [pc, #156]	; (8103c8c <HAL_I2C_Mem_Write_DMA+0x1d0>)
 8103bf0:	429d      	cmp	r5, r3
 8103bf2:	bf08      	it	eq
 8103bf4:	f04f 0890 	moveq.w	r8, #144	; 0x90
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8103bf8:	6813      	ldr	r3, [r2, #0]
 8103bfa:	ea43 0308 	orr.w	r3, r3, r8
 8103bfe:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8103c00:	6813      	ldr	r3, [r2, #0]
 8103c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8103c06:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8103c08:	e003      	b.n	8103c12 <HAL_I2C_Mem_Write_DMA+0x156>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8103c0e:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8103c10:	2001      	movs	r0, #1
}
 8103c12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8103c16:	2002      	movs	r0, #2
}
 8103c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103c1c:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8103c1e:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8103c22:	e78b      	b.n	8103b3c <HAL_I2C_Mem_Write_DMA+0x80>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103c24:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103c26:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103c28:	4313      	orrs	r3, r2
 8103c2a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103c2c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103c30:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8103c34:	2300      	movs	r3, #0
 8103c36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8103c3a:	2001      	movs	r0, #1
 8103c3c:	e7e9      	b.n	8103c12 <HAL_I2C_Mem_Write_DMA+0x156>
      hi2c->State     = HAL_I2C_STATE_READY;
 8103c3e:	2320      	movs	r3, #32
 8103c40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8103c44:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8103c48:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8103c4a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8103c4e:	f043 0310 	orr.w	r3, r3, #16
 8103c52:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8103c54:	2001      	movs	r0, #1
 8103c56:	e7dc      	b.n	8103c12 <HAL_I2C_Mem_Write_DMA+0x156>
      hi2c->State     = HAL_I2C_STATE_READY;
 8103c58:	2320      	movs	r3, #32
 8103c5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8103c5e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8103c62:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8103c64:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8103c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8103c6c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8103c6e:	2001      	movs	r0, #1
 8103c70:	e7cf      	b.n	8103c12 <HAL_I2C_Mem_Write_DMA+0x156>
 8103c72:	f04f 0890 	mov.w	r8, #144	; 0x90
 8103c76:	e7bf      	b.n	8103bf8 <HAL_I2C_Mem_Write_DMA+0x13c>
 8103c78:	ffff0000 	.word	0xffff0000
 8103c7c:	fc009800 	.word	0xfc009800
 8103c80:	08104aed 	.word	0x08104aed
 8103c84:	08104a15 	.word	0x08104a15
 8103c88:	fc009c00 	.word	0xfc009c00
 8103c8c:	081045d1 	.word	0x081045d1
 8103c90:	081047e5 	.word	0x081047e5

08103c94 <HAL_I2C_Mem_Read_DMA>:
{
 8103c94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8103c98:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8103c9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8103c9e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8103ca2:	2b20      	cmp	r3, #32
 8103ca4:	f040 80a7 	bne.w	8103df6 <HAL_I2C_Mem_Read_DMA+0x162>
    if ((pData == NULL) || (Size == 0U))
 8103ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8103caa:	4604      	mov	r4, r0
 8103cac:	2b00      	cmp	r3, #0
 8103cae:	f000 809c 	beq.w	8103dea <HAL_I2C_Mem_Read_DMA+0x156>
 8103cb2:	f1b9 0f00 	cmp.w	r9, #0
 8103cb6:	f000 8098 	beq.w	8103dea <HAL_I2C_Mem_Read_DMA+0x156>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8103cba:	6803      	ldr	r3, [r0, #0]
 8103cbc:	699b      	ldr	r3, [r3, #24]
 8103cbe:	f413 4800 	ands.w	r8, r3, #32768	; 0x8000
 8103cc2:	f040 8098 	bne.w	8103df6 <HAL_I2C_Mem_Read_DMA+0x162>
    __HAL_LOCK(hi2c);
 8103cc6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8103cca:	2b01      	cmp	r3, #1
 8103ccc:	f000 8093 	beq.w	8103df6 <HAL_I2C_Mem_Read_DMA+0x162>
 8103cd0:	2301      	movs	r3, #1
 8103cd2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8103cd6:	4615      	mov	r5, r2
    tickstart = HAL_GetTick();
 8103cd8:	460e      	mov	r6, r1
 8103cda:	f7fd fea1 	bl	8101a20 <HAL_GetTick>
    hi2c->pBuffPtr    = pData;
 8103cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8103ce0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8103ce2:	2222      	movs	r2, #34	; 0x22
 8103ce4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8103ce8:	4b5b      	ldr	r3, [pc, #364]	; (8103e58 <HAL_I2C_Mem_Read_DMA+0x1c4>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8103cea:	2240      	movs	r2, #64	; 0x40
 8103cec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8103cf0:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8103cf4:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8103cf8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103cfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8103cfc:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8103e6c <HAL_I2C_Mem_Read_DMA+0x1d8>
 8103d00:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103d04:	b29b      	uxth	r3, r3
 8103d06:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8103d08:	4607      	mov	r7, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103d0a:	d877      	bhi.n	8103dfc <HAL_I2C_Mem_Read_DMA+0x168>
      hi2c->XferSize = hi2c->XferCount;
 8103d0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8103d0e:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8103d12:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8103d14:	6822      	ldr	r2, [r4, #0]
 8103d16:	4951      	ldr	r1, [pc, #324]	; (8103e5c <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8103d18:	8523      	strh	r3, [r4, #40]	; 0x28
 8103d1a:	6853      	ldr	r3, [r2, #4]
 8103d1c:	400b      	ands	r3, r1
 8103d1e:	fa5f f18b 	uxtb.w	r1, fp
 8103d22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8103d26:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8103d2a:	4333      	orrs	r3, r6
 8103d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8103d30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8103d34:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103d36:	2119      	movs	r1, #25
 8103d38:	463a      	mov	r2, r7
 8103d3a:	4620      	mov	r0, r4
 8103d3c:	f7ff fc88 	bl	8103650 <I2C_WaitOnTXISFlagUntilTimeout>
 8103d40:	2800      	cmp	r0, #0
 8103d42:	d167      	bne.n	8103e14 <HAL_I2C_Mem_Read_DMA+0x180>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8103d44:	f1bb 0f01 	cmp.w	fp, #1
 8103d48:	d009      	beq.n	8103d5e <HAL_I2C_Mem_Read_DMA+0xca>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8103d4a:	6823      	ldr	r3, [r4, #0]
 8103d4c:	0a2a      	lsrs	r2, r5, #8
 8103d4e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8103d50:	2119      	movs	r1, #25
 8103d52:	463a      	mov	r2, r7
 8103d54:	4620      	mov	r0, r4
 8103d56:	f7ff fc7b 	bl	8103650 <I2C_WaitOnTXISFlagUntilTimeout>
 8103d5a:	2800      	cmp	r0, #0
 8103d5c:	d15a      	bne.n	8103e14 <HAL_I2C_Mem_Read_DMA+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8103d5e:	6821      	ldr	r1, [r4, #0]
 8103d60:	b2ed      	uxtb	r5, r5
 8103d62:	628d      	str	r5, [r1, #40]	; 0x28
 8103d64:	e005      	b.n	8103d72 <HAL_I2C_Mem_Read_DMA+0xde>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103d66:	f7fd fe5b 	bl	8101a20 <HAL_GetTick>
 8103d6a:	1bc3      	subs	r3, r0, r7
 8103d6c:	2b19      	cmp	r3, #25
 8103d6e:	d849      	bhi.n	8103e04 <HAL_I2C_Mem_Read_DMA+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103d70:	6821      	ldr	r1, [r4, #0]
 8103d72:	698d      	ldr	r5, [r1, #24]
 8103d74:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8103d78:	d0f5      	beq.n	8103d66 <HAL_I2C_Mem_Read_DMA+0xd2>
    if (hi2c->hdmarx != NULL)
 8103d7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8103d7c:	2800      	cmp	r0, #0
 8103d7e:	d05b      	beq.n	8103e38 <HAL_I2C_Mem_Read_DMA+0x1a4>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8103d80:	4b37      	ldr	r3, [pc, #220]	; (8103e60 <HAL_I2C_Mem_Read_DMA+0x1cc>)
 8103d82:	63c3      	str	r3, [r0, #60]	; 0x3c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8103d84:	2500      	movs	r5, #0
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8103d86:	4b37      	ldr	r3, [pc, #220]	; (8103e64 <HAL_I2C_Mem_Read_DMA+0x1d0>)
 8103d88:	64c3      	str	r3, [r0, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8103d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8103d8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8103d8e:	6405      	str	r5, [r0, #64]	; 0x40
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8103d90:	3124      	adds	r1, #36	; 0x24
      hi2c->hdmarx->XferAbortCallback = NULL;
 8103d92:	6505      	str	r5, [r0, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8103d94:	f7fe fade 	bl	8102354 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8103d98:	2800      	cmp	r0, #0
 8103d9a:	d140      	bne.n	8103e1e <HAL_I2C_Mem_Read_DMA+0x18a>
  MODIFY_REG(hi2c->Instance->CR2,
 8103d9c:	6822      	ldr	r2, [r4, #0]
 8103d9e:	492f      	ldr	r1, [pc, #188]	; (8103e5c <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8103da0:	6853      	ldr	r3, [r2, #4]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8103da2:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 8103da4:	400b      	ands	r3, r1
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8103da6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8103da8:	ea4a 0606 	orr.w	r6, sl, r6
 8103dac:	4333      	orrs	r3, r6
 8103dae:	b2ce      	uxtb	r6, r1
 8103db0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8103db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8103db8:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8103dbc:	6053      	str	r3, [r2, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8103dbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 8103dc0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->XferCount -= hi2c->XferSize;
 8103dc4:	1a5b      	subs	r3, r3, r1
 8103dc6:	b29b      	uxth	r3, r3
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8103dc8:	454d      	cmp	r5, r9
      hi2c->XferCount -= hi2c->XferSize;
 8103dca:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8103dcc:	d041      	beq.n	8103e52 <HAL_I2C_Mem_Read_DMA+0x1be>
 8103dce:	4b26      	ldr	r3, [pc, #152]	; (8103e68 <HAL_I2C_Mem_Read_DMA+0x1d4>)
 8103dd0:	429d      	cmp	r5, r3
 8103dd2:	bf08      	it	eq
 8103dd4:	f04f 0890 	moveq.w	r8, #144	; 0x90
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8103dd8:	6813      	ldr	r3, [r2, #0]
 8103dda:	ea43 0308 	orr.w	r3, r3, r8
 8103dde:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8103de0:	6813      	ldr	r3, [r2, #0]
 8103de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8103de6:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8103de8:	e003      	b.n	8103df2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8103dee:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8103df0:	2001      	movs	r0, #1
}
 8103df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8103df6:	2002      	movs	r0, #2
}
 8103df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103dfc:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8103dfe:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8103e02:	e787      	b.n	8103d14 <HAL_I2C_Mem_Read_DMA+0x80>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103e04:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103e06:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103e08:	4313      	orrs	r3, r2
 8103e0a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103e0c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103e10:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8103e14:	2300      	movs	r3, #0
 8103e16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8103e1a:	2001      	movs	r0, #1
 8103e1c:	e7e9      	b.n	8103df2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8103e1e:	2320      	movs	r3, #32
 8103e20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8103e24:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8103e28:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8103e2a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8103e2e:	f043 0310 	orr.w	r3, r3, #16
 8103e32:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8103e34:	2001      	movs	r0, #1
 8103e36:	e7dc      	b.n	8103df2 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8103e38:	2320      	movs	r3, #32
 8103e3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8103e3e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8103e42:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8103e44:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8103e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8103e4c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8103e4e:	2001      	movs	r0, #1
 8103e50:	e7cf      	b.n	8103df2 <HAL_I2C_Mem_Read_DMA+0x15e>
 8103e52:	f04f 0890 	mov.w	r8, #144	; 0x90
 8103e56:	e7bf      	b.n	8103dd8 <HAL_I2C_Mem_Read_DMA+0x144>
 8103e58:	ffff0000 	.word	0xffff0000
 8103e5c:	fc009800 	.word	0xfc009800
 8103e60:	08104b7d 	.word	0x08104b7d
 8103e64:	08104a15 	.word	0x08104a15
 8103e68:	081045d1 	.word	0x081045d1
 8103e6c:	081047e5 	.word	0x081047e5

08103e70 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8103e70:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8103e72:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8103e74:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8103e76:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8103e78:	b103      	cbz	r3, 8103e7c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8103e7a:	4718      	bx	r3
}
 8103e7c:	4770      	bx	lr
 8103e7e:	bf00      	nop

08103e80 <HAL_I2C_MasterTxCpltCallback>:
 8103e80:	4770      	bx	lr
 8103e82:	bf00      	nop

08103e84 <HAL_I2C_MasterRxCpltCallback>:
 8103e84:	4770      	bx	lr
 8103e86:	bf00      	nop

08103e88 <HAL_I2C_SlaveTxCpltCallback>:
 8103e88:	4770      	bx	lr
 8103e8a:	bf00      	nop

08103e8c <HAL_I2C_SlaveRxCpltCallback>:
 8103e8c:	4770      	bx	lr
 8103e8e:	bf00      	nop

08103e90 <I2C_ITSlaveSeqCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8103e90:	6801      	ldr	r1, [r0, #0]
{
 8103e92:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8103e94:	680b      	ldr	r3, [r1, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103e96:	2200      	movs	r2, #0
 8103e98:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8103e9c:	045a      	lsls	r2, r3, #17
 8103e9e:	d524      	bpl.n	8103eea <I2C_ITSlaveSeqCplt+0x5a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8103ea0:	680b      	ldr	r3, [r1, #0]
 8103ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8103ea6:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8103ea8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8103eac:	2b29      	cmp	r3, #41	; 0x29
 8103eae:	d026      	beq.n	8103efe <I2C_ITSlaveSeqCplt+0x6e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8103eb0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8103eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8103eb6:	d000      	beq.n	8103eba <I2C_ITSlaveSeqCplt+0x2a>
}
 8103eb8:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8103eba:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8103ebc:	2322      	movs	r3, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8103ebe:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8103ec2:	6303      	str	r3, [r0, #48]	; 0x30
  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8103ec4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8103ec8:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8103eca:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8103ece:	2a28      	cmp	r2, #40	; 0x28
 8103ed0:	bf0c      	ite	eq
 8103ed2:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 8103ed6:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8103eda:	4013      	ands	r3, r2
    __HAL_UNLOCK(hi2c);
 8103edc:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8103ede:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8103ee0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8103ee4:	f7ff ffd2 	bl	8103e8c <HAL_I2C_SlaveRxCpltCallback>
}
 8103ee8:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8103eea:	041b      	lsls	r3, r3, #16
 8103eec:	d5dc      	bpl.n	8103ea8 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8103eee:	680b      	ldr	r3, [r1, #0]
 8103ef0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103ef4:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8103ef6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8103efa:	2b29      	cmp	r3, #41	; 0x29
 8103efc:	d1d8      	bne.n	8103eb0 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8103efe:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8103f00:	2321      	movs	r3, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8103f02:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8103f06:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8103f08:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8103f0c:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8103f0e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8103f12:	2a28      	cmp	r2, #40	; 0x28
 8103f14:	bf0c      	ite	eq
 8103f16:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8103f1a:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8103f1e:	4013      	ands	r3, r2
    __HAL_UNLOCK(hi2c);
 8103f20:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8103f22:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8103f24:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8103f28:	f7ff ffae 	bl	8103e88 <HAL_I2C_SlaveTxCpltCallback>
}
 8103f2c:	bd08      	pop	{r3, pc}
 8103f2e:	bf00      	nop

08103f30 <HAL_I2C_AddrCallback>:
}
 8103f30:	4770      	bx	lr
 8103f32:	bf00      	nop

08103f34 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8103f34:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8103f36:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103f38:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8103f3a:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8103f3c:	69a2      	ldr	r2, [r4, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8103f3e:	68a5      	ldr	r5, [r4, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8103f40:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8103f42:	0c12      	lsrs	r2, r2, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103f44:	2b02      	cmp	r3, #2
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8103f46:	4684      	mov	ip, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8103f48:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8103f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103f50:	d10f      	bne.n	8103f72 <I2C_ITAddrCplt.part.0+0x3e>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8103f52:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
 8103f56:	f013 0306 	ands.w	r3, r3, #6
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8103f5a:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8103f5e:	d106      	bne.n	8103f6e <I2C_ITAddrCplt.part.0+0x3a>
        hi2c->AddrEventCount++;
 8103f60:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8103f62:	3501      	adds	r5, #1
 8103f64:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8103f66:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8103f68:	2d02      	cmp	r5, #2
 8103f6a:	d00c      	beq.n	8103f86 <I2C_ITAddrCplt.part.0+0x52>
}
 8103f6c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8103f6e:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8103f72:	6823      	ldr	r3, [r4, #0]
 8103f74:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8103f78:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8103f7a:	2300      	movs	r3, #0
 8103f7c:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8103f80:	f7ff ffd6 	bl	8103f30 <HAL_I2C_AddrCallback>
}
 8103f84:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8103f86:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 8103f88:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8103f8a:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 8103f8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8103f90:	f7ff ffce 	bl	8103f30 <HAL_I2C_AddrCallback>
}
 8103f94:	bd70      	pop	{r4, r5, r6, pc}
 8103f96:	bf00      	nop

08103f98 <HAL_I2C_ListenCpltCallback>:
 8103f98:	4770      	bx	lr
 8103f9a:	bf00      	nop

08103f9c <HAL_I2C_ErrorCallback>:
 8103f9c:	4770      	bx	lr
 8103f9e:	bf00      	nop

08103fa0 <HAL_I2C_AbortCpltCallback>:
 8103fa0:	4770      	bx	lr
 8103fa2:	bf00      	nop

08103fa4 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8103fa4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8103fa6:	b508      	push	{r3, lr}
  if (hi2c->hdmatx != NULL)
 8103fa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8103faa:	b10b      	cbz	r3, 8103fb0 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8103fac:	2200      	movs	r2, #0
 8103fae:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8103fb0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8103fb2:	b10b      	cbz	r3, 8103fb8 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8103fb4:	2200      	movs	r2, #0
 8103fb6:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8103fb8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8103fbc:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8103fbe:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8103fc2:	d005      	beq.n	8103fd0 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8103fc4:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8103fc6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8103fca:	f7ff ffe7 	bl	8103f9c <HAL_I2C_ErrorCallback>
}
 8103fce:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8103fd0:	2220      	movs	r2, #32
 8103fd2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8103fd6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8103fda:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8103fdc:	f7ff ffe0 	bl	8103fa0 <HAL_I2C_AbortCpltCallback>
}
 8103fe0:	bd08      	pop	{r3, pc}
 8103fe2:	bf00      	nop

08103fe4 <I2C_ITError>:
{
 8103fe4:	b510      	push	{r4, lr}
 8103fe6:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8103fe8:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8103fea:	484a      	ldr	r0, [pc, #296]	; (8104114 <I2C_ITError+0x130>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8103fec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8103ff0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8103ff4:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8103ff6:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8103ff8:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8103ffa:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8103ffc:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8103ffe:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8104000:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8104002:	d864      	bhi.n	81040ce <I2C_ITError+0xea>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104004:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104008:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810400c:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810400e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8104012:	2a28      	cmp	r2, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104014:	f000 0028 	and.w	r0, r0, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104018:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810401a:	bf14      	ite	ne
 810401c:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 8104020:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104024:	2828      	cmp	r0, #40	; 0x28
 8104026:	bf18      	it	ne
 8104028:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810402c:	400a      	ands	r2, r1
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 810402e:	483a      	ldr	r0, [pc, #232]	; (8104118 <I2C_ITError+0x134>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104030:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8104032:	2128      	movs	r1, #40	; 0x28
 8104034:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8104038:	6360      	str	r0, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 810403a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 810403c:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 810403e:	b118      	cbz	r0, 8104048 <I2C_ITError+0x64>
 8104040:	2a11      	cmp	r2, #17
 8104042:	d014      	beq.n	810406e <I2C_ITError+0x8a>
 8104044:	2a21      	cmp	r2, #33	; 0x21
 8104046:	d012      	beq.n	810406e <I2C_ITError+0x8a>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8104048:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 810404a:	b118      	cbz	r0, 8104054 <I2C_ITError+0x70>
 810404c:	2a12      	cmp	r2, #18
 810404e:	d024      	beq.n	810409a <I2C_ITError+0xb6>
 8104050:	2a22      	cmp	r2, #34	; 0x22
 8104052:	d022      	beq.n	810409a <I2C_ITError+0xb6>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8104054:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8104058:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 810405a:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 810405e:	d04e      	beq.n	81040fe <I2C_ITError+0x11a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8104060:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8104062:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8104066:	4620      	mov	r0, r4
 8104068:	f7ff ff98 	bl	8103f9c <HAL_I2C_ErrorCallback>
}
 810406c:	bd10      	pop	{r4, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 810406e:	681a      	ldr	r2, [r3, #0]
 8104070:	0451      	lsls	r1, r2, #17
 8104072:	d43f      	bmi.n	81040f4 <I2C_ITError+0x110>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8104074:	f7ff f980 	bl	8103378 <HAL_DMA_GetState>
 8104078:	2801      	cmp	r0, #1
 810407a:	d0eb      	beq.n	8104054 <I2C_ITError+0x70>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 810407c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 810407e:	4a27      	ldr	r2, [pc, #156]	; (810411c <I2C_ITError+0x138>)
 8104080:	6502      	str	r2, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8104082:	2300      	movs	r3, #0
 8104084:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8104088:	f7fe fdee 	bl	8102c68 <HAL_DMA_Abort_IT>
 810408c:	2800      	cmp	r0, #0
 810408e:	d0ed      	beq.n	810406c <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8104090:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8104092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8104096:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8104098:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 810409a:	681a      	ldr	r2, [r3, #0]
 810409c:	0412      	lsls	r2, r2, #16
 810409e:	d503      	bpl.n	81040a8 <I2C_ITError+0xc4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 81040a0:	681a      	ldr	r2, [r3, #0]
 81040a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81040a6:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 81040a8:	f7ff f966 	bl	8103378 <HAL_DMA_GetState>
 81040ac:	2801      	cmp	r0, #1
 81040ae:	d0d1      	beq.n	8104054 <I2C_ITError+0x70>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 81040b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 81040b2:	4a1a      	ldr	r2, [pc, #104]	; (810411c <I2C_ITError+0x138>)
 81040b4:	6502      	str	r2, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 81040b6:	2300      	movs	r3, #0
 81040b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 81040bc:	f7fe fdd4 	bl	8102c68 <HAL_DMA_Abort_IT>
 81040c0:	2800      	cmp	r0, #0
 81040c2:	d0d3      	beq.n	810406c <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 81040c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 81040c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 81040ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 81040cc:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81040ce:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81040d0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81040d4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81040d8:	681a      	ldr	r2, [r3, #0]
 81040da:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 81040de:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 81040e0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 81040e4:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 81040e6:	bf1c      	itt	ne
 81040e8:	2220      	movne	r2, #32
 81040ea:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 81040ee:	2200      	movs	r2, #0
 81040f0:	6362      	str	r2, [r4, #52]	; 0x34
 81040f2:	e7a2      	b.n	810403a <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81040f4:	681a      	ldr	r2, [r3, #0]
 81040f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81040fa:	601a      	str	r2, [r3, #0]
 81040fc:	e7ba      	b.n	8104074 <I2C_ITError+0x90>
    hi2c->State = HAL_I2C_STATE_READY;
 81040fe:	2220      	movs	r2, #32
 8104100:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8104104:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8104108:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 810410a:	4620      	mov	r0, r4
 810410c:	f7ff ff48 	bl	8103fa0 <HAL_I2C_AbortCpltCallback>
}
 8104110:	bd10      	pop	{r4, pc}
 8104112:	bf00      	nop
 8104114:	ffff0000 	.word	0xffff0000
 8104118:	0810430d 	.word	0x0810430d
 810411c:	08103fa5 	.word	0x08103fa5

08104120 <I2C_ITSlaveCplt>:
{
 8104120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8104122:	6803      	ldr	r3, [r0, #0]
{
 8104124:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8104126:	6819      	ldr	r1, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8104128:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 810412c:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
{
 8104130:	4604      	mov	r4, r0
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8104132:	2a21      	cmp	r2, #33	; 0x21
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104134:	f04f 0020 	mov.w	r0, #32
 8104138:	61d8      	str	r0, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 810413a:	d072      	beq.n	8104222 <I2C_ITSlaveCplt+0x102>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 810413c:	2a22      	cmp	r2, #34	; 0x22
 810413e:	f000 809b 	beq.w	8104278 <I2C_ITSlaveCplt+0x158>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8104142:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8104144:	486e      	ldr	r0, [pc, #440]	; (8104300 <I2C_ITSlaveCplt+0x1e0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8104146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810414a:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 810414c:	685a      	ldr	r2, [r3, #4]
 810414e:	4002      	ands	r2, r0
 8104150:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104152:	699a      	ldr	r2, [r3, #24]
 8104154:	0797      	lsls	r7, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8104156:	bf44      	itt	mi
 8104158:	2200      	movmi	r2, #0
 810415a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810415c:	699a      	ldr	r2, [r3, #24]
 810415e:	07d6      	lsls	r6, r2, #31
 8104160:	d403      	bmi.n	810416a <I2C_ITSlaveCplt+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104162:	699a      	ldr	r2, [r3, #24]
 8104164:	f042 0201 	orr.w	r2, r2, #1
 8104168:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 810416a:	0448      	lsls	r0, r1, #17
 810416c:	d561      	bpl.n	8104232 <I2C_ITSlaveCplt+0x112>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810416e:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8104170:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8104172:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8104176:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8104178:	b329      	cbz	r1, 81041c6 <I2C_ITSlaveCplt+0xa6>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 810417a:	680a      	ldr	r2, [r1, #0]
 810417c:	4961      	ldr	r1, [pc, #388]	; (8104304 <I2C_ITSlaveCplt+0x1e4>)
 810417e:	428a      	cmp	r2, r1
 8104180:	d01e      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 8104182:	3118      	adds	r1, #24
 8104184:	428a      	cmp	r2, r1
 8104186:	d01b      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 8104188:	3118      	adds	r1, #24
 810418a:	428a      	cmp	r2, r1
 810418c:	d018      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 810418e:	3118      	adds	r1, #24
 8104190:	428a      	cmp	r2, r1
 8104192:	d015      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 8104194:	3118      	adds	r1, #24
 8104196:	428a      	cmp	r2, r1
 8104198:	d012      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 810419a:	3118      	adds	r1, #24
 810419c:	428a      	cmp	r2, r1
 810419e:	d00f      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 81041a0:	3118      	adds	r1, #24
 81041a2:	428a      	cmp	r2, r1
 81041a4:	d00c      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 81041a6:	3118      	adds	r1, #24
 81041a8:	428a      	cmp	r2, r1
 81041aa:	d009      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 81041ac:	f501 7156 	add.w	r1, r1, #856	; 0x358
 81041b0:	428a      	cmp	r2, r1
 81041b2:	d005      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 81041b4:	3118      	adds	r1, #24
 81041b6:	428a      	cmp	r2, r1
 81041b8:	d002      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 81041ba:	3118      	adds	r1, #24
 81041bc:	428a      	cmp	r2, r1
 81041be:	d0ff      	beq.n	81041c0 <I2C_ITSlaveCplt+0xa0>
 81041c0:	6852      	ldr	r2, [r2, #4]
 81041c2:	b292      	uxth	r2, r2
 81041c4:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 81041c6:	076a      	lsls	r2, r5, #29
 81041c8:	d50a      	bpl.n	81041e0 <I2C_ITSlaveCplt+0xc0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81041ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 81041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81041ce:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 81041d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 81041d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 81041d4:	3301      	adds	r3, #1
    tmpITFlags &= ~I2C_FLAG_RXNE;
 81041d6:	f025 0504 	bic.w	r5, r5, #4
    hi2c->pBuffPtr++;
 81041da:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 81041dc:	2a00      	cmp	r2, #0
 81041de:	d144      	bne.n	810426a <I2C_ITSlaveCplt+0x14a>
  if (hi2c->XferCount != 0U)
 81041e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 81041e2:	b29b      	uxth	r3, r3
 81041e4:	b11b      	cbz	r3, 81041ee <I2C_ITSlaveCplt+0xce>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81041e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 81041e8:	f043 0304 	orr.w	r3, r3, #4
 81041ec:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81041ee:	2700      	movs	r7, #0
 81041f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 81041f4:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 81041f6:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 81041f8:	2e00      	cmp	r6, #0
 81041fa:	d145      	bne.n	8104288 <I2C_ITSlaveCplt+0x168>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 81041fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 81041fe:	4d42      	ldr	r5, [pc, #264]	; (8104308 <I2C_ITSlaveCplt+0x1e8>)
 8104200:	42ab      	cmp	r3, r5
 8104202:	d124      	bne.n	810424e <I2C_ITSlaveCplt+0x12e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8104204:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8104208:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810420c:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 810420e:	f04f 0320 	mov.w	r3, #32
 8104212:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8104216:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8104218:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810421a:	d06d      	beq.n	81042f8 <I2C_ITSlaveCplt+0x1d8>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 810421c:	f7ff fe34 	bl	8103e88 <HAL_I2C_SlaveTxCpltCallback>
}
 8104220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104222:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104226:	6818      	ldr	r0, [r3, #0]
 8104228:	f020 00fa 	bic.w	r0, r0, #250	; 0xfa
 810422c:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 810422e:	6322      	str	r2, [r4, #48]	; 0x30
 8104230:	e787      	b.n	8104142 <I2C_ITSlaveCplt+0x22>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8104232:	0409      	lsls	r1, r1, #16
 8104234:	d5c7      	bpl.n	81041c6 <I2C_ITSlaveCplt+0xa6>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8104236:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8104238:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 810423a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810423e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8104240:	2900      	cmp	r1, #0
 8104242:	d0c0      	beq.n	81041c6 <I2C_ITSlaveCplt+0xa6>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8104244:	680a      	ldr	r2, [r1, #0]
 8104246:	492f      	ldr	r1, [pc, #188]	; (8104304 <I2C_ITSlaveCplt+0x1e4>)
 8104248:	428a      	cmp	r2, r1
 810424a:	d19a      	bne.n	8104182 <I2C_ITSlaveCplt+0x62>
 810424c:	e7b8      	b.n	81041c0 <I2C_ITSlaveCplt+0xa0>
    I2C_ITSlaveSeqCplt(hi2c);
 810424e:	4620      	mov	r0, r4
 8104250:	f7ff fe1e 	bl	8103e90 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8104254:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8104256:	62e5      	str	r5, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 8104258:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 810425c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 8104260:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8104262:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8104264:	f7ff fe98 	bl	8103f98 <HAL_I2C_ListenCpltCallback>
}
 8104268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
 810426a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 810426c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 810426e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8104270:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8104272:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8104274:	8563      	strh	r3, [r4, #42]	; 0x2a
 8104276:	e7b3      	b.n	81041e0 <I2C_ITSlaveCplt+0xc0>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104278:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810427c:	6818      	ldr	r0, [r3, #0]
 810427e:	f020 00fc 	bic.w	r0, r0, #252	; 0xfc
 8104282:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8104284:	6322      	str	r2, [r4, #48]	; 0x30
 8104286:	e75c      	b.n	8104142 <I2C_ITSlaveCplt+0x22>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8104288:	6c61      	ldr	r1, [r4, #68]	; 0x44
 810428a:	4620      	mov	r0, r4
 810428c:	f7ff feaa 	bl	8103fe4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8104290:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8104294:	2b28      	cmp	r3, #40	; 0x28
 8104296:	d1c3      	bne.n	8104220 <I2C_ITSlaveCplt+0x100>
  hi2c->State = HAL_I2C_STATE_READY;
 8104298:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810429a:	4a1b      	ldr	r2, [pc, #108]	; (8104308 <I2C_ITSlaveCplt+0x1e8>)
 810429c:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 810429e:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 81042a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 81042a4:	076b      	lsls	r3, r5, #29
  hi2c->XferISR = NULL;
 81042a6:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81042a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 81042ac:	d512      	bpl.n	81042d4 <I2C_ITSlaveCplt+0x1b4>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81042ae:	6822      	ldr	r2, [r4, #0]
 81042b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81042b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 81042b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 81042b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 81042b8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 81042ba:	3301      	adds	r3, #1
 81042bc:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 81042be:	b14a      	cbz	r2, 81042d4 <I2C_ITSlaveCplt+0x1b4>
      hi2c->XferCount--;
 81042c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 81042c2:	3b01      	subs	r3, #1
 81042c4:	b29b      	uxth	r3, r3
 81042c6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81042c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 81042ca:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81042cc:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 81042d0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81042d2:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81042d4:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81042d6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81042da:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81042de:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81042e0:	2010      	movs	r0, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81042e2:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 81042e6:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81042e8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81042ea:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 81042ec:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 81042ee:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 81042f2:	f7ff fe51 	bl	8103f98 <HAL_I2C_ListenCpltCallback>
}
 81042f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81042f8:	f7ff fdc8 	bl	8103e8c <HAL_I2C_SlaveRxCpltCallback>
}
 81042fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81042fe:	bf00      	nop
 8104300:	fe00e800 	.word	0xfe00e800
 8104304:	40020010 	.word	0x40020010
 8104308:	ffff0000 	.word	0xffff0000

0810430c <I2C_Slave_ISR_IT>:
{
 810430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 810430e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8104312:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8104314:	2b01      	cmp	r3, #1
 8104316:	d078      	beq.n	810440a <I2C_Slave_ISR_IT+0xfe>
 8104318:	4617      	mov	r7, r2
 810431a:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 810431c:	068a      	lsls	r2, r1, #26
 810431e:	4604      	mov	r4, r0
 8104320:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8104322:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8104326:	d501      	bpl.n	810432c <I2C_Slave_ISR_IT+0x20>
 8104328:	06bb      	lsls	r3, r7, #26
 810432a:	d45a      	bmi.n	81043e2 <I2C_Slave_ISR_IT+0xd6>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 810432c:	06ea      	lsls	r2, r5, #27
 810432e:	d515      	bpl.n	810435c <I2C_Slave_ISR_IT+0x50>
 8104330:	06fb      	lsls	r3, r7, #27
 8104332:	d513      	bpl.n	810435c <I2C_Slave_ISR_IT+0x50>
    if (hi2c->XferCount == 0U)
 8104334:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8104336:	b29b      	uxth	r3, r3
 8104338:	2b00      	cmp	r3, #0
 810433a:	d157      	bne.n	81043ec <I2C_Slave_ISR_IT+0xe0>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 810433c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8104340:	2a28      	cmp	r2, #40	; 0x28
 8104342:	d07c      	beq.n	810443e <I2C_Slave_ISR_IT+0x132>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8104344:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8104348:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810434a:	6823      	ldr	r3, [r4, #0]
 810434c:	f04f 0210 	mov.w	r2, #16
 8104350:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8104352:	d060      	beq.n	8104416 <I2C_Slave_ISR_IT+0x10a>
  __HAL_UNLOCK(hi2c);
 8104354:	2000      	movs	r0, #0
 8104356:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 810435a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 810435c:	076a      	lsls	r2, r5, #29
 810435e:	d40d      	bmi.n	810437c <I2C_Slave_ISR_IT+0x70>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8104360:	0728      	lsls	r0, r5, #28
 8104362:	d529      	bpl.n	81043b8 <I2C_Slave_ISR_IT+0xac>
 8104364:	0739      	lsls	r1, r7, #28
 8104366:	d527      	bpl.n	81043b8 <I2C_Slave_ISR_IT+0xac>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8104368:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 810436c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8104370:	2b28      	cmp	r3, #40	; 0x28
 8104372:	d060      	beq.n	8104436 <I2C_Slave_ISR_IT+0x12a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8104374:	6823      	ldr	r3, [r4, #0]
 8104376:	2208      	movs	r2, #8
 8104378:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 810437a:	e7eb      	b.n	8104354 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 810437c:	077b      	lsls	r3, r7, #29
 810437e:	d5ef      	bpl.n	8104360 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 8104380:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8104382:	b29b      	uxth	r3, r3
 8104384:	b16b      	cbz	r3, 81043a2 <I2C_Slave_ISR_IT+0x96>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104386:	6822      	ldr	r2, [r4, #0]
 8104388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810438a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 810438c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 810438e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8104390:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8104392:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8104394:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8104396:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8104398:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 810439a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 810439c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 810439e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 81043a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 81043a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 81043a4:	b29b      	uxth	r3, r3
 81043a6:	2b00      	cmp	r3, #0
 81043a8:	d1d4      	bne.n	8104354 <I2C_Slave_ISR_IT+0x48>
 81043aa:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 81043ae:	d0d1      	beq.n	8104354 <I2C_Slave_ISR_IT+0x48>
        I2C_ITSlaveSeqCplt(hi2c);
 81043b0:	4620      	mov	r0, r4
 81043b2:	f7ff fd6d 	bl	8103e90 <I2C_ITSlaveSeqCplt>
 81043b6:	e7cd      	b.n	8104354 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 81043b8:	07aa      	lsls	r2, r5, #30
 81043ba:	d5cb      	bpl.n	8104354 <I2C_Slave_ISR_IT+0x48>
 81043bc:	07bb      	lsls	r3, r7, #30
 81043be:	d5c9      	bpl.n	8104354 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 81043c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 81043c2:	b29b      	uxth	r3, r3
 81043c4:	b31b      	cbz	r3, 810440e <I2C_Slave_ISR_IT+0x102>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81043c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 81043c8:	6823      	ldr	r3, [r4, #0]
 81043ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 81043ce:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81043d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 81043d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 81043d4:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 81043d6:	3b01      	subs	r3, #1
 81043d8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 81043da:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 81043dc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 81043de:	8522      	strh	r2, [r4, #40]	; 0x28
 81043e0:	e7b8      	b.n	8104354 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 81043e2:	f7ff fe9d 	bl	8104120 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81043e6:	06ea      	lsls	r2, r5, #27
 81043e8:	d5b8      	bpl.n	810435c <I2C_Slave_ISR_IT+0x50>
 81043ea:	e7a1      	b.n	8104330 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81043ec:	6823      	ldr	r3, [r4, #0]
 81043ee:	2210      	movs	r2, #16
 81043f0:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81043f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 81043f4:	f043 0304 	orr.w	r3, r3, #4
 81043f8:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 81043fa:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 81043fe:	d1a9      	bne.n	8104354 <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8104400:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8104402:	4620      	mov	r0, r4
 8104404:	f7ff fdee 	bl	8103fe4 <I2C_ITError>
 8104408:	e7a4      	b.n	8104354 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 810440a:	2002      	movs	r0, #2
}
 810440c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 810440e:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8104412:	d0cd      	beq.n	81043b0 <I2C_Slave_ISR_IT+0xa4>
 8104414:	e79e      	b.n	8104354 <I2C_Slave_ISR_IT+0x48>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8104416:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 810441a:	d09b      	beq.n	8104354 <I2C_Slave_ISR_IT+0x48>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810441c:	699a      	ldr	r2, [r3, #24]
 810441e:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8104420:	bf44      	itt	mi
 8104422:	2200      	movmi	r2, #0
 8104424:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8104426:	699a      	ldr	r2, [r3, #24]
 8104428:	07d1      	lsls	r1, r2, #31
 810442a:	d4c1      	bmi.n	81043b0 <I2C_Slave_ISR_IT+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810442c:	699a      	ldr	r2, [r3, #24]
 810442e:	f042 0201 	orr.w	r2, r2, #1
 8104432:	619a      	str	r2, [r3, #24]
 8104434:	e7bc      	b.n	81043b0 <I2C_Slave_ISR_IT+0xa4>
 8104436:	4620      	mov	r0, r4
 8104438:	f7ff fd7c 	bl	8103f34 <I2C_ITAddrCplt.part.0>
 810443c:	e78a      	b.n	8104354 <I2C_Slave_ISR_IT+0x48>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 810443e:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8104442:	f47f af7f 	bne.w	8104344 <I2C_Slave_ISR_IT+0x38>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8104446:	4918      	ldr	r1, [pc, #96]	; (81044a8 <I2C_Slave_ISR_IT+0x19c>)
 8104448:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 810444a:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 810444c:	076d      	lsls	r5, r5, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 810444e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8104450:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8104452:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104456:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 810445a:	d512      	bpl.n	8104482 <I2C_Slave_ISR_IT+0x176>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810445c:	6822      	ldr	r2, [r4, #0]
 810445e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8104460:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8104462:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8104464:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8104466:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8104468:	3301      	adds	r3, #1
 810446a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 810446c:	b14a      	cbz	r2, 8104482 <I2C_Slave_ISR_IT+0x176>
      hi2c->XferCount--;
 810446e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8104470:	3b01      	subs	r3, #1
 8104472:	b29b      	uxth	r3, r3
 8104474:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104476:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 8104478:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810447a:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 810447e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104480:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104482:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104484:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104488:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810448c:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810448e:	2010      	movs	r0, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104490:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 8104494:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104496:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104498:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 810449a:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 810449c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 81044a0:	f7ff fd7a 	bl	8103f98 <HAL_I2C_ListenCpltCallback>
}
 81044a4:	e756      	b.n	8104354 <I2C_Slave_ISR_IT+0x48>
 81044a6:	bf00      	nop
 81044a8:	ffff0000 	.word	0xffff0000

081044ac <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81044ac:	6803      	ldr	r3, [r0, #0]
{
 81044ae:	b530      	push	{r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81044b0:	2220      	movs	r2, #32
 81044b2:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 81044b4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 81044b8:	2a21      	cmp	r2, #33	; 0x21
{
 81044ba:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 81044bc:	d050      	beq.n	8104560 <I2C_ITMasterCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81044be:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 81044c2:	2a22      	cmp	r2, #34	; 0x22
 81044c4:	d035      	beq.n	8104532 <I2C_ITMasterCplt+0x86>
  I2C_RESET_CR2(hi2c);
 81044c6:	685a      	ldr	r2, [r3, #4]
 81044c8:	4c3f      	ldr	r4, [pc, #252]	; (81045c8 <I2C_ITMasterCplt+0x11c>)
  hi2c->XferISR       = NULL;
 81044ca:	2500      	movs	r5, #0
  I2C_RESET_CR2(hi2c);
 81044cc:	4022      	ands	r2, r4
 81044ce:	605a      	str	r2, [r3, #4]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 81044d0:	4c3e      	ldr	r4, [pc, #248]	; (81045cc <I2C_ITMasterCplt+0x120>)
  hi2c->XferISR       = NULL;
 81044d2:	6345      	str	r5, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 81044d4:	06cd      	lsls	r5, r1, #27
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 81044d6:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 81044d8:	d505      	bpl.n	81044e6 <I2C_ITMasterCplt+0x3a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81044da:	2210      	movs	r2, #16
 81044dc:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81044de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 81044e0:	f042 0204 	orr.w	r2, r2, #4
 81044e4:	6442      	str	r2, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 81044e6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 81044ea:	2a60      	cmp	r2, #96	; 0x60
 81044ec:	d031      	beq.n	8104552 <I2C_ITMasterCplt+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81044ee:	699a      	ldr	r2, [r3, #24]
 81044f0:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 81044f2:	bf44      	itt	mi
 81044f4:	2200      	movmi	r2, #0
 81044f6:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81044f8:	699a      	ldr	r2, [r3, #24]
 81044fa:	07d2      	lsls	r2, r2, #31
 81044fc:	d403      	bmi.n	8104506 <I2C_ITMasterCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81044fe:	699a      	ldr	r2, [r3, #24]
 8104500:	f042 0201 	orr.w	r2, r2, #1
 8104504:	619a      	str	r2, [r3, #24]
  tmperror = hi2c->ErrorCode;
 8104506:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8104508:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 810450c:	2a60      	cmp	r2, #96	; 0x60
 810450e:	d00a      	beq.n	8104526 <I2C_ITMasterCplt+0x7a>
 8104510:	b94b      	cbnz	r3, 8104526 <I2C_ITMasterCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8104512:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8104516:	2a21      	cmp	r2, #33	; 0x21
 8104518:	d041      	beq.n	810459e <I2C_ITMasterCplt+0xf2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810451a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 810451e:	2a22      	cmp	r2, #34	; 0x22
 8104520:	d02e      	beq.n	8104580 <I2C_ITMasterCplt+0xd4>
}
 8104522:	b003      	add	sp, #12
 8104524:	bd30      	pop	{r4, r5, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8104526:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 8104528:	b003      	add	sp, #12
 810452a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 810452e:	f7ff bd59 	b.w	8103fe4 <I2C_ITError>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104532:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104536:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104538:	f004 0428 	and.w	r4, r4, #40	; 0x28
 810453c:	2c28      	cmp	r4, #40	; 0x28
 810453e:	bf0c      	ite	eq
 8104540:	f06f 0444 	mvneq.w	r4, #68	; 0x44
 8104544:	f06f 04f4 	mvnne.w	r4, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104548:	4022      	ands	r2, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 810454a:	2412      	movs	r4, #18
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810454c:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 810454e:	6304      	str	r4, [r0, #48]	; 0x30
 8104550:	e7b9      	b.n	81044c6 <I2C_ITMasterCplt+0x1a>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8104552:	074c      	lsls	r4, r1, #29
 8104554:	d5cb      	bpl.n	81044ee <I2C_ITMasterCplt+0x42>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8104556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104558:	b2d2      	uxtb	r2, r2
 810455a:	9201      	str	r2, [sp, #4]
    UNUSED(tmpreg);
 810455c:	9a01      	ldr	r2, [sp, #4]
 810455e:	e7c6      	b.n	81044ee <I2C_ITMasterCplt+0x42>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104560:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104564:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104566:	f004 0428 	and.w	r4, r4, #40	; 0x28
 810456a:	2c28      	cmp	r4, #40	; 0x28
 810456c:	bf0c      	ite	eq
 810456e:	f06f 0442 	mvneq.w	r4, #66	; 0x42
 8104572:	f06f 04f2 	mvnne.w	r4, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104576:	4022      	ands	r2, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8104578:	2411      	movs	r4, #17
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810457a:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 810457c:	6304      	str	r4, [r0, #48]	; 0x30
 810457e:	e7a2      	b.n	81044c6 <I2C_ITMasterCplt+0x1a>
    hi2c->State = HAL_I2C_STATE_READY;
 8104580:	2220      	movs	r2, #32
 8104582:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8104586:	6303      	str	r3, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8104588:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 810458c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8104590:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8104592:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8104596:	d014      	beq.n	81045c2 <I2C_ITMasterCplt+0x116>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8104598:	f7ff fc74 	bl	8103e84 <HAL_I2C_MasterRxCpltCallback>
}
 810459c:	e7c1      	b.n	8104522 <I2C_ITMasterCplt+0x76>
    hi2c->State = HAL_I2C_STATE_READY;
 810459e:	2220      	movs	r2, #32
 81045a0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 81045a4:	6303      	str	r3, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 81045a6:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 81045aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 81045ae:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 81045b0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 81045b4:	d002      	beq.n	81045bc <I2C_ITMasterCplt+0x110>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 81045b6:	f7ff fc63 	bl	8103e80 <HAL_I2C_MasterTxCpltCallback>
 81045ba:	e7b2      	b.n	8104522 <I2C_ITMasterCplt+0x76>
      HAL_I2C_MemTxCpltCallback(hi2c);
 81045bc:	f7fc fe3a 	bl	8101234 <HAL_I2C_MemTxCpltCallback>
 81045c0:	e7af      	b.n	8104522 <I2C_ITMasterCplt+0x76>
      HAL_I2C_MemRxCpltCallback(hi2c);
 81045c2:	f7fc fe35 	bl	8101230 <HAL_I2C_MemRxCpltCallback>
 81045c6:	e7ac      	b.n	8104522 <I2C_ITMasterCplt+0x76>
 81045c8:	fe00e800 	.word	0xfe00e800
 81045cc:	ffff0000 	.word	0xffff0000

081045d0 <I2C_Slave_ISR_DMA>:
{
 81045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 81045d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 81045d6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 81045d8:	2b01      	cmp	r3, #1
 81045da:	f000 80c2 	beq.w	8104762 <I2C_Slave_ISR_DMA+0x192>
 81045de:	4617      	mov	r7, r2
 81045e0:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81045e2:	068a      	lsls	r2, r1, #26
 81045e4:	4604      	mov	r4, r0
 81045e6:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 81045e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81045ec:	d501      	bpl.n	81045f2 <I2C_Slave_ISR_DMA+0x22>
 81045ee:	06bb      	lsls	r3, r7, #26
 81045f0:	d44b      	bmi.n	810468a <I2C_Slave_ISR_DMA+0xba>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81045f2:	06ea      	lsls	r2, r5, #27
 81045f4:	d538      	bpl.n	8104668 <I2C_Slave_ISR_DMA+0x98>
 81045f6:	06fb      	lsls	r3, r7, #27
 81045f8:	d536      	bpl.n	8104668 <I2C_Slave_ISR_DMA+0x98>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 81045fa:	0bfb      	lsrs	r3, r7, #15
 81045fc:	ea43 3297 	orr.w	r2, r3, r7, lsr #14
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8104600:	f012 0201 	ands.w	r2, r2, #1
 8104604:	f3c7 3080 	ubfx	r0, r7, #14, #1
 8104608:	d044      	beq.n	8104694 <I2C_Slave_ISR_DMA+0xc4>
      if (hi2c->hdmarx != NULL)
 810460a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 810460c:	2900      	cmp	r1, #0
 810460e:	d045      	beq.n	810469c <I2C_Slave_ISR_DMA+0xcc>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8104610:	07df      	lsls	r7, r3, #31
 8104612:	d543      	bpl.n	810469c <I2C_Slave_ISR_DMA+0xcc>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8104614:	680b      	ldr	r3, [r1, #0]
 8104616:	4971      	ldr	r1, [pc, #452]	; (81047dc <I2C_Slave_ISR_DMA+0x20c>)
 8104618:	428b      	cmp	r3, r1
 810461a:	d01e      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 810461c:	3118      	adds	r1, #24
 810461e:	428b      	cmp	r3, r1
 8104620:	d01b      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 8104622:	3118      	adds	r1, #24
 8104624:	428b      	cmp	r3, r1
 8104626:	d018      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 8104628:	3118      	adds	r1, #24
 810462a:	428b      	cmp	r3, r1
 810462c:	d015      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 810462e:	3118      	adds	r1, #24
 8104630:	428b      	cmp	r3, r1
 8104632:	d012      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 8104634:	3118      	adds	r1, #24
 8104636:	428b      	cmp	r3, r1
 8104638:	d00f      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 810463a:	3118      	adds	r1, #24
 810463c:	428b      	cmp	r3, r1
 810463e:	d00c      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 8104640:	3118      	adds	r1, #24
 8104642:	428b      	cmp	r3, r1
 8104644:	d009      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 8104646:	f501 7156 	add.w	r1, r1, #856	; 0x358
 810464a:	428b      	cmp	r3, r1
 810464c:	d005      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 810464e:	3118      	adds	r1, #24
 8104650:	428b      	cmp	r3, r1
 8104652:	d002      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 8104654:	3118      	adds	r1, #24
 8104656:	428b      	cmp	r3, r1
 8104658:	d0ff      	beq.n	810465a <I2C_Slave_ISR_DMA+0x8a>
 810465a:	685b      	ldr	r3, [r3, #4]
 810465c:	b9f3      	cbnz	r3, 810469c <I2C_Slave_ISR_DMA+0xcc>
      if (hi2c->hdmatx != NULL)
 810465e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8104660:	2b00      	cmp	r3, #0
 8104662:	d047      	beq.n	81046f4 <I2C_Slave_ISR_DMA+0x124>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8104664:	bb00      	cbnz	r0, 81046a8 <I2C_Slave_ISR_DMA+0xd8>
 8104666:	e045      	b.n	81046f4 <I2C_Slave_ISR_DMA+0x124>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8104668:	072a      	lsls	r2, r5, #28
 810466a:	d50a      	bpl.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
 810466c:	073b      	lsls	r3, r7, #28
 810466e:	d508      	bpl.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8104670:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8104674:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8104678:	2b28      	cmp	r3, #40	; 0x28
 810467a:	d074      	beq.n	8104766 <I2C_Slave_ISR_DMA+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 810467c:	6823      	ldr	r3, [r4, #0]
 810467e:	2208      	movs	r2, #8
 8104680:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8104682:	2000      	movs	r0, #0
 8104684:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8104688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
 810468a:	f7ff fd49 	bl	8104120 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 810468e:	06ea      	lsls	r2, r5, #27
 8104690:	d5ea      	bpl.n	8104668 <I2C_Slave_ISR_DMA+0x98>
 8104692:	e7b0      	b.n	81045f6 <I2C_Slave_ISR_DMA+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104694:	6823      	ldr	r3, [r4, #0]
 8104696:	2210      	movs	r2, #16
 8104698:	61da      	str	r2, [r3, #28]
 810469a:	e7f2      	b.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
      if (hi2c->hdmatx != NULL)
 810469c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 810469e:	2b00      	cmp	r3, #0
 81046a0:	d047      	beq.n	8104732 <I2C_Slave_ISR_DMA+0x162>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 81046a2:	2800      	cmp	r0, #0
 81046a4:	d045      	beq.n	8104732 <I2C_Slave_ISR_DMA+0x162>
 81046a6:	2200      	movs	r2, #0
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	494c      	ldr	r1, [pc, #304]	; (81047dc <I2C_Slave_ISR_DMA+0x20c>)
 81046ac:	428b      	cmp	r3, r1
 81046ae:	d01e      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046b0:	3118      	adds	r1, #24
 81046b2:	428b      	cmp	r3, r1
 81046b4:	d01b      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046b6:	3118      	adds	r1, #24
 81046b8:	428b      	cmp	r3, r1
 81046ba:	d018      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046bc:	3118      	adds	r1, #24
 81046be:	428b      	cmp	r3, r1
 81046c0:	d015      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046c2:	3118      	adds	r1, #24
 81046c4:	428b      	cmp	r3, r1
 81046c6:	d012      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046c8:	3118      	adds	r1, #24
 81046ca:	428b      	cmp	r3, r1
 81046cc:	d00f      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046ce:	3118      	adds	r1, #24
 81046d0:	428b      	cmp	r3, r1
 81046d2:	d00c      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046d4:	3118      	adds	r1, #24
 81046d6:	428b      	cmp	r3, r1
 81046d8:	d009      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046da:	f501 7156 	add.w	r1, r1, #856	; 0x358
 81046de:	428b      	cmp	r3, r1
 81046e0:	d005      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046e2:	3118      	adds	r1, #24
 81046e4:	428b      	cmp	r3, r1
 81046e6:	d002      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046e8:	3118      	adds	r1, #24
 81046ea:	428b      	cmp	r3, r1
 81046ec:	d0ff      	beq.n	81046ee <I2C_Slave_ISR_DMA+0x11e>
 81046ee:	685b      	ldr	r3, [r3, #4]
 81046f0:	b103      	cbz	r3, 81046f4 <I2C_Slave_ISR_DMA+0x124>
      if (treatdmanack == 1U)
 81046f2:	b1f2      	cbz	r2, 8104732 <I2C_Slave_ISR_DMA+0x162>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81046f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 81046f8:	2b28      	cmp	r3, #40	; 0x28
 81046fa:	d03a      	beq.n	8104772 <I2C_Slave_ISR_DMA+0x1a2>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81046fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8104700:	2b29      	cmp	r3, #41	; 0x29
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104702:	6823      	ldr	r3, [r4, #0]
 8104704:	f04f 0210 	mov.w	r2, #16
 8104708:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 810470a:	d1ba      	bne.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
 810470c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8104710:	d0b7      	beq.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104712:	699a      	ldr	r2, [r3, #24]
 8104714:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8104716:	bf44      	itt	mi
 8104718:	2200      	movmi	r2, #0
 810471a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810471c:	699a      	ldr	r2, [r3, #24]
 810471e:	07d1      	lsls	r1, r2, #31
 8104720:	d403      	bmi.n	810472a <I2C_Slave_ISR_DMA+0x15a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104722:	699a      	ldr	r2, [r3, #24]
 8104724:	f042 0201 	orr.w	r2, r2, #1
 8104728:	619a      	str	r2, [r3, #24]
          I2C_ITSlaveSeqCplt(hi2c);
 810472a:	4620      	mov	r0, r4
 810472c:	f7ff fbb0 	bl	8103e90 <I2C_ITSlaveSeqCplt>
 8104730:	e7a7      	b.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104732:	6823      	ldr	r3, [r4, #0]
 8104734:	2210      	movs	r2, #16
 8104736:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104738:	6c63      	ldr	r3, [r4, #68]	; 0x44
 810473a:	f043 0304 	orr.w	r3, r3, #4
 810473e:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 8104740:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8104744:	f036 7280 	bics.w	r2, r6, #16777216	; 0x1000000
        tmpstate = hi2c->State;
 8104748:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 810474a:	d19a      	bne.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 810474c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8104750:	2b21      	cmp	r3, #33	; 0x21
 8104752:	d00c      	beq.n	810476e <I2C_Slave_ISR_DMA+0x19e>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8104754:	2b22      	cmp	r3, #34	; 0x22
 8104756:	d00a      	beq.n	810476e <I2C_Slave_ISR_DMA+0x19e>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8104758:	6c61      	ldr	r1, [r4, #68]	; 0x44
 810475a:	4620      	mov	r0, r4
 810475c:	f7ff fc42 	bl	8103fe4 <I2C_ITError>
 8104760:	e78f      	b.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
  __HAL_LOCK(hi2c);
 8104762:	2002      	movs	r0, #2
}
 8104764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8104766:	4620      	mov	r0, r4
 8104768:	f7ff fbe4 	bl	8103f34 <I2C_ITAddrCplt.part.0>
 810476c:	e789      	b.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 810476e:	6323      	str	r3, [r4, #48]	; 0x30
 8104770:	e7f2      	b.n	8104758 <I2C_Slave_ISR_DMA+0x188>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8104772:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8104776:	d1c1      	bne.n	81046fc <I2C_Slave_ISR_DMA+0x12c>
  hi2c->PreviousState = I2C_STATE_NONE;
 8104778:	2300      	movs	r3, #0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 810477a:	4919      	ldr	r1, [pc, #100]	; (81047e0 <I2C_Slave_ISR_DMA+0x210>)
 810477c:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 810477e:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8104780:	076d      	lsls	r5, r5, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 8104782:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8104784:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8104786:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810478a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 810478e:	d512      	bpl.n	81047b6 <I2C_Slave_ISR_DMA+0x1e6>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104790:	6822      	ldr	r2, [r4, #0]
 8104792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8104794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8104796:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8104798:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 810479a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 810479c:	3301      	adds	r3, #1
 810479e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 81047a0:	b14a      	cbz	r2, 81047b6 <I2C_Slave_ISR_DMA+0x1e6>
      hi2c->XferCount--;
 81047a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 81047a4:	3b01      	subs	r3, #1
 81047a6:	b29b      	uxth	r3, r3
 81047a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81047aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 81047ac:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81047ae:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 81047b2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81047b4:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81047b6:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81047b8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81047bc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81047c0:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81047c2:	2010      	movs	r0, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81047c4:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 81047c8:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81047ca:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81047cc:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 81047ce:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 81047d0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 81047d4:	f7ff fbe0 	bl	8103f98 <HAL_I2C_ListenCpltCallback>
}
 81047d8:	e753      	b.n	8104682 <I2C_Slave_ISR_DMA+0xb2>
 81047da:	bf00      	nop
 81047dc:	40020010 	.word	0x40020010
 81047e0:	ffff0000 	.word	0xffff0000

081047e4 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 81047e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 81047e8:	2b01      	cmp	r3, #1
 81047ea:	f000 8084 	beq.w	81048f6 <I2C_Master_ISR_DMA+0x112>
{
 81047ee:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hi2c);
 81047f0:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81047f2:	06cd      	lsls	r5, r1, #27
 81047f4:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 81047f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81047fa:	d524      	bpl.n	8104846 <I2C_Master_ISR_DMA+0x62>
 81047fc:	06d0      	lsls	r0, r2, #27
 81047fe:	d522      	bpl.n	8104846 <I2C_Master_ISR_DMA+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104800:	6823      	ldr	r3, [r4, #0]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104802:	4881      	ldr	r0, [pc, #516]	; (8104a08 <I2C_Master_ISR_DMA+0x224>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104804:	2210      	movs	r2, #16
 8104806:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104808:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 810480a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810480c:	f041 0104 	orr.w	r1, r1, #4
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104810:	4282      	cmp	r2, r0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104812:	6461      	str	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104814:	d06d      	beq.n	81048f2 <I2C_Master_ISR_DMA+0x10e>
 8104816:	497d      	ldr	r1, [pc, #500]	; (8104a0c <I2C_Master_ISR_DMA+0x228>)
      tmpisr |= I2C_IT_STOPI;
 8104818:	428a      	cmp	r2, r1
 810481a:	bf0c      	ite	eq
 810481c:	2260      	moveq	r2, #96	; 0x60
 810481e:	2220      	movne	r2, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8104820:	6819      	ldr	r1, [r3, #0]
 8104822:	430a      	orrs	r2, r1
 8104824:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104826:	699a      	ldr	r2, [r3, #24]
 8104828:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 810482a:	bf44      	itt	mi
 810482c:	2200      	movmi	r2, #0
 810482e:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8104830:	699a      	ldr	r2, [r3, #24]
 8104832:	07d2      	lsls	r2, r2, #31
 8104834:	d403      	bmi.n	810483e <I2C_Master_ISR_DMA+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104836:	699a      	ldr	r2, [r3, #24]
 8104838:	f042 0201 	orr.w	r2, r2, #1
 810483c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(hi2c);
 810483e:	2000      	movs	r0, #0
 8104840:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8104844:	bd70      	pop	{r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8104846:	060b      	lsls	r3, r1, #24
 8104848:	d535      	bpl.n	81048b6 <I2C_Master_ISR_DMA+0xd2>
 810484a:	0656      	lsls	r6, r2, #25
 810484c:	d549      	bpl.n	81048e2 <I2C_Master_ISR_DMA+0xfe>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 810484e:	6823      	ldr	r3, [r4, #0]
 8104850:	681a      	ldr	r2, [r3, #0]
 8104852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8104856:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8104858:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 810485a:	b292      	uxth	r2, r2
 810485c:	2a00      	cmp	r2, #0
 810485e:	d04c      	beq.n	81048fa <I2C_Master_ISR_DMA+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8104860:	6858      	ldr	r0, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104862:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8104864:	b289      	uxth	r1, r1
 8104866:	29ff      	cmp	r1, #255	; 0xff
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8104868:	f3c0 0009 	ubfx	r0, r0, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810486c:	d86e      	bhi.n	810494c <I2C_Master_ISR_DMA+0x168>
        hi2c->XferSize = hi2c->XferCount;
 810486e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8104870:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8104872:	b291      	uxth	r1, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8104874:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8104878:	8521      	strh	r1, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 810487a:	f000 808f 	beq.w	810499c <I2C_Master_ISR_DMA+0x1b8>
  MODIFY_REG(hi2c->Instance->CR2,
 810487e:	fa5f fc81 	uxtb.w	ip, r1
          xfermode = hi2c->XferOptions;
 8104882:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  MODIFY_REG(hi2c->Instance->CR2,
 8104884:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8104888:	685a      	ldr	r2, [r3, #4]
 810488a:	4d61      	ldr	r5, [pc, #388]	; (8104a10 <I2C_Master_ISR_DMA+0x22c>)
 810488c:	402a      	ands	r2, r5
 810488e:	4302      	orrs	r2, r0
 8104890:	4332      	orrs	r2, r6
 8104892:	ea42 020c 	orr.w	r2, r2, ip
 8104896:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8104898:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 810489a:	1a52      	subs	r2, r2, r1
 810489c:	b292      	uxth	r2, r2
 810489e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81048a0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 81048a4:	2a22      	cmp	r2, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 81048a6:	681a      	ldr	r2, [r3, #0]
 81048a8:	bf0c      	ite	eq
 81048aa:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 81048ae:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
 81048b2:	601a      	str	r2, [r3, #0]
 81048b4:	e7c3      	b.n	810483e <I2C_Master_ISR_DMA+0x5a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 81048b6:	064d      	lsls	r5, r1, #25
 81048b8:	d513      	bpl.n	81048e2 <I2C_Master_ISR_DMA+0xfe>
 81048ba:	0650      	lsls	r0, r2, #25
 81048bc:	d511      	bpl.n	81048e2 <I2C_Master_ISR_DMA+0xfe>
    if (hi2c->XferCount == 0U)
 81048be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 81048c0:	b29b      	uxth	r3, r3
 81048c2:	2b00      	cmp	r3, #0
 81048c4:	d13d      	bne.n	8104942 <I2C_Master_ISR_DMA+0x15e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 81048c6:	6822      	ldr	r2, [r4, #0]
 81048c8:	6853      	ldr	r3, [r2, #4]
 81048ca:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 81048ce:	d1b6      	bne.n	810483e <I2C_Master_ISR_DMA+0x5a>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 81048d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 81048d2:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 81048d6:	d141      	bne.n	810495c <I2C_Master_ISR_DMA+0x178>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81048d8:	6853      	ldr	r3, [r2, #4]
 81048da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81048de:	6053      	str	r3, [r2, #4]
 81048e0:	e7ad      	b.n	810483e <I2C_Master_ISR_DMA+0x5a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81048e2:	068b      	lsls	r3, r1, #26
 81048e4:	d5ab      	bpl.n	810483e <I2C_Master_ISR_DMA+0x5a>
 81048e6:	0692      	lsls	r2, r2, #26
 81048e8:	d5a9      	bpl.n	810483e <I2C_Master_ISR_DMA+0x5a>
    I2C_ITMasterCplt(hi2c, ITFlags);
 81048ea:	4620      	mov	r0, r4
 81048ec:	f7ff fdde 	bl	81044ac <I2C_ITMasterCplt>
 81048f0:	e7a5      	b.n	810483e <I2C_Master_ISR_DMA+0x5a>
 81048f2:	2260      	movs	r2, #96	; 0x60
 81048f4:	e794      	b.n	8104820 <I2C_Master_ISR_DMA+0x3c>
  __HAL_LOCK(hi2c);
 81048f6:	2002      	movs	r0, #2
}
 81048f8:	4770      	bx	lr
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 81048fa:	685a      	ldr	r2, [r3, #4]
 81048fc:	f012 7200 	ands.w	r2, r2, #33554432	; 0x2000000
 8104900:	d11f      	bne.n	8104942 <I2C_Master_ISR_DMA+0x15e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104902:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8104906:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 810490a:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 810490c:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8104910:	d04a      	beq.n	81049a8 <I2C_Master_ISR_DMA+0x1c4>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8104912:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8104914:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8104918:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810491a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810491e:	681d      	ldr	r5, [r3, #0]
    hi2c->XferISR       = NULL;
 8104920:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104922:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8104926:	2828      	cmp	r0, #40	; 0x28
 8104928:	bf0c      	ite	eq
 810492a:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 810492e:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104932:	4029      	ands	r1, r5
 8104934:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8104936:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8104938:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 810493c:	f7ff faa2 	bl	8103e84 <HAL_I2C_MasterRxCpltCallback>
 8104940:	e77d      	b.n	810483e <I2C_Master_ISR_DMA+0x5a>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8104942:	2140      	movs	r1, #64	; 0x40
 8104944:	4620      	mov	r0, r4
 8104946:	f7ff fb4d 	bl	8103fe4 <I2C_ITError>
 810494a:	e778      	b.n	810483e <I2C_Master_ISR_DMA+0x5a>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 810494c:	22ff      	movs	r2, #255	; 0xff
 810494e:	8522      	strh	r2, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8104950:	f44f 0c7f 	mov.w	ip, #16711680	; 0xff0000
 8104954:	4611      	mov	r1, r2
 8104956:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 810495a:	e795      	b.n	8104888 <I2C_Master_ISR_DMA+0xa4>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810495c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8104960:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8104964:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8104966:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 810496a:	d035      	beq.n	81049d8 <I2C_Master_ISR_DMA+0x1f4>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 810496c:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 810496e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8104972:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104974:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104978:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 810497a:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810497c:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8104980:	2928      	cmp	r1, #40	; 0x28
 8104982:	bf0c      	ite	eq
 8104984:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 8104988:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810498c:	4001      	ands	r1, r0
 810498e:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8104990:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8104992:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8104996:	f7ff fa75 	bl	8103e84 <HAL_I2C_MasterRxCpltCallback>
 810499a:	e750      	b.n	810483e <I2C_Master_ISR_DMA+0x5a>
  MODIFY_REG(hi2c->Instance->CR2,
 810499c:	b2ca      	uxtb	r2, r1
 810499e:	ea4f 4c02 	mov.w	ip, r2, lsl #16
          xfermode = I2C_AUTOEND_MODE;
 81049a2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 81049a6:	e76f      	b.n	8104888 <I2C_Master_ISR_DMA+0xa4>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 81049a8:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 81049aa:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 81049ae:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81049b0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81049b4:	6819      	ldr	r1, [r3, #0]
    hi2c->XferISR       = NULL;
 81049b6:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81049b8:	f000 0028 	and.w	r0, r0, #40	; 0x28
 81049bc:	2828      	cmp	r0, #40	; 0x28
 81049be:	bf0c      	ite	eq
 81049c0:	f06f 0042 	mvneq.w	r0, #66	; 0x42
 81049c4:	f06f 00f2 	mvnne.w	r0, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81049c8:	4001      	ands	r1, r0
 81049ca:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 81049cc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 81049ce:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 81049d2:	f7ff fa55 	bl	8103e80 <HAL_I2C_MasterTxCpltCallback>
}
 81049d6:	e732      	b.n	810483e <I2C_Master_ISR_DMA+0x5a>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 81049d8:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 81049da:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 81049de:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81049e0:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81049e4:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 81049e6:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81049e8:	f001 0128 	and.w	r1, r1, #40	; 0x28
 81049ec:	2928      	cmp	r1, #40	; 0x28
 81049ee:	bf0c      	ite	eq
 81049f0:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 81049f4:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81049f8:	4001      	ands	r1, r0
 81049fa:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 81049fc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 81049fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8104a02:	f7ff fa3d 	bl	8103e80 <HAL_I2C_MasterTxCpltCallback>
}
 8104a06:	e71a      	b.n	810483e <I2C_Master_ISR_DMA+0x5a>
 8104a08:	081047e5 	.word	0x081047e5
 8104a0c:	081045d1 	.word	0x081045d1
 8104a10:	fc009c00 	.word	0xfc009c00

08104a14 <I2C_DMAError>:
{
 8104a14:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8104a16:	6b85      	ldr	r5, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8104a18:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8104a1a:	b33c      	cbz	r4, 8104a6c <I2C_DMAError+0x58>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8104a1c:	6823      	ldr	r3, [r4, #0]
 8104a1e:	4a32      	ldr	r2, [pc, #200]	; (8104ae8 <I2C_DMAError+0xd4>)
 8104a20:	4293      	cmp	r3, r2
 8104a22:	d01e      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a24:	3218      	adds	r2, #24
 8104a26:	4293      	cmp	r3, r2
 8104a28:	d01b      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a2a:	3218      	adds	r2, #24
 8104a2c:	4293      	cmp	r3, r2
 8104a2e:	d018      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a30:	3218      	adds	r2, #24
 8104a32:	4293      	cmp	r3, r2
 8104a34:	d015      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a36:	3218      	adds	r2, #24
 8104a38:	4293      	cmp	r3, r2
 8104a3a:	d012      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a3c:	3218      	adds	r2, #24
 8104a3e:	4293      	cmp	r3, r2
 8104a40:	d00f      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a42:	3218      	adds	r2, #24
 8104a44:	4293      	cmp	r3, r2
 8104a46:	d00c      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a48:	3218      	adds	r2, #24
 8104a4a:	4293      	cmp	r3, r2
 8104a4c:	d009      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a4e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8104a52:	4293      	cmp	r3, r2
 8104a54:	d005      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a56:	3218      	adds	r2, #24
 8104a58:	4293      	cmp	r3, r2
 8104a5a:	d002      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a5c:	3218      	adds	r2, #24
 8104a5e:	4293      	cmp	r3, r2
 8104a60:	d0ff      	beq.n	8104a62 <I2C_DMAError+0x4e>
 8104a62:	685b      	ldr	r3, [r3, #4]
 8104a64:	fab3 f383 	clz	r3, r3
 8104a68:	095b      	lsrs	r3, r3, #5
  uint32_t treatdmaerror = 0U;
 8104a6a:	461c      	mov	r4, r3
  if (hi2c->hdmarx != NULL)
 8104a6c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8104a6e:	b39b      	cbz	r3, 8104ad8 <I2C_DMAError+0xc4>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8104a70:	681a      	ldr	r2, [r3, #0]
 8104a72:	4b1d      	ldr	r3, [pc, #116]	; (8104ae8 <I2C_DMAError+0xd4>)
 8104a74:	429a      	cmp	r2, r3
 8104a76:	d01e      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104a78:	3318      	adds	r3, #24
 8104a7a:	429a      	cmp	r2, r3
 8104a7c:	d01b      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104a7e:	3318      	adds	r3, #24
 8104a80:	429a      	cmp	r2, r3
 8104a82:	d018      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104a84:	3318      	adds	r3, #24
 8104a86:	429a      	cmp	r2, r3
 8104a88:	d015      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104a8a:	3318      	adds	r3, #24
 8104a8c:	429a      	cmp	r2, r3
 8104a8e:	d012      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104a90:	3318      	adds	r3, #24
 8104a92:	429a      	cmp	r2, r3
 8104a94:	d00f      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104a96:	3318      	adds	r3, #24
 8104a98:	429a      	cmp	r2, r3
 8104a9a:	d00c      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104a9c:	3318      	adds	r3, #24
 8104a9e:	429a      	cmp	r2, r3
 8104aa0:	d009      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104aa2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8104aa6:	429a      	cmp	r2, r3
 8104aa8:	d005      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104aaa:	3318      	adds	r3, #24
 8104aac:	429a      	cmp	r2, r3
 8104aae:	d002      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104ab0:	3318      	adds	r3, #24
 8104ab2:	429a      	cmp	r2, r3
 8104ab4:	d0ff      	beq.n	8104ab6 <I2C_DMAError+0xa2>
 8104ab6:	6853      	ldr	r3, [r2, #4]
 8104ab8:	b973      	cbnz	r3, 8104ad8 <I2C_DMAError+0xc4>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8104aba:	f7fe fc61 	bl	8103380 <HAL_DMA_GetError>
 8104abe:	2802      	cmp	r0, #2
 8104ac0:	d010      	beq.n	8104ae4 <I2C_DMAError+0xd0>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8104ac2:	682a      	ldr	r2, [r5, #0]
 8104ac4:	6853      	ldr	r3, [r2, #4]
 8104ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8104aca:	4628      	mov	r0, r5
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8104acc:	6053      	str	r3, [r2, #4]
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8104ace:	2110      	movs	r1, #16
}
 8104ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8104ad4:	f7ff ba86 	b.w	8103fe4 <I2C_ITError>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8104ad8:	f7fe fc52 	bl	8103380 <HAL_DMA_GetError>
 8104adc:	2802      	cmp	r0, #2
 8104ade:	d001      	beq.n	8104ae4 <I2C_DMAError+0xd0>
 8104ae0:	2c00      	cmp	r4, #0
 8104ae2:	d1ee      	bne.n	8104ac2 <I2C_DMAError+0xae>
}
 8104ae4:	bd38      	pop	{r3, r4, r5, pc}
 8104ae6:	bf00      	nop
 8104ae8:	40020010 	.word	0x40020010

08104aec <I2C_DMAMasterTransmitCplt>:
{
 8104aec:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8104aee:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8104af0:	6822      	ldr	r2, [r4, #0]
 8104af2:	6813      	ldr	r3, [r2, #0]
 8104af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8104af8:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8104afa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8104afc:	b29b      	uxth	r3, r3
 8104afe:	b963      	cbnz	r3, 8104b1a <I2C_DMAMasterTransmitCplt+0x2e>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8104b02:	491c      	ldr	r1, [pc, #112]	; (8104b74 <I2C_DMAMasterTransmitCplt+0x88>)
 8104b04:	428b      	cmp	r3, r1
 8104b06:	d02a      	beq.n	8104b5e <I2C_DMAMasterTransmitCplt+0x72>
 8104b08:	491b      	ldr	r1, [pc, #108]	; (8104b78 <I2C_DMAMasterTransmitCplt+0x8c>)
      tmpisr |= I2C_IT_STOPI;
 8104b0a:	428b      	cmp	r3, r1
 8104b0c:	bf0c      	ite	eq
 8104b0e:	2360      	moveq	r3, #96	; 0x60
 8104b10:	2320      	movne	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8104b12:	6811      	ldr	r1, [r2, #0]
 8104b14:	430b      	orrs	r3, r1
 8104b16:	6013      	str	r3, [r2, #0]
}
 8104b18:	bd10      	pop	{r4, pc}
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104b1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8104b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8104b1e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104b20:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr += hi2c->XferSize;
 8104b22:	4401      	add	r1, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104b24:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
 8104b26:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104b28:	d816      	bhi.n	8104b58 <I2C_DMAMasterTransmitCplt+0x6c>
      hi2c->XferSize = hi2c->XferCount;
 8104b2a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8104b2c:	b280      	uxth	r0, r0
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8104b2e:	4603      	mov	r3, r0
 8104b30:	8520      	strh	r0, [r4, #40]	; 0x28
 8104b32:	3228      	adds	r2, #40	; 0x28
 8104b34:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8104b36:	f7fd fc0d 	bl	8102354 <HAL_DMA_Start_IT>
 8104b3a:	b990      	cbnz	r0, 8104b62 <I2C_DMAMasterTransmitCplt+0x76>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104b3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8104b3e:	4a0d      	ldr	r2, [pc, #52]	; (8104b74 <I2C_DMAMasterTransmitCplt+0x88>)
 8104b40:	4293      	cmp	r3, r2
 8104b42:	d014      	beq.n	8104b6e <I2C_DMAMasterTransmitCplt+0x82>
 8104b44:	4a0c      	ldr	r2, [pc, #48]	; (8104b78 <I2C_DMAMasterTransmitCplt+0x8c>)
 8104b46:	4293      	cmp	r3, r2
 8104b48:	bf0c      	ite	eq
 8104b4a:	2340      	moveq	r3, #64	; 0x40
 8104b4c:	2300      	movne	r3, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8104b4e:	6821      	ldr	r1, [r4, #0]
 8104b50:	680a      	ldr	r2, [r1, #0]
 8104b52:	4313      	orrs	r3, r2
 8104b54:	600b      	str	r3, [r1, #0]
}
 8104b56:	bd10      	pop	{r4, pc}
 8104b58:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104b5a:	4618      	mov	r0, r3
 8104b5c:	e7e8      	b.n	8104b30 <I2C_DMAMasterTransmitCplt+0x44>
 8104b5e:	2360      	movs	r3, #96	; 0x60
 8104b60:	e7d7      	b.n	8104b12 <I2C_DMAMasterTransmitCplt+0x26>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8104b62:	4620      	mov	r0, r4
 8104b64:	2110      	movs	r1, #16
}
 8104b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8104b6a:	f7ff ba3b 	b.w	8103fe4 <I2C_ITError>
      tmpisr |= I2C_IT_TCI;
 8104b6e:	2340      	movs	r3, #64	; 0x40
 8104b70:	e7ed      	b.n	8104b4e <I2C_DMAMasterTransmitCplt+0x62>
 8104b72:	bf00      	nop
 8104b74:	081047e5 	.word	0x081047e5
 8104b78:	081045d1 	.word	0x081045d1

08104b7c <I2C_DMAMasterReceiveCplt>:
{
 8104b7c:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8104b7e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8104b80:	6821      	ldr	r1, [r4, #0]
 8104b82:	680b      	ldr	r3, [r1, #0]
 8104b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104b88:	600b      	str	r3, [r1, #0]
  if (hi2c->XferCount == 0U)
 8104b8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8104b8c:	b29b      	uxth	r3, r3
 8104b8e:	b963      	cbnz	r3, 8104baa <I2C_DMAMasterReceiveCplt+0x2e>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8104b92:	4a1d      	ldr	r2, [pc, #116]	; (8104c08 <I2C_DMAMasterReceiveCplt+0x8c>)
 8104b94:	4293      	cmp	r3, r2
 8104b96:	d02a      	beq.n	8104bee <I2C_DMAMasterReceiveCplt+0x72>
 8104b98:	4a1c      	ldr	r2, [pc, #112]	; (8104c0c <I2C_DMAMasterReceiveCplt+0x90>)
      tmpisr |= I2C_IT_STOPI;
 8104b9a:	4293      	cmp	r3, r2
 8104b9c:	bf0c      	ite	eq
 8104b9e:	2360      	moveq	r3, #96	; 0x60
 8104ba0:	2320      	movne	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8104ba2:	680a      	ldr	r2, [r1, #0]
 8104ba4:	4313      	orrs	r3, r2
 8104ba6:	600b      	str	r3, [r1, #0]
}
 8104ba8:	bd10      	pop	{r4, pc}
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104baa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8104bac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8104bae:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104bb0:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr += hi2c->XferSize;
 8104bb2:	4402      	add	r2, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104bb4:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
 8104bb6:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104bb8:	d816      	bhi.n	8104be8 <I2C_DMAMasterReceiveCplt+0x6c>
      hi2c->XferSize = hi2c->XferCount;
 8104bba:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8104bbc:	b280      	uxth	r0, r0
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8104bbe:	4603      	mov	r3, r0
 8104bc0:	8520      	strh	r0, [r4, #40]	; 0x28
 8104bc2:	3124      	adds	r1, #36	; 0x24
 8104bc4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8104bc6:	f7fd fbc5 	bl	8102354 <HAL_DMA_Start_IT>
 8104bca:	b9a8      	cbnz	r0, 8104bf8 <I2C_DMAMasterReceiveCplt+0x7c>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8104bce:	4a0e      	ldr	r2, [pc, #56]	; (8104c08 <I2C_DMAMasterReceiveCplt+0x8c>)
 8104bd0:	4293      	cmp	r3, r2
 8104bd2:	d017      	beq.n	8104c04 <I2C_DMAMasterReceiveCplt+0x88>
 8104bd4:	4a0d      	ldr	r2, [pc, #52]	; (8104c0c <I2C_DMAMasterReceiveCplt+0x90>)
 8104bd6:	4293      	cmp	r3, r2
 8104bd8:	bf0c      	ite	eq
 8104bda:	2340      	moveq	r3, #64	; 0x40
 8104bdc:	2300      	movne	r3, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8104bde:	6821      	ldr	r1, [r4, #0]
 8104be0:	680a      	ldr	r2, [r1, #0]
 8104be2:	4313      	orrs	r3, r2
 8104be4:	600b      	str	r3, [r1, #0]
}
 8104be6:	bd10      	pop	{r4, pc}
 8104be8:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104bea:	4618      	mov	r0, r3
 8104bec:	e7e8      	b.n	8104bc0 <I2C_DMAMasterReceiveCplt+0x44>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8104bee:	680a      	ldr	r2, [r1, #0]
 8104bf0:	2360      	movs	r3, #96	; 0x60
 8104bf2:	4313      	orrs	r3, r2
 8104bf4:	600b      	str	r3, [r1, #0]
}
 8104bf6:	bd10      	pop	{r4, pc}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8104bf8:	4620      	mov	r0, r4
 8104bfa:	2110      	movs	r1, #16
}
 8104bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8104c00:	f7ff b9f0 	b.w	8103fe4 <I2C_ITError>
      tmpisr |= I2C_IT_TCI;
 8104c04:	2340      	movs	r3, #64	; 0x40
 8104c06:	e7ea      	b.n	8104bde <I2C_DMAMasterReceiveCplt+0x62>
 8104c08:	081047e5 	.word	0x081047e5
 8104c0c:	081045d1 	.word	0x081045d1

08104c10 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8104c10:	6803      	ldr	r3, [r0, #0]
 8104c12:	699a      	ldr	r2, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8104c14:	6819      	ldr	r1, [r3, #0]
{
 8104c16:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104c18:	05d4      	lsls	r4, r2, #23
 8104c1a:	d52f      	bpl.n	8104c7c <HAL_I2C_ER_IRQHandler+0x6c>
 8104c1c:	060c      	lsls	r4, r1, #24
 8104c1e:	d51f      	bpl.n	8104c60 <HAL_I2C_ER_IRQHandler+0x50>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8104c20:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8104c22:	f041 0101 	orr.w	r1, r1, #1
 8104c26:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8104c28:	f44f 7480 	mov.w	r4, #256	; 0x100
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104c2c:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8104c2e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104c30:	d529      	bpl.n	8104c86 <HAL_I2C_ER_IRQHandler+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8104c32:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104c34:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8104c38:	f041 0108 	orr.w	r1, r1, #8
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104c3c:	0592      	lsls	r2, r2, #22
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8104c3e:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104c40:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104c42:	d506      	bpl.n	8104c52 <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8104c44:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8104c46:	f44f 7100 	mov.w	r1, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8104c4a:	f042 0202 	orr.w	r2, r2, #2
 8104c4e:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8104c50:	61d9      	str	r1, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8104c52:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8104c54:	f011 0f0b 	tst.w	r1, #11
 8104c58:	d10c      	bne.n	8104c74 <HAL_I2C_ER_IRQHandler+0x64>
}
 8104c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8104c5e:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104c60:	0554      	lsls	r4, r2, #21
 8104c62:	d4f6      	bmi.n	8104c52 <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104c64:	0594      	lsls	r4, r2, #22
 8104c66:	d5f4      	bpl.n	8104c52 <HAL_I2C_ER_IRQHandler+0x42>
 8104c68:	0609      	lsls	r1, r1, #24
 8104c6a:	d4eb      	bmi.n	8104c44 <HAL_I2C_ER_IRQHandler+0x34>
  tmperror = hi2c->ErrorCode;
 8104c6c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8104c6e:	f011 0f0b 	tst.w	r1, #11
 8104c72:	d0f2      	beq.n	8104c5a <HAL_I2C_ER_IRQHandler+0x4a>
}
 8104c74:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8104c78:	f7ff b9b4 	b.w	8103fe4 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104c7c:	0554      	lsls	r4, r2, #21
 8104c7e:	d5f1      	bpl.n	8104c64 <HAL_I2C_ER_IRQHandler+0x54>
 8104c80:	0609      	lsls	r1, r1, #24
 8104c82:	d4d6      	bmi.n	8104c32 <HAL_I2C_ER_IRQHandler+0x22>
 8104c84:	e7e5      	b.n	8104c52 <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8104c86:	0592      	lsls	r2, r2, #22
 8104c88:	d4dc      	bmi.n	8104c44 <HAL_I2C_ER_IRQHandler+0x34>
 8104c8a:	e7e2      	b.n	8104c52 <HAL_I2C_ER_IRQHandler+0x42>

08104c8c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104c8c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8104c90:	2a20      	cmp	r2, #32
 8104c92:	d123      	bne.n	8104cdc <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8104c94:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104c98:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8104c9c:	2a01      	cmp	r2, #1
 8104c9e:	4603      	mov	r3, r0
 8104ca0:	d01c      	beq.n	8104cdc <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104ca2:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8104ca4:	2024      	movs	r0, #36	; 0x24
{
 8104ca6:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8104ca8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8104cac:	6810      	ldr	r0, [r2, #0]
 8104cae:	f020 0001 	bic.w	r0, r0, #1
 8104cb2:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104cb4:	6810      	ldr	r0, [r2, #0]
 8104cb6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8104cba:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104cbc:	6810      	ldr	r0, [r2, #0]
 8104cbe:	4301      	orrs	r1, r0
 8104cc0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104cc2:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104cc4:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8104cc8:	f041 0101 	orr.w	r1, r1, #1
 8104ccc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8104cce:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8104cd2:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 8104cd6:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8104cd8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8104cdc:	2002      	movs	r0, #2
}
 8104cde:	4770      	bx	lr

08104ce0 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104ce0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8104ce4:	2a20      	cmp	r2, #32
 8104ce6:	d122      	bne.n	8104d2e <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8104ce8:	b500      	push	{lr}
 8104cea:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104cee:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8104cf2:	2a01      	cmp	r2, #1
 8104cf4:	4603      	mov	r3, r0
 8104cf6:	d01c      	beq.n	8104d32 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104cf8:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8104cfa:	2024      	movs	r0, #36	; 0x24
 8104cfc:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8104d00:	6810      	ldr	r0, [r2, #0]
 8104d02:	f020 0001 	bic.w	r0, r0, #1
 8104d06:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8104d08:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8104d0a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8104d0e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8104d12:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104d14:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104d16:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8104d1a:	f041 0101 	orr.w	r1, r1, #1
 8104d1e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8104d20:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8104d24:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 8104d28:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8104d2a:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8104d2e:	2002      	movs	r0, #2
}
 8104d30:	4770      	bx	lr
    return HAL_BUSY;
 8104d32:	2002      	movs	r0, #2
}
 8104d34:	f85d fb04 	ldr.w	pc, [sp], #4

08104d38 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104d38:	b538      	push	{r3, r4, r5, lr}
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104d3a:	4c1f      	ldr	r4, [pc, #124]	; (8104db8 <HAL_PWREx_EnterSTOPMode+0x80>)
 8104d3c:	6823      	ldr	r3, [r4, #0]
 8104d3e:	f023 0301 	bic.w	r3, r3, #1
 8104d42:	4303      	orrs	r3, r0
{
 8104d44:	460d      	mov	r5, r1
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104d46:	6023      	str	r3, [r4, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104d48:	b1a2      	cbz	r2, 8104d74 <HAL_PWREx_EnterSTOPMode+0x3c>

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104d4a:	2a01      	cmp	r2, #1
 8104d4c:	d008      	beq.n	8104d60 <HAL_PWREx_EnterSTOPMode+0x28>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104d4e:	f7fd f849 	bl	8101de4 <HAL_GetCurrentCPUID>
 8104d52:	2803      	cmp	r0, #3
 8104d54:	d028      	beq.n	8104da8 <HAL_PWREx_EnterSTOPMode+0x70>
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104d56:	6963      	ldr	r3, [r4, #20]
 8104d58:	f023 0304 	bic.w	r3, r3, #4
 8104d5c:	6163      	str	r3, [r4, #20]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104d5e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104d60:	f7fd f840 	bl	8101de4 <HAL_GetCurrentCPUID>
 8104d64:	2801      	cmp	r0, #1
 8104d66:	d1fa      	bne.n	8104d5e <HAL_PWREx_EnterSTOPMode+0x26>
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104d68:	6963      	ldr	r3, [r4, #20]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104d6a:	4a14      	ldr	r2, [pc, #80]	; (8104dbc <HAL_PWREx_EnterSTOPMode+0x84>)
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104d6c:	f023 0302 	bic.w	r3, r3, #2
 8104d70:	6163      	str	r3, [r4, #20]
 8104d72:	e008      	b.n	8104d86 <HAL_PWREx_EnterSTOPMode+0x4e>
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104d74:	f7fd f836 	bl	8101de4 <HAL_GetCurrentCPUID>
 8104d78:	2803      	cmp	r0, #3
 8104d7a:	d1f0      	bne.n	8104d5e <HAL_PWREx_EnterSTOPMode+0x26>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104d7c:	6923      	ldr	r3, [r4, #16]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104d7e:	4a0f      	ldr	r2, [pc, #60]	; (8104dbc <HAL_PWREx_EnterSTOPMode+0x84>)
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104d80:	f023 0301 	bic.w	r3, r3, #1
 8104d84:	6123      	str	r3, [r4, #16]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104d86:	6913      	ldr	r3, [r2, #16]
 8104d88:	f043 0304 	orr.w	r3, r3, #4
 8104d8c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8104d8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8104d92:	f3bf 8f6f 	isb	sy
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104d96:	2d01      	cmp	r5, #1
 8104d98:	d00b      	beq.n	8104db2 <HAL_PWREx_EnterSTOPMode+0x7a>
      __WFE ();
 8104d9a:	bf20      	wfe
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104d9c:	4a07      	ldr	r2, [pc, #28]	; (8104dbc <HAL_PWREx_EnterSTOPMode+0x84>)
 8104d9e:	6913      	ldr	r3, [r2, #16]
 8104da0:	f023 0304 	bic.w	r3, r3, #4
 8104da4:	6113      	str	r3, [r2, #16]
}
 8104da6:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104da8:	6923      	ldr	r3, [r4, #16]
 8104daa:	f023 0304 	bic.w	r3, r3, #4
 8104dae:	6123      	str	r3, [r4, #16]
}
 8104db0:	bd38      	pop	{r3, r4, r5, pc}
      __WFI ();
 8104db2:	bf30      	wfi
 8104db4:	e7f2      	b.n	8104d9c <HAL_PWREx_EnterSTOPMode+0x64>
 8104db6:	bf00      	nop
 8104db8:	58024800 	.word	0x58024800
 8104dbc:	e000ed00 	.word	0xe000ed00

08104dc0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104dc0:	b508      	push	{r3, lr}
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104dc2:	f7fd f80f 	bl	8101de4 <HAL_GetCurrentCPUID>
 8104dc6:	2803      	cmp	r0, #3
 8104dc8:	d000      	beq.n	8104dcc <HAL_PWREx_ClearPendingEvent+0xc>
  {
    __WFE ();
  }
  else
  {
    __SEV ();
 8104dca:	bf40      	sev
    __WFE ();
 8104dcc:	bf20      	wfe
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104dce:	bd08      	pop	{r3, pc}

08104dd0 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104dd0:	4b3b      	ldr	r3, [pc, #236]	; (8104ec0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8104dd2:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104dd6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104dd8:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104dda:	6b59      	ldr	r1, [r3, #52]	; 0x34

    if (pllm != 0U)
 8104ddc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104de0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8104de4:	d038      	beq.n	8104e58 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104de6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104dea:	f005 0501 	and.w	r5, r5, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104dee:	fb05 f101 	mul.w	r1, r5, r1
 8104df2:	ee07 1a90 	vmov	s15, r1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104df6:	f002 0203 	and.w	r2, r2, #3
 8104dfa:	2a01      	cmp	r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104dfc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    {
      switch (pllsource)
 8104e00:	d002      	beq.n	8104e08 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8104e02:	2a02      	cmp	r2, #2
 8104e04:	d04e      	beq.n	8104ea4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8104e06:	b34a      	cbz	r2, 8104e5c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104e08:	ee07 0a90 	vmov	s15, r0
 8104e0c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8104ec4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8104e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e1e:	ee07 3a10 	vmov	s14, r3
 8104e22:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8104ec8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8104e26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8104e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104e2e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8104e32:	ee37 7a26 	vadd.f32	s14, s14, s13
 8104e36:	ee27 7a87 	vmul.f32	s14, s15, s14
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104e3a:	4b21      	ldr	r3, [pc, #132]	; (8104ec0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8104e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104e3e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8104e42:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104e44:	ee07 3a90 	vmov	s15, r3
 8104e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104e4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8104e50:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8104e54:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8104e58:	bc30      	pop	{r4, r5}
 8104e5a:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104e5c:	681a      	ldr	r2, [r3, #0]
 8104e5e:	0692      	lsls	r2, r2, #26
 8104e60:	d527      	bpl.n	8104eb2 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104e62:	6819      	ldr	r1, [r3, #0]
 8104e64:	4a19      	ldr	r2, [pc, #100]	; (8104ecc <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104e68:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8104ec8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104e6c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8104e70:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104e72:	ee07 2a90 	vmov	s15, r2
 8104e76:	ee07 0a10 	vmov	s14, r0
 8104e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104e7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8104e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104e86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8104e8a:	ee07 3a10 	vmov	s14, r3
 8104e8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8104e92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8104e96:	eea5 7a86 	vfma.f32	s14, s11, s12
 8104e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8104e9e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8104ea2:	e7ca      	b.n	8104e3a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104ea4:	ee07 0a90 	vmov	s15, r0
 8104ea8:	eddf 6a09 	vldr	s13, [pc, #36]	; 8104ed0 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8104eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104eb0:	e7b0      	b.n	8104e14 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104eb2:	ee07 0a90 	vmov	s15, r0
 8104eb6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8104ed4 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8104eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104ebe:	e7a9      	b.n	8104e14 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8104ec0:	58024400 	.word	0x58024400
 8104ec4:	4a742400 	.word	0x4a742400
 8104ec8:	39000000 	.word	0x39000000
 8104ecc:	03d09000 	.word	0x03d09000
 8104ed0:	4b742400 	.word	0x4b742400
 8104ed4:	4c742400 	.word	0x4c742400

08104ed8 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104ed8:	4a47      	ldr	r2, [pc, #284]	; (8104ff8 <HAL_RCC_GetSysClockFreq+0x120>)
 8104eda:	6913      	ldr	r3, [r2, #16]
 8104edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104ee0:	2b10      	cmp	r3, #16
 8104ee2:	d004      	beq.n	8104eee <HAL_RCC_GetSysClockFreq+0x16>
 8104ee4:	2b18      	cmp	r3, #24
 8104ee6:	d00e      	beq.n	8104f06 <HAL_RCC_GetSysClockFreq+0x2e>
 8104ee8:	b11b      	cbz	r3, 8104ef2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8104eea:	4844      	ldr	r0, [pc, #272]	; (8104ffc <HAL_RCC_GetSysClockFreq+0x124>)
 8104eec:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104eee:	4844      	ldr	r0, [pc, #272]	; (8105000 <HAL_RCC_GetSysClockFreq+0x128>)
 8104ef0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ef2:	6813      	ldr	r3, [r2, #0]
 8104ef4:	0699      	lsls	r1, r3, #26
 8104ef6:	d54b      	bpl.n	8104f90 <HAL_RCC_GetSysClockFreq+0xb8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104ef8:	6810      	ldr	r0, [r2, #0]
 8104efa:	4b42      	ldr	r3, [pc, #264]	; (8105004 <HAL_RCC_GetSysClockFreq+0x12c>)
 8104efc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8104f00:	fa23 f000 	lsr.w	r0, r3, r0
 8104f04:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104f06:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8104f08:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104f0a:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104f0c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104f0e:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (pllm != 0U)
 8104f10:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104f14:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8104f18:	d038      	beq.n	8104f8c <HAL_RCC_GetSysClockFreq+0xb4>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104f1a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104f1e:	f005 0501 	and.w	r5, r5, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104f22:	fb05 f101 	mul.w	r1, r5, r1
 8104f26:	ee07 1a90 	vmov	s15, r1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104f2a:	f003 0303 	and.w	r3, r3, #3
 8104f2e:	2b01      	cmp	r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104f30:	eef8 5ae7 	vcvt.f32.s32	s11, s15
      switch (pllsource)
 8104f34:	d002      	beq.n	8104f3c <HAL_RCC_GetSysClockFreq+0x64>
 8104f36:	2b02      	cmp	r3, #2
 8104f38:	d02c      	beq.n	8104f94 <HAL_RCC_GetSysClockFreq+0xbc>
 8104f3a:	b393      	cbz	r3, 8104fa2 <HAL_RCC_GetSysClockFreq+0xca>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104f3c:	ee07 0a90 	vmov	s15, r0
 8104f40:	eddf 6a31 	vldr	s13, [pc, #196]	; 8105008 <HAL_RCC_GetSysClockFreq+0x130>
 8104f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8104f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f52:	ee07 3a90 	vmov	s15, r3
 8104f56:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 810500c <HAL_RCC_GetSysClockFreq+0x134>
 8104f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f62:	eee5 7a86 	vfma.f32	s15, s11, s12
 8104f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104f6e:	4b22      	ldr	r3, [pc, #136]	; (8104ff8 <HAL_RCC_GetSysClockFreq+0x120>)
 8104f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104f72:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8104f76:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104f78:	ee07 3a90 	vmov	s15, r3
 8104f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104f80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8104f84:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8104f88:	ee17 0a90 	vmov	r0, s15
}
 8104f8c:	bc30      	pop	{r4, r5}
 8104f8e:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104f90:	481c      	ldr	r0, [pc, #112]	; (8105004 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8104f92:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104f94:	ee07 0a90 	vmov	s15, r0
 8104f98:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8105010 <HAL_RCC_GetSysClockFreq+0x138>
 8104f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104fa0:	e7d2      	b.n	8104f48 <HAL_RCC_GetSysClockFreq+0x70>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104fa2:	6813      	ldr	r3, [r2, #0]
 8104fa4:	069b      	lsls	r3, r3, #26
 8104fa6:	d520      	bpl.n	8104fea <HAL_RCC_GetSysClockFreq+0x112>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104fa8:	6811      	ldr	r1, [r2, #0]
 8104faa:	4b16      	ldr	r3, [pc, #88]	; (8105004 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104fac:	ed9f 6a17 	vldr	s12, [pc, #92]	; 810500c <HAL_RCC_GetSysClockFreq+0x134>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104fb0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8104fb4:	40cb      	lsrs	r3, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104fb6:	ee07 3a90 	vmov	s15, r3
 8104fba:	ee07 0a10 	vmov	s14, r0
 8104fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104fc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8104fc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8104fc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8104fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104fd0:	ee07 3a10 	vmov	s14, r3
 8104fd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8104fd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8104fdc:	eea5 7a86 	vfma.f32	s14, s11, s12
 8104fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8104fe4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8104fe8:	e7c1      	b.n	8104f6e <HAL_RCC_GetSysClockFreq+0x96>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104fea:	ee07 0a90 	vmov	s15, r0
 8104fee:	eddf 6a09 	vldr	s13, [pc, #36]	; 8105014 <HAL_RCC_GetSysClockFreq+0x13c>
 8104ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104ff6:	e7a7      	b.n	8104f48 <HAL_RCC_GetSysClockFreq+0x70>
 8104ff8:	58024400 	.word	0x58024400
 8104ffc:	003d0900 	.word	0x003d0900
 8105000:	00f42400 	.word	0x00f42400
 8105004:	03d09000 	.word	0x03d09000
 8105008:	4a742400 	.word	0x4a742400
 810500c:	39000000 	.word	0x39000000
 8105010:	4b742400 	.word	0x4b742400
 8105014:	4c742400 	.word	0x4c742400

08105018 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105018:	4a17      	ldr	r2, [pc, #92]	; (8105078 <HAL_RCC_GetHCLKFreq+0x60>)
 810501a:	6913      	ldr	r3, [r2, #16]
 810501c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105020:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105022:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105024:	d018      	beq.n	8105058 <HAL_RCC_GetHCLKFreq+0x40>
 8105026:	2b18      	cmp	r3, #24
 8105028:	d021      	beq.n	810506e <HAL_RCC_GetHCLKFreq+0x56>
 810502a:	b1bb      	cbz	r3, 810505c <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 810502c:	4813      	ldr	r0, [pc, #76]	; (810507c <HAL_RCC_GetHCLKFreq+0x64>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810502e:	4b12      	ldr	r3, [pc, #72]	; (8105078 <HAL_RCC_GetHCLKFreq+0x60>)
 8105030:	4913      	ldr	r1, [pc, #76]	; (8105080 <HAL_RCC_GetHCLKFreq+0x68>)
 8105032:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105034:	699b      	ldr	r3, [r3, #24]
 8105036:	4c13      	ldr	r4, [pc, #76]	; (8105084 <HAL_RCC_GetHCLKFreq+0x6c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105038:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810503c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105040:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105042:	5ccb      	ldrb	r3, [r1, r3]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105044:	4910      	ldr	r1, [pc, #64]	; (8105088 <HAL_RCC_GetHCLKFreq+0x70>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105046:	f002 021f 	and.w	r2, r2, #31
 810504a:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810504c:	f003 031f 	and.w	r3, r3, #31
 8105050:	40d8      	lsrs	r0, r3
 8105052:	6020      	str	r0, [r4, #0]
  SystemCoreClock = SystemD2Clock;
 8105054:	6008      	str	r0, [r1, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8105056:	bd10      	pop	{r4, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105058:	480c      	ldr	r0, [pc, #48]	; (810508c <HAL_RCC_GetHCLKFreq+0x74>)
 810505a:	e7e8      	b.n	810502e <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810505c:	6813      	ldr	r3, [r2, #0]
 810505e:	069b      	lsls	r3, r3, #26
 8105060:	d508      	bpl.n	8105074 <HAL_RCC_GetHCLKFreq+0x5c>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105062:	6813      	ldr	r3, [r2, #0]
 8105064:	480a      	ldr	r0, [pc, #40]	; (8105090 <HAL_RCC_GetHCLKFreq+0x78>)
 8105066:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 810506a:	40d8      	lsrs	r0, r3
 810506c:	e7df      	b.n	810502e <HAL_RCC_GetHCLKFreq+0x16>
 810506e:	f7ff feaf 	bl	8104dd0 <HAL_RCC_GetSysClockFreq.part.0>
 8105072:	e7dc      	b.n	810502e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105074:	4806      	ldr	r0, [pc, #24]	; (8105090 <HAL_RCC_GetHCLKFreq+0x78>)
 8105076:	e7da      	b.n	810502e <HAL_RCC_GetHCLKFreq+0x16>
 8105078:	58024400 	.word	0x58024400
 810507c:	003d0900 	.word	0x003d0900
 8105080:	08108134 	.word	0x08108134
 8105084:	10000004 	.word	0x10000004
 8105088:	10000000 	.word	0x10000000
 810508c:	00f42400 	.word	0x00f42400
 8105090:	03d09000 	.word	0x03d09000

08105094 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105094:	4a1d      	ldr	r2, [pc, #116]	; (810510c <HAL_RCC_GetPCLK1Freq+0x78>)
 8105096:	6913      	ldr	r3, [r2, #16]
 8105098:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810509c:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810509e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 81050a0:	d023      	beq.n	81050ea <HAL_RCC_GetPCLK1Freq+0x56>
 81050a2:	2b18      	cmp	r3, #24
 81050a4:	d02c      	beq.n	8105100 <HAL_RCC_GetPCLK1Freq+0x6c>
 81050a6:	b313      	cbz	r3, 81050ee <HAL_RCC_GetPCLK1Freq+0x5a>
    sysclockfreq = CSI_VALUE;
 81050a8:	4819      	ldr	r0, [pc, #100]	; (8105110 <HAL_RCC_GetPCLK1Freq+0x7c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81050aa:	4a18      	ldr	r2, [pc, #96]	; (810510c <HAL_RCC_GetPCLK1Freq+0x78>)
 81050ac:	4919      	ldr	r1, [pc, #100]	; (8105114 <HAL_RCC_GetPCLK1Freq+0x80>)
 81050ae:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81050b0:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81050b2:	f3c4 2c03 	ubfx	ip, r4, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81050b6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81050ba:	f811 c00c 	ldrb.w	ip, [r1, ip]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81050be:	5ccb      	ldrb	r3, [r1, r3]
 81050c0:	4c15      	ldr	r4, [pc, #84]	; (8105118 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81050c2:	f00c 0c1f 	and.w	ip, ip, #31
 81050c6:	fa20 f00c 	lsr.w	r0, r0, ip
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81050ca:	f003 031f 	and.w	r3, r3, #31
 81050ce:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = SystemD2Clock;
 81050d2:	4812      	ldr	r0, [pc, #72]	; (810511c <HAL_RCC_GetPCLK1Freq+0x88>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81050d4:	6023      	str	r3, [r4, #0]
  SystemCoreClock = SystemD2Clock;
 81050d6:	6003      	str	r3, [r0, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81050d8:	69d2      	ldr	r2, [r2, #28]
 81050da:	f3c2 1202 	ubfx	r2, r2, #4, #3
 81050de:	5c88      	ldrb	r0, [r1, r2]
 81050e0:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81050e4:	fa23 f000 	lsr.w	r0, r3, r0
 81050e8:	bd10      	pop	{r4, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 81050ea:	480d      	ldr	r0, [pc, #52]	; (8105120 <HAL_RCC_GetPCLK1Freq+0x8c>)
 81050ec:	e7dd      	b.n	81050aa <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81050ee:	6813      	ldr	r3, [r2, #0]
 81050f0:	069b      	lsls	r3, r3, #26
 81050f2:	d508      	bpl.n	8105106 <HAL_RCC_GetPCLK1Freq+0x72>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81050f4:	6813      	ldr	r3, [r2, #0]
 81050f6:	480b      	ldr	r0, [pc, #44]	; (8105124 <HAL_RCC_GetPCLK1Freq+0x90>)
 81050f8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81050fc:	40d8      	lsrs	r0, r3
 81050fe:	e7d4      	b.n	81050aa <HAL_RCC_GetPCLK1Freq+0x16>
 8105100:	f7ff fe66 	bl	8104dd0 <HAL_RCC_GetSysClockFreq.part.0>
 8105104:	e7d1      	b.n	81050aa <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105106:	4807      	ldr	r0, [pc, #28]	; (8105124 <HAL_RCC_GetPCLK1Freq+0x90>)
 8105108:	e7cf      	b.n	81050aa <HAL_RCC_GetPCLK1Freq+0x16>
 810510a:	bf00      	nop
 810510c:	58024400 	.word	0x58024400
 8105110:	003d0900 	.word	0x003d0900
 8105114:	08108134 	.word	0x08108134
 8105118:	10000004 	.word	0x10000004
 810511c:	10000000 	.word	0x10000000
 8105120:	00f42400 	.word	0x00f42400
 8105124:	03d09000 	.word	0x03d09000

08105128 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105128:	4a1d      	ldr	r2, [pc, #116]	; (81051a0 <HAL_RCC_GetPCLK2Freq+0x78>)
 810512a:	6913      	ldr	r3, [r2, #16]
 810512c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105130:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105132:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105134:	d023      	beq.n	810517e <HAL_RCC_GetPCLK2Freq+0x56>
 8105136:	2b18      	cmp	r3, #24
 8105138:	d02c      	beq.n	8105194 <HAL_RCC_GetPCLK2Freq+0x6c>
 810513a:	b313      	cbz	r3, 8105182 <HAL_RCC_GetPCLK2Freq+0x5a>
    sysclockfreq = CSI_VALUE;
 810513c:	4819      	ldr	r0, [pc, #100]	; (81051a4 <HAL_RCC_GetPCLK2Freq+0x7c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810513e:	4a18      	ldr	r2, [pc, #96]	; (81051a0 <HAL_RCC_GetPCLK2Freq+0x78>)
 8105140:	4919      	ldr	r1, [pc, #100]	; (81051a8 <HAL_RCC_GetPCLK2Freq+0x80>)
 8105142:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105144:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105146:	f3c4 2c03 	ubfx	ip, r4, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810514a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810514e:	f811 c00c 	ldrb.w	ip, [r1, ip]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105152:	5ccb      	ldrb	r3, [r1, r3]
 8105154:	4c15      	ldr	r4, [pc, #84]	; (81051ac <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105156:	f00c 0c1f 	and.w	ip, ip, #31
 810515a:	fa20 f00c 	lsr.w	r0, r0, ip
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810515e:	f003 031f 	and.w	r3, r3, #31
 8105162:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = SystemD2Clock;
 8105166:	4812      	ldr	r0, [pc, #72]	; (81051b0 <HAL_RCC_GetPCLK2Freq+0x88>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105168:	6023      	str	r3, [r4, #0]
  SystemCoreClock = SystemD2Clock;
 810516a:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810516c:	69d2      	ldr	r2, [r2, #28]
 810516e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8105172:	5c88      	ldrb	r0, [r1, r2]
 8105174:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105178:	fa23 f000 	lsr.w	r0, r3, r0
 810517c:	bd10      	pop	{r4, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 810517e:	480d      	ldr	r0, [pc, #52]	; (81051b4 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8105180:	e7dd      	b.n	810513e <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105182:	6813      	ldr	r3, [r2, #0]
 8105184:	069b      	lsls	r3, r3, #26
 8105186:	d508      	bpl.n	810519a <HAL_RCC_GetPCLK2Freq+0x72>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105188:	6813      	ldr	r3, [r2, #0]
 810518a:	480b      	ldr	r0, [pc, #44]	; (81051b8 <HAL_RCC_GetPCLK2Freq+0x90>)
 810518c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8105190:	40d8      	lsrs	r0, r3
 8105192:	e7d4      	b.n	810513e <HAL_RCC_GetPCLK2Freq+0x16>
 8105194:	f7ff fe1c 	bl	8104dd0 <HAL_RCC_GetSysClockFreq.part.0>
 8105198:	e7d1      	b.n	810513e <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810519a:	4807      	ldr	r0, [pc, #28]	; (81051b8 <HAL_RCC_GetPCLK2Freq+0x90>)
 810519c:	e7cf      	b.n	810513e <HAL_RCC_GetPCLK2Freq+0x16>
 810519e:	bf00      	nop
 81051a0:	58024400 	.word	0x58024400
 81051a4:	003d0900 	.word	0x003d0900
 81051a8:	08108134 	.word	0x08108134
 81051ac:	10000004 	.word	0x10000004
 81051b0:	10000000 	.word	0x10000000
 81051b4:	00f42400 	.word	0x00f42400
 81051b8:	03d09000 	.word	0x03d09000

081051bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81051be:	4c3b      	ldr	r4, [pc, #236]	; (81052ac <RCCEx_PLL2_Config+0xf0>)
 81051c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81051c2:	f003 0303 	and.w	r3, r3, #3
 81051c6:	2b03      	cmp	r3, #3
 81051c8:	d069      	beq.n	810529e <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81051ca:	6823      	ldr	r3, [r4, #0]
 81051cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81051d0:	6023      	str	r3, [r4, #0]
 81051d2:	4606      	mov	r6, r0
 81051d4:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81051d6:	f7fc fc23 	bl	8101a20 <HAL_GetTick>
 81051da:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81051dc:	e004      	b.n	81051e8 <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81051de:	f7fc fc1f 	bl	8101a20 <HAL_GetTick>
 81051e2:	1b43      	subs	r3, r0, r5
 81051e4:	2b02      	cmp	r3, #2
 81051e6:	d858      	bhi.n	810529a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81051e8:	6823      	ldr	r3, [r4, #0]
 81051ea:	011a      	lsls	r2, r3, #4
 81051ec:	d4f7      	bmi.n	81051de <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81051ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81051f0:	6832      	ldr	r2, [r6, #0]
 81051f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 81051f6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 81051fa:	62a3      	str	r3, [r4, #40]	; 0x28
 81051fc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8105200:	3b01      	subs	r3, #1
 8105202:	3a01      	subs	r2, #1
 8105204:	025b      	lsls	r3, r3, #9
 8105206:	0412      	lsls	r2, r2, #16
 8105208:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 810520c:	b29b      	uxth	r3, r3
 810520e:	4313      	orrs	r3, r2
 8105210:	6872      	ldr	r2, [r6, #4]
 8105212:	3a01      	subs	r2, #1
 8105214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105218:	4313      	orrs	r3, r2
 810521a:	6932      	ldr	r2, [r6, #16]
 810521c:	3a01      	subs	r2, #1
 810521e:	0612      	lsls	r2, r2, #24
 8105220:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8105224:	4313      	orrs	r3, r2
 8105226:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105228:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810522a:	6972      	ldr	r2, [r6, #20]
 810522c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8105230:	4313      	orrs	r3, r2
 8105232:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105234:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8105236:	69b2      	ldr	r2, [r6, #24]
 8105238:	f023 0320 	bic.w	r3, r3, #32
 810523c:	4313      	orrs	r3, r2
 810523e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105240:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8105242:	f023 0310 	bic.w	r3, r3, #16
 8105246:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105248:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810524a:	69f2      	ldr	r2, [r6, #28]
 810524c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105250:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105254:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8105258:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810525a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810525c:	f043 0310 	orr.w	r3, r3, #16
 8105260:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105262:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8105264:	b1ef      	cbz	r7, 81052a2 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105266:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105268:	bf0c      	ite	eq
 810526a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810526e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8105272:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105274:	4c0d      	ldr	r4, [pc, #52]	; (81052ac <RCCEx_PLL2_Config+0xf0>)
 8105276:	6823      	ldr	r3, [r4, #0]
 8105278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810527c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810527e:	f7fc fbcf 	bl	8101a20 <HAL_GetTick>
 8105282:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105284:	e004      	b.n	8105290 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105286:	f7fc fbcb 	bl	8101a20 <HAL_GetTick>
 810528a:	1b40      	subs	r0, r0, r5
 810528c:	2802      	cmp	r0, #2
 810528e:	d804      	bhi.n	810529a <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105290:	6823      	ldr	r3, [r4, #0]
 8105292:	011b      	lsls	r3, r3, #4
 8105294:	d5f7      	bpl.n	8105286 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8105296:	2000      	movs	r0, #0
}
 8105298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 810529a:	2003      	movs	r0, #3
}
 810529c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 810529e:	2001      	movs	r0, #1
}
 81052a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81052a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81052a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 81052a8:	e7e4      	b.n	8105274 <RCCEx_PLL2_Config+0xb8>
 81052aa:	bf00      	nop
 81052ac:	58024400 	.word	0x58024400

081052b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81052b2:	4c3b      	ldr	r4, [pc, #236]	; (81053a0 <RCCEx_PLL3_Config+0xf0>)
 81052b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81052b6:	f003 0303 	and.w	r3, r3, #3
 81052ba:	2b03      	cmp	r3, #3
 81052bc:	d069      	beq.n	8105392 <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81052be:	6823      	ldr	r3, [r4, #0]
 81052c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81052c4:	6023      	str	r3, [r4, #0]
 81052c6:	4606      	mov	r6, r0
 81052c8:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81052ca:	f7fc fba9 	bl	8101a20 <HAL_GetTick>
 81052ce:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81052d0:	e004      	b.n	81052dc <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81052d2:	f7fc fba5 	bl	8101a20 <HAL_GetTick>
 81052d6:	1b43      	subs	r3, r0, r5
 81052d8:	2b02      	cmp	r3, #2
 81052da:	d858      	bhi.n	810538e <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81052dc:	6823      	ldr	r3, [r4, #0]
 81052de:	009a      	lsls	r2, r3, #2
 81052e0:	d4f7      	bmi.n	81052d2 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81052e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81052e4:	6832      	ldr	r2, [r6, #0]
 81052e6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 81052ea:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 81052ee:	62a3      	str	r3, [r4, #40]	; 0x28
 81052f0:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 81052f4:	3b01      	subs	r3, #1
 81052f6:	3a01      	subs	r2, #1
 81052f8:	025b      	lsls	r3, r3, #9
 81052fa:	0412      	lsls	r2, r2, #16
 81052fc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8105300:	b29b      	uxth	r3, r3
 8105302:	4313      	orrs	r3, r2
 8105304:	6872      	ldr	r2, [r6, #4]
 8105306:	3a01      	subs	r2, #1
 8105308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810530c:	4313      	orrs	r3, r2
 810530e:	6932      	ldr	r2, [r6, #16]
 8105310:	3a01      	subs	r2, #1
 8105312:	0612      	lsls	r2, r2, #24
 8105314:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8105318:	4313      	orrs	r3, r2
 810531a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810531c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810531e:	6972      	ldr	r2, [r6, #20]
 8105320:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8105324:	4313      	orrs	r3, r2
 8105326:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105328:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810532a:	69b2      	ldr	r2, [r6, #24]
 810532c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8105330:	4313      	orrs	r3, r2
 8105332:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8105336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810533a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810533c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 810533e:	69f2      	ldr	r2, [r6, #28]
 8105340:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105344:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105348:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 810534c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810534e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8105350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105354:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105356:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8105358:	b1ef      	cbz	r7, 8105396 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810535a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810535c:	bf0c      	ite	eq
 810535e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105362:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8105366:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105368:	4c0d      	ldr	r4, [pc, #52]	; (81053a0 <RCCEx_PLL3_Config+0xf0>)
 810536a:	6823      	ldr	r3, [r4, #0]
 810536c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105370:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105372:	f7fc fb55 	bl	8101a20 <HAL_GetTick>
 8105376:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105378:	e004      	b.n	8105384 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810537a:	f7fc fb51 	bl	8101a20 <HAL_GetTick>
 810537e:	1b40      	subs	r0, r0, r5
 8105380:	2802      	cmp	r0, #2
 8105382:	d804      	bhi.n	810538e <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105384:	6823      	ldr	r3, [r4, #0]
 8105386:	009b      	lsls	r3, r3, #2
 8105388:	d5f7      	bpl.n	810537a <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 810538a:	2000      	movs	r0, #0
}
 810538c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 810538e:	2003      	movs	r0, #3
}
 8105390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8105392:	2001      	movs	r0, #1
}
 8105394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105396:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810539a:	62e3      	str	r3, [r4, #44]	; 0x2c
 810539c:	e7e4      	b.n	8105368 <RCCEx_PLL3_Config+0xb8>
 810539e:	bf00      	nop
 81053a0:	58024400 	.word	0x58024400

081053a4 <HAL_RCCEx_PeriphCLKConfig>:
{
 81053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81053a8:	6803      	ldr	r3, [r0, #0]
 81053aa:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
{
 81053ae:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81053b0:	d022      	beq.n	81053f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 81053b2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 81053b4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 81053b8:	f000 849b 	beq.w	8105cf2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 81053bc:	d811      	bhi.n	81053e2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 81053be:	2a00      	cmp	r2, #0
 81053c0:	f000 8505 	beq.w	8105dce <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 81053c4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 81053c8:	f040 84fe 	bne.w	8105dc8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81053cc:	2102      	movs	r1, #2
 81053ce:	3004      	adds	r0, #4
 81053d0:	f7ff fef4 	bl	81051bc <RCCEx_PLL2_Config>
 81053d4:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 81053d6:	2e00      	cmp	r6, #0
 81053d8:	f040 8493 	bne.w	8105d02 <HAL_RCCEx_PeriphCLKConfig+0x95e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81053dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81053de:	6823      	ldr	r3, [r4, #0]
 81053e0:	e003      	b.n	81053ea <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 81053e2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 81053e6:	f040 84ef 	bne.w	8105dc8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81053ea:	48a8      	ldr	r0, [pc, #672]	; (810568c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 81053ec:	6d01      	ldr	r1, [r0, #80]	; 0x50
 81053ee:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 81053f2:	430a      	orrs	r2, r1
 81053f4:	6502      	str	r2, [r0, #80]	; 0x50
 81053f6:	2600      	movs	r6, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81053f8:	05dd      	lsls	r5, r3, #23
 81053fa:	d50a      	bpl.n	8105412 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 81053fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 81053fe:	2a04      	cmp	r2, #4
 8105400:	d806      	bhi.n	8105410 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8105402:	e8df f012 	tbh	[pc, r2, lsl #1]
 8105406:	04af      	.short	0x04af
 8105408:	0495048e 	.word	0x0495048e
 810540c:	02ea02ea 	.word	0x02ea02ea
 8105410:	2601      	movs	r6, #1
 8105412:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105414:	0598      	lsls	r0, r3, #22
 8105416:	d51b      	bpl.n	8105450 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 8105418:	6da2      	ldr	r2, [r4, #88]	; 0x58
 810541a:	2a80      	cmp	r2, #128	; 0x80
 810541c:	f000 8499 	beq.w	8105d52 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 8105420:	f200 80ec 	bhi.w	81055fc <HAL_RCCEx_PeriphCLKConfig+0x258>
 8105424:	2a00      	cmp	r2, #0
 8105426:	f000 8396 	beq.w	8105b56 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 810542a:	2a40      	cmp	r2, #64	; 0x40
 810542c:	f040 80ed 	bne.w	810560a <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105430:	2100      	movs	r1, #0
 8105432:	1d20      	adds	r0, r4, #4
 8105434:	f7ff fec2 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105438:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810543a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810543c:	2d00      	cmp	r5, #0
 810543e:	f040 8370 	bne.w	8105b22 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105442:	4992      	ldr	r1, [pc, #584]	; (810568c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8105444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105446:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8105448:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 810544c:	4302      	orrs	r2, r0
 810544e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105450:	0559      	lsls	r1, r3, #21
 8105452:	d51f      	bpl.n	8105494 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8105454:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8105458:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 810545c:	f000 8458 	beq.w	8105d10 <HAL_RCCEx_PeriphCLKConfig+0x96c>
 8105460:	f200 80d6 	bhi.w	8105610 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8105464:	2a00      	cmp	r2, #0
 8105466:	f000 837c 	beq.w	8105b62 <HAL_RCCEx_PeriphCLKConfig+0x7be>
 810546a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 810546e:	f040 80d7 	bne.w	8105620 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105472:	2100      	movs	r1, #0
 8105474:	1d20      	adds	r0, r4, #4
 8105476:	f7ff fea1 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810547a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810547c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810547e:	2d00      	cmp	r5, #0
 8105480:	f040 8353 	bne.w	8105b2a <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105484:	4981      	ldr	r1, [pc, #516]	; (810568c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8105486:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 810548a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 810548c:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8105490:	4302      	orrs	r2, r0
 8105492:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105494:	051a      	lsls	r2, r3, #20
 8105496:	d51f      	bpl.n	81054d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 8105498:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 810549c:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 81054a0:	f000 8467 	beq.w	8105d72 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 81054a4:	f200 80bf 	bhi.w	8105626 <HAL_RCCEx_PeriphCLKConfig+0x282>
 81054a8:	2a00      	cmp	r2, #0
 81054aa:	f000 8360 	beq.w	8105b6e <HAL_RCCEx_PeriphCLKConfig+0x7ca>
 81054ae:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 81054b2:	f040 80c0 	bne.w	8105636 <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81054b6:	2100      	movs	r1, #0
 81054b8:	1d20      	adds	r0, r4, #4
 81054ba:	f7ff fe7f 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81054be:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81054c0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 81054c2:	2d00      	cmp	r5, #0
 81054c4:	f040 8335 	bne.w	8105b32 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81054c8:	4970      	ldr	r1, [pc, #448]	; (810568c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 81054ca:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 81054ce:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 81054d0:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 81054d4:	4302      	orrs	r2, r0
 81054d6:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81054d8:	019f      	lsls	r7, r3, #6
 81054da:	d518      	bpl.n	810550e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 81054dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 81054de:	2a20      	cmp	r2, #32
 81054e0:	f000 83d0 	beq.w	8105c84 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 81054e4:	f200 80aa 	bhi.w	810563c <HAL_RCCEx_PeriphCLKConfig+0x298>
 81054e8:	b13a      	cbz	r2, 81054fa <HAL_RCCEx_PeriphCLKConfig+0x156>
 81054ea:	2a10      	cmp	r2, #16
 81054ec:	f040 80a9 	bne.w	8105642 <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81054f0:	4966      	ldr	r1, [pc, #408]	; (810568c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 81054f2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 81054f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 81054f8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 81054fa:	2d00      	cmp	r5, #0
 81054fc:	f040 8362 	bne.w	8105bc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105500:	4962      	ldr	r1, [pc, #392]	; (810568c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8105502:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8105504:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8105506:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 810550a:	4302      	orrs	r2, r0
 810550c:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810550e:	04d8      	lsls	r0, r3, #19
 8105510:	d51d      	bpl.n	810554e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 8105512:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8105514:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8105518:	f000 8412 	beq.w	8105d40 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 810551c:	f200 8094 	bhi.w	8105648 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8105520:	2a00      	cmp	r2, #0
 8105522:	f000 832a 	beq.w	8105b7a <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8105526:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 810552a:	f040 8095 	bne.w	8105658 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810552e:	2100      	movs	r1, #0
 8105530:	1d20      	adds	r0, r4, #4
 8105532:	f7ff fe43 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105536:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105538:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810553a:	2d00      	cmp	r5, #0
 810553c:	f040 82f3 	bne.w	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105540:	4952      	ldr	r1, [pc, #328]	; (810568c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8105542:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8105544:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8105546:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 810554a:	4302      	orrs	r2, r0
 810554c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810554e:	0499      	lsls	r1, r3, #18
 8105550:	d51a      	bpl.n	8105588 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 8105552:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8105554:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8105558:	f000 8378 	beq.w	8105c4c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 810555c:	d87f      	bhi.n	810565e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 810555e:	b14a      	cbz	r2, 8105574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8105560:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8105564:	f040 8083 	bne.w	810566e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105568:	2101      	movs	r1, #1
 810556a:	1d20      	adds	r0, r4, #4
 810556c:	f7ff fe26 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105570:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105572:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8105574:	2d00      	cmp	r5, #0
 8105576:	f040 8327 	bne.w	8105bc8 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810557a:	4944      	ldr	r1, [pc, #272]	; (810568c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 810557c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 810557e:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8105580:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8105584:	4302      	orrs	r2, r0
 8105586:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105588:	045a      	lsls	r2, r3, #17
 810558a:	d51b      	bpl.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 810558c:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8105590:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8105594:	f000 8364 	beq.w	8105c60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8105598:	d86c      	bhi.n	8105674 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810559a:	b142      	cbz	r2, 81055ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 810559c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 81055a0:	d170      	bne.n	8105684 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81055a2:	2101      	movs	r1, #1
 81055a4:	1d20      	adds	r0, r4, #4
 81055a6:	f7ff fe09 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81055aa:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81055ac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 81055ae:	2d00      	cmp	r5, #0
 81055b0:	f040 830c 	bne.w	8105bcc <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81055b4:	4935      	ldr	r1, [pc, #212]	; (810568c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 81055b6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 81055ba:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 81055bc:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 81055c0:	4302      	orrs	r2, r0
 81055c2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81055c4:	041f      	lsls	r7, r3, #16
 81055c6:	d50d      	bpl.n	81055e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 81055c8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 81055ca:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 81055ce:	f000 8351 	beq.w	8105c74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 81055d2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 81055d6:	f000 820c 	beq.w	81059f2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 81055da:	2a00      	cmp	r2, #0
 81055dc:	f000 820f 	beq.w	81059fe <HAL_RCCEx_PeriphCLKConfig+0x65a>
 81055e0:	2601      	movs	r6, #1
 81055e2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81055e4:	01d8      	lsls	r0, r3, #7
 81055e6:	d55d      	bpl.n	81056a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 81055e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 81055ea:	2a03      	cmp	r2, #3
 81055ec:	f200 841a 	bhi.w	8105e24 <HAL_RCCEx_PeriphCLKConfig+0xa80>
 81055f0:	e8df f012 	tbh	[pc, r2, lsl #1]
 81055f4:	035c0054 	.word	0x035c0054
 81055f8:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 81055fc:	2ac0      	cmp	r2, #192	; 0xc0
 81055fe:	f43f af1d 	beq.w	810543c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8105602:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8105606:	f43f af19 	beq.w	810543c <HAL_RCCEx_PeriphCLKConfig+0x98>
 810560a:	2601      	movs	r6, #1
 810560c:	4635      	mov	r5, r6
 810560e:	e71f      	b.n	8105450 <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 8105610:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8105614:	f43f af33 	beq.w	810547e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8105618:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 810561c:	f43f af2f 	beq.w	810547e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8105620:	2601      	movs	r6, #1
 8105622:	4635      	mov	r5, r6
 8105624:	e736      	b.n	8105494 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8105626:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 810562a:	f43f af4a 	beq.w	81054c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 810562e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8105632:	f43f af46 	beq.w	81054c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8105636:	2601      	movs	r6, #1
 8105638:	4635      	mov	r5, r6
 810563a:	e74d      	b.n	81054d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 810563c:	2a30      	cmp	r2, #48	; 0x30
 810563e:	f43f af5c 	beq.w	81054fa <HAL_RCCEx_PeriphCLKConfig+0x156>
 8105642:	2601      	movs	r6, #1
 8105644:	4635      	mov	r5, r6
 8105646:	e762      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8105648:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 810564c:	f43f af75 	beq.w	810553a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105650:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8105654:	f43f af71 	beq.w	810553a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105658:	2601      	movs	r6, #1
 810565a:	4635      	mov	r5, r6
 810565c:	e777      	b.n	810554e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 810565e:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8105662:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8105666:	d085      	beq.n	8105574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8105668:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 810566c:	d082      	beq.n	8105574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 810566e:	2601      	movs	r6, #1
 8105670:	4635      	mov	r5, r6
 8105672:	e789      	b.n	8105588 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 8105674:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8105678:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 810567c:	d097      	beq.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 810567e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8105682:	d094      	beq.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8105684:	2601      	movs	r6, #1
 8105686:	4635      	mov	r5, r6
 8105688:	e79c      	b.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 810568a:	bf00      	nop
 810568c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105690:	2102      	movs	r1, #2
 8105692:	1d20      	adds	r0, r4, #4
 8105694:	f7ff fd92 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105698:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810569a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810569c:	2d00      	cmp	r5, #0
 810569e:	f000 8274 	beq.w	8105b8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 81056a2:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81056a4:	0259      	lsls	r1, r3, #9
 81056a6:	f100 81f0 	bmi.w	8105a8a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81056aa:	07df      	lsls	r7, r3, #31
 81056ac:	d52f      	bpl.n	810570e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 81056ae:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 81056b0:	2a28      	cmp	r2, #40	; 0x28
 81056b2:	d82a      	bhi.n	810570a <HAL_RCCEx_PeriphCLKConfig+0x366>
 81056b4:	e8df f012 	tbh	[pc, r2, lsl #1]
 81056b8:	002901de 	.word	0x002901de
 81056bc:	00290029 	.word	0x00290029
 81056c0:	00290029 	.word	0x00290029
 81056c4:	00290029 	.word	0x00290029
 81056c8:	0029037a 	.word	0x0029037a
 81056cc:	00290029 	.word	0x00290029
 81056d0:	00290029 	.word	0x00290029
 81056d4:	00290029 	.word	0x00290029
 81056d8:	002901d7 	.word	0x002901d7
 81056dc:	00290029 	.word	0x00290029
 81056e0:	00290029 	.word	0x00290029
 81056e4:	00290029 	.word	0x00290029
 81056e8:	002901de 	.word	0x002901de
 81056ec:	00290029 	.word	0x00290029
 81056f0:	00290029 	.word	0x00290029
 81056f4:	00290029 	.word	0x00290029
 81056f8:	002901de 	.word	0x002901de
 81056fc:	00290029 	.word	0x00290029
 8105700:	00290029 	.word	0x00290029
 8105704:	00290029 	.word	0x00290029
 8105708:	01de      	.short	0x01de
 810570a:	2601      	movs	r6, #1
 810570c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810570e:	0798      	lsls	r0, r3, #30
 8105710:	d516      	bpl.n	8105740 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8105712:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8105714:	2a05      	cmp	r2, #5
 8105716:	f200 8382 	bhi.w	8105e1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810571a:	e8df f012 	tbh	[pc, r2, lsl #1]
 810571e:	000d      	.short	0x000d
 8105720:	00060333 	.word	0x00060333
 8105724:	000d000d 	.word	0x000d000d
 8105728:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810572a:	2101      	movs	r1, #1
 810572c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105730:	f7ff fdbe 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105734:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105736:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8105738:	2d00      	cmp	r5, #0
 810573a:	f000 8230 	beq.w	8105b9e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
 810573e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105740:	0759      	lsls	r1, r3, #29
 8105742:	d517      	bpl.n	8105774 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8105744:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8105748:	2a05      	cmp	r2, #5
 810574a:	f200 836e 	bhi.w	8105e2a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810574e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8105752:	000d      	.short	0x000d
 8105754:	00060323 	.word	0x00060323
 8105758:	000d000d 	.word	0x000d000d
 810575c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810575e:	2101      	movs	r1, #1
 8105760:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105764:	f7ff fda4 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105768:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810576a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810576c:	2d00      	cmp	r5, #0
 810576e:	f000 821e 	beq.w	8105bae <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8105772:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105774:	069a      	lsls	r2, r3, #26
 8105776:	d51d      	bpl.n	81057b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8105778:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 810577c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8105780:	f000 8289 	beq.w	8105c96 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8105784:	f200 80e6 	bhi.w	8105954 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8105788:	b14a      	cbz	r2, 810579e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 810578a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 810578e:	f040 80eb 	bne.w	8105968 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105792:	2100      	movs	r1, #0
 8105794:	1d20      	adds	r0, r4, #4
 8105796:	f7ff fd11 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810579a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810579c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810579e:	2d00      	cmp	r5, #0
 81057a0:	f040 81f1 	bne.w	8105b86 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81057a4:	49a5      	ldr	r1, [pc, #660]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81057a6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 81057aa:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 81057ac:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 81057b0:	4302      	orrs	r2, r0
 81057b2:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81057b4:	065f      	lsls	r7, r3, #25
 81057b6:	d51d      	bpl.n	81057f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 81057b8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 81057bc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 81057c0:	f000 8230 	beq.w	8105c24 <HAL_RCCEx_PeriphCLKConfig+0x880>
 81057c4:	f200 80d3 	bhi.w	810596e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 81057c8:	b14a      	cbz	r2, 81057de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 81057ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 81057ce:	f040 80d8 	bne.w	8105982 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81057d2:	2100      	movs	r1, #0
 81057d4:	1d20      	adds	r0, r4, #4
 81057d6:	f7ff fcf1 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81057da:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81057dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 81057de:	2d00      	cmp	r5, #0
 81057e0:	f040 81f6 	bne.w	8105bd0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81057e4:	4995      	ldr	r1, [pc, #596]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81057e6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 81057ea:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 81057ec:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 81057f0:	4302      	orrs	r2, r0
 81057f2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81057f4:	0618      	lsls	r0, r3, #24
 81057f6:	d51d      	bpl.n	8105834 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 81057f8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 81057fc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8105800:	f000 821a 	beq.w	8105c38 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8105804:	f200 80c0 	bhi.w	8105988 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8105808:	b14a      	cbz	r2, 810581e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 810580a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 810580e:	f040 80c5 	bne.w	810599c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105812:	2100      	movs	r1, #0
 8105814:	1d20      	adds	r0, r4, #4
 8105816:	f7ff fcd1 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810581a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810581c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810581e:	2d00      	cmp	r5, #0
 8105820:	f040 81bb 	bne.w	8105b9a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105824:	4985      	ldr	r1, [pc, #532]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8105826:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 810582a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 810582c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8105830:	4302      	orrs	r2, r0
 8105832:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105834:	0719      	lsls	r1, r3, #28
 8105836:	d50b      	bpl.n	8105850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8105838:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 810583c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8105840:	f000 823d 	beq.w	8105cbe <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105844:	487d      	ldr	r0, [pc, #500]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8105846:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8105848:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 810584c:	430a      	orrs	r2, r1
 810584e:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105850:	06da      	lsls	r2, r3, #27
 8105852:	d50b      	bpl.n	810586c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8105854:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8105858:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 810585c:	f000 823c 	beq.w	8105cd8 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105860:	4876      	ldr	r0, [pc, #472]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8105862:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8105864:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8105868:	430a      	orrs	r2, r1
 810586a:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810586c:	031f      	lsls	r7, r3, #12
 810586e:	d50e      	bpl.n	810588e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 8105870:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8105874:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8105878:	f000 80e2 	beq.w	8105a40 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 810587c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8105880:	f000 80e5 	beq.w	8105a4e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8105884:	2900      	cmp	r1, #0
 8105886:	f000 81c5 	beq.w	8105c14 <HAL_RCCEx_PeriphCLKConfig+0x870>
 810588a:	2601      	movs	r6, #1
 810588c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810588e:	0358      	lsls	r0, r3, #13
 8105890:	d50f      	bpl.n	81058b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 8105892:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8105896:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 810589a:	f000 80bb 	beq.w	8105a14 <HAL_RCCEx_PeriphCLKConfig+0x670>
 810589e:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 81058a2:	f000 80be 	beq.w	8105a22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 81058a6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 81058aa:	f000 81ab 	beq.w	8105c04 <HAL_RCCEx_PeriphCLKConfig+0x860>
 81058ae:	2601      	movs	r6, #1
 81058b0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81058b2:	03d9      	lsls	r1, r3, #15
 81058b4:	d509      	bpl.n	81058ca <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 81058b6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 81058b8:	2a00      	cmp	r2, #0
 81058ba:	f000 8191 	beq.w	8105be0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 81058be:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 81058c2:	f000 8138 	beq.w	8105b36 <HAL_RCCEx_PeriphCLKConfig+0x792>
 81058c6:	2601      	movs	r6, #1
 81058c8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81058ca:	009a      	lsls	r2, r3, #2
 81058cc:	f100 811e 	bmi.w	8105b0c <HAL_RCCEx_PeriphCLKConfig+0x768>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81058d0:	039f      	lsls	r7, r3, #14
 81058d2:	d466      	bmi.n	81059a2 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 81058d4:	1e30      	subs	r0, r6, #0
 81058d6:	bf18      	it	ne
 81058d8:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81058da:	02de      	lsls	r6, r3, #11
 81058dc:	d506      	bpl.n	81058ec <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81058de:	4957      	ldr	r1, [pc, #348]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81058e0:	6f25      	ldr	r5, [r4, #112]	; 0x70
 81058e2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 81058e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81058e8:	432a      	orrs	r2, r5
 81058ea:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81058ec:	00dd      	lsls	r5, r3, #3
 81058ee:	d507      	bpl.n	8105900 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81058f0:	4952      	ldr	r1, [pc, #328]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81058f2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 81058f6:	690a      	ldr	r2, [r1, #16]
 81058f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81058fc:	432a      	orrs	r2, r5
 81058fe:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105900:	0299      	lsls	r1, r3, #10
 8105902:	d506      	bpl.n	8105912 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105904:	494d      	ldr	r1, [pc, #308]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8105906:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8105908:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 810590a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 810590e:	432a      	orrs	r2, r5
 8105910:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105912:	005a      	lsls	r2, r3, #1
 8105914:	d509      	bpl.n	810592a <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105916:	4a49      	ldr	r2, [pc, #292]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8105918:	6911      	ldr	r1, [r2, #16]
 810591a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 810591e:	6111      	str	r1, [r2, #16]
 8105920:	6911      	ldr	r1, [r2, #16]
 8105922:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8105926:	4329      	orrs	r1, r5
 8105928:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810592a:	2b00      	cmp	r3, #0
 810592c:	da06      	bge.n	810593c <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810592e:	4943      	ldr	r1, [pc, #268]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8105930:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8105932:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8105934:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8105938:	432a      	orrs	r2, r5
 810593a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810593c:	021b      	lsls	r3, r3, #8
 810593e:	d507      	bpl.n	8105950 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105940:	4a3e      	ldr	r2, [pc, #248]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8105942:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8105946:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8105948:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 810594c:	430b      	orrs	r3, r1
 810594e:	6553      	str	r3, [r2, #84]	; 0x54
}
 8105950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 8105954:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8105958:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 810595c:	f43f af1f 	beq.w	810579e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8105960:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8105964:	f43f af1b 	beq.w	810579e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8105968:	2601      	movs	r6, #1
 810596a:	4635      	mov	r5, r6
 810596c:	e722      	b.n	81057b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 810596e:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8105972:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8105976:	f43f af32 	beq.w	81057de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 810597a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 810597e:	f43f af2e 	beq.w	81057de <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8105982:	2601      	movs	r6, #1
 8105984:	4635      	mov	r5, r6
 8105986:	e735      	b.n	81057f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8105988:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 810598c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8105990:	f43f af45 	beq.w	810581e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8105994:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8105998:	f43f af41 	beq.w	810581e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 810599c:	2601      	movs	r6, #1
 810599e:	4635      	mov	r5, r6
 81059a0:	e748      	b.n	8105834 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 81059a2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 81059a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 81059a8:	f000 8123 	beq.w	8105bf2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 81059ac:	d906      	bls.n	81059bc <HAL_RCCEx_PeriphCLKConfig+0x618>
 81059ae:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 81059b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 81059b6:	d003      	beq.n	81059c0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 81059b8:	2001      	movs	r0, #1
 81059ba:	e78e      	b.n	81058da <HAL_RCCEx_PeriphCLKConfig+0x536>
 81059bc:	2a00      	cmp	r2, #0
 81059be:	d1fb      	bne.n	81059b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 81059c0:	2d00      	cmp	r5, #0
 81059c2:	d1f9      	bne.n	81059b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81059c4:	4d1d      	ldr	r5, [pc, #116]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81059c6:	6d69      	ldr	r1, [r5, #84]	; 0x54
 81059c8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    return HAL_OK;
 81059cc:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81059ce:	ea42 0201 	orr.w	r2, r2, r1
    return HAL_OK;
 81059d2:	bf18      	it	ne
 81059d4:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81059d6:	656a      	str	r2, [r5, #84]	; 0x54
 81059d8:	e77f      	b.n	81058da <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 81059da:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 81059dc:	2d00      	cmp	r5, #0
 81059de:	f040 80a6 	bne.w	8105b2e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81059e2:	4916      	ldr	r1, [pc, #88]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81059e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81059e6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 81059e8:	f022 0207 	bic.w	r2, r2, #7
 81059ec:	4302      	orrs	r2, r0
 81059ee:	650a      	str	r2, [r1, #80]	; 0x50
 81059f0:	e510      	b.n	8105414 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81059f2:	2101      	movs	r1, #1
 81059f4:	1d20      	adds	r0, r4, #4
 81059f6:	f7ff fbe1 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81059fa:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81059fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 81059fe:	2d00      	cmp	r5, #0
 8105a00:	f040 80de 	bne.w	8105bc0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105a04:	490d      	ldr	r1, [pc, #52]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8105a06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8105a08:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8105a0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8105a0e:	4302      	orrs	r2, r0
 8105a10:	650a      	str	r2, [r1, #80]	; 0x50
 8105a12:	e5e7      	b.n	81055e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105a14:	2101      	movs	r1, #1
 8105a16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105a1a:	f7ff fc49 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105a1e:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105a20:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8105a22:	2d00      	cmp	r5, #0
 8105a24:	f040 80da 	bne.w	8105bdc <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105a28:	4904      	ldr	r1, [pc, #16]	; (8105a3c <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8105a2a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8105a2e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8105a30:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8105a34:	4302      	orrs	r2, r0
 8105a36:	654a      	str	r2, [r1, #84]	; 0x54
 8105a38:	e73b      	b.n	81058b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8105a3a:	bf00      	nop
 8105a3c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105a40:	2102      	movs	r1, #2
 8105a42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105a46:	f7ff fc33 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105a4a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105a4c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8105a4e:	2d00      	cmp	r5, #0
 8105a50:	f040 80c2 	bne.w	8105bd8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105a54:	49ac      	ldr	r1, [pc, #688]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105a56:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8105a5a:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8105a5c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8105a60:	4302      	orrs	r2, r0
 8105a62:	658a      	str	r2, [r1, #88]	; 0x58
 8105a64:	e713      	b.n	810588e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105a66:	2101      	movs	r1, #1
 8105a68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105a6c:	f7ff fc20 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105a70:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105a72:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8105a74:	2d00      	cmp	r5, #0
 8105a76:	f040 80ad 	bne.w	8105bd4 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105a7a:	49a3      	ldr	r1, [pc, #652]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105a7c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8105a7e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8105a80:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8105a84:	4302      	orrs	r2, r0
 8105a86:	654a      	str	r2, [r1, #84]	; 0x54
 8105a88:	e641      	b.n	810570e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105a8a:	4fa0      	ldr	r7, [pc, #640]	; (8105d0c <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8105a8c:	683b      	ldr	r3, [r7, #0]
 8105a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105a92:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8105a94:	f7fb ffc4 	bl	8101a20 <HAL_GetTick>
 8105a98:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105a9a:	e006      	b.n	8105aaa <HAL_RCCEx_PeriphCLKConfig+0x706>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105a9c:	f7fb ffc0 	bl	8101a20 <HAL_GetTick>
 8105aa0:	eba0 0008 	sub.w	r0, r0, r8
 8105aa4:	2864      	cmp	r0, #100	; 0x64
 8105aa6:	f200 818b 	bhi.w	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105aaa:	683b      	ldr	r3, [r7, #0]
 8105aac:	05da      	lsls	r2, r3, #23
 8105aae:	d5f5      	bpl.n	8105a9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
    if(ret == HAL_OK)
 8105ab0:	2d00      	cmp	r5, #0
 8105ab2:	f040 81b1 	bne.w	8105e18 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105ab6:	4a94      	ldr	r2, [pc, #592]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105ab8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8105abc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8105abe:	4059      	eors	r1, r3
 8105ac0:	f411 7f40 	tst.w	r1, #768	; 0x300
 8105ac4:	d00b      	beq.n	8105ade <HAL_RCCEx_PeriphCLKConfig+0x73a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105ac6:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8105ac8:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8105aca:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8105ace:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105ad0:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105ad2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105ad6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8105ada:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8105adc:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105ae2:	f000 817b 	beq.w	8105ddc <HAL_RCCEx_PeriphCLKConfig+0xa38>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105ae6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8105aea:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8105aee:	f000 8189 	beq.w	8105e04 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8105af2:	4985      	ldr	r1, [pc, #532]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105af4:	690a      	ldr	r2, [r1, #16]
 8105af6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8105afa:	610a      	str	r2, [r1, #16]
 8105afc:	4a82      	ldr	r2, [pc, #520]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105afe:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8105b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105b04:	430b      	orrs	r3, r1
 8105b06:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105b08:	6823      	ldr	r3, [r4, #0]
 8105b0a:	e5ce      	b.n	81056aa <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8105b0c:	2102      	movs	r1, #2
 8105b0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105b12:	f7ff fbcd 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105b16:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8105b18:	2800      	cmp	r0, #0
 8105b1a:	f43f aed9 	beq.w	81058d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 8105b1e:	2601      	movs	r6, #1
 8105b20:	e6d6      	b.n	81058d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8105b22:	462e      	mov	r6, r5
 8105b24:	e494      	b.n	8105450 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8105b26:	462e      	mov	r6, r5
 8105b28:	e511      	b.n	810554e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8105b2a:	462e      	mov	r6, r5
 8105b2c:	e4b2      	b.n	8105494 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8105b2e:	462e      	mov	r6, r5
 8105b30:	e470      	b.n	8105414 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8105b32:	462e      	mov	r6, r5
 8105b34:	e4d0      	b.n	81054d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105b36:	2102      	movs	r1, #2
 8105b38:	1d20      	adds	r0, r4, #4
 8105b3a:	f7ff fb3f 	bl	81051bc <RCCEx_PLL2_Config>
 8105b3e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105b40:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105b42:	2d00      	cmp	r5, #0
 8105b44:	d153      	bne.n	8105bee <HAL_RCCEx_PeriphCLKConfig+0x84a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105b46:	4970      	ldr	r1, [pc, #448]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105b48:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8105b4a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8105b4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8105b50:	4302      	orrs	r2, r0
 8105b52:	64ca      	str	r2, [r1, #76]	; 0x4c
 8105b54:	e6b9      	b.n	81058ca <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b56:	496c      	ldr	r1, [pc, #432]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105b58:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8105b5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105b5e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8105b60:	e46c      	b.n	810543c <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b62:	4969      	ldr	r1, [pc, #420]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105b64:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8105b66:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105b6a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8105b6c:	e487      	b.n	810547e <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b6e:	4966      	ldr	r1, [pc, #408]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105b70:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8105b72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105b76:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8105b78:	e4a3      	b.n	81054c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b7a:	4963      	ldr	r1, [pc, #396]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105b7c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8105b7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105b82:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8105b84:	e4d9      	b.n	810553a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8105b86:	462e      	mov	r6, r5
 8105b88:	e614      	b.n	81057b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105b8a:	495f      	ldr	r1, [pc, #380]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105b8c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8105b8e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8105b90:	f022 0203 	bic.w	r2, r2, #3
 8105b94:	4302      	orrs	r2, r0
 8105b96:	64ca      	str	r2, [r1, #76]	; 0x4c
 8105b98:	e584      	b.n	81056a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8105b9a:	462e      	mov	r6, r5
 8105b9c:	e64a      	b.n	8105834 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8105b9e:	495a      	ldr	r1, [pc, #360]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105ba0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8105ba2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8105ba4:	f022 0207 	bic.w	r2, r2, #7
 8105ba8:	4302      	orrs	r2, r0
 8105baa:	654a      	str	r2, [r1, #84]	; 0x54
 8105bac:	e5c8      	b.n	8105740 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105bae:	4956      	ldr	r1, [pc, #344]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105bb0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8105bb4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8105bb6:	f022 0207 	bic.w	r2, r2, #7
 8105bba:	4302      	orrs	r2, r0
 8105bbc:	658a      	str	r2, [r1, #88]	; 0x58
 8105bbe:	e5d9      	b.n	8105774 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8105bc0:	462e      	mov	r6, r5
 8105bc2:	e50f      	b.n	81055e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8105bc4:	462e      	mov	r6, r5
 8105bc6:	e4a2      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8105bc8:	462e      	mov	r6, r5
 8105bca:	e4dd      	b.n	8105588 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8105bcc:	462e      	mov	r6, r5
 8105bce:	e4f9      	b.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8105bd0:	462e      	mov	r6, r5
 8105bd2:	e60f      	b.n	81057f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8105bd4:	462e      	mov	r6, r5
 8105bd6:	e59a      	b.n	810570e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8105bd8:	462e      	mov	r6, r5
 8105bda:	e658      	b.n	810588e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8105bdc:	462e      	mov	r6, r5
 8105bde:	e668      	b.n	81058b2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105be0:	4949      	ldr	r1, [pc, #292]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105be2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8105be4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105be8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8105bea:	2d00      	cmp	r5, #0
 8105bec:	d0ab      	beq.n	8105b46 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
 8105bee:	462e      	mov	r6, r5
 8105bf0:	e66b      	b.n	81058ca <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105bf2:	4845      	ldr	r0, [pc, #276]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105bf4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105bf6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105bfa:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8105bfc:	2d00      	cmp	r5, #0
 8105bfe:	f47f aedb 	bne.w	81059b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8105c02:	e6df      	b.n	81059c4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c04:	4940      	ldr	r1, [pc, #256]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105c06:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8105c08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105c0c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8105c0e:	2d00      	cmp	r5, #0
 8105c10:	d1e4      	bne.n	8105bdc <HAL_RCCEx_PeriphCLKConfig+0x838>
 8105c12:	e709      	b.n	8105a28 <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105c14:	1d20      	adds	r0, r4, #4
 8105c16:	f7ff fad1 	bl	81051bc <RCCEx_PLL2_Config>
 8105c1a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105c1c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105c1e:	2d00      	cmp	r5, #0
 8105c20:	d1da      	bne.n	8105bd8 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8105c22:	e717      	b.n	8105a54 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105c24:	2102      	movs	r1, #2
 8105c26:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105c2a:	f7ff fb41 	bl	81052b0 <RCCEx_PLL3_Config>
 8105c2e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105c30:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105c32:	2d00      	cmp	r5, #0
 8105c34:	d1cc      	bne.n	8105bd0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8105c36:	e5d5      	b.n	81057e4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105c38:	2102      	movs	r1, #2
 8105c3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105c3e:	f7ff fb37 	bl	81052b0 <RCCEx_PLL3_Config>
 8105c42:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105c44:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105c46:	2d00      	cmp	r5, #0
 8105c48:	d1a7      	bne.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8105c4a:	e5eb      	b.n	8105824 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105c4c:	2101      	movs	r1, #1
 8105c4e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105c52:	f7ff fb2d 	bl	81052b0 <RCCEx_PLL3_Config>
 8105c56:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105c58:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105c5a:	2d00      	cmp	r5, #0
 8105c5c:	d1b4      	bne.n	8105bc8 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8105c5e:	e48c      	b.n	810557a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105c60:	2101      	movs	r1, #1
 8105c62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105c66:	f7ff fb23 	bl	81052b0 <RCCEx_PLL3_Config>
 8105c6a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105c6c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105c6e:	2d00      	cmp	r5, #0
 8105c70:	d1ac      	bne.n	8105bcc <HAL_RCCEx_PeriphCLKConfig+0x828>
 8105c72:	e49f      	b.n	81055b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c74:	4924      	ldr	r1, [pc, #144]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105c76:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8105c78:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105c7c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8105c7e:	2d00      	cmp	r5, #0
 8105c80:	d19e      	bne.n	8105bc0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8105c82:	e6bf      	b.n	8105a04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105c84:	2102      	movs	r1, #2
 8105c86:	1d20      	adds	r0, r4, #4
 8105c88:	f7ff fa98 	bl	81051bc <RCCEx_PLL2_Config>
 8105c8c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105c8e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105c90:	2d00      	cmp	r5, #0
 8105c92:	d197      	bne.n	8105bc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
 8105c94:	e434      	b.n	8105500 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105c96:	2102      	movs	r1, #2
 8105c98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105c9c:	f7ff fb08 	bl	81052b0 <RCCEx_PLL3_Config>
 8105ca0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105ca2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105ca4:	2d00      	cmp	r5, #0
 8105ca6:	f47f af6e 	bne.w	8105b86 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8105caa:	e57b      	b.n	81057a4 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cac:	4916      	ldr	r1, [pc, #88]	; (8105d08 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8105cae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8105cb0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105cb4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8105cb6:	2d00      	cmp	r5, #0
 8105cb8:	f47f acf3 	bne.w	81056a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8105cbc:	e765      	b.n	8105b8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105cbe:	2102      	movs	r1, #2
 8105cc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105cc4:	f7ff faf4 	bl	81052b0 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105cc8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105ccc:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105cce:	2800      	cmp	r0, #0
 8105cd0:	f43f adb8 	beq.w	8105844 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 8105cd4:	2601      	movs	r6, #1
 8105cd6:	e5b5      	b.n	8105844 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105cd8:	2102      	movs	r1, #2
 8105cda:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105cde:	f7ff fae7 	bl	81052b0 <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105ce2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105ce6:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8105ce8:	2800      	cmp	r0, #0
 8105cea:	f43f adb9 	beq.w	8105860 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 8105cee:	2601      	movs	r6, #1
 8105cf0:	e5b6      	b.n	8105860 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8105cf2:	2102      	movs	r1, #2
 8105cf4:	3024      	adds	r0, #36	; 0x24
 8105cf6:	f7ff fadb 	bl	81052b0 <RCCEx_PLL3_Config>
 8105cfa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8105cfc:	2e00      	cmp	r6, #0
 8105cfe:	f43f ab6d 	beq.w	81053dc <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105d02:	6823      	ldr	r3, [r4, #0]
 8105d04:	f7ff bb78 	b.w	81053f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8105d08:	58024400 	.word	0x58024400
 8105d0c:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d10:	2100      	movs	r1, #0
 8105d12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105d16:	f7ff facb 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105d1a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d1c:	4605      	mov	r5, r0
      break;
 8105d1e:	f7ff bbae 	b.w	810547e <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105d22:	2100      	movs	r1, #0
 8105d24:	1d20      	adds	r0, r4, #4
 8105d26:	f7ff fa49 	bl	81051bc <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105d2a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105d2c:	4605      	mov	r5, r0
      break;
 8105d2e:	e655      	b.n	81059dc <HAL_RCCEx_PeriphCLKConfig+0x638>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d30:	2100      	movs	r1, #0
 8105d32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105d36:	f7ff fabb 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105d3a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d3c:	4605      	mov	r5, r0
      break;
 8105d3e:	e64d      	b.n	81059dc <HAL_RCCEx_PeriphCLKConfig+0x638>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d40:	2100      	movs	r1, #0
 8105d42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105d46:	f7ff fab3 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105d4a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d4c:	4605      	mov	r5, r0
      break;
 8105d4e:	f7ff bbf4 	b.w	810553a <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d52:	2100      	movs	r1, #0
 8105d54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105d58:	f7ff faaa 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105d5c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105d5e:	4605      	mov	r5, r0
      break;
 8105d60:	f7ff bb6c 	b.w	810543c <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d64:	4932      	ldr	r1, [pc, #200]	; (8105e30 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8105d66:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8105d68:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8105d6c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8105d6e:	4635      	mov	r5, r6
 8105d70:	e634      	b.n	81059dc <HAL_RCCEx_PeriphCLKConfig+0x638>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105d72:	2100      	movs	r1, #0
 8105d74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8105d78:	f7ff fa9a 	bl	81052b0 <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105d7c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105d7e:	4605      	mov	r5, r0
      break;
 8105d80:	f7ff bb9f 	b.w	81054c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105d84:	2101      	movs	r1, #1
 8105d86:	1d20      	adds	r0, r4, #4
 8105d88:	f7ff fa18 	bl	81051bc <RCCEx_PLL2_Config>
 8105d8c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105d8e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105d90:	2d00      	cmp	r5, #0
 8105d92:	f47f acd4 	bne.w	810573e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8105d96:	e702      	b.n	8105b9e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105d98:	2101      	movs	r1, #1
 8105d9a:	1d20      	adds	r0, r4, #4
 8105d9c:	f7ff fa0e 	bl	81051bc <RCCEx_PLL2_Config>
 8105da0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105da2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105da4:	2d00      	cmp	r5, #0
 8105da6:	f47f ace4 	bne.w	8105772 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8105daa:	e700      	b.n	8105bae <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105dac:	2101      	movs	r1, #1
 8105dae:	1d20      	adds	r0, r4, #4
 8105db0:	f7ff fa04 	bl	81051bc <RCCEx_PLL2_Config>
 8105db4:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105db6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8105db8:	2d00      	cmp	r5, #0
 8105dba:	f47f af0b 	bne.w	8105bd4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8105dbe:	e65c      	b.n	8105a7a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
            ret = HAL_TIMEOUT;
 8105dc0:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105dc2:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 8105dc4:	4635      	mov	r5, r6
 8105dc6:	e470      	b.n	81056aa <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8105dc8:	2601      	movs	r6, #1
 8105dca:	f7ff bb15 	b.w	81053f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105dce:	4818      	ldr	r0, [pc, #96]	; (8105e30 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8105dd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8105dd2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8105dd6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8105dd8:	f7ff bb07 	b.w	81053ea <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8105ddc:	f7fb fe20 	bl	8101a20 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105de0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8105e30 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        tickstart = HAL_GetTick();
 8105de4:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105de6:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105dea:	e004      	b.n	8105df6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105dec:	f7fb fe18 	bl	8101a20 <HAL_GetTick>
 8105df0:	1bc0      	subs	r0, r0, r7
 8105df2:	4548      	cmp	r0, r9
 8105df4:	d8e4      	bhi.n	8105dc0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105df6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8105dfa:	079b      	lsls	r3, r3, #30
 8105dfc:	d5f6      	bpl.n	8105dec <HAL_RCCEx_PeriphCLKConfig+0xa48>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105dfe:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8105e02:	e670      	b.n	8105ae6 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8105e04:	480a      	ldr	r0, [pc, #40]	; (8105e30 <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8105e06:	4a0b      	ldr	r2, [pc, #44]	; (8105e34 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8105e08:	6901      	ldr	r1, [r0, #16]
 8105e0a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8105e0e:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8105e12:	430a      	orrs	r2, r1
 8105e14:	6102      	str	r2, [r0, #16]
 8105e16:	e671      	b.n	8105afc <HAL_RCCEx_PeriphCLKConfig+0x758>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105e18:	6823      	ldr	r3, [r4, #0]
 8105e1a:	462e      	mov	r6, r5
 8105e1c:	e445      	b.n	81056aa <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8105e1e:	2601      	movs	r6, #1
 8105e20:	4635      	mov	r5, r6
 8105e22:	e48d      	b.n	8105740 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 8105e24:	2601      	movs	r6, #1
 8105e26:	4635      	mov	r5, r6
 8105e28:	e43c      	b.n	81056a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8105e2a:	2601      	movs	r6, #1
 8105e2c:	4635      	mov	r5, r6
 8105e2e:	e4a1      	b.n	8105774 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8105e30:	58024400 	.word	0x58024400
 8105e34:	00ffffcf 	.word	0x00ffffcf

08105e38 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8105e38:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105e3a:	f7ff f8ed 	bl	8105018 <HAL_RCC_GetHCLKFreq>
 8105e3e:	4b05      	ldr	r3, [pc, #20]	; (8105e54 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8105e40:	4a05      	ldr	r2, [pc, #20]	; (8105e58 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8105e42:	6a1b      	ldr	r3, [r3, #32]
 8105e44:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8105e48:	5cd3      	ldrb	r3, [r2, r3]
 8105e4a:	f003 031f 	and.w	r3, r3, #31
}
 8105e4e:	40d8      	lsrs	r0, r3
 8105e50:	bd08      	pop	{r3, pc}
 8105e52:	bf00      	nop
 8105e54:	58024400 	.word	0x58024400
 8105e58:	08108134 	.word	0x08108134

08105e5c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105e5c:	4b4f      	ldr	r3, [pc, #316]	; (8105f9c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8105e5e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105e60:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8105e62:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105e64:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8105e66:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8105e68:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8105e6c:	f3c5 3205 	ubfx	r2, r5, #12, #6
  if (pll2m != 0U)
 8105e70:	d05c      	beq.n	8105f2c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8105e72:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105e76:	f3c6 1600 	ubfx	r6, r6, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8105e7a:	fb06 f404 	mul.w	r4, r6, r4
 8105e7e:	ee07 4a90 	vmov	s15, r4
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105e82:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8105e86:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8105e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 8105e8c:	d003      	beq.n	8105e96 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8105e8e:	2902      	cmp	r1, #2
 8105e90:	d075      	beq.n	8105f7e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8105e92:	2900      	cmp	r1, #0
 8105e94:	d04f      	beq.n	8105f36 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105e96:	ee07 2a10 	vmov	s14, r2
 8105e9a:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8105fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8105e9e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8105ea2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8105ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105eac:	ee06 3a90 	vmov	s13, r3
 8105eb0:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8105fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8105eb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8105eb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8105ebc:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8105ec0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8105ec4:	ee67 6a26 	vmul.f32	s13, s14, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8105ec8:	4a34      	ldr	r2, [pc, #208]	; (8105f9c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8105eca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8105ecc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8105ed0:	ee07 3a10 	vmov	s14, r3
 8105ed4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105ed8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8105edc:	ee37 7a06 	vadd.f32	s14, s14, s12
}
 8105ee0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8105ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105eea:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8105eee:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8105ef0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8105ef4:	ee07 3a10 	vmov	s14, r3
 8105ef8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105efc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8105f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f08:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105f0c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8105f0e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8105f12:	ee07 3a90 	vmov	s15, r3
 8105f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105f1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8105f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f22:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8105f26:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8105f2a:	4770      	bx	lr
 8105f2c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105f2e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105f32:	6082      	str	r2, [r0, #8]
}
 8105f34:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105f36:	6819      	ldr	r1, [r3, #0]
 8105f38:	0689      	lsls	r1, r1, #26
 8105f3a:	d527      	bpl.n	8105f8c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105f3c:	681c      	ldr	r4, [r3, #0]
 8105f3e:	491a      	ldr	r1, [pc, #104]	; (8105fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105f42:	eddf 5a18 	vldr	s11, [pc, #96]	; 8105fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105f46:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8105f4a:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105f4c:	ee07 1a10 	vmov	s14, r1
 8105f50:	ee06 2a90 	vmov	s13, r2
 8105f54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105f58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8105f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f60:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8105f64:	ee06 3a90 	vmov	s13, r3
 8105f68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8105f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105f70:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8105f74:	ee76 6a87 	vadd.f32	s13, s13, s14
 8105f78:	ee66 6a86 	vmul.f32	s13, s13, s12
 8105f7c:	e7a4      	b.n	8105ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105f7e:	ee07 2a10 	vmov	s14, r2
 8105f82:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8105fac <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8105f86:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8105f8a:	e78a      	b.n	8105ea2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105f8c:	ee07 2a10 	vmov	s14, r2
 8105f90:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8105fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8105f94:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8105f98:	e783      	b.n	8105ea2 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8105f9a:	bf00      	nop
 8105f9c:	58024400 	.word	0x58024400
 8105fa0:	4a742400 	.word	0x4a742400
 8105fa4:	39000000 	.word	0x39000000
 8105fa8:	03d09000 	.word	0x03d09000
 8105fac:	4b742400 	.word	0x4b742400
 8105fb0:	4c742400 	.word	0x4c742400

08105fb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105fb4:	4b4f      	ldr	r3, [pc, #316]	; (81060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8105fb6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105fb8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105fba:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105fbc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105fbe:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8105fc0:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105fc4:	f3c5 5205 	ubfx	r2, r5, #20, #6
  if (pll3m != 0U)
 8105fc8:	d05c      	beq.n	8106084 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105fca:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105fce:	f3c6 2600 	ubfx	r6, r6, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105fd2:	fb06 f404 	mul.w	r4, r6, r4
 8105fd6:	ee07 4a90 	vmov	s15, r4
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105fda:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8105fde:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 8105fe4:	d003      	beq.n	8105fee <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8105fe6:	2902      	cmp	r1, #2
 8105fe8:	d075      	beq.n	81060d6 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8105fea:	2900      	cmp	r1, #0
 8105fec:	d04f      	beq.n	810608e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105fee:	ee07 2a10 	vmov	s14, r2
 8105ff2:	ed9f 6a41 	vldr	s12, [pc, #260]	; 81060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8105ff6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8105ffa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8105ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106004:	ee06 3a90 	vmov	s13, r3
 8106008:	eddf 5a3c 	vldr	s11, [pc, #240]	; 81060fc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 810600c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8106010:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8106014:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8106018:	ee76 6a86 	vadd.f32	s13, s13, s12
 810601c:	ee67 6a26 	vmul.f32	s13, s14, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8106020:	4a34      	ldr	r2, [pc, #208]	; (81060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8106022:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8106024:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8106028:	ee07 3a10 	vmov	s14, r3
 810602c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8106030:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8106034:	ee37 7a06 	vadd.f32	s14, s14, s12
}
 8106038:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810603a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810603e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106042:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106046:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8106048:	f3c3 4306 	ubfx	r3, r3, #16, #7
 810604c:	ee07 3a10 	vmov	s14, r3
 8106050:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8106054:	ee37 7a06 	vadd.f32	s14, s14, s12
 8106058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810605c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106060:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8106064:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8106066:	f3c3 6306 	ubfx	r3, r3, #24, #7
 810606a:	ee07 3a90 	vmov	s15, r3
 810606e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106072:	ee77 7a86 	vadd.f32	s15, s15, s12
 8106076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810607a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 810607e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8106082:	4770      	bx	lr
 8106084:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106086:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810608a:	6082      	str	r2, [r0, #8]
}
 810608c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810608e:	6819      	ldr	r1, [r3, #0]
 8106090:	0689      	lsls	r1, r1, #26
 8106092:	d527      	bpl.n	81060e4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106094:	681c      	ldr	r4, [r3, #0]
 8106096:	491a      	ldr	r1, [pc, #104]	; (8106100 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8106098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810609a:	eddf 5a18 	vldr	s11, [pc, #96]	; 81060fc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810609e:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 81060a2:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81060a4:	ee07 1a10 	vmov	s14, r1
 81060a8:	ee06 2a90 	vmov	s13, r2
 81060ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81060b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81060b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060b8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 81060bc:	ee06 3a90 	vmov	s13, r3
 81060c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81060c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81060c8:	eee7 6aa5 	vfma.f32	s13, s15, s11
 81060cc:	ee76 6a87 	vadd.f32	s13, s13, s14
 81060d0:	ee66 6a86 	vmul.f32	s13, s13, s12
 81060d4:	e7a4      	b.n	8106020 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81060d6:	ee07 2a10 	vmov	s14, r2
 81060da:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8106104 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 81060de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 81060e2:	e78a      	b.n	8105ffa <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81060e4:	ee07 2a10 	vmov	s14, r2
 81060e8:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8106108 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 81060ec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 81060f0:	e783      	b.n	8105ffa <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 81060f2:	bf00      	nop
 81060f4:	58024400 	.word	0x58024400
 81060f8:	4a742400 	.word	0x4a742400
 81060fc:	39000000 	.word	0x39000000
 8106100:	03d09000 	.word	0x03d09000
 8106104:	4b742400 	.word	0x4b742400
 8106108:	4c742400 	.word	0x4c742400

0810610c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 810610c:	6803      	ldr	r3, [r0, #0]
 810610e:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8106110:	699a      	ldr	r2, [r3, #24]
 8106112:	f042 0208 	orr.w	r2, r2, #8
 8106116:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8106118:	699a      	ldr	r2, [r3, #24]
 810611a:	f042 0210 	orr.w	r2, r2, #16
 810611e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8106120:	681a      	ldr	r2, [r3, #0]
 8106122:	f022 0201 	bic.w	r2, r2, #1
 8106126:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8106128:	691a      	ldr	r2, [r3, #16]
 810612a:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 810612e:	f022 0203 	bic.w	r2, r2, #3
 8106132:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8106134:	689a      	ldr	r2, [r3, #8]
 8106136:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810613a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810613c:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8106140:	2a04      	cmp	r2, #4
 8106142:	d001      	beq.n	8106148 <SPI_CloseTransfer+0x3c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8106144:	068a      	lsls	r2, r1, #26
 8106146:	d42e      	bmi.n	81061a6 <SPI_CloseTransfer+0x9a>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8106148:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 810614c:	2a03      	cmp	r2, #3
 810614e:	d001      	beq.n	8106154 <SPI_CloseTransfer+0x48>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8106150:	064a      	lsls	r2, r1, #25
 8106152:	d41d      	bmi.n	8106190 <SPI_CloseTransfer+0x84>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8106154:	058a      	lsls	r2, r1, #22
 8106156:	d509      	bpl.n	810616c <SPI_CloseTransfer+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8106158:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 810615c:	f042 0201 	orr.w	r2, r2, #1
 8106160:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8106164:	699a      	ldr	r2, [r3, #24]
 8106166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810616a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810616c:	05ca      	lsls	r2, r1, #23
 810616e:	d509      	bpl.n	8106184 <SPI_CloseTransfer+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8106170:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8106174:	f042 0208 	orr.w	r2, r2, #8
 8106178:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810617c:	699a      	ldr	r2, [r3, #24]
 810617e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106182:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8106184:	2300      	movs	r3, #0
 8106186:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810618a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 810618e:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8106190:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8106194:	f042 0204 	orr.w	r2, r2, #4
 8106198:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810619c:	699a      	ldr	r2, [r3, #24]
 810619e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81061a2:	619a      	str	r2, [r3, #24]
 81061a4:	e7d6      	b.n	8106154 <SPI_CloseTransfer+0x48>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81061a6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 81061aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 81061ae:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81061b2:	699a      	ldr	r2, [r3, #24]
 81061b4:	f042 0220 	orr.w	r2, r2, #32
 81061b8:	619a      	str	r2, [r3, #24]
 81061ba:	e7c5      	b.n	8106148 <SPI_CloseTransfer+0x3c>

081061bc <HAL_SPI_Init>:
  if (hspi == NULL)
 81061bc:	2800      	cmp	r0, #0
 81061be:	f000 8094 	beq.w	81062ea <HAL_SPI_Init+0x12e>
{
 81061c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81061c4:	6802      	ldr	r2, [r0, #0]
 81061c6:	4b4b      	ldr	r3, [pc, #300]	; (81062f4 <HAL_SPI_Init+0x138>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81061c8:	2100      	movs	r1, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81061ca:	429a      	cmp	r2, r3
 81061cc:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81061ce:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81061d0:	d015      	beq.n	81061fe <HAL_SPI_Init+0x42>
 81061d2:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 81061d6:	429a      	cmp	r2, r3
 81061d8:	d011      	beq.n	81061fe <HAL_SPI_Init+0x42>
 81061da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 81061de:	429a      	cmp	r2, r3
 81061e0:	d00d      	beq.n	81061fe <HAL_SPI_Init+0x42>
 81061e2:	68c0      	ldr	r0, [r0, #12]
 81061e4:	280f      	cmp	r0, #15
 81061e6:	d808      	bhi.n	81061fa <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81061e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81061ea:	f100 0308 	add.w	r3, r0, #8
 81061ee:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81061f0:	094d      	lsrs	r5, r1, #5

  return data_size * fifo_threashold;
 81061f2:	fb05 3303 	mla	r3, r5, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81061f6:	2b08      	cmp	r3, #8
 81061f8:	d90b      	bls.n	8106212 <HAL_SPI_Init+0x56>
    return HAL_ERROR;
 81061fa:	2001      	movs	r0, #1
}
 81061fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81061fe:	68e0      	ldr	r0, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8106200:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8106202:	f100 0308 	add.w	r3, r0, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8106206:	094d      	lsrs	r5, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8106208:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 810620a:	fb05 3303 	mla	r3, r5, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810620e:	2b10      	cmp	r3, #16
 8106210:	d8f3      	bhi.n	81061fa <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8106212:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8106216:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 810621a:	2b00      	cmp	r3, #0
 810621c:	d05b      	beq.n	81062d6 <HAL_SPI_Init+0x11a>
 810621e:	2700      	movs	r7, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8106220:	2302      	movs	r3, #2
 8106222:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8106226:	6813      	ldr	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106228:	6865      	ldr	r5, [r4, #4]
 810622a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 810622c:	f023 0301 	bic.w	r3, r3, #1
 8106230:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8106232:	69a3      	ldr	r3, [r4, #24]
 8106234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106238:	d03e      	beq.n	81062b8 <HAL_SPI_Init+0xfc>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810623a:	4339      	orrs	r1, r7
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810623c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 810623e:	433b      	orrs	r3, r7
 8106240:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8106242:	433b      	orrs	r3, r7
 8106244:	6927      	ldr	r7, [r4, #16]
 8106246:	433b      	orrs	r3, r7
 8106248:	6967      	ldr	r7, [r4, #20]
 810624a:	433b      	orrs	r3, r7
 810624c:	6a27      	ldr	r7, [r4, #32]
 810624e:	433b      	orrs	r3, r7
 8106250:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8106252:	433b      	orrs	r3, r7
 8106254:	68a7      	ldr	r7, [r4, #8]
 8106256:	433b      	orrs	r3, r7
 8106258:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 810625a:	433b      	orrs	r3, r7
 810625c:	6da7      	ldr	r7, [r4, #88]	; 0x58
 810625e:	433b      	orrs	r3, r7
 8106260:	432b      	orrs	r3, r5
 8106262:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8106264:	69e6      	ldr	r6, [r4, #28]
 8106266:	4331      	orrs	r1, r6
 8106268:	4308      	orrs	r0, r1
 810626a:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810626c:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810626e:	b9b5      	cbnz	r5, 810629e <HAL_SPI_Init+0xe2>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8106270:	6893      	ldr	r3, [r2, #8]
 8106272:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8106276:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 810627a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810627c:	6893      	ldr	r3, [r2, #8]
 810627e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8106282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8106286:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8106288:	6d13      	ldr	r3, [r2, #80]	; 0x50
 810628a:	f023 0301 	bic.w	r3, r3, #1
 810628e:	6513      	str	r3, [r2, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8106290:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8106292:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8106294:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8106298:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 810629c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810629e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 81062a0:	f023 0301 	bic.w	r3, r3, #1
 81062a4:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81062a6:	026b      	lsls	r3, r5, #9
 81062a8:	d5f2      	bpl.n	8106290 <HAL_SPI_Init+0xd4>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81062aa:	68d3      	ldr	r3, [r2, #12]
 81062ac:	6d61      	ldr	r1, [r4, #84]	; 0x54
 81062ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81062b2:	430b      	orrs	r3, r1
 81062b4:	60d3      	str	r3, [r2, #12]
 81062b6:	e7eb      	b.n	8106290 <HAL_SPI_Init+0xd4>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81062b8:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 81062bc:	d017      	beq.n	81062ee <HAL_SPI_Init+0x132>
 81062be:	2d00      	cmp	r5, #0
 81062c0:	d1bb      	bne.n	810623a <HAL_SPI_Init+0x7e>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81062c2:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 81062c6:	d1b8      	bne.n	810623a <HAL_SPI_Init+0x7e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81062c8:	f8d2 c000 	ldr.w	ip, [r2]
 81062cc:	f44c 5c80 	orr.w	ip, ip, #4096	; 0x1000
 81062d0:	f8c2 c000 	str.w	ip, [r2]
 81062d4:	e7b1      	b.n	810623a <HAL_SPI_Init+0x7e>
    HAL_SPI_MspInit(hspi);
 81062d6:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 81062d8:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 81062dc:	f7fb f868 	bl	81013b0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 81062e0:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81062e2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 81062e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 81062e6:	68e0      	ldr	r0, [r4, #12]
 81062e8:	e79a      	b.n	8106220 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 81062ea:	2001      	movs	r0, #1
}
 81062ec:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81062ee:	2e00      	cmp	r6, #0
 81062f0:	d0ea      	beq.n	81062c8 <HAL_SPI_Init+0x10c>
 81062f2:	e7a2      	b.n	810623a <HAL_SPI_Init+0x7e>
 81062f4:	40013000 	.word	0x40013000

081062f8 <HAL_SPI_Transmit>:
{
 81062f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81062fc:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 81062fe:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8106302:	2801      	cmp	r0, #1
 8106304:	f000 808a 	beq.w	810641c <HAL_SPI_Transmit+0x124>
 8106308:	461f      	mov	r7, r3
 810630a:	2301      	movs	r3, #1
 810630c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8106310:	6826      	ldr	r6, [r4, #0]
  tickstart = HAL_GetTick();
 8106312:	468a      	mov	sl, r1
 8106314:	4615      	mov	r5, r2
 8106316:	f7fb fb83 	bl	8101a20 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 810631a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 810631e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8106320:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8106322:	fa5f f983 	uxtb.w	r9, r3
 8106326:	d171      	bne.n	810640c <HAL_SPI_Transmit+0x114>
  if ((pData == NULL) || (Size == 0UL))
 8106328:	f1ba 0f00 	cmp.w	sl, #0
 810632c:	d068      	beq.n	8106400 <HAL_SPI_Transmit+0x108>
 810632e:	2d00      	cmp	r5, #0
 8106330:	d066      	beq.n	8106400 <HAL_SPI_Transmit+0x108>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8106332:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8106334:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8106338:	2103      	movs	r1, #3
 810633a:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810633e:	2300      	movs	r3, #0
    SPI_1LINE_TX(hspi);
 8106340:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8106342:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8106346:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->TxXferCount = Size;
 810634a:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t) 0UL;
 810634e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8106352:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  hspi->pRxBuffPtr  = NULL;
 8106356:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8106358:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    SPI_1LINE_TX(hspi);
 810635c:	bf08      	it	eq
 810635e:	680b      	ldreq	r3, [r1, #0]
  hspi->TxXferSize  = Size;
 8106360:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
    SPI_1LINE_TX(hspi);
 8106364:	bf04      	itt	eq
 8106366:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 810636a:	600b      	streq	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810636c:	684b      	ldr	r3, [r1, #4]
 810636e:	0c1b      	lsrs	r3, r3, #16
 8106370:	041b      	lsls	r3, r3, #16
 8106372:	432b      	orrs	r3, r5
 8106374:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8106376:	680b      	ldr	r3, [r1, #0]
 8106378:	f043 0301 	orr.w	r3, r3, #1
 810637c:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810637e:	6863      	ldr	r3, [r4, #4]
 8106380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106384:	f000 8087 	beq.w	8106496 <HAL_SPI_Transmit+0x19e>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106388:	68e3      	ldr	r3, [r4, #12]
 810638a:	2b0f      	cmp	r3, #15
 810638c:	d84b      	bhi.n	8106426 <HAL_SPI_Transmit+0x12e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810638e:	2b07      	cmp	r3, #7
    while (hspi->TxXferCount > 0UL)
 8106390:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106394:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106396:	f200 80b7 	bhi.w	8106508 <HAL_SPI_Transmit+0x210>
    while (hspi->TxXferCount > 0UL)
 810639a:	b9a3      	cbnz	r3, 81063c6 <HAL_SPI_Transmit+0xce>
 810639c:	e0e2      	b.n	8106564 <HAL_SPI_Transmit+0x26c>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810639e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 81063a0:	2b40      	cmp	r3, #64	; 0x40
 81063a2:	d919      	bls.n	81063d8 <HAL_SPI_Transmit+0xe0>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81063a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81063a6:	f853 2b04 	ldr.w	r2, [r3], #4
 81063aa:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81063ac:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81063ae:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81063b2:	3b04      	subs	r3, #4
 81063b4:	b29b      	uxth	r3, r3
 81063b6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 81063ba:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 81063be:	b292      	uxth	r2, r2
 81063c0:	2a00      	cmp	r2, #0
 81063c2:	f000 80cf 	beq.w	8106564 <HAL_SPI_Transmit+0x26c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81063c6:	694b      	ldr	r3, [r1, #20]
 81063c8:	079a      	lsls	r2, r3, #30
 81063ca:	f140 8081 	bpl.w	81064d0 <HAL_SPI_Transmit+0x1d8>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81063ce:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81063d2:	b29b      	uxth	r3, r3
 81063d4:	2b03      	cmp	r3, #3
 81063d6:	d8e2      	bhi.n	810639e <HAL_SPI_Transmit+0xa6>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81063d8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81063dc:	b29b      	uxth	r3, r3
 81063de:	2b01      	cmp	r3, #1
 81063e0:	d967      	bls.n	81064b2 <HAL_SPI_Transmit+0x1ba>
 81063e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 81063e4:	2b00      	cmp	r3, #0
 81063e6:	d064      	beq.n	81064b2 <HAL_SPI_Transmit+0x1ba>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81063e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81063ea:	f833 2b02 	ldrh.w	r2, [r3], #2
 81063ee:	8432      	strh	r2, [r6, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81063f0:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81063f2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81063f6:	3b02      	subs	r3, #2
 81063f8:	b29b      	uxth	r3, r3
 81063fa:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 81063fe:	e7dc      	b.n	81063ba <HAL_SPI_Transmit+0xc2>
    __HAL_UNLOCK(hspi);
 8106400:	2300      	movs	r3, #0
 8106402:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8106406:	4648      	mov	r0, r9
 8106408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 810640c:	2300      	movs	r3, #0
    return errorcode;
 810640e:	f04f 0902 	mov.w	r9, #2
    __HAL_UNLOCK(hspi);
 8106412:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8106416:	4648      	mov	r0, r9
 8106418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 810641c:	f04f 0902 	mov.w	r9, #2
}
 8106420:	4648      	mov	r0, r9
 8106422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (hspi->TxXferCount > 0UL)
 8106426:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 810642a:	b29b      	uxth	r3, r3
 810642c:	2b00      	cmp	r3, #0
 810642e:	f000 8099 	beq.w	8106564 <HAL_SPI_Transmit+0x26c>
 8106432:	1c7e      	adds	r6, r7, #1
 8106434:	f040 80b4 	bne.w	81065a0 <HAL_SPI_Transmit+0x2a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8106438:	694b      	ldr	r3, [r1, #20]
 810643a:	079d      	lsls	r5, r3, #30
 810643c:	d530      	bpl.n	81064a0 <HAL_SPI_Transmit+0x1a8>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810643e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8106440:	f852 3b04 	ldr.w	r3, [r2], #4
 8106444:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 8106446:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810644a:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 810644c:	3b01      	subs	r3, #1
 810644e:	b29b      	uxth	r3, r3
 8106450:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8106454:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106458:	b29b      	uxth	r3, r3
 810645a:	2b00      	cmp	r3, #0
 810645c:	d1ec      	bne.n	8106438 <HAL_SPI_Transmit+0x140>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810645e:	694b      	ldr	r3, [r1, #20]
 8106460:	0719      	lsls	r1, r3, #28
 8106462:	d405      	bmi.n	8106470 <HAL_SPI_Transmit+0x178>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106464:	f7fb fadc 	bl	8101a20 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8106468:	6823      	ldr	r3, [r4, #0]
 810646a:	695b      	ldr	r3, [r3, #20]
 810646c:	071a      	lsls	r2, r3, #28
 810646e:	d5f9      	bpl.n	8106464 <HAL_SPI_Transmit+0x16c>
  SPI_CloseTransfer(hspi);
 8106470:	4620      	mov	r0, r4
 8106472:	f7ff fe4b 	bl	810610c <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8106476:	2301      	movs	r3, #1
 8106478:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810647c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8106480:	2200      	movs	r2, #0
  __HAL_LOCK(hspi);
 8106482:	ebb3 0902 	subs.w	r9, r3, r2
 8106486:	bf18      	it	ne
 8106488:	f04f 0901 	movne.w	r9, #1
  __HAL_UNLOCK(hspi);
 810648c:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8106490:	4648      	mov	r0, r9
 8106492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8106496:	680b      	ldr	r3, [r1, #0]
 8106498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810649c:	600b      	str	r3, [r1, #0]
 810649e:	e773      	b.n	8106388 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81064a0:	f7fb fabe 	bl	8101a20 <HAL_GetTick>
    while (hspi->TxXferCount > 0UL)
 81064a4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81064a8:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 81064aa:	b29b      	uxth	r3, r3
 81064ac:	2b00      	cmp	r3, #0
 81064ae:	d1c3      	bne.n	8106438 <HAL_SPI_Transmit+0x140>
 81064b0:	e7d5      	b.n	810645e <HAL_SPI_Transmit+0x166>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 81064b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81064b4:	781b      	ldrb	r3, [r3, #0]
 81064b6:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->TxXferCount--;
 81064ba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81064be:	6821      	ldr	r1, [r4, #0]
          hspi->TxXferCount--;
 81064c0:	3b01      	subs	r3, #1
 81064c2:	b29b      	uxth	r3, r3
 81064c4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 81064c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81064ca:	3301      	adds	r3, #1
 81064cc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 81064ce:	e774      	b.n	81063ba <HAL_SPI_Transmit+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81064d0:	f7fb faa6 	bl	8101a20 <HAL_GetTick>
 81064d4:	eba0 0008 	sub.w	r0, r0, r8
 81064d8:	42b8      	cmp	r0, r7
 81064da:	d303      	bcc.n	81064e4 <HAL_SPI_Transmit+0x1ec>
 81064dc:	1c7b      	adds	r3, r7, #1
 81064de:	d103      	bne.n	81064e8 <HAL_SPI_Transmit+0x1f0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81064e0:	6821      	ldr	r1, [r4, #0]
 81064e2:	e76a      	b.n	81063ba <HAL_SPI_Transmit+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81064e4:	2f00      	cmp	r7, #0
 81064e6:	d1fb      	bne.n	81064e0 <HAL_SPI_Transmit+0x1e8>
          SPI_CloseTransfer(hspi);
 81064e8:	4620      	mov	r0, r4
 81064ea:	f7ff fe0f 	bl	810610c <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81064ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 81064f2:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81064f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
          hspi->State = HAL_SPI_STATE_READY;
 81064f8:	2201      	movs	r2, #1
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81064fa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 81064fe:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
          hspi->State = HAL_SPI_STATE_READY;
 8106502:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
          return HAL_ERROR;
 8106506:	e77e      	b.n	8106406 <HAL_SPI_Transmit+0x10e>
    while (hspi->TxXferCount > 0UL)
 8106508:	b363      	cbz	r3, 8106564 <HAL_SPI_Transmit+0x26c>
 810650a:	1c7b      	adds	r3, r7, #1
 810650c:	d017      	beq.n	810653e <HAL_SPI_Transmit+0x246>
 810650e:	e07a      	b.n	8106606 <HAL_SPI_Transmit+0x30e>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8106510:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106514:	b29b      	uxth	r3, r3
 8106516:	2b01      	cmp	r3, #1
 8106518:	d918      	bls.n	810654c <HAL_SPI_Transmit+0x254>
 810651a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810651c:	b1b3      	cbz	r3, 810654c <HAL_SPI_Transmit+0x254>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810651e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8106520:	f852 3b04 	ldr.w	r3, [r2], #4
 8106524:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8106526:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810652a:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810652c:	3b02      	subs	r3, #2
 810652e:	b29b      	uxth	r3, r3
 8106530:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8106534:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106538:	b29b      	uxth	r3, r3
 810653a:	2b00      	cmp	r3, #0
 810653c:	d08f      	beq.n	810645e <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810653e:	694b      	ldr	r3, [r1, #20]
 8106540:	079f      	lsls	r7, r3, #30
 8106542:	d4e5      	bmi.n	8106510 <HAL_SPI_Transmit+0x218>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106544:	f7fb fa6c 	bl	8101a20 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8106548:	6821      	ldr	r1, [r4, #0]
 810654a:	e7f3      	b.n	8106534 <HAL_SPI_Transmit+0x23c>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810654c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 810654e:	f832 3b02 	ldrh.w	r3, [r2], #2
 8106552:	8433      	strh	r3, [r6, #32]
          hspi->TxXferCount--;
 8106554:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8106558:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 810655a:	3b01      	subs	r3, #1
 810655c:	b29b      	uxth	r3, r3
 810655e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8106562:	e7e7      	b.n	8106534 <HAL_SPI_Transmit+0x23c>
 8106564:	1c7d      	adds	r5, r7, #1
 8106566:	f43f af7a 	beq.w	810645e <HAL_SPI_Transmit+0x166>
 810656a:	b90f      	cbnz	r7, 8106570 <HAL_SPI_Transmit+0x278>
 810656c:	e011      	b.n	8106592 <HAL_SPI_Transmit+0x29a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810656e:	6821      	ldr	r1, [r4, #0]
 8106570:	694b      	ldr	r3, [r1, #20]
 8106572:	0718      	lsls	r0, r3, #28
 8106574:	f53f af7c 	bmi.w	8106470 <HAL_SPI_Transmit+0x178>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106578:	f7fb fa52 	bl	8101a20 <HAL_GetTick>
 810657c:	eba0 0008 	sub.w	r0, r0, r8
 8106580:	4287      	cmp	r7, r0
 8106582:	d8f4      	bhi.n	810656e <HAL_SPI_Transmit+0x276>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8106584:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8106588:	f043 0320 	orr.w	r3, r3, #32
 810658c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8106590:	e76e      	b.n	8106470 <HAL_SPI_Transmit+0x178>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8106592:	694b      	ldr	r3, [r1, #20]
 8106594:	071b      	lsls	r3, r3, #28
 8106596:	f53f af6b 	bmi.w	8106470 <HAL_SPI_Transmit+0x178>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810659a:	f7fb fa41 	bl	8101a20 <HAL_GetTick>
 810659e:	e7f1      	b.n	8106584 <HAL_SPI_Transmit+0x28c>
 81065a0:	b987      	cbnz	r7, 81065c4 <HAL_SPI_Transmit+0x2cc>
 81065a2:	e02a      	b.n	81065fa <HAL_SPI_Transmit+0x302>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81065a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 81065a6:	f852 3b04 	ldr.w	r3, [r2], #4
 81065aa:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 81065ac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81065b0:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 81065b2:	3b01      	subs	r3, #1
 81065b4:	b29b      	uxth	r3, r3
 81065b6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 81065ba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81065be:	b29b      	uxth	r3, r3
 81065c0:	2b00      	cmp	r3, #0
 81065c2:	d0d5      	beq.n	8106570 <HAL_SPI_Transmit+0x278>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81065c4:	694b      	ldr	r3, [r1, #20]
 81065c6:	0798      	lsls	r0, r3, #30
 81065c8:	d4ec      	bmi.n	81065a4 <HAL_SPI_Transmit+0x2ac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81065ca:	f7fb fa29 	bl	8101a20 <HAL_GetTick>
 81065ce:	eba0 0008 	sub.w	r0, r0, r8
 81065d2:	4287      	cmp	r7, r0
 81065d4:	d988      	bls.n	81064e8 <HAL_SPI_Transmit+0x1f0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81065d6:	6821      	ldr	r1, [r4, #0]
 81065d8:	e7ef      	b.n	81065ba <HAL_SPI_Transmit+0x2c2>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81065da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 81065dc:	f852 3b04 	ldr.w	r3, [r2], #4
 81065e0:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 81065e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81065e6:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 81065e8:	3b01      	subs	r3, #1
 81065ea:	b29b      	uxth	r3, r3
 81065ec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 81065f0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81065f4:	b29b      	uxth	r3, r3
 81065f6:	2b00      	cmp	r3, #0
 81065f8:	d0cb      	beq.n	8106592 <HAL_SPI_Transmit+0x29a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81065fa:	694b      	ldr	r3, [r1, #20]
 81065fc:	079a      	lsls	r2, r3, #30
 81065fe:	d4ec      	bmi.n	81065da <HAL_SPI_Transmit+0x2e2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106600:	f7fb fa0e 	bl	8101a20 <HAL_GetTick>
          SPI_CloseTransfer(hspi);
 8106604:	e770      	b.n	81064e8 <HAL_SPI_Transmit+0x1f0>
 8106606:	b9c7      	cbnz	r7, 810663a <HAL_SPI_Transmit+0x342>
 8106608:	e03a      	b.n	8106680 <HAL_SPI_Transmit+0x388>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810660a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 810660e:	b29b      	uxth	r3, r3
 8106610:	2b01      	cmp	r3, #1
 8106612:	d939      	bls.n	8106688 <HAL_SPI_Transmit+0x390>
 8106614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8106616:	2b00      	cmp	r3, #0
 8106618:	d036      	beq.n	8106688 <HAL_SPI_Transmit+0x390>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810661a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 810661c:	f853 2b04 	ldr.w	r2, [r3], #4
 8106620:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8106622:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8106624:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106628:	3b02      	subs	r3, #2
 810662a:	b29b      	uxth	r3, r3
 810662c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8106630:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106634:	b29b      	uxth	r3, r3
 8106636:	2b00      	cmp	r3, #0
 8106638:	d09a      	beq.n	8106570 <HAL_SPI_Transmit+0x278>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810663a:	694b      	ldr	r3, [r1, #20]
 810663c:	079d      	lsls	r5, r3, #30
 810663e:	d4e4      	bmi.n	810660a <HAL_SPI_Transmit+0x312>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106640:	f7fb f9ee 	bl	8101a20 <HAL_GetTick>
 8106644:	eba0 0008 	sub.w	r0, r0, r8
 8106648:	4287      	cmp	r7, r0
 810664a:	f67f af4d 	bls.w	81064e8 <HAL_SPI_Transmit+0x1f0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810664e:	6821      	ldr	r1, [r4, #0]
 8106650:	e7ee      	b.n	8106630 <HAL_SPI_Transmit+0x338>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8106652:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106656:	b29b      	uxth	r3, r3
 8106658:	2b01      	cmp	r3, #1
 810665a:	d921      	bls.n	81066a0 <HAL_SPI_Transmit+0x3a8>
 810665c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810665e:	b1fb      	cbz	r3, 81066a0 <HAL_SPI_Transmit+0x3a8>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8106660:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8106662:	f852 3b04 	ldr.w	r3, [r2], #4
 8106666:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8106668:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810666c:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810666e:	3b02      	subs	r3, #2
 8106670:	b29b      	uxth	r3, r3
 8106672:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8106676:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 810667a:	b29b      	uxth	r3, r3
 810667c:	2b00      	cmp	r3, #0
 810667e:	d088      	beq.n	8106592 <HAL_SPI_Transmit+0x29a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8106680:	694b      	ldr	r3, [r1, #20]
 8106682:	0798      	lsls	r0, r3, #30
 8106684:	d5bc      	bpl.n	8106600 <HAL_SPI_Transmit+0x308>
 8106686:	e7e4      	b.n	8106652 <HAL_SPI_Transmit+0x35a>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8106688:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 810668a:	f833 2b02 	ldrh.w	r2, [r3], #2
 810668e:	8432      	strh	r2, [r6, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8106690:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8106692:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106696:	3b01      	subs	r3, #1
 8106698:	b29b      	uxth	r3, r3
 810669a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 810669e:	e7c7      	b.n	8106630 <HAL_SPI_Transmit+0x338>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81066a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 81066a2:	f832 3b02 	ldrh.w	r3, [r2], #2
 81066a6:	8433      	strh	r3, [r6, #32]
          hspi->TxXferCount--;
 81066a8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81066ac:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 81066ae:	3b01      	subs	r3, #1
 81066b0:	b29b      	uxth	r3, r3
 81066b2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 81066b6:	e7de      	b.n	8106676 <HAL_SPI_Transmit+0x37e>

081066b8 <HAL_SPI_TransmitReceive>:
{
 81066b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81066bc:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 81066be:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 81066c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 81066c4:	2b01      	cmp	r3, #1
 81066c6:	f000 8095 	beq.w	81067f4 <HAL_SPI_TransmitReceive+0x13c>
 81066ca:	4604      	mov	r4, r0
 81066cc:	2301      	movs	r3, #1
 81066ce:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 81066d2:	4689      	mov	r9, r1
 81066d4:	4692      	mov	sl, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81066d6:	f8d0 b000 	ldr.w	fp, [r0]
  tickstart = HAL_GetTick();
 81066da:	f7fb f9a1 	bl	8101a20 <HAL_GetTick>
  tmp_state           = hspi->State;
 81066de:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tmp_mode            = hspi->Init.Mode;
 81066e2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 81066e4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 81066e6:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 81066e8:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 81066ea:	d007      	beq.n	81066fc <HAL_SPI_TransmitReceive+0x44>
 81066ec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 81066f0:	d174      	bne.n	81067dc <HAL_SPI_TransmitReceive+0x124>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 81066f2:	68a3      	ldr	r3, [r4, #8]
 81066f4:	2b00      	cmp	r3, #0
 81066f6:	d171      	bne.n	81067dc <HAL_SPI_TransmitReceive+0x124>
 81066f8:	2904      	cmp	r1, #4
 81066fa:	d16f      	bne.n	81067dc <HAL_SPI_TransmitReceive+0x124>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 81066fc:	f1b9 0f00 	cmp.w	r9, #0
 8106700:	d072      	beq.n	81067e8 <HAL_SPI_TransmitReceive+0x130>
 8106702:	f1ba 0f00 	cmp.w	sl, #0
 8106706:	d06f      	beq.n	81067e8 <HAL_SPI_TransmitReceive+0x130>
 8106708:	2e00      	cmp	r6, #0
 810670a:	d06d      	beq.n	81067e8 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810670c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8106710:	6825      	ldr	r5, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8106712:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8106716:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8106718:	bf1c      	itt	ne
 810671a:	2305      	movne	r3, #5
 810671c:	f884 3081 	strbne.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8106720:	2300      	movs	r3, #0
 8106722:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8106726:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 810672a:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 810672e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8106732:	686b      	ldr	r3, [r5, #4]
  hspi->RxXferSize  = Size;
 8106734:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8106738:	0c1b      	lsrs	r3, r3, #16
 810673a:	041b      	lsls	r3, r3, #16
 810673c:	4333      	orrs	r3, r6
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810673e:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8106742:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8106746:	606b      	str	r3, [r5, #4]
  __HAL_SPI_ENABLE(hspi);
 8106748:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810674a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
  __HAL_SPI_ENABLE(hspi);
 810674e:	f043 0301 	orr.w	r3, r3, #1
 8106752:	602b      	str	r3, [r5, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8106754:	d103      	bne.n	810675e <HAL_SPI_TransmitReceive+0xa6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8106756:	682b      	ldr	r3, [r5, #0]
 8106758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810675c:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810675e:	68e3      	ldr	r3, [r4, #12]
 8106760:	2b0f      	cmp	r3, #15
 8106762:	d967      	bls.n	8106834 <HAL_SPI_TransmitReceive+0x17c>
 8106764:	1c78      	adds	r0, r7, #1
 8106766:	f040 8187 	bne.w	8106a78 <HAL_SPI_TransmitReceive+0x3c0>
 810676a:	4637      	mov	r7, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 810676c:	f248 0808 	movw	r8, #32776	; 0x8008
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8106770:	2f00      	cmp	r7, #0
 8106772:	d042      	beq.n	81067fa <HAL_SPI_TransmitReceive+0x142>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8106774:	696b      	ldr	r3, [r5, #20]
 8106776:	079a      	lsls	r2, r3, #30
 8106778:	d50d      	bpl.n	8106796 <HAL_SPI_TransmitReceive+0xde>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810677a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 810677c:	f852 3b04 	ldr.w	r3, [r2], #4
 8106780:	622b      	str	r3, [r5, #32]
        hspi->TxXferCount --;
 8106782:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8106786:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8106788:	3b01      	subs	r3, #1
 810678a:	b29b      	uxth	r3, r3
 810678c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8106790:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
 8106794:	b2bf      	uxth	r7, r7
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8106796:	696b      	ldr	r3, [r5, #20]
 8106798:	ea13 0f08 	tst.w	r3, r8
 810679c:	d046      	beq.n	810682c <HAL_SPI_TransmitReceive+0x174>
 810679e:	2e00      	cmp	r6, #0
 81067a0:	d136      	bne.n	8106810 <HAL_SPI_TransmitReceive+0x158>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81067a2:	f7fb f93d 	bl	8101a20 <HAL_GetTick>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81067a6:	6825      	ldr	r5, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81067a8:	2f00      	cmp	r7, #0
 81067aa:	d1e3      	bne.n	8106774 <HAL_SPI_TransmitReceive+0xbc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81067ac:	696b      	ldr	r3, [r5, #20]
 81067ae:	071e      	lsls	r6, r3, #28
 81067b0:	d405      	bmi.n	81067be <HAL_SPI_TransmitReceive+0x106>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81067b2:	f7fb f935 	bl	8101a20 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81067b6:	6823      	ldr	r3, [r4, #0]
 81067b8:	695b      	ldr	r3, [r3, #20]
 81067ba:	071d      	lsls	r5, r3, #28
 81067bc:	d5f9      	bpl.n	81067b2 <HAL_SPI_TransmitReceive+0xfa>
  SPI_CloseTransfer(hspi);
 81067be:	4620      	mov	r0, r4
 81067c0:	f7ff fca4 	bl	810610c <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 81067c4:	2301      	movs	r3, #1
 81067c6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81067ca:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 81067ce:	2300      	movs	r3, #0
  __HAL_LOCK(hspi);
 81067d0:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 81067d2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 81067d6:	bf18      	it	ne
 81067d8:	2001      	movne	r0, #1
 81067da:	e003      	b.n	81067e4 <HAL_SPI_TransmitReceive+0x12c>
    __HAL_UNLOCK(hspi);
 81067dc:	2300      	movs	r3, #0
 81067de:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 81067e2:	2002      	movs	r0, #2
}
 81067e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_UNLOCK(hspi);
 81067e8:	2300      	movs	r3, #0
 81067ea:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 81067ee:	2001      	movs	r0, #1
}
 81067f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hspi);
 81067f4:	2002      	movs	r0, #2
}
 81067f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81067fa:	2e00      	cmp	r6, #0
 81067fc:	d0d6      	beq.n	81067ac <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81067fe:	696b      	ldr	r3, [r5, #20]
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8106800:	696b      	ldr	r3, [r5, #20]
 8106802:	ea13 0f08 	tst.w	r3, r8
 8106806:	d103      	bne.n	8106810 <HAL_SPI_TransmitReceive+0x158>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106808:	f7fb f90a 	bl	8101a20 <HAL_GetTick>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810680c:	6825      	ldr	r5, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810680e:	e7f4      	b.n	81067fa <HAL_SPI_TransmitReceive+0x142>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106810:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106812:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8106814:	f842 3b04 	str.w	r3, [r2], #4
        hspi->RxXferCount --;
 8106818:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810681c:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 810681e:	3b01      	subs	r3, #1
 8106820:	b29b      	uxth	r3, r3
 8106822:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8106826:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 810682a:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810682c:	f7fb f8f8 	bl	8101a20 <HAL_GetTick>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8106830:	6825      	ldr	r5, [r4, #0]
 8106832:	e79d      	b.n	8106770 <HAL_SPI_TransmitReceive+0xb8>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106834:	2b07      	cmp	r3, #7
 8106836:	46b1      	mov	r9, r6
 8106838:	d960      	bls.n	81068fc <HAL_SPI_TransmitReceive+0x244>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810683a:	bb36      	cbnz	r6, 810688a <HAL_SPI_TransmitReceive+0x1d2>
 810683c:	f1b9 0f00 	cmp.w	r9, #0
 8106840:	f000 8190 	beq.w	8106b64 <HAL_SPI_TransmitReceive+0x4ac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8106844:	696b      	ldr	r3, [r5, #20]
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8106846:	696b      	ldr	r3, [r5, #20]
 8106848:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 810684c:	d012      	beq.n	8106874 <HAL_SPI_TransmitReceive+0x1bc>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810684e:	696b      	ldr	r3, [r5, #20]
 8106850:	041b      	lsls	r3, r3, #16
 8106852:	f140 80de 	bpl.w	8106a12 <HAL_SPI_TransmitReceive+0x35a>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106856:	6b29      	ldr	r1, [r5, #48]	; 0x30
          hspi->RxXferCount -= (uint16_t)2UL;
 8106858:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810685c:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810685e:	3b02      	subs	r3, #2
 8106860:	b29b      	uxth	r3, r3
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106862:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8106866:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810686a:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810686e:	6662      	str	r2, [r4, #100]	; 0x64
          initial_RxXferCount = hspi->RxXferCount;
 8106870:	fa1f f989 	uxth.w	r9, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106874:	f7fb f8d4 	bl	8101a20 <HAL_GetTick>
 8106878:	eba0 0008 	sub.w	r0, r0, r8
 810687c:	42b8      	cmp	r0, r7
 810687e:	d329      	bcc.n	81068d4 <HAL_SPI_TransmitReceive+0x21c>
 8106880:	1c7d      	adds	r5, r7, #1
 8106882:	d129      	bne.n	81068d8 <HAL_SPI_TransmitReceive+0x220>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8106884:	6825      	ldr	r5, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8106886:	2e00      	cmp	r6, #0
 8106888:	d0d8      	beq.n	810683c <HAL_SPI_TransmitReceive+0x184>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 810688a:	696b      	ldr	r3, [r5, #20]
 810688c:	079a      	lsls	r2, r3, #30
 810688e:	d514      	bpl.n	81068ba <HAL_SPI_TransmitReceive+0x202>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8106890:	2e01      	cmp	r6, #1
 8106892:	f000 8097 	beq.w	81069c4 <HAL_SPI_TransmitReceive+0x30c>
 8106896:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8106898:	2b00      	cmp	r3, #0
 810689a:	f000 8093 	beq.w	81069c4 <HAL_SPI_TransmitReceive+0x30c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810689e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81068a0:	f853 2b04 	ldr.w	r2, [r3], #4
 81068a4:	622a      	str	r2, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81068a6:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81068a8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81068ac:	3b02      	subs	r3, #2
 81068ae:	b29b      	uxth	r3, r3
 81068b0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81068b4:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 81068b8:	b2b6      	uxth	r6, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 81068ba:	696b      	ldr	r3, [r5, #20]
 81068bc:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 81068c0:	d0d8      	beq.n	8106874 <HAL_SPI_TransmitReceive+0x1bc>
 81068c2:	f1b9 0f00 	cmp.w	r9, #0
 81068c6:	d1c2      	bne.n	810684e <HAL_SPI_TransmitReceive+0x196>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81068c8:	f7fb f8aa 	bl	8101a20 <HAL_GetTick>
 81068cc:	eba0 0008 	sub.w	r0, r0, r8
 81068d0:	42b8      	cmp	r0, r7
 81068d2:	d2d5      	bcs.n	8106880 <HAL_SPI_TransmitReceive+0x1c8>
 81068d4:	2f00      	cmp	r7, #0
 81068d6:	d1d5      	bne.n	8106884 <HAL_SPI_TransmitReceive+0x1cc>
        SPI_CloseTransfer(hspi);
 81068d8:	4620      	mov	r0, r4
 81068da:	f7ff fc17 	bl	810610c <SPI_CloseTransfer>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81068de:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81068e2:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 81068e4:	2100      	movs	r1, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81068e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81068ea:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
        __HAL_UNLOCK(hspi);
 81068ee:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
        hspi->State = HAL_SPI_STATE_READY;
 81068f2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_ERROR;
 81068f6:	4618      	mov	r0, r3
}
 81068f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81068fc:	bb2e      	cbnz	r6, 810694a <HAL_SPI_TransmitReceive+0x292>
 81068fe:	f1b9 0f00 	cmp.w	r9, #0
 8106902:	f000 812f 	beq.w	8106b64 <HAL_SPI_TransmitReceive+0x4ac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8106906:	696b      	ldr	r3, [r5, #20]
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8106908:	696b      	ldr	r3, [r5, #20]
 810690a:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 810690e:	d011      	beq.n	8106934 <HAL_SPI_TransmitReceive+0x27c>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8106910:	696b      	ldr	r3, [r5, #20]
 8106912:	0418      	lsls	r0, r3, #16
 8106914:	d566      	bpl.n	81069e4 <HAL_SPI_TransmitReceive+0x32c>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106916:	6b29      	ldr	r1, [r5, #48]	; 0x30
          hspi->RxXferCount -= (uint16_t)4UL;
 8106918:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810691c:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810691e:	3b04      	subs	r3, #4
 8106920:	b29b      	uxth	r3, r3
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106922:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 8106926:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810692a:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810692e:	6662      	str	r2, [r4, #100]	; 0x64
          initial_RxXferCount = hspi->RxXferCount;
 8106930:	fa1f f989 	uxth.w	r9, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106934:	f7fb f874 	bl	8101a20 <HAL_GetTick>
 8106938:	eba0 0008 	sub.w	r0, r0, r8
 810693c:	42b8      	cmp	r0, r7
 810693e:	d33e      	bcc.n	81069be <HAL_SPI_TransmitReceive+0x306>
 8106940:	1c79      	adds	r1, r7, #1
 8106942:	d1c9      	bne.n	81068d8 <HAL_SPI_TransmitReceive+0x220>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8106944:	6825      	ldr	r5, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8106946:	2e00      	cmp	r6, #0
 8106948:	d0d9      	beq.n	81068fe <HAL_SPI_TransmitReceive+0x246>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810694a:	696b      	ldr	r3, [r5, #20]
 810694c:	079b      	lsls	r3, r3, #30
 810694e:	d529      	bpl.n	81069a4 <HAL_SPI_TransmitReceive+0x2ec>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8106950:	2e03      	cmp	r6, #3
 8106952:	d911      	bls.n	8106978 <HAL_SPI_TransmitReceive+0x2c0>
 8106954:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8106956:	2b40      	cmp	r3, #64	; 0x40
 8106958:	d911      	bls.n	810697e <HAL_SPI_TransmitReceive+0x2c6>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810695a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 810695c:	f853 2b04 	ldr.w	r2, [r3], #4
 8106960:	622a      	str	r2, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8106962:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8106964:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106968:	3b04      	subs	r3, #4
 810696a:	b29b      	uxth	r3, r3
 810696c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8106970:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8106974:	b2b6      	uxth	r6, r6
 8106976:	e015      	b.n	81069a4 <HAL_SPI_TransmitReceive+0x2ec>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8106978:	2e01      	cmp	r6, #1
 810697a:	d002      	beq.n	8106982 <HAL_SPI_TransmitReceive+0x2ca>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810697c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810697e:	2b00      	cmp	r3, #0
 8106980:	d16a      	bne.n	8106a58 <HAL_SPI_TransmitReceive+0x3a0>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8106982:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8106984:	781b      	ldrb	r3, [r3, #0]
 8106986:	f885 3020 	strb.w	r3, [r5, #32]
          hspi->TxXferCount--;
 810698a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 810698e:	6825      	ldr	r5, [r4, #0]
          hspi->TxXferCount--;
 8106990:	3b01      	subs	r3, #1
 8106992:	b29b      	uxth	r3, r3
 8106994:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8106998:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          initial_TxXferCount = hspi->TxXferCount;
 810699a:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810699e:	3301      	adds	r3, #1
 81069a0:	65e3      	str	r3, [r4, #92]	; 0x5c
          initial_TxXferCount = hspi->TxXferCount;
 81069a2:	b2b6      	uxth	r6, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 81069a4:	696b      	ldr	r3, [r5, #20]
 81069a6:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 81069aa:	d0c3      	beq.n	8106934 <HAL_SPI_TransmitReceive+0x27c>
 81069ac:	f1b9 0f00 	cmp.w	r9, #0
 81069b0:	d1ae      	bne.n	8106910 <HAL_SPI_TransmitReceive+0x258>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81069b2:	f7fb f835 	bl	8101a20 <HAL_GetTick>
 81069b6:	eba0 0008 	sub.w	r0, r0, r8
 81069ba:	42b8      	cmp	r0, r7
 81069bc:	d2c0      	bcs.n	8106940 <HAL_SPI_TransmitReceive+0x288>
 81069be:	2f00      	cmp	r7, #0
 81069c0:	d1c0      	bne.n	8106944 <HAL_SPI_TransmitReceive+0x28c>
 81069c2:	e789      	b.n	81068d8 <HAL_SPI_TransmitReceive+0x220>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81069c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81069c6:	f833 2b02 	ldrh.w	r2, [r3], #2
 81069ca:	f8ab 2020 	strh.w	r2, [fp, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81069ce:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 81069d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81069d4:	3b01      	subs	r3, #1
 81069d6:	b29b      	uxth	r3, r3
 81069d8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81069dc:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 81069e0:	b2b6      	uxth	r6, r6
 81069e2:	e76a      	b.n	81068ba <HAL_SPI_TransmitReceive+0x202>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 81069e4:	696b      	ldr	r3, [r5, #20]
 81069e6:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 81069ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81069ee:	d921      	bls.n	8106a34 <HAL_SPI_TransmitReceive+0x37c>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81069f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81069f2:	f8bb 2030 	ldrh.w	r2, [fp, #48]	; 0x30
 81069f6:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81069fa:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 81069fc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106a00:	3b02      	subs	r3, #2
 8106a02:	b29b      	uxth	r3, r3
 8106a04:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8106a08:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8106a0c:	fa1f f989 	uxth.w	r9, r9
 8106a10:	e790      	b.n	8106934 <HAL_SPI_TransmitReceive+0x27c>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106a14:	f8bb 2030 	ldrh.w	r2, [fp, #48]	; 0x30
 8106a18:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8106a1c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8106a1e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106a22:	3b01      	subs	r3, #1
 8106a24:	b29b      	uxth	r3, r3
 8106a26:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8106a2a:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8106a2e:	fa1f f989 	uxth.w	r9, r9
 8106a32:	e71f      	b.n	8106874 <HAL_SPI_TransmitReceive+0x1bc>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8106a34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106a36:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8106a3a:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8106a3c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106a40:	3b01      	subs	r3, #1
 8106a42:	b29b      	uxth	r3, r3
 8106a44:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8106a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
          initial_RxXferCount = hspi->RxXferCount;
 8106a4a:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8106a4e:	3301      	adds	r3, #1
 8106a50:	6663      	str	r3, [r4, #100]	; 0x64
          initial_RxXferCount = hspi->RxXferCount;
 8106a52:	fa1f f989 	uxth.w	r9, r9
 8106a56:	e76d      	b.n	8106934 <HAL_SPI_TransmitReceive+0x27c>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8106a58:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8106a5a:	f833 2b02 	ldrh.w	r2, [r3], #2
 8106a5e:	f8ab 2020 	strh.w	r2, [fp, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8106a62:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8106a64:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106a68:	3b02      	subs	r3, #2
 8106a6a:	b29b      	uxth	r3, r3
 8106a6c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8106a70:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8106a74:	b2b6      	uxth	r6, r6
 8106a76:	e795      	b.n	81069a4 <HAL_SPI_TransmitReceive+0x2ec>
 8106a78:	2f00      	cmp	r7, #0
 8106a7a:	d04e      	beq.n	8106b1a <HAL_SPI_TransmitReceive+0x462>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106a7c:	46b1      	mov	r9, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8106a7e:	f248 0a08 	movw	sl, #32776	; 0x8008
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8106a82:	b306      	cbz	r6, 8106ac6 <HAL_SPI_TransmitReceive+0x40e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8106a84:	696b      	ldr	r3, [r5, #20]
 8106a86:	0799      	lsls	r1, r3, #30
 8106a88:	d50d      	bpl.n	8106aa6 <HAL_SPI_TransmitReceive+0x3ee>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8106a8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8106a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8106a90:	622a      	str	r2, [r5, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8106a92:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8106a94:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8106a98:	3b01      	subs	r3, #1
 8106a9a:	b29b      	uxth	r3, r3
 8106a9c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8106aa0:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8106aa4:	b2b6      	uxth	r6, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8106aa6:	696b      	ldr	r3, [r5, #20]
 8106aa8:	ea13 0f0a 	tst.w	r3, sl
 8106aac:	d002      	beq.n	8106ab4 <HAL_SPI_TransmitReceive+0x3fc>
 8106aae:	f1b9 0f00 	cmp.w	r9, #0
 8106ab2:	d110      	bne.n	8106ad6 <HAL_SPI_TransmitReceive+0x41e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106ab4:	f7fa ffb4 	bl	8101a20 <HAL_GetTick>
 8106ab8:	eba0 0008 	sub.w	r0, r0, r8
 8106abc:	4287      	cmp	r7, r0
 8106abe:	f67f af0b 	bls.w	81068d8 <HAL_SPI_TransmitReceive+0x220>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8106ac2:	6825      	ldr	r5, [r4, #0]
 8106ac4:	e7dd      	b.n	8106a82 <HAL_SPI_TransmitReceive+0x3ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8106ac6:	f1b9 0f00 	cmp.w	r9, #0
 8106aca:	d015      	beq.n	8106af8 <HAL_SPI_TransmitReceive+0x440>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8106acc:	696b      	ldr	r3, [r5, #20]
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8106ace:	696b      	ldr	r3, [r5, #20]
 8106ad0:	ea13 0f0a 	tst.w	r3, sl
 8106ad4:	d0ee      	beq.n	8106ab4 <HAL_SPI_TransmitReceive+0x3fc>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106ad6:	6b29      	ldr	r1, [r5, #48]	; 0x30
        hspi->RxXferCount --;
 8106ad8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106adc:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8106ade:	3b01      	subs	r3, #1
 8106ae0:	b29b      	uxth	r3, r3
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106ae2:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 8106ae6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8106aea:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8106aee:	6662      	str	r2, [r4, #100]	; 0x64
        initial_RxXferCount = hspi->RxXferCount;
 8106af0:	fa1f f989 	uxth.w	r9, r9
 8106af4:	e7de      	b.n	8106ab4 <HAL_SPI_TransmitReceive+0x3fc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8106af6:	6825      	ldr	r5, [r4, #0]
 8106af8:	696b      	ldr	r3, [r5, #20]
 8106afa:	071b      	lsls	r3, r3, #28
 8106afc:	f53f ae5f 	bmi.w	81067be <HAL_SPI_TransmitReceive+0x106>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106b00:	f7fa ff8e 	bl	8101a20 <HAL_GetTick>
 8106b04:	eba0 0008 	sub.w	r0, r0, r8
 8106b08:	4287      	cmp	r7, r0
 8106b0a:	d8f4      	bhi.n	8106af6 <HAL_SPI_TransmitReceive+0x43e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8106b0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8106b10:	f043 0320 	orr.w	r3, r3, #32
 8106b14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8106b18:	e651      	b.n	81067be <HAL_SPI_TransmitReceive+0x106>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8106b1a:	696b      	ldr	r3, [r5, #20]
 8106b1c:	0799      	lsls	r1, r3, #30
 8106b1e:	d50c      	bpl.n	8106b3a <HAL_SPI_TransmitReceive+0x482>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8106b20:	464a      	mov	r2, r9
 8106b22:	f852 3b04 	ldr.w	r3, [r2], #4
 8106b26:	622b      	str	r3, [r5, #32]
        hspi->TxXferCount --;
 8106b28:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8106b2c:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8106b2e:	3b01      	subs	r3, #1
 8106b30:	b29b      	uxth	r3, r3
 8106b32:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8106b36:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8106b3a:	696a      	ldr	r2, [r5, #20]
 8106b3c:	f248 0308 	movw	r3, #32776	; 0x8008
 8106b40:	421a      	tst	r2, r3
 8106b42:	d00c      	beq.n	8106b5e <HAL_SPI_TransmitReceive+0x4a6>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106b44:	6b29      	ldr	r1, [r5, #48]	; 0x30
        hspi->RxXferCount --;
 8106b46:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106b4a:	4652      	mov	r2, sl
        hspi->RxXferCount --;
 8106b4c:	3b01      	subs	r3, #1
 8106b4e:	b29b      	uxth	r3, r3
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106b50:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 8106b54:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8106b58:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8106b5c:	6662      	str	r2, [r4, #100]	; 0x64
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106b5e:	f7fa ff5f 	bl	8101a20 <HAL_GetTick>
        SPI_CloseTransfer(hspi);
 8106b62:	e6b9      	b.n	81068d8 <HAL_SPI_TransmitReceive+0x220>
 8106b64:	1c7a      	adds	r2, r7, #1
 8106b66:	f43f ae21 	beq.w	81067ac <HAL_SPI_TransmitReceive+0xf4>
 8106b6a:	2f00      	cmp	r7, #0
 8106b6c:	d1c4      	bne.n	8106af8 <HAL_SPI_TransmitReceive+0x440>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8106b6e:	696b      	ldr	r3, [r5, #20]
 8106b70:	0718      	lsls	r0, r3, #28
 8106b72:	f53f ae24 	bmi.w	81067be <HAL_SPI_TransmitReceive+0x106>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106b76:	f7fa ff53 	bl	8101a20 <HAL_GetTick>
 8106b7a:	e7c7      	b.n	8106b0c <HAL_SPI_TransmitReceive+0x454>

08106b7c <HAL_SPI_Receive>:
{
 8106b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106b80:	4698      	mov	r8, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8106b82:	6843      	ldr	r3, [r0, #4]
 8106b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
{
 8106b88:	b082      	sub	sp, #8
 8106b8a:	4604      	mov	r4, r0
 8106b8c:	4616      	mov	r6, r2
 8106b8e:	460d      	mov	r5, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8106b90:	f000 808b 	beq.w	8106caa <HAL_SPI_Receive+0x12e>
  __HAL_LOCK(hspi);
 8106b94:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8106b98:	2b01      	cmp	r3, #1
 8106b9a:	f000 809c 	beq.w	8106cd6 <HAL_SPI_Receive+0x15a>
 8106b9e:	2301      	movs	r3, #1
 8106ba0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8106ba4:	6827      	ldr	r7, [r4, #0]
  tickstart = HAL_GetTick();
 8106ba6:	f7fa ff3b 	bl	8101a20 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8106baa:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8106bae:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8106bb0:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8106bb2:	fa5f f983 	uxtb.w	r9, r3
 8106bb6:	d16f      	bne.n	8106c98 <HAL_SPI_Receive+0x11c>
  if ((pData == NULL) || (Size == 0UL))
 8106bb8:	2d00      	cmp	r5, #0
 8106bba:	f000 8085 	beq.w	8106cc8 <HAL_SPI_Receive+0x14c>
 8106bbe:	2e00      	cmp	r6, #0
 8106bc0:	f000 8082 	beq.w	8106cc8 <HAL_SPI_Receive+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8106bc4:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8106bc6:	6665      	str	r5, [r4, #100]	; 0x64
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8106bc8:	2300      	movs	r3, #0
    SPI_1LINE_RX(hspi);
 8106bca:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = NULL;
 8106bcc:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8106bce:	2104      	movs	r1, #4
 8106bd0:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8106bd4:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8106bd8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8106bdc:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8106be0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 8106be4:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  hspi->TxXferSize  = (uint16_t) 0UL;
 8106be8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    SPI_1LINE_RX(hspi);
 8106bec:	bf08      	it	eq
 8106bee:	682b      	ldreq	r3, [r5, #0]
  hspi->RxXferSize  = Size;
 8106bf0:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
    SPI_1LINE_RX(hspi);
 8106bf4:	bf04      	itt	eq
 8106bf6:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 8106bfa:	602b      	streq	r3, [r5, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8106bfc:	686b      	ldr	r3, [r5, #4]
 8106bfe:	0c1b      	lsrs	r3, r3, #16
 8106c00:	041b      	lsls	r3, r3, #16
 8106c02:	4333      	orrs	r3, r6
 8106c04:	606b      	str	r3, [r5, #4]
  __HAL_SPI_ENABLE(hspi);
 8106c06:	682b      	ldr	r3, [r5, #0]
 8106c08:	f043 0301 	orr.w	r3, r3, #1
 8106c0c:	602b      	str	r3, [r5, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8106c0e:	6863      	ldr	r3, [r4, #4]
 8106c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    SPI_1LINE_RX(hspi);
 8106c14:	4629      	mov	r1, r5
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8106c16:	f000 809b 	beq.w	8106d50 <HAL_SPI_Receive+0x1d4>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8106c1a:	68e3      	ldr	r3, [r4, #12]
 8106c1c:	2b0f      	cmp	r3, #15
 8106c1e:	d860      	bhi.n	8106ce2 <HAL_SPI_Receive+0x166>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106c20:	2b07      	cmp	r3, #7
    while (hspi->RxXferCount > 0UL)
 8106c22:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106c26:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8106c28:	f200 80db 	bhi.w	8106de2 <HAL_SPI_Receive+0x266>
    while (hspi->RxXferCount > 0UL)
 8106c2c:	2b00      	cmp	r3, #0
 8106c2e:	d07b      	beq.n	8106d28 <HAL_SPI_Receive+0x1ac>
 8106c30:	f1b8 0f00 	cmp.w	r8, #0
 8106c34:	f000 816c 	beq.w	8106f10 <HAL_SPI_Receive+0x394>
 8106c38:	f1b8 3fff 	cmp.w	r8, #4294967295
 8106c3c:	d011      	beq.n	8106c62 <HAL_SPI_Receive+0xe6>
 8106c3e:	e11c      	b.n	8106e7a <HAL_SPI_Receive+0x2fe>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106c40:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8106c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8106c44:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106c48:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 8106c4c:	3b04      	subs	r3, #4
 8106c4e:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8106c50:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8106c52:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106c56:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106c5a:	b29b      	uxth	r3, r3
 8106c5c:	2b00      	cmp	r3, #0
 8106c5e:	d063      	beq.n	8106d28 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8106c60:	6821      	ldr	r1, [r4, #0]
 8106c62:	694b      	ldr	r3, [r1, #20]
 8106c64:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8106c68:	f000 80aa 	beq.w	8106dc0 <HAL_SPI_Receive+0x244>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8106c6c:	694b      	ldr	r3, [r1, #20]
 8106c6e:	041b      	lsls	r3, r3, #16
 8106c70:	d4e6      	bmi.n	8106c40 <HAL_SPI_Receive+0xc4>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8106c72:	694b      	ldr	r3, [r1, #20]
 8106c74:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8106c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106c7c:	f240 80a3 	bls.w	8106dc6 <HAL_SPI_Receive+0x24a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106c80:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106c82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8106c84:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount -= (uint16_t)2UL;
 8106c88:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8106c8c:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8106c8e:	3b02      	subs	r3, #2
 8106c90:	b29b      	uxth	r3, r3
 8106c92:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8106c96:	e7de      	b.n	8106c56 <HAL_SPI_Receive+0xda>
    __HAL_UNLOCK(hspi);
 8106c98:	2300      	movs	r3, #0
 8106c9a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8106c9e:	f04f 0902 	mov.w	r9, #2
}
 8106ca2:	4648      	mov	r0, r9
 8106ca4:	b002      	add	sp, #8
 8106ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8106caa:	6883      	ldr	r3, [r0, #8]
 8106cac:	2b00      	cmp	r3, #0
 8106cae:	f47f af71 	bne.w	8106b94 <HAL_SPI_Receive+0x18>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8106cb2:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8106cb4:	f8cd 8000 	str.w	r8, [sp]
 8106cb8:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8106cba:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8106cbe:	460a      	mov	r2, r1
 8106cc0:	f7ff fcfa 	bl	81066b8 <HAL_SPI_TransmitReceive>
 8106cc4:	4681      	mov	r9, r0
 8106cc6:	e7ec      	b.n	8106ca2 <HAL_SPI_Receive+0x126>
    __HAL_UNLOCK(hspi);
 8106cc8:	2300      	movs	r3, #0
}
 8106cca:	4648      	mov	r0, r9
    __HAL_UNLOCK(hspi);
 8106ccc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8106cd0:	b002      	add	sp, #8
 8106cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8106cd6:	f04f 0902 	mov.w	r9, #2
}
 8106cda:	4648      	mov	r0, r9
 8106cdc:	b002      	add	sp, #8
 8106cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (hspi->RxXferCount > 0UL)
 8106ce2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106ce6:	b29b      	uxth	r3, r3
 8106ce8:	b1f3      	cbz	r3, 8106d28 <HAL_SPI_Receive+0x1ac>
 8106cea:	f1b8 0f00 	cmp.w	r8, #0
 8106cee:	f000 8151 	beq.w	8106f94 <HAL_SPI_Receive+0x418>
 8106cf2:	f1b8 3fff 	cmp.w	r8, #4294967295
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8106cf6:	bf18      	it	ne
 8106cf8:	f248 0508 	movwne	r5, #32776	; 0x8008
 8106cfc:	d13e      	bne.n	8106d7c <HAL_SPI_Receive+0x200>
 8106cfe:	f248 0608 	movw	r6, #32776	; 0x8008
 8106d02:	696b      	ldr	r3, [r5, #20]
 8106d04:	4233      	tst	r3, r6
 8106d06:	d052      	beq.n	8106dae <HAL_SPI_Receive+0x232>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106d08:	6b29      	ldr	r1, [r5, #48]	; 0x30
        hspi->RxXferCount--;
 8106d0a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8106d10:	3b01      	subs	r3, #1
 8106d12:	b29b      	uxth	r3, r3
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106d14:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount--;
 8106d18:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106d1c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8106d20:	6662      	str	r2, [r4, #100]	; 0x64
    while (hspi->RxXferCount > 0UL)
 8106d22:	b29b      	uxth	r3, r3
 8106d24:	2b00      	cmp	r3, #0
 8106d26:	d1ec      	bne.n	8106d02 <HAL_SPI_Receive+0x186>
  SPI_CloseTransfer(hspi);
 8106d28:	4620      	mov	r0, r4
 8106d2a:	f7ff f9ef 	bl	810610c <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8106d2e:	2301      	movs	r3, #1
 8106d30:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106d34:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8106d38:	2300      	movs	r3, #0
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8106d3a:	ebb0 0903 	subs.w	r9, r0, r3
 8106d3e:	bf18      	it	ne
 8106d40:	f04f 0901 	movne.w	r9, #1
}
 8106d44:	4648      	mov	r0, r9
  __HAL_UNLOCK(hspi);
 8106d46:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8106d4a:	b002      	add	sp, #8
 8106d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8106d50:	682b      	ldr	r3, [r5, #0]
 8106d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8106d56:	602b      	str	r3, [r5, #0]
 8106d58:	e75f      	b.n	8106c1a <HAL_SPI_Receive+0x9e>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106d5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106d5c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8106d5e:	f842 3b04 	str.w	r3, [r2], #4
        hspi->RxXferCount--;
 8106d62:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8106d66:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8106d68:	3b01      	subs	r3, #1
 8106d6a:	b29b      	uxth	r3, r3
 8106d6c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106d70:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106d74:	b29b      	uxth	r3, r3
 8106d76:	2b00      	cmp	r3, #0
 8106d78:	d0d6      	beq.n	8106d28 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8106d7a:	6821      	ldr	r1, [r4, #0]
 8106d7c:	694b      	ldr	r3, [r1, #20]
 8106d7e:	422b      	tst	r3, r5
 8106d80:	d1eb      	bne.n	8106d5a <HAL_SPI_Receive+0x1de>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106d82:	f7fa fe4d 	bl	8101a20 <HAL_GetTick>
 8106d86:	eba0 000a 	sub.w	r0, r0, sl
 8106d8a:	4580      	cmp	r8, r0
 8106d8c:	d8f0      	bhi.n	8106d70 <HAL_SPI_Receive+0x1f4>
          SPI_CloseTransfer(hspi);
 8106d8e:	4620      	mov	r0, r4
 8106d90:	f7ff f9bc 	bl	810610c <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106d94:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 8106d98:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
          hspi->State = HAL_SPI_STATE_READY;
 8106d9e:	2201      	movs	r2, #1
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8106da0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 8106da4:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
          hspi->State = HAL_SPI_STATE_READY;
 8106da8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
          return HAL_ERROR;
 8106dac:	e779      	b.n	8106ca2 <HAL_SPI_Receive+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106dae:	f7fa fe37 	bl	8101a20 <HAL_GetTick>
    while (hspi->RxXferCount > 0UL)
 8106db2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106db6:	b29b      	uxth	r3, r3
 8106db8:	2b00      	cmp	r3, #0
 8106dba:	d0b5      	beq.n	8106d28 <HAL_SPI_Receive+0x1ac>
 8106dbc:	6825      	ldr	r5, [r4, #0]
 8106dbe:	e7a0      	b.n	8106d02 <HAL_SPI_Receive+0x186>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106dc0:	f7fa fe2e 	bl	8101a20 <HAL_GetTick>
 8106dc4:	e747      	b.n	8106c56 <HAL_SPI_Receive+0xda>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8106dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106dc8:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8106dcc:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8106dce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8106dd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8106dd4:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8106dd6:	3201      	adds	r2, #1
          hspi->RxXferCount--;
 8106dd8:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8106dda:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8106ddc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8106de0:	e739      	b.n	8106c56 <HAL_SPI_Receive+0xda>
    while (hspi->RxXferCount > 0UL)
 8106de2:	2b00      	cmp	r3, #0
 8106de4:	d0a0      	beq.n	8106d28 <HAL_SPI_Receive+0x1ac>
 8106de6:	f1b8 0f00 	cmp.w	r8, #0
 8106dea:	f000 80bb 	beq.w	8106f64 <HAL_SPI_Receive+0x3e8>
 8106dee:	f1b8 3fff 	cmp.w	r8, #4294967295
 8106df2:	d011      	beq.n	8106e18 <HAL_SPI_Receive+0x29c>
 8106df4:	e067      	b.n	8106ec6 <HAL_SPI_Receive+0x34a>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106df6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8106df8:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8106dfa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106dfe:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8106e02:	3b02      	subs	r3, #2
 8106e04:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8106e06:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8106e08:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106e0c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106e10:	b29b      	uxth	r3, r3
 8106e12:	2b00      	cmp	r3, #0
 8106e14:	d088      	beq.n	8106d28 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8106e16:	6821      	ldr	r1, [r4, #0]
 8106e18:	694b      	ldr	r3, [r1, #20]
 8106e1a:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8106e1e:	d00e      	beq.n	8106e3e <HAL_SPI_Receive+0x2c2>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8106e20:	694b      	ldr	r3, [r1, #20]
 8106e22:	041d      	lsls	r5, r3, #16
 8106e24:	d4e7      	bmi.n	8106df6 <HAL_SPI_Receive+0x27a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106e26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106e28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8106e2a:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8106e2e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8106e32:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8106e34:	3b01      	subs	r3, #1
 8106e36:	b29b      	uxth	r3, r3
 8106e38:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8106e3c:	e7e6      	b.n	8106e0c <HAL_SPI_Receive+0x290>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106e3e:	f7fa fdef 	bl	8101a20 <HAL_GetTick>
 8106e42:	e7e3      	b.n	8106e0c <HAL_SPI_Receive+0x290>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8106e44:	694b      	ldr	r3, [r1, #20]
 8106e46:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8106e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106e4e:	f200 80cb 	bhi.w	8106fe8 <HAL_SPI_Receive+0x46c>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8106e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106e54:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8106e58:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8106e5a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8106e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8106e60:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8106e62:	3201      	adds	r2, #1
          hspi->RxXferCount--;
 8106e64:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8106e66:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8106e68:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106e6c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106e70:	b29b      	uxth	r3, r3
 8106e72:	2b00      	cmp	r3, #0
 8106e74:	f43f af58 	beq.w	8106d28 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8106e78:	6821      	ldr	r1, [r4, #0]
 8106e7a:	694b      	ldr	r3, [r1, #20]
 8106e7c:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8106e80:	f000 80aa 	beq.w	8106fd8 <HAL_SPI_Receive+0x45c>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8106e84:	694b      	ldr	r3, [r1, #20]
 8106e86:	041e      	lsls	r6, r3, #16
 8106e88:	d5dc      	bpl.n	8106e44 <HAL_SPI_Receive+0x2c8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106e8c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8106e8e:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 8106e92:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8106e96:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8106e98:	3b04      	subs	r3, #4
 8106e9a:	b29b      	uxth	r3, r3
 8106e9c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8106ea0:	e7e4      	b.n	8106e6c <HAL_SPI_Receive+0x2f0>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106ea2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106ea4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8106ea6:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8106eaa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8106eae:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8106eb0:	3b01      	subs	r3, #1
 8106eb2:	b29b      	uxth	r3, r3
 8106eb4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106eb8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106ebc:	b29b      	uxth	r3, r3
 8106ebe:	2b00      	cmp	r3, #0
 8106ec0:	f43f af32 	beq.w	8106d28 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8106ec4:	6821      	ldr	r1, [r4, #0]
 8106ec6:	694b      	ldr	r3, [r1, #20]
 8106ec8:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8106ecc:	d07c      	beq.n	8106fc8 <HAL_SPI_Receive+0x44c>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8106ece:	694b      	ldr	r3, [r1, #20]
 8106ed0:	0418      	lsls	r0, r3, #16
 8106ed2:	d5e6      	bpl.n	8106ea2 <HAL_SPI_Receive+0x326>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106ed4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106ed6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8106ed8:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8106edc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8106ee0:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8106ee2:	3b02      	subs	r3, #2
 8106ee4:	b29b      	uxth	r3, r3
 8106ee6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8106eea:	e7e5      	b.n	8106eb8 <HAL_SPI_Receive+0x33c>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106eec:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8106eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8106ef0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106ef4:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 8106ef8:	3b04      	subs	r3, #4
 8106efa:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8106efc:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8106efe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106f02:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106f06:	b29b      	uxth	r3, r3
 8106f08:	2b00      	cmp	r3, #0
 8106f0a:	f43f af0d 	beq.w	8106d28 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8106f0e:	6821      	ldr	r1, [r4, #0]
 8106f10:	694b      	ldr	r3, [r1, #20]
 8106f12:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8106f16:	d054      	beq.n	8106fc2 <HAL_SPI_Receive+0x446>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8106f18:	694b      	ldr	r3, [r1, #20]
 8106f1a:	041b      	lsls	r3, r3, #16
 8106f1c:	d4e6      	bmi.n	8106eec <HAL_SPI_Receive+0x370>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8106f1e:	694b      	ldr	r3, [r1, #20]
 8106f20:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8106f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106f28:	d96a      	bls.n	8107000 <HAL_SPI_Receive+0x484>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106f2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8106f2e:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount -= (uint16_t)2UL;
 8106f32:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8106f36:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8106f38:	3b02      	subs	r3, #2
 8106f3a:	b29b      	uxth	r3, r3
 8106f3c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8106f40:	e7df      	b.n	8106f02 <HAL_SPI_Receive+0x386>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106f42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106f44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8106f46:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8106f4a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8106f4e:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8106f50:	3b01      	subs	r3, #1
 8106f52:	b29b      	uxth	r3, r3
 8106f54:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106f58:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8106f5c:	b29b      	uxth	r3, r3
 8106f5e:	2b00      	cmp	r3, #0
 8106f60:	f43f aee2 	beq.w	8106d28 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8106f64:	696b      	ldr	r3, [r5, #20]
 8106f66:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8106f6a:	d02a      	beq.n	8106fc2 <HAL_SPI_Receive+0x446>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8106f6c:	696b      	ldr	r3, [r5, #20]
 8106f6e:	041a      	lsls	r2, r3, #16
 8106f70:	d5e7      	bpl.n	8106f42 <HAL_SPI_Receive+0x3c6>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106f72:	6b29      	ldr	r1, [r5, #48]	; 0x30
          hspi->RxXferCount -= (uint16_t)2UL;
 8106f74:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106f78:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8106f7a:	3b02      	subs	r3, #2
 8106f7c:	b29b      	uxth	r3, r3
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106f7e:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8106f82:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106f86:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8106f8a:	6662      	str	r2, [r4, #100]	; 0x64
    while (hspi->RxXferCount > 0UL)
 8106f8c:	b29b      	uxth	r3, r3
 8106f8e:	2b00      	cmp	r3, #0
 8106f90:	d1e8      	bne.n	8106f64 <HAL_SPI_Receive+0x3e8>
 8106f92:	e6c9      	b.n	8106d28 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8106f94:	f248 0108 	movw	r1, #32776	; 0x8008
 8106f98:	e010      	b.n	8106fbc <HAL_SPI_Receive+0x440>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106f9a:	6b28      	ldr	r0, [r5, #48]	; 0x30
        hspi->RxXferCount--;
 8106f9c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106fa0:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8106fa2:	3b01      	subs	r3, #1
 8106fa4:	b29b      	uxth	r3, r3
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8106fa6:	f842 0b04 	str.w	r0, [r2], #4
        hspi->RxXferCount--;
 8106faa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8106fae:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8106fb2:	6662      	str	r2, [r4, #100]	; 0x64
    while (hspi->RxXferCount > 0UL)
 8106fb4:	b29b      	uxth	r3, r3
 8106fb6:	2b00      	cmp	r3, #0
 8106fb8:	f43f aeb6 	beq.w	8106d28 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8106fbc:	696b      	ldr	r3, [r5, #20]
 8106fbe:	420b      	tst	r3, r1
 8106fc0:	d1eb      	bne.n	8106f9a <HAL_SPI_Receive+0x41e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106fc2:	f7fa fd2d 	bl	8101a20 <HAL_GetTick>
 8106fc6:	e6e2      	b.n	8106d8e <HAL_SPI_Receive+0x212>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106fc8:	f7fa fd2a 	bl	8101a20 <HAL_GetTick>
 8106fcc:	eba0 000a 	sub.w	r0, r0, sl
 8106fd0:	4580      	cmp	r8, r0
 8106fd2:	f67f aedc 	bls.w	8106d8e <HAL_SPI_Receive+0x212>
 8106fd6:	e76f      	b.n	8106eb8 <HAL_SPI_Receive+0x33c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106fd8:	f7fa fd22 	bl	8101a20 <HAL_GetTick>
 8106fdc:	eba0 000a 	sub.w	r0, r0, sl
 8106fe0:	4580      	cmp	r8, r0
 8106fe2:	f67f aed4 	bls.w	8106d8e <HAL_SPI_Receive+0x212>
 8106fe6:	e741      	b.n	8106e6c <HAL_SPI_Receive+0x2f0>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8106fe8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106fea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8106fec:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount -= (uint16_t)2UL;
 8106ff0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8106ff4:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8106ff6:	3b02      	subs	r3, #2
 8106ff8:	b29b      	uxth	r3, r3
 8106ffa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8106ffe:	e735      	b.n	8106e6c <HAL_SPI_Receive+0x2f0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107002:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8107006:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8107008:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810700c:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 810700e:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107010:	3201      	adds	r2, #1
          hspi->RxXferCount--;
 8107012:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107014:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8107016:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 810701a:	e772      	b.n	8106f02 <HAL_SPI_Receive+0x386>

0810701c <HAL_SPI_TxCpltCallback>:
 810701c:	4770      	bx	lr
 810701e:	bf00      	nop

08107020 <HAL_SPI_RxCpltCallback>:
 8107020:	4770      	bx	lr
 8107022:	bf00      	nop

08107024 <HAL_SPI_TxRxCpltCallback>:
 8107024:	4770      	bx	lr
 8107026:	bf00      	nop

08107028 <HAL_SPI_ErrorCallback>:
 8107028:	4770      	bx	lr
 810702a:	bf00      	nop

0810702c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 810702c:	6803      	ldr	r3, [r0, #0]
{
 810702e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 8107032:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8107034:	695a      	ldr	r2, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8107036:	689f      	ldr	r7, [r3, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8107038:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
 810703c:	ea01 0502 	and.w	r5, r1, r2
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8107040:	f005 0c64 	and.w	ip, r5, #100	; 0x64
 8107044:	f1bc 0f04 	cmp.w	ip, #4
{
 8107048:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810704a:	d02f      	beq.n	81070ac <HAL_SPI_IRQHandler+0x80>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810704c:	f005 0045 	and.w	r0, r5, #69	; 0x45
 8107050:	2801      	cmp	r0, #1
 8107052:	d034      	beq.n	81070be <HAL_SPI_IRQHandler+0x92>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8107054:	f005 0026 	and.w	r0, r5, #38	; 0x26
 8107058:	2802      	cmp	r0, #2
 810705a:	f000 80e1 	beq.w	8107220 <HAL_SPI_IRQHandler+0x1f4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810705e:	0728      	lsls	r0, r5, #28
 8107060:	d571      	bpl.n	8107146 <HAL_SPI_IRQHandler+0x11a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8107062:	699a      	ldr	r2, [r3, #24]
 8107064:	f042 0208 	orr.w	r2, r2, #8
 8107068:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810706a:	699a      	ldr	r2, [r3, #24]
 810706c:	f042 0210 	orr.w	r2, r2, #16
 8107070:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8107072:	699a      	ldr	r2, [r3, #24]
 8107074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107078:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810707a:	691a      	ldr	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810707c:	f417 4f40 	tst.w	r7, #49152	; 0xc000
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8107080:	f022 0208 	bic.w	r2, r2, #8
 8107084:	b2f6      	uxtb	r6, r6
 8107086:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8107088:	d023      	beq.n	81070d2 <HAL_SPI_IRQHandler+0xa6>
 810708a:	2e04      	cmp	r6, #4
 810708c:	f000 80e1 	beq.w	8107252 <HAL_SPI_IRQHandler+0x226>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8107090:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8107092:	69d2      	ldr	r2, [r2, #28]
 8107094:	b1ea      	cbz	r2, 81070d2 <HAL_SPI_IRQHandler+0xa6>
 8107096:	2e03      	cmp	r6, #3
 8107098:	d051      	beq.n	810713e <HAL_SPI_IRQHandler+0x112>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810709a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 810709c:	69d2      	ldr	r2, [r2, #28]
 810709e:	b1c2      	cbz	r2, 81070d2 <HAL_SPI_IRQHandler+0xa6>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 81070a0:	2e05      	cmp	r6, #5
 81070a2:	d114      	bne.n	81070ce <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxRxCpltCallback(hspi);
 81070a4:	4620      	mov	r0, r4
 81070a6:	f7ff ffbd 	bl	8107024 <HAL_SPI_TxRxCpltCallback>
 81070aa:	e010      	b.n	81070ce <HAL_SPI_IRQHandler+0xa2>
    hspi->TxISR(hspi);
 81070ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
 81070ae:	4798      	blx	r3
    hspi->RxISR(hspi);
 81070b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 81070b2:	4620      	mov	r0, r4
 81070b4:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 81070b6:	f005 0345 	and.w	r3, r5, #69	; 0x45
 81070ba:	2b01      	cmp	r3, #1
 81070bc:	d102      	bne.n	81070c4 <HAL_SPI_IRQHandler+0x98>
    hspi->RxISR(hspi);
 81070be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 81070c0:	4620      	mov	r0, r4
 81070c2:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 81070c4:	f005 0526 	and.w	r5, r5, #38	; 0x26
 81070c8:	2d02      	cmp	r5, #2
 81070ca:	f000 80a9 	beq.w	8107220 <HAL_SPI_IRQHandler+0x1f4>
}
 81070ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81070d2:	689a      	ldr	r2, [r3, #8]
 81070d4:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 81070d8:	d11f      	bne.n	810711a <HAL_SPI_IRQHandler+0xee>
        while (hspi->RxXferCount != 0UL)
 81070da:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 81070de:	b292      	uxth	r2, r2
 81070e0:	b1da      	cbz	r2, 810711a <HAL_SPI_IRQHandler+0xee>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81070e2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 81070e4:	e00e      	b.n	8107104 <HAL_SPI_IRQHandler+0xd8>
 81070e6:	6822      	ldr	r2, [r4, #0]
 81070e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81070ea:	f841 2b04 	str.w	r2, [r1], #4
            hspi->pRxBuffPtr += sizeof(uint32_t);
 81070ee:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 81070f0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 81070f4:	3a01      	subs	r2, #1
 81070f6:	b292      	uxth	r2, r2
 81070f8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 81070fc:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8107100:	b292      	uxth	r2, r2
 8107102:	b152      	cbz	r2, 810711a <HAL_SPI_IRQHandler+0xee>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8107104:	68e2      	ldr	r2, [r4, #12]
 8107106:	2a0f      	cmp	r2, #15
 8107108:	d8ed      	bhi.n	81070e6 <HAL_SPI_IRQHandler+0xba>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810710a:	2a07      	cmp	r2, #7
 810710c:	f240 8094 	bls.w	8107238 <HAL_SPI_IRQHandler+0x20c>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107110:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8107112:	f821 2b02 	strh.w	r2, [r1], #2
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8107116:	6661      	str	r1, [r4, #100]	; 0x64
 8107118:	e7ea      	b.n	81070f0 <HAL_SPI_IRQHandler+0xc4>
      SPI_CloseTransfer(hspi);
 810711a:	4620      	mov	r0, r4
 810711c:	f7fe fff6 	bl	810610c <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8107120:	2301      	movs	r3, #1
 8107122:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107126:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 810712a:	2b00      	cmp	r3, #0
 810712c:	f040 8081 	bne.w	8107232 <HAL_SPI_IRQHandler+0x206>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8107130:	2e05      	cmp	r6, #5
 8107132:	d0b7      	beq.n	81070a4 <HAL_SPI_IRQHandler+0x78>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8107134:	2e04      	cmp	r6, #4
 8107136:	f000 8091 	beq.w	810725c <HAL_SPI_IRQHandler+0x230>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810713a:	2e03      	cmp	r6, #3
 810713c:	d1c7      	bne.n	81070ce <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxCpltCallback(hspi);
 810713e:	4620      	mov	r0, r4
 8107140:	f7ff ff6c 	bl	810701c <HAL_SPI_TxCpltCallback>
 8107144:	e7c3      	b.n	81070ce <HAL_SPI_IRQHandler+0xa2>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8107146:	0510      	lsls	r0, r2, #20
 8107148:	d501      	bpl.n	810714e <HAL_SPI_IRQHandler+0x122>
 810714a:	070a      	lsls	r2, r1, #28
 810714c:	d47c      	bmi.n	8107248 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810714e:	f415 7f58 	tst.w	r5, #864	; 0x360
 8107152:	d0bc      	beq.n	81070ce <HAL_SPI_IRQHandler+0xa2>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8107154:	066e      	lsls	r6, r5, #25
 8107156:	d509      	bpl.n	810716c <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8107158:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 810715c:	f042 0204 	orr.w	r2, r2, #4
 8107160:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8107164:	699a      	ldr	r2, [r3, #24]
 8107166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810716a:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810716c:	05a8      	lsls	r0, r5, #22
 810716e:	d509      	bpl.n	8107184 <HAL_SPI_IRQHandler+0x158>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8107170:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8107174:	f042 0201 	orr.w	r2, r2, #1
 8107178:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810717c:	699a      	ldr	r2, [r3, #24]
 810717e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8107182:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8107184:	05e9      	lsls	r1, r5, #23
 8107186:	d509      	bpl.n	810719c <HAL_SPI_IRQHandler+0x170>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8107188:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 810718c:	f042 0208 	orr.w	r2, r2, #8
 8107190:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8107194:	699a      	ldr	r2, [r3, #24]
 8107196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810719a:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810719c:	06aa      	lsls	r2, r5, #26
 810719e:	d509      	bpl.n	81071b4 <HAL_SPI_IRQHandler+0x188>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81071a0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 81071a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 81071a8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81071ac:	699a      	ldr	r2, [r3, #24]
 81071ae:	f042 0220 	orr.w	r2, r2, #32
 81071b2:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81071b4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 81071b8:	2a00      	cmp	r2, #0
 81071ba:	d088      	beq.n	81070ce <HAL_SPI_IRQHandler+0xa2>
      __HAL_SPI_DISABLE(hspi);
 81071bc:	681a      	ldr	r2, [r3, #0]
 81071be:	f022 0201 	bic.w	r2, r2, #1
 81071c2:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 81071c4:	691a      	ldr	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81071c6:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 81071ca:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 81071ce:	f022 0203 	bic.w	r2, r2, #3
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81071d2:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 81071d6:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81071d8:	d127      	bne.n	810722a <HAL_SPI_IRQHandler+0x1fe>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81071da:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 81071dc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81071de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81071e2:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 81071e4:	b150      	cbz	r0, 81071fc <HAL_SPI_IRQHandler+0x1d0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 81071e6:	4b1f      	ldr	r3, [pc, #124]	; (8107264 <HAL_SPI_IRQHandler+0x238>)
 81071e8:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 81071ea:	f7fb fd3d 	bl	8102c68 <HAL_DMA_Abort_IT>
 81071ee:	b128      	cbz	r0, 81071fc <HAL_SPI_IRQHandler+0x1d0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81071f0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 81071f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81071f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 81071fc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 81071fe:	2800      	cmp	r0, #0
 8107200:	f43f af65 	beq.w	81070ce <HAL_SPI_IRQHandler+0xa2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8107204:	4b17      	ldr	r3, [pc, #92]	; (8107264 <HAL_SPI_IRQHandler+0x238>)
 8107206:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8107208:	f7fb fd2e 	bl	8102c68 <HAL_DMA_Abort_IT>
 810720c:	2800      	cmp	r0, #0
 810720e:	f43f af5e 	beq.w	81070ce <HAL_SPI_IRQHandler+0xa2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8107212:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8107216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810721a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 810721e:	e756      	b.n	81070ce <HAL_SPI_IRQHandler+0xa2>
    hspi->TxISR(hspi);
 8107220:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8107222:	4620      	mov	r0, r4
}
 8107224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8107228:	4718      	bx	r3
        hspi->State = HAL_SPI_STATE_READY;
 810722a:	2301      	movs	r3, #1
 810722c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8107230:	4620      	mov	r0, r4
 8107232:	f7ff fef9 	bl	8107028 <HAL_SPI_ErrorCallback>
 8107236:	e74a      	b.n	81070ce <HAL_SPI_IRQHandler+0xa2>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107238:	6822      	ldr	r2, [r4, #0]
 810723a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 810723e:	700a      	strb	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8107240:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8107242:	3101      	adds	r1, #1
 8107244:	6661      	str	r1, [r4, #100]	; 0x64
 8107246:	e753      	b.n	81070f0 <HAL_SPI_IRQHandler+0xc4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8107248:	699a      	ldr	r2, [r3, #24]
 810724a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810724e:	619a      	str	r2, [r3, #24]
    return;
 8107250:	e73d      	b.n	81070ce <HAL_SPI_IRQHandler+0xa2>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8107252:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8107254:	69d2      	ldr	r2, [r2, #28]
 8107256:	2a00      	cmp	r2, #0
 8107258:	f43f af3b 	beq.w	81070d2 <HAL_SPI_IRQHandler+0xa6>
      HAL_SPI_RxCpltCallback(hspi);
 810725c:	4620      	mov	r0, r4
 810725e:	f7ff fedf 	bl	8107020 <HAL_SPI_RxCpltCallback>
 8107262:	e734      	b.n	81070ce <HAL_SPI_IRQHandler+0xa2>
 8107264:	08107269 	.word	0x08107269

08107268 <SPI_DMAAbortOnError>:
{
 8107268:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810726a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 810726c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 810726e:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8107270:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8107274:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8107278:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 810727c:	f7ff fed4 	bl	8107028 <HAL_SPI_ErrorCallback>
}
 8107280:	bd08      	pop	{r3, pc}
 8107282:	bf00      	nop

08107284 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107286:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 810728a:	2e20      	cmp	r6, #32
 810728c:	d13f      	bne.n	810730e <HAL_UART_Transmit_DMA+0x8a>
  {
    if ((pData == NULL) || (Size == 0U))
 810728e:	b389      	cbz	r1, 81072f4 <HAL_UART_Transmit_DMA+0x70>
 8107290:	b382      	cbz	r2, 81072f4 <HAL_UART_Transmit_DMA+0x70>
 8107292:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8107294:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8107298:	2801      	cmp	r0, #1
 810729a:	d038      	beq.n	810730e <HAL_UART_Transmit_DMA+0x8a>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 810729c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 810729e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81072a2:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 81072a4:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81072a6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81072a8:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 81072ac:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 81072ae:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 81072b2:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81072b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 81072ba:	b1e8      	cbz	r0, 81072f8 <HAL_UART_Transmit_DMA+0x74>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 81072bc:	f8df c054 	ldr.w	ip, [pc, #84]	; 8107314 <HAL_UART_Transmit_DMA+0x90>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 81072c0:	6507      	str	r7, [r0, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 81072c2:	4613      	mov	r3, r2
 81072c4:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 81072c6:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 81072ca:	f8df c04c 	ldr.w	ip, [pc, #76]	; 8107318 <HAL_UART_Transmit_DMA+0x94>
 81072ce:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 81072d2:	f8df c048 	ldr.w	ip, [pc, #72]	; 810731c <HAL_UART_Transmit_DMA+0x98>
 81072d6:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 81072da:	3228      	adds	r2, #40	; 0x28
 81072dc:	f7fb f83a 	bl	8102354 <HAL_DMA_Start_IT>
 81072e0:	b150      	cbz	r0, 81072f8 <HAL_UART_Transmit_DMA+0x74>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 81072e2:	2310      	movs	r3, #16

        __HAL_UNLOCK(huart);
 81072e4:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 81072e8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 81072ec:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 81072ee:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  }
  else
  {
    return HAL_BUSY;
  }
}
 81072f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 81072f4:	2001      	movs	r0, #1
}
 81072f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 81072f8:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 81072fa:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 81072fc:	2240      	movs	r2, #64	; 0x40
 81072fe:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8107300:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8107304:	689a      	ldr	r2, [r3, #8]
 8107306:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810730a:	609a      	str	r2, [r3, #8]
}
 810730c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 810730e:	2002      	movs	r0, #2
}
 8107310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107312:	bf00      	nop
 8107314:	081073e1 	.word	0x081073e1
 8107318:	08107411 	.word	0x08107411
 810731c:	08107425 	.word	0x08107425

08107320 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107320:	b570      	push	{r4, r5, r6, lr}
 8107322:	4604      	mov	r4, r0
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8107324:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8107328:	2820      	cmp	r0, #32
 810732a:	d144      	bne.n	81073b6 <HAL_UART_Receive_DMA+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 810732c:	2900      	cmp	r1, #0
 810732e:	d040      	beq.n	81073b2 <HAL_UART_Receive_DMA+0x92>
 8107330:	2a00      	cmp	r2, #0
 8107332:	d03e      	beq.n	81073b2 <HAL_UART_Receive_DMA+0x92>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8107334:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8107338:	2b01      	cmp	r3, #1
 810733a:	d03c      	beq.n	81073b6 <HAL_UART_Receive_DMA+0x96>

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810733c:	6825      	ldr	r5, [r4, #0]
 810733e:	4b24      	ldr	r3, [pc, #144]	; (81073d0 <HAL_UART_Receive_DMA+0xb0>)
    __HAL_LOCK(huart);
 8107340:	2001      	movs	r0, #1
 8107342:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8107346:	429d      	cmp	r5, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107348:	f04f 0000 	mov.w	r0, #0
 810734c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810734e:	d006      	beq.n	810735e <HAL_UART_Receive_DMA+0x3e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8107350:	686b      	ldr	r3, [r5, #4]
 8107352:	021b      	lsls	r3, r3, #8
 8107354:	d503      	bpl.n	810735e <HAL_UART_Receive_DMA+0x3e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8107356:	682b      	ldr	r3, [r5, #0]
 8107358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810735c:	602b      	str	r3, [r5, #0]
  huart->RxXferSize = Size;

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->RxState = HAL_UART_STATE_BUSY_RX;

  if (huart->hdmarx != NULL)
 810735e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  huart->pRxBuffPtr = pData;
 8107360:	65a1      	str	r1, [r4, #88]	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107362:	2600      	movs	r6, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8107364:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107366:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  huart->RxXferSize = Size;
 810736a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810736e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  if (huart->hdmarx != NULL)
 8107372:	b170      	cbz	r0, 8107392 <HAL_UART_Receive_DMA+0x72>

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8107374:	4613      	mov	r3, r2
 8107376:	460a      	mov	r2, r1
 8107378:	f105 0124 	add.w	r1, r5, #36	; 0x24
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810737c:	4d15      	ldr	r5, [pc, #84]	; (81073d4 <HAL_UART_Receive_DMA+0xb4>)
 810737e:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8107380:	4d15      	ldr	r5, [pc, #84]	; (81073d8 <HAL_UART_Receive_DMA+0xb8>)
 8107382:	6405      	str	r5, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8107384:	4d15      	ldr	r5, [pc, #84]	; (81073dc <HAL_UART_Receive_DMA+0xbc>)
    huart->hdmarx->XferAbortCallback = NULL;
 8107386:	6506      	str	r6, [r0, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8107388:	64c5      	str	r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810738a:	f7fa ffe3 	bl	8102354 <HAL_DMA_Start_IT>
 810738e:	b9a0      	cbnz	r0, 81073ba <HAL_UART_Receive_DMA+0x9a>
    }
  }
  __HAL_UNLOCK(huart);

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107390:	6825      	ldr	r5, [r4, #0]
  __HAL_UNLOCK(huart);
 8107392:	2000      	movs	r0, #0
 8107394:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107398:	682b      	ldr	r3, [r5, #0]
 810739a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810739e:	602b      	str	r3, [r5, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81073a0:	68ab      	ldr	r3, [r5, #8]
 81073a2:	f043 0301 	orr.w	r3, r3, #1
 81073a6:	60ab      	str	r3, [r5, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81073a8:	68ab      	ldr	r3, [r5, #8]
 81073aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81073ae:	60ab      	str	r3, [r5, #8]
}
 81073b0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 81073b2:	2001      	movs	r0, #1
}
 81073b4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 81073b6:	2002      	movs	r0, #2
}
 81073b8:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 81073ba:	2210      	movs	r2, #16
      huart->gState = HAL_UART_STATE_READY;
 81073bc:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 81073be:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 81073c2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 81073c6:	2001      	movs	r0, #1
      huart->gState = HAL_UART_STATE_READY;
 81073c8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 81073cc:	bd70      	pop	{r4, r5, r6, pc}
 81073ce:	bf00      	nop
 81073d0:	58000c00 	.word	0x58000c00
 81073d4:	08107805 	.word	0x08107805
 81073d8:	081077e9 	.word	0x081077e9
 81073dc:	08107425 	.word	0x08107425

081073e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 81073e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81073e2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81073e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81073e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81073ea:	d00c      	beq.n	8107406 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81073ec:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 81073ee:	2200      	movs	r2, #0
 81073f0:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81073f4:	689a      	ldr	r2, [r3, #8]
 81073f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81073fa:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81073fc:	681a      	ldr	r2, [r3, #0]
 81073fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107402:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8107404:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8107406:	f7fa f981 	bl	810170c <HAL_UART_TxCpltCallback>
}
 810740a:	bd08      	pop	{r3, pc}

0810740c <HAL_UART_TxHalfCpltCallback>:
 810740c:	4770      	bx	lr
 810740e:	bf00      	nop

08107410 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8107410:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8107412:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8107414:	f7ff fffa 	bl	810740c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107418:	bd08      	pop	{r3, pc}
 810741a:	bf00      	nop

0810741c <HAL_UART_RxHalfCpltCallback>:
 810741c:	4770      	bx	lr
 810741e:	bf00      	nop

08107420 <HAL_UART_ErrorCallback>:
 8107420:	4770      	bx	lr
 8107422:	bf00      	nop

08107424 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8107424:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8107426:	6803      	ldr	r3, [r0, #0]
{
 8107428:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 810742a:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810742e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8107432:	689a      	ldr	r2, [r3, #8]
 8107434:	0612      	lsls	r2, r2, #24
 8107436:	d501      	bpl.n	810743c <UART_DMAError+0x18>
 8107438:	2c21      	cmp	r4, #33	; 0x21
 810743a:	d028      	beq.n	810748e <UART_DMAError+0x6a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810743c:	689a      	ldr	r2, [r3, #8]
 810743e:	0652      	lsls	r2, r2, #25
 8107440:	d501      	bpl.n	8107446 <UART_DMAError+0x22>
 8107442:	2922      	cmp	r1, #34	; 0x22
 8107444:	d008      	beq.n	8107458 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8107446:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 810744a:	f043 0310 	orr.w	r3, r3, #16
 810744e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8107452:	f7ff ffe5 	bl	8107420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8107456:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 8107458:	2200      	movs	r2, #0
 810745a:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810745e:	681a      	ldr	r2, [r3, #0]
 8107460:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8107464:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8107466:	689a      	ldr	r2, [r3, #8]
 8107468:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 810746c:	f022 0201 	bic.w	r2, r2, #1
 8107470:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8107472:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8107474:	2a01      	cmp	r2, #1
 8107476:	d103      	bne.n	8107480 <UART_DMAError+0x5c>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8107478:	681a      	ldr	r2, [r3, #0]
 810747a:	f022 0210 	bic.w	r2, r2, #16
 810747e:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107480:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8107482:	2220      	movs	r2, #32
 8107484:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 8107488:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810748a:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 810748c:	e7db      	b.n	8107446 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 810748e:	2200      	movs	r2, #0
 8107490:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8107494:	681a      	ldr	r2, [r3, #0]
 8107496:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810749a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810749c:	689a      	ldr	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 810749e:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 81074a0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 81074a4:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 81074a6:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
}
 81074aa:	e7c7      	b.n	810743c <UART_DMAError+0x18>

081074ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81074ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81074ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 81074b0:	2300      	movs	r3, #0
 81074b2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 81074b6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 81074ba:	f7ff ffb1 	bl	8107420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81074be:	bd08      	pop	{r3, pc}

081074c0 <HAL_UARTEx_RxEventCallback>:
}
 81074c0:	4770      	bx	lr
 81074c2:	bf00      	nop

081074c4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81074c4:	6802      	ldr	r2, [r0, #0]
 81074c6:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 81074c8:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 81074cc:	ea13 0f0c 	tst.w	r3, ip
{
 81074d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81074d2:	6815      	ldr	r5, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81074d4:	6891      	ldr	r1, [r2, #8]
{
 81074d6:	4604      	mov	r4, r0
  if (errorflags == 0U)
 81074d8:	f000 80ff 	beq.w	81076da <HAL_UART_IRQHandler+0x216>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81074dc:	4ea5      	ldr	r6, [pc, #660]	; (8107774 <HAL_UART_IRQHandler+0x2b0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81074de:	48a6      	ldr	r0, [pc, #664]	; (8107778 <HAL_UART_IRQHandler+0x2b4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81074e0:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81074e4:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81074e6:	ea5c 0600 	orrs.w	r6, ip, r0
 81074ea:	d17e      	bne.n	81075ea <HAL_UART_IRQHandler+0x126>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81074ec:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 81074ee:	2801      	cmp	r0, #1
 81074f0:	d01d      	beq.n	810752e <HAL_UART_IRQHandler+0x6a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81074f2:	02d8      	lsls	r0, r3, #11
 81074f4:	d502      	bpl.n	81074fc <HAL_UART_IRQHandler+0x38>
 81074f6:	024e      	lsls	r6, r1, #9
 81074f8:	f100 8116 	bmi.w	8107728 <HAL_UART_IRQHandler+0x264>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81074fc:	0618      	lsls	r0, r3, #24
 81074fe:	d506      	bpl.n	810750e <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8107500:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8107504:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8107508:	4301      	orrs	r1, r0
 810750a:	f040 8105 	bne.w	8107718 <HAL_UART_IRQHandler+0x254>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810750e:	065e      	lsls	r6, r3, #25
 8107510:	d502      	bpl.n	8107518 <HAL_UART_IRQHandler+0x54>
 8107512:	0668      	lsls	r0, r5, #25
 8107514:	f100 8114 	bmi.w	8107740 <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8107518:	0219      	lsls	r1, r3, #8
 810751a:	d502      	bpl.n	8107522 <HAL_UART_IRQHandler+0x5e>
 810751c:	006a      	lsls	r2, r5, #1
 810751e:	f100 811c 	bmi.w	810775a <HAL_UART_IRQHandler+0x296>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8107522:	01db      	lsls	r3, r3, #7
 8107524:	d502      	bpl.n	810752c <HAL_UART_IRQHandler+0x68>
 8107526:	2d00      	cmp	r5, #0
 8107528:	f2c0 8153 	blt.w	81077d2 <HAL_UART_IRQHandler+0x30e>
}
 810752c:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810752e:	06d8      	lsls	r0, r3, #27
 8107530:	d5df      	bpl.n	81074f2 <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8107532:	06ee      	lsls	r6, r5, #27
 8107534:	d5dd      	bpl.n	81074f2 <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8107536:	2310      	movs	r3, #16
 8107538:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810753a:	6893      	ldr	r3, [r2, #8]
 810753c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8107540:	f000 8120 	beq.w	8107784 <HAL_UART_IRQHandler+0x2c0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8107544:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8107546:	498d      	ldr	r1, [pc, #564]	; (810777c <HAL_UART_IRQHandler+0x2b8>)
 8107548:	6803      	ldr	r3, [r0, #0]
 810754a:	428b      	cmp	r3, r1
 810754c:	d01e      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 810754e:	3118      	adds	r1, #24
 8107550:	428b      	cmp	r3, r1
 8107552:	d01b      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 8107554:	3118      	adds	r1, #24
 8107556:	428b      	cmp	r3, r1
 8107558:	d018      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 810755a:	3118      	adds	r1, #24
 810755c:	428b      	cmp	r3, r1
 810755e:	d015      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 8107560:	3118      	adds	r1, #24
 8107562:	428b      	cmp	r3, r1
 8107564:	d012      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 8107566:	3118      	adds	r1, #24
 8107568:	428b      	cmp	r3, r1
 810756a:	d00f      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 810756c:	3118      	adds	r1, #24
 810756e:	428b      	cmp	r3, r1
 8107570:	d00c      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 8107572:	3118      	adds	r1, #24
 8107574:	428b      	cmp	r3, r1
 8107576:	d009      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 8107578:	f501 7156 	add.w	r1, r1, #856	; 0x358
 810757c:	428b      	cmp	r3, r1
 810757e:	d005      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 8107580:	3118      	adds	r1, #24
 8107582:	428b      	cmp	r3, r1
 8107584:	d002      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 8107586:	3118      	adds	r1, #24
 8107588:	428b      	cmp	r3, r1
 810758a:	d0ff      	beq.n	810758c <HAL_UART_IRQHandler+0xc8>
 810758c:	685b      	ldr	r3, [r3, #4]
 810758e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8107590:	2b00      	cmp	r3, #0
 8107592:	d0cb      	beq.n	810752c <HAL_UART_IRQHandler+0x68>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8107594:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8107598:	4299      	cmp	r1, r3
 810759a:	d9c7      	bls.n	810752c <HAL_UART_IRQHandler+0x68>
        huart->RxXferCount = nb_remaining_rx_data;
 810759c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 81075a0:	69c3      	ldr	r3, [r0, #28]
 81075a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81075a6:	d018      	beq.n	81075da <HAL_UART_IRQHandler+0x116>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81075a8:	6813      	ldr	r3, [r2, #0]
 81075aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81075ae:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81075b0:	6893      	ldr	r3, [r2, #8]
 81075b2:	f023 0301 	bic.w	r3, r3, #1
 81075b6:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81075b8:	6893      	ldr	r3, [r2, #8]
 81075ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81075be:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 81075c0:	2120      	movs	r1, #32
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81075c2:	2300      	movs	r3, #0
          huart->RxState = HAL_UART_STATE_READY;
 81075c4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81075c8:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81075ca:	6813      	ldr	r3, [r2, #0]
 81075cc:	f023 0310 	bic.w	r3, r3, #16
 81075d0:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 81075d2:	f7fb f9b9 	bl	8102948 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 81075d6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 81075da:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 81075de:	1ac9      	subs	r1, r1, r3
 81075e0:	4620      	mov	r0, r4
 81075e2:	b289      	uxth	r1, r1
 81075e4:	f7ff ff6c 	bl	81074c0 <HAL_UARTEx_RxEventCallback>
}
 81075e8:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81075ea:	07de      	lsls	r6, r3, #31
 81075ec:	d509      	bpl.n	8107602 <HAL_UART_IRQHandler+0x13e>
 81075ee:	05ee      	lsls	r6, r5, #23
 81075f0:	d507      	bpl.n	8107602 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81075f2:	2601      	movs	r6, #1
 81075f4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81075f6:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 81075fa:	f046 0601 	orr.w	r6, r6, #1
 81075fe:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8107602:	079e      	lsls	r6, r3, #30
 8107604:	d57b      	bpl.n	81076fe <HAL_UART_IRQHandler+0x23a>
 8107606:	07ce      	lsls	r6, r1, #31
 8107608:	d509      	bpl.n	810761e <HAL_UART_IRQHandler+0x15a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810760a:	2602      	movs	r6, #2
 810760c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810760e:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8107612:	f046 0604 	orr.w	r6, r6, #4
 8107616:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810761a:	075e      	lsls	r6, r3, #29
 810761c:	d473      	bmi.n	8107706 <HAL_UART_IRQHandler+0x242>
    if (((isrflags & USART_ISR_ORE) != 0U)
 810761e:	071e      	lsls	r6, r3, #28
 8107620:	d50b      	bpl.n	810763a <HAL_UART_IRQHandler+0x176>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8107622:	f005 0620 	and.w	r6, r5, #32
 8107626:	4330      	orrs	r0, r6
 8107628:	d007      	beq.n	810763a <HAL_UART_IRQHandler+0x176>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810762a:	2008      	movs	r0, #8
 810762c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810762e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8107632:	f040 0008 	orr.w	r0, r0, #8
 8107636:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 810763a:	051e      	lsls	r6, r3, #20
 810763c:	d50a      	bpl.n	8107654 <HAL_UART_IRQHandler+0x190>
 810763e:	0168      	lsls	r0, r5, #5
 8107640:	d508      	bpl.n	8107654 <HAL_UART_IRQHandler+0x190>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107642:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8107646:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8107648:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 810764c:	f040 0020 	orr.w	r0, r0, #32
 8107650:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8107654:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8107658:	2800      	cmp	r0, #0
 810765a:	f43f af67 	beq.w	810752c <HAL_UART_IRQHandler+0x68>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810765e:	069e      	lsls	r6, r3, #26
 8107660:	d506      	bpl.n	8107670 <HAL_UART_IRQHandler+0x1ac>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8107662:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8107666:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 810766a:	ea55 0301 	orrs.w	r3, r5, r1
 810766e:	d179      	bne.n	8107764 <HAL_UART_IRQHandler+0x2a0>
      errorcode = huart->ErrorCode;
 8107670:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8107674:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8107676:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810767e:	431d      	orrs	r5, r3
 8107680:	f000 80ac 	beq.w	81077dc <HAL_UART_IRQHandler+0x318>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8107684:	6813      	ldr	r3, [r2, #0]
 8107686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810768a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810768c:	6893      	ldr	r3, [r2, #8]
 810768e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107692:	f023 0301 	bic.w	r3, r3, #1
 8107696:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8107698:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 810769a:	2b01      	cmp	r3, #1
 810769c:	d103      	bne.n	81076a6 <HAL_UART_IRQHandler+0x1e2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810769e:	6813      	ldr	r3, [r2, #0]
 81076a0:	f023 0310 	bic.w	r3, r3, #16
 81076a4:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81076a6:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 81076a8:	2120      	movs	r1, #32
 81076aa:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81076ae:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81076b0:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 81076b2:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81076b4:	064d      	lsls	r5, r1, #25
 81076b6:	d53f      	bpl.n	8107738 <HAL_UART_IRQHandler+0x274>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81076b8:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 81076ba:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81076bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81076c0:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 81076c2:	2800      	cmp	r0, #0
 81076c4:	d038      	beq.n	8107738 <HAL_UART_IRQHandler+0x274>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81076c6:	4b2e      	ldr	r3, [pc, #184]	; (8107780 <HAL_UART_IRQHandler+0x2bc>)
 81076c8:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81076ca:	f7fb facd 	bl	8102c68 <HAL_DMA_Abort_IT>
 81076ce:	2800      	cmp	r0, #0
 81076d0:	f43f af2c 	beq.w	810752c <HAL_UART_IRQHandler+0x68>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81076d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 81076d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 81076d8:	e00e      	b.n	81076f8 <HAL_UART_IRQHandler+0x234>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81076da:	069e      	lsls	r6, r3, #26
 81076dc:	f57f af06 	bpl.w	81074ec <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81076e0:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81076e4:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 81076e8:	ea56 060c 	orrs.w	r6, r6, ip
 81076ec:	f43f aefe 	beq.w	81074ec <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 81076f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 81076f2:	2b00      	cmp	r3, #0
 81076f4:	f43f af1a 	beq.w	810752c <HAL_UART_IRQHandler+0x68>
}
 81076f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81076fc:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81076fe:	075e      	lsls	r6, r3, #29
 8107700:	d58d      	bpl.n	810761e <HAL_UART_IRQHandler+0x15a>
 8107702:	07ce      	lsls	r6, r1, #31
 8107704:	d58b      	bpl.n	810761e <HAL_UART_IRQHandler+0x15a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8107706:	2604      	movs	r6, #4
 8107708:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 810770a:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 810770e:	f046 0602 	orr.w	r6, r6, #2
 8107712:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8107716:	e782      	b.n	810761e <HAL_UART_IRQHandler+0x15a>
    if (huart->TxISR != NULL)
 8107718:	6f63      	ldr	r3, [r4, #116]	; 0x74
 810771a:	2b00      	cmp	r3, #0
 810771c:	f43f af06 	beq.w	810752c <HAL_UART_IRQHandler+0x68>
      huart->TxISR(huart);
 8107720:	4620      	mov	r0, r4
}
 8107722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8107726:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8107728:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 810772c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810772e:	6213      	str	r3, [r2, #32]
}
 8107730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8107734:	f000 bc1e 	b.w	8107f74 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8107738:	4620      	mov	r0, r4
 810773a:	f7ff fe71 	bl	8107420 <HAL_UART_ErrorCallback>
}
 810773e:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8107740:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8107742:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8107744:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8107748:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810774a:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 810774c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8107750:	6761      	str	r1, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8107752:	4620      	mov	r0, r4
 8107754:	f7f9 ffda 	bl	810170c <HAL_UART_TxCpltCallback>
}
 8107758:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810775a:	4620      	mov	r0, r4
}
 810775c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8107760:	f000 bc0c 	b.w	8107f7c <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8107764:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8107766:	2b00      	cmp	r3, #0
 8107768:	d082      	beq.n	8107670 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 810776a:	4620      	mov	r0, r4
 810776c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810776e:	6822      	ldr	r2, [r4, #0]
 8107770:	e77e      	b.n	8107670 <HAL_UART_IRQHandler+0x1ac>
 8107772:	bf00      	nop
 8107774:	04000120 	.word	0x04000120
 8107778:	10000001 	.word	0x10000001
 810777c:	40020010 	.word	0x40020010
 8107780:	081074ad 	.word	0x081074ad
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8107784:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8107788:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 810778c:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810778e:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8107790:	2900      	cmp	r1, #0
 8107792:	f43f aecb 	beq.w	810752c <HAL_UART_IRQHandler+0x68>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8107796:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 810779a:	1a08      	subs	r0, r1, r0
 810779c:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 810779e:	2900      	cmp	r1, #0
 81077a0:	f43f aec4 	beq.w	810752c <HAL_UART_IRQHandler+0x68>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81077a4:	6810      	ldr	r0, [r2, #0]
 81077a6:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 81077aa:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81077ac:	6890      	ldr	r0, [r2, #8]
 81077ae:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 81077b2:	f020 0001 	bic.w	r0, r0, #1
 81077b6:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 81077b8:	2020      	movs	r0, #32
 81077ba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81077be:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81077c0:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 81077c2:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81077c4:	f020 0010 	bic.w	r0, r0, #16
 81077c8:	6010      	str	r0, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 81077ca:	4620      	mov	r0, r4
 81077cc:	f7ff fe78 	bl	81074c0 <HAL_UARTEx_RxEventCallback>
}
 81077d0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxFifoFullCallback(huart);
 81077d2:	4620      	mov	r0, r4
}
 81077d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 81077d8:	f000 bbce 	b.w	8107f78 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 81077dc:	4620      	mov	r0, r4
 81077de:	f7ff fe1f 	bl	8107420 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81077e2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 81077e6:	bd70      	pop	{r4, r5, r6, pc}

081077e8 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81077e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 81077ea:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81077ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 81077ee:	2b01      	cmp	r3, #1
 81077f0:	d002      	beq.n	81077f8 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 81077f2:	f7ff fe13 	bl	810741c <HAL_UART_RxHalfCpltCallback>
}
 81077f6:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 81077f8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 81077fc:	0849      	lsrs	r1, r1, #1
 81077fe:	f7ff fe5f 	bl	81074c0 <HAL_UARTEx_RxEventCallback>
}
 8107802:	bd08      	pop	{r3, pc}

08107804 <UART_DMAReceiveCplt>:
{
 8107804:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8107806:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8107808:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810780a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810780e:	d015      	beq.n	810783c <UART_DMAReceiveCplt+0x38>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107810:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 8107812:	2200      	movs	r2, #0
 8107814:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107818:	681a      	ldr	r2, [r3, #0]
 810781a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810781e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107820:	689a      	ldr	r2, [r3, #8]
 8107822:	f022 0201 	bic.w	r2, r2, #1
 8107826:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8107828:	689a      	ldr	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 810782a:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810782c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8107830:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8107832:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8107836:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8107838:	2a01      	cmp	r2, #1
 810783a:	d005      	beq.n	8107848 <UART_DMAReceiveCplt+0x44>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810783c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 810783e:	2b01      	cmp	r3, #1
 8107840:	d009      	beq.n	8107856 <UART_DMAReceiveCplt+0x52>
    HAL_UART_RxCpltCallback(huart);
 8107842:	f7f9 ff15 	bl	8101670 <HAL_UART_RxCpltCallback>
}
 8107846:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8107848:	681a      	ldr	r2, [r3, #0]
 810784a:	f022 0210 	bic.w	r2, r2, #16
 810784e:	601a      	str	r2, [r3, #0]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8107850:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8107852:	2b01      	cmp	r3, #1
 8107854:	d1f5      	bne.n	8107842 <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8107856:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 810785a:	f7ff fe31 	bl	81074c0 <HAL_UARTEx_RxEventCallback>
}
 810785e:	bd08      	pop	{r3, pc}

08107860 <UART_SetConfig>:
{
 8107860:	b530      	push	{r4, r5, lr}
 8107862:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8107864:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107866:	6882      	ldr	r2, [r0, #8]
 8107868:	6900      	ldr	r0, [r0, #16]
 810786a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810786c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810786e:	4302      	orrs	r2, r0
 8107870:	430a      	orrs	r2, r1
 8107872:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107874:	49bd      	ldr	r1, [pc, #756]	; (8107b6c <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107876:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107878:	4029      	ands	r1, r5
 810787a:	430a      	orrs	r2, r1
 810787c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810787e:	685a      	ldr	r2, [r3, #4]
 8107880:	68e1      	ldr	r1, [r4, #12]
 8107882:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8107886:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107888:	49b9      	ldr	r1, [pc, #740]	; (8107b70 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810788a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810788c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810788e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107890:	6899      	ldr	r1, [r3, #8]
{
 8107892:	b087      	sub	sp, #28
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107894:	f000 80e0 	beq.w	8107a58 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 8107898:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810789a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 810789e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 81078a2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81078a4:	430a      	orrs	r2, r1
 81078a6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81078a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81078aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 81078ac:	f022 020f 	bic.w	r2, r2, #15
 81078b0:	430a      	orrs	r2, r1
 81078b2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 81078b4:	4aaf      	ldr	r2, [pc, #700]	; (8107b74 <UART_SetConfig+0x314>)
 81078b6:	4293      	cmp	r3, r2
 81078b8:	d023      	beq.n	8107902 <UART_SetConfig+0xa2>
 81078ba:	4aaf      	ldr	r2, [pc, #700]	; (8107b78 <UART_SetConfig+0x318>)
 81078bc:	4293      	cmp	r3, r2
 81078be:	d075      	beq.n	81079ac <UART_SetConfig+0x14c>
 81078c0:	4aae      	ldr	r2, [pc, #696]	; (8107b7c <UART_SetConfig+0x31c>)
 81078c2:	4293      	cmp	r3, r2
 81078c4:	f000 818e 	beq.w	8107be4 <UART_SetConfig+0x384>
 81078c8:	4aad      	ldr	r2, [pc, #692]	; (8107b80 <UART_SetConfig+0x320>)
 81078ca:	4293      	cmp	r3, r2
 81078cc:	f000 81e1 	beq.w	8107c92 <UART_SetConfig+0x432>
 81078d0:	4aac      	ldr	r2, [pc, #688]	; (8107b84 <UART_SetConfig+0x324>)
 81078d2:	4293      	cmp	r3, r2
 81078d4:	f000 8120 	beq.w	8107b18 <UART_SetConfig+0x2b8>
 81078d8:	4aab      	ldr	r2, [pc, #684]	; (8107b88 <UART_SetConfig+0x328>)
 81078da:	4293      	cmp	r3, r2
 81078dc:	f000 81e3 	beq.w	8107ca6 <UART_SetConfig+0x446>
 81078e0:	4aaa      	ldr	r2, [pc, #680]	; (8107b8c <UART_SetConfig+0x32c>)
 81078e2:	4293      	cmp	r3, r2
 81078e4:	f000 8234 	beq.w	8107d50 <UART_SetConfig+0x4f0>
 81078e8:	4aa9      	ldr	r2, [pc, #676]	; (8107b90 <UART_SetConfig+0x330>)
 81078ea:	4293      	cmp	r3, r2
 81078ec:	f000 81e7 	beq.w	8107cbe <UART_SetConfig+0x45e>
        ret = HAL_ERROR;
 81078f0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 81078f2:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 81078f4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 81078f8:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 81078fc:	66a2      	str	r2, [r4, #104]	; 0x68
}
 81078fe:	b007      	add	sp, #28
 8107900:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107902:	4ba4      	ldr	r3, [pc, #656]	; (8107b94 <UART_SetConfig+0x334>)
 8107904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810790a:	2b28      	cmp	r3, #40	; 0x28
 810790c:	d8f0      	bhi.n	81078f0 <UART_SetConfig+0x90>
 810790e:	4aa2      	ldr	r2, [pc, #648]	; (8107b98 <UART_SetConfig+0x338>)
 8107910:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107912:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8107916:	d054      	beq.n	81079c2 <UART_SetConfig+0x162>
    switch (clocksource)
 8107918:	2b20      	cmp	r3, #32
 810791a:	f200 8147 	bhi.w	8107bac <UART_SetConfig+0x34c>
 810791e:	2b20      	cmp	r3, #32
 8107920:	d8e6      	bhi.n	81078f0 <UART_SetConfig+0x90>
 8107922:	a201      	add	r2, pc, #4	; (adr r2, 8107928 <UART_SetConfig+0xc8>)
 8107924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107928:	08107b67 	.word	0x08107b67
 810792c:	08107b61 	.word	0x08107b61
 8107930:	081078f1 	.word	0x081078f1
 8107934:	081078f1 	.word	0x081078f1
 8107938:	08107b51 	.word	0x08107b51
 810793c:	081078f1 	.word	0x081078f1
 8107940:	081078f1 	.word	0x081078f1
 8107944:	081078f1 	.word	0x081078f1
 8107948:	08107b43 	.word	0x08107b43
 810794c:	081078f1 	.word	0x081078f1
 8107950:	081078f1 	.word	0x081078f1
 8107954:	081078f1 	.word	0x081078f1
 8107958:	081078f1 	.word	0x081078f1
 810795c:	081078f1 	.word	0x081078f1
 8107960:	081078f1 	.word	0x081078f1
 8107964:	081078f1 	.word	0x081078f1
 8107968:	08107b2d 	.word	0x08107b2d
 810796c:	081078f1 	.word	0x081078f1
 8107970:	081078f1 	.word	0x081078f1
 8107974:	081078f1 	.word	0x081078f1
 8107978:	081078f1 	.word	0x081078f1
 810797c:	081078f1 	.word	0x081078f1
 8107980:	081078f1 	.word	0x081078f1
 8107984:	081078f1 	.word	0x081078f1
 8107988:	081078f1 	.word	0x081078f1
 810798c:	081078f1 	.word	0x081078f1
 8107990:	081078f1 	.word	0x081078f1
 8107994:	081078f1 	.word	0x081078f1
 8107998:	081078f1 	.word	0x081078f1
 810799c:	081078f1 	.word	0x081078f1
 81079a0:	081078f1 	.word	0x081078f1
 81079a4:	081078f1 	.word	0x081078f1
 81079a8:	08107cd3 	.word	0x08107cd3
  UART_GETCLOCKSOURCE(huart, clocksource);
 81079ac:	4b79      	ldr	r3, [pc, #484]	; (8107b94 <UART_SetConfig+0x334>)
 81079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81079b0:	f003 0307 	and.w	r3, r3, #7
 81079b4:	2b05      	cmp	r3, #5
 81079b6:	d89b      	bhi.n	81078f0 <UART_SetConfig+0x90>
 81079b8:	4a78      	ldr	r2, [pc, #480]	; (8107b9c <UART_SetConfig+0x33c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81079ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 81079be:	5cd3      	ldrb	r3, [r2, r3]
 81079c0:	d1aa      	bne.n	8107918 <UART_SetConfig+0xb8>
    switch (clocksource)
 81079c2:	2b20      	cmp	r3, #32
 81079c4:	f200 8146 	bhi.w	8107c54 <UART_SetConfig+0x3f4>
 81079c8:	2b20      	cmp	r3, #32
 81079ca:	d891      	bhi.n	81078f0 <UART_SetConfig+0x90>
 81079cc:	a201      	add	r2, pc, #4	; (adr r2, 81079d4 <UART_SetConfig+0x174>)
 81079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81079d2:	bf00      	nop
 81079d4:	08107d3d 	.word	0x08107d3d
 81079d8:	08107d37 	.word	0x08107d37
 81079dc:	081078f1 	.word	0x081078f1
 81079e0:	081078f1 	.word	0x081078f1
 81079e4:	08107d43 	.word	0x08107d43
 81079e8:	081078f1 	.word	0x081078f1
 81079ec:	081078f1 	.word	0x081078f1
 81079f0:	081078f1 	.word	0x081078f1
 81079f4:	08107d25 	.word	0x08107d25
 81079f8:	081078f1 	.word	0x081078f1
 81079fc:	081078f1 	.word	0x081078f1
 8107a00:	081078f1 	.word	0x081078f1
 8107a04:	081078f1 	.word	0x081078f1
 8107a08:	081078f1 	.word	0x081078f1
 8107a0c:	081078f1 	.word	0x081078f1
 8107a10:	081078f1 	.word	0x081078f1
 8107a14:	08107d11 	.word	0x08107d11
 8107a18:	081078f1 	.word	0x081078f1
 8107a1c:	081078f1 	.word	0x081078f1
 8107a20:	081078f1 	.word	0x081078f1
 8107a24:	081078f1 	.word	0x081078f1
 8107a28:	081078f1 	.word	0x081078f1
 8107a2c:	081078f1 	.word	0x081078f1
 8107a30:	081078f1 	.word	0x081078f1
 8107a34:	081078f1 	.word	0x081078f1
 8107a38:	081078f1 	.word	0x081078f1
 8107a3c:	081078f1 	.word	0x081078f1
 8107a40:	081078f1 	.word	0x081078f1
 8107a44:	081078f1 	.word	0x081078f1
 8107a48:	081078f1 	.word	0x081078f1
 8107a4c:	081078f1 	.word	0x081078f1
 8107a50:	081078f1 	.word	0x081078f1
 8107a54:	08107d4d 	.word	0x08107d4d
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107a58:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8107a5c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8107a60:	430a      	orrs	r2, r1
 8107a62:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107a66:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107a68:	484a      	ldr	r0, [pc, #296]	; (8107b94 <UART_SetConfig+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107a6a:	f022 020f 	bic.w	r2, r2, #15
 8107a6e:	430a      	orrs	r2, r1
 8107a70:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107a72:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8107a74:	f003 0307 	and.w	r3, r3, #7
 8107a78:	2b05      	cmp	r3, #5
 8107a7a:	f63f af39 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107a7e:	4a48      	ldr	r2, [pc, #288]	; (8107ba0 <UART_SetConfig+0x340>)
 8107a80:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8107a82:	2b20      	cmp	r3, #32
 8107a84:	f200 80b8 	bhi.w	8107bf8 <UART_SetConfig+0x398>
 8107a88:	2b01      	cmp	r3, #1
 8107a8a:	f67f af31 	bls.w	81078f0 <UART_SetConfig+0x90>
 8107a8e:	3b02      	subs	r3, #2
 8107a90:	2b1e      	cmp	r3, #30
 8107a92:	f63f af2d 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107a96:	a201      	add	r2, pc, #4	; (adr r2, 8107a9c <UART_SetConfig+0x23c>)
 8107a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a9c:	08107d07 	.word	0x08107d07
 8107aa0:	081078f1 	.word	0x081078f1
 8107aa4:	08107cfd 	.word	0x08107cfd
 8107aa8:	081078f1 	.word	0x081078f1
 8107aac:	081078f1 	.word	0x081078f1
 8107ab0:	081078f1 	.word	0x081078f1
 8107ab4:	08107ceb 	.word	0x08107ceb
 8107ab8:	081078f1 	.word	0x081078f1
 8107abc:	081078f1 	.word	0x081078f1
 8107ac0:	081078f1 	.word	0x081078f1
 8107ac4:	081078f1 	.word	0x081078f1
 8107ac8:	081078f1 	.word	0x081078f1
 8107acc:	081078f1 	.word	0x081078f1
 8107ad0:	081078f1 	.word	0x081078f1
 8107ad4:	08107cd7 	.word	0x08107cd7
 8107ad8:	081078f1 	.word	0x081078f1
 8107adc:	081078f1 	.word	0x081078f1
 8107ae0:	081078f1 	.word	0x081078f1
 8107ae4:	081078f1 	.word	0x081078f1
 8107ae8:	081078f1 	.word	0x081078f1
 8107aec:	081078f1 	.word	0x081078f1
 8107af0:	081078f1 	.word	0x081078f1
 8107af4:	081078f1 	.word	0x081078f1
 8107af8:	081078f1 	.word	0x081078f1
 8107afc:	081078f1 	.word	0x081078f1
 8107b00:	081078f1 	.word	0x081078f1
 8107b04:	081078f1 	.word	0x081078f1
 8107b08:	081078f1 	.word	0x081078f1
 8107b0c:	081078f1 	.word	0x081078f1
 8107b10:	081078f1 	.word	0x081078f1
 8107b14:	08107d0d 	.word	0x08107d0d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107b18:	4b1e      	ldr	r3, [pc, #120]	; (8107b94 <UART_SetConfig+0x334>)
 8107b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107b1c:	f003 0307 	and.w	r3, r3, #7
 8107b20:	2b05      	cmp	r3, #5
 8107b22:	f63f aee5 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107b26:	4a1f      	ldr	r2, [pc, #124]	; (8107ba4 <UART_SetConfig+0x344>)
 8107b28:	5cd3      	ldrb	r3, [r2, r3]
 8107b2a:	e6f2      	b.n	8107912 <UART_SetConfig+0xb2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107b2c:	4b19      	ldr	r3, [pc, #100]	; (8107b94 <UART_SetConfig+0x334>)
 8107b2e:	681a      	ldr	r2, [r3, #0]
 8107b30:	0692      	lsls	r2, r2, #26
 8107b32:	f140 80c2 	bpl.w	8107cba <UART_SetConfig+0x45a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	481b      	ldr	r0, [pc, #108]	; (8107ba8 <UART_SetConfig+0x348>)
 8107b3a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8107b3e:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8107b40:	e03a      	b.n	8107bb8 <UART_SetConfig+0x358>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b42:	a803      	add	r0, sp, #12
 8107b44:	f7fe fa36 	bl	8105fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107b48:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8107b4a:	b938      	cbnz	r0, 8107b5c <UART_SetConfig+0x2fc>
 8107b4c:	2000      	movs	r0, #0
 8107b4e:	e6d0      	b.n	81078f2 <UART_SetConfig+0x92>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b50:	4668      	mov	r0, sp
 8107b52:	f7fe f983 	bl	8105e5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107b56:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8107b58:	2800      	cmp	r0, #0
 8107b5a:	d0f7      	beq.n	8107b4c <UART_SetConfig+0x2ec>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107b5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8107b5e:	e02b      	b.n	8107bb8 <UART_SetConfig+0x358>
        pclk = HAL_RCC_GetPCLK2Freq();
 8107b60:	f7fd fae2 	bl	8105128 <HAL_RCC_GetPCLK2Freq>
        break;
 8107b64:	e7f1      	b.n	8107b4a <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8107b66:	f7fd fa95 	bl	8105094 <HAL_RCC_GetPCLK1Freq>
        break;
 8107b6a:	e7ee      	b.n	8107b4a <UART_SetConfig+0x2ea>
 8107b6c:	cfff69f3 	.word	0xcfff69f3
 8107b70:	58000c00 	.word	0x58000c00
 8107b74:	40011000 	.word	0x40011000
 8107b78:	40004400 	.word	0x40004400
 8107b7c:	40004800 	.word	0x40004800
 8107b80:	40004c00 	.word	0x40004c00
 8107b84:	40005000 	.word	0x40005000
 8107b88:	40011400 	.word	0x40011400
 8107b8c:	40007800 	.word	0x40007800
 8107b90:	40007c00 	.word	0x40007c00
 8107b94:	58024400 	.word	0x58024400
 8107b98:	081081d0 	.word	0x081081d0
 8107b9c:	081081fc 	.word	0x081081fc
 8107ba0:	08108204 	.word	0x08108204
 8107ba4:	081081fc 	.word	0x081081fc
 8107ba8:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8107bac:	2b40      	cmp	r3, #64	; 0x40
 8107bae:	bf08      	it	eq
 8107bb0:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8107bb4:	f47f ae9c 	bne.w	81078f0 <UART_SetConfig+0x90>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107bb8:	6862      	ldr	r2, [r4, #4]
 8107bba:	4b6c      	ldr	r3, [pc, #432]	; (8107d6c <UART_SetConfig+0x50c>)
 8107bbc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8107bc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8107bc4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8107bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8107bcc:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107bce:	f1a3 0110 	sub.w	r1, r3, #16
 8107bd2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8107bd6:	4291      	cmp	r1, r2
 8107bd8:	f63f ae8a 	bhi.w	81078f0 <UART_SetConfig+0x90>
        huart->Instance->BRR = usartdiv;
 8107bdc:	6822      	ldr	r2, [r4, #0]
 8107bde:	2000      	movs	r0, #0
 8107be0:	60d3      	str	r3, [r2, #12]
 8107be2:	e686      	b.n	81078f2 <UART_SetConfig+0x92>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107be4:	4b62      	ldr	r3, [pc, #392]	; (8107d70 <UART_SetConfig+0x510>)
 8107be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107be8:	f003 0307 	and.w	r3, r3, #7
 8107bec:	2b05      	cmp	r3, #5
 8107bee:	f63f ae7f 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107bf2:	4a60      	ldr	r2, [pc, #384]	; (8107d74 <UART_SetConfig+0x514>)
 8107bf4:	5cd3      	ldrb	r3, [r2, r3]
 8107bf6:	e68c      	b.n	8107912 <UART_SetConfig+0xb2>
    switch (clocksource)
 8107bf8:	2b40      	cmp	r3, #64	; 0x40
 8107bfa:	bf08      	it	eq
 8107bfc:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8107c00:	f47f ae76 	bne.w	81078f0 <UART_SetConfig+0x90>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107c04:	4b59      	ldr	r3, [pc, #356]	; (8107d6c <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107c06:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107c08:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8107c0c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107c10:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8107c14:	4299      	cmp	r1, r3
 8107c16:	f63f ae6b 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107c1a:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8107c1e:	f63f ae67 	bhi.w	81078f0 <UART_SetConfig+0x90>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107c22:	2300      	movs	r3, #0
 8107c24:	4619      	mov	r1, r3
 8107c26:	f7f8 fb57 	bl	81002d8 <__aeabi_uldivmod>
 8107c2a:	0209      	lsls	r1, r1, #8
 8107c2c:	0203      	lsls	r3, r0, #8
 8107c2e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8107c32:	0868      	lsrs	r0, r5, #1
 8107c34:	1818      	adds	r0, r3, r0
 8107c36:	462a      	mov	r2, r5
 8107c38:	f04f 0300 	mov.w	r3, #0
 8107c3c:	f141 0100 	adc.w	r1, r1, #0
 8107c40:	f7f8 fb4a 	bl	81002d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107c44:	4a4c      	ldr	r2, [pc, #304]	; (8107d78 <UART_SetConfig+0x518>)
 8107c46:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8107c4a:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107c4c:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107c4e:	f63f ae4f 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107c52:	e7c3      	b.n	8107bdc <UART_SetConfig+0x37c>
    switch (clocksource)
 8107c54:	2b40      	cmp	r3, #64	; 0x40
 8107c56:	f47f ae4b 	bne.w	81078f0 <UART_SetConfig+0x90>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107c5a:	6862      	ldr	r2, [r4, #4]
 8107c5c:	4b43      	ldr	r3, [pc, #268]	; (8107d6c <UART_SetConfig+0x50c>)
 8107c5e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8107c62:	fbb0 f0f1 	udiv	r0, r0, r1
 8107c66:	0853      	lsrs	r3, r2, #1
 8107c68:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8107c6c:	fbb0 f0f2 	udiv	r0, r0, r2
 8107c70:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107c72:	f1a3 0110 	sub.w	r1, r3, #16
 8107c76:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8107c7a:	4291      	cmp	r1, r2
 8107c7c:	f63f ae38 	bhi.w	81078f0 <UART_SetConfig+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107c80:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8107c84:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107c86:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107c88:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8107c8c:	4318      	orrs	r0, r3
 8107c8e:	60d0      	str	r0, [r2, #12]
 8107c90:	e75c      	b.n	8107b4c <UART_SetConfig+0x2ec>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107c92:	4b37      	ldr	r3, [pc, #220]	; (8107d70 <UART_SetConfig+0x510>)
 8107c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107c96:	f003 0307 	and.w	r3, r3, #7
 8107c9a:	2b05      	cmp	r3, #5
 8107c9c:	f63f ae28 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107ca0:	4a36      	ldr	r2, [pc, #216]	; (8107d7c <UART_SetConfig+0x51c>)
 8107ca2:	5cd3      	ldrb	r3, [r2, r3]
 8107ca4:	e635      	b.n	8107912 <UART_SetConfig+0xb2>
 8107ca6:	4b32      	ldr	r3, [pc, #200]	; (8107d70 <UART_SetConfig+0x510>)
 8107ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107cae:	2b28      	cmp	r3, #40	; 0x28
 8107cb0:	f63f ae1e 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107cb4:	4a32      	ldr	r2, [pc, #200]	; (8107d80 <UART_SetConfig+0x520>)
 8107cb6:	5cd3      	ldrb	r3, [r2, r3]
 8107cb8:	e62b      	b.n	8107912 <UART_SetConfig+0xb2>
          pclk = (uint32_t) HSI_VALUE;
 8107cba:	4832      	ldr	r0, [pc, #200]	; (8107d84 <UART_SetConfig+0x524>)
 8107cbc:	e77c      	b.n	8107bb8 <UART_SetConfig+0x358>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107cbe:	4b2c      	ldr	r3, [pc, #176]	; (8107d70 <UART_SetConfig+0x510>)
 8107cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107cc2:	f003 0307 	and.w	r3, r3, #7
 8107cc6:	2b05      	cmp	r3, #5
 8107cc8:	f63f ae12 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107ccc:	4a2e      	ldr	r2, [pc, #184]	; (8107d88 <UART_SetConfig+0x528>)
 8107cce:	5cd3      	ldrb	r3, [r2, r3]
 8107cd0:	e61f      	b.n	8107912 <UART_SetConfig+0xb2>
        pclk = (uint32_t) CSI_VALUE;
 8107cd2:	482e      	ldr	r0, [pc, #184]	; (8107d8c <UART_SetConfig+0x52c>)
 8107cd4:	e770      	b.n	8107bb8 <UART_SetConfig+0x358>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107cd6:	4b26      	ldr	r3, [pc, #152]	; (8107d70 <UART_SetConfig+0x510>)
 8107cd8:	681a      	ldr	r2, [r3, #0]
 8107cda:	0695      	lsls	r5, r2, #26
 8107cdc:	d542      	bpl.n	8107d64 <UART_SetConfig+0x504>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107cde:	681b      	ldr	r3, [r3, #0]
 8107ce0:	4828      	ldr	r0, [pc, #160]	; (8107d84 <UART_SetConfig+0x524>)
 8107ce2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8107ce6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8107ce8:	e78c      	b.n	8107c04 <UART_SetConfig+0x3a4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107cea:	a803      	add	r0, sp, #12
 8107cec:	f7fe f962 	bl	8105fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107cf0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8107cf2:	2800      	cmp	r0, #0
 8107cf4:	f43f af2a 	beq.w	8107b4c <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107cf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8107cfa:	e783      	b.n	8107c04 <UART_SetConfig+0x3a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107cfc:	4668      	mov	r0, sp
 8107cfe:	f7fe f8ad 	bl	8105e5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107d02:	9801      	ldr	r0, [sp, #4]
        break;
 8107d04:	e7f5      	b.n	8107cf2 <UART_SetConfig+0x492>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107d06:	f7fe f897 	bl	8105e38 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8107d0a:	e7f2      	b.n	8107cf2 <UART_SetConfig+0x492>
        pclk = (uint32_t) CSI_VALUE;
 8107d0c:	481f      	ldr	r0, [pc, #124]	; (8107d8c <UART_SetConfig+0x52c>)
 8107d0e:	e779      	b.n	8107c04 <UART_SetConfig+0x3a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107d10:	4b17      	ldr	r3, [pc, #92]	; (8107d70 <UART_SetConfig+0x510>)
 8107d12:	681a      	ldr	r2, [r3, #0]
 8107d14:	0690      	lsls	r0, r2, #26
 8107d16:	d527      	bpl.n	8107d68 <UART_SetConfig+0x508>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107d18:	681b      	ldr	r3, [r3, #0]
 8107d1a:	481a      	ldr	r0, [pc, #104]	; (8107d84 <UART_SetConfig+0x524>)
 8107d1c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8107d20:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8107d22:	e79a      	b.n	8107c5a <UART_SetConfig+0x3fa>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107d24:	a803      	add	r0, sp, #12
 8107d26:	f7fe f945 	bl	8105fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107d2a:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8107d2c:	2800      	cmp	r0, #0
 8107d2e:	f43f af0d 	beq.w	8107b4c <UART_SetConfig+0x2ec>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107d32:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8107d34:	e791      	b.n	8107c5a <UART_SetConfig+0x3fa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8107d36:	f7fd f9f7 	bl	8105128 <HAL_RCC_GetPCLK2Freq>
        break;
 8107d3a:	e7f7      	b.n	8107d2c <UART_SetConfig+0x4cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8107d3c:	f7fd f9aa 	bl	8105094 <HAL_RCC_GetPCLK1Freq>
        break;
 8107d40:	e7f4      	b.n	8107d2c <UART_SetConfig+0x4cc>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107d42:	4668      	mov	r0, sp
 8107d44:	f7fe f88a 	bl	8105e5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107d48:	9801      	ldr	r0, [sp, #4]
        break;
 8107d4a:	e7ef      	b.n	8107d2c <UART_SetConfig+0x4cc>
        pclk = (uint32_t) CSI_VALUE;
 8107d4c:	480f      	ldr	r0, [pc, #60]	; (8107d8c <UART_SetConfig+0x52c>)
 8107d4e:	e784      	b.n	8107c5a <UART_SetConfig+0x3fa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107d50:	4b07      	ldr	r3, [pc, #28]	; (8107d70 <UART_SetConfig+0x510>)
 8107d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107d54:	f003 0307 	and.w	r3, r3, #7
 8107d58:	2b05      	cmp	r3, #5
 8107d5a:	f63f adc9 	bhi.w	81078f0 <UART_SetConfig+0x90>
 8107d5e:	4a0c      	ldr	r2, [pc, #48]	; (8107d90 <UART_SetConfig+0x530>)
 8107d60:	5cd3      	ldrb	r3, [r2, r3]
 8107d62:	e5d6      	b.n	8107912 <UART_SetConfig+0xb2>
          pclk = (uint32_t) HSI_VALUE;
 8107d64:	4807      	ldr	r0, [pc, #28]	; (8107d84 <UART_SetConfig+0x524>)
 8107d66:	e74d      	b.n	8107c04 <UART_SetConfig+0x3a4>
          pclk = (uint32_t) HSI_VALUE;
 8107d68:	4806      	ldr	r0, [pc, #24]	; (8107d84 <UART_SetConfig+0x524>)
 8107d6a:	e776      	b.n	8107c5a <UART_SetConfig+0x3fa>
 8107d6c:	0810820c 	.word	0x0810820c
 8107d70:	58024400 	.word	0x58024400
 8107d74:	081081fc 	.word	0x081081fc
 8107d78:	000ffcff 	.word	0x000ffcff
 8107d7c:	081081fc 	.word	0x081081fc
 8107d80:	081081d0 	.word	0x081081d0
 8107d84:	03d09000 	.word	0x03d09000
 8107d88:	081081fc 	.word	0x081081fc
 8107d8c:	003d0900 	.word	0x003d0900
 8107d90:	081081fc 	.word	0x081081fc

08107d94 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107d94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8107d96:	07da      	lsls	r2, r3, #31
{
 8107d98:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107d9a:	d506      	bpl.n	8107daa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107d9c:	6801      	ldr	r1, [r0, #0]
 8107d9e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8107da0:	684a      	ldr	r2, [r1, #4]
 8107da2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8107da6:	4322      	orrs	r2, r4
 8107da8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107daa:	079c      	lsls	r4, r3, #30
 8107dac:	d506      	bpl.n	8107dbc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107dae:	6801      	ldr	r1, [r0, #0]
 8107db0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8107db2:	684a      	ldr	r2, [r1, #4]
 8107db4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8107db8:	4322      	orrs	r2, r4
 8107dba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107dbc:	0759      	lsls	r1, r3, #29
 8107dbe:	d506      	bpl.n	8107dce <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107dc0:	6801      	ldr	r1, [r0, #0]
 8107dc2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8107dc4:	684a      	ldr	r2, [r1, #4]
 8107dc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8107dca:	4322      	orrs	r2, r4
 8107dcc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107dce:	071a      	lsls	r2, r3, #28
 8107dd0:	d506      	bpl.n	8107de0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107dd2:	6801      	ldr	r1, [r0, #0]
 8107dd4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8107dd6:	684a      	ldr	r2, [r1, #4]
 8107dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8107ddc:	4322      	orrs	r2, r4
 8107dde:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107de0:	06dc      	lsls	r4, r3, #27
 8107de2:	d506      	bpl.n	8107df2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107de4:	6801      	ldr	r1, [r0, #0]
 8107de6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8107de8:	688a      	ldr	r2, [r1, #8]
 8107dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8107dee:	4322      	orrs	r2, r4
 8107df0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107df2:	0699      	lsls	r1, r3, #26
 8107df4:	d506      	bpl.n	8107e04 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107df6:	6801      	ldr	r1, [r0, #0]
 8107df8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8107dfa:	688a      	ldr	r2, [r1, #8]
 8107dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8107e00:	4322      	orrs	r2, r4
 8107e02:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107e04:	065a      	lsls	r2, r3, #25
 8107e06:	d509      	bpl.n	8107e1c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107e08:	6801      	ldr	r1, [r0, #0]
 8107e0a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8107e0c:	684a      	ldr	r2, [r1, #4]
 8107e0e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8107e12:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107e14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107e18:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107e1a:	d00b      	beq.n	8107e34 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107e1c:	061b      	lsls	r3, r3, #24
 8107e1e:	d506      	bpl.n	8107e2e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107e20:	6802      	ldr	r2, [r0, #0]
 8107e22:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8107e24:	6853      	ldr	r3, [r2, #4]
 8107e26:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8107e2a:	430b      	orrs	r3, r1
 8107e2c:	6053      	str	r3, [r2, #4]
}
 8107e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107e32:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107e34:	684a      	ldr	r2, [r1, #4]
 8107e36:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8107e38:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8107e3c:	4322      	orrs	r2, r4
 8107e3e:	604a      	str	r2, [r1, #4]
 8107e40:	e7ec      	b.n	8107e1c <UART_AdvFeatureConfig+0x88>
 8107e42:	bf00      	nop

08107e44 <UART_CheckIdleState>:
{
 8107e44:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107e46:	2300      	movs	r3, #0
{
 8107e48:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107e4a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8107e4e:	f7f9 fde7 	bl	8101a20 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107e52:	6823      	ldr	r3, [r4, #0]
 8107e54:	681a      	ldr	r2, [r3, #0]
 8107e56:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8107e58:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107e5a:	d40d      	bmi.n	8107e78 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107e5c:	681a      	ldr	r2, [r3, #0]
 8107e5e:	0752      	lsls	r2, r2, #29
 8107e60:	d431      	bmi.n	8107ec6 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107e62:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8107e64:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8107e66:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8107e6a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  return HAL_OK;
 8107e6e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8107e70:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107e74:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8107e76:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107e78:	69da      	ldr	r2, [r3, #28]
 8107e7a:	0292      	lsls	r2, r2, #10
 8107e7c:	d4ee      	bmi.n	8107e5c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107e7e:	f7f9 fdcf 	bl	8101a20 <HAL_GetTick>
 8107e82:	1b43      	subs	r3, r0, r5
 8107e84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8107e88:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107e8a:	d22d      	bcs.n	8107ee8 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107e8c:	681a      	ldr	r2, [r3, #0]
 8107e8e:	0750      	lsls	r0, r2, #29
 8107e90:	d5f2      	bpl.n	8107e78 <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107e92:	69da      	ldr	r2, [r3, #28]
 8107e94:	0511      	lsls	r1, r2, #20
 8107e96:	d5ef      	bpl.n	8107e78 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107e9c:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8107e9e:	6819      	ldr	r1, [r3, #0]
 8107ea0:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8107ea4:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107ea6:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 8107ea8:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107eaa:	f021 0101 	bic.w	r1, r1, #1
 8107eae:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8107eb0:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8107eb2:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8107eb6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8107eba:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8107ebc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107ec0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8107ec4:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107ec6:	69db      	ldr	r3, [r3, #28]
 8107ec8:	0258      	lsls	r0, r3, #9
 8107eca:	d4ca      	bmi.n	8107e62 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107ecc:	f7f9 fda8 	bl	8101a20 <HAL_GetTick>
 8107ed0:	1b43      	subs	r3, r0, r5
 8107ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8107ed6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107ed8:	d206      	bcs.n	8107ee8 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107eda:	681a      	ldr	r2, [r3, #0]
 8107edc:	0751      	lsls	r1, r2, #29
 8107ede:	d5f2      	bpl.n	8107ec6 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107ee0:	69da      	ldr	r2, [r3, #28]
 8107ee2:	0512      	lsls	r2, r2, #20
 8107ee4:	d5ef      	bpl.n	8107ec6 <UART_CheckIdleState+0x82>
 8107ee6:	e7d7      	b.n	8107e98 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8107ee8:	681a      	ldr	r2, [r3, #0]
 8107eea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8107eee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107ef0:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8107ef2:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107ef4:	f022 0201 	bic.w	r2, r2, #1
 8107ef8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8107efa:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8107efc:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8107f00:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8107f04:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8107f06:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8107f0a:	bd38      	pop	{r3, r4, r5, pc}

08107f0c <HAL_UART_Init>:
  if (huart == NULL)
 8107f0c:	b380      	cbz	r0, 8107f70 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8107f0e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8107f12:	b510      	push	{r4, lr}
 8107f14:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8107f16:	b333      	cbz	r3, 8107f66 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8107f18:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107f1a:	2324      	movs	r3, #36	; 0x24
 8107f1c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8107f20:	6813      	ldr	r3, [r2, #0]
 8107f22:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107f26:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8107f28:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107f2a:	f7ff fc99 	bl	8107860 <UART_SetConfig>
 8107f2e:	2801      	cmp	r0, #1
 8107f30:	d017      	beq.n	8107f62 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107f32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8107f34:	b98b      	cbnz	r3, 8107f5a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107f36:	6823      	ldr	r3, [r4, #0]
 8107f38:	685a      	ldr	r2, [r3, #4]
 8107f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107f40:	689a      	ldr	r2, [r3, #8]
 8107f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107f46:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8107f48:	681a      	ldr	r2, [r3, #0]
 8107f4a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8107f4e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8107f50:	601a      	str	r2, [r3, #0]
}
 8107f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8107f56:	f7ff bf75 	b.w	8107e44 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8107f5a:	4620      	mov	r0, r4
 8107f5c:	f7ff ff1a 	bl	8107d94 <UART_AdvFeatureConfig>
 8107f60:	e7e9      	b.n	8107f36 <HAL_UART_Init+0x2a>
}
 8107f62:	2001      	movs	r0, #1
 8107f64:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8107f66:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8107f6a:	f7f9 fc15 	bl	8101798 <HAL_UART_MspInit>
 8107f6e:	e7d3      	b.n	8107f18 <HAL_UART_Init+0xc>
}
 8107f70:	2001      	movs	r0, #1
 8107f72:	4770      	bx	lr

08107f74 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8107f74:	4770      	bx	lr
 8107f76:	bf00      	nop

08107f78 <HAL_UARTEx_RxFifoFullCallback>:
 8107f78:	4770      	bx	lr
 8107f7a:	bf00      	nop

08107f7c <HAL_UARTEx_TxFifoEmptyCallback>:
 8107f7c:	4770      	bx	lr
 8107f7e:	bf00      	nop

08107f80 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107f80:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8107f84:	2b01      	cmp	r3, #1
 8107f86:	d017      	beq.n	8107fb8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107f88:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107f8a:	2324      	movs	r3, #36	; 0x24
{
 8107f8c:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8107f8e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107f92:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107f94:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107f96:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8107f98:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8107f9c:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8107fa0:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107fa2:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107fa4:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107fa6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8107faa:	2220      	movs	r2, #32
 8107fac:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8107fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8107fb4:	4618      	mov	r0, r3
}
 8107fb6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8107fb8:	2002      	movs	r0, #2
}
 8107fba:	4770      	bx	lr

08107fbc <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107fbc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8107fc0:	2a01      	cmp	r2, #1
 8107fc2:	d037      	beq.n	8108034 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8107fc4:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107fc6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8107fc8:	2024      	movs	r0, #36	; 0x24
{
 8107fca:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8107fcc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107fd0:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107fd2:	6810      	ldr	r0, [r2, #0]
 8107fd4:	f020 0001 	bic.w	r0, r0, #1
 8107fd8:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107fda:	6890      	ldr	r0, [r2, #8]
 8107fdc:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8107fe0:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107fe2:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107fe4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107fe6:	b310      	cbz	r0, 810802e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107fe8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107fea:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8107fec:	4d12      	ldr	r5, [pc, #72]	; (8108038 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107fee:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107ff2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107ff6:	4911      	ldr	r1, [pc, #68]	; (810803c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8107ff8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107ffc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8108000:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8108004:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108008:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810800a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810800c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108010:	fbb1 f1f5 	udiv	r1, r1, r5
 8108014:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8108018:	2100      	movs	r1, #0
 810801a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 810801e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108020:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8108022:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8108026:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8108028:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 810802c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 810802e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8108030:	4608      	mov	r0, r1
 8108032:	e7ef      	b.n	8108014 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8108034:	2002      	movs	r0, #2
}
 8108036:	4770      	bx	lr
 8108038:	08108224 	.word	0x08108224
 810803c:	0810822c 	.word	0x0810822c

08108040 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8108040:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8108044:	2a01      	cmp	r2, #1
 8108046:	d037      	beq.n	81080b8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8108048:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810804a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 810804c:	2024      	movs	r0, #36	; 0x24
{
 810804e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8108050:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108054:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8108056:	6810      	ldr	r0, [r2, #0]
 8108058:	f020 0001 	bic.w	r0, r0, #1
 810805c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810805e:	6890      	ldr	r0, [r2, #8]
 8108060:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8108064:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8108066:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108068:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810806a:	b310      	cbz	r0, 81080b2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810806c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810806e:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8108070:	4d12      	ldr	r5, [pc, #72]	; (81080bc <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108072:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8108076:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810807a:	4911      	ldr	r1, [pc, #68]	; (81080c0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 810807c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108080:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8108084:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8108088:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810808c:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810808e:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8108090:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8108094:	fbb1 f1f5 	udiv	r1, r1, r5
 8108098:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 810809c:	2100      	movs	r1, #0
 810809e:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 81080a2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81080a4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 81080a6:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 81080aa:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 81080ac:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 81080b0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 81080b2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 81080b4:	4608      	mov	r0, r1
 81080b6:	e7ef      	b.n	8108098 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 81080b8:	2002      	movs	r0, #2
}
 81080ba:	4770      	bx	lr
 81080bc:	08108224 	.word	0x08108224
 81080c0:	0810822c 	.word	0x0810822c

081080c4 <__libc_init_array>:
 81080c4:	b570      	push	{r4, r5, r6, lr}
 81080c6:	4d0d      	ldr	r5, [pc, #52]	; (81080fc <__libc_init_array+0x38>)
 81080c8:	4c0d      	ldr	r4, [pc, #52]	; (8108100 <__libc_init_array+0x3c>)
 81080ca:	1b64      	subs	r4, r4, r5
 81080cc:	10a4      	asrs	r4, r4, #2
 81080ce:	2600      	movs	r6, #0
 81080d0:	42a6      	cmp	r6, r4
 81080d2:	d109      	bne.n	81080e8 <__libc_init_array+0x24>
 81080d4:	4d0b      	ldr	r5, [pc, #44]	; (8108104 <__libc_init_array+0x40>)
 81080d6:	4c0c      	ldr	r4, [pc, #48]	; (8108108 <__libc_init_array+0x44>)
 81080d8:	f000 f820 	bl	810811c <_init>
 81080dc:	1b64      	subs	r4, r4, r5
 81080de:	10a4      	asrs	r4, r4, #2
 81080e0:	2600      	movs	r6, #0
 81080e2:	42a6      	cmp	r6, r4
 81080e4:	d105      	bne.n	81080f2 <__libc_init_array+0x2e>
 81080e6:	bd70      	pop	{r4, r5, r6, pc}
 81080e8:	f855 3b04 	ldr.w	r3, [r5], #4
 81080ec:	4798      	blx	r3
 81080ee:	3601      	adds	r6, #1
 81080f0:	e7ee      	b.n	81080d0 <__libc_init_array+0xc>
 81080f2:	f855 3b04 	ldr.w	r3, [r5], #4
 81080f6:	4798      	blx	r3
 81080f8:	3601      	adds	r6, #1
 81080fa:	e7f2      	b.n	81080e2 <__libc_init_array+0x1e>
 81080fc:	0810823c 	.word	0x0810823c
 8108100:	0810823c 	.word	0x0810823c
 8108104:	0810823c 	.word	0x0810823c
 8108108:	08108240 	.word	0x08108240

0810810c <memset>:
 810810c:	4402      	add	r2, r0
 810810e:	4603      	mov	r3, r0
 8108110:	4293      	cmp	r3, r2
 8108112:	d100      	bne.n	8108116 <memset+0xa>
 8108114:	4770      	bx	lr
 8108116:	f803 1b01 	strb.w	r1, [r3], #1
 810811a:	e7f9      	b.n	8108110 <memset+0x4>

0810811c <_init>:
 810811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810811e:	bf00      	nop
 8108120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108122:	bc08      	pop	{r3}
 8108124:	469e      	mov	lr, r3
 8108126:	4770      	bx	lr

08108128 <_fini>:
 8108128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810812a:	bf00      	nop
 810812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810812e:	bc08      	pop	{r3}
 8108130:	469e      	mov	lr, r3
 8108132:	4770      	bx	lr
