
baremetal_2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db8  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0810a050  0810a050  0001a050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810a180  0810a180  0001a180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810a188  0810a188  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810a18c  0810a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  0810a190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000059c  10000074  0810a204  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000610  0810a204  00020610  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003c413  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f15  00000000  00000000  0005c4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001c968  00000000  00000000  000623cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000012f8  00000000  00000000  0007ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00004428  00000000  00000000  00080030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e627  00000000  00000000  00084458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00030052  00000000  00000000  000c2a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00193f34  00000000  00000000  000f2ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00286a05  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000041e0  00000000  00000000  00286a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000074 	.word	0x10000074
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810a038 	.word	0x0810a038

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000078 	.word	0x10000078
 81002d4:	0810a038 	.word	0x0810a038

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__gedf2>:
 8100a74:	f04f 3cff 	mov.w	ip, #4294967295
 8100a78:	e006      	b.n	8100a88 <__cmpdf2+0x4>
 8100a7a:	bf00      	nop

08100a7c <__ledf2>:
 8100a7c:	f04f 0c01 	mov.w	ip, #1
 8100a80:	e002      	b.n	8100a88 <__cmpdf2+0x4>
 8100a82:	bf00      	nop

08100a84 <__cmpdf2>:
 8100a84:	f04f 0c01 	mov.w	ip, #1
 8100a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100a98:	bf18      	it	ne
 8100a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100a9e:	d01b      	beq.n	8100ad8 <__cmpdf2+0x54>
 8100aa0:	b001      	add	sp, #4
 8100aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100aa6:	bf0c      	ite	eq
 8100aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100aac:	ea91 0f03 	teqne	r1, r3
 8100ab0:	bf02      	ittt	eq
 8100ab2:	ea90 0f02 	teqeq	r0, r2
 8100ab6:	2000      	moveq	r0, #0
 8100ab8:	4770      	bxeq	lr
 8100aba:	f110 0f00 	cmn.w	r0, #0
 8100abe:	ea91 0f03 	teq	r1, r3
 8100ac2:	bf58      	it	pl
 8100ac4:	4299      	cmppl	r1, r3
 8100ac6:	bf08      	it	eq
 8100ac8:	4290      	cmpeq	r0, r2
 8100aca:	bf2c      	ite	cs
 8100acc:	17d8      	asrcs	r0, r3, #31
 8100ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100ad2:	f040 0001 	orr.w	r0, r0, #1
 8100ad6:	4770      	bx	lr
 8100ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ae0:	d102      	bne.n	8100ae8 <__cmpdf2+0x64>
 8100ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100ae6:	d107      	bne.n	8100af8 <__cmpdf2+0x74>
 8100ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af0:	d1d6      	bne.n	8100aa0 <__cmpdf2+0x1c>
 8100af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100af6:	d0d3      	beq.n	8100aa0 <__cmpdf2+0x1c>
 8100af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100afc:	4770      	bx	lr
 8100afe:	bf00      	nop

08100b00 <__aeabi_cdrcmple>:
 8100b00:	4684      	mov	ip, r0
 8100b02:	4610      	mov	r0, r2
 8100b04:	4662      	mov	r2, ip
 8100b06:	468c      	mov	ip, r1
 8100b08:	4619      	mov	r1, r3
 8100b0a:	4663      	mov	r3, ip
 8100b0c:	e000      	b.n	8100b10 <__aeabi_cdcmpeq>
 8100b0e:	bf00      	nop

08100b10 <__aeabi_cdcmpeq>:
 8100b10:	b501      	push	{r0, lr}
 8100b12:	f7ff ffb7 	bl	8100a84 <__cmpdf2>
 8100b16:	2800      	cmp	r0, #0
 8100b18:	bf48      	it	mi
 8100b1a:	f110 0f00 	cmnmi.w	r0, #0
 8100b1e:	bd01      	pop	{r0, pc}

08100b20 <__aeabi_dcmpeq>:
 8100b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b24:	f7ff fff4 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b28:	bf0c      	ite	eq
 8100b2a:	2001      	moveq	r0, #1
 8100b2c:	2000      	movne	r0, #0
 8100b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b32:	bf00      	nop

08100b34 <__aeabi_dcmplt>:
 8100b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b38:	f7ff ffea 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b3c:	bf34      	ite	cc
 8100b3e:	2001      	movcc	r0, #1
 8100b40:	2000      	movcs	r0, #0
 8100b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b46:	bf00      	nop

08100b48 <__aeabi_dcmple>:
 8100b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b4c:	f7ff ffe0 	bl	8100b10 <__aeabi_cdcmpeq>
 8100b50:	bf94      	ite	ls
 8100b52:	2001      	movls	r0, #1
 8100b54:	2000      	movhi	r0, #0
 8100b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5a:	bf00      	nop

08100b5c <__aeabi_dcmpge>:
 8100b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b60:	f7ff ffce 	bl	8100b00 <__aeabi_cdrcmple>
 8100b64:	bf94      	ite	ls
 8100b66:	2001      	movls	r0, #1
 8100b68:	2000      	movhi	r0, #0
 8100b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b6e:	bf00      	nop

08100b70 <__aeabi_dcmpgt>:
 8100b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b74:	f7ff ffc4 	bl	8100b00 <__aeabi_cdrcmple>
 8100b78:	bf34      	ite	cc
 8100b7a:	2001      	movcc	r0, #1
 8100b7c:	2000      	movcs	r0, #0
 8100b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b82:	bf00      	nop

08100b84 <__aeabi_dcmpun>:
 8100b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b8c:	d102      	bne.n	8100b94 <__aeabi_dcmpun+0x10>
 8100b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b92:	d10a      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b9c:	d102      	bne.n	8100ba4 <__aeabi_dcmpun+0x20>
 8100b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100ba2:	d102      	bne.n	8100baa <__aeabi_dcmpun+0x26>
 8100ba4:	f04f 0000 	mov.w	r0, #0
 8100ba8:	4770      	bx	lr
 8100baa:	f04f 0001 	mov.w	r0, #1
 8100bae:	4770      	bx	lr

08100bb0 <__aeabi_d2f>:
 8100bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100bb8:	bf24      	itt	cs
 8100bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100bc2:	d90d      	bls.n	8100be0 <__aeabi_d2f+0x30>
 8100bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100bd8:	bf08      	it	eq
 8100bda:	f020 0001 	biceq.w	r0, r0, #1
 8100bde:	4770      	bx	lr
 8100be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100be4:	d121      	bne.n	8100c2a <__aeabi_d2f+0x7a>
 8100be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100bea:	bfbc      	itt	lt
 8100bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100bf0:	4770      	bxlt	lr
 8100bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100bfa:	f1c2 0218 	rsb	r2, r2, #24
 8100bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8100c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c06:	fa20 f002 	lsr.w	r0, r0, r2
 8100c0a:	bf18      	it	ne
 8100c0c:	f040 0001 	orrne.w	r0, r0, #1
 8100c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c1c:	ea40 000c 	orr.w	r0, r0, ip
 8100c20:	fa23 f302 	lsr.w	r3, r3, r2
 8100c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c28:	e7cc      	b.n	8100bc4 <__aeabi_d2f+0x14>
 8100c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c2e:	d107      	bne.n	8100c40 <__aeabi_d2f+0x90>
 8100c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c34:	bf1e      	ittt	ne
 8100c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100c3e:	4770      	bxne	lr
 8100c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c4c:	4770      	bx	lr
 8100c4e:	bf00      	nop

08100c50 <__aeabi_frsub>:
 8100c50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8100c54:	e002      	b.n	8100c5c <__addsf3>
 8100c56:	bf00      	nop

08100c58 <__aeabi_fsub>:
 8100c58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08100c5c <__addsf3>:
 8100c5c:	0042      	lsls	r2, r0, #1
 8100c5e:	bf1f      	itttt	ne
 8100c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8100c64:	ea92 0f03 	teqne	r2, r3
 8100c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8100c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100c70:	d06a      	beq.n	8100d48 <__addsf3+0xec>
 8100c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8100c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8100c7a:	bfc1      	itttt	gt
 8100c7c:	18d2      	addgt	r2, r2, r3
 8100c7e:	4041      	eorgt	r1, r0
 8100c80:	4048      	eorgt	r0, r1
 8100c82:	4041      	eorgt	r1, r0
 8100c84:	bfb8      	it	lt
 8100c86:	425b      	neglt	r3, r3
 8100c88:	2b19      	cmp	r3, #25
 8100c8a:	bf88      	it	hi
 8100c8c:	4770      	bxhi	lr
 8100c8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8100c92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100c96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8100c9a:	bf18      	it	ne
 8100c9c:	4240      	negne	r0, r0
 8100c9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100ca2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8100ca6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8100caa:	bf18      	it	ne
 8100cac:	4249      	negne	r1, r1
 8100cae:	ea92 0f03 	teq	r2, r3
 8100cb2:	d03f      	beq.n	8100d34 <__addsf3+0xd8>
 8100cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8100cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8100cbc:	eb10 000c 	adds.w	r0, r0, ip
 8100cc0:	f1c3 0320 	rsb	r3, r3, #32
 8100cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8100cc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100ccc:	d502      	bpl.n	8100cd4 <__addsf3+0x78>
 8100cce:	4249      	negs	r1, r1
 8100cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8100cd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8100cd8:	d313      	bcc.n	8100d02 <__addsf3+0xa6>
 8100cda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8100cde:	d306      	bcc.n	8100cee <__addsf3+0x92>
 8100ce0:	0840      	lsrs	r0, r0, #1
 8100ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8100ce6:	f102 0201 	add.w	r2, r2, #1
 8100cea:	2afe      	cmp	r2, #254	; 0xfe
 8100cec:	d251      	bcs.n	8100d92 <__addsf3+0x136>
 8100cee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8100cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8100cf6:	bf08      	it	eq
 8100cf8:	f020 0001 	biceq.w	r0, r0, #1
 8100cfc:	ea40 0003 	orr.w	r0, r0, r3
 8100d00:	4770      	bx	lr
 8100d02:	0049      	lsls	r1, r1, #1
 8100d04:	eb40 0000 	adc.w	r0, r0, r0
 8100d08:	3a01      	subs	r2, #1
 8100d0a:	bf28      	it	cs
 8100d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8100d10:	d2ed      	bcs.n	8100cee <__addsf3+0x92>
 8100d12:	fab0 fc80 	clz	ip, r0
 8100d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8100d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8100d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8100d22:	bfaa      	itet	ge
 8100d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8100d28:	4252      	neglt	r2, r2
 8100d2a:	4318      	orrge	r0, r3
 8100d2c:	bfbc      	itt	lt
 8100d2e:	40d0      	lsrlt	r0, r2
 8100d30:	4318      	orrlt	r0, r3
 8100d32:	4770      	bx	lr
 8100d34:	f092 0f00 	teq	r2, #0
 8100d38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8100d3c:	bf06      	itte	eq
 8100d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8100d42:	3201      	addeq	r2, #1
 8100d44:	3b01      	subne	r3, #1
 8100d46:	e7b5      	b.n	8100cb4 <__addsf3+0x58>
 8100d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8100d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8100d50:	bf18      	it	ne
 8100d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8100d56:	d021      	beq.n	8100d9c <__addsf3+0x140>
 8100d58:	ea92 0f03 	teq	r2, r3
 8100d5c:	d004      	beq.n	8100d68 <__addsf3+0x10c>
 8100d5e:	f092 0f00 	teq	r2, #0
 8100d62:	bf08      	it	eq
 8100d64:	4608      	moveq	r0, r1
 8100d66:	4770      	bx	lr
 8100d68:	ea90 0f01 	teq	r0, r1
 8100d6c:	bf1c      	itt	ne
 8100d6e:	2000      	movne	r0, #0
 8100d70:	4770      	bxne	lr
 8100d72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8100d76:	d104      	bne.n	8100d82 <__addsf3+0x126>
 8100d78:	0040      	lsls	r0, r0, #1
 8100d7a:	bf28      	it	cs
 8100d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8100d80:	4770      	bx	lr
 8100d82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8100d86:	bf3c      	itt	cc
 8100d88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8100d8c:	4770      	bxcc	lr
 8100d8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8100d92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8100d96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d9a:	4770      	bx	lr
 8100d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8100da0:	bf16      	itet	ne
 8100da2:	4608      	movne	r0, r1
 8100da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8100da8:	4601      	movne	r1, r0
 8100daa:	0242      	lsls	r2, r0, #9
 8100dac:	bf06      	itte	eq
 8100dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8100db2:	ea90 0f01 	teqeq	r0, r1
 8100db6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8100dba:	4770      	bx	lr

08100dbc <__aeabi_ui2f>:
 8100dbc:	f04f 0300 	mov.w	r3, #0
 8100dc0:	e004      	b.n	8100dcc <__aeabi_i2f+0x8>
 8100dc2:	bf00      	nop

08100dc4 <__aeabi_i2f>:
 8100dc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8100dc8:	bf48      	it	mi
 8100dca:	4240      	negmi	r0, r0
 8100dcc:	ea5f 0c00 	movs.w	ip, r0
 8100dd0:	bf08      	it	eq
 8100dd2:	4770      	bxeq	lr
 8100dd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8100dd8:	4601      	mov	r1, r0
 8100dda:	f04f 0000 	mov.w	r0, #0
 8100dde:	e01c      	b.n	8100e1a <__aeabi_l2f+0x2a>

08100de0 <__aeabi_ul2f>:
 8100de0:	ea50 0201 	orrs.w	r2, r0, r1
 8100de4:	bf08      	it	eq
 8100de6:	4770      	bxeq	lr
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e00a      	b.n	8100e04 <__aeabi_l2f+0x14>
 8100dee:	bf00      	nop

08100df0 <__aeabi_l2f>:
 8100df0:	ea50 0201 	orrs.w	r2, r0, r1
 8100df4:	bf08      	it	eq
 8100df6:	4770      	bxeq	lr
 8100df8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8100dfc:	d502      	bpl.n	8100e04 <__aeabi_l2f+0x14>
 8100dfe:	4240      	negs	r0, r0
 8100e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100e04:	ea5f 0c01 	movs.w	ip, r1
 8100e08:	bf02      	ittt	eq
 8100e0a:	4684      	moveq	ip, r0
 8100e0c:	4601      	moveq	r1, r0
 8100e0e:	2000      	moveq	r0, #0
 8100e10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8100e14:	bf08      	it	eq
 8100e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8100e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8100e1e:	fabc f28c 	clz	r2, ip
 8100e22:	3a08      	subs	r2, #8
 8100e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8100e28:	db10      	blt.n	8100e4c <__aeabi_l2f+0x5c>
 8100e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e2e:	4463      	add	r3, ip
 8100e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8100e34:	f1c2 0220 	rsb	r2, r2, #32
 8100e38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8100e40:	eb43 0002 	adc.w	r0, r3, r2
 8100e44:	bf08      	it	eq
 8100e46:	f020 0001 	biceq.w	r0, r0, #1
 8100e4a:	4770      	bx	lr
 8100e4c:	f102 0220 	add.w	r2, r2, #32
 8100e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8100e54:	f1c2 0220 	rsb	r2, r2, #32
 8100e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8100e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8100e60:	eb43 0002 	adc.w	r0, r3, r2
 8100e64:	bf08      	it	eq
 8100e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8100e6a:	4770      	bx	lr

08100e6c <__aeabi_ldivmod>:
 8100e6c:	b97b      	cbnz	r3, 8100e8e <__aeabi_ldivmod+0x22>
 8100e6e:	b972      	cbnz	r2, 8100e8e <__aeabi_ldivmod+0x22>
 8100e70:	2900      	cmp	r1, #0
 8100e72:	bfbe      	ittt	lt
 8100e74:	2000      	movlt	r0, #0
 8100e76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8100e7a:	e006      	blt.n	8100e8a <__aeabi_ldivmod+0x1e>
 8100e7c:	bf08      	it	eq
 8100e7e:	2800      	cmpeq	r0, #0
 8100e80:	bf1c      	itt	ne
 8100e82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8100e86:	f04f 30ff 	movne.w	r0, #4294967295
 8100e8a:	f000 b9bf 	b.w	810120c <__aeabi_idiv0>
 8100e8e:	f1ad 0c08 	sub.w	ip, sp, #8
 8100e92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100e96:	2900      	cmp	r1, #0
 8100e98:	db09      	blt.n	8100eae <__aeabi_ldivmod+0x42>
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	db1a      	blt.n	8100ed4 <__aeabi_ldivmod+0x68>
 8100e9e:	f000 f84d 	bl	8100f3c <__udivmoddi4>
 8100ea2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100eaa:	b004      	add	sp, #16
 8100eac:	4770      	bx	lr
 8100eae:	4240      	negs	r0, r0
 8100eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eb4:	2b00      	cmp	r3, #0
 8100eb6:	db1b      	blt.n	8100ef0 <__aeabi_ldivmod+0x84>
 8100eb8:	f000 f840 	bl	8100f3c <__udivmoddi4>
 8100ebc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ec0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ec4:	b004      	add	sp, #16
 8100ec6:	4240      	negs	r0, r0
 8100ec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100ecc:	4252      	negs	r2, r2
 8100ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ed2:	4770      	bx	lr
 8100ed4:	4252      	negs	r2, r2
 8100ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100eda:	f000 f82f 	bl	8100f3c <__udivmoddi4>
 8100ede:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ee6:	b004      	add	sp, #16
 8100ee8:	4240      	negs	r0, r0
 8100eea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100eee:	4770      	bx	lr
 8100ef0:	4252      	negs	r2, r2
 8100ef2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100ef6:	f000 f821 	bl	8100f3c <__udivmoddi4>
 8100efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f02:	b004      	add	sp, #16
 8100f04:	4252      	negs	r2, r2
 8100f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100f0a:	4770      	bx	lr

08100f0c <__aeabi_uldivmod>:
 8100f0c:	b953      	cbnz	r3, 8100f24 <__aeabi_uldivmod+0x18>
 8100f0e:	b94a      	cbnz	r2, 8100f24 <__aeabi_uldivmod+0x18>
 8100f10:	2900      	cmp	r1, #0
 8100f12:	bf08      	it	eq
 8100f14:	2800      	cmpeq	r0, #0
 8100f16:	bf1c      	itt	ne
 8100f18:	f04f 31ff 	movne.w	r1, #4294967295
 8100f1c:	f04f 30ff 	movne.w	r0, #4294967295
 8100f20:	f000 b974 	b.w	810120c <__aeabi_idiv0>
 8100f24:	f1ad 0c08 	sub.w	ip, sp, #8
 8100f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100f2c:	f000 f806 	bl	8100f3c <__udivmoddi4>
 8100f30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100f38:	b004      	add	sp, #16
 8100f3a:	4770      	bx	lr

08100f3c <__udivmoddi4>:
 8100f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100f40:	9d08      	ldr	r5, [sp, #32]
 8100f42:	4604      	mov	r4, r0
 8100f44:	468e      	mov	lr, r1
 8100f46:	2b00      	cmp	r3, #0
 8100f48:	d14d      	bne.n	8100fe6 <__udivmoddi4+0xaa>
 8100f4a:	428a      	cmp	r2, r1
 8100f4c:	4694      	mov	ip, r2
 8100f4e:	d969      	bls.n	8101024 <__udivmoddi4+0xe8>
 8100f50:	fab2 f282 	clz	r2, r2
 8100f54:	b152      	cbz	r2, 8100f6c <__udivmoddi4+0x30>
 8100f56:	fa01 f302 	lsl.w	r3, r1, r2
 8100f5a:	f1c2 0120 	rsb	r1, r2, #32
 8100f5e:	fa20 f101 	lsr.w	r1, r0, r1
 8100f62:	fa0c fc02 	lsl.w	ip, ip, r2
 8100f66:	ea41 0e03 	orr.w	lr, r1, r3
 8100f6a:	4094      	lsls	r4, r2
 8100f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f70:	0c21      	lsrs	r1, r4, #16
 8100f72:	fbbe f6f8 	udiv	r6, lr, r8
 8100f76:	fa1f f78c 	uxth.w	r7, ip
 8100f7a:	fb08 e316 	mls	r3, r8, r6, lr
 8100f7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100f82:	fb06 f107 	mul.w	r1, r6, r7
 8100f86:	4299      	cmp	r1, r3
 8100f88:	d90a      	bls.n	8100fa0 <__udivmoddi4+0x64>
 8100f8a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8100f92:	f080 811f 	bcs.w	81011d4 <__udivmoddi4+0x298>
 8100f96:	4299      	cmp	r1, r3
 8100f98:	f240 811c 	bls.w	81011d4 <__udivmoddi4+0x298>
 8100f9c:	3e02      	subs	r6, #2
 8100f9e:	4463      	add	r3, ip
 8100fa0:	1a5b      	subs	r3, r3, r1
 8100fa2:	b2a4      	uxth	r4, r4
 8100fa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8100fa8:	fb08 3310 	mls	r3, r8, r0, r3
 8100fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100fb0:	fb00 f707 	mul.w	r7, r0, r7
 8100fb4:	42a7      	cmp	r7, r4
 8100fb6:	d90a      	bls.n	8100fce <__udivmoddi4+0x92>
 8100fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8100fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8100fc0:	f080 810a 	bcs.w	81011d8 <__udivmoddi4+0x29c>
 8100fc4:	42a7      	cmp	r7, r4
 8100fc6:	f240 8107 	bls.w	81011d8 <__udivmoddi4+0x29c>
 8100fca:	4464      	add	r4, ip
 8100fcc:	3802      	subs	r0, #2
 8100fce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100fd2:	1be4      	subs	r4, r4, r7
 8100fd4:	2600      	movs	r6, #0
 8100fd6:	b11d      	cbz	r5, 8100fe0 <__udivmoddi4+0xa4>
 8100fd8:	40d4      	lsrs	r4, r2
 8100fda:	2300      	movs	r3, #0
 8100fdc:	e9c5 4300 	strd	r4, r3, [r5]
 8100fe0:	4631      	mov	r1, r6
 8100fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100fe6:	428b      	cmp	r3, r1
 8100fe8:	d909      	bls.n	8100ffe <__udivmoddi4+0xc2>
 8100fea:	2d00      	cmp	r5, #0
 8100fec:	f000 80ef 	beq.w	81011ce <__udivmoddi4+0x292>
 8100ff0:	2600      	movs	r6, #0
 8100ff2:	e9c5 0100 	strd	r0, r1, [r5]
 8100ff6:	4630      	mov	r0, r6
 8100ff8:	4631      	mov	r1, r6
 8100ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ffe:	fab3 f683 	clz	r6, r3
 8101002:	2e00      	cmp	r6, #0
 8101004:	d14a      	bne.n	810109c <__udivmoddi4+0x160>
 8101006:	428b      	cmp	r3, r1
 8101008:	d302      	bcc.n	8101010 <__udivmoddi4+0xd4>
 810100a:	4282      	cmp	r2, r0
 810100c:	f200 80f9 	bhi.w	8101202 <__udivmoddi4+0x2c6>
 8101010:	1a84      	subs	r4, r0, r2
 8101012:	eb61 0303 	sbc.w	r3, r1, r3
 8101016:	2001      	movs	r0, #1
 8101018:	469e      	mov	lr, r3
 810101a:	2d00      	cmp	r5, #0
 810101c:	d0e0      	beq.n	8100fe0 <__udivmoddi4+0xa4>
 810101e:	e9c5 4e00 	strd	r4, lr, [r5]
 8101022:	e7dd      	b.n	8100fe0 <__udivmoddi4+0xa4>
 8101024:	b902      	cbnz	r2, 8101028 <__udivmoddi4+0xec>
 8101026:	deff      	udf	#255	; 0xff
 8101028:	fab2 f282 	clz	r2, r2
 810102c:	2a00      	cmp	r2, #0
 810102e:	f040 8092 	bne.w	8101156 <__udivmoddi4+0x21a>
 8101032:	eba1 010c 	sub.w	r1, r1, ip
 8101036:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810103a:	fa1f fe8c 	uxth.w	lr, ip
 810103e:	2601      	movs	r6, #1
 8101040:	0c20      	lsrs	r0, r4, #16
 8101042:	fbb1 f3f7 	udiv	r3, r1, r7
 8101046:	fb07 1113 	mls	r1, r7, r3, r1
 810104a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810104e:	fb0e f003 	mul.w	r0, lr, r3
 8101052:	4288      	cmp	r0, r1
 8101054:	d908      	bls.n	8101068 <__udivmoddi4+0x12c>
 8101056:	eb1c 0101 	adds.w	r1, ip, r1
 810105a:	f103 38ff 	add.w	r8, r3, #4294967295
 810105e:	d202      	bcs.n	8101066 <__udivmoddi4+0x12a>
 8101060:	4288      	cmp	r0, r1
 8101062:	f200 80cb 	bhi.w	81011fc <__udivmoddi4+0x2c0>
 8101066:	4643      	mov	r3, r8
 8101068:	1a09      	subs	r1, r1, r0
 810106a:	b2a4      	uxth	r4, r4
 810106c:	fbb1 f0f7 	udiv	r0, r1, r7
 8101070:	fb07 1110 	mls	r1, r7, r0, r1
 8101074:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8101078:	fb0e fe00 	mul.w	lr, lr, r0
 810107c:	45a6      	cmp	lr, r4
 810107e:	d908      	bls.n	8101092 <__udivmoddi4+0x156>
 8101080:	eb1c 0404 	adds.w	r4, ip, r4
 8101084:	f100 31ff 	add.w	r1, r0, #4294967295
 8101088:	d202      	bcs.n	8101090 <__udivmoddi4+0x154>
 810108a:	45a6      	cmp	lr, r4
 810108c:	f200 80bb 	bhi.w	8101206 <__udivmoddi4+0x2ca>
 8101090:	4608      	mov	r0, r1
 8101092:	eba4 040e 	sub.w	r4, r4, lr
 8101096:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810109a:	e79c      	b.n	8100fd6 <__udivmoddi4+0x9a>
 810109c:	f1c6 0720 	rsb	r7, r6, #32
 81010a0:	40b3      	lsls	r3, r6
 81010a2:	fa22 fc07 	lsr.w	ip, r2, r7
 81010a6:	ea4c 0c03 	orr.w	ip, ip, r3
 81010aa:	fa20 f407 	lsr.w	r4, r0, r7
 81010ae:	fa01 f306 	lsl.w	r3, r1, r6
 81010b2:	431c      	orrs	r4, r3
 81010b4:	40f9      	lsrs	r1, r7
 81010b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 81010ba:	fa00 f306 	lsl.w	r3, r0, r6
 81010be:	fbb1 f8f9 	udiv	r8, r1, r9
 81010c2:	0c20      	lsrs	r0, r4, #16
 81010c4:	fa1f fe8c 	uxth.w	lr, ip
 81010c8:	fb09 1118 	mls	r1, r9, r8, r1
 81010cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81010d0:	fb08 f00e 	mul.w	r0, r8, lr
 81010d4:	4288      	cmp	r0, r1
 81010d6:	fa02 f206 	lsl.w	r2, r2, r6
 81010da:	d90b      	bls.n	81010f4 <__udivmoddi4+0x1b8>
 81010dc:	eb1c 0101 	adds.w	r1, ip, r1
 81010e0:	f108 3aff 	add.w	sl, r8, #4294967295
 81010e4:	f080 8088 	bcs.w	81011f8 <__udivmoddi4+0x2bc>
 81010e8:	4288      	cmp	r0, r1
 81010ea:	f240 8085 	bls.w	81011f8 <__udivmoddi4+0x2bc>
 81010ee:	f1a8 0802 	sub.w	r8, r8, #2
 81010f2:	4461      	add	r1, ip
 81010f4:	1a09      	subs	r1, r1, r0
 81010f6:	b2a4      	uxth	r4, r4
 81010f8:	fbb1 f0f9 	udiv	r0, r1, r9
 81010fc:	fb09 1110 	mls	r1, r9, r0, r1
 8101100:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8101104:	fb00 fe0e 	mul.w	lr, r0, lr
 8101108:	458e      	cmp	lr, r1
 810110a:	d908      	bls.n	810111e <__udivmoddi4+0x1e2>
 810110c:	eb1c 0101 	adds.w	r1, ip, r1
 8101110:	f100 34ff 	add.w	r4, r0, #4294967295
 8101114:	d26c      	bcs.n	81011f0 <__udivmoddi4+0x2b4>
 8101116:	458e      	cmp	lr, r1
 8101118:	d96a      	bls.n	81011f0 <__udivmoddi4+0x2b4>
 810111a:	3802      	subs	r0, #2
 810111c:	4461      	add	r1, ip
 810111e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8101122:	fba0 9402 	umull	r9, r4, r0, r2
 8101126:	eba1 010e 	sub.w	r1, r1, lr
 810112a:	42a1      	cmp	r1, r4
 810112c:	46c8      	mov	r8, r9
 810112e:	46a6      	mov	lr, r4
 8101130:	d356      	bcc.n	81011e0 <__udivmoddi4+0x2a4>
 8101132:	d053      	beq.n	81011dc <__udivmoddi4+0x2a0>
 8101134:	b15d      	cbz	r5, 810114e <__udivmoddi4+0x212>
 8101136:	ebb3 0208 	subs.w	r2, r3, r8
 810113a:	eb61 010e 	sbc.w	r1, r1, lr
 810113e:	fa01 f707 	lsl.w	r7, r1, r7
 8101142:	fa22 f306 	lsr.w	r3, r2, r6
 8101146:	40f1      	lsrs	r1, r6
 8101148:	431f      	orrs	r7, r3
 810114a:	e9c5 7100 	strd	r7, r1, [r5]
 810114e:	2600      	movs	r6, #0
 8101150:	4631      	mov	r1, r6
 8101152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101156:	f1c2 0320 	rsb	r3, r2, #32
 810115a:	40d8      	lsrs	r0, r3
 810115c:	fa0c fc02 	lsl.w	ip, ip, r2
 8101160:	fa21 f303 	lsr.w	r3, r1, r3
 8101164:	4091      	lsls	r1, r2
 8101166:	4301      	orrs	r1, r0
 8101168:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810116c:	fa1f fe8c 	uxth.w	lr, ip
 8101170:	fbb3 f0f7 	udiv	r0, r3, r7
 8101174:	fb07 3610 	mls	r6, r7, r0, r3
 8101178:	0c0b      	lsrs	r3, r1, #16
 810117a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 810117e:	fb00 f60e 	mul.w	r6, r0, lr
 8101182:	429e      	cmp	r6, r3
 8101184:	fa04 f402 	lsl.w	r4, r4, r2
 8101188:	d908      	bls.n	810119c <__udivmoddi4+0x260>
 810118a:	eb1c 0303 	adds.w	r3, ip, r3
 810118e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101192:	d22f      	bcs.n	81011f4 <__udivmoddi4+0x2b8>
 8101194:	429e      	cmp	r6, r3
 8101196:	d92d      	bls.n	81011f4 <__udivmoddi4+0x2b8>
 8101198:	3802      	subs	r0, #2
 810119a:	4463      	add	r3, ip
 810119c:	1b9b      	subs	r3, r3, r6
 810119e:	b289      	uxth	r1, r1
 81011a0:	fbb3 f6f7 	udiv	r6, r3, r7
 81011a4:	fb07 3316 	mls	r3, r7, r6, r3
 81011a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81011ac:	fb06 f30e 	mul.w	r3, r6, lr
 81011b0:	428b      	cmp	r3, r1
 81011b2:	d908      	bls.n	81011c6 <__udivmoddi4+0x28a>
 81011b4:	eb1c 0101 	adds.w	r1, ip, r1
 81011b8:	f106 38ff 	add.w	r8, r6, #4294967295
 81011bc:	d216      	bcs.n	81011ec <__udivmoddi4+0x2b0>
 81011be:	428b      	cmp	r3, r1
 81011c0:	d914      	bls.n	81011ec <__udivmoddi4+0x2b0>
 81011c2:	3e02      	subs	r6, #2
 81011c4:	4461      	add	r1, ip
 81011c6:	1ac9      	subs	r1, r1, r3
 81011c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81011cc:	e738      	b.n	8101040 <__udivmoddi4+0x104>
 81011ce:	462e      	mov	r6, r5
 81011d0:	4628      	mov	r0, r5
 81011d2:	e705      	b.n	8100fe0 <__udivmoddi4+0xa4>
 81011d4:	4606      	mov	r6, r0
 81011d6:	e6e3      	b.n	8100fa0 <__udivmoddi4+0x64>
 81011d8:	4618      	mov	r0, r3
 81011da:	e6f8      	b.n	8100fce <__udivmoddi4+0x92>
 81011dc:	454b      	cmp	r3, r9
 81011de:	d2a9      	bcs.n	8101134 <__udivmoddi4+0x1f8>
 81011e0:	ebb9 0802 	subs.w	r8, r9, r2
 81011e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 81011e8:	3801      	subs	r0, #1
 81011ea:	e7a3      	b.n	8101134 <__udivmoddi4+0x1f8>
 81011ec:	4646      	mov	r6, r8
 81011ee:	e7ea      	b.n	81011c6 <__udivmoddi4+0x28a>
 81011f0:	4620      	mov	r0, r4
 81011f2:	e794      	b.n	810111e <__udivmoddi4+0x1e2>
 81011f4:	4640      	mov	r0, r8
 81011f6:	e7d1      	b.n	810119c <__udivmoddi4+0x260>
 81011f8:	46d0      	mov	r8, sl
 81011fa:	e77b      	b.n	81010f4 <__udivmoddi4+0x1b8>
 81011fc:	3b02      	subs	r3, #2
 81011fe:	4461      	add	r1, ip
 8101200:	e732      	b.n	8101068 <__udivmoddi4+0x12c>
 8101202:	4630      	mov	r0, r6
 8101204:	e709      	b.n	810101a <__udivmoddi4+0xde>
 8101206:	4464      	add	r4, ip
 8101208:	3802      	subs	r0, #2
 810120a:	e742      	b.n	8101092 <__udivmoddi4+0x156>

0810120c <__aeabi_idiv0>:
 810120c:	4770      	bx	lr
 810120e:	bf00      	nop

08101210 <_ZN8EntryAppC1Ev>:
//  *DWT_LAR = 0xC5ACCE55; // enable access
//  *DWT_CYCCNT = 0; // reset the counter
//  *DWT_CONTROL |= 1 ; // enable the counter
//}

EntryApp::EntryApp()
 8101210:	b538      	push	{r3, r4, r5, lr}
 8101212:	4604      	mov	r4, r0
 8101214:	f000 fa20 	bl	8101658 <_ZN6Bmp280C1Ev>
 8101218:	f104 0048 	add.w	r0, r4, #72	; 0x48
 810121c:	f001 fa90 	bl	8102740 <_ZN3GPSC1Ev>
 8101220:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8101224:	f001 f834 	bl	8102290 <_ZN3IMUC1Ev>
 8101228:	4806      	ldr	r0, [pc, #24]	; (8101244 <_ZN8EntryAppC1Ev+0x34>)
 810122a:	4907      	ldr	r1, [pc, #28]	; (8101248 <_ZN8EntryAppC1Ev+0x38>)
 810122c:	4a07      	ldr	r2, [pc, #28]	; (810124c <_ZN8EntryAppC1Ev+0x3c>)
 810122e:	4b08      	ldr	r3, [pc, #32]	; (8101250 <_ZN8EntryAppC1Ev+0x40>)
 8101230:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 8101234:	f04f 5560 	mov.w	r5, #939524096	; 0x38000000
 8101238:	e9c4 5031 	strd	r5, r0, [r4, #196]	; 0xc4
 810123c:	e9c4 1233 	strd	r1, r2, [r4, #204]	; 0xcc
{

}
 8101240:	4620      	mov	r0, r4
 8101242:	bd38      	pop	{r3, r4, r5, pc}
 8101244:	38000010 	.word	0x38000010
 8101248:	38000020 	.word	0x38000020
 810124c:	38000030 	.word	0x38000030
 8101250:	38000040 	.word	0x38000040

08101254 <_ZN8EntryApp7GPSTaskEv>:
/*
 * @brief Processes the GPS data
 * @retval none
 */
void EntryApp::GPSTask()
{
 8101254:	b530      	push	{r4, r5, lr}
 8101256:	4604      	mov	r4, r0
 8101258:	b08b      	sub	sp, #44	; 0x2c
   HAL_HSEM_FastTake(HSEM_GPS);
   gps.ProcessGPS();
 810125a:	f100 0548 	add.w	r5, r0, #72	; 0x48
   HAL_HSEM_FastTake(HSEM_GPS);
 810125e:	2005      	movs	r0, #5
 8101260:	f003 fa46 	bl	81046f0 <HAL_HSEM_FastTake>
   gps.ProcessGPS();
 8101264:	4628      	mov	r0, r5
 8101266:	f001 f9b7 	bl	81025d8 <_ZN3GPS10ProcessGPSEv>
   gpsData gpsData = gps.GetGPSData();
 810126a:	4629      	mov	r1, r5
 810126c:	a801      	add	r0, sp, #4
 810126e:	f001 f991 	bl	8102594 <_ZN3GPS10GetGPSDataEv>
   gps_values_m4->gps_latitude = gpsData.gps_latitude;
 8101272:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 8101276:	9801      	ldr	r0, [sp, #4]
   gps_values_m4->gps_longitude = gpsData.gps_longitude;
 8101278:	9a02      	ldr	r2, [sp, #8]
   gps_values_m4->gps_latitude = gpsData.gps_latitude;
 810127a:	6018      	str	r0, [r3, #0]
   gps_values_m4->gps_altitude = gpsData.gps_altitude;
 810127c:	9903      	ldr	r1, [sp, #12]
   gps_values_m4->gps_longitude = gpsData.gps_longitude;
 810127e:	605a      	str	r2, [r3, #4]
   gps_values_m4->gps_velocity_x = gpsData.gps_velocity_x;
 8101280:	9a04      	ldr	r2, [sp, #16]
   gps_values_m4->gps_altitude = gpsData.gps_altitude;
 8101282:	6099      	str	r1, [r3, #8]
   gps_values_m4->gps_velocity_y = gpsData.gps_velocity_y;
 8101284:	9805      	ldr	r0, [sp, #20]
   gps_values_m4->gps_velocity_x = gpsData.gps_velocity_x;
 8101286:	60da      	str	r2, [r3, #12]
   gps_values_m4->gps_velocity_z = gpsData.gps_velocity_z;
 8101288:	9906      	ldr	r1, [sp, #24]
   gps_values_m4->gps_satellites = gpsData.gps_satellites;
 810128a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   gps_values_m4->gps_velocity_y = gpsData.gps_velocity_y;
 810128e:	6118      	str	r0, [r3, #16]
   gps_values_m4->gps_velocity_z = gpsData.gps_velocity_z;
 8101290:	6159      	str	r1, [r3, #20]
   gps_values_m4->gps_satellites = gpsData.gps_satellites;
 8101292:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   gps_values_m4->iTOW = gpsData.iTOW;
 8101296:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 810129a:	9908      	ldr	r1, [sp, #32]
   gps_values_m4->magDec = gpsData.magDec;
 810129c:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
   gps_values_m4->iTOW = gpsData.iTOW;
 81012a0:	61d9      	str	r1, [r3, #28]
   HAL_HSEM_Release(HSEM_GPS, 0);
 81012a2:	2005      	movs	r0, #5
 81012a4:	2100      	movs	r1, #0
   gps_values_m4->magDec = gpsData.magDec;
 81012a6:	841a      	strh	r2, [r3, #32]
}
 81012a8:	b00b      	add	sp, #44	; 0x2c
 81012aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   HAL_HSEM_Release(HSEM_GPS, 0);
 81012ae:	f003 ba2d 	b.w	810470c <HAL_HSEM_Release>
 81012b2:	bf00      	nop

081012b4 <_ZN8EntryApp10RunSensorsEv>:
{
 81012b4:	b570      	push	{r4, r5, r6, lr}
 81012b6:	4604      	mov	r4, r0
 81012b8:	b084      	sub	sp, #16
	HAL_HSEM_FastTake(HSEM_BARO);
 81012ba:	2004      	movs	r0, #4
 81012bc:	f003 fa18 	bl	81046f0 <HAL_HSEM_FastTake>
    baro.Run();
 81012c0:	4620      	mov	r0, r4
 81012c2:	f000 fb9d 	bl	8101a00 <_ZN6Bmp2803RunEv>
    baro_values_m4->baro_altitude = baro.GetAltitude();
 81012c6:	4620      	mov	r0, r4
 81012c8:	f8d4 60d0 	ldr.w	r6, [r4, #208]	; 0xd0
 81012cc:	f000 f870 	bl	81013b0 <_ZN6Bmp28011GetAltitudeEv>
    baro_values_m4->baro_pressure = baro.GetPressure();
 81012d0:	f8d4 50d0 	ldr.w	r5, [r4, #208]	; 0xd0
    baro_values_m4->baro_altitude = baro.GetAltitude();
 81012d4:	ed86 0a01 	vstr	s0, [r6, #4]
    baro_values_m4->baro_pressure = baro.GetPressure();
 81012d8:	4620      	mov	r0, r4
 81012da:	f000 f871 	bl	81013c0 <_ZN6Bmp28011GetPressureEv>
	HAL_HSEM_Release(HSEM_BARO, 0);
 81012de:	2100      	movs	r1, #0
    baro_values_m4->baro_pressure = baro.GetPressure();
 81012e0:	ed85 0a00 	vstr	s0, [r5]
	HAL_HSEM_Release(HSEM_BARO, 0);
 81012e4:	2004      	movs	r0, #4
 81012e6:	f003 fa11 	bl	810470c <HAL_HSEM_Release>
   GPSTask();
 81012ea:	4620      	mov	r0, r4
 81012ec:	f7ff ffb2 	bl	8101254 <_ZN8EntryApp7GPSTaskEv>
	magData mag = imu.GetMagData();
 81012f0:	f104 056c 	add.w	r5, r4, #108	; 0x6c
	HAL_HSEM_FastTake(HSEM_MAG);
 81012f4:	2003      	movs	r0, #3
 81012f6:	f003 f9fb 	bl	81046f0 <HAL_HSEM_FastTake>
	magData mag = imu.GetMagData();
 81012fa:	4628      	mov	r0, r5
 81012fc:	f000 fdf6 	bl	8101eec <_ZN3IMU10GetMagDataEv>
	mag_values_m4->x = mag.x;
 8101300:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
	magData mag = imu.GetMagData();
 8101304:	ed8d 0a01 	vstr	s0, [sp, #4]
	mag_values_m4->x = mag.x;
 8101308:	ed83 0a00 	vstr	s0, [r3]
	HAL_HSEM_Release(HSEM_MAG, 0);
 810130c:	2100      	movs	r1, #0
	mag_values_m4->y = mag.y;
 810130e:	edc3 0a01 	vstr	s1, [r3, #4]
	HAL_HSEM_Release(HSEM_MAG, 0);
 8101312:	2003      	movs	r0, #3
	mag_values_m4->z = mag.z;
 8101314:	ed83 1a02 	vstr	s2, [r3, #8]
	magData mag = imu.GetMagData();
 8101318:	edcd 0a02 	vstr	s1, [sp, #8]
 810131c:	ed8d 1a03 	vstr	s2, [sp, #12]
	HAL_HSEM_Release(HSEM_MAG, 0);
 8101320:	f003 f9f4 	bl	810470c <HAL_HSEM_Release>
	HAL_HSEM_FastTake(HSEM_ACC);
 8101324:	2001      	movs	r0, #1
 8101326:	f003 f9e3 	bl	81046f0 <HAL_HSEM_FastTake>
	accelData accel = imu.GetAccelData();
 810132a:	4628      	mov	r0, r5
 810132c:	f000 fd9e 	bl	8101e6c <_ZN3IMU12GetAccelDataEv>
	acc_values_m4->x = accel.x;
 8101330:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
	accelData accel = imu.GetAccelData();
 8101334:	ed8d 0a01 	vstr	s0, [sp, #4]
	acc_values_m4->x = accel.x;
 8101338:	ed83 0a00 	vstr	s0, [r3]
	HAL_HSEM_Release(HSEM_ACC, 0);
 810133c:	2100      	movs	r1, #0
	acc_values_m4->y = accel.y;
 810133e:	edc3 0a01 	vstr	s1, [r3, #4]
	HAL_HSEM_Release(HSEM_ACC, 0);
 8101342:	2001      	movs	r0, #1
	acc_values_m4->z = accel.z;
 8101344:	ed83 1a02 	vstr	s2, [r3, #8]
	accelData accel = imu.GetAccelData();
 8101348:	edcd 0a02 	vstr	s1, [sp, #8]
 810134c:	ed8d 1a03 	vstr	s2, [sp, #12]
	HAL_HSEM_Release(HSEM_ACC, 0);
 8101350:	f003 f9dc 	bl	810470c <HAL_HSEM_Release>
	HAL_HSEM_FastTake(HSEM_GYRO);
 8101354:	2002      	movs	r0, #2
 8101356:	f003 f9cb 	bl	81046f0 <HAL_HSEM_FastTake>
	gyroData gyro = imu.GetGyroData();
 810135a:	4628      	mov	r0, r5
 810135c:	f000 fd46 	bl	8101dec <_ZN3IMU11GetGyroDataEv>
	gyro_values_m4->x = gyro.x;
 8101360:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	gyroData gyro = imu.GetGyroData();
 8101364:	ed8d 0a01 	vstr	s0, [sp, #4]
	HAL_HSEM_Release(HSEM_GYRO, 0);
 8101368:	2100      	movs	r1, #0
 810136a:	2002      	movs	r0, #2
	gyro_values_m4->x = gyro.x;
 810136c:	ed83 0a00 	vstr	s0, [r3]
	gyroData gyro = imu.GetGyroData();
 8101370:	edcd 0a02 	vstr	s1, [sp, #8]
	gyro_values_m4->y = gyro.y;
 8101374:	edc3 0a01 	vstr	s1, [r3, #4]
	gyroData gyro = imu.GetGyroData();
 8101378:	ed8d 1a03 	vstr	s2, [sp, #12]
	gyro_values_m4->z = gyro.z;
 810137c:	ed83 1a02 	vstr	s2, [r3, #8]
}
 8101380:	b004      	add	sp, #16
 8101382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_HSEM_Release(HSEM_GYRO, 0);
 8101386:	f003 b9c1 	b.w	810470c <HAL_HSEM_Release>
 810138a:	bf00      	nop

0810138c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810138c:	4b07      	ldr	r3, [pc, #28]	; (81013ac <SystemInit+0x20>)
 810138e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8101392:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8101396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810139a:	691a      	ldr	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810139c:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81013a0:	f042 0210 	orr.w	r2, r2, #16
 81013a4:	611a      	str	r2, [r3, #16]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81013a6:	6099      	str	r1, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81013a8:	4770      	bx	lr
 81013aa:	bf00      	nop
 81013ac:	e000ed00 	.word	0xe000ed00

081013b0 <_ZN6Bmp28011GetAltitudeEv>:

  return true;
}

float Bmp280::GetAltitude()
{
 81013b0:	b508      	push	{r3, lr}
	return altitude;
 81013b2:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 81013b6:	f7ff fbfb 	bl	8100bb0 <__aeabi_d2f>
}
 81013ba:	ee00 0a10 	vmov	s0, r0
 81013be:	bd08      	pop	{r3, pc}

081013c0 <_ZN6Bmp28011GetPressureEv>:

float Bmp280::GetPressure()
{
	return pressure;

}
 81013c0:	ed90 0a02 	vldr	s0, [r0, #8]
 81013c4:	4770      	bx	lr
 81013c6:	bf00      	nop

081013c8 <_ZN6Bmp28016ReadCoefficientsEv>:

/*
 *  @brief  Reads the factory-set coefficients
 */
void Bmp280::ReadCoefficients()
{
 81013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 81013ca:	4605      	mov	r5, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81013cc:	4ea0      	ldr	r6, [pc, #640]	; (8101650 <_ZN6Bmp28016ReadCoefficientsEv+0x288>)
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81013ce:	4fa1      	ldr	r7, [pc, #644]	; (8101654 <_ZN6Bmp28016ReadCoefficientsEv+0x28c>)
  SerialData[0] = Register | address::SPI_READ;
 81013d0:	2388      	movs	r3, #136	; 0x88
 81013d2:	f805 3f18 	strb.w	r3, [r5, #24]!
{
 81013d6:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81013d8:	2200      	movs	r2, #0
 81013da:	2110      	movs	r1, #16
 81013dc:	4630      	mov	r0, r6
 81013de:	f003 f983 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81013e2:	230a      	movs	r3, #10
 81013e4:	2201      	movs	r2, #1
 81013e6:	4629      	mov	r1, r5
 81013e8:	4638      	mov	r0, r7
 81013ea:	f005 fff3 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81013ee:	230a      	movs	r3, #10
 81013f0:	2202      	movs	r2, #2
 81013f2:	4629      	mov	r1, r5
 81013f4:	4638      	mov	r0, r7
 81013f6:	f006 fc2f 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81013fa:	2201      	movs	r2, #1
 81013fc:	2110      	movs	r1, #16
 81013fe:	4630      	mov	r0, r6
 8101400:	f003 f972 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_T1 = Read16BitLE(address::REG_DIG_T1);
 8101404:	8b23      	ldrh	r3, [r4, #24]
 8101406:	8623      	strh	r3, [r4, #48]	; 0x30
  SerialData[0] = Register | address::SPI_READ;
 8101408:	238a      	movs	r3, #138	; 0x8a
 810140a:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810140c:	2200      	movs	r2, #0
 810140e:	2110      	movs	r1, #16
 8101410:	4630      	mov	r0, r6
 8101412:	f003 f969 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101416:	230a      	movs	r3, #10
 8101418:	2201      	movs	r2, #1
 810141a:	4629      	mov	r1, r5
 810141c:	4638      	mov	r0, r7
 810141e:	f005 ffd9 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101422:	230a      	movs	r3, #10
 8101424:	2202      	movs	r2, #2
 8101426:	4629      	mov	r1, r5
 8101428:	4638      	mov	r0, r7
 810142a:	f006 fc15 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810142e:	2201      	movs	r2, #1
 8101430:	2110      	movs	r1, #16
 8101432:	4630      	mov	r0, r6
 8101434:	f003 f958 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_T2 = Read16BitLE(address::REG_DIG_T2);
 8101438:	8b23      	ldrh	r3, [r4, #24]
 810143a:	8663      	strh	r3, [r4, #50]	; 0x32
  SerialData[0] = Register | address::SPI_READ;
 810143c:	238c      	movs	r3, #140	; 0x8c
 810143e:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101440:	2200      	movs	r2, #0
 8101442:	2110      	movs	r1, #16
 8101444:	4630      	mov	r0, r6
 8101446:	f003 f94f 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810144a:	230a      	movs	r3, #10
 810144c:	2201      	movs	r2, #1
 810144e:	4629      	mov	r1, r5
 8101450:	4638      	mov	r0, r7
 8101452:	f005 ffbf 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101456:	230a      	movs	r3, #10
 8101458:	2202      	movs	r2, #2
 810145a:	4629      	mov	r1, r5
 810145c:	4638      	mov	r0, r7
 810145e:	f006 fbfb 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101462:	2201      	movs	r2, #1
 8101464:	2110      	movs	r1, #16
 8101466:	4630      	mov	r0, r6
 8101468:	f003 f93e 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_T3 = Read16BitLE(address::REG_DIG_T3);
 810146c:	8b23      	ldrh	r3, [r4, #24]
 810146e:	86a3      	strh	r3, [r4, #52]	; 0x34
  SerialData[0] = Register | address::SPI_READ;
 8101470:	238e      	movs	r3, #142	; 0x8e
 8101472:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101474:	2200      	movs	r2, #0
 8101476:	2110      	movs	r1, #16
 8101478:	4630      	mov	r0, r6
 810147a:	f003 f935 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810147e:	230a      	movs	r3, #10
 8101480:	2201      	movs	r2, #1
 8101482:	4629      	mov	r1, r5
 8101484:	4638      	mov	r0, r7
 8101486:	f005 ffa5 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810148a:	230a      	movs	r3, #10
 810148c:	2202      	movs	r2, #2
 810148e:	4629      	mov	r1, r5
 8101490:	4638      	mov	r0, r7
 8101492:	f006 fbe1 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101496:	2201      	movs	r2, #1
 8101498:	2110      	movs	r1, #16
 810149a:	4630      	mov	r0, r6
 810149c:	f003 f924 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_P1 = Read16BitLE(address::REG_DIG_P1);
 81014a0:	8b23      	ldrh	r3, [r4, #24]
 81014a2:	86e3      	strh	r3, [r4, #54]	; 0x36
  SerialData[0] = Register | address::SPI_READ;
 81014a4:	2390      	movs	r3, #144	; 0x90
 81014a6:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81014a8:	2200      	movs	r2, #0
 81014aa:	2110      	movs	r1, #16
 81014ac:	4630      	mov	r0, r6
 81014ae:	f003 f91b 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81014b2:	230a      	movs	r3, #10
 81014b4:	2201      	movs	r2, #1
 81014b6:	4629      	mov	r1, r5
 81014b8:	4638      	mov	r0, r7
 81014ba:	f005 ff8b 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81014be:	230a      	movs	r3, #10
 81014c0:	2202      	movs	r2, #2
 81014c2:	4629      	mov	r1, r5
 81014c4:	4638      	mov	r0, r7
 81014c6:	f006 fbc7 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81014ca:	2201      	movs	r2, #1
 81014cc:	2110      	movs	r1, #16
 81014ce:	4630      	mov	r0, r6
 81014d0:	f003 f90a 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_P2 = Read16BitLE(address::REG_DIG_P2);
 81014d4:	8b23      	ldrh	r3, [r4, #24]
 81014d6:	8723      	strh	r3, [r4, #56]	; 0x38
  SerialData[0] = Register | address::SPI_READ;
 81014d8:	2392      	movs	r3, #146	; 0x92
 81014da:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81014dc:	2200      	movs	r2, #0
 81014de:	2110      	movs	r1, #16
 81014e0:	4630      	mov	r0, r6
 81014e2:	f003 f901 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81014e6:	230a      	movs	r3, #10
 81014e8:	2201      	movs	r2, #1
 81014ea:	4629      	mov	r1, r5
 81014ec:	4638      	mov	r0, r7
 81014ee:	f005 ff71 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81014f2:	230a      	movs	r3, #10
 81014f4:	2202      	movs	r2, #2
 81014f6:	4629      	mov	r1, r5
 81014f8:	4638      	mov	r0, r7
 81014fa:	f006 fbad 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81014fe:	2201      	movs	r2, #1
 8101500:	2110      	movs	r1, #16
 8101502:	4630      	mov	r0, r6
 8101504:	f003 f8f0 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_P3 = Read16BitLE(address::REG_DIG_P3);
 8101508:	8b23      	ldrh	r3, [r4, #24]
 810150a:	8763      	strh	r3, [r4, #58]	; 0x3a
  SerialData[0] = Register | address::SPI_READ;
 810150c:	2394      	movs	r3, #148	; 0x94
 810150e:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101510:	2200      	movs	r2, #0
 8101512:	2110      	movs	r1, #16
 8101514:	4630      	mov	r0, r6
 8101516:	f003 f8e7 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810151a:	230a      	movs	r3, #10
 810151c:	2201      	movs	r2, #1
 810151e:	4629      	mov	r1, r5
 8101520:	4638      	mov	r0, r7
 8101522:	f005 ff57 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101526:	230a      	movs	r3, #10
 8101528:	2202      	movs	r2, #2
 810152a:	4629      	mov	r1, r5
 810152c:	4638      	mov	r0, r7
 810152e:	f006 fb93 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101532:	2201      	movs	r2, #1
 8101534:	2110      	movs	r1, #16
 8101536:	4630      	mov	r0, r6
 8101538:	f003 f8d6 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_P4 = Read16BitLE(address::REG_DIG_P4);
 810153c:	8b23      	ldrh	r3, [r4, #24]
 810153e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  SerialData[0] = Register | address::SPI_READ;
 8101540:	2396      	movs	r3, #150	; 0x96
 8101542:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101544:	2200      	movs	r2, #0
 8101546:	2110      	movs	r1, #16
 8101548:	4630      	mov	r0, r6
 810154a:	f003 f8cd 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810154e:	230a      	movs	r3, #10
 8101550:	2201      	movs	r2, #1
 8101552:	4629      	mov	r1, r5
 8101554:	4638      	mov	r0, r7
 8101556:	f005 ff3d 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810155a:	230a      	movs	r3, #10
 810155c:	2202      	movs	r2, #2
 810155e:	4629      	mov	r1, r5
 8101560:	4638      	mov	r0, r7
 8101562:	f006 fb79 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101566:	2201      	movs	r2, #1
 8101568:	2110      	movs	r1, #16
 810156a:	4630      	mov	r0, r6
 810156c:	f003 f8bc 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_P5 = Read16BitLE(address::REG_DIG_P5);
 8101570:	8b23      	ldrh	r3, [r4, #24]
 8101572:	87e3      	strh	r3, [r4, #62]	; 0x3e
  SerialData[0] = Register | address::SPI_READ;
 8101574:	2398      	movs	r3, #152	; 0x98
 8101576:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101578:	2200      	movs	r2, #0
 810157a:	2110      	movs	r1, #16
 810157c:	4630      	mov	r0, r6
 810157e:	f003 f8b3 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101582:	230a      	movs	r3, #10
 8101584:	2201      	movs	r2, #1
 8101586:	4629      	mov	r1, r5
 8101588:	4638      	mov	r0, r7
 810158a:	f005 ff23 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 810158e:	230a      	movs	r3, #10
 8101590:	2202      	movs	r2, #2
 8101592:	4629      	mov	r1, r5
 8101594:	4638      	mov	r0, r7
 8101596:	f006 fb5f 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810159a:	2201      	movs	r2, #1
 810159c:	2110      	movs	r1, #16
 810159e:	4630      	mov	r0, r6
 81015a0:	f003 f8a2 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_P6 = Read16BitLE(address::REG_DIG_P6);
 81015a4:	8b23      	ldrh	r3, [r4, #24]
 81015a6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  SerialData[0] = Register | address::SPI_READ;
 81015aa:	239a      	movs	r3, #154	; 0x9a
 81015ac:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81015ae:	2200      	movs	r2, #0
 81015b0:	2110      	movs	r1, #16
 81015b2:	4630      	mov	r0, r6
 81015b4:	f003 f898 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81015b8:	230a      	movs	r3, #10
 81015ba:	2201      	movs	r2, #1
 81015bc:	4629      	mov	r1, r5
 81015be:	4638      	mov	r0, r7
 81015c0:	f005 ff08 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81015c4:	230a      	movs	r3, #10
 81015c6:	2202      	movs	r2, #2
 81015c8:	4629      	mov	r1, r5
 81015ca:	4638      	mov	r0, r7
 81015cc:	f006 fb44 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81015d0:	2201      	movs	r2, #1
 81015d2:	2110      	movs	r1, #16
 81015d4:	4630      	mov	r0, r6
 81015d6:	f003 f887 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_P7 = Read16BitLE(address::REG_DIG_P7);
 81015da:	8b23      	ldrh	r3, [r4, #24]
 81015dc:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  SerialData[0] = Register | address::SPI_READ;
 81015e0:	239c      	movs	r3, #156	; 0x9c
 81015e2:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81015e4:	2200      	movs	r2, #0
 81015e6:	2110      	movs	r1, #16
 81015e8:	4630      	mov	r0, r6
 81015ea:	f003 f87d 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 81015ee:	230a      	movs	r3, #10
 81015f0:	2201      	movs	r2, #1
 81015f2:	4629      	mov	r1, r5
 81015f4:	4638      	mov	r0, r7
 81015f6:	f005 feed 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 81015fa:	230a      	movs	r3, #10
 81015fc:	2202      	movs	r2, #2
 81015fe:	4629      	mov	r1, r5
 8101600:	4638      	mov	r0, r7
 8101602:	f006 fb29 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101606:	2201      	movs	r2, #1
 8101608:	2110      	movs	r1, #16
 810160a:	4630      	mov	r0, r6
 810160c:	f003 f86c 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_P8 = Read16BitLE(address::REG_DIG_P8);
 8101610:	8b23      	ldrh	r3, [r4, #24]
 8101612:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  SerialData[0] = Register | address::SPI_READ;
 8101616:	239e      	movs	r3, #158	; 0x9e
 8101618:	7623      	strb	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810161a:	2200      	movs	r2, #0
 810161c:	2110      	movs	r1, #16
 810161e:	4630      	mov	r0, r6
 8101620:	f003 f862 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101624:	230a      	movs	r3, #10
 8101626:	2201      	movs	r2, #1
 8101628:	4629      	mov	r1, r5
 810162a:	4638      	mov	r0, r7
 810162c:	f005 fed2 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 2, 10);
 8101630:	230a      	movs	r3, #10
 8101632:	4629      	mov	r1, r5
 8101634:	2202      	movs	r2, #2
 8101636:	4638      	mov	r0, r7
 8101638:	f006 fb0e 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 810163c:	2201      	movs	r2, #1
 810163e:	2110      	movs	r1, #16
 8101640:	4630      	mov	r0, r6
 8101642:	f003 f851 	bl	81046e8 <HAL_GPIO_WritePin>
 comp_values.dig_P9 = Read16BitLE(address::REG_DIG_P9);
 8101646:	8b23      	ldrh	r3, [r4, #24]
 8101648:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
}
 810164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810164e:	bf00      	nop
 8101650:	58020000 	.word	0x58020000
 8101654:	10000398 	.word	0x10000398

08101658 <_ZN6Bmp280C1Ev>:
Bmp280::Bmp280()
 8101658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810165a:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810165c:	2200      	movs	r2, #0
 810165e:	483e      	ldr	r0, [pc, #248]	; (8101758 <_ZN6Bmp280C1Ev+0x100>)
 8101660:	2110      	movs	r1, #16
  SerialData[0] = Register | address::SPI_READ;
 8101662:	4627      	mov	r7, r4
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101664:	f003 f840 	bl	81046e8 <HAL_GPIO_WritePin>
  SerialData[0] = Register | address::SPI_READ;
 8101668:	23d0      	movs	r3, #208	; 0xd0
 810166a:	f807 3f18 	strb.w	r3, [r7, #24]!
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810166e:	483a      	ldr	r0, [pc, #232]	; (8101758 <_ZN6Bmp280C1Ev+0x100>)
 8101670:	2200      	movs	r2, #0
 8101672:	2110      	movs	r1, #16
 8101674:	f003 f838 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101678:	230a      	movs	r3, #10
 810167a:	2201      	movs	r2, #1
 810167c:	4639      	mov	r1, r7
 810167e:	4837      	ldr	r0, [pc, #220]	; (810175c <_ZN6Bmp280C1Ev+0x104>)
 8101680:	f005 fea8 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[1], 1, 10);
 8101684:	230a      	movs	r3, #10
 8101686:	2201      	movs	r2, #1
 8101688:	f104 0119 	add.w	r1, r4, #25
 810168c:	4833      	ldr	r0, [pc, #204]	; (810175c <_ZN6Bmp280C1Ev+0x104>)
 810168e:	f006 fae3 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101692:	4831      	ldr	r0, [pc, #196]	; (8101758 <_ZN6Bmp280C1Ev+0x100>)
 8101694:	2201      	movs	r2, #1
 8101696:	2110      	movs	r1, #16
 8101698:	f003 f826 	bl	81046e8 <HAL_GPIO_WritePin>
  if(Read8Bit(address::REG_ID) != address::CHIP_ID)
 810169c:	7e63      	ldrb	r3, [r4, #25]
 810169e:	2b58      	cmp	r3, #88	; 0x58
 81016a0:	d158      	bne.n	8101754 <_ZN6Bmp280C1Ev+0xfc>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81016a2:	2200      	movs	r2, #0
 81016a4:	2110      	movs	r1, #16
 81016a6:	482c      	ldr	r0, [pc, #176]	; (8101758 <_ZN6Bmp280C1Ev+0x100>)
 81016a8:	f003 f81e 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 81016ac:	20c8      	movs	r0, #200	; 0xc8
 81016ae:	f001 fa2b 	bl	8102b08 <HAL_Delay>
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::SetConfig()
{
  config.mode = settings::Mode::NORMAL;
 81016b2:	2303      	movs	r3, #3
 81016b4:	76e3      	strb	r3, [r4, #27]
  config.pressure_oversampling = settings::Oversampling::X16;
 81016b6:	2305      	movs	r3, #5
  config.mode = settings::Mode::NORMAL;
 81016b8:	2500      	movs	r5, #0
  config.temp_oversampling = settings::Oversampling::X2;
 81016ba:	2602      	movs	r6, #2
  config.pressure_oversampling = settings::Oversampling::X16;
 81016bc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
  SerialData[0] = Register & address::SPI_WRITE;
 81016c0:	f245 7374 	movw	r3, #22388	; 0x5774
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81016c4:	4824      	ldr	r0, [pc, #144]	; (8101758 <_ZN6Bmp280C1Ev+0x100>)
  SerialData[0] = Register & address::SPI_WRITE;
 81016c6:	8323      	strh	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81016c8:	462a      	mov	r2, r5
 81016ca:	2110      	movs	r1, #16
  config.mode = settings::Mode::NORMAL;
 81016cc:	7725      	strb	r5, [r4, #28]
 81016ce:	7765      	strb	r5, [r4, #29]
 81016d0:	77a5      	strb	r5, [r4, #30]
  config.pressure_oversampling = settings::Oversampling::X16;
 81016d2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 81016d6:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 81016da:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
  config.temp_oversampling = settings::Oversampling::X2;
 81016de:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 81016e2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 81016e6:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
 81016ea:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81016ee:	f002 fffb 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 2, 30);
 81016f2:	231e      	movs	r3, #30
 81016f4:	4632      	mov	r2, r6
 81016f6:	4639      	mov	r1, r7
 81016f8:	4818      	ldr	r0, [pc, #96]	; (810175c <_ZN6Bmp280C1Ev+0x104>)
 81016fa:	f005 fe6b 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 81016fe:	4816      	ldr	r0, [pc, #88]	; (8101758 <_ZN6Bmp280C1Ev+0x100>)
 8101700:	2201      	movs	r2, #1
 8101702:	2110      	movs	r1, #16
 8101704:	f002 fff0 	bl	81046e8 <HAL_GPIO_WritePin>
  uint8_t oversampling_data  =  (uint8_t) (temp_oversampling << 5 | pres_oversampling << 2  |mode);

  Write8Bit(address::REG_CTRL_MEAS, oversampling_data);


  config.iir_filter = settings::Filter::FILTER_16;
 8101708:	2304      	movs	r3, #4
 810170a:	77e3      	strb	r3, [r4, #31]
  SerialData[0] = Register & address::SPI_WRITE;
 810170c:	f241 0375 	movw	r3, #4213	; 0x1075
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101710:	4811      	ldr	r0, [pc, #68]	; (8101758 <_ZN6Bmp280C1Ev+0x100>)
  SerialData[0] = Register & address::SPI_WRITE;
 8101712:	8323      	strh	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101714:	462a      	mov	r2, r5
 8101716:	2110      	movs	r1, #16
  config.iir_filter = settings::Filter::FILTER_16;
 8101718:	f884 5020 	strb.w	r5, [r4, #32]
 810171c:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8101720:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
  config.standby = settings::StandbyTime::STANDBY_0_5;
 8101724:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
 8101728:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 810172c:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8101730:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101734:	f002 ffd8 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 2, 30);
 8101738:	231e      	movs	r3, #30
 810173a:	4632      	mov	r2, r6
 810173c:	4639      	mov	r1, r7
 810173e:	4807      	ldr	r0, [pc, #28]	; (810175c <_ZN6Bmp280C1Ev+0x104>)
 8101740:	f005 fe48 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101744:	4804      	ldr	r0, [pc, #16]	; (8101758 <_ZN6Bmp280C1Ev+0x100>)
 8101746:	2201      	movs	r2, #1
 8101748:	2110      	movs	r1, #16
 810174a:	f002 ffcd 	bl	81046e8 <HAL_GPIO_WritePin>
  ReadCoefficients();
 810174e:	4620      	mov	r0, r4
 8101750:	f7ff fe3a 	bl	81013c8 <_ZN6Bmp28016ReadCoefficientsEv>
}
 8101754:	4620      	mov	r0, r4
 8101756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101758:	58020000 	.word	0x58020000
 810175c:	10000398 	.word	0x10000398

08101760 <_ZN6Bmp2808ReadTempEv>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::ReadTemp()
{
 8101760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 8101762:	4605      	mov	r5, r0
 8101764:	23fa      	movs	r3, #250	; 0xfa
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101766:	4e22      	ldr	r6, [pc, #136]	; (81017f0 <_ZN6Bmp2808ReadTempEv+0x90>)
  SerialData[0] = Register | address::SPI_READ;
 8101768:	f805 3f18 	strb.w	r3, [r5, #24]!
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810176c:	4f21      	ldr	r7, [pc, #132]	; (81017f4 <_ZN6Bmp2808ReadTempEv+0x94>)
{
 810176e:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101770:	2200      	movs	r2, #0
 8101772:	2110      	movs	r1, #16
 8101774:	4630      	mov	r0, r6
 8101776:	f002 ffb7 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 810177a:	230a      	movs	r3, #10
 810177c:	2201      	movs	r2, #1
 810177e:	4629      	mov	r1, r5
 8101780:	4638      	mov	r0, r7
 8101782:	f005 fe27 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 8101786:	230a      	movs	r3, #10
 8101788:	4629      	mov	r1, r5
 810178a:	2203      	movs	r2, #3
 810178c:	4638      	mov	r0, r7
 810178e:	f006 fa63 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101792:	2201      	movs	r2, #1
 8101794:	2110      	movs	r1, #16
 8101796:	4630      	mov	r0, r6
 8101798:	f002 ffa6 	bl	81046e8 <HAL_GPIO_WritePin>
  lsb = (SerialData[1] << 8);
 810179c:	7e60      	ldrb	r0, [r4, #25]
  msb = (SerialData[0] << 16);
 810179e:	7e23      	ldrb	r3, [r4, #24]
  int32_t var1, var2;
  int32_t adc_T = Read24Bit(address::REG_TEMP_MSB);
  adc_T >>= 4;

  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81017a0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;

  t_fine = var1 + var2;
  float T = (t_fine * 5 + 128) >> 8;
  temperature = (T / 100);
 81017a2:	eddf 6a15 	vldr	s13, [pc, #84]	; 81017f8 <_ZN6Bmp2808ReadTempEv+0x98>
  lsb = (SerialData[1] << 8);
 81017a6:	0200      	lsls	r0, r0, #8
  Out = msb | lsb | xlsb;
 81017a8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 81017ac:	ebc1 2210 	rsb	r2, r1, r0, lsr #8
 81017b0:	fb02 f302 	mul.w	r3, r2, r2
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81017b4:	0049      	lsls	r1, r1, #1
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 81017b6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81017ba:	ebc1 11d0 	rsb	r1, r1, r0, lsr #7
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 81017be:	131b      	asrs	r3, r3, #12
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81017c0:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 81017c4:	fb02 f303 	mul.w	r3, r2, r3
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 81017c8:	fb00 f101 	mul.w	r1, r0, r1
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 81017cc:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 81017ce:	eb03 23e1 	add.w	r3, r3, r1, asr #11
  float T = (t_fine * 5 + 128) >> 8;
 81017d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 81017d6:	3280      	adds	r2, #128	; 0x80
 81017d8:	1212      	asrs	r2, r2, #8
 81017da:	ee07 2a90 	vmov	s15, r2
 81017de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  t_fine = var1 + var2;
 81017e2:	6023      	str	r3, [r4, #0]
  temperature = (T / 100);
 81017e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81017e8:	ed84 7a01 	vstr	s14, [r4, #4]
}
 81017ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81017ee:	bf00      	nop
 81017f0:	58020000 	.word	0x58020000
 81017f4:	10000398 	.word	0x10000398
 81017f8:	42c80000 	.word	0x42c80000

081017fc <_ZN6Bmp28012ReadPressureEv>:
 * the BMP280
 * @param baro a pointer to the BMP280 struct
 * @returns nothing
 */
void Bmp280::ReadPressure()
{
 81017fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  SerialData[0] = Register | address::SPI_READ;
 8101800:	4605      	mov	r5, r0
{
 8101802:	4604      	mov	r4, r0

  int64_t var1, var2, p;

  // return value of t_fine
  ReadTemp();
 8101804:	f7ff ffac 	bl	8101760 <_ZN6Bmp2808ReadTempEv>
  SerialData[0] = Register | address::SPI_READ;
 8101808:	23f7      	movs	r3, #247	; 0xf7
 810180a:	f805 3f18 	strb.w	r3, [r5, #24]!
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 810180e:	4879      	ldr	r0, [pc, #484]	; (81019f4 <_ZN6Bmp28012ReadPressureEv+0x1f8>)
 8101810:	2200      	movs	r2, #0
 8101812:	2110      	movs	r1, #16
 8101814:	f002 ff68 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101818:	4629      	mov	r1, r5
 810181a:	230a      	movs	r3, #10
 810181c:	2201      	movs	r2, #1
 810181e:	4876      	ldr	r0, [pc, #472]	; (81019f8 <_ZN6Bmp28012ReadPressureEv+0x1fc>)
 8101820:	f005 fdd8 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 8101824:	230a      	movs	r3, #10
 8101826:	4629      	mov	r1, r5
 8101828:	2203      	movs	r2, #3
 810182a:	4873      	ldr	r0, [pc, #460]	; (81019f8 <_ZN6Bmp28012ReadPressureEv+0x1fc>)
 810182c:	f006 fa14 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101830:	4870      	ldr	r0, [pc, #448]	; (81019f4 <_ZN6Bmp28012ReadPressureEv+0x1f8>)
 8101832:	2201      	movs	r2, #1
 8101834:	2110      	movs	r1, #16
 8101836:	f002 ff57 	bl	81046e8 <HAL_GPIO_WritePin>

  int32_t adc_P = Read24Bit(address::REG_PRESS_MSB);
  adc_P >>= 4;

  var1 = ((int64_t) t_fine) - 128000;
 810183a:	6821      	ldr	r1, [r4, #0]
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
  var2 = var2 + (((int64_t) comp_values.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t) comp_values.dig_P3) >> 8) + ((var1 * (int64_t) comp_values.dig_P2) << 12);
 810183c:	f9b4 0038 	ldrsh.w	r0, [r4, #56]	; 0x38
 8101840:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
  var1 = ((int64_t) t_fine) - 128000;
 8101844:	f5b1 3cfa 	subs.w	ip, r1, #128000	; 0x1f400
 8101848:	ea4f 71e1 	mov.w	r1, r1, asr #31
 810184c:	f141 31ff 	adc.w	r1, r1, #4294967295
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 8101850:	fbac 5e0c 	umull	r5, lr, ip, ip
 8101854:	fb0c f201 	mul.w	r2, ip, r1
  var1 = ((var1 * var1 * (int64_t) comp_values.dig_P3) >> 8) + ((var1 * (int64_t) comp_values.dig_P2) << 12);
 8101858:	17c6      	asrs	r6, r0, #31
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 810185a:	eb0e 0e42 	add.w	lr, lr, r2, lsl #1
  var1 = ((var1 * var1 * (int64_t) comp_values.dig_P3) >> 8) + ((var1 * (int64_t) comp_values.dig_P2) << 12);
 810185e:	fb00 f201 	mul.w	r2, r0, r1
 8101862:	17df      	asrs	r7, r3, #31
 8101864:	fb0c 2206 	mla	r2, ip, r6, r2
 8101868:	fb03 f60e 	mul.w	r6, r3, lr
 810186c:	fb05 6607 	mla	r6, r5, r7, r6
 8101870:	fba0 070c 	umull	r0, r7, r0, ip
 8101874:	443a      	add	r2, r7
 8101876:	fba3 3705 	umull	r3, r7, r3, r5
 810187a:	443e      	add	r6, r7
 810187c:	0312      	lsls	r2, r2, #12
 810187e:	0a1b      	lsrs	r3, r3, #8
 8101880:	ea42 5210 	orr.w	r2, r2, r0, lsr #20
 8101884:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8101888:	0300      	lsls	r0, r0, #12
 810188a:	181b      	adds	r3, r3, r0
 810188c:	eb42 2226 	adc.w	r2, r2, r6, asr #8
  var1 = (((((int64_t) 1) << 47) + var1)) * ((int64_t) comp_values.dig_P1) >> 33;
 8101890:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
 8101892:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8101896:	fba3 3006 	umull	r3, r0, r3, r6
 810189a:	fb06 0002 	mla	r0, r6, r2, r0
 810189e:	17c3      	asrs	r3, r0, #31
 81018a0:	1042      	asrs	r2, r0, #1

  if (var1 == 0)
 81018a2:	ea53 0060 	orrs.w	r0, r3, r0, asr #1
 81018a6:	f000 80a3 	beq.w	81019f0 <_ZN6Bmp28012ReadPressureEv+0x1f4>
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 81018aa:	f9b4 803e 	ldrsh.w	r8, [r4, #62]	; 0x3e
  lsb = (SerialData[1] << 8);
 81018ae:	7e60      	ldrb	r0, [r4, #25]
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81018b0:	f9b4 7040 	ldrsh.w	r7, [r4, #64]	; 0x40
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 81018b4:	fb08 f101 	mul.w	r1, r8, r1
 81018b8:	ea4f 79e8 	mov.w	r9, r8, asr #31
 81018bc:	fb0c 1109 	mla	r1, ip, r9, r1
 81018c0:	fba8 8c0c 	umull	r8, ip, r8, ip
 81018c4:	448c      	add	ip, r1
 81018c6:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
 81018ca:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
 81018ce:	ea4f 4148 	mov.w	r1, r8, lsl #17
  msb = (SerialData[0] << 16);
 81018d2:	f894 8018 	ldrb.w	r8, [r4, #24]
  lsb = (SerialData[1] << 8);
 81018d6:	0200      	lsls	r0, r0, #8
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81018d8:	fb07 fe0e 	mul.w	lr, r7, lr
  Out = msb | lsb | xlsb;
 81018dc:	ea40 4808 	orr.w	r8, r0, r8, lsl #16
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81018e0:	17f8      	asrs	r0, r7, #31
 81018e2:	fb05 ee00 	mla	lr, r5, r0, lr
 81018e6:	fba7 7505 	umull	r7, r5, r7, r5
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 81018ea:	19cf      	adds	r7, r1, r7
  var2 = var1 * var1 * (int64_t) comp_values.dig_P6;
 81018ec:	4475      	add	r5, lr
  var2 = var2 + (((int64_t) comp_values.dig_P4) << 35);
 81018ee:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
  adc_P >>= 4;
 81018f2:	ea4f 1818 	mov.w	r8, r8, lsr #4
  var2 = var2 + ((var1 * (int64_t) comp_values.dig_P5) << 17);
 81018f6:	eb45 050c 	adc.w	r5, r5, ip
  {
    return; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
 81018fa:	f5c8 1880 	rsb	r8, r8, #1048576	; 0x100000
 81018fe:	2600      	movs	r6, #0
  var2 = var2 + (((int64_t) comp_values.dig_P4) << 35);
 8101900:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8101904:	19f6      	adds	r6, r6, r7
  p = (((p << 31) - var2) * 3125) / var1;
 8101906:	f008 4500 	and.w	r5, r8, #2147483648	; 0x80000000
 810190a:	ea4f 70c8 	mov.w	r0, r8, lsl #31
 810190e:	1b80      	subs	r0, r0, r6
 8101910:	ea45 0558 	orr.w	r5, r5, r8, lsr #1
 8101914:	eb65 0501 	sbc.w	r5, r5, r1
 8101918:	eb10 0c00 	adds.w	ip, r0, r0
 810191c:	eb45 0e05 	adc.w	lr, r5, r5
 8101920:	eb1c 0c00 	adds.w	ip, ip, r0
 8101924:	eb45 0e0e 	adc.w	lr, r5, lr
 8101928:	ea4f 118e 	mov.w	r1, lr, lsl #6
 810192c:	ea4f 168c 	mov.w	r6, ip, lsl #6
 8101930:	ea41 619c 	orr.w	r1, r1, ip, lsr #26
 8101934:	eb1c 0c06 	adds.w	ip, ip, r6
 8101938:	eb4e 0e01 	adc.w	lr, lr, r1
 810193c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8101940:	ea4e 7e9c 	orr.w	lr, lr, ip, lsr #30
 8101944:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8101948:	eb1c 0c00 	adds.w	ip, ip, r0
 810194c:	eb45 010e 	adc.w	r1, r5, lr
 8101950:	0089      	lsls	r1, r1, #2
 8101952:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8101956:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 810195a:	eb1c 0000 	adds.w	r0, ip, r0
 810195e:	eb45 0101 	adc.w	r1, r5, r1
 8101962:	f7ff fa83 	bl	8100e6c <__aeabi_ldivmod>
  var1 = (((int64_t) comp_values.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8101966:	f9b4 2046 	ldrsh.w	r2, [r4, #70]	; 0x46
  var2 = (((int64_t) comp_values.dig_P8) * p) >> 19;
 810196a:	f9b4 e044 	ldrsh.w	lr, [r4, #68]	; 0x44
  var1 = (((int64_t) comp_values.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 810196e:	ea4f 3c61 	mov.w	ip, r1, asr #13
 8101972:	0b45      	lsrs	r5, r0, #13
 8101974:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
 8101978:	fb02 f30c 	mul.w	r3, r2, ip
 810197c:	17d6      	asrs	r6, r2, #31
 810197e:	fb05 3306 	mla	r3, r5, r6, r3
 8101982:	fba2 2605 	umull	r2, r6, r2, r5
 8101986:	4433      	add	r3, r6
 8101988:	fb02 fc0c 	mul.w	ip, r2, ip
 810198c:	fb05 cc03 	mla	ip, r5, r3, ip
 8101990:	fba2 2505 	umull	r2, r5, r2, r5
 8101994:	4465      	add	r5, ip
 8101996:	0e53      	lsrs	r3, r2, #25
 8101998:	ea43 13c5 	orr.w	r3, r3, r5, lsl #7

  p = ((p + var1 + var2) >> 8) + (((int64_t) comp_values.dig_P7) << 4);
 810199c:	181b      	adds	r3, r3, r0
 810199e:	eb41 6565 	adc.w	r5, r1, r5, asr #25
  var2 = (((int64_t) comp_values.dig_P8) * p) >> 19;
 81019a2:	ea4f 72ee 	mov.w	r2, lr, asr #31
 81019a6:	fb0e f101 	mul.w	r1, lr, r1
 81019aa:	fb02 1100 	mla	r1, r2, r0, r1
 81019ae:	fbae 0e00 	umull	r0, lr, lr, r0
 81019b2:	4471      	add	r1, lr
 81019b4:	0cc0      	lsrs	r0, r0, #19
 81019b6:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t) comp_values.dig_P7) << 4);
 81019ba:	181b      	adds	r3, r3, r0
 81019bc:	f9b4 0042 	ldrsh.w	r0, [r4, #66]	; 0x42
 81019c0:	ea4f 76e0 	mov.w	r6, r0, asr #31
 81019c4:	eb45 41e1 	adc.w	r1, r5, r1, asr #19
 81019c8:	0a1b      	lsrs	r3, r3, #8
 81019ca:	0136      	lsls	r6, r6, #4
 81019cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 81019d0:	ea46 7610 	orr.w	r6, r6, r0, lsr #28
 81019d4:	0100      	lsls	r0, r0, #4
 81019d6:	18c0      	adds	r0, r0, r3

  pressure = (float) p / 256;
 81019d8:	eb46 2121 	adc.w	r1, r6, r1, asr #8
 81019dc:	f7ff fa08 	bl	8100df0 <__aeabi_l2f>
 81019e0:	eddf 7a06 	vldr	s15, [pc, #24]	; 81019fc <_ZN6Bmp28012ReadPressureEv+0x200>
 81019e4:	ee07 0a10 	vmov	s14, r0
 81019e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019ec:	edc4 7a02 	vstr	s15, [r4, #8]

}
 81019f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81019f4:	58020000 	.word	0x58020000
 81019f8:	10000398 	.word	0x10000398
 81019fc:	3b800000 	.word	0x3b800000

08101a00 <_ZN6Bmp2803RunEv>:
{
 8101a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialData[0] = Register | address::SPI_READ;
 8101a02:	4605      	mov	r5, r0
 8101a04:	23fa      	movs	r3, #250	; 0xfa
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101a06:	4e36      	ldr	r6, [pc, #216]	; (8101ae0 <_ZN6Bmp2803RunEv+0xe0>)
  SerialData[0] = Register | address::SPI_READ;
 8101a08:	f805 3f18 	strb.w	r3, [r5, #24]!
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101a0c:	4f35      	ldr	r7, [pc, #212]	; (8101ae4 <_ZN6Bmp2803RunEv+0xe4>)
{
 8101a0e:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8101a10:	2200      	movs	r2, #0
 8101a12:	2110      	movs	r1, #16
 8101a14:	4630      	mov	r0, r6
 8101a16:	f002 fe67 	bl	81046e8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &SerialData[0], 1, 10);
 8101a1a:	230a      	movs	r3, #10
 8101a1c:	2201      	movs	r2, #1
 8101a1e:	4629      	mov	r1, r5
 8101a20:	4638      	mov	r0, r7
 8101a22:	f005 fcd7 	bl	81073d4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &SerialData[0], 3, 10);
 8101a26:	230a      	movs	r3, #10
 8101a28:	4629      	mov	r1, r5
 8101a2a:	2203      	movs	r2, #3
 8101a2c:	4638      	mov	r0, r7
 8101a2e:	f006 f913 	bl	8107c58 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101a32:	2201      	movs	r2, #1
 8101a34:	2110      	movs	r1, #16
 8101a36:	4630      	mov	r0, r6
 8101a38:	f002 fe56 	bl	81046e8 <HAL_GPIO_WritePin>
  lsb = (SerialData[1] << 8);
 8101a3c:	7e60      	ldrb	r0, [r4, #25]
  msb = (SerialData[0] << 16);
 8101a3e:	7e23      	ldrb	r3, [r4, #24]
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101a40:	8e21      	ldrh	r1, [r4, #48]	; 0x30
  temperature = (T / 100);
 8101a42:	eddf 6a29 	vldr	s13, [pc, #164]	; 8101ae8 <_ZN6Bmp2803RunEv+0xe8>
  lsb = (SerialData[1] << 8);
 8101a46:	0200      	lsls	r0, r0, #8
  Out = msb | lsb | xlsb;
 8101a48:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 8101a4c:	ebc1 2210 	rsb	r2, r1, r0, lsr #8
 8101a50:	fb02 f302 	mul.w	r3, r2, r2
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101a54:	0049      	lsls	r1, r1, #1
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101a56:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101a5a:	ebc1 11d0 	rsb	r1, r1, r0, lsr #7
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101a5e:	131b      	asrs	r3, r3, #12
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101a60:	f9b4 0032 	ldrsh.w	r0, [r4, #50]	; 0x32
      >> 12) * ((int32_t) comp_values.dig_T3)) >> 14;
 8101a64:	fb02 f303 	mul.w	r3, r2, r3
  var1 = ((((adc_T >> 3) - ((int32_t) comp_values.dig_T1 << 1))) * ((int32_t) comp_values.dig_T2)) >> 11;
 8101a68:	fb00 f101 	mul.w	r1, r0, r1
  var2 = (((((adc_T >> 4) - ((int32_t) comp_values.dig_T1)) * ((adc_T >> 4) - ((int32_t) comp_values.dig_T1)))
 8101a6c:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
 8101a6e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
  float T = (t_fine * 5 + 128) >> 8;
 8101a72:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8101a76:	3280      	adds	r2, #128	; 0x80
 8101a78:	1212      	asrs	r2, r2, #8
 8101a7a:	ee07 2a90 	vmov	s15, r2
 8101a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  t_fine = var1 + var2;
 8101a82:	6023      	str	r3, [r4, #0]
  temperature = (T / 100);
 8101a84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  ReadPressure();
 8101a88:	4620      	mov	r0, r4
  temperature = (T / 100);
 8101a8a:	ed84 7a01 	vstr	s14, [r4, #4]
  ReadPressure();
 8101a8e:	f7ff feb5 	bl	81017fc <_ZN6Bmp28012ReadPressureEv>
 * @param baro a pointer to the BMP280 struct
 * @returns nothing.
 */
void Bmp280::ReadAltitude()
{
  altitude = PRESSURE_COEFFICENT * (1.0f - pow((pressure / SEA_LEVEL_PRESSURE), (1 / 5.255)));
 8101a92:	ed94 7a02 	vldr	s14, [r4, #8]
 8101a96:	eddf 7a15 	vldr	s15, [pc, #84]	; 8101aec <_ZN6Bmp2803RunEv+0xec>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8101a9a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8101a9e:	ee17 0a90 	vmov	r0, s15
 8101aa2:	f7fe fd7d 	bl	81005a0 <__aeabi_f2d>
 8101aa6:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8101ad0 <_ZN6Bmp2803RunEv+0xd0>
 8101aaa:	ec41 0b10 	vmov	d0, r0, r1
 8101aae:	f007 fb77 	bl	81091a0 <pow>
 8101ab2:	490f      	ldr	r1, [pc, #60]	; (8101af0 <_ZN6Bmp2803RunEv+0xf0>)
 8101ab4:	ec53 2b10 	vmov	r2, r3, d0
 8101ab8:	2000      	movs	r0, #0
 8101aba:	f7fe fc11 	bl	81002e0 <__aeabi_dsub>
 8101abe:	a306      	add	r3, pc, #24	; (adr r3, 8101ad8 <_ZN6Bmp2803RunEv+0xd8>)
 8101ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ac4:	f7fe fdc4 	bl	8100650 <__aeabi_dmul>
 8101ac8:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 8101acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8101ace:	bf00      	nop
 8101ad0:	ccd9456c 	.word	0xccd9456c
 8101ad4:	3fc85b95 	.word	0x3fc85b95
 8101ad8:	00000000 	.word	0x00000000
 8101adc:	40e5a540 	.word	0x40e5a540
 8101ae0:	58020000 	.word	0x58020000
 8101ae4:	10000398 	.word	0x10000398
 8101ae8:	42c80000 	.word	0x42c80000
 8101aec:	47c5e680 	.word	0x47c5e680
 8101af0:	3ff00000 	.word	0x3ff00000

08101af4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101af4:	4b2a      	ldr	r3, [pc, #168]	; (8101ba0 <MX_DMA_Init+0xac>)
{
 8101af6:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101af8:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 8101afc:	f040 0001 	orr.w	r0, r0, #1
 8101b00:	f8c3 00d8 	str.w	r0, [r3, #216]	; 0xd8
 8101b04:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8101b08:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8101b0a:	f004 0401 	and.w	r4, r4, #1
 8101b0e:	9400      	str	r4, [sp, #0]
 8101b10:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101b12:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
 8101b16:	f044 0402 	orr.w	r4, r4, #2
 8101b1a:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8101b1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101b22:	2200      	movs	r2, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101b24:	f003 0302 	and.w	r3, r3, #2
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101b28:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101b2a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101b2c:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8101b2e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101b30:	f001 f960 	bl	8102df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8101b34:	200b      	movs	r0, #11
 8101b36:	f001 f99b 	bl	8102e70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101b3a:	2200      	movs	r2, #0
 8101b3c:	4611      	mov	r1, r2
 8101b3e:	200c      	movs	r0, #12
 8101b40:	f001 f958 	bl	8102df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8101b44:	200c      	movs	r0, #12
 8101b46:	f001 f993 	bl	8102e70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8101b4a:	2200      	movs	r2, #0
 8101b4c:	4611      	mov	r1, r2
 8101b4e:	200d      	movs	r0, #13
 8101b50:	f001 f950 	bl	8102df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8101b54:	200d      	movs	r0, #13
 8101b56:	f001 f98b 	bl	8102e70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8101b5a:	2200      	movs	r2, #0
 8101b5c:	4611      	mov	r1, r2
 8101b5e:	200e      	movs	r0, #14
 8101b60:	f001 f948 	bl	8102df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8101b64:	200e      	movs	r0, #14
 8101b66:	f001 f983 	bl	8102e70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8101b6a:	2200      	movs	r2, #0
 8101b6c:	4611      	mov	r1, r2
 8101b6e:	200f      	movs	r0, #15
 8101b70:	f001 f940 	bl	8102df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8101b74:	200f      	movs	r0, #15
 8101b76:	f001 f97b 	bl	8102e70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8101b7a:	2200      	movs	r2, #0
 8101b7c:	4611      	mov	r1, r2
 8101b7e:	202f      	movs	r0, #47	; 0x2f
 8101b80:	f001 f938 	bl	8102df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8101b84:	202f      	movs	r0, #47	; 0x2f
 8101b86:	f001 f973 	bl	8102e70 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8101b8a:	2200      	movs	r2, #0
 8101b8c:	2038      	movs	r0, #56	; 0x38
 8101b8e:	4611      	mov	r1, r2
 8101b90:	f001 f930 	bl	8102df4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101b94:	2038      	movs	r0, #56	; 0x38

}
 8101b96:	b002      	add	sp, #8
 8101b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8101b9c:	f001 b968 	b.w	8102e70 <HAL_NVIC_EnableIRQ>
 8101ba0:	58024400 	.word	0x58024400

08101ba4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101ba4:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ba6:	2200      	movs	r2, #0
{
 8101ba8:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101baa:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8101bae:	e9cd 2206 	strd	r2, r2, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bb2:	4b22      	ldr	r3, [pc, #136]	; (8101c3c <MX_GPIO_Init+0x98>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bb4:	9208      	str	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101bba:	4821      	ldr	r0, [pc, #132]	; (8101c40 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bbc:	f042 0201 	orr.w	r2, r2, #1
 8101bc0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8101bc4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101bc8:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bca:	4011      	ands	r1, r2
 8101bcc:	9100      	str	r1, [sp, #0]
 8101bce:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101bd0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8101bd4:	f041 0120 	orr.w	r1, r1, #32
 8101bd8:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8101bdc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8101be0:	f001 0120 	and.w	r1, r1, #32
 8101be4:	9101      	str	r1, [sp, #4]
 8101be6:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101be8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8101bec:	f041 0108 	orr.w	r1, r1, #8
 8101bf0:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8101bf4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8101bf8:	f001 0108 	and.w	r1, r1, #8
 8101bfc:	9102      	str	r1, [sp, #8]
 8101bfe:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c00:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8101c04:	f041 0102 	orr.w	r1, r1, #2
 8101c08:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8101c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c10:	f003 0302 	and.w	r3, r3, #2
 8101c14:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101c16:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c18:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8101c1a:	f002 fd65 	bl	81046e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101c1e:	2210      	movs	r2, #16
 8101c20:	2301      	movs	r3, #1
 8101c22:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c26:	4806      	ldr	r0, [pc, #24]	; (8101c40 <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101c28:	2200      	movs	r2, #0
 8101c2a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c2c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8101c2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c32:	f002 fc15 	bl	8104460 <HAL_GPIO_Init>

}
 8101c36:	b00b      	add	sp, #44	; 0x2c
 8101c38:	f85d fb04 	ldr.w	pc, [sp], #4
 8101c3c:	58024400 	.word	0x58024400
 8101c40:	58020000 	.word	0x58020000

08101c44 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101c44:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101c46:	4818      	ldr	r0, [pc, #96]	; (8101ca8 <MX_I2C1_Init+0x64>)
 8101c48:	4c18      	ldr	r4, [pc, #96]	; (8101cac <MX_I2C1_Init+0x68>)
  hi2c1.Init.Timing = 0x307075B1;
 8101c4a:	4919      	ldr	r1, [pc, #100]	; (8101cb0 <MX_I2C1_Init+0x6c>)
  hi2c1.Init.OwnAddress1 = 0;
 8101c4c:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101c4e:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x307075B1;
 8101c50:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101c54:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8101c58:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101c5c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101c60:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101c62:	f002 fe11 	bl	8104888 <HAL_I2C_Init>
 8101c66:	b950      	cbnz	r0, 8101c7e <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101c68:	480f      	ldr	r0, [pc, #60]	; (8101ca8 <MX_I2C1_Init+0x64>)
 8101c6a:	2100      	movs	r1, #0
 8101c6c:	f004 f87c 	bl	8105d68 <HAL_I2CEx_ConfigAnalogFilter>
 8101c70:	b968      	cbnz	r0, 8101c8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101c72:	480d      	ldr	r0, [pc, #52]	; (8101ca8 <MX_I2C1_Init+0x64>)
 8101c74:	2100      	movs	r1, #0
 8101c76:	f004 f8a1 	bl	8105dbc <HAL_I2CEx_ConfigDigitalFilter>
 8101c7a:	b980      	cbnz	r0, 8101c9e <MX_I2C1_Init+0x5a>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101c7c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8101c7e:	f000 fb57 	bl	8102330 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101c82:	4809      	ldr	r0, [pc, #36]	; (8101ca8 <MX_I2C1_Init+0x64>)
 8101c84:	2100      	movs	r1, #0
 8101c86:	f004 f86f 	bl	8105d68 <HAL_I2CEx_ConfigAnalogFilter>
 8101c8a:	2800      	cmp	r0, #0
 8101c8c:	d0f1      	beq.n	8101c72 <MX_I2C1_Init+0x2e>
    Error_Handler();
 8101c8e:	f000 fb4f 	bl	8102330 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101c92:	4805      	ldr	r0, [pc, #20]	; (8101ca8 <MX_I2C1_Init+0x64>)
 8101c94:	2100      	movs	r1, #0
 8101c96:	f004 f891 	bl	8105dbc <HAL_I2CEx_ConfigDigitalFilter>
 8101c9a:	2800      	cmp	r0, #0
 8101c9c:	d0ee      	beq.n	8101c7c <MX_I2C1_Init+0x38>
}
 8101c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8101ca2:	f000 bb45 	b.w	8102330 <Error_Handler>
 8101ca6:	bf00      	nop
 8101ca8:	1000025c 	.word	0x1000025c
 8101cac:	40005400 	.word	0x40005400
 8101cb0:	307075b1 	.word	0x307075b1

08101cb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101cb4:	b570      	push	{r4, r5, r6, lr}
 8101cb6:	4604      	mov	r4, r0
 8101cb8:	b0b6      	sub	sp, #216	; 0xd8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cba:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101cbc:	22bc      	movs	r2, #188	; 0xbc
 8101cbe:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cc0:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8101cc4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8101cc8:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101cca:	f008 f9ad 	bl	810a028 <memset>
  if(i2cHandle->Instance==I2C1)
 8101cce:	4b40      	ldr	r3, [pc, #256]	; (8101dd0 <HAL_I2C_MspInit+0x11c>)
 8101cd0:	6822      	ldr	r2, [r4, #0]
 8101cd2:	429a      	cmp	r2, r3
 8101cd4:	d001      	beq.n	8101cda <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101cd6:	b036      	add	sp, #216	; 0xd8
 8101cd8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101cda:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101cdc:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101cde:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101ce0:	f004 fbce 	bl	8106480 <HAL_RCCEx_PeriphCLKConfig>
 8101ce4:	2800      	cmp	r0, #0
 8101ce6:	d16a      	bne.n	8101dbe <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101ce8:	4d3a      	ldr	r5, [pc, #232]	; (8101dd4 <HAL_I2C_MspInit+0x120>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101cea:	483b      	ldr	r0, [pc, #236]	; (8101dd8 <HAL_I2C_MspInit+0x124>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101cec:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101cf0:	4e3a      	ldr	r6, [pc, #232]	; (8101ddc <HAL_I2C_MspInit+0x128>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101cf2:	f043 0302 	orr.w	r3, r3, #2
 8101cf6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8101cfa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8101cfe:	f003 0302 	and.w	r3, r3, #2
 8101d02:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101d04:	f44f 7240 	mov.w	r2, #768	; 0x300
 8101d08:	2312      	movs	r3, #18
 8101d0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101d0e:	2200      	movs	r2, #0
 8101d10:	2300      	movs	r3, #0
 8101d12:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101d16:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101d18:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101d1a:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101d1c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101d1e:	f002 fb9f 	bl	8104460 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101d22:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8101d26:	492e      	ldr	r1, [pc, #184]	; (8101de0 <HAL_I2C_MspInit+0x12c>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101d2c:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
 8101d30:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 8101d34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8101d38:	9201      	str	r2, [sp, #4]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101d3a:	2221      	movs	r2, #33	; 0x21
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101d3c:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8101d3e:	e9c6 1200 	strd	r1, r2, [r6]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101d42:	9801      	ldr	r0, [sp, #4]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101d44:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101d46:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101d4e:	4630      	mov	r0, r6
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101d50:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101d54:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8101d58:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101d5c:	6232      	str	r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8101d5e:	f001 f96b 	bl	8103038 <HAL_DMA_Init>
 8101d62:	bb90      	cbnz	r0, 8101dca <HAL_I2C_MspInit+0x116>
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8101d64:	4d1f      	ldr	r5, [pc, #124]	; (8101de4 <HAL_I2C_MspInit+0x130>)
 8101d66:	4920      	ldr	r1, [pc, #128]	; (8101de8 <HAL_I2C_MspInit+0x134>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101d68:	63e6      	str	r6, [r4, #60]	; 0x3c
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8101d6a:	2222      	movs	r2, #34	; 0x22
 8101d6c:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101d74:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101d76:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101d78:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101d7a:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101d7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101d80:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101d84:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8101d88:	e9c5 3207 	strd	r3, r2, [r5, #28]
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8101d8c:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101d8e:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8101d90:	f001 f952 	bl	8103038 <HAL_DMA_Init>
 8101d94:	b9b0      	cbnz	r0, 8101dc4 <HAL_I2C_MspInit+0x110>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101d96:	2200      	movs	r2, #0
 8101d98:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101d9a:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101d9c:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8101d9e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8101da0:	f001 f828 	bl	8102df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8101da4:	201f      	movs	r0, #31
 8101da6:	f001 f863 	bl	8102e70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8101daa:	2200      	movs	r2, #0
 8101dac:	4611      	mov	r1, r2
 8101dae:	2020      	movs	r0, #32
 8101db0:	f001 f820 	bl	8102df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8101db4:	2020      	movs	r0, #32
 8101db6:	f001 f85b 	bl	8102e70 <HAL_NVIC_EnableIRQ>
}
 8101dba:	b036      	add	sp, #216	; 0xd8
 8101dbc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8101dbe:	f000 fab7 	bl	8102330 <Error_Handler>
 8101dc2:	e791      	b.n	8101ce8 <HAL_I2C_MspInit+0x34>
      Error_Handler();
 8101dc4:	f000 fab4 	bl	8102330 <Error_Handler>
 8101dc8:	e7e5      	b.n	8101d96 <HAL_I2C_MspInit+0xe2>
      Error_Handler();
 8101dca:	f000 fab1 	bl	8102330 <Error_Handler>
 8101dce:	e7c9      	b.n	8101d64 <HAL_I2C_MspInit+0xb0>
 8101dd0:	40005400 	.word	0x40005400
 8101dd4:	58024400 	.word	0x58024400
 8101dd8:	58020400 	.word	0x58020400
 8101ddc:	1000016c 	.word	0x1000016c
 8101de0:	40020040 	.word	0x40020040
 8101de4:	100001e4 	.word	0x100001e4
 8101de8:	40020058 	.word	0x40020058

08101dec <_ZN3IMU11GetGyroDataEv>:
  bool is_imu = Setup();

}

gyroData IMU::GetGyroData()
{
 8101dec:	b530      	push	{r4, r5, lr}
 8101dee:	b08b      	sub	sp, #44	; 0x2c
 * @returns number of bytes read
 */
uint8_t IMU::I2CReadBytes(const uint8_t &address, const uint8_t &reg,  uint8_t* buffer, uint8_t numBytes)
{
  HAL_StatusTypeDef status;
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101df0:	ad07      	add	r5, sp, #28
 8101df2:	2406      	movs	r4, #6
 8101df4:	e9cd 5400 	strd	r5, r4, [sp]
 8101df8:	2218      	movs	r2, #24
{
 8101dfa:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101dfc:	21d6      	movs	r1, #214	; 0xd6
 8101dfe:	2301      	movs	r3, #1
 8101e00:	4819      	ldr	r0, [pc, #100]	; (8101e68 <_ZN3IMU11GetGyroDataEv+0x7c>)
 8101e02:	f002 ffb5 	bl	8104d70 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(1);
 8101e06:	2001      	movs	r0, #1
 8101e08:	f000 fe7e 	bl	8102b08 <HAL_Delay>
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8101e0c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return gyro * gyro_res;
 8101e10:	ed94 6a00 	vldr	s12, [r4]
  gy = (buffer[3] << 8) | buffer[2]; // Store y-axis values into gy
 8101e14:	ee07 3a10 	vmov	s14, r3
  gz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into gz
 8101e18:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8101e1c:	ee07 3a90 	vmov	s15, r3
  gyro_values.x = CalcGyro(gx);
 8101e20:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8101e24:	ee06 3a90 	vmov	s13, r3
  gyro_values.y = CalcGyro(gy);
 8101e28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  gyro_values.x = CalcGyro(gx);
 8101e2c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  gyro_values.z = CalcGyro(gz);
 8101e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return gyro * gyro_res;
 8101e34:	ee66 6a86 	vmul.f32	s13, s13, s12
 8101e38:	ee27 7a06 	vmul.f32	s14, s14, s12
 8101e3c:	ee67 7a86 	vmul.f32	s15, s15, s12
  gyro_values.x = CalcGyro(gx);
 8101e40:	edc4 6a13 	vstr	s13, [r4, #76]	; 0x4c
  gyro_values.y = CalcGyro(gy);
 8101e44:	ed84 7a14 	vstr	s14, [r4, #80]	; 0x50
  gyro_values.z = CalcGyro(gz);
 8101e48:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
  return gyro_values;
 8101e4c:	344c      	adds	r4, #76	; 0x4c
 8101e4e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8101e52:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8101e56:	eddd 0a08 	vldr	s1, [sp, #32]
 8101e5a:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 8101e5e:	ed9d 0a07 	vldr	s0, [sp, #28]
 8101e62:	b00b      	add	sp, #44	; 0x2c
 8101e64:	bd30      	pop	{r4, r5, pc}
 8101e66:	bf00      	nop
 8101e68:	1000025c 	.word	0x1000025c

08101e6c <_ZN3IMU12GetAccelDataEv>:
{
 8101e6c:	b530      	push	{r4, r5, lr}
 8101e6e:	b08b      	sub	sp, #44	; 0x2c
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101e70:	ad07      	add	r5, sp, #28
 8101e72:	2406      	movs	r4, #6
 8101e74:	e9cd 5400 	strd	r5, r4, [sp]
 8101e78:	2228      	movs	r2, #40	; 0x28
{
 8101e7a:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101e7c:	21d6      	movs	r1, #214	; 0xd6
 8101e7e:	2301      	movs	r3, #1
 8101e80:	4819      	ldr	r0, [pc, #100]	; (8101ee8 <_ZN3IMU12GetAccelDataEv+0x7c>)
 8101e82:	f002 ff75 	bl	8104d70 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(1);
 8101e86:	2001      	movs	r0, #1
 8101e88:	f000 fe3e 	bl	8102b08 <HAL_Delay>
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into ay
 8101e8c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return accel * acc_res;
 8101e90:	ed94 6a02 	vldr	s12, [r4, #8]
  ay = (buffer[3] << 8) | buffer[2]; // Store y-axis values into ay
 8101e94:	ee07 3a10 	vmov	s14, r3
  az = (buffer[5] << 8) | buffer[4]; // Store z-axis values into az
 8101e98:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8101e9c:	ee07 3a90 	vmov	s15, r3
  accel_values.x = CalcAccel(ax);
 8101ea0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8101ea4:	ee06 3a90 	vmov	s13, r3
  accel_values.y = CalcAccel(ay);
 8101ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  accel_values.x = CalcAccel(ax);
 8101eac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  accel_values.z = CalcAccel(az);
 8101eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return accel * acc_res;
 8101eb4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8101eb8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8101ebc:	ee67 7a86 	vmul.f32	s15, s15, s12
  accel_values.x = CalcAccel(ax);
 8101ec0:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
  accel_values.y = CalcAccel(ay);
 8101ec4:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
  accel_values.z = CalcAccel(az);
 8101ec8:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
  return accel_values;
 8101ecc:	3440      	adds	r4, #64	; 0x40
 8101ece:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8101ed2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8101ed6:	eddd 0a08 	vldr	s1, [sp, #32]
 8101eda:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 8101ede:	ed9d 0a07 	vldr	s0, [sp, #28]
 8101ee2:	b00b      	add	sp, #44	; 0x2c
 8101ee4:	bd30      	pop	{r4, r5, pc}
 8101ee6:	bf00      	nop
 8101ee8:	1000025c 	.word	0x1000025c

08101eec <_ZN3IMU10GetMagDataEv>:
{
 8101eec:	b530      	push	{r4, r5, lr}
 8101eee:	b08b      	sub	sp, #44	; 0x2c
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101ef0:	ad07      	add	r5, sp, #28
 8101ef2:	2406      	movs	r4, #6
 8101ef4:	e9cd 5400 	strd	r5, r4, [sp]
 8101ef8:	2228      	movs	r2, #40	; 0x28
{
 8101efa:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read_DMA(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, buffer, numBytes);
 8101efc:	213c      	movs	r1, #60	; 0x3c
 8101efe:	2301      	movs	r3, #1
 8101f00:	4819      	ldr	r0, [pc, #100]	; (8101f68 <_ZN3IMU10GetMagDataEv+0x7c>)
 8101f02:	f002 ff35 	bl	8104d70 <HAL_I2C_Mem_Read_DMA>
  HAL_Delay(1);
 8101f06:	2001      	movs	r0, #1
 8101f08:	f000 fdfe 	bl	8102b08 <HAL_Delay>
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 8101f0c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 return mag * mag_res;
 8101f10:	ed94 6a01 	vldr	s12, [r4, #4]
  my = (buffer[3] << 8) | buffer[2]; // Store y-axis values into my
 8101f14:	ee07 3a10 	vmov	s14, r3
  mz = (buffer[5] << 8) | buffer[4]; // Store z-axis values into mz
 8101f18:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8101f1c:	ee07 3a90 	vmov	s15, r3
    mag_values.x = CalcMag(mx);
 8101f20:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8101f24:	ee06 3a90 	vmov	s13, r3
    mag_values.y = CalcMag(my);
 8101f28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mag_values.x = CalcMag(mx);
 8101f2c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    mag_values.z = CalcMag(mz);
 8101f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 return mag * mag_res;
 8101f34:	ee66 6a86 	vmul.f32	s13, s13, s12
 8101f38:	ee27 7a06 	vmul.f32	s14, s14, s12
 8101f3c:	ee67 7a86 	vmul.f32	s15, s15, s12
    mag_values.x = CalcMag(mx);
 8101f40:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    mag_values.y = CalcMag(my);
 8101f44:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    mag_values.z = CalcMag(mz);
 8101f48:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
  return mag_values;
 8101f4c:	3434      	adds	r4, #52	; 0x34
 8101f4e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8101f52:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8101f56:	eddd 0a08 	vldr	s1, [sp, #32]
 8101f5a:	ed9d 1a09 	vldr	s2, [sp, #36]	; 0x24
 8101f5e:	ed9d 0a07 	vldr	s0, [sp, #28]
 8101f62:	b00b      	add	sp, #44	; 0x2c
 8101f64:	bd30      	pop	{r4, r5, pc}
 8101f66:	bf00      	nop
 8101f68:	1000025c 	.word	0x1000025c

08101f6c <_ZN3IMU8InitGyroEv>:
{
 8101f6c:	b570      	push	{r4, r5, r6, lr}
   if(gyro_settings.enabled == true)
 8101f6e:	7c03      	ldrb	r3, [r0, #16]
{
 8101f70:	b084      	sub	sp, #16
 8101f72:	4604      	mov	r4, r0
   if(gyro_settings.enabled == true)
 8101f74:	b103      	cbz	r3, 8101f78 <_ZN3IMU8InitGyroEv+0xc>
       temp_reg_val = gyro_settings.sampleRate;
 8101f76:	7d03      	ldrb	r3, [r0, #20]
   temp_reg_val |= gyro_settings.scale;
 8101f78:	8a61      	ldrh	r1, [r4, #18]
   temp_reg_val |= gyro_settings.bandwidth;
 8101f7a:	7d62      	ldrb	r2, [r4, #21]
 */
HAL_StatusTypeDef IMU::WriteByte(const uint8_t &address, const uint8_t &reg, uint8_t data)
{
  HAL_StatusTypeDef status;
//  status = HAL_I2C_Mem_Write(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1,100);
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8101f7c:	4830      	ldr	r0, [pc, #192]	; (8102040 <_ZN3IMU8InitGyroEv+0xd4>)
   temp_reg_val |= gyro_settings.bandwidth;
 8101f7e:	430a      	orrs	r2, r1
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8101f80:	2501      	movs	r5, #1
   temp_reg_val |= gyro_settings.bandwidth;
 8101f82:	431a      	orrs	r2, r3
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8101f84:	f10d 060f 	add.w	r6, sp, #15
 8101f88:	462b      	mov	r3, r5
 8101f8a:	21d6      	movs	r1, #214	; 0xd6
 8101f8c:	f88d 200f 	strb.w	r2, [sp, #15]
 8101f90:	e9cd 6500 	strd	r6, r5, [sp]
 8101f94:	2210      	movs	r2, #16
 8101f96:	f002 fdff 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8101f9a:	4628      	mov	r0, r5
 8101f9c:	f000 fdb4 	bl	8102b08 <HAL_Delay>
    WriteByte(gyroaccaddress::LSM9DS1_AG_ADDR, gyroaccaddress::CTRL_REG2_G, temp_reg_val);
 8101fa0:	2100      	movs	r1, #0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8101fa2:	2211      	movs	r2, #17
 8101fa4:	462b      	mov	r3, r5
 8101fa6:	f88d 100f 	strb.w	r1, [sp, #15]
 8101faa:	e9cd 6500 	strd	r6, r5, [sp]
 8101fae:	21d6      	movs	r1, #214	; 0xd6
 8101fb0:	4823      	ldr	r0, [pc, #140]	; (8102040 <_ZN3IMU8InitGyroEv+0xd4>)
 8101fb2:	f002 fdf1 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8101fb6:	4628      	mov	r0, r5
 8101fb8:	f000 fda6 	bl	8102b08 <HAL_Delay>
    if(gyro_settings.flipX)
 8101fbc:	7e63      	ldrb	r3, [r4, #25]
    if(gyro_settings.flipY)
 8101fbe:	7ea0      	ldrb	r0, [r4, #26]
    if(gyro_settings.flipX)
 8101fc0:	2b00      	cmp	r3, #0
    if(gyro_settings.flipZ)
 8101fc2:	7ee3      	ldrb	r3, [r4, #27]
    if(gyro_settings.flipX)
 8101fc4:	bf0b      	itete	eq
 8101fc6:	2110      	moveq	r1, #16
 8101fc8:	2130      	movne	r1, #48	; 0x30
 8101fca:	2200      	moveq	r2, #0
 8101fcc:	2220      	movne	r2, #32
      temp_reg_val |= 1 << 4;
 8101fce:	2800      	cmp	r0, #0
 8101fd0:	bf18      	it	ne
 8101fd2:	460a      	movne	r2, r1
    if(gyro_settings.flipZ)
 8101fd4:	b10b      	cbz	r3, 8101fda <_ZN3IMU8InitGyroEv+0x6e>
      temp_reg_val |= 1 << 3;
 8101fd6:	f042 0208 	orr.w	r2, r2, #8
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8101fda:	2501      	movs	r5, #1
 8101fdc:	462b      	mov	r3, r5
 8101fde:	21d6      	movs	r1, #214	; 0xd6
 8101fe0:	f88d 200f 	strb.w	r2, [sp, #15]
 8101fe4:	e9cd 6500 	strd	r6, r5, [sp]
 8101fe8:	2213      	movs	r2, #19
 8101fea:	4815      	ldr	r0, [pc, #84]	; (8102040 <_ZN3IMU8InitGyroEv+0xd4>)
 8101fec:	f002 fdd4 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8101ff0:	4628      	mov	r0, r5
 8101ff2:	f000 fd89 	bl	8102b08 <HAL_Delay>
    if(gyro_settings.enableZ)
 8101ff6:	7fe3      	ldrb	r3, [r4, #31]
    if(gyro_settings.enableY)
 8101ff8:	7fa1      	ldrb	r1, [r4, #30]
    if(gyro_settings.enableZ)
 8101ffa:	2b00      	cmp	r3, #0
    if(gyro_settings.enableX)
 8101ffc:	7f63      	ldrb	r3, [r4, #29]
    if(gyro_settings.enableZ)
 8101ffe:	bf0b      	itete	eq
 8102000:	2210      	moveq	r2, #16
 8102002:	2230      	movne	r2, #48	; 0x30
 8102004:	2000      	moveq	r0, #0
 8102006:	2020      	movne	r0, #32
      temp_reg_val |= 1 << 4;
 8102008:	2900      	cmp	r1, #0
 810200a:	bf18      	it	ne
 810200c:	4610      	movne	r0, r2
    if(gyro_settings.enableX)
 810200e:	b10b      	cbz	r3, 8102014 <_ZN3IMU8InitGyroEv+0xa8>
      temp_reg_val |= 1 << 3;
 8102010:	f040 0008 	orr.w	r0, r0, #8
    if(gyro_settings.latchInterrupt)
 8102014:	f894 3020 	ldrb.w	r3, [r4, #32]
 8102018:	b10b      	cbz	r3, 810201e <_ZN3IMU8InitGyroEv+0xb2>
      temp_reg_val |= 1 << 1;
 810201a:	f040 0002 	orr.w	r0, r0, #2
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810201e:	2401      	movs	r4, #1
 8102020:	4623      	mov	r3, r4
 8102022:	221e      	movs	r2, #30
 8102024:	21d6      	movs	r1, #214	; 0xd6
 8102026:	f88d 000f 	strb.w	r0, [sp, #15]
 810202a:	e9cd 6400 	strd	r6, r4, [sp]
 810202e:	4804      	ldr	r0, [pc, #16]	; (8102040 <_ZN3IMU8InitGyroEv+0xd4>)
 8102030:	f002 fdb2 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8102034:	4620      	mov	r0, r4
 8102036:	f000 fd67 	bl	8102b08 <HAL_Delay>
}
 810203a:	b004      	add	sp, #16
 810203c:	bd70      	pop	{r4, r5, r6, pc}
 810203e:	bf00      	nop
 8102040:	1000025c 	.word	0x1000025c

08102044 <_ZN3IMU9InitAccelEv>:
{
 8102044:	b570      	push	{r4, r5, r6, lr}
  if(accel_settings.enableZ)
 8102046:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
{
 810204a:	4604      	mov	r4, r0
  if(accel_settings.enableZ)
 810204c:	2b00      	cmp	r3, #0
  if(accel_settings.enableY)
 810204e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
  if(accel_settings.enableX)
 8102052:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  if(accel_settings.enableZ)
 8102056:	bf0b      	itete	eq
 8102058:	2110      	moveq	r1, #16
 810205a:	2130      	movne	r1, #48	; 0x30
 810205c:	2200      	moveq	r2, #0
 810205e:	2220      	movne	r2, #32
{
 8102060:	b084      	sub	sp, #16
    temp_reg_val |= 1 << 4;
 8102062:	2800      	cmp	r0, #0
 8102064:	bf18      	it	ne
 8102066:	460a      	movne	r2, r1
  if(accel_settings.enableX)
 8102068:	b10b      	cbz	r3, 810206e <_ZN3IMU9InitAccelEv+0x2a>
    temp_reg_val |= 1 << 3;
 810206a:	f042 0208 	orr.w	r2, r2, #8
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810206e:	2601      	movs	r6, #1
 8102070:	f10d 050f 	add.w	r5, sp, #15
 8102074:	4633      	mov	r3, r6
 8102076:	f88d 200f 	strb.w	r2, [sp, #15]
 810207a:	21d6      	movs	r1, #214	; 0xd6
 810207c:	221f      	movs	r2, #31
 810207e:	e9cd 5600 	strd	r5, r6, [sp]
 8102082:	4812      	ldr	r0, [pc, #72]	; (81020cc <_ZN3IMU9InitAccelEv+0x88>)
 8102084:	f002 fd88 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8102088:	4630      	mov	r0, r6
 810208a:	f000 fd3d 	bl	8102b08 <HAL_Delay>
  if(accel_settings.enabled == true)
 810208e:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
 8102092:	b108      	cbz	r0, 8102098 <_ZN3IMU9InitAccelEv+0x54>
    temp_reg_val = accel_settings.sampleRate;
 8102094:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  if(accel_settings.bandwidth > 0)
 8102098:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
  temp_reg_val |= accel_settings.scale;
 810209c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
  if(accel_settings.bandwidth > 0)
 81020a0:	2b00      	cmp	r3, #0
  temp_reg_val |= accel_settings.scale;
 81020a2:	ea40 0002 	orr.w	r0, r0, r2
    temp_reg_val |= accel_settings.bandwidth;
 81020a6:	bfc4      	itt	gt
 81020a8:	4318      	orrgt	r0, r3
 81020aa:	b2c0      	uxtbgt	r0, r0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81020ac:	2401      	movs	r4, #1
 81020ae:	4623      	mov	r3, r4
 81020b0:	2220      	movs	r2, #32
 81020b2:	21d6      	movs	r1, #214	; 0xd6
 81020b4:	f88d 000f 	strb.w	r0, [sp, #15]
 81020b8:	e9cd 5400 	strd	r5, r4, [sp]
 81020bc:	4803      	ldr	r0, [pc, #12]	; (81020cc <_ZN3IMU9InitAccelEv+0x88>)
 81020be:	f002 fd6b 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 81020c2:	4620      	mov	r0, r4
 81020c4:	f000 fd20 	bl	8102b08 <HAL_Delay>
}
 81020c8:	b004      	add	sp, #16
 81020ca:	bd70      	pop	{r4, r5, r6, pc}
 81020cc:	1000025c 	.word	0x1000025c

081020d0 <_ZN3IMU7InitMagEv>:
{
 81020d0:	b570      	push	{r4, r5, r6, lr}
  if(mag_settings.tempCompensationEnable)
 81020d2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
  temp_reg_val |= mag_settings.sampleRate;
 81020d6:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
 81020da:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
    temp_reg_val |=  0x1 << 7;
 81020de:	2b00      	cmp	r3, #0
{
 81020e0:	b084      	sub	sp, #16
    temp_reg_val |=  0x1 << 7;
 81020e2:	bf18      	it	ne
 81020e4:	2380      	movne	r3, #128	; 0x80
  temp_reg_val |= mag_settings.sampleRate;
 81020e6:	430a      	orrs	r2, r1
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81020e8:	2401      	movs	r4, #1
 81020ea:	f10d 060f 	add.w	r6, sp, #15
  temp_reg_val |= mag_settings.sampleRate;
 81020ee:	4313      	orrs	r3, r2
{
 81020f0:	4605      	mov	r5, r0
 81020f2:	f88d 300f 	strb.w	r3, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 81020f6:	2220      	movs	r2, #32
 81020f8:	4623      	mov	r3, r4
 81020fa:	213c      	movs	r1, #60	; 0x3c
 81020fc:	e9cd 6400 	strd	r6, r4, [sp]
 8102100:	4825      	ldr	r0, [pc, #148]	; (8102198 <_ZN3IMU7InitMagEv+0xc8>)
 8102102:	f002 fd49 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8102106:	4620      	mov	r0, r4
 8102108:	f000 fcfe 	bl	8102b08 <HAL_Delay>
   WriteByte(magaddress::LSM9DS1_M_ADDR, magaddress::CTRL_REG2_M, temp_reg_val);
 810210c:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8102110:	f88d 100f 	strb.w	r1, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102114:	4623      	mov	r3, r4
 8102116:	2221      	movs	r2, #33	; 0x21
 8102118:	213c      	movs	r1, #60	; 0x3c
 810211a:	e9cd 6400 	strd	r6, r4, [sp]
 810211e:	481e      	ldr	r0, [pc, #120]	; (8102198 <_ZN3IMU7InitMagEv+0xc8>)
 8102120:	f002 fd3a 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8102124:	4620      	mov	r0, r4
 8102126:	f000 fcef 	bl	8102b08 <HAL_Delay>
   if(mag_settings.lowPowerEnable)
 810212a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   temp_reg_val |= mag_settings.operatingMode & 0x3;
 810212e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102132:	4819      	ldr	r0, [pc, #100]	; (8102198 <_ZN3IMU7InitMagEv+0xc8>)
     temp_reg_val |= 0x1 << 5;
 8102134:	2a00      	cmp	r2, #0
 8102136:	bf0c      	ite	eq
 8102138:	2200      	moveq	r2, #0
 810213a:	2220      	movne	r2, #32
   temp_reg_val |= mag_settings.operatingMode & 0x3;
 810213c:	f003 0303 	and.w	r3, r3, #3
 8102140:	431a      	orrs	r2, r3
 8102142:	f88d 200f 	strb.w	r2, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102146:	4623      	mov	r3, r4
 8102148:	2222      	movs	r2, #34	; 0x22
 810214a:	213c      	movs	r1, #60	; 0x3c
 810214c:	e9cd 6400 	strd	r6, r4, [sp]
 8102150:	f002 fd22 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8102154:	4620      	mov	r0, r4
 8102156:	f000 fcd7 	bl	8102b08 <HAL_Delay>
   WriteByte( magaddress::LSM9DS1_M_ADDR,  magaddress::CTRL_REG4_M, temp_reg_val);
 810215a:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 810215e:	f88d 100f 	strb.w	r1, [sp, #15]
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8102162:	4623      	mov	r3, r4
 8102164:	2223      	movs	r2, #35	; 0x23
 8102166:	213c      	movs	r1, #60	; 0x3c
 8102168:	e9cd 6400 	strd	r6, r4, [sp]
 810216c:	480a      	ldr	r0, [pc, #40]	; (8102198 <_ZN3IMU7InitMagEv+0xc8>)
 810216e:	f002 fd13 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 8102172:	4620      	mov	r0, r4
 8102174:	f000 fcc8 	bl	8102b08 <HAL_Delay>
   WriteByte( magaddress::LSM9DS1_M_ADDR,  magaddress::CTRL_REG5_M, temp_reg_val);
 8102178:	2100      	movs	r1, #0
  status = HAL_I2C_Mem_Write_DMA(&hi2c1, address<<1, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &data, 1);
 810217a:	4623      	mov	r3, r4
 810217c:	2224      	movs	r2, #36	; 0x24
 810217e:	f88d 100f 	strb.w	r1, [sp, #15]
 8102182:	e9cd 6400 	strd	r6, r4, [sp]
 8102186:	213c      	movs	r1, #60	; 0x3c
 8102188:	4803      	ldr	r0, [pc, #12]	; (8102198 <_ZN3IMU7InitMagEv+0xc8>)
 810218a:	f002 fd05 	bl	8104b98 <HAL_I2C_Mem_Write_DMA>
  HAL_Delay(1);
 810218e:	4620      	mov	r0, r4
 8102190:	f000 fcba 	bl	8102b08 <HAL_Delay>
}
 8102194:	b004      	add	sp, #16
 8102196:	bd70      	pop	{r4, r5, r6, pc}
 8102198:	1000025c 	.word	0x1000025c

0810219c <_ZN3IMU5SetupEv>:
{
 810219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      mag_res = resolution::MAG_FS_4G;
 81021a0:	4b33      	ldr	r3, [pc, #204]	; (8102270 <_ZN3IMU5SetupEv+0xd4>)
 81021a2:	6043      	str	r3, [r0, #4]
{
 81021a4:	b086      	sub	sp, #24
 gyro_settings.orientation = 0;
 81021a6:	4b33      	ldr	r3, [pc, #204]	; (8102274 <_ZN3IMU5SetupEv+0xd8>)
      gyro_res =  resolution::GYRO_FS_245;
 81021a8:	4933      	ldr	r1, [pc, #204]	; (8102278 <_ZN3IMU5SetupEv+0xdc>)
      acc_res =  resolution::ACC_FS_4G;
 81021aa:	4a34      	ldr	r2, [pc, #208]	; (810227c <_ZN3IMU5SetupEv+0xe0>)
      gyro_res =  resolution::GYRO_FS_245;
 81021ac:	6001      	str	r1, [r0, #0]
 gyro_settings.scale = to_underlying(settings::GyroFullScale::FS_245);
 81021ae:	2600      	movs	r6, #0
  gyro_settings.enabled = true;
 81021b0:	2501      	movs	r5, #1
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81021b2:	f04f 0864 	mov.w	r8, #100	; 0x64
 81021b6:	f10d 0717 	add.w	r7, sp, #23
      acc_res =  resolution::ACC_FS_4G;
 81021ba:	6082      	str	r2, [r0, #8]
  gyro_settings.enabled = true;
 81021bc:	7405      	strb	r5, [r0, #16]
 gyro_settings.scale = to_underlying(settings::GyroFullScale::FS_245);
 81021be:	8246      	strh	r6, [r0, #18]
 gyro_settings.HPFCutoff = 0;
 81021c0:	6186      	str	r6, [r0, #24]
 gyro_settings.latchInterrupt = 0;
 81021c2:	f880 6020 	strb.w	r6, [r0, #32]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81021c6:	e9cd 5801 	strd	r5, r8, [sp, #4]
 81021ca:	9700      	str	r7, [sp, #0]
 gyro_settings.orientation = 0;
 81021cc:	61c3      	str	r3, [r0, #28]
  accel_settings.scale = to_underlying(settings::AccFullScale::XL_FS_4G);
 81021ce:	33c0      	adds	r3, #192	; 0xc0
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 81021d0:	4a2b      	ldr	r2, [pc, #172]	; (8102280 <_ZN3IMU5SetupEv+0xe4>)
  accel_settings.scale = to_underlying(settings::AccFullScale::XL_FS_4G);
 81021d2:	6243      	str	r3, [r0, #36]	; 0x24
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 81021d4:	4b2b      	ldr	r3, [pc, #172]	; (8102284 <_ZN3IMU5SetupEv+0xe8>)
  uint8_t reg_value = 0x00;
 81021d6:	f88d 6017 	strb.w	r6, [sp, #23]
  mag_settings.scale = to_underlying(settings::MagFullScale::MAG_4G);
 81021da:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  mag_settings.ZPerformance = to_underlying(settings::MagZOpMode::MAG_UHP_MODE);
 81021de:	4b2a      	ldr	r3, [pc, #168]	; (8102288 <_ZN3IMU5SetupEv+0xec>)
 81021e0:	6303      	str	r3, [r0, #48]	; 0x30
 gyro_settings.sampleRate = to_underlying(settings::GyroODR::ODR_952);
 81021e2:	23c0      	movs	r3, #192	; 0xc0
 81021e4:	6143      	str	r3, [r0, #20]
  accel_settings.enabled = true;
 81021e6:	f241 0301 	movw	r3, #4097	; 0x1001
 81021ea:	8443      	strh	r3, [r0, #34]	; 0x22
{
 81021ec:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81021ee:	462b      	mov	r3, r5
 81021f0:	4826      	ldr	r0, [pc, #152]	; (810228c <_ZN3IMU5SetupEv+0xf0>)
 81021f2:	220f      	movs	r2, #15
 81021f4:	21d6      	movs	r1, #214	; 0xd6
 81021f6:	f002 fb9b 	bl	8104930 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 81021fa:	b9d8      	cbnz	r0, 8102234 <_ZN3IMU5SetupEv+0x98>
  return reg_value;
 81021fc:	4684      	mov	ip, r0
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 81021fe:	462b      	mov	r3, r5
 8102200:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8102204:	4821      	ldr	r0, [pc, #132]	; (810228c <_ZN3IMU5SetupEv+0xf0>)
 8102206:	9700      	str	r7, [sp, #0]
 8102208:	220f      	movs	r2, #15
 810220a:	213c      	movs	r1, #60	; 0x3c
  return reg_value;
 810220c:	f89d 6017 	ldrb.w	r6, [sp, #23]
  uint8_t reg_value = 0x00;
 8102210:	f88d c017 	strb.w	ip, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8102214:	f002 fb8c 	bl	8104930 <HAL_I2C_Mem_Read>
      uint16_t imu_response = (ag_check << 8) | mag_check;
 8102218:	0233      	lsls	r3, r6, #8
 810221a:	b21b      	sxth	r3, r3
  if(status != HAL_OK)
 810221c:	b908      	cbnz	r0, 8102222 <_ZN3IMU5SetupEv+0x86>
      uint16_t imu_response = (ag_check << 8) | mag_check;
 810221e:	f89d 5017 	ldrb.w	r5, [sp, #23]
        if(imu_response != ((imuresponse::WHO_AM_I_AG_RSP << 8 ) | imuresponse::WHO_AM_I_M_RSP))
 8102222:	431d      	orrs	r5, r3
 8102224:	f646 033d 	movw	r3, #26685	; 0x683d
 8102228:	429d      	cmp	r5, r3
 810222a:	d013      	beq.n	8102254 <_ZN3IMU5SetupEv+0xb8>
           return false;
 810222c:	2000      	movs	r0, #0
}
 810222e:	b006      	add	sp, #24
 8102230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8102234:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8102238:	4814      	ldr	r0, [pc, #80]	; (810228c <_ZN3IMU5SetupEv+0xf0>)
 810223a:	9700      	str	r7, [sp, #0]
 810223c:	462b      	mov	r3, r5
 810223e:	220f      	movs	r2, #15
 8102240:	213c      	movs	r1, #60	; 0x3c
  uint8_t reg_value = 0x00;
 8102242:	f88d 6017 	strb.w	r6, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c1, address<<1, reg, I2C_MEMADD_SIZE_8BIT, &reg_value, 1,100);
 8102246:	f002 fb73 	bl	8104930 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 810224a:	2800      	cmp	r0, #0
 810224c:	d1ee      	bne.n	810222c <_ZN3IMU5SetupEv+0x90>
 810224e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8102252:	e7e4      	b.n	810221e <_ZN3IMU5SetupEv+0x82>
        InitGyro();
 8102254:	4620      	mov	r0, r4
 8102256:	f7ff fe89 	bl	8101f6c <_ZN3IMU8InitGyroEv>
        InitAccel();
 810225a:	4620      	mov	r0, r4
 810225c:	f7ff fef2 	bl	8102044 <_ZN3IMU9InitAccelEv>
        InitMag();
 8102260:	4620      	mov	r0, r4
 8102262:	f7ff ff35 	bl	81020d0 <_ZN3IMU7InitMagEv>
        return true;
 8102266:	2001      	movs	r0, #1
}
 8102268:	b006      	add	sp, #24
 810226a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810226e:	bf00      	nop
 8102270:	3912ccf7 	.word	0x3912ccf7
 8102274:	01010100 	.word	0x01010100
 8102278:	3c0f5c29 	.word	0x3c0f5c29
 810227c:	38ffda40 	.word	0x38ffda40
 8102280:	010000ff 	.word	0x010000ff
 8102284:	60001c00 	.word	0x60001c00
 8102288:	0100000c 	.word	0x0100000c
 810228c:	1000025c 	.word	0x1000025c

08102290 <_ZN3IMUC1Ev>:
IMU::IMU()
 8102290:	b510      	push	{r4, lr}
 8102292:	4604      	mov	r4, r0
  bool is_imu = Setup();
 8102294:	f7ff ff82 	bl	810219c <_ZN3IMU5SetupEv>
}
 8102298:	4620      	mov	r0, r4
 810229a:	bd10      	pop	{r4, pc}

0810229c <HAL_I2C_MemRxCpltCallback>:
 810229c:	4770      	bx	lr
 810229e:	bf00      	nop

081022a0 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{


}
 81022a0:	4770      	bx	lr
 81022a2:	bf00      	nop

081022a4 <main>:
  /* MPU Configuration--------------------------------------------------------*/
 // MPU_Config();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81022a4:	4b1f      	ldr	r3, [pc, #124]	; (8102324 <main+0x80>)
{
 81022a6:	b500      	push	{lr}
  __HAL_RCC_HSEM_CLK_ENABLE();
 81022a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81022ac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 81022b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81022b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
{
 81022b8:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_HSEM_CLK_ENABLE();
 81022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_BOOT));
 81022be:	2001      	movs	r0, #1
  __HAL_RCC_HSEM_CLK_ENABLE();
 81022c0:	9301      	str	r3, [sp, #4]
 81022c2:	9b01      	ldr	r3, [sp, #4]
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_BOOT));
 81022c4:	f002 fa2a 	bl	810471c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81022c8:	f003 fde8 	bl	8105e9c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81022cc:	2201      	movs	r2, #1
 81022ce:	2102      	movs	r1, #2
 81022d0:	2000      	movs	r0, #0
 81022d2:	f003 fd9f 	bl	8105e14 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_BOOT));
 81022d6:	4b14      	ldr	r3, [pc, #80]	; (8102328 <main+0x84>)
 81022d8:	4a14      	ldr	r2, [pc, #80]	; (810232c <main+0x88>)
 81022da:	681b      	ldr	r3, [r3, #0]
 81022dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 81022e0:	2b07      	cmp	r3, #7
 81022e2:	d018      	beq.n	8102316 <main+0x72>
 81022e4:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
 81022e8:	f043 0301 	orr.w	r3, r3, #1
 81022ec:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81022f0:	f000 fba6 	bl	8102a40 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81022f4:	f7ff fc56 	bl	8101ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 81022f8:	f7ff fbfc 	bl	8101af4 <MX_DMA_Init>
  MX_SPI1_Init();
 81022fc:	f000 f81a 	bl	8102334 <MX_SPI1_Init>
  MX_I2C1_Init();
 8102300:	f7ff fca0 	bl	8101c44 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8102304:	f000 fa72 	bl	81027ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  EntryApp app;
 8102308:	a802      	add	r0, sp, #8
 810230a:	f7fe ff81 	bl	8101210 <_ZN8EntryAppC1Ev>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	//EnableTiming();
	  //	x = *DWT_CYCCNT;
	  app.RunSensors();
 810230e:	a802      	add	r0, sp, #8
 8102310:	f7fe ffd0 	bl	81012b4 <_ZN8EntryApp10RunSensorsEv>
  while (1)
 8102314:	e7fb      	b.n	810230e <main+0x6a>
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_BOOT));
 8102316:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 810231a:	f043 0301 	orr.w	r3, r3, #1
 810231e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8102322:	e7e5      	b.n	81022f0 <main+0x4c>
 8102324:	58024400 	.word	0x58024400
 8102328:	e000ed00 	.word	0xe000ed00
 810232c:	58026400 	.word	0x58026400

08102330 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102330:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102332:	e7fe      	b.n	8102332 <Error_Handler+0x2>

08102334 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8102334:	4815      	ldr	r0, [pc, #84]	; (810238c <MX_SPI1_Init+0x58>)
 8102336:	4916      	ldr	r1, [pc, #88]	; (8102390 <MX_SPI1_Init+0x5c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8102338:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
{
 810233c:	b510      	push	{r4, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810233e:	e9c0 1200 	strd	r1, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8102342:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8102346:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102348:	2407      	movs	r4, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 810234a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810234e:	6182      	str	r2, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8102350:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8102354:	e9c0 3402 	strd	r3, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8102358:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810235c:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102360:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8102364:	e9c0 230d 	strd	r2, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102368:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810236c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102370:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102374:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  hspi1.Init.CRCPolynomial = 0x0;
 8102378:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 810237a:	f004 ff8d 	bl	8107298 <HAL_SPI_Init>
 810237e:	b900      	cbnz	r0, 8102382 <MX_SPI1_Init+0x4e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8102380:	bd10      	pop	{r4, pc}
 8102382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8102386:	f7ff bfd3 	b.w	8102330 <Error_Handler>
 810238a:	bf00      	nop
 810238c:	10000398 	.word	0x10000398
 8102390:	40013000 	.word	0x40013000

08102394 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8102394:	b570      	push	{r4, r5, r6, lr}
 8102396:	4604      	mov	r4, r0
 8102398:	b0b6      	sub	sp, #216	; 0xd8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810239a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810239c:	22bc      	movs	r2, #188	; 0xbc
 810239e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81023a0:	e9cd 1102 	strd	r1, r1, [sp, #8]
 81023a4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 81023a8:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81023aa:	f007 fe3d 	bl	810a028 <memset>
  if(spiHandle->Instance==SPI1)
 81023ae:	4b3c      	ldr	r3, [pc, #240]	; (81024a0 <HAL_SPI_MspInit+0x10c>)
 81023b0:	6822      	ldr	r2, [r4, #0]
 81023b2:	429a      	cmp	r2, r3
 81023b4:	d001      	beq.n	81023ba <HAL_SPI_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 81023b6:	b036      	add	sp, #216	; 0xd8
 81023b8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81023ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81023be:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 81023c0:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81023c2:	f004 f85d 	bl	8106480 <HAL_RCCEx_PeriphCLKConfig>
 81023c6:	2800      	cmp	r0, #0
 81023c8:	d161      	bne.n	810248e <HAL_SPI_MspInit+0xfa>
    __HAL_RCC_SPI1_CLK_ENABLE();
 81023ca:	4b36      	ldr	r3, [pc, #216]	; (81024a4 <HAL_SPI_MspInit+0x110>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81023cc:	4836      	ldr	r0, [pc, #216]	; (81024a8 <HAL_SPI_MspInit+0x114>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 81023ce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    hdma_spi1_rx.Instance = DMA1_Stream0;
 81023d2:	4e36      	ldr	r6, [pc, #216]	; (81024ac <HAL_SPI_MspInit+0x118>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 81023d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81023d8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 81023dc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 81023e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 81023e4:	9200      	str	r2, [sp, #0]
 81023e6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81023e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81023ec:	f042 0201 	orr.w	r2, r2, #1
 81023f0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81023f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81023f8:	f003 0301 	and.w	r3, r3, #1
 81023fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 81023fe:	22e0      	movs	r2, #224	; 0xe0
 8102400:	2302      	movs	r3, #2
 8102402:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8102406:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102408:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 810240a:	2300      	movs	r3, #0
 810240c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102410:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102412:	2305      	movs	r3, #5
 8102414:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102416:	f002 f823 	bl	8104460 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 810241a:	4925      	ldr	r1, [pc, #148]	; (81024b0 <HAL_SPI_MspInit+0x11c>)
 810241c:	2225      	movs	r2, #37	; 0x25
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 810241e:	2300      	movs	r3, #0
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8102420:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8102424:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102426:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 810242a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810242e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8102432:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8102436:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 810243a:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810243c:	6273      	str	r3, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 810243e:	f000 fdfb 	bl	8103038 <HAL_DMA_Init>
 8102442:	bb50      	cbnz	r0, 810249a <HAL_SPI_MspInit+0x106>
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8102444:	4d1b      	ldr	r5, [pc, #108]	; (81024b4 <HAL_SPI_MspInit+0x120>)
 8102446:	491c      	ldr	r1, [pc, #112]	; (81024b8 <HAL_SPI_MspInit+0x124>)
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8102448:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 810244a:	2226      	movs	r2, #38	; 0x26
 810244c:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102450:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102454:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102456:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102458:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 810245a:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 810245c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102460:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102464:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102468:	e9c5 3207 	strd	r3, r2, [r5, #28]
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 810246c:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810246e:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8102470:	f000 fde2 	bl	8103038 <HAL_DMA_Init>
 8102474:	b970      	cbnz	r0, 8102494 <HAL_SPI_MspInit+0x100>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8102476:	2200      	movs	r2, #0
 8102478:	4611      	mov	r1, r2
 810247a:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 810247c:	67a5      	str	r5, [r4, #120]	; 0x78
 810247e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8102480:	f000 fcb8 	bl	8102df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8102484:	2023      	movs	r0, #35	; 0x23
 8102486:	f000 fcf3 	bl	8102e70 <HAL_NVIC_EnableIRQ>
}
 810248a:	b036      	add	sp, #216	; 0xd8
 810248c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 810248e:	f7ff ff4f 	bl	8102330 <Error_Handler>
 8102492:	e79a      	b.n	81023ca <HAL_SPI_MspInit+0x36>
      Error_Handler();
 8102494:	f7ff ff4c 	bl	8102330 <Error_Handler>
 8102498:	e7ed      	b.n	8102476 <HAL_SPI_MspInit+0xe2>
      Error_Handler();
 810249a:	f7ff ff49 	bl	8102330 <Error_Handler>
 810249e:	e7d1      	b.n	8102444 <HAL_SPI_MspInit+0xb0>
 81024a0:	40013000 	.word	0x40013000
 81024a4:	58024400 	.word	0x58024400
 81024a8:	58020000 	.word	0x58020000
 81024ac:	100002a8 	.word	0x100002a8
 81024b0:	40020010 	.word	0x40020010
 81024b4:	10000320 	.word	0x10000320
 81024b8:	40020028 	.word	0x40020028

081024bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81024bc:	4b07      	ldr	r3, [pc, #28]	; (81024dc <HAL_MspInit+0x20>)
 81024be:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 81024c2:	f042 0202 	orr.w	r2, r2, #2
 81024c6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 81024ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
{
 81024ce:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81024d0:	f003 0302 	and.w	r3, r3, #2
 81024d4:	9301      	str	r3, [sp, #4]
 81024d6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81024d8:	b002      	add	sp, #8
 81024da:	4770      	bx	lr
 81024dc:	58024400 	.word	0x58024400

081024e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81024e0:	e7fe      	b.n	81024e0 <NMI_Handler>
 81024e2:	bf00      	nop

081024e4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81024e4:	e7fe      	b.n	81024e4 <HardFault_Handler>
 81024e6:	bf00      	nop

081024e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81024e8:	e7fe      	b.n	81024e8 <MemManage_Handler>
 81024ea:	bf00      	nop

081024ec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81024ec:	e7fe      	b.n	81024ec <BusFault_Handler>
 81024ee:	bf00      	nop

081024f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81024f0:	e7fe      	b.n	81024f0 <UsageFault_Handler>
 81024f2:	bf00      	nop

081024f4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81024f4:	4770      	bx	lr
 81024f6:	bf00      	nop

081024f8 <DebugMon_Handler>:
 81024f8:	4770      	bx	lr
 81024fa:	bf00      	nop

081024fc <PendSV_Handler>:
 81024fc:	4770      	bx	lr
 81024fe:	bf00      	nop

08102500 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102500:	f000 baf0 	b.w	8102ae4 <HAL_IncTick>

08102504 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8102504:	4801      	ldr	r0, [pc, #4]	; (810250c <DMA1_Stream0_IRQHandler+0x8>)
 8102506:	f001 bcb3 	b.w	8103e70 <HAL_DMA_IRQHandler>
 810250a:	bf00      	nop
 810250c:	100002a8 	.word	0x100002a8

08102510 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8102510:	4801      	ldr	r0, [pc, #4]	; (8102518 <DMA1_Stream1_IRQHandler+0x8>)
 8102512:	f001 bcad 	b.w	8103e70 <HAL_DMA_IRQHandler>
 8102516:	bf00      	nop
 8102518:	10000320 	.word	0x10000320

0810251c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 810251c:	4801      	ldr	r0, [pc, #4]	; (8102524 <DMA1_Stream2_IRQHandler+0x8>)
 810251e:	f001 bca7 	b.w	8103e70 <HAL_DMA_IRQHandler>
 8102522:	bf00      	nop
 8102524:	1000016c 	.word	0x1000016c

08102528 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8102528:	4801      	ldr	r0, [pc, #4]	; (8102530 <DMA1_Stream3_IRQHandler+0x8>)
 810252a:	f001 bca1 	b.w	8103e70 <HAL_DMA_IRQHandler>
 810252e:	bf00      	nop
 8102530:	100001e4 	.word	0x100001e4

08102534 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8102534:	4801      	ldr	r0, [pc, #4]	; (810253c <DMA1_Stream4_IRQHandler+0x8>)
 8102536:	f001 bc9b 	b.w	8103e70 <HAL_DMA_IRQHandler>
 810253a:	bf00      	nop
 810253c:	100000f4 	.word	0x100000f4

08102540 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8102540:	4801      	ldr	r0, [pc, #4]	; (8102548 <ADC_IRQHandler+0x8>)
 8102542:	f000 baf9 	b.w	8102b38 <HAL_ADC_IRQHandler>
 8102546:	bf00      	nop
 8102548:	10000090 	.word	0x10000090

0810254c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 810254c:	4801      	ldr	r0, [pc, #4]	; (8102554 <I2C1_EV_IRQHandler+0x8>)
 810254e:	f002 bcfd 	b.w	8104f4c <HAL_I2C_EV_IRQHandler>
 8102552:	bf00      	nop
 8102554:	1000025c 	.word	0x1000025c

08102558 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8102558:	4801      	ldr	r0, [pc, #4]	; (8102560 <I2C1_ER_IRQHandler+0x8>)
 810255a:	f003 bbc7 	b.w	8105cec <HAL_I2C_ER_IRQHandler>
 810255e:	bf00      	nop
 8102560:	1000025c 	.word	0x1000025c

08102564 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8102564:	4801      	ldr	r0, [pc, #4]	; (810256c <SPI1_IRQHandler+0x8>)
 8102566:	f005 bdcf 	b.w	8108108 <HAL_SPI_IRQHandler>
 810256a:	bf00      	nop
 810256c:	10000398 	.word	0x10000398

08102570 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8102570:	4801      	ldr	r0, [pc, #4]	; (8102578 <USART3_IRQHandler+0x8>)
 8102572:	f006 b815 	b.w	81085a0 <HAL_UART_IRQHandler>
 8102576:	bf00      	nop
 8102578:	1000057c 	.word	0x1000057c

0810257c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 810257c:	4801      	ldr	r0, [pc, #4]	; (8102584 <DMA1_Stream7_IRQHandler+0x8>)
 810257e:	f001 bc77 	b.w	8103e70 <HAL_DMA_IRQHandler>
 8102582:	bf00      	nop
 8102584:	1000048c 	.word	0x1000048c

08102588 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8102588:	4801      	ldr	r0, [pc, #4]	; (8102590 <DMA2_Stream0_IRQHandler+0x8>)
 810258a:	f001 bc71 	b.w	8103e70 <HAL_DMA_IRQHandler>
 810258e:	bf00      	nop
 8102590:	10000504 	.word	0x10000504

08102594 <_ZN3GPS10GetGPSDataEv>:

gpsData GPS::GetGPSData()
{
  gpsData gps;
  gps.gps_latitude = latitude;
  gps.gps_longitude = longitude;
 8102594:	684a      	ldr	r2, [r1, #4]
  gps.gps_latitude = latitude;
 8102596:	f8d1 c000 	ldr.w	ip, [r1]
  gps.gps_longitude = longitude;
 810259a:	6042      	str	r2, [r0, #4]
{
 810259c:	b500      	push	{lr}
  gps.gps_altitude = altitude;
  gps.gps_velocity_x = vel_x;
 810259e:	68ca      	ldr	r2, [r1, #12]
  gps.gps_latitude = latitude;
 81025a0:	f8c0 c000 	str.w	ip, [r0]
  gps.gps_velocity_x = vel_x;
 81025a4:	60c2      	str	r2, [r0, #12]
  gps.gps_altitude = altitude;
 81025a6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  gps.gps_velocity_y = vel_y;
  gps.gps_velocity_z = vel_z;
 81025aa:	694a      	ldr	r2, [r1, #20]
  gps.gps_altitude = altitude;
 81025ac:	f8c0 c008 	str.w	ip, [r0, #8]
  gps.gps_velocity_z = vel_z;
 81025b0:	6142      	str	r2, [r0, #20]
  gps.gps_velocity_y = vel_y;
 81025b2:	f8d1 c010 	ldr.w	ip, [r1, #16]
  gps.gps_satellites = num_satellites;
 81025b6:	7f0a      	ldrb	r2, [r1, #28]
  gps.gnd_speed= gndSpeed;
 81025b8:	f8d1 e018 	ldr.w	lr, [r1, #24]
  gps.gps_velocity_y = vel_y;
 81025bc:	f8c0 c010 	str.w	ip, [r0, #16]
  gps.gps_satellites = num_satellites;
 81025c0:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
  gps.magDec = magnetic_declination;
 81025c4:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
  gps.iTOW = time_of_week;
 81025c8:	6a0a      	ldr	r2, [r1, #32]
  gps.gnd_speed= gndSpeed;
 81025ca:	f8c0 e018 	str.w	lr, [r0, #24]
  gps.magDec = magnetic_declination;
 81025ce:	f8a0 c020 	strh.w	ip, [r0, #32]
  gps.iTOW = time_of_week;
 81025d2:	61c2      	str	r2, [r0, #28]

  return gps;


}
 81025d4:	f85d fb04 	ldr.w	pc, [sp], #4

081025d8 <_ZN3GPS10ProcessGPSEv>:




 void GPS::ProcessGPS()
 {
 81025d8:	b538      	push	{r3, r4, r5, lr}

   latitude = pvt.latitude * 1.0e-7;
 81025da:	4d29      	ldr	r5, [pc, #164]	; (8102680 <_ZN3GPS10ProcessGPSEv+0xa8>)
 81025dc:	6a2b      	ldr	r3, [r5, #32]
 {
 81025de:	4604      	mov	r4, r0
   latitude = pvt.latitude * 1.0e-7;
 81025e0:	4618      	mov	r0, r3
 81025e2:	f7fd ffcb 	bl	810057c <__aeabi_i2d>
 81025e6:	a324      	add	r3, pc, #144	; (adr r3, 8102678 <_ZN3GPS10ProcessGPSEv+0xa0>)
 81025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025ec:	f7fe f830 	bl	8100650 <__aeabi_dmul>
 81025f0:	f7fe fade 	bl	8100bb0 <__aeabi_d2f>
   longitude = pvt.longitude * 1.0e-7;
 81025f4:	69eb      	ldr	r3, [r5, #28]
   latitude = pvt.latitude * 1.0e-7;
 81025f6:	6020      	str	r0, [r4, #0]
   longitude = pvt.longitude * 1.0e-7;
 81025f8:	4618      	mov	r0, r3
 81025fa:	f7fd ffbf 	bl	810057c <__aeabi_i2d>
 81025fe:	a31e      	add	r3, pc, #120	; (adr r3, 8102678 <_ZN3GPS10ProcessGPSEv+0xa0>)
 8102600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102604:	f7fe f824 	bl	8100650 <__aeabi_dmul>
 8102608:	f7fe fad2 	bl	8100bb0 <__aeabi_d2f>
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 810260c:	ed95 5a0a 	vldr	s10, [r5, #40]	; 0x28

   // format to ENU
   vel_x = pvt.velE / 1000.0f;
 8102610:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
   vel_y = pvt.velN / 1000.0f;
 8102614:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
   vel_z = pvt.velD / -1000.0f;
 8102618:	edd5 6a0f 	vldr	s13, [r5, #60]	; 0x3c
   gndSpeed = pvt.gSpeed / 1000.0f;
 810261c:	ed95 7a10 	vldr	s14, [r5, #64]	; 0x40
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102620:	eddf 7a18 	vldr	s15, [pc, #96]	; 8102684 <_ZN3GPS10ProcessGPSEv+0xac>
   vel_z = pvt.velD / -1000.0f;
 8102624:	ed9f 4a18 	vldr	s8, [pc, #96]	; 8102688 <_ZN3GPS10ProcessGPSEv+0xb0>
   longitude = pvt.longitude * 1.0e-7;
 8102628:	6060      	str	r0, [r4, #4]
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 810262a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
   vel_x = pvt.velE / 1000.0f;
 810262e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
   vel_y = pvt.velN / 1000.0f;
 8102632:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
   vel_z = pvt.velD / -1000.0f;
 8102636:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   gndSpeed = pvt.gSpeed / 1000.0f;
 810263a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 810263e:	eec5 4a27 	vdiv.f32	s9, s10, s15
   vel_x = pvt.velE / 1000.0f;
 8102642:	ee85 5aa7 	vdiv.f32	s10, s11, s15
   vel_y = pvt.velN / 1000.0f;
 8102646:	eec6 5a27 	vdiv.f32	s11, s12, s15
   vel_z = pvt.velD / -1000.0f;
 810264a:	ee86 6a84 	vdiv.f32	s12, s13, s8
   gndSpeed = pvt.gSpeed / 1000.0f;
 810264e:	eec7 6a27 	vdiv.f32	s13, s14, s15
   altitude = pvt.hMSL / 1000.0f;  // use Mean sea level
 8102652:	edc4 4a02 	vstr	s9, [r4, #8]
   vel_x = pvt.velE / 1000.0f;
 8102656:	ed84 5a03 	vstr	s10, [r4, #12]
   vel_y = pvt.velN / 1000.0f;
 810265a:	edc4 5a04 	vstr	s11, [r4, #16]
   vel_z = pvt.velD / -1000.0f;
 810265e:	ed84 6a05 	vstr	s12, [r4, #20]
   gndSpeed = pvt.gSpeed / 1000.0f;
 8102662:	edc4 6a06 	vstr	s13, [r4, #24]
   /* Retrieve number of satellites used */
   num_satellites = pvt.numSV;
 8102666:	7eeb      	ldrb	r3, [r5, #27]
 8102668:	7723      	strb	r3, [r4, #28]
   magnetic_declination = pvt.magDec;
 810266a:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
   time_of_week = pvt.iTOW;
 810266e:	686b      	ldr	r3, [r5, #4]
   magnetic_declination = pvt.magDec;
 8102670:	83e2      	strh	r2, [r4, #30]
   time_of_week = pvt.iTOW;
 8102672:	6223      	str	r3, [r4, #32]
 }
 8102674:	bd38      	pop	{r3, r4, r5, pc}
 8102676:	bf00      	nop
 8102678:	9abcaf48 	.word	0x9abcaf48
 810267c:	3e7ad7f2 	.word	0x3e7ad7f2
 8102680:	1000042c 	.word	0x1000042c
 8102684:	447a0000 	.word	0x447a0000
 8102688:	c47a0000 	.word	0xc47a0000

0810268c <_ZN3GPS6ConfigEv>:

 void GPS::Config()
 {
 810268c:	b510      	push	{r4, lr}

  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE));
 810268e:	4c22      	ldr	r4, [pc, #136]	; (8102718 <_ZN3GPS6ConfigEv+0x8c>)
 8102690:	4922      	ldr	r1, [pc, #136]	; (810271c <_ZN3GPS6ConfigEv+0x90>)
 8102692:	220e      	movs	r2, #14
 8102694:	4620      	mov	r0, r4
 8102696:	f005 fe63 	bl	8108360 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 810269a:	2032      	movs	r0, #50	; 0x32
 810269c:	f000 fa34 	bl	8102b08 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF));
 81026a0:	491f      	ldr	r1, [pc, #124]	; (8102720 <_ZN3GPS6ConfigEv+0x94>)
 81026a2:	2210      	movs	r2, #16
 81026a4:	4620      	mov	r0, r4
 81026a6:	f005 fe5b 	bl	8108360 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81026aa:	2032      	movs	r0, #50	; 0x32
 81026ac:	f000 fa2c 	bl	8102b08 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF));
 81026b0:	491c      	ldr	r1, [pc, #112]	; (8102724 <_ZN3GPS6ConfigEv+0x98>)
 81026b2:	2210      	movs	r2, #16
 81026b4:	4620      	mov	r0, r4
 81026b6:	f005 fe53 	bl	8108360 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81026ba:	2032      	movs	r0, #50	; 0x32
 81026bc:	f000 fa24 	bl	8102b08 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF));
 81026c0:	4919      	ldr	r1, [pc, #100]	; (8102728 <_ZN3GPS6ConfigEv+0x9c>)
 81026c2:	2210      	movs	r2, #16
 81026c4:	4620      	mov	r0, r4
 81026c6:	f005 fe4b 	bl	8108360 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81026ca:	2032      	movs	r0, #50	; 0x32
 81026cc:	f000 fa1c 	bl	8102b08 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF));
 81026d0:	4916      	ldr	r1, [pc, #88]	; (810272c <_ZN3GPS6ConfigEv+0xa0>)
 81026d2:	2210      	movs	r2, #16
 81026d4:	4620      	mov	r0, r4
 81026d6:	f005 fe43 	bl	8108360 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81026da:	2032      	movs	r0, #50	; 0x32
 81026dc:	f000 fa14 	bl	8102b08 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF));
 81026e0:	4913      	ldr	r1, [pc, #76]	; (8102730 <_ZN3GPS6ConfigEv+0xa4>)
 81026e2:	2210      	movs	r2, #16
 81026e4:	4620      	mov	r0, r4
 81026e6:	f005 fe3b 	bl	8108360 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81026ea:	2032      	movs	r0, #50	; 0x32
 81026ec:	f000 fa0c 	bl	8102b08 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF));
 81026f0:	4910      	ldr	r1, [pc, #64]	; (8102734 <_ZN3GPS6ConfigEv+0xa8>)
 81026f2:	2210      	movs	r2, #16
 81026f4:	4620      	mov	r0, r4
 81026f6:	f005 fe33 	bl	8108360 <HAL_UART_Transmit_DMA>
  HAL_Delay(50);
 81026fa:	2032      	movs	r0, #50	; 0x32
 81026fc:	f000 fa04 	bl	8102b08 <HAL_Delay>
  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON));
 8102700:	490d      	ldr	r1, [pc, #52]	; (8102738 <_ZN3GPS6ConfigEv+0xac>)
 8102702:	2210      	movs	r2, #16
 8102704:	4620      	mov	r0, r4
 8102706:	f005 fe2b 	bl	8108360 <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_byte, 1);
 810270a:	4620      	mov	r0, r4
 810270c:	490b      	ldr	r1, [pc, #44]	; (810273c <_ZN3GPS6ConfigEv+0xb0>)

 }
 810270e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)data_byte, 1);
 8102712:	2201      	movs	r2, #1
 8102714:	f005 be72 	b.w	81083fc <HAL_UART_Receive_DMA>
 8102718:	1000057c 	.word	0x1000057c
 810271c:	0810a064 	.word	0x0810a064
 8102720:	0810a074 	.word	0x0810a074
 8102724:	0810a084 	.word	0x0810a084
 8102728:	0810a094 	.word	0x0810a094
 810272c:	0810a0a4 	.word	0x0810a0a4
 8102730:	0810a0b4 	.word	0x0810a0b4
 8102734:	0810a0c4 	.word	0x0810a0c4
 8102738:	0810a0d4 	.word	0x0810a0d4
 810273c:	10000428 	.word	0x10000428

08102740 <_ZN3GPSC1Ev>:
GPS::GPS()
 8102740:	b510      	push	{r4, lr}
 8102742:	4604      	mov	r4, r0
  Config();
 8102744:	f7ff ffa2 	bl	810268c <_ZN3GPS6ConfigEv>
}
 8102748:	4620      	mov	r0, r4
 810274a:	bd10      	pop	{r4, pc}

0810274c <HAL_UART_RxCpltCallback>:
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
    static int byte_pos = 0;
    static unsigned char checksum[2];

    if(huart->Instance == USART3)
 810274c:	4b20      	ldr	r3, [pc, #128]	; (81027d0 <HAL_UART_RxCpltCallback+0x84>)
 810274e:	6802      	ldr	r2, [r0, #0]
 8102750:	429a      	cmp	r2, r3
 8102752:	d000      	beq.n	8102756 <HAL_UART_RxCpltCallback+0xa>
 8102754:	4770      	bx	lr
    {
      /*Append Preamble*/
      if(byte_pos < 2)
 8102756:	491f      	ldr	r1, [pc, #124]	; (81027d4 <HAL_UART_RxCpltCallback+0x88>)
 8102758:	680a      	ldr	r2, [r1, #0]
 810275a:	2a01      	cmp	r2, #1
 810275c:	dd20      	ble.n	81027a0 <HAL_UART_RxCpltCallback+0x54>
        }
      }

      else
      {
        if((byte_pos -2) < data_size)
 810275e:	2a61      	cmp	r2, #97	; 0x61
 8102760:	dc27      	bgt.n	81027b2 <HAL_UART_RxCpltCallback+0x66>
        {
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8102762:	4b1d      	ldr	r3, [pc, #116]	; (81027d8 <HAL_UART_RxCpltCallback+0x8c>)
 {
 8102764:	b410      	push	{r4}
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8102766:	4c1d      	ldr	r4, [pc, #116]	; (81027dc <HAL_UART_RxCpltCallback+0x90>)
 8102768:	1898      	adds	r0, r3, r2
        }
        byte_pos++;
 810276a:	3201      	adds	r2, #1
          ((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 810276c:	f894 c000 	ldrb.w	ip, [r4]
 8102770:	f800 cc02 	strb.w	ip, [r0, #-2]

        if (byte_pos == (data_size+2))
 8102774:	2a62      	cmp	r2, #98	; 0x62
        byte_pos++;
 8102776:	600a      	str	r2, [r1, #0]
        if (byte_pos == (data_size+2))
 8102778:	d10f      	bne.n	810279a <HAL_UART_RxCpltCallback+0x4e>
 810277a:	2200      	movs	r2, #0
 810277c:	1e59      	subs	r1, r3, #1
 810277e:	f103 0c5f 	add.w	ip, r3, #95	; 0x5f
 8102782:	4613      	mov	r3, r2
       ck[0] = ck[0] + ((unsigned char*)(&pvt))[i];
 8102784:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8102788:	4403      	add	r3, r0
 810278a:	b2db      	uxtb	r3, r3
       ck[1] = ck[1] + ck[0];
 810278c:	441a      	add	r2, r3
    for (int i = 0; i < (int)sizeof(pvt); i++)
 810278e:	458c      	cmp	ip, r1
       ck[1] = ck[1] + ck[0];
 8102790:	b2d2      	uxtb	r2, r2
    for (int i = 0; i < (int)sizeof(pvt); i++)
 8102792:	d1f7      	bne.n	8102784 <HAL_UART_RxCpltCallback+0x38>
 8102794:	4912      	ldr	r1, [pc, #72]	; (81027e0 <HAL_UART_RxCpltCallback+0x94>)
 8102796:	700b      	strb	r3, [r1, #0]
 8102798:	704a      	strb	r2, [r1, #1]
        {
          byte_pos = 0;
        }
      }
    }
 }
 810279a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810279e:	4770      	bx	lr
        if(data_byte[0] == UBX_HEADER[byte_pos])
 81027a0:	480e      	ldr	r0, [pc, #56]	; (81027dc <HAL_UART_RxCpltCallback+0x90>)
 81027a2:	4b10      	ldr	r3, [pc, #64]	; (81027e4 <HAL_UART_RxCpltCallback+0x98>)
 81027a4:	7800      	ldrb	r0, [r0, #0]
 81027a6:	5c9b      	ldrb	r3, [r3, r2]
 81027a8:	4298      	cmp	r0, r3
 81027aa:	d00d      	beq.n	81027c8 <HAL_UART_RxCpltCallback+0x7c>
          byte_pos = 0;
 81027ac:	2300      	movs	r3, #0
 81027ae:	600b      	str	r3, [r1, #0]
 81027b0:	4770      	bx	lr
        byte_pos++;
 81027b2:	3201      	adds	r2, #1
        else if (byte_pos == (data_size+3) )
 81027b4:	2a63      	cmp	r2, #99	; 0x63
        byte_pos++;
 81027b6:	600a      	str	r2, [r1, #0]
        else if (byte_pos == (data_size+3) )
 81027b8:	d1f8      	bne.n	81027ac <HAL_UART_RxCpltCallback+0x60>
          if (data_byte[0] != checksum[0])
 81027ba:	4a08      	ldr	r2, [pc, #32]	; (81027dc <HAL_UART_RxCpltCallback+0x90>)
 81027bc:	4b08      	ldr	r3, [pc, #32]	; (81027e0 <HAL_UART_RxCpltCallback+0x94>)
 81027be:	7812      	ldrb	r2, [r2, #0]
 81027c0:	781b      	ldrb	r3, [r3, #0]
 81027c2:	429a      	cmp	r2, r3
 81027c4:	d1f2      	bne.n	81027ac <HAL_UART_RxCpltCallback+0x60>
 81027c6:	4770      	bx	lr
          byte_pos++;
 81027c8:	3201      	adds	r2, #1
 81027ca:	600a      	str	r2, [r1, #0]
 81027cc:	4770      	bx	lr
 81027ce:	bf00      	nop
 81027d0:	40004800 	.word	0x40004800
 81027d4:	10000420 	.word	0x10000420
 81027d8:	1000042c 	.word	0x1000042c
 81027dc:	10000428 	.word	0x10000428
 81027e0:	10000424 	.word	0x10000424
 81027e4:	0810a060 	.word	0x0810a060

081027e8 <HAL_UART_TxCpltCallback>:
  {
     if(huart->Instance == USART3)
     {

     }
  }
 81027e8:	4770      	bx	lr
 81027ea:	bf00      	nop

081027ec <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 81027ec:	b510      	push	{r4, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81027ee:	481f      	ldr	r0, [pc, #124]	; (810286c <MX_USART3_UART_Init+0x80>)
 81027f0:	4c1f      	ldr	r4, [pc, #124]	; (8102870 <MX_USART3_UART_Init+0x84>)
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81027f2:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 9600;
 81027f4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 81027f8:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 9600;
 81027fa:	e9c0 4100 	strd	r4, r1, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81027fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102802:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102806:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810280a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810280e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102810:	f006 fbea 	bl	8108fe8 <HAL_UART_Init>
 8102814:	b970      	cbnz	r0, 8102834 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102816:	4815      	ldr	r0, [pc, #84]	; (810286c <MX_USART3_UART_Init+0x80>)
 8102818:	2100      	movs	r1, #0
 810281a:	f006 fc3d 	bl	8109098 <HAL_UARTEx_SetTxFifoThreshold>
 810281e:	b988      	cbnz	r0, 8102844 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102820:	4812      	ldr	r0, [pc, #72]	; (810286c <MX_USART3_UART_Init+0x80>)
 8102822:	2100      	movs	r1, #0
 8102824:	f006 fc7a 	bl	810911c <HAL_UARTEx_SetRxFifoThreshold>
 8102828:	b9a0      	cbnz	r0, 8102854 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810282a:	4810      	ldr	r0, [pc, #64]	; (810286c <MX_USART3_UART_Init+0x80>)
 810282c:	f006 fc16 	bl	810905c <HAL_UARTEx_DisableFifoMode>
 8102830:	b9b8      	cbnz	r0, 8102862 <MX_USART3_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102832:	bd10      	pop	{r4, pc}
    Error_Handler();
 8102834:	f7ff fd7c 	bl	8102330 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102838:	480c      	ldr	r0, [pc, #48]	; (810286c <MX_USART3_UART_Init+0x80>)
 810283a:	2100      	movs	r1, #0
 810283c:	f006 fc2c 	bl	8109098 <HAL_UARTEx_SetTxFifoThreshold>
 8102840:	2800      	cmp	r0, #0
 8102842:	d0ed      	beq.n	8102820 <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8102844:	f7ff fd74 	bl	8102330 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102848:	4808      	ldr	r0, [pc, #32]	; (810286c <MX_USART3_UART_Init+0x80>)
 810284a:	2100      	movs	r1, #0
 810284c:	f006 fc66 	bl	810911c <HAL_UARTEx_SetRxFifoThreshold>
 8102850:	2800      	cmp	r0, #0
 8102852:	d0ea      	beq.n	810282a <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 8102854:	f7ff fd6c 	bl	8102330 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102858:	4804      	ldr	r0, [pc, #16]	; (810286c <MX_USART3_UART_Init+0x80>)
 810285a:	f006 fbff 	bl	810905c <HAL_UARTEx_DisableFifoMode>
 810285e:	2800      	cmp	r0, #0
 8102860:	d0e7      	beq.n	8102832 <MX_USART3_UART_Init+0x46>
}
 8102862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8102866:	f7ff bd63 	b.w	8102330 <Error_Handler>
 810286a:	bf00      	nop
 810286c:	1000057c 	.word	0x1000057c
 8102870:	40004800 	.word	0x40004800

08102874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8102874:	b570      	push	{r4, r5, r6, lr}
 8102876:	4604      	mov	r4, r0
 8102878:	b0b6      	sub	sp, #216	; 0xd8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810287a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810287c:	22bc      	movs	r2, #188	; 0xbc
 810287e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102880:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8102884:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8102888:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810288a:	f007 fbcd 	bl	810a028 <memset>
  if(uartHandle->Instance==USART3)
 810288e:	4b3d      	ldr	r3, [pc, #244]	; (8102984 <HAL_UART_MspInit+0x110>)
 8102890:	6822      	ldr	r2, [r4, #0]
 8102892:	429a      	cmp	r2, r3
 8102894:	d001      	beq.n	810289a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102896:	b036      	add	sp, #216	; 0xd8
 8102898:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810289a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810289c:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810289e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81028a0:	f003 fdee 	bl	8106480 <HAL_RCCEx_PeriphCLKConfig>
 81028a4:	2800      	cmp	r0, #0
 81028a6:	d164      	bne.n	8102972 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART3_CLK_ENABLE();
 81028a8:	4b37      	ldr	r3, [pc, #220]	; (8102988 <HAL_UART_MspInit+0x114>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81028aa:	4838      	ldr	r0, [pc, #224]	; (810298c <HAL_UART_MspInit+0x118>)
    __HAL_RCC_USART3_CLK_ENABLE();
 81028ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    hdma_usart3_rx.Instance = DMA1_Stream7;
 81028b0:	4e37      	ldr	r6, [pc, #220]	; (8102990 <HAL_UART_MspInit+0x11c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 81028b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 81028b6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 81028ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 81028be:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 81028c2:	9200      	str	r2, [sp, #0]
 81028c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81028c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81028ca:	f042 0208 	orr.w	r2, r2, #8
 81028ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 81028d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028d6:	f003 0308 	and.w	r3, r3, #8
 81028da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81028dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 81028e0:	2302      	movs	r3, #2
 81028e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81028e6:	2200      	movs	r2, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81028e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81028ea:	2300      	movs	r3, #0
 81028ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81028f0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81028f2:	2307      	movs	r3, #7
 81028f4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81028f6:	f001 fdb3 	bl	8104460 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 81028fa:	4926      	ldr	r1, [pc, #152]	; (8102994 <HAL_UART_MspInit+0x120>)
 81028fc:	222d      	movs	r2, #45	; 0x2d
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81028fe:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8102900:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8102904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102908:	e9c6 3206 	strd	r3, r2, [r6, #24]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 810290c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102910:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8102914:	4630      	mov	r0, r6
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102916:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810291a:	e9c6 1304 	strd	r1, r3, [r6, #16]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 810291e:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8102922:	f000 fb89 	bl	8103038 <HAL_DMA_Init>
 8102926:	bb50      	cbnz	r0, 810297e <HAL_UART_MspInit+0x10a>
    hdma_usart3_tx.Instance = DMA2_Stream0;
 8102928:	4d1b      	ldr	r5, [pc, #108]	; (8102998 <HAL_UART_MspInit+0x124>)
 810292a:	491c      	ldr	r1, [pc, #112]	; (810299c <HAL_UART_MspInit+0x128>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 810292c:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 810292e:	222e      	movs	r2, #46	; 0x2e
 8102930:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8102934:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102938:	2300      	movs	r3, #0
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 810293a:	2140      	movs	r1, #64	; 0x40
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 810293c:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 810293e:	4628      	mov	r0, r5
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8102940:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102944:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102948:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 810294c:	e9c5 3207 	strd	r3, r2, [r5, #28]
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8102950:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102952:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8102954:	f000 fb70 	bl	8103038 <HAL_DMA_Init>
 8102958:	b970      	cbnz	r0, 8102978 <HAL_UART_MspInit+0x104>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 810295a:	2200      	movs	r2, #0
 810295c:	2105      	movs	r1, #5
 810295e:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8102960:	67a5      	str	r5, [r4, #120]	; 0x78
 8102962:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8102964:	f000 fa46 	bl	8102df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8102968:	2027      	movs	r0, #39	; 0x27
 810296a:	f000 fa81 	bl	8102e70 <HAL_NVIC_EnableIRQ>
}
 810296e:	b036      	add	sp, #216	; 0xd8
 8102970:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8102972:	f7ff fcdd 	bl	8102330 <Error_Handler>
 8102976:	e797      	b.n	81028a8 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8102978:	f7ff fcda 	bl	8102330 <Error_Handler>
 810297c:	e7ed      	b.n	810295a <HAL_UART_MspInit+0xe6>
      Error_Handler();
 810297e:	f7ff fcd7 	bl	8102330 <Error_Handler>
 8102982:	e7d1      	b.n	8102928 <HAL_UART_MspInit+0xb4>
 8102984:	40004800 	.word	0x40004800
 8102988:	58024400 	.word	0x58024400
 810298c:	58020c00 	.word	0x58020c00
 8102990:	1000048c 	.word	0x1000048c
 8102994:	400200b8 	.word	0x400200b8
 8102998:	10000504 	.word	0x10000504
 810299c:	40020410 	.word	0x40020410

081029a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81029a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81029d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81029a4:	f7fe fcf2 	bl	810138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81029a8:	480c      	ldr	r0, [pc, #48]	; (81029dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81029aa:	490d      	ldr	r1, [pc, #52]	; (81029e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81029ac:	4a0d      	ldr	r2, [pc, #52]	; (81029e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81029ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81029b0:	e002      	b.n	81029b8 <LoopCopyDataInit>

081029b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81029b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81029b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81029b6:	3304      	adds	r3, #4

081029b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81029b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81029ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81029bc:	d3f9      	bcc.n	81029b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81029be:	4a0a      	ldr	r2, [pc, #40]	; (81029e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81029c0:	4c0a      	ldr	r4, [pc, #40]	; (81029ec <LoopFillZerobss+0x22>)
  movs r3, #0
 81029c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81029c4:	e001      	b.n	81029ca <LoopFillZerobss>

081029c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81029c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81029c8:	3204      	adds	r2, #4

081029ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81029ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81029cc:	d3fb      	bcc.n	81029c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81029ce:	f007 fb07 	bl	8109fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81029d2:	f7ff fc67 	bl	81022a4 <main>
  bx  lr
 81029d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81029d8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81029dc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81029e0:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 81029e4:	0810a190 	.word	0x0810a190
  ldr r2, =_sbss
 81029e8:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 81029ec:	10000610 	.word	0x10000610

081029f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81029f0:	e7fe      	b.n	81029f0 <ADC3_IRQHandler>
	...

081029f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81029f4:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81029f6:	4b0f      	ldr	r3, [pc, #60]	; (8102a34 <HAL_InitTick+0x40>)
 81029f8:	781b      	ldrb	r3, [r3, #0]
 81029fa:	b90b      	cbnz	r3, 8102a00 <HAL_InitTick+0xc>
  {
    return HAL_ERROR;
 81029fc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 81029fe:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102a00:	490d      	ldr	r1, [pc, #52]	; (8102a38 <HAL_InitTick+0x44>)
 8102a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8102a06:	4605      	mov	r5, r0
 8102a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8102a0c:	6808      	ldr	r0, [r1, #0]
 8102a0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8102a12:	f000 fa3b 	bl	8102e8c <HAL_SYSTICK_Config>
 8102a16:	4604      	mov	r4, r0
 8102a18:	2800      	cmp	r0, #0
 8102a1a:	d1ef      	bne.n	81029fc <HAL_InitTick+0x8>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102a1c:	2d0f      	cmp	r5, #15
 8102a1e:	d8ed      	bhi.n	81029fc <HAL_InitTick+0x8>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102a20:	4602      	mov	r2, r0
 8102a22:	4629      	mov	r1, r5
 8102a24:	f04f 30ff 	mov.w	r0, #4294967295
 8102a28:	f000 f9e4 	bl	8102df4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102a2c:	4b03      	ldr	r3, [pc, #12]	; (8102a3c <HAL_InitTick+0x48>)
 8102a2e:	4620      	mov	r0, r4
 8102a30:	601d      	str	r5, [r3, #0]
}
 8102a32:	bd38      	pop	{r3, r4, r5, pc}
 8102a34:	10000008 	.word	0x10000008
 8102a38:	10000000 	.word	0x10000000
 8102a3c:	1000000c 	.word	0x1000000c

08102a40 <HAL_Init>:
{
 8102a40:	b510      	push	{r4, lr}
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102a42:	4c23      	ldr	r4, [pc, #140]	; (8102ad0 <HAL_Init+0x90>)
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102a44:	4a23      	ldr	r2, [pc, #140]	; (8102ad4 <HAL_Init+0x94>)
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102a46:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8102a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102a4e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8102a52:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
{
 8102a56:	b082      	sub	sp, #8
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102a5c:	9301      	str	r3, [sp, #4]
 8102a5e:	9b01      	ldr	r3, [sp, #4]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102a60:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102a64:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102a6c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102a70:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102a74:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8102a78:	f043 0301 	orr.w	r3, r3, #1
 8102a7c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102a80:	2003      	movs	r0, #3
 8102a82:	f000 f9a5 	bl	8102dd0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102a86:	f003 fa95 	bl	8105fb4 <HAL_RCC_GetSysClockFreq>
 8102a8a:	69a3      	ldr	r3, [r4, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a8c:	69a2      	ldr	r2, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102a8e:	4912      	ldr	r1, [pc, #72]	; (8102ad8 <HAL_Init+0x98>)
 8102a90:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a94:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102a98:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a9a:	5c8a      	ldrb	r2, [r1, r2]
 8102a9c:	490f      	ldr	r1, [pc, #60]	; (8102adc <HAL_Init+0x9c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102a9e:	f003 031f 	and.w	r3, r3, #31
 8102aa2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102aa4:	f002 031f 	and.w	r3, r2, #31
  SystemCoreClock = SystemD2Clock;
 8102aa8:	4a0d      	ldr	r2, [pc, #52]	; (8102ae0 <HAL_Init+0xa0>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102aaa:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102aae:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102ab0:	600b      	str	r3, [r1, #0]
  SystemCoreClock = SystemD2Clock;
 8102ab2:	6013      	str	r3, [r2, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102ab4:	f7ff ff9e 	bl	81029f4 <HAL_InitTick>
 8102ab8:	b118      	cbz	r0, 8102ac2 <HAL_Init+0x82>
    return HAL_ERROR;
 8102aba:	2401      	movs	r4, #1
}
 8102abc:	4620      	mov	r0, r4
 8102abe:	b002      	add	sp, #8
 8102ac0:	bd10      	pop	{r4, pc}
 8102ac2:	4604      	mov	r4, r0
  HAL_MspInit();
 8102ac4:	f7ff fcfa 	bl	81024bc <HAL_MspInit>
}
 8102ac8:	4620      	mov	r0, r4
 8102aca:	b002      	add	sp, #8
 8102acc:	bd10      	pop	{r4, pc}
 8102ace:	bf00      	nop
 8102ad0:	58024400 	.word	0x58024400
 8102ad4:	40024000 	.word	0x40024000
 8102ad8:	0810a050 	.word	0x0810a050
 8102adc:	10000004 	.word	0x10000004
 8102ae0:	10000000 	.word	0x10000000

08102ae4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8102ae4:	4a03      	ldr	r2, [pc, #12]	; (8102af4 <HAL_IncTick+0x10>)
 8102ae6:	4b04      	ldr	r3, [pc, #16]	; (8102af8 <HAL_IncTick+0x14>)
 8102ae8:	6811      	ldr	r1, [r2, #0]
 8102aea:	781b      	ldrb	r3, [r3, #0]
 8102aec:	440b      	add	r3, r1
 8102aee:	6013      	str	r3, [r2, #0]
}
 8102af0:	4770      	bx	lr
 8102af2:	bf00      	nop
 8102af4:	1000060c 	.word	0x1000060c
 8102af8:	10000008 	.word	0x10000008

08102afc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8102afc:	4b01      	ldr	r3, [pc, #4]	; (8102b04 <HAL_GetTick+0x8>)
 8102afe:	6818      	ldr	r0, [r3, #0]
}
 8102b00:	4770      	bx	lr
 8102b02:	bf00      	nop
 8102b04:	1000060c 	.word	0x1000060c

08102b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102b08:	b538      	push	{r3, r4, r5, lr}
 8102b0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8102b0c:	f7ff fff6 	bl	8102afc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102b10:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8102b12:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8102b14:	d002      	beq.n	8102b1c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8102b16:	4b04      	ldr	r3, [pc, #16]	; (8102b28 <HAL_Delay+0x20>)
 8102b18:	781b      	ldrb	r3, [r3, #0]
 8102b1a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102b1c:	f7ff ffee 	bl	8102afc <HAL_GetTick>
 8102b20:	1b43      	subs	r3, r0, r5
 8102b22:	42a3      	cmp	r3, r4
 8102b24:	d3fa      	bcc.n	8102b1c <HAL_Delay+0x14>
  {
  }
}
 8102b26:	bd38      	pop	{r3, r4, r5, pc}
 8102b28:	10000008 	.word	0x10000008

08102b2c <HAL_ADC_ConvCpltCallback>:
 8102b2c:	4770      	bx	lr
 8102b2e:	bf00      	nop

08102b30 <HAL_ADC_LevelOutOfWindowCallback>:
 8102b30:	4770      	bx	lr
 8102b32:	bf00      	nop

08102b34 <HAL_ADC_ErrorCallback>:
 8102b34:	4770      	bx	lr
 8102b36:	bf00      	nop

08102b38 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8102b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_ier = hadc->Instance->IER;
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102b3a:	4a8d      	ldr	r2, [pc, #564]	; (8102d70 <HAL_ADC_IRQHandler+0x238>)
  uint32_t tmp_isr = hadc->Instance->ISR;
 8102b3c:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102b3e:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 8102b40:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8102b42:	685f      	ldr	r7, [r3, #4]
{
 8102b44:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102b46:	f000 80d5 	beq.w	8102cf4 <HAL_ADC_IRQHandler+0x1bc>
 8102b4a:	488a      	ldr	r0, [pc, #552]	; (8102d74 <HAL_ADC_IRQHandler+0x23c>)
 8102b4c:	498a      	ldr	r1, [pc, #552]	; (8102d78 <HAL_ADC_IRQHandler+0x240>)
 8102b4e:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8102b52:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 8102b56:	4283      	cmp	r3, r0
 8102b58:	bf08      	it	eq
 8102b5a:	460a      	moveq	r2, r1
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102b5c:	6895      	ldr	r5, [r2, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8102b5e:	07b1      	lsls	r1, r6, #30
 8102b60:	f005 051f 	and.w	r5, r5, #31
 8102b64:	d502      	bpl.n	8102b6c <HAL_ADC_IRQHandler+0x34>
 8102b66:	07ba      	lsls	r2, r7, #30
 8102b68:	f100 808a 	bmi.w	8102c80 <HAL_ADC_IRQHandler+0x148>
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8102b6c:	0771      	lsls	r1, r6, #29
 8102b6e:	d57c      	bpl.n	8102c6a <HAL_ADC_IRQHandler+0x132>
 8102b70:	077a      	lsls	r2, r7, #29
 8102b72:	d57a      	bpl.n	8102c6a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102b74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8102b76:	06d2      	lsls	r2, r2, #27
 8102b78:	d403      	bmi.n	8102b82 <HAL_ADC_IRQHandler+0x4a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8102b7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8102b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102b80:	6562      	str	r2, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102b82:	68da      	ldr	r2, [r3, #12]
 8102b84:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8102b88:	d11c      	bne.n	8102bc4 <HAL_ADC_IRQHandler+0x8c>
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102b8a:	4a7a      	ldr	r2, [pc, #488]	; (8102d74 <HAL_ADC_IRQHandler+0x23c>)
 8102b8c:	4293      	cmp	r3, r2
 8102b8e:	f000 80e6 	beq.w	8102d5e <HAL_ADC_IRQHandler+0x226>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8102b92:	68da      	ldr	r2, [r3, #12]
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8102b94:	0490      	lsls	r0, r2, #18
 8102b96:	d415      	bmi.n	8102bc4 <HAL_ADC_IRQHandler+0x8c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8102b98:	681a      	ldr	r2, [r3, #0]
 8102b9a:	0711      	lsls	r1, r2, #28
 8102b9c:	d512      	bpl.n	8102bc4 <HAL_ADC_IRQHandler+0x8c>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102b9e:	689a      	ldr	r2, [r3, #8]
 8102ba0:	0752      	lsls	r2, r2, #29
 8102ba2:	f100 80fd 	bmi.w	8102da0 <HAL_ADC_IRQHandler+0x268>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8102ba6:	685a      	ldr	r2, [r3, #4]
 8102ba8:	f022 020c 	bic.w	r2, r2, #12
 8102bac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8102bae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102bb4:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8102bb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102bb8:	04db      	lsls	r3, r3, #19
 8102bba:	d403      	bmi.n	8102bc4 <HAL_ADC_IRQHandler+0x8c>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8102bbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102bbe:	f043 0301 	orr.w	r3, r3, #1
 8102bc2:	6563      	str	r3, [r4, #84]	; 0x54
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8102bc4:	4620      	mov	r0, r4
 8102bc6:	f7ff ffb1 	bl	8102b2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8102bca:	6823      	ldr	r3, [r4, #0]
 8102bcc:	220c      	movs	r2, #12
 8102bce:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8102bd0:	06b0      	lsls	r0, r6, #26
 8102bd2:	d550      	bpl.n	8102c76 <HAL_ADC_IRQHandler+0x13e>
 8102bd4:	06b9      	lsls	r1, r7, #26
 8102bd6:	d54e      	bpl.n	8102c76 <HAL_ADC_IRQHandler+0x13e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102bd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8102bda:	06d1      	lsls	r1, r2, #27
 8102bdc:	d403      	bmi.n	8102be6 <HAL_ADC_IRQHandler+0xae>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8102bde:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8102be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8102be4:	6562      	str	r2, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102be6:	4863      	ldr	r0, [pc, #396]	; (8102d74 <HAL_ADC_IRQHandler+0x23c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8102be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102bea:	68d9      	ldr	r1, [r3, #12]
 8102bec:	4283      	cmp	r3, r0
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8102bee:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 8102bf2:	d077      	beq.n	8102ce4 <HAL_ADC_IRQHandler+0x1ac>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8102bf4:	68d8      	ldr	r0, [r3, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8102bf6:	b12a      	cbz	r2, 8102c04 <HAL_ADC_IRQHandler+0xcc>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8102bf8:	4a60      	ldr	r2, [pc, #384]	; (8102d7c <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102bfa:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8102bfe:	4002      	ands	r2, r0
 8102c00:	430a      	orrs	r2, r1
 8102c02:	d117      	bne.n	8102c34 <HAL_ADC_IRQHandler+0xfc>
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8102c04:	681a      	ldr	r2, [r3, #0]
 8102c06:	0652      	lsls	r2, r2, #25
 8102c08:	d514      	bpl.n	8102c34 <HAL_ADC_IRQHandler+0xfc>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8102c0a:	0281      	lsls	r1, r0, #10
 8102c0c:	d412      	bmi.n	8102c34 <HAL_ADC_IRQHandler+0xfc>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102c0e:	689a      	ldr	r2, [r3, #8]
 8102c10:	0712      	lsls	r2, r2, #28
 8102c12:	f100 80bc 	bmi.w	8102d8e <HAL_ADC_IRQHandler+0x256>
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8102c16:	685a      	ldr	r2, [r3, #4]
 8102c18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8102c1c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8102c1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8102c24:	6563      	str	r3, [r4, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8102c26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102c28:	05d8      	lsls	r0, r3, #23
 8102c2a:	d403      	bmi.n	8102c34 <HAL_ADC_IRQHandler+0xfc>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8102c2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102c2e:	f043 0301 	orr.w	r3, r3, #1
 8102c32:	6563      	str	r3, [r4, #84]	; 0x54
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8102c34:	4620      	mov	r0, r4
 8102c36:	f000 f8c1 	bl	8102dbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8102c3a:	6823      	ldr	r3, [r4, #0]
 8102c3c:	2260      	movs	r2, #96	; 0x60
 8102c3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8102c40:	0631      	lsls	r1, r6, #24
 8102c42:	d501      	bpl.n	8102c48 <HAL_ADC_IRQHandler+0x110>
 8102c44:	063a      	lsls	r2, r7, #24
 8102c46:	d463      	bmi.n	8102d10 <HAL_ADC_IRQHandler+0x1d8>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8102c48:	05f0      	lsls	r0, r6, #23
 8102c4a:	d501      	bpl.n	8102c50 <HAL_ADC_IRQHandler+0x118>
 8102c4c:	05f9      	lsls	r1, r7, #23
 8102c4e:	d46a      	bmi.n	8102d26 <HAL_ADC_IRQHandler+0x1ee>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8102c50:	05b2      	lsls	r2, r6, #22
 8102c52:	d501      	bpl.n	8102c58 <HAL_ADC_IRQHandler+0x120>
 8102c54:	05b8      	lsls	r0, r7, #22
 8102c56:	d44f      	bmi.n	8102cf8 <HAL_ADC_IRQHandler+0x1c0>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8102c58:	06f1      	lsls	r1, r6, #27
 8102c5a:	d501      	bpl.n	8102c60 <HAL_ADC_IRQHandler+0x128>
 8102c5c:	06fa      	lsls	r2, r7, #27
 8102c5e:	d41d      	bmi.n	8102c9c <HAL_ADC_IRQHandler+0x164>
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8102c60:	0570      	lsls	r0, r6, #21
 8102c62:	d501      	bpl.n	8102c68 <HAL_ADC_IRQHandler+0x130>
 8102c64:	0579      	lsls	r1, r7, #21
 8102c66:	d46a      	bmi.n	8102d3e <HAL_ADC_IRQHandler+0x206>
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8102c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8102c6a:	0730      	lsls	r0, r6, #28
 8102c6c:	d5b0      	bpl.n	8102bd0 <HAL_ADC_IRQHandler+0x98>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8102c6e:	0739      	lsls	r1, r7, #28
 8102c70:	d480      	bmi.n	8102b74 <HAL_ADC_IRQHandler+0x3c>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8102c72:	06b0      	lsls	r0, r6, #26
 8102c74:	d4ae      	bmi.n	8102bd4 <HAL_ADC_IRQHandler+0x9c>
 8102c76:	0672      	lsls	r2, r6, #25
 8102c78:	d5e2      	bpl.n	8102c40 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8102c7a:	0678      	lsls	r0, r7, #25
 8102c7c:	d5e0      	bpl.n	8102c40 <HAL_ADC_IRQHandler+0x108>
 8102c7e:	e7ab      	b.n	8102bd8 <HAL_ADC_IRQHandler+0xa0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102c80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102c82:	06d8      	lsls	r0, r3, #27
 8102c84:	d403      	bmi.n	8102c8e <HAL_ADC_IRQHandler+0x156>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8102c86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102c88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8102c8c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8102c8e:	4620      	mov	r0, r4
 8102c90:	f000 f89c 	bl	8102dcc <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8102c94:	6823      	ldr	r3, [r4, #0]
 8102c96:	2202      	movs	r2, #2
 8102c98:	601a      	str	r2, [r3, #0]
 8102c9a:	e767      	b.n	8102b6c <HAL_ADC_IRQHandler+0x34>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8102c9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8102c9e:	b192      	cbz	r2, 8102cc6 <HAL_ADC_IRQHandler+0x18e>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8102ca0:	2d00      	cmp	r5, #0
 8102ca2:	d061      	beq.n	8102d68 <HAL_ADC_IRQHandler+0x230>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8102ca4:	4a32      	ldr	r2, [pc, #200]	; (8102d70 <HAL_ADC_IRQHandler+0x238>)
 8102ca6:	4293      	cmp	r3, r2
 8102ca8:	f000 8083 	beq.w	8102db2 <HAL_ADC_IRQHandler+0x27a>
 8102cac:	4831      	ldr	r0, [pc, #196]	; (8102d74 <HAL_ADC_IRQHandler+0x23c>)
 8102cae:	4932      	ldr	r1, [pc, #200]	; (8102d78 <HAL_ADC_IRQHandler+0x240>)
 8102cb0:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8102cb4:	f502 4286 	add.w	r2, r2, #17152	; 0x4300
 8102cb8:	4283      	cmp	r3, r0
 8102cba:	bf08      	it	eq
 8102cbc:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8102cbe:	6892      	ldr	r2, [r2, #8]
 8102cc0:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8102cc4:	d00b      	beq.n	8102cde <HAL_ADC_IRQHandler+0x1a6>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8102cc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102cc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8102ccc:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8102cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8102cd0:	f043 0302 	orr.w	r3, r3, #2
 8102cd4:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8102cd6:	4620      	mov	r0, r4
 8102cd8:	f7ff ff2c 	bl	8102b34 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8102cdc:	6823      	ldr	r3, [r4, #0]
 8102cde:	2210      	movs	r2, #16
 8102ce0:	601a      	str	r2, [r3, #0]
 8102ce2:	e7bd      	b.n	8102c60 <HAL_ADC_IRQHandler+0x128>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102ce4:	2d00      	cmp	r5, #0
 8102ce6:	d085      	beq.n	8102bf4 <HAL_ADC_IRQHandler+0xbc>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8102ce8:	1fa8      	subs	r0, r5, #6
 8102cea:	2801      	cmp	r0, #1
 8102cec:	d982      	bls.n	8102bf4 <HAL_ADC_IRQHandler+0xbc>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102cee:	4820      	ldr	r0, [pc, #128]	; (8102d70 <HAL_ADC_IRQHandler+0x238>)
 8102cf0:	68c0      	ldr	r0, [r0, #12]
 8102cf2:	e780      	b.n	8102bf6 <HAL_ADC_IRQHandler+0xbe>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102cf4:	4a20      	ldr	r2, [pc, #128]	; (8102d78 <HAL_ADC_IRQHandler+0x240>)
 8102cf6:	e731      	b.n	8102b5c <HAL_ADC_IRQHandler+0x24>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8102cf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102cfe:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8102d00:	4620      	mov	r0, r4
 8102d02:	f000 f861 	bl	8102dc8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8102d06:	6823      	ldr	r3, [r4, #0]
 8102d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102d0c:	601a      	str	r2, [r3, #0]
 8102d0e:	e7a3      	b.n	8102c58 <HAL_ADC_IRQHandler+0x120>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8102d10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8102d16:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8102d18:	4620      	mov	r0, r4
 8102d1a:	f7ff ff09 	bl	8102b30 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8102d1e:	6823      	ldr	r3, [r4, #0]
 8102d20:	2280      	movs	r2, #128	; 0x80
 8102d22:	601a      	str	r2, [r3, #0]
 8102d24:	e790      	b.n	8102c48 <HAL_ADC_IRQHandler+0x110>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8102d26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d2c:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8102d2e:	4620      	mov	r0, r4
 8102d30:	f000 f848 	bl	8102dc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8102d34:	6823      	ldr	r3, [r4, #0]
 8102d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102d3a:	601a      	str	r2, [r3, #0]
 8102d3c:	e788      	b.n	8102c50 <HAL_ADC_IRQHandler+0x118>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8102d3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8102d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102d44:	6562      	str	r2, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8102d46:	6da2      	ldr	r2, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8102d48:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8102d4c:	f042 0208 	orr.w	r2, r2, #8
 8102d50:	65a2      	str	r2, [r4, #88]	; 0x58
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8102d52:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8102d54:	6019      	str	r1, [r3, #0]
}
 8102d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8102d5a:	f000 b831 	b.w	8102dc0 <HAL_ADCEx_InjectedQueueOverflowCallback>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102d5e:	2d09      	cmp	r5, #9
 8102d60:	d90e      	bls.n	8102d80 <HAL_ADC_IRQHandler+0x248>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102d62:	4a03      	ldr	r2, [pc, #12]	; (8102d70 <HAL_ADC_IRQHandler+0x238>)
 8102d64:	68d2      	ldr	r2, [r2, #12]
 8102d66:	e715      	b.n	8102b94 <HAL_ADC_IRQHandler+0x5c>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8102d68:	68da      	ldr	r2, [r3, #12]
 8102d6a:	0795      	lsls	r5, r2, #30
 8102d6c:	d0b7      	beq.n	8102cde <HAL_ADC_IRQHandler+0x1a6>
 8102d6e:	e7aa      	b.n	8102cc6 <HAL_ADC_IRQHandler+0x18e>
 8102d70:	40022000 	.word	0x40022000
 8102d74:	40022100 	.word	0x40022100
 8102d78:	40022300 	.word	0x40022300
 8102d7c:	02002000 	.word	0x02002000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102d80:	f240 2221 	movw	r2, #545	; 0x221
 8102d84:	40ea      	lsrs	r2, r5
 8102d86:	07d2      	lsls	r2, r2, #31
 8102d88:	f53f af03 	bmi.w	8102b92 <HAL_ADC_IRQHandler+0x5a>
 8102d8c:	e7e9      	b.n	8102d62 <HAL_ADC_IRQHandler+0x22a>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102d8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102d90:	f043 0310 	orr.w	r3, r3, #16
 8102d94:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102d96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8102d98:	f043 0301 	orr.w	r3, r3, #1
 8102d9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8102d9e:	e749      	b.n	8102c34 <HAL_ADC_IRQHandler+0xfc>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102da0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8102da2:	f043 0310 	orr.w	r3, r3, #16
 8102da6:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8102daa:	f043 0301 	orr.w	r3, r3, #1
 8102dae:	65a3      	str	r3, [r4, #88]	; 0x58
 8102db0:	e708      	b.n	8102bc4 <HAL_ADC_IRQHandler+0x8c>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8102db2:	4a01      	ldr	r2, [pc, #4]	; (8102db8 <HAL_ADC_IRQHandler+0x280>)
 8102db4:	e783      	b.n	8102cbe <HAL_ADC_IRQHandler+0x186>
 8102db6:	bf00      	nop
 8102db8:	40022300 	.word	0x40022300

08102dbc <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8102dbc:	4770      	bx	lr
 8102dbe:	bf00      	nop

08102dc0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8102dc0:	4770      	bx	lr
 8102dc2:	bf00      	nop

08102dc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8102dc4:	4770      	bx	lr
 8102dc6:	bf00      	nop

08102dc8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8102dc8:	4770      	bx	lr
 8102dca:	bf00      	nop

08102dcc <HAL_ADCEx_EndOfSamplingCallback>:
 8102dcc:	4770      	bx	lr
 8102dce:	bf00      	nop

08102dd0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102dd0:	4907      	ldr	r1, [pc, #28]	; (8102df0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8102dd2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102dd4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102dd6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102dda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102dde:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102de0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102de2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8102dea:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8102dec:	4770      	bx	lr
 8102dee:	bf00      	nop
 8102df0:	e000ed00 	.word	0xe000ed00

08102df4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102df4:	4b1c      	ldr	r3, [pc, #112]	; (8102e68 <HAL_NVIC_SetPriority+0x74>)
 8102df6:	68db      	ldr	r3, [r3, #12]
 8102df8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102dfc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102dfe:	f1c3 0e07 	rsb	lr, r3, #7
 8102e02:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102e06:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102e0a:	bf28      	it	cs
 8102e0c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102e10:	f1bc 0f06 	cmp.w	ip, #6
 8102e14:	d91b      	bls.n	8102e4e <HAL_NVIC_SetPriority+0x5a>
 8102e16:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102e18:	f04f 3cff 	mov.w	ip, #4294967295
 8102e1c:	fa0c fc03 	lsl.w	ip, ip, r3
 8102e20:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102e24:	f04f 3cff 	mov.w	ip, #4294967295
 8102e28:	fa0c fc0e 	lsl.w	ip, ip, lr
 8102e2c:	ea21 010c 	bic.w	r1, r1, ip
 8102e30:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8102e32:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102e34:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8102e38:	db0c      	blt.n	8102e54 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e3a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8102e3e:	0109      	lsls	r1, r1, #4
 8102e40:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8102e44:	b2c9      	uxtb	r1, r1
 8102e46:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8102e4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8102e4e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102e50:	4613      	mov	r3, r2
 8102e52:	e7e7      	b.n	8102e24 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e54:	4b05      	ldr	r3, [pc, #20]	; (8102e6c <HAL_NVIC_SetPriority+0x78>)
 8102e56:	f000 000f 	and.w	r0, r0, #15
 8102e5a:	0109      	lsls	r1, r1, #4
 8102e5c:	4403      	add	r3, r0
 8102e5e:	b2c9      	uxtb	r1, r1
 8102e60:	7619      	strb	r1, [r3, #24]
 8102e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8102e66:	bf00      	nop
 8102e68:	e000ed00 	.word	0xe000ed00
 8102e6c:	e000ecfc 	.word	0xe000ecfc

08102e70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8102e70:	2800      	cmp	r0, #0
 8102e72:	db08      	blt.n	8102e86 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102e74:	4a04      	ldr	r2, [pc, #16]	; (8102e88 <HAL_NVIC_EnableIRQ+0x18>)
 8102e76:	0941      	lsrs	r1, r0, #5
 8102e78:	2301      	movs	r3, #1
 8102e7a:	f000 001f 	and.w	r0, r0, #31
 8102e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8102e82:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8102e86:	4770      	bx	lr
 8102e88:	e000e100 	.word	0xe000e100

08102e8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102e8c:	3801      	subs	r0, #1
 8102e8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8102e92:	d210      	bcs.n	8102eb6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102e94:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102e96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e9a:	4c08      	ldr	r4, [pc, #32]	; (8102ebc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102e9c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102e9e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8102ea2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102ea6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102ea8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102eaa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102eac:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8102eae:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102eb2:	6119      	str	r1, [r3, #16]
 8102eb4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8102eb6:	2001      	movs	r0, #1
 8102eb8:	4770      	bx	lr
 8102eba:	bf00      	nop
 8102ebc:	e000ed00 	.word	0xe000ed00

08102ec0 <HAL_GetCurrentCPUID>:
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102ec0:	4b04      	ldr	r3, [pc, #16]	; (8102ed4 <HAL_GetCurrentCPUID+0x14>)
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	f3c3 1303 	ubfx	r3, r3, #4, #4
  {
    return  CM7_CPUID;
  }
  else
  {
    return CM4_CPUID;
 8102ec8:	2b07      	cmp	r3, #7
  }
}
 8102eca:	bf0c      	ite	eq
 8102ecc:	2003      	moveq	r0, #3
 8102ece:	2001      	movne	r0, #1
 8102ed0:	4770      	bx	lr
 8102ed2:	bf00      	nop
 8102ed4:	e000ed00 	.word	0xe000ed00

08102ed8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102ed8:	492b      	ldr	r1, [pc, #172]	; (8102f88 <DMA_CalcBaseAndBitshift+0xb0>)
 8102eda:	6803      	ldr	r3, [r0, #0]
 8102edc:	428b      	cmp	r3, r1
{
 8102ede:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102ee0:	d031      	beq.n	8102f46 <DMA_CalcBaseAndBitshift+0x6e>
 8102ee2:	3118      	adds	r1, #24
 8102ee4:	428b      	cmp	r3, r1
 8102ee6:	d02e      	beq.n	8102f46 <DMA_CalcBaseAndBitshift+0x6e>
 8102ee8:	3118      	adds	r1, #24
 8102eea:	428b      	cmp	r3, r1
 8102eec:	d02b      	beq.n	8102f46 <DMA_CalcBaseAndBitshift+0x6e>
 8102eee:	3118      	adds	r1, #24
 8102ef0:	428b      	cmp	r3, r1
 8102ef2:	d028      	beq.n	8102f46 <DMA_CalcBaseAndBitshift+0x6e>
 8102ef4:	3118      	adds	r1, #24
 8102ef6:	428b      	cmp	r3, r1
 8102ef8:	d035      	beq.n	8102f66 <DMA_CalcBaseAndBitshift+0x8e>
 8102efa:	3118      	adds	r1, #24
 8102efc:	428b      	cmp	r3, r1
 8102efe:	d032      	beq.n	8102f66 <DMA_CalcBaseAndBitshift+0x8e>
 8102f00:	3118      	adds	r1, #24
 8102f02:	428b      	cmp	r3, r1
 8102f04:	d02f      	beq.n	8102f66 <DMA_CalcBaseAndBitshift+0x8e>
 8102f06:	3118      	adds	r1, #24
 8102f08:	428b      	cmp	r3, r1
 8102f0a:	d02c      	beq.n	8102f66 <DMA_CalcBaseAndBitshift+0x8e>
 8102f0c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8102f10:	428b      	cmp	r3, r1
 8102f12:	d018      	beq.n	8102f46 <DMA_CalcBaseAndBitshift+0x6e>
 8102f14:	3118      	adds	r1, #24
 8102f16:	428b      	cmp	r3, r1
 8102f18:	d015      	beq.n	8102f46 <DMA_CalcBaseAndBitshift+0x6e>
 8102f1a:	3118      	adds	r1, #24
 8102f1c:	428b      	cmp	r3, r1
 8102f1e:	d012      	beq.n	8102f46 <DMA_CalcBaseAndBitshift+0x6e>
 8102f20:	3118      	adds	r1, #24
 8102f22:	428b      	cmp	r3, r1
 8102f24:	d00f      	beq.n	8102f46 <DMA_CalcBaseAndBitshift+0x6e>
 8102f26:	3118      	adds	r1, #24
 8102f28:	428b      	cmp	r3, r1
 8102f2a:	d01c      	beq.n	8102f66 <DMA_CalcBaseAndBitshift+0x8e>
 8102f2c:	3118      	adds	r1, #24
 8102f2e:	428b      	cmp	r3, r1
 8102f30:	d019      	beq.n	8102f66 <DMA_CalcBaseAndBitshift+0x8e>
 8102f32:	3118      	adds	r1, #24
 8102f34:	428b      	cmp	r3, r1
 8102f36:	d016      	beq.n	8102f66 <DMA_CalcBaseAndBitshift+0x8e>
 8102f38:	3118      	adds	r1, #24
 8102f3a:	428b      	cmp	r3, r1
 8102f3c:	d013      	beq.n	8102f66 <DMA_CalcBaseAndBitshift+0x8e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8102f3e:	f023 00ff 	bic.w	r0, r3, #255	; 0xff
 8102f42:	6590      	str	r0, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8102f44:	4770      	bx	lr
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8102f46:	4811      	ldr	r0, [pc, #68]	; (8102f8c <DMA_CalcBaseAndBitshift+0xb4>)
 8102f48:	b2d9      	uxtb	r1, r3
 8102f4a:	3910      	subs	r1, #16
 8102f4c:	fba0 0101 	umull	r0, r1, r0, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8102f50:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8102f54:	480e      	ldr	r0, [pc, #56]	; (8102f90 <DMA_CalcBaseAndBitshift+0xb8>)
 8102f56:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8102f58:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8102f5c:	f020 0003 	bic.w	r0, r0, #3
 8102f60:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
 8102f64:	4770      	bx	lr
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8102f66:	4809      	ldr	r0, [pc, #36]	; (8102f8c <DMA_CalcBaseAndBitshift+0xb4>)
 8102f68:	b2d9      	uxtb	r1, r3
 8102f6a:	3910      	subs	r1, #16
 8102f6c:	fba0 0101 	umull	r0, r1, r0, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8102f70:	f3c1 1102 	ubfx	r1, r1, #4, #3
 8102f74:	4806      	ldr	r0, [pc, #24]	; (8102f90 <DMA_CalcBaseAndBitshift+0xb8>)
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8102f76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8102f7a:	5c41      	ldrb	r1, [r0, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8102f7c:	f023 0303 	bic.w	r3, r3, #3
 8102f80:	1d18      	adds	r0, r3, #4
 8102f82:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
}
 8102f86:	4770      	bx	lr
 8102f88:	40020010 	.word	0x40020010
 8102f8c:	aaaaaaab 	.word	0xaaaaaaab
 8102f90:	0810a0e4 	.word	0x0810a0e4

08102f94 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102f94:	4a22      	ldr	r2, [pc, #136]	; (8103020 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8102f96:	6803      	ldr	r3, [r0, #0]
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102f98:	4293      	cmp	r3, r2
{
 8102f9a:	b410      	push	{r4}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102f9c:	d029      	beq.n	8102ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102f9e:	3214      	adds	r2, #20
 8102fa0:	4293      	cmp	r3, r2
 8102fa2:	d026      	beq.n	8102ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102fa4:	3214      	adds	r2, #20
 8102fa6:	4293      	cmp	r3, r2
 8102fa8:	d023      	beq.n	8102ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102faa:	3214      	adds	r2, #20
 8102fac:	4293      	cmp	r3, r2
 8102fae:	d020      	beq.n	8102ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102fb0:	3214      	adds	r2, #20
 8102fb2:	4293      	cmp	r3, r2
 8102fb4:	d01d      	beq.n	8102ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102fb6:	3214      	adds	r2, #20
 8102fb8:	4293      	cmp	r3, r2
 8102fba:	d01a      	beq.n	8102ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102fbc:	3214      	adds	r2, #20
 8102fbe:	4293      	cmp	r3, r2
 8102fc0:	d017      	beq.n	8102ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8102fc2:	3214      	adds	r2, #20
 8102fc4:	4293      	cmp	r3, r2
 8102fc6:	d014      	beq.n	8102ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8102fc8:	4916      	ldr	r1, [pc, #88]	; (8103024 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8102fca:	4c17      	ldr	r4, [pc, #92]	; (8103028 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8102fcc:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8102fce:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8102fd0:	3a10      	subs	r2, #16
 8102fd2:	fba4 4202 	umull	r4, r2, r4, r2
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8102fd6:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8102fd8:	ea4f 1312 	mov.w	r3, r2, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8102fdc:	d800      	bhi.n	8102fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
 8102fde:	3308      	adds	r3, #8
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8102fe0:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8102fe4:	4c11      	ldr	r4, [pc, #68]	; (810302c <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8102fe6:	f502 4202 	add.w	r2, r2, #33280	; 0x8200
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8102fea:	f003 031f 	and.w	r3, r3, #31
 8102fee:	2101      	movs	r1, #1
 8102ff0:	e00d      	b.n	810300e <DMA_CalcDMAMUXChannelBaseAndMask+0x7a>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8102ff2:	4a0f      	ldr	r2, [pc, #60]	; (8103030 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8102ff4:	4c0f      	ldr	r4, [pc, #60]	; (8103034 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8102ff6:	b2db      	uxtb	r3, r3
 8102ff8:	3b08      	subs	r3, #8
 8102ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8102ffe:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8103000:	f103 52b0 	add.w	r2, r3, #369098752	; 0x16000000
 8103004:	f502 4216 	add.w	r2, r2, #38400	; 0x9600
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103008:	f003 031f 	and.w	r3, r3, #31
 810300c:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810300e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103010:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8103014:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8103018:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 810301a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810301e:	4770      	bx	lr
 8103020:	58025408 	.word	0x58025408
 8103024:	bffdfbf0 	.word	0xbffdfbf0
 8103028:	aaaaaaab 	.word	0xaaaaaaab
 810302c:	40020880 	.word	0x40020880
 8103030:	cccccccd 	.word	0xcccccccd
 8103034:	58025880 	.word	0x58025880

08103038 <HAL_DMA_Init>:
{
 8103038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810303a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 810303c:	f7ff fd5e 	bl	8102afc <HAL_GetTick>
  if(hdma == NULL)
 8103040:	2c00      	cmp	r4, #0
 8103042:	f000 8141 	beq.w	81032c8 <HAL_DMA_Init+0x290>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103046:	6823      	ldr	r3, [r4, #0]
 8103048:	4aa0      	ldr	r2, [pc, #640]	; (81032cc <HAL_DMA_Init+0x294>)
 810304a:	4293      	cmp	r3, r2
 810304c:	4605      	mov	r5, r0
 810304e:	d054      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 8103050:	3218      	adds	r2, #24
 8103052:	4293      	cmp	r3, r2
 8103054:	d051      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 8103056:	3218      	adds	r2, #24
 8103058:	4293      	cmp	r3, r2
 810305a:	d04e      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 810305c:	3218      	adds	r2, #24
 810305e:	4293      	cmp	r3, r2
 8103060:	d04b      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 8103062:	3218      	adds	r2, #24
 8103064:	4293      	cmp	r3, r2
 8103066:	d048      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 8103068:	3218      	adds	r2, #24
 810306a:	4293      	cmp	r3, r2
 810306c:	d045      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 810306e:	3218      	adds	r2, #24
 8103070:	4293      	cmp	r3, r2
 8103072:	d042      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 8103074:	3218      	adds	r2, #24
 8103076:	4293      	cmp	r3, r2
 8103078:	d03f      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 810307a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 810307e:	4293      	cmp	r3, r2
 8103080:	d03b      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 8103082:	3218      	adds	r2, #24
 8103084:	4293      	cmp	r3, r2
 8103086:	d038      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 8103088:	3218      	adds	r2, #24
 810308a:	4293      	cmp	r3, r2
 810308c:	d035      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 810308e:	3218      	adds	r2, #24
 8103090:	4293      	cmp	r3, r2
 8103092:	d032      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 8103094:	3218      	adds	r2, #24
 8103096:	4293      	cmp	r3, r2
 8103098:	d02f      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 810309a:	3218      	adds	r2, #24
 810309c:	4293      	cmp	r3, r2
 810309e:	d02c      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 81030a0:	3218      	adds	r2, #24
 81030a2:	4293      	cmp	r3, r2
 81030a4:	d029      	beq.n	81030fa <HAL_DMA_Init+0xc2>
 81030a6:	3218      	adds	r2, #24
 81030a8:	4293      	cmp	r3, r2
 81030aa:	d026      	beq.n	81030fa <HAL_DMA_Init+0xc2>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81030ac:	4a88      	ldr	r2, [pc, #544]	; (81032d0 <HAL_DMA_Init+0x298>)
 81030ae:	4293      	cmp	r3, r2
 81030b0:	f000 8175 	beq.w	810339e <HAL_DMA_Init+0x366>
 81030b4:	4a87      	ldr	r2, [pc, #540]	; (81032d4 <HAL_DMA_Init+0x29c>)
 81030b6:	4293      	cmp	r3, r2
 81030b8:	f000 8171 	beq.w	810339e <HAL_DMA_Init+0x366>
 81030bc:	3214      	adds	r2, #20
 81030be:	4293      	cmp	r3, r2
 81030c0:	f000 816d 	beq.w	810339e <HAL_DMA_Init+0x366>
 81030c4:	3214      	adds	r2, #20
 81030c6:	4293      	cmp	r3, r2
 81030c8:	f000 8169 	beq.w	810339e <HAL_DMA_Init+0x366>
 81030cc:	3214      	adds	r2, #20
 81030ce:	4293      	cmp	r3, r2
 81030d0:	f000 8165 	beq.w	810339e <HAL_DMA_Init+0x366>
 81030d4:	3214      	adds	r2, #20
 81030d6:	4293      	cmp	r3, r2
 81030d8:	f000 8161 	beq.w	810339e <HAL_DMA_Init+0x366>
 81030dc:	3214      	adds	r2, #20
 81030de:	4293      	cmp	r3, r2
 81030e0:	f000 815d 	beq.w	810339e <HAL_DMA_Init+0x366>
 81030e4:	3214      	adds	r2, #20
 81030e6:	4293      	cmp	r3, r2
 81030e8:	f000 8159 	beq.w	810339e <HAL_DMA_Init+0x366>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81030ec:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 81030ee:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81030f0:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81030f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 81030f6:	2001      	movs	r0, #1
}
 81030f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 81030fa:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 81030fc:	2100      	movs	r1, #0
 81030fe:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8103102:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8103106:	681a      	ldr	r2, [r3, #0]
 8103108:	f022 0201 	bic.w	r2, r2, #1
 810310c:	601a      	str	r2, [r3, #0]
 810310e:	e006      	b.n	810311e <HAL_DMA_Init+0xe6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103110:	f7ff fcf4 	bl	8102afc <HAL_GetTick>
 8103114:	1b43      	subs	r3, r0, r5
 8103116:	2b05      	cmp	r3, #5
 8103118:	f200 80bd 	bhi.w	8103296 <HAL_DMA_Init+0x25e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 810311c:	6823      	ldr	r3, [r4, #0]
 810311e:	681a      	ldr	r2, [r3, #0]
 8103120:	07d6      	lsls	r6, r2, #31
 8103122:	d4f5      	bmi.n	8103110 <HAL_DMA_Init+0xd8>
    registerValue |=  hdma->Init.Direction           |
 8103124:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103128:	6920      	ldr	r0, [r4, #16]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 810312a:	681d      	ldr	r5, [r3, #0]
    registerValue |=  hdma->Init.Direction           |
 810312c:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810312e:	4302      	orrs	r2, r0
 8103130:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103132:	69a1      	ldr	r1, [r4, #24]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103134:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103136:	69e0      	ldr	r0, [r4, #28]
 8103138:	430a      	orrs	r2, r1
 810313a:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810313c:	4866      	ldr	r0, [pc, #408]	; (81032d8 <HAL_DMA_Init+0x2a0>)
 810313e:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8103140:	6a25      	ldr	r5, [r4, #32]
 8103142:	432a      	orrs	r2, r5
    registerValue |=  hdma->Init.Direction           |
 8103144:	4302      	orrs	r2, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103146:	4865      	ldr	r0, [pc, #404]	; (81032dc <HAL_DMA_Init+0x2a4>)
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103148:	6a65      	ldr	r5, [r4, #36]	; 0x24
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810314a:	6800      	ldr	r0, [r0, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810314c:	2d04      	cmp	r5, #4
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810314e:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8103152:	ea4f 4000 	mov.w	r0, r0, lsl #16
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103156:	f000 80c5 	beq.w	81032e4 <HAL_DMA_Init+0x2ac>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 810315a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 810315e:	d277      	bcs.n	8103250 <HAL_DMA_Init+0x218>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103160:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103162:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103164:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8103168:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810316a:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810316c:	4620      	mov	r0, r4
 810316e:	f7ff feb3 	bl	8102ed8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103172:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8103174:	f003 021f 	and.w	r2, r3, #31
 8103178:	233f      	movs	r3, #63	; 0x3f
 810317a:	4093      	lsls	r3, r2
 810317c:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810317e:	6823      	ldr	r3, [r4, #0]
 8103180:	4a52      	ldr	r2, [pc, #328]	; (81032cc <HAL_DMA_Init+0x294>)
 8103182:	4293      	cmp	r3, r2
 8103184:	d045      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 8103186:	3218      	adds	r2, #24
 8103188:	4293      	cmp	r3, r2
 810318a:	d042      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 810318c:	3218      	adds	r2, #24
 810318e:	4293      	cmp	r3, r2
 8103190:	d03f      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 8103192:	3218      	adds	r2, #24
 8103194:	4293      	cmp	r3, r2
 8103196:	d03c      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 8103198:	3218      	adds	r2, #24
 810319a:	4293      	cmp	r3, r2
 810319c:	d039      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 810319e:	3218      	adds	r2, #24
 81031a0:	4293      	cmp	r3, r2
 81031a2:	d036      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031a4:	3218      	adds	r2, #24
 81031a6:	4293      	cmp	r3, r2
 81031a8:	d033      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031aa:	3218      	adds	r2, #24
 81031ac:	4293      	cmp	r3, r2
 81031ae:	d030      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031b0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 81031b4:	4293      	cmp	r3, r2
 81031b6:	d02c      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031b8:	3218      	adds	r2, #24
 81031ba:	4293      	cmp	r3, r2
 81031bc:	d029      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031be:	3218      	adds	r2, #24
 81031c0:	4293      	cmp	r3, r2
 81031c2:	d026      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031c4:	3218      	adds	r2, #24
 81031c6:	4293      	cmp	r3, r2
 81031c8:	d023      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031ca:	3218      	adds	r2, #24
 81031cc:	4293      	cmp	r3, r2
 81031ce:	d020      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031d0:	3218      	adds	r2, #24
 81031d2:	4293      	cmp	r3, r2
 81031d4:	d01d      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031d6:	3218      	adds	r2, #24
 81031d8:	4293      	cmp	r3, r2
 81031da:	d01a      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031dc:	3218      	adds	r2, #24
 81031de:	4293      	cmp	r3, r2
 81031e0:	d017      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031e2:	4a3b      	ldr	r2, [pc, #236]	; (81032d0 <HAL_DMA_Init+0x298>)
 81031e4:	4293      	cmp	r3, r2
 81031e6:	d014      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031e8:	3214      	adds	r2, #20
 81031ea:	4293      	cmp	r3, r2
 81031ec:	d011      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031ee:	3214      	adds	r2, #20
 81031f0:	4293      	cmp	r3, r2
 81031f2:	d00e      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031f4:	3214      	adds	r2, #20
 81031f6:	4293      	cmp	r3, r2
 81031f8:	d00b      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 81031fa:	3214      	adds	r2, #20
 81031fc:	4293      	cmp	r3, r2
 81031fe:	d008      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 8103200:	3214      	adds	r2, #20
 8103202:	4293      	cmp	r3, r2
 8103204:	d005      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 8103206:	3214      	adds	r2, #20
 8103208:	4293      	cmp	r3, r2
 810320a:	d002      	beq.n	8103212 <HAL_DMA_Init+0x1da>
 810320c:	3214      	adds	r2, #20
 810320e:	4293      	cmp	r3, r2
 8103210:	d118      	bne.n	8103244 <HAL_DMA_Init+0x20c>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8103212:	4620      	mov	r0, r4
 8103214:	f7ff febe 	bl	8102f94 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8103218:	68a3      	ldr	r3, [r4, #8]
 810321a:	2b80      	cmp	r3, #128	; 0x80
 810321c:	d048      	beq.n	81032b0 <HAL_DMA_Init+0x278>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 810321e:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103220:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8103222:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8103226:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103228:	3b01      	subs	r3, #1
 810322a:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 810322c:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810322e:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8103230:	d845      	bhi.n	81032be <HAL_DMA_Init+0x286>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8103232:	1e50      	subs	r0, r2, #1
 8103234:	2807      	cmp	r0, #7
 8103236:	d965      	bls.n	8103304 <HAL_DMA_Init+0x2cc>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103238:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 810323c:	6f62      	ldr	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 810323e:	2000      	movs	r0, #0
 8103240:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103242:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103244:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8103246:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103248:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 810324a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 810324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103250:	6860      	ldr	r0, [r4, #4]
 8103252:	f1a0 0629 	sub.w	r6, r0, #41	; 0x29
 8103256:	2e1f      	cmp	r6, #31
 8103258:	d924      	bls.n	81032a4 <HAL_DMA_Init+0x26c>
 810325a:	384f      	subs	r0, #79	; 0x4f
 810325c:	2803      	cmp	r0, #3
 810325e:	d801      	bhi.n	8103264 <HAL_DMA_Init+0x22c>
        registerValue |= DMA_SxCR_TRBUFF;
 8103260:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103264:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103266:	695a      	ldr	r2, [r3, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103268:	2d04      	cmp	r5, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 810326a:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 810326e:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103272:	f47f af7a 	bne.w	810316a <HAL_DMA_Init+0x132>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8103278:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 810327a:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 810327c:	2e00      	cmp	r6, #0
 810327e:	f43f af74 	beq.w	810316a <HAL_DMA_Init+0x132>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8103282:	2900      	cmp	r1, #0
 8103284:	d166      	bne.n	8103354 <HAL_DMA_Init+0x31c>
    switch (hdma->Init.FIFOThreshold)
 8103286:	2801      	cmp	r0, #1
 8103288:	f000 8084 	beq.w	8103394 <HAL_DMA_Init+0x35c>
 810328c:	f030 0102 	bics.w	r1, r0, #2
 8103290:	f47f af6b 	bne.w	810316a <HAL_DMA_Init+0x132>
 8103294:	e066      	b.n	8103364 <HAL_DMA_Init+0x32c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103296:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8103298:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 810329a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 810329c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 81032a0:	2001      	movs	r0, #1
}
 81032a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81032a4:	480e      	ldr	r0, [pc, #56]	; (81032e0 <HAL_DMA_Init+0x2a8>)
 81032a6:	fa20 f606 	lsr.w	r6, r0, r6
 81032aa:	07f0      	lsls	r0, r6, #31
 81032ac:	d5da      	bpl.n	8103264 <HAL_DMA_Init+0x22c>
 81032ae:	e7d7      	b.n	8103260 <HAL_DMA_Init+0x228>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81032b0:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
 81032b4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81032b6:	2300      	movs	r3, #0
 81032b8:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81032ba:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81032bc:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 81032be:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 81032c0:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81032c4:	6763      	str	r3, [r4, #116]	; 0x74
 81032c6:	e7bd      	b.n	8103244 <HAL_DMA_Init+0x20c>
    return HAL_ERROR;
 81032c8:	2001      	movs	r0, #1
}
 81032ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81032cc:	40020010 	.word	0x40020010
 81032d0:	58025408 	.word	0x58025408
 81032d4:	5802541c 	.word	0x5802541c
 81032d8:	fe10803f 	.word	0xfe10803f
 81032dc:	5c001000 	.word	0x5c001000
 81032e0:	c3c0003f 	.word	0xc3c0003f
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81032e4:	e9d4 670b 	ldrd	r6, r7, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81032e8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81032ec:	ea46 0c07 	orr.w	ip, r6, r7
 81032f0:	ea42 020c 	orr.w	r2, r2, ip
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81032f4:	d2ac      	bcs.n	8103250 <HAL_DMA_Init+0x218>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81032f6:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81032f8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81032fa:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 81032fe:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103302:	e7b9      	b.n	8103278 <HAL_DMA_Init+0x240>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103304:	6823      	ldr	r3, [r4, #0]
 8103306:	4943      	ldr	r1, [pc, #268]	; (8103414 <HAL_DMA_Init+0x3dc>)
 8103308:	428b      	cmp	r3, r1
 810330a:	d019      	beq.n	8103340 <HAL_DMA_Init+0x308>
 810330c:	3114      	adds	r1, #20
 810330e:	428b      	cmp	r3, r1
 8103310:	d016      	beq.n	8103340 <HAL_DMA_Init+0x308>
 8103312:	3114      	adds	r1, #20
 8103314:	428b      	cmp	r3, r1
 8103316:	d013      	beq.n	8103340 <HAL_DMA_Init+0x308>
 8103318:	3114      	adds	r1, #20
 810331a:	428b      	cmp	r3, r1
 810331c:	d010      	beq.n	8103340 <HAL_DMA_Init+0x308>
 810331e:	3114      	adds	r1, #20
 8103320:	428b      	cmp	r3, r1
 8103322:	d00d      	beq.n	8103340 <HAL_DMA_Init+0x308>
 8103324:	3114      	adds	r1, #20
 8103326:	428b      	cmp	r3, r1
 8103328:	d00a      	beq.n	8103340 <HAL_DMA_Init+0x308>
 810332a:	3114      	adds	r1, #20
 810332c:	428b      	cmp	r3, r1
 810332e:	d007      	beq.n	8103340 <HAL_DMA_Init+0x308>
 8103330:	3114      	adds	r1, #20
 8103332:	428b      	cmp	r3, r1
 8103334:	d004      	beq.n	8103340 <HAL_DMA_Init+0x308>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8103336:	4b38      	ldr	r3, [pc, #224]	; (8103418 <HAL_DMA_Init+0x3e0>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8103338:	4938      	ldr	r1, [pc, #224]	; (810341c <HAL_DMA_Init+0x3e4>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 810333a:	4413      	add	r3, r2
 810333c:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 810333e:	e003      	b.n	8103348 <HAL_DMA_Init+0x310>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8103340:	4b37      	ldr	r3, [pc, #220]	; (8103420 <HAL_DMA_Init+0x3e8>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8103342:	4938      	ldr	r1, [pc, #224]	; (8103424 <HAL_DMA_Init+0x3ec>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8103344:	4413      	add	r3, r2
 8103346:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8103348:	2201      	movs	r2, #1
 810334a:	4082      	lsls	r2, r0
 810334c:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8103350:	6762      	str	r2, [r4, #116]	; 0x74
 8103352:	e774      	b.n	810323e <HAL_DMA_Init+0x206>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8103354:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8103358:	d00e      	beq.n	8103378 <HAL_DMA_Init+0x340>
    switch (hdma->Init.FIFOThreshold)
 810335a:	2802      	cmp	r0, #2
 810335c:	d905      	bls.n	810336a <HAL_DMA_Init+0x332>
 810335e:	2803      	cmp	r0, #3
 8103360:	f47f af03 	bne.w	810316a <HAL_DMA_Init+0x132>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8103364:	01f1      	lsls	r1, r6, #7
 8103366:	f57f af00 	bpl.w	810316a <HAL_DMA_Init+0x132>
          hdma->State = HAL_DMA_STATE_READY;
 810336a:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810336c:	2240      	movs	r2, #64	; 0x40
 810336e:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8103370:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 8103374:	4618      	mov	r0, r3
}
 8103376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8103378:	2803      	cmp	r0, #3
 810337a:	f63f aef6 	bhi.w	810316a <HAL_DMA_Init+0x132>
 810337e:	a101      	add	r1, pc, #4	; (adr r1, 8103384 <HAL_DMA_Init+0x34c>)
 8103380:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8103384:	0810336b 	.word	0x0810336b
 8103388:	08103365 	.word	0x08103365
 810338c:	0810336b 	.word	0x0810336b
 8103390:	08103395 	.word	0x08103395
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8103394:	f1b6 7fc0 	cmp.w	r6, #25165824	; 0x1800000
 8103398:	f47f aee7 	bne.w	810316a <HAL_DMA_Init+0x132>
 810339c:	e7e5      	b.n	810336a <HAL_DMA_Init+0x332>
    __HAL_UNLOCK(hdma);
 810339e:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 81033a0:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 81033a2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 81033a6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 81033aa:	6818      	ldr	r0, [r3, #0]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81033ac:	68a1      	ldr	r1, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81033ae:	f420 30ff 	bic.w	r0, r0, #130560	; 0x1fe00
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81033b2:	2940      	cmp	r1, #64	; 0x40
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 81033b4:	f420 70f8 	bic.w	r0, r0, #496	; 0x1f0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81033b8:	d02a      	beq.n	8103410 <HAL_DMA_Init+0x3d8>
 81033ba:	2980      	cmp	r1, #128	; 0x80
 81033bc:	bf0c      	ite	eq
 81033be:	f44f 4580 	moveq.w	r5, #16384	; 0x4000
 81033c2:	2500      	movne	r5, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81033c4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 81033c8:	08d2      	lsrs	r2, r2, #3
 81033ca:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81033ce:	6961      	ldr	r1, [r4, #20]
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81033d0:	6a26      	ldr	r6, [r4, #32]
 81033d2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81033d6:	69a1      	ldr	r1, [r4, #24]
 81033d8:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81033dc:	69e1      	ldr	r1, [r4, #28]
 81033de:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 81033e2:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81033e6:	4910      	ldr	r1, [pc, #64]	; (8103428 <HAL_DMA_Init+0x3f0>)
 81033e8:	4302      	orrs	r2, r0
 81033ea:	4810      	ldr	r0, [pc, #64]	; (810342c <HAL_DMA_Init+0x3f4>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81033ec:	432a      	orrs	r2, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81033ee:	4419      	add	r1, r3
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81033f0:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81033f2:	fba0 2301 	umull	r2, r3, r0, r1
 81033f6:	091b      	lsrs	r3, r3, #4
 81033f8:	009b      	lsls	r3, r3, #2
 81033fa:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81033fc:	4620      	mov	r0, r4
 81033fe:	f7ff fd6b 	bl	8102ed8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103402:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8103404:	f003 021f 	and.w	r2, r3, #31
 8103408:	2301      	movs	r3, #1
 810340a:	4093      	lsls	r3, r2
 810340c:	6043      	str	r3, [r0, #4]
 810340e:	e6b6      	b.n	810317e <HAL_DMA_Init+0x146>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103410:	2510      	movs	r5, #16
 8103412:	e7d7      	b.n	81033c4 <HAL_DMA_Init+0x38c>
 8103414:	58025408 	.word	0x58025408
 8103418:	1000823f 	.word	0x1000823f
 810341c:	40020940 	.word	0x40020940
 8103420:	1600963f 	.word	0x1600963f
 8103424:	58025940 	.word	0x58025940
 8103428:	a7fdabf8 	.word	0xa7fdabf8
 810342c:	cccccccd 	.word	0xcccccccd

08103430 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8103430:	2800      	cmp	r0, #0
 8103432:	f000 811a 	beq.w	810366a <HAL_DMA_Start_IT+0x23a>
{
 8103436:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8103438:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 810343c:	2c01      	cmp	r4, #1
 810343e:	f000 8116 	beq.w	810366e <HAL_DMA_Start_IT+0x23e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8103442:	f890 5035 	ldrb.w	r5, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8103446:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8103448:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 810344a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 810344e:	d007      	beq.n	8103460 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);
 8103450:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8103452:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8103456:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 810345a:	6543      	str	r3, [r0, #84]	; 0x54
    status = HAL_ERROR;
 810345c:	4620      	mov	r0, r4
}
 810345e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8103460:	2402      	movs	r4, #2
 8103462:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103466:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8103468:	4da3      	ldr	r5, [pc, #652]	; (81036f8 <HAL_DMA_Start_IT+0x2c8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810346a:	6544      	str	r4, [r0, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 810346c:	6804      	ldr	r4, [r0, #0]
 810346e:	42ac      	cmp	r4, r5
 8103470:	f000 808a 	beq.w	8103588 <HAL_DMA_Start_IT+0x158>
 8103474:	3518      	adds	r5, #24
 8103476:	42ac      	cmp	r4, r5
 8103478:	f000 8154 	beq.w	8103724 <HAL_DMA_Start_IT+0x2f4>
 810347c:	3518      	adds	r5, #24
 810347e:	42ac      	cmp	r4, r5
 8103480:	f000 81fc 	beq.w	810387c <HAL_DMA_Start_IT+0x44c>
 8103484:	3518      	adds	r5, #24
 8103486:	42ac      	cmp	r4, r5
 8103488:	f000 81ff 	beq.w	810388a <HAL_DMA_Start_IT+0x45a>
 810348c:	3518      	adds	r5, #24
 810348e:	42ac      	cmp	r4, r5
 8103490:	f000 81cd 	beq.w	810382e <HAL_DMA_Start_IT+0x3fe>
 8103494:	3518      	adds	r5, #24
 8103496:	42ac      	cmp	r4, r5
 8103498:	f000 820e 	beq.w	81038b8 <HAL_DMA_Start_IT+0x488>
 810349c:	3518      	adds	r5, #24
 810349e:	42ac      	cmp	r4, r5
 81034a0:	f000 8229 	beq.w	81038f6 <HAL_DMA_Start_IT+0x4c6>
 81034a4:	3518      	adds	r5, #24
 81034a6:	42ac      	cmp	r4, r5
 81034a8:	f000 8242 	beq.w	8103930 <HAL_DMA_Start_IT+0x500>
 81034ac:	f505 7556 	add.w	r5, r5, #856	; 0x358
 81034b0:	42ac      	cmp	r4, r5
 81034b2:	f000 8246 	beq.w	8103942 <HAL_DMA_Start_IT+0x512>
 81034b6:	3518      	adds	r5, #24
 81034b8:	42ac      	cmp	r4, r5
 81034ba:	f000 8256 	beq.w	810396a <HAL_DMA_Start_IT+0x53a>
 81034be:	3518      	adds	r5, #24
 81034c0:	42ac      	cmp	r4, r5
 81034c2:	f000 825d 	beq.w	8103980 <HAL_DMA_Start_IT+0x550>
 81034c6:	3518      	adds	r5, #24
 81034c8:	42ac      	cmp	r4, r5
 81034ca:	f000 8262 	beq.w	8103992 <HAL_DMA_Start_IT+0x562>
 81034ce:	3518      	adds	r5, #24
 81034d0:	42ac      	cmp	r4, r5
 81034d2:	f000 8265 	beq.w	81039a0 <HAL_DMA_Start_IT+0x570>
 81034d6:	3518      	adds	r5, #24
 81034d8:	42ac      	cmp	r4, r5
 81034da:	f000 8272 	beq.w	81039c2 <HAL_DMA_Start_IT+0x592>
 81034de:	3518      	adds	r5, #24
 81034e0:	42ac      	cmp	r4, r5
 81034e2:	f000 827f 	beq.w	81039e4 <HAL_DMA_Start_IT+0x5b4>
 81034e6:	3518      	adds	r5, #24
 81034e8:	42ac      	cmp	r4, r5
 81034ea:	f000 828a 	beq.w	8103a02 <HAL_DMA_Start_IT+0x5d2>
 81034ee:	6825      	ldr	r5, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81034f0:	f8d0 e058 	ldr.w	lr, [r0, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 81034f4:	f025 0501 	bic.w	r5, r5, #1
 81034f8:	6025      	str	r5, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81034fa:	4d80      	ldr	r5, [pc, #512]	; (81036fc <HAL_DMA_Start_IT+0x2cc>)
 81034fc:	42ac      	cmp	r4, r5
 81034fe:	f000 8258 	beq.w	81039b2 <HAL_DMA_Start_IT+0x582>
 8103502:	3514      	adds	r5, #20
 8103504:	42ac      	cmp	r4, r5
 8103506:	f000 8254 	beq.w	81039b2 <HAL_DMA_Start_IT+0x582>
 810350a:	3514      	adds	r5, #20
 810350c:	42ac      	cmp	r4, r5
 810350e:	f000 8250 	beq.w	81039b2 <HAL_DMA_Start_IT+0x582>
 8103512:	3514      	adds	r5, #20
 8103514:	42ac      	cmp	r4, r5
 8103516:	f000 824c 	beq.w	81039b2 <HAL_DMA_Start_IT+0x582>
 810351a:	3514      	adds	r5, #20
 810351c:	42ac      	cmp	r4, r5
 810351e:	f000 8248 	beq.w	81039b2 <HAL_DMA_Start_IT+0x582>
 8103522:	3514      	adds	r5, #20
 8103524:	42ac      	cmp	r4, r5
 8103526:	f000 8244 	beq.w	81039b2 <HAL_DMA_Start_IT+0x582>
 810352a:	3514      	adds	r5, #20
 810352c:	42ac      	cmp	r4, r5
 810352e:	f000 8240 	beq.w	81039b2 <HAL_DMA_Start_IT+0x582>
 8103532:	3514      	adds	r5, #20
 8103534:	42ac      	cmp	r4, r5
 8103536:	f000 823c 	beq.w	81039b2 <HAL_DMA_Start_IT+0x582>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 810353a:	6823      	ldr	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 810353c:	6c02      	ldr	r2, [r0, #64]	; 0x40
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 810353e:	f023 030e 	bic.w	r3, r3, #14
 8103542:	f043 030a 	orr.w	r3, r3, #10
 8103546:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8103548:	b11a      	cbz	r2, 8103552 <HAL_DMA_Start_IT+0x122>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 810354a:	6823      	ldr	r3, [r4, #0]
 810354c:	f043 0304 	orr.w	r3, r3, #4
 8103550:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103552:	4b6a      	ldr	r3, [pc, #424]	; (81036fc <HAL_DMA_Start_IT+0x2cc>)
 8103554:	429c      	cmp	r4, r3
 8103556:	d015      	beq.n	8103584 <HAL_DMA_Start_IT+0x154>
 8103558:	4b69      	ldr	r3, [pc, #420]	; (8103700 <HAL_DMA_Start_IT+0x2d0>)
 810355a:	429c      	cmp	r4, r3
 810355c:	d012      	beq.n	8103584 <HAL_DMA_Start_IT+0x154>
 810355e:	4b69      	ldr	r3, [pc, #420]	; (8103704 <HAL_DMA_Start_IT+0x2d4>)
 8103560:	429c      	cmp	r4, r3
 8103562:	d00f      	beq.n	8103584 <HAL_DMA_Start_IT+0x154>
 8103564:	4b68      	ldr	r3, [pc, #416]	; (8103708 <HAL_DMA_Start_IT+0x2d8>)
 8103566:	429c      	cmp	r4, r3
 8103568:	d00c      	beq.n	8103584 <HAL_DMA_Start_IT+0x154>
 810356a:	4b68      	ldr	r3, [pc, #416]	; (810370c <HAL_DMA_Start_IT+0x2dc>)
 810356c:	429c      	cmp	r4, r3
 810356e:	d009      	beq.n	8103584 <HAL_DMA_Start_IT+0x154>
 8103570:	4b67      	ldr	r3, [pc, #412]	; (8103710 <HAL_DMA_Start_IT+0x2e0>)
 8103572:	429c      	cmp	r4, r3
 8103574:	d006      	beq.n	8103584 <HAL_DMA_Start_IT+0x154>
 8103576:	4b67      	ldr	r3, [pc, #412]	; (8103714 <HAL_DMA_Start_IT+0x2e4>)
 8103578:	429c      	cmp	r4, r3
 810357a:	d003      	beq.n	8103584 <HAL_DMA_Start_IT+0x154>
 810357c:	4b66      	ldr	r3, [pc, #408]	; (8103718 <HAL_DMA_Start_IT+0x2e8>)
 810357e:	429c      	cmp	r4, r3
 8103580:	f040 80b3 	bne.w	81036ea <HAL_DMA_Start_IT+0x2ba>
 8103584:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8103586:	e081      	b.n	810368c <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 8103588:	4e64      	ldr	r6, [pc, #400]	; (810371c <HAL_DMA_Start_IT+0x2ec>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810358a:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 810358c:	6935      	ldr	r5, [r6, #16]
 810358e:	f025 0501 	bic.w	r5, r5, #1
 8103592:	6135      	str	r5, [r6, #16]
    if(hdma->DMAmuxRequestGen != 0U)
 8103594:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103596:	6e86      	ldr	r6, [r0, #104]	; 0x68
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103598:	f8d0 e058 	ldr.w	lr, [r0, #88]	; 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810359c:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 810359e:	b115      	cbz	r5, 81035a6 <HAL_DMA_Start_IT+0x176>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81035a0:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	; 0x70
 81035a4:	6077      	str	r7, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81035a6:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 81035a8:	f007 0c1f 	and.w	ip, r7, #31
 81035ac:	273f      	movs	r7, #63	; 0x3f
 81035ae:	fa07 f70c 	lsl.w	r7, r7, ip
 81035b2:	f8ce 7008 	str.w	r7, [lr, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 81035b6:	6826      	ldr	r6, [r4, #0]
 81035b8:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 81035bc:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 81035be:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81035c0:	6883      	ldr	r3, [r0, #8]
 81035c2:	2b40      	cmp	r3, #64	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81035c4:	4b4c      	ldr	r3, [pc, #304]	; (81036f8 <HAL_DMA_Start_IT+0x2c8>)
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 81035c6:	bf0b      	itete	eq
 81035c8:	60a2      	streq	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 81035ca:	60a1      	strne	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 81035cc:	60e1      	streq	r1, [r4, #12]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81035ce:	60e2      	strne	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81035d0:	429c      	cmp	r4, r3
 81035d2:	d04e      	beq.n	8103672 <HAL_DMA_Start_IT+0x242>
 81035d4:	3318      	adds	r3, #24
 81035d6:	429c      	cmp	r4, r3
 81035d8:	f000 8119 	beq.w	810380e <HAL_DMA_Start_IT+0x3de>
 81035dc:	3318      	adds	r3, #24
 81035de:	429c      	cmp	r4, r3
 81035e0:	f000 813c 	beq.w	810385c <HAL_DMA_Start_IT+0x42c>
 81035e4:	3318      	adds	r3, #24
 81035e6:	429c      	cmp	r4, r3
 81035e8:	f000 8156 	beq.w	8103898 <HAL_DMA_Start_IT+0x468>
 81035ec:	3318      	adds	r3, #24
 81035ee:	429c      	cmp	r4, r3
 81035f0:	f000 8124 	beq.w	810383c <HAL_DMA_Start_IT+0x40c>
 81035f4:	3318      	adds	r3, #24
 81035f6:	429c      	cmp	r4, r3
 81035f8:	f000 8167 	beq.w	81038ca <HAL_DMA_Start_IT+0x49a>
 81035fc:	3318      	adds	r3, #24
 81035fe:	429c      	cmp	r4, r3
 8103600:	f000 8177 	beq.w	81038f2 <HAL_DMA_Start_IT+0x4c2>
 8103604:	3318      	adds	r3, #24
 8103606:	429c      	cmp	r4, r3
 8103608:	f000 817e 	beq.w	8103908 <HAL_DMA_Start_IT+0x4d8>
 810360c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8103610:	429c      	cmp	r4, r3
 8103612:	f000 819d 	beq.w	8103950 <HAL_DMA_Start_IT+0x520>
 8103616:	3318      	adds	r3, #24
 8103618:	429c      	cmp	r4, r3
 810361a:	f000 81ad 	beq.w	8103978 <HAL_DMA_Start_IT+0x548>
 810361e:	3318      	adds	r3, #24
 8103620:	429c      	cmp	r4, r3
 8103622:	f000 81ab 	beq.w	810397c <HAL_DMA_Start_IT+0x54c>
 8103626:	3318      	adds	r3, #24
 8103628:	429c      	cmp	r4, r3
 810362a:	f000 81b0 	beq.w	810398e <HAL_DMA_Start_IT+0x55e>
 810362e:	3318      	adds	r3, #24
 8103630:	429c      	cmp	r4, r3
 8103632:	f000 81bc 	beq.w	81039ae <HAL_DMA_Start_IT+0x57e>
 8103636:	3318      	adds	r3, #24
 8103638:	429c      	cmp	r4, r3
 810363a:	f000 81c4 	beq.w	81039c6 <HAL_DMA_Start_IT+0x596>
 810363e:	3318      	adds	r3, #24
 8103640:	429c      	cmp	r4, r3
 8103642:	f040 81d8 	bne.w	81039f6 <HAL_DMA_Start_IT+0x5c6>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103646:	4a36      	ldr	r2, [pc, #216]	; (8103720 <HAL_DMA_Start_IT+0x2f0>)
 8103648:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 810364c:	f023 031e 	bic.w	r3, r3, #30
 8103650:	f043 0316 	orr.w	r3, r3, #22
 8103654:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8103658:	6c03      	ldr	r3, [r0, #64]	; 0x40
 810365a:	b1bb      	cbz	r3, 810368c <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 810365c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8103660:	f043 0308 	orr.w	r3, r3, #8
 8103664:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103668:	e010      	b.n	810368c <HAL_DMA_Start_IT+0x25c>
    return HAL_ERROR;
 810366a:	2001      	movs	r0, #1
}
 810366c:	4770      	bx	lr
  __HAL_LOCK(hdma);
 810366e:	2002      	movs	r0, #2
}
 8103670:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103672:	4a2a      	ldr	r2, [pc, #168]	; (810371c <HAL_DMA_Start_IT+0x2ec>)
 8103674:	6913      	ldr	r3, [r2, #16]
 8103676:	f023 031e 	bic.w	r3, r3, #30
 810367a:	f043 0316 	orr.w	r3, r3, #22
 810367e:	6113      	str	r3, [r2, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 8103680:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8103682:	b11b      	cbz	r3, 810368c <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103684:	6913      	ldr	r3, [r2, #16]
 8103686:	f043 0308 	orr.w	r3, r3, #8
 810368a:	6113      	str	r3, [r2, #16]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 810368c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 810368e:	681a      	ldr	r2, [r3, #0]
 8103690:	03d2      	lsls	r2, r2, #15
 8103692:	d503      	bpl.n	810369c <HAL_DMA_Start_IT+0x26c>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8103694:	681a      	ldr	r2, [r3, #0]
 8103696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810369a:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 810369c:	b11d      	cbz	r5, 81036a6 <HAL_DMA_Start_IT+0x276>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 810369e:	682b      	ldr	r3, [r5, #0]
 81036a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81036a4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 81036a6:	4b14      	ldr	r3, [pc, #80]	; (81036f8 <HAL_DMA_Start_IT+0x2c8>)
 81036a8:	429c      	cmp	r4, r3
 81036aa:	d01e      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036ac:	3318      	adds	r3, #24
 81036ae:	429c      	cmp	r4, r3
 81036b0:	d01b      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036b2:	3318      	adds	r3, #24
 81036b4:	429c      	cmp	r4, r3
 81036b6:	d018      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036b8:	3318      	adds	r3, #24
 81036ba:	429c      	cmp	r4, r3
 81036bc:	d015      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036be:	3318      	adds	r3, #24
 81036c0:	429c      	cmp	r4, r3
 81036c2:	d012      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036c4:	3318      	adds	r3, #24
 81036c6:	429c      	cmp	r4, r3
 81036c8:	d00f      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036ca:	3318      	adds	r3, #24
 81036cc:	429c      	cmp	r4, r3
 81036ce:	d00c      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036d0:	3318      	adds	r3, #24
 81036d2:	429c      	cmp	r4, r3
 81036d4:	d009      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 81036da:	429c      	cmp	r4, r3
 81036dc:	d005      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036de:	3318      	adds	r3, #24
 81036e0:	429c      	cmp	r4, r3
 81036e2:	d002      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036e4:	3318      	adds	r3, #24
 81036e6:	429c      	cmp	r4, r3
 81036e8:	d0ff      	beq.n	81036ea <HAL_DMA_Start_IT+0x2ba>
 81036ea:	6823      	ldr	r3, [r4, #0]
 81036ec:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 81036f0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 81036f2:	6023      	str	r3, [r4, #0]
}
 81036f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81036f6:	bf00      	nop
 81036f8:	40020010 	.word	0x40020010
 81036fc:	58025408 	.word	0x58025408
 8103700:	5802541c 	.word	0x5802541c
 8103704:	58025430 	.word	0x58025430
 8103708:	58025444 	.word	0x58025444
 810370c:	58025458 	.word	0x58025458
 8103710:	5802546c 	.word	0x5802546c
 8103714:	58025480 	.word	0x58025480
 8103718:	58025494 	.word	0x58025494
 810371c:	40020000 	.word	0x40020000
 8103720:	40020400 	.word	0x40020400
    __HAL_DMA_DISABLE(hdma);
 8103724:	4ea9      	ldr	r6, [pc, #676]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103726:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8103728:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 810372a:	f025 0501 	bic.w	r5, r5, #1
 810372e:	62b5      	str	r5, [r6, #40]	; 0x28
    if(hdma->DMAmuxRequestGen != 0U)
 8103730:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103732:	6e86      	ldr	r6, [r0, #104]	; 0x68
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103734:	f8d0 e058 	ldr.w	lr, [r0, #88]	; 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103738:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 810373a:	2d00      	cmp	r5, #0
 810373c:	f43f af33 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103740:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	; 0x70
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103744:	f8df c298 	ldr.w	ip, [pc, #664]	; 81039e0 <HAL_DMA_Start_IT+0x5b0>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103748:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810374a:	4564      	cmp	r4, ip
 810374c:	f43f af2b 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 8103750:	4f9f      	ldr	r7, [pc, #636]	; (81039d0 <HAL_DMA_Start_IT+0x5a0>)
 8103752:	42bc      	cmp	r4, r7
 8103754:	f43f af27 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 8103758:	3718      	adds	r7, #24
 810375a:	42bc      	cmp	r4, r7
 810375c:	f43f af23 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 8103760:	3718      	adds	r7, #24
 8103762:	42bc      	cmp	r4, r7
 8103764:	f43f af1f 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 8103768:	3718      	adds	r7, #24
 810376a:	42bc      	cmp	r4, r7
 810376c:	f43f af1b 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 8103770:	3718      	adds	r7, #24
 8103772:	42bc      	cmp	r4, r7
 8103774:	f43f af17 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 8103778:	3718      	adds	r7, #24
 810377a:	42bc      	cmp	r4, r7
 810377c:	f43f af13 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 8103780:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8103784:	42bc      	cmp	r4, r7
 8103786:	f43f af0e 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 810378a:	3718      	adds	r7, #24
 810378c:	42bc      	cmp	r4, r7
 810378e:	f43f af0a 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 8103792:	3718      	adds	r7, #24
 8103794:	42bc      	cmp	r4, r7
 8103796:	f43f af06 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 810379a:	3718      	adds	r7, #24
 810379c:	42bc      	cmp	r4, r7
 810379e:	f43f af02 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 81037a2:	3718      	adds	r7, #24
 81037a4:	42bc      	cmp	r4, r7
 81037a6:	f43f aefe 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 81037aa:	3718      	adds	r7, #24
 81037ac:	42bc      	cmp	r4, r7
 81037ae:	f43f aefa 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 81037b2:	3718      	adds	r7, #24
 81037b4:	42bc      	cmp	r4, r7
 81037b6:	f43f aef6 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
 81037ba:	3718      	adds	r7, #24
 81037bc:	42bc      	cmp	r4, r7
 81037be:	f43f aef2 	beq.w	81035a6 <HAL_DMA_Start_IT+0x176>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81037c2:	4d84      	ldr	r5, [pc, #528]	; (81039d4 <HAL_DMA_Start_IT+0x5a4>)
 81037c4:	42ac      	cmp	r4, r5
 81037c6:	d012      	beq.n	81037ee <HAL_DMA_Start_IT+0x3be>
 81037c8:	4d83      	ldr	r5, [pc, #524]	; (81039d8 <HAL_DMA_Start_IT+0x5a8>)
 81037ca:	42ac      	cmp	r4, r5
 81037cc:	d00f      	beq.n	81037ee <HAL_DMA_Start_IT+0x3be>
 81037ce:	3514      	adds	r5, #20
 81037d0:	42ac      	cmp	r4, r5
 81037d2:	d00c      	beq.n	81037ee <HAL_DMA_Start_IT+0x3be>
 81037d4:	3514      	adds	r5, #20
 81037d6:	42ac      	cmp	r4, r5
 81037d8:	d009      	beq.n	81037ee <HAL_DMA_Start_IT+0x3be>
 81037da:	3514      	adds	r5, #20
 81037dc:	42ac      	cmp	r4, r5
 81037de:	d006      	beq.n	81037ee <HAL_DMA_Start_IT+0x3be>
 81037e0:	3514      	adds	r5, #20
 81037e2:	42ac      	cmp	r4, r5
 81037e4:	d003      	beq.n	81037ee <HAL_DMA_Start_IT+0x3be>
 81037e6:	3514      	adds	r5, #20
 81037e8:	42ac      	cmp	r4, r5
 81037ea:	f040 8113 	bne.w	8103a14 <HAL_DMA_Start_IT+0x5e4>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81037ee:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 81037f0:	f005 071f 	and.w	r7, r5, #31
 81037f4:	2501      	movs	r5, #1
 81037f6:	40bd      	lsls	r5, r7
 81037f8:	f8ce 5004 	str.w	r5, [lr, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 81037fc:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81037fe:	6883      	ldr	r3, [r0, #8]
 8103800:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8103802:	bf0b      	itete	eq
 8103804:	60a2      	streq	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8103806:	60a1      	strne	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8103808:	60e1      	streq	r1, [r4, #12]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810380a:	60e2      	strne	r2, [r4, #12]
 810380c:	e695      	b.n	810353a <HAL_DMA_Start_IT+0x10a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810380e:	4a6f      	ldr	r2, [pc, #444]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
 8103810:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8103812:	f023 031e 	bic.w	r3, r3, #30
 8103816:	f043 0316 	orr.w	r3, r3, #22
 810381a:	6293      	str	r3, [r2, #40]	; 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 810381c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 810381e:	2b00      	cmp	r3, #0
 8103820:	f43f af34 	beq.w	810368c <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103824:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8103826:	f043 0308 	orr.w	r3, r3, #8
 810382a:	6293      	str	r3, [r2, #40]	; 0x28
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810382c:	e72e      	b.n	810368c <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 810382e:	4e67      	ldr	r6, [pc, #412]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103830:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8103832:	6f35      	ldr	r5, [r6, #112]	; 0x70
 8103834:	f025 0501 	bic.w	r5, r5, #1
 8103838:	6735      	str	r5, [r6, #112]	; 0x70
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810383a:	e779      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810383c:	4a63      	ldr	r2, [pc, #396]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
 810383e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8103840:	f023 031e 	bic.w	r3, r3, #30
 8103844:	f043 0316 	orr.w	r3, r3, #22
 8103848:	6713      	str	r3, [r2, #112]	; 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 810384a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 810384c:	2b00      	cmp	r3, #0
 810384e:	f43f af1d 	beq.w	810368c <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103852:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8103854:	f043 0308 	orr.w	r3, r3, #8
 8103858:	6713      	str	r3, [r2, #112]	; 0x70
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810385a:	e717      	b.n	810368c <HAL_DMA_Start_IT+0x25c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810385c:	4a5b      	ldr	r2, [pc, #364]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
 810385e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8103860:	f023 031e 	bic.w	r3, r3, #30
 8103864:	f043 0316 	orr.w	r3, r3, #22
 8103868:	6413      	str	r3, [r2, #64]	; 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 810386a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 810386c:	2b00      	cmp	r3, #0
 810386e:	f43f af0d 	beq.w	810368c <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103872:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8103874:	f043 0308 	orr.w	r3, r3, #8
 8103878:	6413      	str	r3, [r2, #64]	; 0x40
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810387a:	e707      	b.n	810368c <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 810387c:	4e53      	ldr	r6, [pc, #332]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810387e:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8103880:	6c35      	ldr	r5, [r6, #64]	; 0x40
 8103882:	f025 0501 	bic.w	r5, r5, #1
 8103886:	6435      	str	r5, [r6, #64]	; 0x40
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103888:	e752      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
    __HAL_DMA_DISABLE(hdma);
 810388a:	4e50      	ldr	r6, [pc, #320]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810388c:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 810388e:	6db5      	ldr	r5, [r6, #88]	; 0x58
 8103890:	f025 0501 	bic.w	r5, r5, #1
 8103894:	65b5      	str	r5, [r6, #88]	; 0x58
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103896:	e74b      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103898:	4a4c      	ldr	r2, [pc, #304]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
 810389a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 810389c:	f023 031e 	bic.w	r3, r3, #30
 81038a0:	f043 0316 	orr.w	r3, r3, #22
 81038a4:	6593      	str	r3, [r2, #88]	; 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 81038a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 81038a8:	2b00      	cmp	r3, #0
 81038aa:	f43f aeef 	beq.w	810368c <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81038ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 81038b0:	f043 0308 	orr.w	r3, r3, #8
 81038b4:	6593      	str	r3, [r2, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81038b6:	e6e9      	b.n	810368c <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 81038b8:	4e44      	ldr	r6, [pc, #272]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
 81038ba:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81038be:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81038c0:	f025 0501 	bic.w	r5, r5, #1
 81038c4:	f8c6 5088 	str.w	r5, [r6, #136]	; 0x88
 81038c8:	e732      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81038ca:	4a40      	ldr	r2, [pc, #256]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
 81038cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 81038d0:	f023 031e 	bic.w	r3, r3, #30
 81038d4:	f043 0316 	orr.w	r3, r3, #22
 81038d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 81038dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 81038de:	2b00      	cmp	r3, #0
 81038e0:	f43f aed4 	beq.w	810368c <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81038e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 81038e8:	f043 0308 	orr.w	r3, r3, #8
 81038ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81038f0:	e6cc      	b.n	810368c <HAL_DMA_Start_IT+0x25c>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81038f2:	4a36      	ldr	r2, [pc, #216]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
 81038f4:	e6a8      	b.n	8103648 <HAL_DMA_Start_IT+0x218>
    __HAL_DMA_DISABLE(hdma);
 81038f6:	4e35      	ldr	r6, [pc, #212]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81038f8:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81038fa:	f8d6 50a0 	ldr.w	r5, [r6, #160]	; 0xa0
 81038fe:	f025 0501 	bic.w	r5, r5, #1
 8103902:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103906:	e713      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103908:	4a30      	ldr	r2, [pc, #192]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
 810390a:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 810390e:	f023 031e 	bic.w	r3, r3, #30
 8103912:	f043 0316 	orr.w	r3, r3, #22
 8103916:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 810391a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 810391c:	2b00      	cmp	r3, #0
 810391e:	f43f aeb5 	beq.w	810368c <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103922:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 8103926:	f043 0308 	orr.w	r3, r3, #8
 810392a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810392e:	e6ad      	b.n	810368c <HAL_DMA_Start_IT+0x25c>
    __HAL_DMA_DISABLE(hdma);
 8103930:	4e26      	ldr	r6, [pc, #152]	; (81039cc <HAL_DMA_Start_IT+0x59c>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103932:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8103934:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
 8103938:	f025 0501 	bic.w	r5, r5, #1
 810393c:	f8c6 50b8 	str.w	r5, [r6, #184]	; 0xb8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103940:	e6f6      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
    __HAL_DMA_DISABLE(hdma);
 8103942:	4e26      	ldr	r6, [pc, #152]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103944:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8103946:	6935      	ldr	r5, [r6, #16]
 8103948:	f025 0501 	bic.w	r5, r5, #1
 810394c:	6135      	str	r5, [r6, #16]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810394e:	e6ef      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103950:	4a22      	ldr	r2, [pc, #136]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
 8103952:	6913      	ldr	r3, [r2, #16]
 8103954:	f023 031e 	bic.w	r3, r3, #30
 8103958:	f043 0316 	orr.w	r3, r3, #22
 810395c:	6113      	str	r3, [r2, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 810395e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8103960:	2b00      	cmp	r3, #0
 8103962:	f43f ae93 	beq.w	810368c <HAL_DMA_Start_IT+0x25c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8103966:	4a1d      	ldr	r2, [pc, #116]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
 8103968:	e68c      	b.n	8103684 <HAL_DMA_Start_IT+0x254>
    __HAL_DMA_DISABLE(hdma);
 810396a:	4e1c      	ldr	r6, [pc, #112]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810396c:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 810396e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 8103970:	f025 0501 	bic.w	r5, r5, #1
 8103974:	62b5      	str	r5, [r6, #40]	; 0x28
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103976:	e6db      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103978:	4a18      	ldr	r2, [pc, #96]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
 810397a:	e749      	b.n	8103810 <HAL_DMA_Start_IT+0x3e0>
 810397c:	4a17      	ldr	r2, [pc, #92]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
 810397e:	e76e      	b.n	810385e <HAL_DMA_Start_IT+0x42e>
    __HAL_DMA_DISABLE(hdma);
 8103980:	4e16      	ldr	r6, [pc, #88]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103982:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8103984:	6c35      	ldr	r5, [r6, #64]	; 0x40
 8103986:	f025 0501 	bic.w	r5, r5, #1
 810398a:	6435      	str	r5, [r6, #64]	; 0x40
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810398c:	e6d0      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 810398e:	4a13      	ldr	r2, [pc, #76]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
 8103990:	e783      	b.n	810389a <HAL_DMA_Start_IT+0x46a>
    __HAL_DMA_DISABLE(hdma);
 8103992:	4e12      	ldr	r6, [pc, #72]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103994:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8103996:	6db5      	ldr	r5, [r6, #88]	; 0x58
 8103998:	f025 0501 	bic.w	r5, r5, #1
 810399c:	65b5      	str	r5, [r6, #88]	; 0x58
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810399e:	e6c7      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
    __HAL_DMA_DISABLE(hdma);
 81039a0:	4e0e      	ldr	r6, [pc, #56]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81039a2:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81039a4:	6f35      	ldr	r5, [r6, #112]	; 0x70
 81039a6:	f025 0501 	bic.w	r5, r5, #1
 81039aa:	6735      	str	r5, [r6, #112]	; 0x70
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81039ac:	e6c0      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81039ae:	4a0b      	ldr	r2, [pc, #44]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
 81039b0:	e745      	b.n	810383e <HAL_DMA_Start_IT+0x40e>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81039b2:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	; 0x64
    if(hdma->DMAmuxRequestGen != 0U)
 81039b6:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81039b8:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 81039ba:	2d00      	cmp	r5, #0
 81039bc:	f47f aec0 	bne.w	8103740 <HAL_DMA_Start_IT+0x310>
 81039c0:	e715      	b.n	81037ee <HAL_DMA_Start_IT+0x3be>
    __HAL_DMA_DISABLE(hdma);
 81039c2:	4e06      	ldr	r6, [pc, #24]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
 81039c4:	e779      	b.n	81038ba <HAL_DMA_Start_IT+0x48a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81039c6:	4a05      	ldr	r2, [pc, #20]	; (81039dc <HAL_DMA_Start_IT+0x5ac>)
 81039c8:	e780      	b.n	81038cc <HAL_DMA_Start_IT+0x49c>
 81039ca:	bf00      	nop
 81039cc:	40020000 	.word	0x40020000
 81039d0:	40020040 	.word	0x40020040
 81039d4:	58025408 	.word	0x58025408
 81039d8:	5802541c 	.word	0x5802541c
 81039dc:	40020400 	.word	0x40020400
 81039e0:	40020028 	.word	0x40020028
    __HAL_DMA_DISABLE(hdma);
 81039e4:	4e0e      	ldr	r6, [pc, #56]	; (8103a20 <HAL_DMA_Start_IT+0x5f0>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81039e6:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 81039e8:	f8d6 50a0 	ldr.w	r5, [r6, #160]	; 0xa0
 81039ec:	f025 0501 	bic.w	r5, r5, #1
 81039f0:	f8c6 50a0 	str.w	r5, [r6, #160]	; 0xa0
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81039f4:	e69c      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81039f6:	3318      	adds	r3, #24
 81039f8:	429c      	cmp	r4, r3
 81039fa:	f47f ad9e 	bne.w	810353a <HAL_DMA_Start_IT+0x10a>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81039fe:	4a08      	ldr	r2, [pc, #32]	; (8103a20 <HAL_DMA_Start_IT+0x5f0>)
 8103a00:	e783      	b.n	810390a <HAL_DMA_Start_IT+0x4da>
    __HAL_DMA_DISABLE(hdma);
 8103a02:	4e07      	ldr	r6, [pc, #28]	; (8103a20 <HAL_DMA_Start_IT+0x5f0>)
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103a04:	6e47      	ldr	r7, [r0, #100]	; 0x64
    __HAL_DMA_DISABLE(hdma);
 8103a06:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
 8103a0a:	f025 0501 	bic.w	r5, r5, #1
 8103a0e:	f8c6 50b8 	str.w	r5, [r6, #184]	; 0xb8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103a12:	e68d      	b.n	8103730 <HAL_DMA_Start_IT+0x300>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103a14:	3514      	adds	r5, #20
 8103a16:	42ac      	cmp	r4, r5
 8103a18:	f43f aee9 	beq.w	81037ee <HAL_DMA_Start_IT+0x3be>
 8103a1c:	e58d      	b.n	810353a <HAL_DMA_Start_IT+0x10a>
 8103a1e:	bf00      	nop
 8103a20:	40020400 	.word	0x40020400

08103a24 <HAL_DMA_Abort>:
{
 8103a24:	b570      	push	{r4, r5, r6, lr}
 8103a26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8103a28:	f7ff f868 	bl	8102afc <HAL_GetTick>
  if(hdma == NULL)
 8103a2c:	2c00      	cmp	r4, #0
 8103a2e:	f000 8102 	beq.w	8103c36 <HAL_DMA_Abort+0x212>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103a32:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8103a36:	2b02      	cmp	r3, #2
 8103a38:	d164      	bne.n	8103b04 <HAL_DMA_Abort+0xe0>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103a3a:	6823      	ldr	r3, [r4, #0]
 8103a3c:	4aad      	ldr	r2, [pc, #692]	; (8103cf4 <HAL_DMA_Abort+0x2d0>)
 8103a3e:	4293      	cmp	r3, r2
 8103a40:	4605      	mov	r5, r0
 8103a42:	f000 80fa 	beq.w	8103c3a <HAL_DMA_Abort+0x216>
 8103a46:	3218      	adds	r2, #24
 8103a48:	4293      	cmp	r3, r2
 8103a4a:	f000 8100 	beq.w	8103c4e <HAL_DMA_Abort+0x22a>
 8103a4e:	3218      	adds	r2, #24
 8103a50:	4293      	cmp	r3, r2
 8103a52:	d05e      	beq.n	8103b12 <HAL_DMA_Abort+0xee>
 8103a54:	3218      	adds	r2, #24
 8103a56:	4293      	cmp	r3, r2
 8103a58:	f000 8111 	beq.w	8103c7e <HAL_DMA_Abort+0x25a>
 8103a5c:	3218      	adds	r2, #24
 8103a5e:	4293      	cmp	r3, r2
 8103a60:	f000 8117 	beq.w	8103c92 <HAL_DMA_Abort+0x26e>
 8103a64:	3218      	adds	r2, #24
 8103a66:	4293      	cmp	r3, r2
 8103a68:	f000 80fb 	beq.w	8103c62 <HAL_DMA_Abort+0x23e>
 8103a6c:	3218      	adds	r2, #24
 8103a6e:	4293      	cmp	r3, r2
 8103a70:	f000 811b 	beq.w	8103caa <HAL_DMA_Abort+0x286>
 8103a74:	3218      	adds	r2, #24
 8103a76:	4293      	cmp	r3, r2
 8103a78:	f000 8125 	beq.w	8103cc6 <HAL_DMA_Abort+0x2a2>
 8103a7c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103a80:	4293      	cmp	r3, r2
 8103a82:	f000 8134 	beq.w	8103cee <HAL_DMA_Abort+0x2ca>
 8103a86:	3218      	adds	r2, #24
 8103a88:	4293      	cmp	r3, r2
 8103a8a:	f000 813f 	beq.w	8103d0c <HAL_DMA_Abort+0x2e8>
 8103a8e:	3218      	adds	r2, #24
 8103a90:	4293      	cmp	r3, r2
 8103a92:	f000 813d 	beq.w	8103d10 <HAL_DMA_Abort+0x2ec>
 8103a96:	3218      	adds	r2, #24
 8103a98:	4293      	cmp	r3, r2
 8103a9a:	f000 813b 	beq.w	8103d14 <HAL_DMA_Abort+0x2f0>
 8103a9e:	3218      	adds	r2, #24
 8103aa0:	4293      	cmp	r3, r2
 8103aa2:	f000 8139 	beq.w	8103d18 <HAL_DMA_Abort+0x2f4>
 8103aa6:	3218      	adds	r2, #24
 8103aa8:	4293      	cmp	r3, r2
 8103aaa:	f000 8137 	beq.w	8103d1c <HAL_DMA_Abort+0x2f8>
 8103aae:	3218      	adds	r2, #24
 8103ab0:	4293      	cmp	r3, r2
 8103ab2:	f000 8143 	beq.w	8103d3c <HAL_DMA_Abort+0x318>
 8103ab6:	3218      	adds	r2, #24
 8103ab8:	4293      	cmp	r3, r2
 8103aba:	f000 8131 	beq.w	8103d20 <HAL_DMA_Abort+0x2fc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103abe:	681a      	ldr	r2, [r3, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103ac0:	498d      	ldr	r1, [pc, #564]	; (8103cf8 <HAL_DMA_Abort+0x2d4>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103ac2:	f022 020e 	bic.w	r2, r2, #14
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103ac6:	428b      	cmp	r3, r1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103ac8:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8103aca:	461e      	mov	r6, r3
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103acc:	d014      	beq.n	8103af8 <HAL_DMA_Abort+0xd4>
 8103ace:	4a8b      	ldr	r2, [pc, #556]	; (8103cfc <HAL_DMA_Abort+0x2d8>)
 8103ad0:	4293      	cmp	r3, r2
 8103ad2:	d011      	beq.n	8103af8 <HAL_DMA_Abort+0xd4>
 8103ad4:	3214      	adds	r2, #20
 8103ad6:	4293      	cmp	r3, r2
 8103ad8:	d00e      	beq.n	8103af8 <HAL_DMA_Abort+0xd4>
 8103ada:	3214      	adds	r2, #20
 8103adc:	4293      	cmp	r3, r2
 8103ade:	d00b      	beq.n	8103af8 <HAL_DMA_Abort+0xd4>
 8103ae0:	3214      	adds	r2, #20
 8103ae2:	4293      	cmp	r3, r2
 8103ae4:	d008      	beq.n	8103af8 <HAL_DMA_Abort+0xd4>
 8103ae6:	3214      	adds	r2, #20
 8103ae8:	4293      	cmp	r3, r2
 8103aea:	d005      	beq.n	8103af8 <HAL_DMA_Abort+0xd4>
 8103aec:	3214      	adds	r2, #20
 8103aee:	4293      	cmp	r3, r2
 8103af0:	d002      	beq.n	8103af8 <HAL_DMA_Abort+0xd4>
 8103af2:	3214      	adds	r2, #20
 8103af4:	4293      	cmp	r3, r2
 8103af6:	d11b      	bne.n	8103b30 <HAL_DMA_Abort+0x10c>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103af8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8103afa:	680a      	ldr	r2, [r1, #0]
 8103afc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103b00:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8103b02:	e015      	b.n	8103b30 <HAL_DMA_Abort+0x10c>
    __HAL_UNLOCK(hdma);
 8103b04:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103b06:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8103b08:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103b0c:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8103b0e:	2001      	movs	r0, #1
}
 8103b10:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103b12:	4a7b      	ldr	r2, [pc, #492]	; (8103d00 <HAL_DMA_Abort+0x2dc>)
 8103b14:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8103b16:	f021 011e 	bic.w	r1, r1, #30
 8103b1a:	6411      	str	r1, [r2, #64]	; 0x40
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103b1c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8103b1e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103b22:	6551      	str	r1, [r2, #84]	; 0x54
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103b24:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8103b26:	680a      	ldr	r2, [r1, #0]
 8103b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103b2c:	461e      	mov	r6, r3
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103b2e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8103b30:	681a      	ldr	r2, [r3, #0]
 8103b32:	f022 0201 	bic.w	r2, r2, #1
 8103b36:	601a      	str	r2, [r3, #0]
 8103b38:	e004      	b.n	8103b44 <HAL_DMA_Abort+0x120>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103b3a:	f7fe ffdf 	bl	8102afc <HAL_GetTick>
 8103b3e:	1b43      	subs	r3, r0, r5
 8103b40:	2b05      	cmp	r3, #5
 8103b42:	d86e      	bhi.n	8103c22 <HAL_DMA_Abort+0x1fe>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103b44:	6833      	ldr	r3, [r6, #0]
 8103b46:	07db      	lsls	r3, r3, #31
 8103b48:	d4f7      	bmi.n	8103b3a <HAL_DMA_Abort+0x116>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103b4a:	6823      	ldr	r3, [r4, #0]
 8103b4c:	4a69      	ldr	r2, [pc, #420]	; (8103cf4 <HAL_DMA_Abort+0x2d0>)
 8103b4e:	4293      	cmp	r3, r2
 8103b50:	d04d      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b52:	3218      	adds	r2, #24
 8103b54:	4293      	cmp	r3, r2
 8103b56:	d04a      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b58:	3218      	adds	r2, #24
 8103b5a:	4293      	cmp	r3, r2
 8103b5c:	d047      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b5e:	3218      	adds	r2, #24
 8103b60:	4293      	cmp	r3, r2
 8103b62:	d044      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b64:	3218      	adds	r2, #24
 8103b66:	4293      	cmp	r3, r2
 8103b68:	d041      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b6a:	3218      	adds	r2, #24
 8103b6c:	4293      	cmp	r3, r2
 8103b6e:	d03e      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b70:	3218      	adds	r2, #24
 8103b72:	4293      	cmp	r3, r2
 8103b74:	d03b      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b76:	3218      	adds	r2, #24
 8103b78:	4293      	cmp	r3, r2
 8103b7a:	d038      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b7c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103b80:	4293      	cmp	r3, r2
 8103b82:	d034      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b84:	3218      	adds	r2, #24
 8103b86:	4293      	cmp	r3, r2
 8103b88:	d031      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b8a:	3218      	adds	r2, #24
 8103b8c:	4293      	cmp	r3, r2
 8103b8e:	d02e      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b90:	3218      	adds	r2, #24
 8103b92:	4293      	cmp	r3, r2
 8103b94:	d02b      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b96:	3218      	adds	r2, #24
 8103b98:	4293      	cmp	r3, r2
 8103b9a:	d028      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103b9c:	3218      	adds	r2, #24
 8103b9e:	4293      	cmp	r3, r2
 8103ba0:	d025      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103ba2:	3218      	adds	r2, #24
 8103ba4:	4293      	cmp	r3, r2
 8103ba6:	d022      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
 8103ba8:	3218      	adds	r2, #24
 8103baa:	4293      	cmp	r3, r2
 8103bac:	d01f      	beq.n	8103bee <HAL_DMA_Abort+0x1ca>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103bae:	e9d4 0216 	ldrd	r0, r2, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103bb2:	f002 011f 	and.w	r1, r2, #31
 8103bb6:	2201      	movs	r2, #1
 8103bb8:	408a      	lsls	r2, r1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103bba:	494f      	ldr	r1, [pc, #316]	; (8103cf8 <HAL_DMA_Abort+0x2d4>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103bbc:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103bbe:	428b      	cmp	r3, r1
 8103bc0:	d01c      	beq.n	8103bfc <HAL_DMA_Abort+0x1d8>
 8103bc2:	4a4e      	ldr	r2, [pc, #312]	; (8103cfc <HAL_DMA_Abort+0x2d8>)
 8103bc4:	4293      	cmp	r3, r2
 8103bc6:	d019      	beq.n	8103bfc <HAL_DMA_Abort+0x1d8>
 8103bc8:	3214      	adds	r2, #20
 8103bca:	4293      	cmp	r3, r2
 8103bcc:	d016      	beq.n	8103bfc <HAL_DMA_Abort+0x1d8>
 8103bce:	3214      	adds	r2, #20
 8103bd0:	4293      	cmp	r3, r2
 8103bd2:	d013      	beq.n	8103bfc <HAL_DMA_Abort+0x1d8>
 8103bd4:	3214      	adds	r2, #20
 8103bd6:	4293      	cmp	r3, r2
 8103bd8:	d010      	beq.n	8103bfc <HAL_DMA_Abort+0x1d8>
 8103bda:	3214      	adds	r2, #20
 8103bdc:	4293      	cmp	r3, r2
 8103bde:	d00d      	beq.n	8103bfc <HAL_DMA_Abort+0x1d8>
 8103be0:	3214      	adds	r2, #20
 8103be2:	4293      	cmp	r3, r2
 8103be4:	d00a      	beq.n	8103bfc <HAL_DMA_Abort+0x1d8>
 8103be6:	3214      	adds	r2, #20
 8103be8:	4293      	cmp	r3, r2
 8103bea:	d113      	bne.n	8103c14 <HAL_DMA_Abort+0x1f0>
 8103bec:	e006      	b.n	8103bfc <HAL_DMA_Abort+0x1d8>
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103bee:	e9d4 1316 	ldrd	r1, r3, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103bf2:	f003 021f 	and.w	r2, r3, #31
 8103bf6:	233f      	movs	r3, #63	; 0x3f
 8103bf8:	4093      	lsls	r3, r2
 8103bfa:	608b      	str	r3, [r1, #8]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103bfc:	e9d4 131a 	ldrd	r1, r3, [r4, #104]	; 0x68
 8103c00:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8103c02:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8103c04:	b133      	cbz	r3, 8103c14 <HAL_DMA_Abort+0x1f0>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103c06:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103c08:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103c10:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103c12:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8103c14:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8103c16:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8103c18:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8103c1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8103c20:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103c22:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8103c24:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 8103c26:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103c28:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8103c2a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8103c2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8103c32:	2001      	movs	r0, #1
}
 8103c34:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8103c36:	2001      	movs	r0, #1
}
 8103c38:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103c3a:	4a31      	ldr	r2, [pc, #196]	; (8103d00 <HAL_DMA_Abort+0x2dc>)
 8103c3c:	6911      	ldr	r1, [r2, #16]
 8103c3e:	f021 011e 	bic.w	r1, r1, #30
 8103c42:	6111      	str	r1, [r2, #16]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103c44:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8103c46:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103c4a:	6251      	str	r1, [r2, #36]	; 0x24
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103c4c:	e76a      	b.n	8103b24 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103c4e:	4a2c      	ldr	r2, [pc, #176]	; (8103d00 <HAL_DMA_Abort+0x2dc>)
 8103c50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8103c52:	f021 011e 	bic.w	r1, r1, #30
 8103c56:	6291      	str	r1, [r2, #40]	; 0x28
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103c58:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8103c5a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103c5e:	63d1      	str	r1, [r2, #60]	; 0x3c
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103c60:	e760      	b.n	8103b24 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103c62:	4a27      	ldr	r2, [pc, #156]	; (8103d00 <HAL_DMA_Abort+0x2dc>)
 8103c64:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8103c68:	f021 011e 	bic.w	r1, r1, #30
 8103c6c:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103c70:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
 8103c74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103c78:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103c7c:	e752      	b.n	8103b24 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103c7e:	4a20      	ldr	r2, [pc, #128]	; (8103d00 <HAL_DMA_Abort+0x2dc>)
 8103c80:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8103c82:	f021 011e 	bic.w	r1, r1, #30
 8103c86:	6591      	str	r1, [r2, #88]	; 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103c88:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 8103c8a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103c8e:	66d1      	str	r1, [r2, #108]	; 0x6c
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103c90:	e748      	b.n	8103b24 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103c92:	4a1b      	ldr	r2, [pc, #108]	; (8103d00 <HAL_DMA_Abort+0x2dc>)
 8103c94:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8103c96:	f021 011e 	bic.w	r1, r1, #30
 8103c9a:	6711      	str	r1, [r2, #112]	; 0x70
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103c9c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8103ca0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103ca4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103ca8:	e73c      	b.n	8103b24 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103caa:	4a15      	ldr	r2, [pc, #84]	; (8103d00 <HAL_DMA_Abort+0x2dc>)
 8103cac:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8103cb0:	f021 011e 	bic.w	r1, r1, #30
 8103cb4:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103cb8:	f8d2 10b4 	ldr.w	r1, [r2, #180]	; 0xb4
 8103cbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103cc0:	f8c2 10b4 	str.w	r1, [r2, #180]	; 0xb4
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103cc4:	e72e      	b.n	8103b24 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103cc6:	4a0e      	ldr	r2, [pc, #56]	; (8103d00 <HAL_DMA_Abort+0x2dc>)
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8103cc8:	4e0e      	ldr	r6, [pc, #56]	; (8103d04 <HAL_DMA_Abort+0x2e0>)
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103cca:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 8103cce:	f021 011e 	bic.w	r1, r1, #30
 8103cd2:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103cd6:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
 8103cda:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103cde:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103ce2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8103ce4:	680a      	ldr	r2, [r1, #0]
 8103ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103cea:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8103cec:	e720      	b.n	8103b30 <HAL_DMA_Abort+0x10c>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103cee:	4a06      	ldr	r2, [pc, #24]	; (8103d08 <HAL_DMA_Abort+0x2e4>)
 8103cf0:	e7a4      	b.n	8103c3c <HAL_DMA_Abort+0x218>
 8103cf2:	bf00      	nop
 8103cf4:	40020010 	.word	0x40020010
 8103cf8:	58025408 	.word	0x58025408
 8103cfc:	5802541c 	.word	0x5802541c
 8103d00:	40020000 	.word	0x40020000
 8103d04:	400200b8 	.word	0x400200b8
 8103d08:	40020400 	.word	0x40020400
 8103d0c:	4a0c      	ldr	r2, [pc, #48]	; (8103d40 <HAL_DMA_Abort+0x31c>)
 8103d0e:	e79f      	b.n	8103c50 <HAL_DMA_Abort+0x22c>
 8103d10:	4a0b      	ldr	r2, [pc, #44]	; (8103d40 <HAL_DMA_Abort+0x31c>)
 8103d12:	e6ff      	b.n	8103b14 <HAL_DMA_Abort+0xf0>
 8103d14:	4a0a      	ldr	r2, [pc, #40]	; (8103d40 <HAL_DMA_Abort+0x31c>)
 8103d16:	e7b3      	b.n	8103c80 <HAL_DMA_Abort+0x25c>
 8103d18:	4a09      	ldr	r2, [pc, #36]	; (8103d40 <HAL_DMA_Abort+0x31c>)
 8103d1a:	e7bb      	b.n	8103c94 <HAL_DMA_Abort+0x270>
 8103d1c:	4a08      	ldr	r2, [pc, #32]	; (8103d40 <HAL_DMA_Abort+0x31c>)
 8103d1e:	e7a1      	b.n	8103c64 <HAL_DMA_Abort+0x240>
 8103d20:	4a07      	ldr	r2, [pc, #28]	; (8103d40 <HAL_DMA_Abort+0x31c>)
 8103d22:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
 8103d26:	f021 011e 	bic.w	r1, r1, #30
 8103d2a:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103d2e:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
 8103d32:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8103d36:	f8c2 10cc 	str.w	r1, [r2, #204]	; 0xcc
 8103d3a:	e6f3      	b.n	8103b24 <HAL_DMA_Abort+0x100>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8103d3c:	4a00      	ldr	r2, [pc, #0]	; (8103d40 <HAL_DMA_Abort+0x31c>)
 8103d3e:	e7b5      	b.n	8103cac <HAL_DMA_Abort+0x288>
 8103d40:	40020400 	.word	0x40020400

08103d44 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8103d44:	2800      	cmp	r0, #0
 8103d46:	d06e      	beq.n	8103e26 <HAL_DMA_Abort_IT+0xe2>
{
 8103d48:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103d4a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8103d4e:	2b02      	cmp	r3, #2
 8103d50:	d15c      	bne.n	8103e0c <HAL_DMA_Abort_IT+0xc8>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103d52:	6803      	ldr	r3, [r0, #0]
 8103d54:	4a43      	ldr	r2, [pc, #268]	; (8103e64 <HAL_DMA_Abort_IT+0x120>)
 8103d56:	4293      	cmp	r3, r2
 8103d58:	d05c      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d5a:	3218      	adds	r2, #24
 8103d5c:	4293      	cmp	r3, r2
 8103d5e:	d059      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d60:	3218      	adds	r2, #24
 8103d62:	4293      	cmp	r3, r2
 8103d64:	d056      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d66:	3218      	adds	r2, #24
 8103d68:	4293      	cmp	r3, r2
 8103d6a:	d053      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d6c:	3218      	adds	r2, #24
 8103d6e:	4293      	cmp	r3, r2
 8103d70:	d050      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d72:	3218      	adds	r2, #24
 8103d74:	4293      	cmp	r3, r2
 8103d76:	d04d      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d78:	3218      	adds	r2, #24
 8103d7a:	4293      	cmp	r3, r2
 8103d7c:	d04a      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d7e:	3218      	adds	r2, #24
 8103d80:	4293      	cmp	r3, r2
 8103d82:	d047      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d84:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103d88:	4293      	cmp	r3, r2
 8103d8a:	d043      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d8c:	3218      	adds	r2, #24
 8103d8e:	4293      	cmp	r3, r2
 8103d90:	d040      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d92:	3218      	adds	r2, #24
 8103d94:	4293      	cmp	r3, r2
 8103d96:	d03d      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d98:	3218      	adds	r2, #24
 8103d9a:	4293      	cmp	r3, r2
 8103d9c:	d03a      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103d9e:	3218      	adds	r2, #24
 8103da0:	4293      	cmp	r3, r2
 8103da2:	d037      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103da4:	3218      	adds	r2, #24
 8103da6:	4293      	cmp	r3, r2
 8103da8:	d034      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103daa:	3218      	adds	r2, #24
 8103dac:	4293      	cmp	r3, r2
 8103dae:	d031      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
 8103db0:	3218      	adds	r2, #24
 8103db2:	4293      	cmp	r3, r2
 8103db4:	d02e      	beq.n	8103e14 <HAL_DMA_Abort_IT+0xd0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103db6:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103db8:	492b      	ldr	r1, [pc, #172]	; (8103e68 <HAL_DMA_Abort_IT+0x124>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103dba:	f022 020e 	bic.w	r2, r2, #14
 8103dbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8103dc0:	681a      	ldr	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103dc2:	428b      	cmp	r3, r1
      __HAL_DMA_DISABLE(hdma);
 8103dc4:	f022 0201 	bic.w	r2, r2, #1
 8103dc8:	601a      	str	r2, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103dca:	d02e      	beq.n	8103e2a <HAL_DMA_Abort_IT+0xe6>
 8103dcc:	4a27      	ldr	r2, [pc, #156]	; (8103e6c <HAL_DMA_Abort_IT+0x128>)
 8103dce:	4293      	cmp	r3, r2
 8103dd0:	d02b      	beq.n	8103e2a <HAL_DMA_Abort_IT+0xe6>
 8103dd2:	3214      	adds	r2, #20
 8103dd4:	4293      	cmp	r3, r2
 8103dd6:	d028      	beq.n	8103e2a <HAL_DMA_Abort_IT+0xe6>
 8103dd8:	3214      	adds	r2, #20
 8103dda:	4293      	cmp	r3, r2
 8103ddc:	d025      	beq.n	8103e2a <HAL_DMA_Abort_IT+0xe6>
 8103dde:	3214      	adds	r2, #20
 8103de0:	4293      	cmp	r3, r2
 8103de2:	d022      	beq.n	8103e2a <HAL_DMA_Abort_IT+0xe6>
 8103de4:	3214      	adds	r2, #20
 8103de6:	4293      	cmp	r3, r2
 8103de8:	d01f      	beq.n	8103e2a <HAL_DMA_Abort_IT+0xe6>
 8103dea:	3214      	adds	r2, #20
 8103dec:	4293      	cmp	r3, r2
 8103dee:	d01c      	beq.n	8103e2a <HAL_DMA_Abort_IT+0xe6>
 8103df0:	3214      	adds	r2, #20
 8103df2:	4293      	cmp	r3, r2
 8103df4:	d019      	beq.n	8103e2a <HAL_DMA_Abort_IT+0xe6>
      if(hdma->XferAbortCallback != NULL)
 8103df6:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8103df8:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8103dfa:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8103dfc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8103e00:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8103e04:	b35b      	cbz	r3, 8103e5e <HAL_DMA_Abort_IT+0x11a>
        hdma->XferAbortCallback(hdma);
 8103e06:	4798      	blx	r3
  return HAL_OK;
 8103e08:	4620      	mov	r0, r4
}
 8103e0a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103e0c:	2380      	movs	r3, #128	; 0x80
 8103e0e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8103e10:	2001      	movs	r0, #1
}
 8103e12:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 8103e14:	2204      	movs	r2, #4
 8103e16:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8103e1a:	681a      	ldr	r2, [r3, #0]
 8103e1c:	f022 0201 	bic.w	r2, r2, #1
  return HAL_OK;
 8103e20:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8103e22:	601a      	str	r2, [r3, #0]
}
 8103e24:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8103e26:	2001      	movs	r0, #1
}
 8103e28:	4770      	bx	lr
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103e2a:	e9d0 3117 	ldrd	r3, r1, [r0, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103e2e:	680a      	ldr	r2, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103e30:	6d85      	ldr	r5, [r0, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103e36:	600a      	str	r2, [r1, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103e38:	f003 031f 	and.w	r3, r3, #31
 8103e3c:	2201      	movs	r2, #1
 8103e3e:	409a      	lsls	r2, r3
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103e40:	e9d0 431a 	ldrd	r4, r3, [r0, #104]	; 0x68
 8103e44:	6e41      	ldr	r1, [r0, #100]	; 0x64
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103e46:	606a      	str	r2, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103e48:	604c      	str	r4, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8103e4a:	2b00      	cmp	r3, #0
 8103e4c:	d0d3      	beq.n	8103df6 <HAL_DMA_Abort_IT+0xb2>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103e4e:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103e50:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103e58:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103e5a:	604c      	str	r4, [r1, #4]
 8103e5c:	e7cb      	b.n	8103df6 <HAL_DMA_Abort_IT+0xb2>
  return HAL_OK;
 8103e5e:	4618      	mov	r0, r3
}
 8103e60:	bd38      	pop	{r3, r4, r5, pc}
 8103e62:	bf00      	nop
 8103e64:	40020010 	.word	0x40020010
 8103e68:	58025408 	.word	0x58025408
 8103e6c:	5802541c 	.word	0x5802541c

08103e70 <HAL_DMA_IRQHandler>:
{
 8103e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 8103e74:	4b93      	ldr	r3, [pc, #588]	; (81040c4 <HAL_DMA_IRQHandler+0x254>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103e76:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8103e78:	681f      	ldr	r7, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103e7a:	6803      	ldr	r3, [r0, #0]
{
 8103e7c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8103e7e:	2200      	movs	r2, #0
 8103e80:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103e82:	4a91      	ldr	r2, [pc, #580]	; (81040c8 <HAL_DMA_IRQHandler+0x258>)
  tmpisr_dma  = regs_dma->ISR;
 8103e84:	682c      	ldr	r4, [r5, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8103e86:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103e88:	4293      	cmp	r3, r2
{
 8103e8a:	4680      	mov	r8, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103e8c:	f000 8124 	beq.w	81040d8 <HAL_DMA_IRQHandler+0x268>
 8103e90:	3218      	adds	r2, #24
 8103e92:	4293      	cmp	r3, r2
 8103e94:	d05e      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103e96:	3218      	adds	r2, #24
 8103e98:	4293      	cmp	r3, r2
 8103e9a:	d05b      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103e9c:	3218      	adds	r2, #24
 8103e9e:	4293      	cmp	r3, r2
 8103ea0:	d058      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103ea2:	3218      	adds	r2, #24
 8103ea4:	4293      	cmp	r3, r2
 8103ea6:	d055      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103ea8:	3218      	adds	r2, #24
 8103eaa:	4293      	cmp	r3, r2
 8103eac:	d052      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103eae:	3218      	adds	r2, #24
 8103eb0:	4293      	cmp	r3, r2
 8103eb2:	d04f      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103eb4:	3218      	adds	r2, #24
 8103eb6:	4293      	cmp	r3, r2
 8103eb8:	d04c      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103eba:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103ebe:	4293      	cmp	r3, r2
 8103ec0:	d048      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103ec2:	3218      	adds	r2, #24
 8103ec4:	4293      	cmp	r3, r2
 8103ec6:	d045      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103ec8:	3218      	adds	r2, #24
 8103eca:	4293      	cmp	r3, r2
 8103ecc:	d042      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103ece:	3218      	adds	r2, #24
 8103ed0:	4293      	cmp	r3, r2
 8103ed2:	d03f      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103ed4:	3218      	adds	r2, #24
 8103ed6:	4293      	cmp	r3, r2
 8103ed8:	d03c      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103eda:	3218      	adds	r2, #24
 8103edc:	4293      	cmp	r3, r2
 8103ede:	d039      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103ee0:	3218      	adds	r2, #24
 8103ee2:	4293      	cmp	r3, r2
 8103ee4:	d036      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
 8103ee6:	3218      	adds	r2, #24
 8103ee8:	4293      	cmp	r3, r2
 8103eea:	d033      	beq.n	8103f54 <HAL_DMA_IRQHandler+0xe4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103eec:	4a77      	ldr	r2, [pc, #476]	; (81040cc <HAL_DMA_IRQHandler+0x25c>)
 8103eee:	4293      	cmp	r3, r2
 8103ef0:	d014      	beq.n	8103f1c <HAL_DMA_IRQHandler+0xac>
 8103ef2:	4a77      	ldr	r2, [pc, #476]	; (81040d0 <HAL_DMA_IRQHandler+0x260>)
 8103ef4:	4293      	cmp	r3, r2
 8103ef6:	d011      	beq.n	8103f1c <HAL_DMA_IRQHandler+0xac>
 8103ef8:	3214      	adds	r2, #20
 8103efa:	4293      	cmp	r3, r2
 8103efc:	d00e      	beq.n	8103f1c <HAL_DMA_IRQHandler+0xac>
 8103efe:	3214      	adds	r2, #20
 8103f00:	4293      	cmp	r3, r2
 8103f02:	d00b      	beq.n	8103f1c <HAL_DMA_IRQHandler+0xac>
 8103f04:	3214      	adds	r2, #20
 8103f06:	4293      	cmp	r3, r2
 8103f08:	d008      	beq.n	8103f1c <HAL_DMA_IRQHandler+0xac>
 8103f0a:	3214      	adds	r2, #20
 8103f0c:	4293      	cmp	r3, r2
 8103f0e:	d005      	beq.n	8103f1c <HAL_DMA_IRQHandler+0xac>
 8103f10:	3214      	adds	r2, #20
 8103f12:	4293      	cmp	r3, r2
 8103f14:	d002      	beq.n	8103f1c <HAL_DMA_IRQHandler+0xac>
 8103f16:	3214      	adds	r2, #20
 8103f18:	4293      	cmp	r3, r2
 8103f1a:	d118      	bne.n	8103f4e <HAL_DMA_IRQHandler+0xde>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103f1c:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103f20:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103f22:	f004 041f 	and.w	r4, r4, #31
 8103f26:	2604      	movs	r6, #4
 8103f28:	40a6      	lsls	r6, r4
 8103f2a:	420e      	tst	r6, r1
 8103f2c:	f000 8246 	beq.w	81043bc <HAL_DMA_IRQHandler+0x54c>
 8103f30:	0757      	lsls	r7, r2, #29
 8103f32:	f140 8243 	bpl.w	81043bc <HAL_DMA_IRQHandler+0x54c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103f36:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103f38:	0416      	lsls	r6, r2, #16
 8103f3a:	f140 826c 	bpl.w	8104416 <HAL_DMA_IRQHandler+0x5a6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103f3e:	03d5      	lsls	r5, r2, #15
 8103f40:	f100 826f 	bmi.w	8104422 <HAL_DMA_IRQHandler+0x5b2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103f44:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8103f48:	2b00      	cmp	r3, #0
 8103f4a:	f040 80b6 	bne.w	81040ba <HAL_DMA_IRQHandler+0x24a>
}
 8103f4e:	b002      	add	sp, #8
 8103f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103f54:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 8103f58:	2608      	movs	r6, #8
 8103f5a:	f001 021f 	and.w	r2, r1, #31
 8103f5e:	4096      	lsls	r6, r2
 8103f60:	4234      	tst	r4, r6
 8103f62:	f040 80c1 	bne.w	81040e8 <HAL_DMA_IRQHandler+0x278>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103f66:	fa24 f602 	lsr.w	r6, r4, r2
 8103f6a:	07f0      	lsls	r0, r6, #31
 8103f6c:	f100 810f 	bmi.w	810418e <HAL_DMA_IRQHandler+0x31e>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103f70:	2604      	movs	r6, #4
 8103f72:	fa06 f002 	lsl.w	r0, r6, r2
 8103f76:	4204      	tst	r4, r0
 8103f78:	f040 811d 	bne.w	81041b6 <HAL_DMA_IRQHandler+0x346>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103f7c:	2610      	movs	r6, #16
 8103f7e:	fa06 f202 	lsl.w	r2, r6, r2
 8103f82:	4214      	tst	r4, r2
 8103f84:	f040 816c 	bne.w	8104260 <HAL_DMA_IRQHandler+0x3f0>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103f88:	f001 011f 	and.w	r1, r1, #31
 8103f8c:	2320      	movs	r3, #32
 8103f8e:	408b      	lsls	r3, r1
 8103f90:	4223      	tst	r3, r4
 8103f92:	d046      	beq.n	8104022 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103f94:	f8d8 4000 	ldr.w	r4, [r8]
 8103f98:	4a4b      	ldr	r2, [pc, #300]	; (81040c8 <HAL_DMA_IRQHandler+0x258>)
 8103f9a:	4294      	cmp	r4, r2
 8103f9c:	f000 81a8 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fa0:	3218      	adds	r2, #24
 8103fa2:	4294      	cmp	r4, r2
 8103fa4:	f000 81a4 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fa8:	3218      	adds	r2, #24
 8103faa:	4294      	cmp	r4, r2
 8103fac:	f000 81a0 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fb0:	3218      	adds	r2, #24
 8103fb2:	4294      	cmp	r4, r2
 8103fb4:	f000 819c 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fb8:	3218      	adds	r2, #24
 8103fba:	4294      	cmp	r4, r2
 8103fbc:	f000 8198 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fc0:	3218      	adds	r2, #24
 8103fc2:	4294      	cmp	r4, r2
 8103fc4:	f000 8194 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fc8:	3218      	adds	r2, #24
 8103fca:	4294      	cmp	r4, r2
 8103fcc:	f000 8190 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fd0:	3218      	adds	r2, #24
 8103fd2:	4294      	cmp	r4, r2
 8103fd4:	f000 818c 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fd8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8103fdc:	4294      	cmp	r4, r2
 8103fde:	f000 8187 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fe2:	3218      	adds	r2, #24
 8103fe4:	4294      	cmp	r4, r2
 8103fe6:	f000 8183 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103fea:	3218      	adds	r2, #24
 8103fec:	4294      	cmp	r4, r2
 8103fee:	f000 817f 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103ff2:	3218      	adds	r2, #24
 8103ff4:	4294      	cmp	r4, r2
 8103ff6:	f000 817b 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8103ffa:	3218      	adds	r2, #24
 8103ffc:	4294      	cmp	r4, r2
 8103ffe:	f000 8177 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8104002:	3218      	adds	r2, #24
 8104004:	4294      	cmp	r4, r2
 8104006:	f000 8173 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 810400a:	3218      	adds	r2, #24
 810400c:	4294      	cmp	r4, r2
 810400e:	f000 816f 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 8104012:	3218      	adds	r2, #24
 8104014:	4294      	cmp	r4, r2
 8104016:	f000 816b 	beq.w	81042f0 <HAL_DMA_IRQHandler+0x480>
 810401a:	6822      	ldr	r2, [r4, #0]
 810401c:	0796      	lsls	r6, r2, #30
 810401e:	f100 816b 	bmi.w	81042f8 <HAL_DMA_IRQHandler+0x488>
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104022:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8104026:	2b00      	cmp	r3, #0
 8104028:	d091      	beq.n	8103f4e <HAL_DMA_IRQHandler+0xde>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810402a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 810402e:	07d9      	lsls	r1, r3, #31
 8104030:	d53e      	bpl.n	81040b0 <HAL_DMA_IRQHandler+0x240>
        __HAL_DMA_DISABLE(hdma);
 8104032:	f8d8 1000 	ldr.w	r1, [r8]
 8104036:	4b24      	ldr	r3, [pc, #144]	; (81040c8 <HAL_DMA_IRQHandler+0x258>)
        hdma->State = HAL_DMA_STATE_ABORT;
 8104038:	2204      	movs	r2, #4
        __HAL_DMA_DISABLE(hdma);
 810403a:	4299      	cmp	r1, r3
        hdma->State = HAL_DMA_STATE_ABORT;
 810403c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8104040:	d01b      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 8104042:	3318      	adds	r3, #24
 8104044:	4299      	cmp	r1, r3
 8104046:	d018      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 8104048:	3318      	adds	r3, #24
 810404a:	4299      	cmp	r1, r3
 810404c:	d015      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 810404e:	3318      	adds	r3, #24
 8104050:	4299      	cmp	r1, r3
 8104052:	d012      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 8104054:	3318      	adds	r3, #24
 8104056:	4299      	cmp	r1, r3
 8104058:	d00f      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 810405a:	3318      	adds	r3, #24
 810405c:	4299      	cmp	r1, r3
 810405e:	d00c      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 8104060:	3318      	adds	r3, #24
 8104062:	4299      	cmp	r1, r3
 8104064:	d009      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 8104066:	3318      	adds	r3, #24
 8104068:	4299      	cmp	r1, r3
 810406a:	d006      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 810406c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8104070:	4299      	cmp	r1, r3
 8104072:	d002      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 8104074:	3318      	adds	r3, #24
 8104076:	4299      	cmp	r1, r3
 8104078:	d0ff      	beq.n	810407a <HAL_DMA_IRQHandler+0x20a>
 810407a:	680b      	ldr	r3, [r1, #0]
 810407c:	f023 0301 	bic.w	r3, r3, #1
 8104080:	600b      	str	r3, [r1, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104082:	4b14      	ldr	r3, [pc, #80]	; (81040d4 <HAL_DMA_IRQHandler+0x264>)
 8104084:	fba3 3707 	umull	r3, r7, r3, r7
 8104088:	0abf      	lsrs	r7, r7, #10
 810408a:	e002      	b.n	8104092 <HAL_DMA_IRQHandler+0x222>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810408c:	680b      	ldr	r3, [r1, #0]
 810408e:	07da      	lsls	r2, r3, #31
 8104090:	d504      	bpl.n	810409c <HAL_DMA_IRQHandler+0x22c>
          if (++count > timeout)
 8104092:	9b01      	ldr	r3, [sp, #4]
 8104094:	3301      	adds	r3, #1
 8104096:	42bb      	cmp	r3, r7
 8104098:	9301      	str	r3, [sp, #4]
 810409a:	d9f7      	bls.n	810408c <HAL_DMA_IRQHandler+0x21c>
        __HAL_UNLOCK(hdma);
 810409c:	2300      	movs	r3, #0
 810409e:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81040a2:	680b      	ldr	r3, [r1, #0]
 81040a4:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 81040a6:	bf4c      	ite	mi
 81040a8:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 81040aa:	2301      	movpl	r3, #1
 81040ac:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 81040b0:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 81040b4:	2b00      	cmp	r3, #0
 81040b6:	f43f af4a 	beq.w	8103f4e <HAL_DMA_IRQHandler+0xde>
          hdma->XferCpltCallback(hdma);
 81040ba:	4640      	mov	r0, r8
}
 81040bc:	b002      	add	sp, #8
 81040be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 81040c2:	4718      	bx	r3
 81040c4:	10000000 	.word	0x10000000
 81040c8:	40020010 	.word	0x40020010
 81040cc:	58025408 	.word	0x58025408
 81040d0:	5802541c 	.word	0x5802541c
 81040d4:	1b4e81b5 	.word	0x1b4e81b5
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81040d8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 81040da:	2608      	movs	r6, #8
 81040dc:	f001 021f 	and.w	r2, r1, #31
 81040e0:	4096      	lsls	r6, r2
 81040e2:	4234      	tst	r4, r6
 81040e4:	f000 809c 	beq.w	8104220 <HAL_DMA_IRQHandler+0x3b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81040e8:	6818      	ldr	r0, [r3, #0]
 81040ea:	0740      	lsls	r0, r0, #29
 81040ec:	d50a      	bpl.n	8104104 <HAL_DMA_IRQHandler+0x294>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81040ee:	6818      	ldr	r0, [r3, #0]
 81040f0:	f020 0004 	bic.w	r0, r0, #4
 81040f4:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81040f6:	60ae      	str	r6, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81040f8:	f8d8 6054 	ldr.w	r6, [r8, #84]	; 0x54
 81040fc:	f046 0601 	orr.w	r6, r6, #1
 8104100:	f8c8 6054 	str.w	r6, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104104:	fa24 f602 	lsr.w	r6, r4, r2
 8104108:	07f6      	lsls	r6, r6, #31
 810410a:	d54c      	bpl.n	81041a6 <HAL_DMA_IRQHandler+0x336>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810410c:	4e9a      	ldr	r6, [pc, #616]	; (8104378 <HAL_DMA_IRQHandler+0x508>)
 810410e:	42b3      	cmp	r3, r6
 8104110:	d03d      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104112:	3618      	adds	r6, #24
 8104114:	42b3      	cmp	r3, r6
 8104116:	d03a      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104118:	3618      	adds	r6, #24
 810411a:	42b3      	cmp	r3, r6
 810411c:	d037      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 810411e:	3618      	adds	r6, #24
 8104120:	42b3      	cmp	r3, r6
 8104122:	d034      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104124:	3618      	adds	r6, #24
 8104126:	42b3      	cmp	r3, r6
 8104128:	d031      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 810412a:	3618      	adds	r6, #24
 810412c:	42b3      	cmp	r3, r6
 810412e:	d02e      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104130:	3618      	adds	r6, #24
 8104132:	42b3      	cmp	r3, r6
 8104134:	d02b      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104136:	3618      	adds	r6, #24
 8104138:	42b3      	cmp	r3, r6
 810413a:	d028      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 810413c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8104140:	42b3      	cmp	r3, r6
 8104142:	d024      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104144:	3618      	adds	r6, #24
 8104146:	42b3      	cmp	r3, r6
 8104148:	d021      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 810414a:	3618      	adds	r6, #24
 810414c:	42b3      	cmp	r3, r6
 810414e:	d01e      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104150:	3618      	adds	r6, #24
 8104152:	42b3      	cmp	r3, r6
 8104154:	d01b      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104156:	3618      	adds	r6, #24
 8104158:	42b3      	cmp	r3, r6
 810415a:	d018      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 810415c:	3618      	adds	r6, #24
 810415e:	42b3      	cmp	r3, r6
 8104160:	d015      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104162:	3618      	adds	r6, #24
 8104164:	42b3      	cmp	r3, r6
 8104166:	d012      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 8104168:	3618      	adds	r6, #24
 810416a:	42b3      	cmp	r3, r6
 810416c:	d00f      	beq.n	810418e <HAL_DMA_IRQHandler+0x31e>
 810416e:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104170:	2604      	movs	r6, #4
 8104172:	4096      	lsls	r6, r2
 8104174:	4226      	tst	r6, r4
 8104176:	d14c      	bne.n	8104212 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104178:	2610      	movs	r6, #16
 810417a:	fa06 f202 	lsl.w	r2, r6, r2
 810417e:	4222      	tst	r2, r4
 8104180:	f43f af02 	beq.w	8103f88 <HAL_DMA_IRQHandler+0x118>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8104184:	681e      	ldr	r6, [r3, #0]
 8104186:	0770      	lsls	r0, r6, #29
 8104188:	f57f aefe 	bpl.w	8103f88 <HAL_DMA_IRQHandler+0x118>
 810418c:	e09b      	b.n	81042c6 <HAL_DMA_IRQHandler+0x456>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810418e:	695e      	ldr	r6, [r3, #20]
 8104190:	0630      	lsls	r0, r6, #24
 8104192:	d508      	bpl.n	81041a6 <HAL_DMA_IRQHandler+0x336>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104194:	2601      	movs	r6, #1
 8104196:	4096      	lsls	r6, r2
 8104198:	60ae      	str	r6, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 810419a:	f8d8 6054 	ldr.w	r6, [r8, #84]	; 0x54
 810419e:	f046 0602 	orr.w	r6, r6, #2
 81041a2:	f8c8 6054 	str.w	r6, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81041a6:	2604      	movs	r6, #4
 81041a8:	fa06 f002 	lsl.w	r0, r6, r2
 81041ac:	4220      	tst	r0, r4
 81041ae:	d04b      	beq.n	8104248 <HAL_DMA_IRQHandler+0x3d8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81041b0:	4e71      	ldr	r6, [pc, #452]	; (8104378 <HAL_DMA_IRQHandler+0x508>)
 81041b2:	42b3      	cmp	r3, r6
 81041b4:	d03e      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041b6:	4e71      	ldr	r6, [pc, #452]	; (810437c <HAL_DMA_IRQHandler+0x50c>)
 81041b8:	42b3      	cmp	r3, r6
 81041ba:	d03b      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041bc:	3618      	adds	r6, #24
 81041be:	42b3      	cmp	r3, r6
 81041c0:	d038      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041c2:	3618      	adds	r6, #24
 81041c4:	42b3      	cmp	r3, r6
 81041c6:	d035      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041c8:	3618      	adds	r6, #24
 81041ca:	42b3      	cmp	r3, r6
 81041cc:	d032      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041ce:	3618      	adds	r6, #24
 81041d0:	42b3      	cmp	r3, r6
 81041d2:	d02f      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041d4:	3618      	adds	r6, #24
 81041d6:	42b3      	cmp	r3, r6
 81041d8:	d02c      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041da:	3618      	adds	r6, #24
 81041dc:	42b3      	cmp	r3, r6
 81041de:	d029      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041e0:	f506 7656 	add.w	r6, r6, #856	; 0x358
 81041e4:	42b3      	cmp	r3, r6
 81041e6:	d025      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041e8:	3618      	adds	r6, #24
 81041ea:	42b3      	cmp	r3, r6
 81041ec:	d022      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041ee:	3618      	adds	r6, #24
 81041f0:	42b3      	cmp	r3, r6
 81041f2:	d01f      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041f4:	3618      	adds	r6, #24
 81041f6:	42b3      	cmp	r3, r6
 81041f8:	d01c      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 81041fa:	3618      	adds	r6, #24
 81041fc:	42b3      	cmp	r3, r6
 81041fe:	d019      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 8104200:	3618      	adds	r6, #24
 8104202:	42b3      	cmp	r3, r6
 8104204:	d016      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 8104206:	3618      	adds	r6, #24
 8104208:	42b3      	cmp	r3, r6
 810420a:	d013      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 810420c:	3618      	adds	r6, #24
 810420e:	42b3      	cmp	r3, r6
 8104210:	d010      	beq.n	8104234 <HAL_DMA_IRQHandler+0x3c4>
 8104212:	681e      	ldr	r6, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104214:	2610      	movs	r6, #16
 8104216:	fa06 f202 	lsl.w	r2, r6, r2
 810421a:	4214      	tst	r4, r2
 810421c:	d1b2      	bne.n	8104184 <HAL_DMA_IRQHandler+0x314>
 810421e:	e6b3      	b.n	8103f88 <HAL_DMA_IRQHandler+0x118>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104220:	fa24 f602 	lsr.w	r6, r4, r2
 8104224:	07f6      	lsls	r6, r6, #31
 8104226:	d4b2      	bmi.n	810418e <HAL_DMA_IRQHandler+0x31e>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104228:	2604      	movs	r6, #4
 810422a:	fa06 f002 	lsl.w	r0, r6, r2
 810422e:	4204      	tst	r4, r0
 8104230:	f000 80b8 	beq.w	81043a4 <HAL_DMA_IRQHandler+0x534>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8104234:	681e      	ldr	r6, [r3, #0]
 8104236:	07b6      	lsls	r6, r6, #30
 8104238:	d506      	bpl.n	8104248 <HAL_DMA_IRQHandler+0x3d8>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 810423a:	60a8      	str	r0, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 810423c:	f8d8 6054 	ldr.w	r6, [r8, #84]	; 0x54
 8104240:	f046 0604 	orr.w	r6, r6, #4
 8104244:	f8c8 6054 	str.w	r6, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104248:	2610      	movs	r6, #16
 810424a:	fa06 f202 	lsl.w	r2, r6, r2
 810424e:	4222      	tst	r2, r4
 8104250:	f43f ae9a 	beq.w	8103f88 <HAL_DMA_IRQHandler+0x118>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8104254:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8104258:	f506 3600 	add.w	r6, r6, #131072	; 0x20000
 810425c:	42b3      	cmp	r3, r6
 810425e:	d02e      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 8104260:	4e46      	ldr	r6, [pc, #280]	; (810437c <HAL_DMA_IRQHandler+0x50c>)
 8104262:	42b3      	cmp	r3, r6
 8104264:	d02b      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 8104266:	3618      	adds	r6, #24
 8104268:	42b3      	cmp	r3, r6
 810426a:	d028      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 810426c:	3618      	adds	r6, #24
 810426e:	42b3      	cmp	r3, r6
 8104270:	d025      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 8104272:	3618      	adds	r6, #24
 8104274:	42b3      	cmp	r3, r6
 8104276:	d022      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 8104278:	3618      	adds	r6, #24
 810427a:	42b3      	cmp	r3, r6
 810427c:	d01f      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 810427e:	3618      	adds	r6, #24
 8104280:	42b3      	cmp	r3, r6
 8104282:	d01c      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 8104284:	3618      	adds	r6, #24
 8104286:	42b3      	cmp	r3, r6
 8104288:	d019      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 810428a:	f506 7656 	add.w	r6, r6, #856	; 0x358
 810428e:	42b3      	cmp	r3, r6
 8104290:	d015      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 8104292:	3618      	adds	r6, #24
 8104294:	42b3      	cmp	r3, r6
 8104296:	d012      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 8104298:	3618      	adds	r6, #24
 810429a:	42b3      	cmp	r3, r6
 810429c:	d00f      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 810429e:	3618      	adds	r6, #24
 81042a0:	42b3      	cmp	r3, r6
 81042a2:	d00c      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 81042a4:	3618      	adds	r6, #24
 81042a6:	42b3      	cmp	r3, r6
 81042a8:	d009      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 81042aa:	3618      	adds	r6, #24
 81042ac:	42b3      	cmp	r3, r6
 81042ae:	d006      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 81042b0:	3618      	adds	r6, #24
 81042b2:	42b3      	cmp	r3, r6
 81042b4:	d003      	beq.n	81042be <HAL_DMA_IRQHandler+0x44e>
 81042b6:	3618      	adds	r6, #24
 81042b8:	42b3      	cmp	r3, r6
 81042ba:	f47f af63 	bne.w	8104184 <HAL_DMA_IRQHandler+0x314>
 81042be:	681e      	ldr	r6, [r3, #0]
 81042c0:	0736      	lsls	r6, r6, #28
 81042c2:	f57f ae61 	bpl.w	8103f88 <HAL_DMA_IRQHandler+0x118>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81042c6:	60aa      	str	r2, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81042c8:	681a      	ldr	r2, [r3, #0]
 81042ca:	0352      	lsls	r2, r2, #13
 81042cc:	d428      	bmi.n	8104320 <HAL_DMA_IRQHandler+0x4b0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81042ce:	681a      	ldr	r2, [r3, #0]
 81042d0:	05d0      	lsls	r0, r2, #23
 81042d2:	d403      	bmi.n	81042dc <HAL_DMA_IRQHandler+0x46c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81042d4:	681a      	ldr	r2, [r3, #0]
 81042d6:	f022 0208 	bic.w	r2, r2, #8
 81042da:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 81042dc:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 81042e0:	2b00      	cmp	r3, #0
 81042e2:	f43f ae51 	beq.w	8103f88 <HAL_DMA_IRQHandler+0x118>
            hdma->XferHalfCpltCallback(hdma);
 81042e6:	4640      	mov	r0, r8
 81042e8:	4798      	blx	r3
 81042ea:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 81042ee:	e64b      	b.n	8103f88 <HAL_DMA_IRQHandler+0x118>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81042f0:	6822      	ldr	r2, [r4, #0]
 81042f2:	06d2      	lsls	r2, r2, #27
 81042f4:	f57f ae95 	bpl.w	8104022 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81042f8:	60ab      	str	r3, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 81042fa:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 81042fe:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8104300:	6823      	ldr	r3, [r4, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8104302:	d015      	beq.n	8104330 <HAL_DMA_IRQHandler+0x4c0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104304:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104308:	6823      	ldr	r3, [r4, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810430a:	d039      	beq.n	8104380 <HAL_DMA_IRQHandler+0x510>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810430c:	0318      	lsls	r0, r3, #12
 810430e:	d544      	bpl.n	810439a <HAL_DMA_IRQHandler+0x52a>
          if(hdma->XferCpltCallback != NULL)
 8104310:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8104314:	2b00      	cmp	r3, #0
 8104316:	f43f ae84 	beq.w	8104022 <HAL_DMA_IRQHandler+0x1b2>
            hdma->XferCpltCallback(hdma);
 810431a:	4640      	mov	r0, r8
 810431c:	4798      	blx	r3
 810431e:	e680      	b.n	8104022 <HAL_DMA_IRQHandler+0x1b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	031e      	lsls	r6, r3, #12
 8104324:	d5da      	bpl.n	81042dc <HAL_DMA_IRQHandler+0x46c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8104326:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 810432a:	2b00      	cmp	r3, #0
 810432c:	d1db      	bne.n	81042e6 <HAL_DMA_IRQHandler+0x476>
 810432e:	e62b      	b.n	8103f88 <HAL_DMA_IRQHandler+0x118>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8104330:	f023 0316 	bic.w	r3, r3, #22
 8104334:	6023      	str	r3, [r4, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104336:	6963      	ldr	r3, [r4, #20]
 8104338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810433c:	6163      	str	r3, [r4, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810433e:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8104342:	2b00      	cmp	r3, #0
 8104344:	d035      	beq.n	81043b2 <HAL_DMA_IRQHandler+0x542>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104346:	6823      	ldr	r3, [r4, #0]
 8104348:	f023 0308 	bic.w	r3, r3, #8
 810434c:	6023      	str	r3, [r4, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810434e:	233f      	movs	r3, #63	; 0x3f
          if(hdma->XferAbortCallback != NULL)
 8104350:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104354:	fa03 f101 	lsl.w	r1, r3, r1
          __HAL_UNLOCK(hdma);
 8104358:	2400      	movs	r4, #0
          hdma->State = HAL_DMA_STATE_READY;
 810435a:	2301      	movs	r3, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810435c:	60a9      	str	r1, [r5, #8]
          __HAL_UNLOCK(hdma);
 810435e:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8104362:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8104366:	2a00      	cmp	r2, #0
 8104368:	f43f adf1 	beq.w	8103f4e <HAL_DMA_IRQHandler+0xde>
        hdma->XferErrorCallback(hdma);
 810436c:	4640      	mov	r0, r8
}
 810436e:	b002      	add	sp, #8
 8104370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8104374:	4710      	bx	r2
 8104376:	bf00      	nop
 8104378:	40020010 	.word	0x40020010
 810437c:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104380:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8104384:	d1c4      	bne.n	8104310 <HAL_DMA_IRQHandler+0x4a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8104386:	6822      	ldr	r2, [r4, #0]
 8104388:	f022 0210 	bic.w	r2, r2, #16
 810438c:	6022      	str	r2, [r4, #0]
            hdma->State = HAL_DMA_STATE_READY;
 810438e:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8104390:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8104394:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
 8104398:	e7ba      	b.n	8104310 <HAL_DMA_IRQHandler+0x4a0>
            if(hdma->XferM1CpltCallback != NULL)
 810439a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 810439e:	2b00      	cmp	r3, #0
 81043a0:	d1bb      	bne.n	810431a <HAL_DMA_IRQHandler+0x4aa>
 81043a2:	e63e      	b.n	8104022 <HAL_DMA_IRQHandler+0x1b2>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81043a4:	2610      	movs	r6, #16
 81043a6:	fa06 f202 	lsl.w	r2, r6, r2
 81043aa:	4214      	tst	r4, r2
 81043ac:	f43f adec 	beq.w	8103f88 <HAL_DMA_IRQHandler+0x118>
 81043b0:	e785      	b.n	81042be <HAL_DMA_IRQHandler+0x44e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81043b2:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 81043b6:	2b00      	cmp	r3, #0
 81043b8:	d1c5      	bne.n	8104346 <HAL_DMA_IRQHandler+0x4d6>
 81043ba:	e7c8      	b.n	810434e <HAL_DMA_IRQHandler+0x4de>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81043bc:	2602      	movs	r6, #2
 81043be:	40a6      	lsls	r6, r4
 81043c0:	420e      	tst	r6, r1
 81043c2:	d00c      	beq.n	81043de <HAL_DMA_IRQHandler+0x56e>
 81043c4:	0790      	lsls	r0, r2, #30
 81043c6:	d50a      	bpl.n	81043de <HAL_DMA_IRQHandler+0x56e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043c8:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81043ca:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043cc:	d52f      	bpl.n	810442e <HAL_DMA_IRQHandler+0x5be>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81043ce:	03d3      	lsls	r3, r2, #15
 81043d0:	d439      	bmi.n	8104446 <HAL_DMA_IRQHandler+0x5d6>
          if(hdma->XferM1CpltCallback != NULL)
 81043d2:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 81043d6:	2b00      	cmp	r3, #0
 81043d8:	f47f ae6f 	bne.w	81040ba <HAL_DMA_IRQHandler+0x24a>
 81043dc:	e5b7      	b.n	8103f4e <HAL_DMA_IRQHandler+0xde>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81043de:	2608      	movs	r6, #8
 81043e0:	40a6      	lsls	r6, r4
 81043e2:	420e      	tst	r6, r1
 81043e4:	f43f adb3 	beq.w	8103f4e <HAL_DMA_IRQHandler+0xde>
 81043e8:	0717      	lsls	r7, r2, #28
 81043ea:	f57f adb0 	bpl.w	8103f4e <HAL_DMA_IRQHandler+0xde>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 81043ee:	681a      	ldr	r2, [r3, #0]
 81043f0:	f022 020e 	bic.w	r2, r2, #14
 81043f4:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81043f6:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 81043f8:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81043fc:	fa03 f404 	lsl.w	r4, r3, r4
      __HAL_UNLOCK(hdma);
 8104400:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104402:	606c      	str	r4, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8104404:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8104408:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 810440c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8104410:	2a00      	cmp	r2, #0
 8104412:	d1ab      	bne.n	810436c <HAL_DMA_IRQHandler+0x4fc>
 8104414:	e59b      	b.n	8103f4e <HAL_DMA_IRQHandler+0xde>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104416:	0694      	lsls	r4, r2, #26
 8104418:	d403      	bmi.n	8104422 <HAL_DMA_IRQHandler+0x5b2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810441a:	681a      	ldr	r2, [r3, #0]
 810441c:	f022 0204 	bic.w	r2, r2, #4
 8104420:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8104422:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8104426:	2b00      	cmp	r3, #0
 8104428:	f47f ae47 	bne.w	81040ba <HAL_DMA_IRQHandler+0x24a>
 810442c:	e58f      	b.n	8103f4e <HAL_DMA_IRQHandler+0xde>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810442e:	f012 0220 	ands.w	r2, r2, #32
 8104432:	d108      	bne.n	8104446 <HAL_DMA_IRQHandler+0x5d6>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104434:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8104436:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104438:	f021 010a 	bic.w	r1, r1, #10
 810443c:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 810443e:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8104442:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8104446:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 810444a:	2b00      	cmp	r3, #0
 810444c:	f47f ae35 	bne.w	81040ba <HAL_DMA_IRQHandler+0x24a>
 8104450:	e57d      	b.n	8103f4e <HAL_DMA_IRQHandler+0xde>
 8104452:	bf00      	nop

08104454 <HAL_DMA_GetState>:
  return hdma->State;
 8104454:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8104458:	4770      	bx	lr
 810445a:	bf00      	nop

0810445c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 810445c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 810445e:	4770      	bx	lr

08104460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104464:	680d      	ldr	r5, [r1, #0]
{
 8104466:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104468:	2d00      	cmp	r5, #0
 810446a:	f000 80b1 	beq.w	81045d0 <HAL_GPIO_Init+0x170>
 810446e:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104472:	4f93      	ldr	r7, [pc, #588]	; (81046c0 <HAL_GPIO_Init+0x260>)
  uint32_t position = 0x00U;
 8104474:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104476:	2201      	movs	r2, #1
 8104478:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 810447a:	ea12 0e05 	ands.w	lr, r2, r5
 810447e:	f000 80a0 	beq.w	81045c2 <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104482:	684c      	ldr	r4, [r1, #4]
 8104484:	f024 0810 	bic.w	r8, r4, #16
 8104488:	f108 36ff 	add.w	r6, r8, #4294967295
 810448c:	2e01      	cmp	r6, #1
 810448e:	f240 80a2 	bls.w	81045d6 <HAL_GPIO_Init+0x176>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104492:	688a      	ldr	r2, [r1, #8]
      temp = GPIOx->PUPDR;
 8104494:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104498:	fa02 f60c 	lsl.w	r6, r2, ip
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810449c:	2203      	movs	r2, #3
 810449e:	fa02 f20c 	lsl.w	r2, r2, ip
 81044a2:	ea28 0802 	bic.w	r8, r8, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81044a6:	ea46 0608 	orr.w	r6, r6, r8
      GPIOx->PUPDR = temp;
 81044aa:	60c6      	str	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81044ac:	43d2      	mvns	r2, r2
      temp = GPIOx->MODER;
 81044ae:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81044b0:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81044b2:	f004 0203 	and.w	r2, r4, #3
 81044b6:	fa02 f20c 	lsl.w	r2, r2, ip
 81044ba:	4332      	orrs	r2, r6
      GPIOx->MODER = temp;
 81044bc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81044be:	00e2      	lsls	r2, r4, #3
 81044c0:	d57f      	bpl.n	81045c2 <HAL_GPIO_Init+0x162>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81044c2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 81044c6:	f042 0202 	orr.w	r2, r2, #2
 81044ca:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 81044ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 81044d2:	f002 0202 	and.w	r2, r2, #2
 81044d6:	9201      	str	r2, [sp, #4]
 81044d8:	9a01      	ldr	r2, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 81044da:	f023 0203 	bic.w	r2, r3, #3
 81044de:	f102 42b0 	add.w	r2, r2, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81044e2:	f003 0903 	and.w	r9, r3, #3
 81044e6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 81044ea:	260f      	movs	r6, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 81044ec:	f8d2 8408 	ldr.w	r8, [r2, #1032]	; 0x408
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81044f0:	fa06 f609 	lsl.w	r6, r6, r9
 81044f4:	ea28 0a06 	bic.w	sl, r8, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81044f8:	4e72      	ldr	r6, [pc, #456]	; (81046c4 <HAL_GPIO_Init+0x264>)
 81044fa:	42b0      	cmp	r0, r6
 81044fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8104500:	d02d      	beq.n	810455e <HAL_GPIO_Init+0xfe>
 8104502:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8104506:	42b0      	cmp	r0, r6
 8104508:	f000 80a9 	beq.w	810465e <HAL_GPIO_Init+0x1fe>
 810450c:	4e6e      	ldr	r6, [pc, #440]	; (81046c8 <HAL_GPIO_Init+0x268>)
 810450e:	42b0      	cmp	r0, r6
 8104510:	f000 80ac 	beq.w	810466c <HAL_GPIO_Init+0x20c>
 8104514:	4e6d      	ldr	r6, [pc, #436]	; (81046cc <HAL_GPIO_Init+0x26c>)
 8104516:	42b0      	cmp	r0, r6
 8104518:	f000 809a 	beq.w	8104650 <HAL_GPIO_Init+0x1f0>
 810451c:	4e6c      	ldr	r6, [pc, #432]	; (81046d0 <HAL_GPIO_Init+0x270>)
 810451e:	42b0      	cmp	r0, r6
 8104520:	f000 80b2 	beq.w	8104688 <HAL_GPIO_Init+0x228>
 8104524:	4e6b      	ldr	r6, [pc, #428]	; (81046d4 <HAL_GPIO_Init+0x274>)
 8104526:	42b0      	cmp	r0, r6
 8104528:	f000 80b5 	beq.w	8104696 <HAL_GPIO_Init+0x236>
 810452c:	4e6a      	ldr	r6, [pc, #424]	; (81046d8 <HAL_GPIO_Init+0x278>)
 810452e:	42b0      	cmp	r0, r6
 8104530:	f000 80a3 	beq.w	810467a <HAL_GPIO_Init+0x21a>
 8104534:	4e69      	ldr	r6, [pc, #420]	; (81046dc <HAL_GPIO_Init+0x27c>)
 8104536:	42b0      	cmp	r0, r6
 8104538:	f000 80b4 	beq.w	81046a4 <HAL_GPIO_Init+0x244>
 810453c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 81046e0 <HAL_GPIO_Init+0x280>
 8104540:	4540      	cmp	r0, r8
 8104542:	f000 80b6 	beq.w	81046b2 <HAL_GPIO_Init+0x252>
 8104546:	f8df 819c 	ldr.w	r8, [pc, #412]	; 81046e4 <HAL_GPIO_Init+0x284>
 810454a:	4540      	cmp	r0, r8
 810454c:	bf0c      	ite	eq
 810454e:	f04f 0809 	moveq.w	r8, #9
 8104552:	f04f 080a 	movne.w	r8, #10
 8104556:	fa08 f909 	lsl.w	r9, r8, r9
 810455a:	ea4a 0a09 	orr.w	sl, sl, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 810455e:	f8c2 a008 	str.w	sl, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8104566:	03e6      	lsls	r6, r4, #15
        temp = EXTI_CurrentCPU->IMR1;
 8104568:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
        temp &= ~(iocurrent);
 810456c:	ea6f 080e 	mvn.w	r8, lr
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104570:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8104574:	bf54      	ite	pl
 8104576:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 810457a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 810457e:	f8c6 20c0 	str.w	r2, [r6, #192]	; 0xc0

        temp = EXTI_CurrentCPU->EMR1;
 8104582:	f8d6 60c4 	ldr.w	r6, [r6, #196]	; 0xc4
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8104586:	03a2      	lsls	r2, r4, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 810458c:	bf54      	ite	pl
 810458e:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8104592:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI_CurrentCPU->EMR1 = temp;
 8104596:	f8c2 60c4 	str.w	r6, [r2, #196]	; 0xc4

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810459a:	6816      	ldr	r6, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810459c:	02e2      	lsls	r2, r4, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 810459e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 81045a2:	bf54      	ite	pl
 81045a4:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 81045a8:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->RTSR1 = temp;
 81045ac:	6016      	str	r6, [r2, #0]

        temp = EXTI->FTSR1;
 81045ae:	6852      	ldr	r2, [r2, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81045b0:	02a4      	lsls	r4, r4, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 81045b2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 81045b6:	bf54      	ite	pl
 81045b8:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 81045bc:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->FTSR1 = temp;
 81045c0:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 81045c2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81045c4:	fa35 f203 	lsrs.w	r2, r5, r3
 81045c8:	f10c 0c02 	add.w	ip, ip, #2
 81045cc:	f47f af53 	bne.w	8104476 <HAL_GPIO_Init+0x16>
  }
}
 81045d0:	b003      	add	sp, #12
 81045d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 81045d6:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81045da:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81045dc:	f04f 0903 	mov.w	r9, #3
 81045e0:	fa09 f90c 	lsl.w	r9, r9, ip
 81045e4:	ea2a 0a09 	bic.w	sl, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 81045e8:	fa06 f60c 	lsl.w	r6, r6, ip
 81045ec:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 81045f0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 81045f2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81045f4:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81045f8:	f3c4 1600 	ubfx	r6, r4, #4, #1
 81045fc:	409e      	lsls	r6, r3
 81045fe:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 8104600:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8104602:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104604:	ea26 0a09 	bic.w	sl, r6, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104608:	688e      	ldr	r6, [r1, #8]
 810460a:	fa06 f60c 	lsl.w	r6, r6, ip
 810460e:	ea46 060a 	orr.w	r6, r6, sl
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104612:	f1b8 0f02 	cmp.w	r8, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104616:	ea6f 0209 	mvn.w	r2, r9
      GPIOx->PUPDR = temp;
 810461a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810461c:	f47f af47 	bne.w	81044ae <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 8104620:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8104624:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104628:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 810462a:	f8d8 a020 	ldr.w	sl, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810462e:	f003 0907 	and.w	r9, r3, #7
 8104632:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8104636:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810463a:	fa06 f609 	lsl.w	r6, r6, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810463e:	fa0b f909 	lsl.w	r9, fp, r9
 8104642:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104646:	ea46 0609 	orr.w	r6, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 810464a:	f8c8 6020 	str.w	r6, [r8, #32]
 810464e:	e72e      	b.n	81044ae <HAL_GPIO_Init+0x4e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104650:	f04f 0803 	mov.w	r8, #3
 8104654:	fa08 f909 	lsl.w	r9, r8, r9
 8104658:	ea4a 0a09 	orr.w	sl, sl, r9
 810465c:	e77f      	b.n	810455e <HAL_GPIO_Init+0xfe>
 810465e:	f04f 0801 	mov.w	r8, #1
 8104662:	fa08 f909 	lsl.w	r9, r8, r9
 8104666:	ea4a 0a09 	orr.w	sl, sl, r9
 810466a:	e778      	b.n	810455e <HAL_GPIO_Init+0xfe>
 810466c:	f04f 0802 	mov.w	r8, #2
 8104670:	fa08 f909 	lsl.w	r9, r8, r9
 8104674:	ea4a 0a09 	orr.w	sl, sl, r9
 8104678:	e771      	b.n	810455e <HAL_GPIO_Init+0xfe>
 810467a:	f04f 0806 	mov.w	r8, #6
 810467e:	fa08 f909 	lsl.w	r9, r8, r9
 8104682:	ea4a 0a09 	orr.w	sl, sl, r9
 8104686:	e76a      	b.n	810455e <HAL_GPIO_Init+0xfe>
 8104688:	f04f 0804 	mov.w	r8, #4
 810468c:	fa08 f909 	lsl.w	r9, r8, r9
 8104690:	ea4a 0a09 	orr.w	sl, sl, r9
 8104694:	e763      	b.n	810455e <HAL_GPIO_Init+0xfe>
 8104696:	f04f 0805 	mov.w	r8, #5
 810469a:	fa08 f909 	lsl.w	r9, r8, r9
 810469e:	ea4a 0a09 	orr.w	sl, sl, r9
 81046a2:	e75c      	b.n	810455e <HAL_GPIO_Init+0xfe>
 81046a4:	f04f 0807 	mov.w	r8, #7
 81046a8:	fa08 f909 	lsl.w	r9, r8, r9
 81046ac:	ea4a 0a09 	orr.w	sl, sl, r9
 81046b0:	e755      	b.n	810455e <HAL_GPIO_Init+0xfe>
 81046b2:	f04f 0808 	mov.w	r8, #8
 81046b6:	fa08 f909 	lsl.w	r9, r8, r9
 81046ba:	ea4a 0a09 	orr.w	sl, sl, r9
 81046be:	e74e      	b.n	810455e <HAL_GPIO_Init+0xfe>
 81046c0:	58024400 	.word	0x58024400
 81046c4:	58020000 	.word	0x58020000
 81046c8:	58020800 	.word	0x58020800
 81046cc:	58020c00 	.word	0x58020c00
 81046d0:	58021000 	.word	0x58021000
 81046d4:	58021400 	.word	0x58021400
 81046d8:	58021800 	.word	0x58021800
 81046dc:	58021c00 	.word	0x58021c00
 81046e0:	58022000 	.word	0x58022000
 81046e4:	58022400 	.word	0x58022400

081046e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81046e8:	b902      	cbnz	r2, 81046ec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81046ea:	0409      	lsls	r1, r1, #16
 81046ec:	6181      	str	r1, [r0, #24]
  }
}
 81046ee:	4770      	bx	lr

081046f0 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 81046f0:	4a04      	ldr	r2, [pc, #16]	; (8104704 <HAL_HSEM_FastTake+0x14>)
 81046f2:	4b05      	ldr	r3, [pc, #20]	; (8104708 <HAL_HSEM_FastTake+0x18>)
 81046f4:	3020      	adds	r0, #32
 81046f6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 81046fa:	1ac0      	subs	r0, r0, r3
 81046fc:	bf18      	it	ne
 81046fe:	2001      	movne	r0, #1
 8104700:	4770      	bx	lr
 8104702:	bf00      	nop
 8104704:	58026400 	.word	0x58026400
 8104708:	80000100 	.word	0x80000100

0810470c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810470c:	4b02      	ldr	r3, [pc, #8]	; (8104718 <HAL_HSEM_Release+0xc>)
 810470e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8104712:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8104716:	4770      	bx	lr
 8104718:	58026400 	.word	0x58026400

0810471c <HAL_HSEM_ActivateNotification>:
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810471c:	4a02      	ldr	r2, [pc, #8]	; (8104728 <HAL_HSEM_ActivateNotification+0xc>)
 810471e:	6913      	ldr	r3, [r2, #16]
 8104720:	4318      	orrs	r0, r3
 8104722:	6110      	str	r0, [r2, #16]
#endif
}
 8104724:	4770      	bx	lr
 8104726:	bf00      	nop
 8104728:	58026500 	.word	0x58026500

0810472c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810472e:	4605      	mov	r5, r0
 8104730:	460e      	mov	r6, r1
 8104732:	4617      	mov	r7, r2
 8104734:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104736:	682c      	ldr	r4, [r5, #0]
 8104738:	d12c      	bne.n	8104794 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 810473a:	69a3      	ldr	r3, [r4, #24]
 810473c:	0799      	lsls	r1, r3, #30
 810473e:	d427      	bmi.n	8104790 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8104740:	69a3      	ldr	r3, [r4, #24]
 8104742:	06da      	lsls	r2, r3, #27
 8104744:	d5f9      	bpl.n	810473a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104746:	69a3      	ldr	r3, [r4, #24]
 8104748:	069a      	lsls	r2, r3, #26
 810474a:	d5fc      	bpl.n	8104746 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810474c:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810474e:	2210      	movs	r2, #16
 8104750:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104752:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8104754:	69a3      	ldr	r3, [r4, #24]
 8104756:	079f      	lsls	r7, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8104758:	bf44      	itt	mi
 810475a:	2300      	movmi	r3, #0
 810475c:	62a3      	strmi	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810475e:	69a3      	ldr	r3, [r4, #24]
 8104760:	07de      	lsls	r6, r3, #31
 8104762:	d403      	bmi.n	810476c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8104764:	69a3      	ldr	r3, [r4, #24]
 8104766:	f043 0301 	orr.w	r3, r3, #1
 810476a:	61a3      	str	r3, [r4, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810476c:	6863      	ldr	r3, [r4, #4]
 810476e:	4919      	ldr	r1, [pc, #100]	; (81047d4 <I2C_WaitOnTXISFlagUntilTimeout+0xa8>)
 8104770:	400b      	ands	r3, r1
 8104772:	6063      	str	r3, [r4, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104774:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104776:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8104778:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810477a:	f043 0304 	orr.w	r3, r3, #4
 810477e:	646b      	str	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104780:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8104784:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104788:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      return HAL_ERROR;
 810478c:	2001      	movs	r0, #1
}
 810478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8104790:	2000      	movs	r0, #0
}
 8104792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104794:	69a3      	ldr	r3, [r4, #24]
 8104796:	079b      	lsls	r3, r3, #30
 8104798:	d4fa      	bmi.n	8104790 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 810479a:	69a3      	ldr	r3, [r4, #24]
 810479c:	06d9      	lsls	r1, r3, #27
 810479e:	d414      	bmi.n	81047ca <I2C_WaitOnTXISFlagUntilTimeout+0x9e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81047a0:	f7fe f9ac 	bl	8102afc <HAL_GetTick>
 81047a4:	1bc0      	subs	r0, r0, r7
 81047a6:	42b0      	cmp	r0, r6
 81047a8:	d801      	bhi.n	81047ae <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 81047aa:	2e00      	cmp	r6, #0
 81047ac:	d1c2      	bne.n	8104734 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81047ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81047b0:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81047b2:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 81047b6:	2120      	movs	r1, #32
 81047b8:	e7e1      	b.n	810477e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81047ba:	f7fe f99f 	bl	8102afc <HAL_GetTick>
 81047be:	1bc0      	subs	r0, r0, r7
 81047c0:	4286      	cmp	r6, r0
 81047c2:	d3f4      	bcc.n	81047ae <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 81047c4:	2e00      	cmp	r6, #0
 81047c6:	d0f2      	beq.n	81047ae <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81047c8:	682c      	ldr	r4, [r5, #0]
 81047ca:	69a3      	ldr	r3, [r4, #24]
 81047cc:	069b      	lsls	r3, r3, #26
 81047ce:	d5f4      	bpl.n	81047ba <I2C_WaitOnTXISFlagUntilTimeout+0x8e>
 81047d0:	e7bc      	b.n	810474c <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 81047d2:	bf00      	nop
 81047d4:	fe00e800 	.word	0xfe00e800

081047d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 81047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81047da:	4605      	mov	r5, r0
 81047dc:	4617      	mov	r7, r2
 81047de:	460e      	mov	r6, r1
 81047e0:	b929      	cbnz	r1, 81047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 81047e2:	e03d      	b.n	8104860 <I2C_WaitOnSTOPFlagUntilTimeout+0x88>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81047e4:	f7fe f98a 	bl	8102afc <HAL_GetTick>
 81047e8:	1bc0      	subs	r0, r0, r7
 81047ea:	4286      	cmp	r6, r0
 81047ec:	d341      	bcc.n	8104872 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81047ee:	682c      	ldr	r4, [r5, #0]
 81047f0:	69a3      	ldr	r3, [r4, #24]
 81047f2:	0698      	lsls	r0, r3, #26
 81047f4:	d443      	bmi.n	810487e <I2C_WaitOnSTOPFlagUntilTimeout+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81047f6:	69a3      	ldr	r3, [r4, #24]
 81047f8:	06d9      	lsls	r1, r3, #27
 81047fa:	d5f3      	bpl.n	81047e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 81047fc:	1c73      	adds	r3, r6, #1
 81047fe:	d124      	bne.n	810484a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104800:	69a3      	ldr	r3, [r4, #24]
 8104802:	069e      	lsls	r6, r3, #26
 8104804:	d5fc      	bpl.n	8104800 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104806:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104808:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810480a:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810480c:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810480e:	69a3      	ldr	r3, [r4, #24]
 8104810:	0799      	lsls	r1, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8104812:	bf44      	itt	mi
 8104814:	2300      	movmi	r3, #0
 8104816:	62a3      	strmi	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8104818:	69a3      	ldr	r3, [r4, #24]
 810481a:	07da      	lsls	r2, r3, #31
 810481c:	d403      	bmi.n	8104826 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810481e:	69a3      	ldr	r3, [r4, #24]
 8104820:	f043 0301 	orr.w	r3, r3, #1
 8104824:	61a3      	str	r3, [r4, #24]
    I2C_RESET_CR2(hi2c);
 8104826:	6863      	ldr	r3, [r4, #4]
 8104828:	4916      	ldr	r1, [pc, #88]	; (8104884 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>)
 810482a:	400b      	ands	r3, r1
 810482c:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810482e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104830:	2200      	movs	r2, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8104832:	2120      	movs	r1, #32
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104834:	f043 0304 	orr.w	r3, r3, #4
 8104838:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 810483a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 810483e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104842:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
      return HAL_ERROR;
 8104846:	2001      	movs	r0, #1
}
 8104848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810484a:	69a3      	ldr	r3, [r4, #24]
 810484c:	0698      	lsls	r0, r3, #26
 810484e:	d4da      	bmi.n	8104806 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104850:	f7fe f954 	bl	8102afc <HAL_GetTick>
 8104854:	1bc0      	subs	r0, r0, r7
 8104856:	4286      	cmp	r6, r0
 8104858:	d30b      	bcc.n	8104872 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
 810485a:	b156      	cbz	r6, 8104872 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810485c:	682c      	ldr	r4, [r5, #0]
 810485e:	e7cd      	b.n	81047fc <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104860:	6804      	ldr	r4, [r0, #0]
 8104862:	69a3      	ldr	r3, [r4, #24]
 8104864:	069b      	lsls	r3, r3, #26
 8104866:	d40a      	bmi.n	810487e <I2C_WaitOnSTOPFlagUntilTimeout+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8104868:	69a3      	ldr	r3, [r4, #24]
 810486a:	06da      	lsls	r2, r3, #27
 810486c:	d4c6      	bmi.n	81047fc <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810486e:	f7fe f945 	bl	8102afc <HAL_GetTick>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104872:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104874:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104876:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 810487a:	2120      	movs	r1, #32
 810487c:	e7dc      	b.n	8104838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  return HAL_OK;
 810487e:	2000      	movs	r0, #0
}
 8104880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8104882:	bf00      	nop
 8104884:	fe00e800 	.word	0xfe00e800

08104888 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8104888:	2800      	cmp	r0, #0
 810488a:	d04f      	beq.n	810492c <HAL_I2C_Init+0xa4>
{
 810488c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 810488e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8104892:	4604      	mov	r4, r0
 8104894:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8104898:	2b00      	cmp	r3, #0
 810489a:	d042      	beq.n	8104922 <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 810489c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 810489e:	2224      	movs	r2, #36	; 0x24
 81048a0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 81048a4:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81048a6:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 81048a8:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81048ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 81048b0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81048b2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81048b4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81048b6:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81048b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81048bc:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81048be:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81048c0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81048c2:	d02a      	beq.n	810491a <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81048c4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81048c8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81048ca:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81048cc:	bf04      	itt	eq
 81048ce:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 81048d2:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81048d4:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81048d6:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81048d8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 81048dc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 81048e0:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81048e2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81048e4:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81048e6:	430a      	orrs	r2, r1
 81048e8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81048ea:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81048ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81048f2:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81048f4:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81048f6:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81048f8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81048fa:	4301      	orrs	r1, r0
 81048fc:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 81048fe:	6819      	ldr	r1, [r3, #0]
 8104900:	f041 0101 	orr.w	r1, r1, #1
 8104904:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104906:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8104908:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810490a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810490c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104910:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104912:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8104916:	4610      	mov	r0, r2
}
 8104918:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810491a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810491e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104920:	e7d8      	b.n	81048d4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8104922:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8104926:	f7fd f9c5 	bl	8101cb4 <HAL_I2C_MspInit>
 810492a:	e7b7      	b.n	810489c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 810492c:	2001      	movs	r0, #1
}
 810492e:	4770      	bx	lr

08104930 <HAL_I2C_Mem_Read>:
{
 8104930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8104934:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8104936:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 810493a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 810493e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8104940:	2b20      	cmp	r3, #32
 8104942:	f040 80a8 	bne.w	8104a96 <HAL_I2C_Mem_Read+0x166>
    if ((pData == NULL) || (Size == 0U))
 8104946:	9b08      	ldr	r3, [sp, #32]
 8104948:	4604      	mov	r4, r0
 810494a:	2b00      	cmp	r3, #0
 810494c:	f000 809d 	beq.w	8104a8a <HAL_I2C_Mem_Read+0x15a>
 8104950:	f1ba 0f00 	cmp.w	sl, #0
 8104954:	f000 8099 	beq.w	8104a8a <HAL_I2C_Mem_Read+0x15a>
    __HAL_LOCK(hi2c);
 8104958:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 810495c:	2b01      	cmp	r3, #1
 810495e:	f000 809a 	beq.w	8104a96 <HAL_I2C_Mem_Read+0x166>
 8104962:	2301      	movs	r3, #1
 8104964:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8104968:	460f      	mov	r7, r1
 810496a:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 810496c:	f7fe f8c6 	bl	8102afc <HAL_GetTick>
 8104970:	4606      	mov	r6, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8104972:	e004      	b.n	810497e <HAL_I2C_Mem_Read+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104974:	f7fe f8c2 	bl	8102afc <HAL_GetTick>
 8104978:	1b80      	subs	r0, r0, r6
 810497a:	2819      	cmp	r0, #25
 810497c:	d876      	bhi.n	8104a6c <HAL_I2C_Mem_Read+0x13c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810497e:	6823      	ldr	r3, [r4, #0]
 8104980:	6998      	ldr	r0, [r3, #24]
 8104982:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8104986:	d1f5      	bne.n	8104974 <HAL_I2C_Mem_Read+0x44>
    hi2c->pBuffPtr  = pData;
 8104988:	9a08      	ldr	r2, [sp, #32]
 810498a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810498c:	2222      	movs	r2, #34	; 0x22
 810498e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8104992:	2240      	movs	r2, #64	; 0x40
 8104994:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104998:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 810499a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 810499e:	685a      	ldr	r2, [r3, #4]
 81049a0:	4978      	ldr	r1, [pc, #480]	; (8104b84 <HAL_I2C_Mem_Read+0x254>)
    hi2c->XferISR   = NULL;
 81049a2:	6360      	str	r0, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 81049a4:	400a      	ands	r2, r1
 81049a6:	fa5f f188 	uxtb.w	r1, r8
 81049aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 81049ae:	f3c7 0709 	ubfx	r7, r7, #0, #10
 81049b2:	433a      	orrs	r2, r7
 81049b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 81049b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 81049bc:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81049be:	4629      	mov	r1, r5
 81049c0:	4632      	mov	r2, r6
 81049c2:	4620      	mov	r0, r4
 81049c4:	f7ff feb2 	bl	810472c <I2C_WaitOnTXISFlagUntilTimeout>
 81049c8:	2800      	cmp	r0, #0
 81049ca:	f040 80a7 	bne.w	8104b1c <HAL_I2C_Mem_Read+0x1ec>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81049ce:	f1b8 0f01 	cmp.w	r8, #1
 81049d2:	f040 8097 	bne.w	8104b04 <HAL_I2C_Mem_Read+0x1d4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81049d6:	6822      	ldr	r2, [r4, #0]
 81049d8:	fa5f f389 	uxtb.w	r3, r9
 81049dc:	6293      	str	r3, [r2, #40]	; 0x28
 81049de:	1c68      	adds	r0, r5, #1
 81049e0:	d15c      	bne.n	8104a9c <HAL_I2C_Mem_Read+0x16c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 81049e2:	6993      	ldr	r3, [r2, #24]
 81049e4:	0659      	lsls	r1, r3, #25
 81049e6:	d5fc      	bpl.n	81049e2 <HAL_I2C_Mem_Read+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81049e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 81049ea:	b29b      	uxth	r3, r3
 81049ec:	2bff      	cmp	r3, #255	; 0xff
 81049ee:	d87f      	bhi.n	8104af0 <HAL_I2C_Mem_Read+0x1c0>
      hi2c->XferSize = hi2c->XferCount;
 81049f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 81049f2:	4864      	ldr	r0, [pc, #400]	; (8104b84 <HAL_I2C_Mem_Read+0x254>)
      hi2c->XferSize = hi2c->XferCount;
 81049f4:	b29b      	uxth	r3, r3
 81049f6:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 81049f8:	b2d9      	uxtb	r1, r3
 81049fa:	6853      	ldr	r3, [r2, #4]
 81049fc:	4003      	ands	r3, r0
 81049fe:	433b      	orrs	r3, r7
 8104a00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8104a04:	f043 4302 	orr.w	r3, r3, #2181038080	; 0x82000000
 8104a08:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8104a0c:	6053      	str	r3, [r2, #4]
 8104a0e:	1c68      	adds	r0, r5, #1
 8104a10:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8104b90 <HAL_I2C_Mem_Read+0x260>
 8104a14:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8104b94 <HAL_I2C_Mem_Read+0x264>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104a18:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8104a1c:	d11c      	bne.n	8104a58 <HAL_I2C_Mem_Read+0x128>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104a1e:	6993      	ldr	r3, [r2, #24]
 8104a20:	0759      	lsls	r1, r3, #29
 8104a22:	d5fc      	bpl.n	8104a1e <HAL_I2C_Mem_Read+0xee>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8104a26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8104a28:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8104a2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8104a2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8104a2e:	3b01      	subs	r3, #1
 8104a30:	b29b      	uxth	r3, r3
 8104a32:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8104a34:	3201      	adds	r2, #1
      hi2c->XferSize--;
 8104a36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8104a38:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104a3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8104a3c:	3b01      	subs	r3, #1
 8104a3e:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104a40:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8104a42:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104a44:	b10a      	cbz	r2, 8104a4a <HAL_I2C_Mem_Read+0x11a>
 8104a46:	2b00      	cmp	r3, #0
 8104a48:	d03e      	beq.n	8104ac8 <HAL_I2C_Mem_Read+0x198>
    } while (hi2c->XferCount > 0U);
 8104a4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8104a4c:	b29b      	uxth	r3, r3
 8104a4e:	2b00      	cmp	r3, #0
 8104a50:	d077      	beq.n	8104b42 <HAL_I2C_Mem_Read+0x212>
 8104a52:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104a54:	6822      	ldr	r2, [r4, #0]
 8104a56:	d0e2      	beq.n	8104a1e <HAL_I2C_Mem_Read+0xee>
 8104a58:	6993      	ldr	r3, [r2, #24]
 8104a5a:	075b      	lsls	r3, r3, #29
 8104a5c:	d4e2      	bmi.n	8104a24 <HAL_I2C_Mem_Read+0xf4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104a5e:	f7fe f84d 	bl	8102afc <HAL_GetTick>
 8104a62:	1b80      	subs	r0, r0, r6
 8104a64:	4285      	cmp	r5, r0
 8104a66:	d301      	bcc.n	8104a6c <HAL_I2C_Mem_Read+0x13c>
 8104a68:	2d00      	cmp	r5, #0
 8104a6a:	d1f2      	bne.n	8104a52 <HAL_I2C_Mem_Read+0x122>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104a6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104a6e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104a70:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8104a74:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104a76:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8104a78:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8104a7c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104a80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 8104a84:	2001      	movs	r0, #1
}
 8104a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8104a8e:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8104a90:	2001      	movs	r0, #1
}
 8104a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8104a96:	2002      	movs	r0, #2
}
 8104a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104a9c:	6993      	ldr	r3, [r2, #24]
 8104a9e:	065b      	lsls	r3, r3, #25
 8104aa0:	d4a2      	bmi.n	81049e8 <HAL_I2C_Mem_Read+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104aa2:	f7fe f82b 	bl	8102afc <HAL_GetTick>
 8104aa6:	1b80      	subs	r0, r0, r6
 8104aa8:	4285      	cmp	r5, r0
 8104aaa:	d35e      	bcc.n	8104b6a <HAL_I2C_Mem_Read+0x23a>
 8104aac:	2d00      	cmp	r5, #0
 8104aae:	d05c      	beq.n	8104b6a <HAL_I2C_Mem_Read+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104ab0:	6822      	ldr	r2, [r4, #0]
 8104ab2:	e794      	b.n	81049de <HAL_I2C_Mem_Read+0xae>
 8104ab4:	6993      	ldr	r3, [r2, #24]
 8104ab6:	061b      	lsls	r3, r3, #24
 8104ab8:	d40c      	bmi.n	8104ad4 <HAL_I2C_Mem_Read+0x1a4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104aba:	f7fe f81f 	bl	8102afc <HAL_GetTick>
 8104abe:	1b80      	subs	r0, r0, r6
 8104ac0:	4285      	cmp	r5, r0
 8104ac2:	d3d3      	bcc.n	8104a6c <HAL_I2C_Mem_Read+0x13c>
 8104ac4:	2d00      	cmp	r5, #0
 8104ac6:	d0d1      	beq.n	8104a6c <HAL_I2C_Mem_Read+0x13c>
 8104ac8:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104aca:	6822      	ldr	r2, [r4, #0]
 8104acc:	d1f2      	bne.n	8104ab4 <HAL_I2C_Mem_Read+0x184>
 8104ace:	6993      	ldr	r3, [r2, #24]
 8104ad0:	0619      	lsls	r1, r3, #24
 8104ad2:	d5fc      	bpl.n	8104ace <HAL_I2C_Mem_Read+0x19e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104ad4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8104ad6:	b29b      	uxth	r3, r3
 8104ad8:	2bff      	cmp	r3, #255	; 0xff
 8104ada:	d924      	bls.n	8104b26 <HAL_I2C_Mem_Read+0x1f6>
  MODIFY_REG(hi2c->Instance->CR2,
 8104adc:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104ade:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8104ae2:	ea03 0308 	and.w	r3, r3, r8
 8104ae6:	433b      	orrs	r3, r7
 8104ae8:	ea43 030a 	orr.w	r3, r3, sl
 8104aec:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8104aee:	e7ac      	b.n	8104a4a <HAL_I2C_Mem_Read+0x11a>
  MODIFY_REG(hi2c->Instance->CR2,
 8104af0:	6853      	ldr	r3, [r2, #4]
 8104af2:	4924      	ldr	r1, [pc, #144]	; (8104b84 <HAL_I2C_Mem_Read+0x254>)
 8104af4:	400b      	ands	r3, r1
 8104af6:	4924      	ldr	r1, [pc, #144]	; (8104b88 <HAL_I2C_Mem_Read+0x258>)
 8104af8:	433b      	orrs	r3, r7
 8104afa:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104afc:	23ff      	movs	r3, #255	; 0xff
 8104afe:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8104b00:	6051      	str	r1, [r2, #4]
}
 8104b02:	e784      	b.n	8104a0e <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104b04:	6823      	ldr	r3, [r4, #0]
 8104b06:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8104b0a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104b0c:	4629      	mov	r1, r5
 8104b0e:	4632      	mov	r2, r6
 8104b10:	4620      	mov	r0, r4
 8104b12:	f7ff fe0b 	bl	810472c <I2C_WaitOnTXISFlagUntilTimeout>
 8104b16:	2800      	cmp	r0, #0
 8104b18:	f43f af5d 	beq.w	81049d6 <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 8104b1c:	2300      	movs	r3, #0
 8104b1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8104b22:	2001      	movs	r0, #1
 8104b24:	e7b5      	b.n	8104a92 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = hi2c->XferCount;
 8104b26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8104b28:	b29b      	uxth	r3, r3
 8104b2a:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8104b2c:	b2d9      	uxtb	r1, r3
 8104b2e:	6853      	ldr	r3, [r2, #4]
 8104b30:	ea03 0308 	and.w	r3, r3, r8
 8104b34:	433b      	orrs	r3, r7
 8104b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8104b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104b3e:	6053      	str	r3, [r2, #4]
}
 8104b40:	e783      	b.n	8104a4a <HAL_I2C_Mem_Read+0x11a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104b42:	4632      	mov	r2, r6
 8104b44:	4629      	mov	r1, r5
 8104b46:	4620      	mov	r0, r4
 8104b48:	f7ff fe46 	bl	81047d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104b4c:	b9b8      	cbnz	r0, 8104b7e <HAL_I2C_Mem_Read+0x24e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104b4e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8104b50:	4d0e      	ldr	r5, [pc, #56]	; (8104b8c <HAL_I2C_Mem_Read+0x25c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104b52:	2120      	movs	r1, #32
 8104b54:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8104b56:	685a      	ldr	r2, [r3, #4]
 8104b58:	402a      	ands	r2, r5
 8104b5a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8104b5c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8104b60:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104b64:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8104b68:	e793      	b.n	8104a92 <HAL_I2C_Mem_Read+0x162>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104b6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104b6c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104b6e:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104b70:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104b72:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104b74:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104b78:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    return HAL_ERROR;
 8104b7c:	e7ce      	b.n	8104b1c <HAL_I2C_Mem_Read+0x1ec>
      return HAL_ERROR;
 8104b7e:	2001      	movs	r0, #1
 8104b80:	e787      	b.n	8104a92 <HAL_I2C_Mem_Read+0x162>
 8104b82:	bf00      	nop
 8104b84:	fc009800 	.word	0xfc009800
 8104b88:	81ff2400 	.word	0x81ff2400
 8104b8c:	fe00e800 	.word	0xfe00e800
 8104b90:	fc009c00 	.word	0xfc009c00
 8104b94:	01ff0000 	.word	0x01ff0000

08104b98 <HAL_I2C_Mem_Write_DMA>:
{
 8104b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104b9c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8104b9e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8104ba2:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8104ba6:	2b20      	cmp	r3, #32
 8104ba8:	f040 80a3 	bne.w	8104cf2 <HAL_I2C_Mem_Write_DMA+0x15a>
    if ((pData == NULL) || (Size == 0U))
 8104bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104bae:	4604      	mov	r4, r0
 8104bb0:	2b00      	cmp	r3, #0
 8104bb2:	f000 8098 	beq.w	8104ce6 <HAL_I2C_Mem_Write_DMA+0x14e>
 8104bb6:	f1b9 0f00 	cmp.w	r9, #0
 8104bba:	f000 8094 	beq.w	8104ce6 <HAL_I2C_Mem_Write_DMA+0x14e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8104bbe:	6803      	ldr	r3, [r0, #0]
 8104bc0:	699b      	ldr	r3, [r3, #24]
 8104bc2:	f413 4800 	ands.w	r8, r3, #32768	; 0x8000
 8104bc6:	f040 8094 	bne.w	8104cf2 <HAL_I2C_Mem_Write_DMA+0x15a>
    __HAL_LOCK(hi2c);
 8104bca:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8104bce:	2b01      	cmp	r3, #1
 8104bd0:	f000 808f 	beq.w	8104cf2 <HAL_I2C_Mem_Write_DMA+0x15a>
 8104bd4:	2301      	movs	r3, #1
 8104bd6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8104bda:	4615      	mov	r5, r2
    tickstart = HAL_GetTick();
 8104bdc:	460e      	mov	r6, r1
 8104bde:	f7fd ff8d 	bl	8102afc <HAL_GetTick>
    hi2c->pBuffPtr    = pData;
 8104be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104be4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8104be6:	2221      	movs	r2, #33	; 0x21
 8104be8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8104bec:	4b59      	ldr	r3, [pc, #356]	; (8104d54 <HAL_I2C_Mem_Write_DMA+0x1bc>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8104bee:	2240      	movs	r2, #64	; 0x40
 8104bf0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8104bf4:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8104bf8:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8104bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104bfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8104c00:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8104d6c <HAL_I2C_Mem_Write_DMA+0x1d4>
 8104c04:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104c08:	b29b      	uxth	r3, r3
 8104c0a:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8104c0c:	4607      	mov	r7, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104c0e:	d873      	bhi.n	8104cf8 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->XferSize = hi2c->XferCount;
 8104c10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8104c12:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8104c16:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8104c18:	6822      	ldr	r2, [r4, #0]
 8104c1a:	494f      	ldr	r1, [pc, #316]	; (8104d58 <HAL_I2C_Mem_Write_DMA+0x1c0>)
 8104c1c:	8523      	strh	r3, [r4, #40]	; 0x28
 8104c1e:	6853      	ldr	r3, [r2, #4]
 8104c20:	400b      	ands	r3, r1
 8104c22:	fa5f f18b 	uxtb.w	r1, fp
 8104c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8104c2a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8104c2e:	4333      	orrs	r3, r6
 8104c30:	f043 4301 	orr.w	r3, r3, #2164260864	; 0x81000000
 8104c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8104c38:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104c3a:	2119      	movs	r1, #25
 8104c3c:	463a      	mov	r2, r7
 8104c3e:	4620      	mov	r0, r4
 8104c40:	f7ff fd74 	bl	810472c <I2C_WaitOnTXISFlagUntilTimeout>
 8104c44:	2800      	cmp	r0, #0
 8104c46:	d163      	bne.n	8104d10 <HAL_I2C_Mem_Write_DMA+0x178>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104c48:	f1bb 0f01 	cmp.w	fp, #1
 8104c4c:	d009      	beq.n	8104c62 <HAL_I2C_Mem_Write_DMA+0xca>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104c4e:	6823      	ldr	r3, [r4, #0]
 8104c50:	0a2a      	lsrs	r2, r5, #8
 8104c52:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104c54:	2119      	movs	r1, #25
 8104c56:	463a      	mov	r2, r7
 8104c58:	4620      	mov	r0, r4
 8104c5a:	f7ff fd67 	bl	810472c <I2C_WaitOnTXISFlagUntilTimeout>
 8104c5e:	2800      	cmp	r0, #0
 8104c60:	d156      	bne.n	8104d10 <HAL_I2C_Mem_Write_DMA+0x178>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104c62:	6822      	ldr	r2, [r4, #0]
 8104c64:	b2ed      	uxtb	r5, r5
 8104c66:	6295      	str	r5, [r2, #40]	; 0x28
 8104c68:	e005      	b.n	8104c76 <HAL_I2C_Mem_Write_DMA+0xde>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104c6a:	f7fd ff47 	bl	8102afc <HAL_GetTick>
 8104c6e:	1bc3      	subs	r3, r0, r7
 8104c70:	2b19      	cmp	r3, #25
 8104c72:	d845      	bhi.n	8104d00 <HAL_I2C_Mem_Write_DMA+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104c74:	6822      	ldr	r2, [r4, #0]
 8104c76:	6995      	ldr	r5, [r2, #24]
 8104c78:	f015 0580 	ands.w	r5, r5, #128	; 0x80
 8104c7c:	d0f5      	beq.n	8104c6a <HAL_I2C_Mem_Write_DMA+0xd2>
    if (hi2c->hdmatx != NULL)
 8104c7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8104c80:	2800      	cmp	r0, #0
 8104c82:	d057      	beq.n	8104d34 <HAL_I2C_Mem_Write_DMA+0x19c>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8104c84:	4b35      	ldr	r3, [pc, #212]	; (8104d5c <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8104c86:	63c3      	str	r3, [r0, #60]	; 0x3c
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8104c88:	2500      	movs	r5, #0
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8104c8a:	4b35      	ldr	r3, [pc, #212]	; (8104d60 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 8104c8c:	64c3      	str	r3, [r0, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8104c8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8104c90:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8104c92:	6405      	str	r5, [r0, #64]	; 0x40
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8104c94:	3228      	adds	r2, #40	; 0x28
      hi2c->hdmatx->XferAbortCallback = NULL;
 8104c96:	6505      	str	r5, [r0, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8104c98:	f7fe fbca 	bl	8103430 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8104c9c:	2800      	cmp	r0, #0
 8104c9e:	d13c      	bne.n	8104d1a <HAL_I2C_Mem_Write_DMA+0x182>
  MODIFY_REG(hi2c->Instance->CR2,
 8104ca0:	6822      	ldr	r2, [r4, #0]
 8104ca2:	4930      	ldr	r1, [pc, #192]	; (8104d64 <HAL_I2C_Mem_Write_DMA+0x1cc>)
 8104ca4:	6853      	ldr	r3, [r2, #4]
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104ca6:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 8104ca8:	400b      	ands	r3, r1
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8104caa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8104cac:	4333      	orrs	r3, r6
 8104cae:	b2ce      	uxtb	r6, r1
 8104cb0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8104cb4:	ea43 030a 	orr.w	r3, r3, sl
 8104cb8:	6053      	str	r3, [r2, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8104cba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 8104cbc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->XferCount -= hi2c->XferSize;
 8104cc0:	1a5b      	subs	r3, r3, r1
 8104cc2:	b29b      	uxth	r3, r3
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104cc4:	454d      	cmp	r5, r9
      hi2c->XferCount -= hi2c->XferSize;
 8104cc6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104cc8:	d041      	beq.n	8104d4e <HAL_I2C_Mem_Write_DMA+0x1b6>
 8104cca:	4b27      	ldr	r3, [pc, #156]	; (8104d68 <HAL_I2C_Mem_Write_DMA+0x1d0>)
 8104ccc:	429d      	cmp	r5, r3
 8104cce:	bf08      	it	eq
 8104cd0:	f04f 0890 	moveq.w	r8, #144	; 0x90
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8104cd4:	6813      	ldr	r3, [r2, #0]
 8104cd6:	ea43 0308 	orr.w	r3, r3, r8
 8104cda:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8104cdc:	6813      	ldr	r3, [r2, #0]
 8104cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8104ce2:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8104ce4:	e003      	b.n	8104cee <HAL_I2C_Mem_Write_DMA+0x156>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8104cea:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8104cec:	2001      	movs	r0, #1
}
 8104cee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8104cf2:	2002      	movs	r0, #2
}
 8104cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104cf8:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8104cfa:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8104cfe:	e78b      	b.n	8104c18 <HAL_I2C_Mem_Write_DMA+0x80>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104d00:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104d02:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104d04:	4313      	orrs	r3, r2
 8104d06:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104d08:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104d0c:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8104d10:	2300      	movs	r3, #0
 8104d12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8104d16:	2001      	movs	r0, #1
 8104d18:	e7e9      	b.n	8104cee <HAL_I2C_Mem_Write_DMA+0x156>
      hi2c->State     = HAL_I2C_STATE_READY;
 8104d1a:	2320      	movs	r3, #32
 8104d1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8104d20:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8104d24:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8104d26:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8104d2a:	f043 0310 	orr.w	r3, r3, #16
 8104d2e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8104d30:	2001      	movs	r0, #1
 8104d32:	e7dc      	b.n	8104cee <HAL_I2C_Mem_Write_DMA+0x156>
      hi2c->State     = HAL_I2C_STATE_READY;
 8104d34:	2320      	movs	r3, #32
 8104d36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8104d3a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8104d3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8104d40:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8104d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8104d48:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8104d4a:	2001      	movs	r0, #1
 8104d4c:	e7cf      	b.n	8104cee <HAL_I2C_Mem_Write_DMA+0x156>
 8104d4e:	f04f 0890 	mov.w	r8, #144	; 0x90
 8104d52:	e7bf      	b.n	8104cd4 <HAL_I2C_Mem_Write_DMA+0x13c>
 8104d54:	ffff0000 	.word	0xffff0000
 8104d58:	fc009800 	.word	0xfc009800
 8104d5c:	08105bc9 	.word	0x08105bc9
 8104d60:	08105af1 	.word	0x08105af1
 8104d64:	fc009c00 	.word	0xfc009c00
 8104d68:	081056ad 	.word	0x081056ad
 8104d6c:	081058c1 	.word	0x081058c1

08104d70 <HAL_I2C_Mem_Read_DMA>:
{
 8104d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104d74:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8104d76:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8104d7a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8104d7e:	2b20      	cmp	r3, #32
 8104d80:	f040 80a7 	bne.w	8104ed2 <HAL_I2C_Mem_Read_DMA+0x162>
    if ((pData == NULL) || (Size == 0U))
 8104d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104d86:	4604      	mov	r4, r0
 8104d88:	2b00      	cmp	r3, #0
 8104d8a:	f000 809c 	beq.w	8104ec6 <HAL_I2C_Mem_Read_DMA+0x156>
 8104d8e:	f1b9 0f00 	cmp.w	r9, #0
 8104d92:	f000 8098 	beq.w	8104ec6 <HAL_I2C_Mem_Read_DMA+0x156>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8104d96:	6803      	ldr	r3, [r0, #0]
 8104d98:	699b      	ldr	r3, [r3, #24]
 8104d9a:	f413 4800 	ands.w	r8, r3, #32768	; 0x8000
 8104d9e:	f040 8098 	bne.w	8104ed2 <HAL_I2C_Mem_Read_DMA+0x162>
    __HAL_LOCK(hi2c);
 8104da2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8104da6:	2b01      	cmp	r3, #1
 8104da8:	f000 8093 	beq.w	8104ed2 <HAL_I2C_Mem_Read_DMA+0x162>
 8104dac:	2301      	movs	r3, #1
 8104dae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8104db2:	4615      	mov	r5, r2
    tickstart = HAL_GetTick();
 8104db4:	460e      	mov	r6, r1
 8104db6:	f7fd fea1 	bl	8102afc <HAL_GetTick>
    hi2c->pBuffPtr    = pData;
 8104dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104dbc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8104dbe:	2222      	movs	r2, #34	; 0x22
 8104dc0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8104dc4:	4b5b      	ldr	r3, [pc, #364]	; (8104f34 <HAL_I2C_Mem_Read_DMA+0x1c4>)
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8104dc6:	2240      	movs	r2, #64	; 0x40
 8104dc8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8104dcc:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8104dd0:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8104dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104dd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8104dd8:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8104f48 <HAL_I2C_Mem_Read_DMA+0x1d8>
 8104ddc:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104de0:	b29b      	uxth	r3, r3
 8104de2:	2bff      	cmp	r3, #255	; 0xff
    tickstart = HAL_GetTick();
 8104de4:	4607      	mov	r7, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104de6:	d877      	bhi.n	8104ed8 <HAL_I2C_Mem_Read_DMA+0x168>
      hi2c->XferSize = hi2c->XferCount;
 8104de8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8104dea:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8104dee:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8104df0:	6822      	ldr	r2, [r4, #0]
 8104df2:	4951      	ldr	r1, [pc, #324]	; (8104f38 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8104df4:	8523      	strh	r3, [r4, #40]	; 0x28
 8104df6:	6853      	ldr	r3, [r2, #4]
 8104df8:	400b      	ands	r3, r1
 8104dfa:	fa5f f18b 	uxtb.w	r1, fp
 8104dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8104e02:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8104e06:	4333      	orrs	r3, r6
 8104e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104e0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8104e10:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104e12:	2119      	movs	r1, #25
 8104e14:	463a      	mov	r2, r7
 8104e16:	4620      	mov	r0, r4
 8104e18:	f7ff fc88 	bl	810472c <I2C_WaitOnTXISFlagUntilTimeout>
 8104e1c:	2800      	cmp	r0, #0
 8104e1e:	d167      	bne.n	8104ef0 <HAL_I2C_Mem_Read_DMA+0x180>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104e20:	f1bb 0f01 	cmp.w	fp, #1
 8104e24:	d009      	beq.n	8104e3a <HAL_I2C_Mem_Read_DMA+0xca>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104e26:	6823      	ldr	r3, [r4, #0]
 8104e28:	0a2a      	lsrs	r2, r5, #8
 8104e2a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104e2c:	2119      	movs	r1, #25
 8104e2e:	463a      	mov	r2, r7
 8104e30:	4620      	mov	r0, r4
 8104e32:	f7ff fc7b 	bl	810472c <I2C_WaitOnTXISFlagUntilTimeout>
 8104e36:	2800      	cmp	r0, #0
 8104e38:	d15a      	bne.n	8104ef0 <HAL_I2C_Mem_Read_DMA+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104e3a:	6821      	ldr	r1, [r4, #0]
 8104e3c:	b2ed      	uxtb	r5, r5
 8104e3e:	628d      	str	r5, [r1, #40]	; 0x28
 8104e40:	e005      	b.n	8104e4e <HAL_I2C_Mem_Read_DMA+0xde>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104e42:	f7fd fe5b 	bl	8102afc <HAL_GetTick>
 8104e46:	1bc3      	subs	r3, r0, r7
 8104e48:	2b19      	cmp	r3, #25
 8104e4a:	d849      	bhi.n	8104ee0 <HAL_I2C_Mem_Read_DMA+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104e4c:	6821      	ldr	r1, [r4, #0]
 8104e4e:	698d      	ldr	r5, [r1, #24]
 8104e50:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8104e54:	d0f5      	beq.n	8104e42 <HAL_I2C_Mem_Read_DMA+0xd2>
    if (hi2c->hdmarx != NULL)
 8104e56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8104e58:	2800      	cmp	r0, #0
 8104e5a:	d05b      	beq.n	8104f14 <HAL_I2C_Mem_Read_DMA+0x1a4>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8104e5c:	4b37      	ldr	r3, [pc, #220]	; (8104f3c <HAL_I2C_Mem_Read_DMA+0x1cc>)
 8104e5e:	63c3      	str	r3, [r0, #60]	; 0x3c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8104e60:	2500      	movs	r5, #0
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8104e62:	4b37      	ldr	r3, [pc, #220]	; (8104f40 <HAL_I2C_Mem_Read_DMA+0x1d0>)
 8104e64:	64c3      	str	r3, [r0, #76]	; 0x4c
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8104e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8104e68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8104e6a:	6405      	str	r5, [r0, #64]	; 0x40
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8104e6c:	3124      	adds	r1, #36	; 0x24
      hi2c->hdmarx->XferAbortCallback = NULL;
 8104e6e:	6505      	str	r5, [r0, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8104e70:	f7fe fade 	bl	8103430 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8104e74:	2800      	cmp	r0, #0
 8104e76:	d140      	bne.n	8104efa <HAL_I2C_Mem_Read_DMA+0x18a>
  MODIFY_REG(hi2c->Instance->CR2,
 8104e78:	6822      	ldr	r2, [r4, #0]
 8104e7a:	492f      	ldr	r1, [pc, #188]	; (8104f38 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8104e7c:	6853      	ldr	r3, [r2, #4]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104e7e:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 8104e80:	400b      	ands	r3, r1
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8104e82:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8104e84:	ea4a 0606 	orr.w	r6, sl, r6
 8104e88:	4333      	orrs	r3, r6
 8104e8a:	b2ce      	uxtb	r6, r1
 8104e8c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8104e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104e94:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8104e98:	6053      	str	r3, [r2, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8104e9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      __HAL_UNLOCK(hi2c);
 8104e9c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->XferCount -= hi2c->XferSize;
 8104ea0:	1a5b      	subs	r3, r3, r1
 8104ea2:	b29b      	uxth	r3, r3
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104ea4:	454d      	cmp	r5, r9
      hi2c->XferCount -= hi2c->XferSize;
 8104ea6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8104ea8:	d041      	beq.n	8104f2e <HAL_I2C_Mem_Read_DMA+0x1be>
 8104eaa:	4b26      	ldr	r3, [pc, #152]	; (8104f44 <HAL_I2C_Mem_Read_DMA+0x1d4>)
 8104eac:	429d      	cmp	r5, r3
 8104eae:	bf08      	it	eq
 8104eb0:	f04f 0890 	moveq.w	r8, #144	; 0x90
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8104eb4:	6813      	ldr	r3, [r2, #0]
 8104eb6:	ea43 0308 	orr.w	r3, r3, r8
 8104eba:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8104ebc:	6813      	ldr	r3, [r2, #0]
 8104ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104ec2:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8104ec4:	e003      	b.n	8104ece <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8104eca:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8104ecc:	2001      	movs	r0, #1
}
 8104ece:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8104ed2:	2002      	movs	r0, #2
}
 8104ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8104ed8:	23ff      	movs	r3, #255	; 0xff
      xfermode = I2C_RELOAD_MODE;
 8104eda:	f04f 7a80 	mov.w	sl, #16777216	; 0x1000000
 8104ede:	e787      	b.n	8104df0 <HAL_I2C_Mem_Read_DMA+0x80>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104ee0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104ee2:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104ee4:	4313      	orrs	r3, r2
 8104ee6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104ee8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104eec:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8104ef0:	2300      	movs	r3, #0
 8104ef2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8104ef6:	2001      	movs	r0, #1
 8104ef8:	e7e9      	b.n	8104ece <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8104efa:	2320      	movs	r3, #32
 8104efc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8104f00:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8104f04:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8104f06:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8104f0a:	f043 0310 	orr.w	r3, r3, #16
 8104f0e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8104f10:	2001      	movs	r0, #1
 8104f12:	e7dc      	b.n	8104ece <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8104f14:	2320      	movs	r3, #32
 8104f16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8104f1a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8104f1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8104f20:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8104f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8104f28:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8104f2a:	2001      	movs	r0, #1
 8104f2c:	e7cf      	b.n	8104ece <HAL_I2C_Mem_Read_DMA+0x15e>
 8104f2e:	f04f 0890 	mov.w	r8, #144	; 0x90
 8104f32:	e7bf      	b.n	8104eb4 <HAL_I2C_Mem_Read_DMA+0x144>
 8104f34:	ffff0000 	.word	0xffff0000
 8104f38:	fc009800 	.word	0xfc009800
 8104f3c:	08105c59 	.word	0x08105c59
 8104f40:	08105af1 	.word	0x08105af1
 8104f44:	081056ad 	.word	0x081056ad
 8104f48:	081058c1 	.word	0x081058c1

08104f4c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8104f4c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8104f4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8104f50:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8104f52:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8104f54:	b103      	cbz	r3, 8104f58 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8104f56:	4718      	bx	r3
}
 8104f58:	4770      	bx	lr
 8104f5a:	bf00      	nop

08104f5c <HAL_I2C_MasterTxCpltCallback>:
 8104f5c:	4770      	bx	lr
 8104f5e:	bf00      	nop

08104f60 <HAL_I2C_MasterRxCpltCallback>:
 8104f60:	4770      	bx	lr
 8104f62:	bf00      	nop

08104f64 <HAL_I2C_SlaveTxCpltCallback>:
 8104f64:	4770      	bx	lr
 8104f66:	bf00      	nop

08104f68 <HAL_I2C_SlaveRxCpltCallback>:
 8104f68:	4770      	bx	lr
 8104f6a:	bf00      	nop

08104f6c <I2C_ITSlaveSeqCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8104f6c:	6801      	ldr	r1, [r0, #0]
{
 8104f6e:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8104f70:	680b      	ldr	r3, [r1, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104f72:	2200      	movs	r2, #0
 8104f74:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8104f78:	045a      	lsls	r2, r3, #17
 8104f7a:	d524      	bpl.n	8104fc6 <I2C_ITSlaveSeqCplt+0x5a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8104f7c:	680b      	ldr	r3, [r1, #0]
 8104f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8104f82:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8104f84:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8104f88:	2b29      	cmp	r3, #41	; 0x29
 8104f8a:	d026      	beq.n	8104fda <I2C_ITSlaveSeqCplt+0x6e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8104f8c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8104f90:	2b2a      	cmp	r3, #42	; 0x2a
 8104f92:	d000      	beq.n	8104f96 <I2C_ITSlaveSeqCplt+0x2a>
}
 8104f94:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8104f96:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8104f98:	2322      	movs	r3, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8104f9a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8104f9e:	6303      	str	r3, [r0, #48]	; 0x30
  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104fa0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104fa4:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104fa6:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8104faa:	2a28      	cmp	r2, #40	; 0x28
 8104fac:	bf0c      	ite	eq
 8104fae:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 8104fb2:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104fb6:	4013      	ands	r3, r2
    __HAL_UNLOCK(hi2c);
 8104fb8:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104fba:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8104fbc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8104fc0:	f7ff ffd2 	bl	8104f68 <HAL_I2C_SlaveRxCpltCallback>
}
 8104fc4:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8104fc6:	041b      	lsls	r3, r3, #16
 8104fc8:	d5dc      	bpl.n	8104f84 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8104fca:	680b      	ldr	r3, [r1, #0]
 8104fcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104fd0:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8104fd2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8104fd6:	2b29      	cmp	r3, #41	; 0x29
 8104fd8:	d1d8      	bne.n	8104f8c <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8104fda:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8104fdc:	2321      	movs	r3, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8104fde:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8104fe2:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104fe4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104fe8:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8104fea:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8104fee:	2a28      	cmp	r2, #40	; 0x28
 8104ff0:	bf0c      	ite	eq
 8104ff2:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8104ff6:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104ffa:	4013      	ands	r3, r2
    __HAL_UNLOCK(hi2c);
 8104ffc:	2200      	movs	r2, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8104ffe:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8105000:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8105004:	f7ff ffae 	bl	8104f64 <HAL_I2C_SlaveTxCpltCallback>
}
 8105008:	bd08      	pop	{r3, pc}
 810500a:	bf00      	nop

0810500c <HAL_I2C_AddrCallback>:
}
 810500c:	4770      	bx	lr
 810500e:	bf00      	nop

08105010 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8105010:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8105012:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8105014:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8105016:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8105018:	69a2      	ldr	r2, [r4, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 810501a:	68a5      	ldr	r5, [r4, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 810501c:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 810501e:	0c12      	lsrs	r2, r2, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8105020:	2b02      	cmp	r3, #2
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8105022:	4684      	mov	ip, r0
    transferdirection = I2C_GET_DIR(hi2c);
 8105024:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8105028:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810502c:	d10f      	bne.n	810504e <I2C_ITAddrCplt.part.0+0x3e>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 810502e:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
 8105032:	f013 0306 	ands.w	r3, r3, #6
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8105036:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 810503a:	d106      	bne.n	810504a <I2C_ITAddrCplt.part.0+0x3a>
        hi2c->AddrEventCount++;
 810503c:	6c85      	ldr	r5, [r0, #72]	; 0x48
 810503e:	3501      	adds	r5, #1
 8105040:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8105042:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8105044:	2d02      	cmp	r5, #2
 8105046:	d00c      	beq.n	8105062 <I2C_ITAddrCplt.part.0+0x52>
}
 8105048:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810504a:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810504e:	6823      	ldr	r3, [r4, #0]
 8105050:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8105054:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8105056:	2300      	movs	r3, #0
 8105058:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810505c:	f7ff ffd6 	bl	810500c <HAL_I2C_AddrCallback>
}
 8105060:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8105062:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 8105064:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8105066:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 8105068:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 810506c:	f7ff ffce 	bl	810500c <HAL_I2C_AddrCallback>
}
 8105070:	bd70      	pop	{r4, r5, r6, pc}
 8105072:	bf00      	nop

08105074 <HAL_I2C_ListenCpltCallback>:
 8105074:	4770      	bx	lr
 8105076:	bf00      	nop

08105078 <HAL_I2C_ErrorCallback>:
 8105078:	4770      	bx	lr
 810507a:	bf00      	nop

0810507c <HAL_I2C_AbortCpltCallback>:
 810507c:	4770      	bx	lr
 810507e:	bf00      	nop

08105080 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8105080:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8105082:	b508      	push	{r3, lr}
  if (hi2c->hdmatx != NULL)
 8105084:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8105086:	b10b      	cbz	r3, 810508c <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8105088:	2200      	movs	r2, #0
 810508a:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 810508c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 810508e:	b10b      	cbz	r3, 8105094 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8105090:	2200      	movs	r2, #0
 8105092:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8105094:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8105098:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 810509a:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 810509e:	d005      	beq.n	81050ac <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 81050a0:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 81050a2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 81050a6:	f7ff ffe7 	bl	8105078 <HAL_I2C_ErrorCallback>
}
 81050aa:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 81050ac:	2220      	movs	r2, #32
 81050ae:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 81050b2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 81050b6:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 81050b8:	f7ff ffe0 	bl	810507c <HAL_I2C_AbortCpltCallback>
}
 81050bc:	bd08      	pop	{r3, pc}
 81050be:	bf00      	nop

081050c0 <I2C_ITError>:
{
 81050c0:	b510      	push	{r4, lr}
 81050c2:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 81050c4:	2200      	movs	r2, #0
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 81050c6:	484a      	ldr	r0, [pc, #296]	; (81051f0 <I2C_ITError+0x130>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 81050c8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 81050cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 81050d0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 81050d2:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 81050d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 81050d6:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 81050d8:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 81050da:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 81050dc:	6461      	str	r1, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 81050de:	d864      	bhi.n	81051aa <I2C_ITError+0xea>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81050e0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81050e4:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81050e8:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81050ea:	f002 0228 	and.w	r2, r2, #40	; 0x28
 81050ee:	2a28      	cmp	r2, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81050f0:	f000 0028 	and.w	r0, r0, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81050f4:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81050f6:	bf14      	ite	ne
 81050f8:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
 81050fc:	f06f 0146 	mvneq.w	r1, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105100:	2828      	cmp	r0, #40	; 0x28
 8105102:	bf18      	it	ne
 8105104:	f06f 01f6 	mvnne.w	r1, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105108:	400a      	ands	r2, r1
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 810510a:	483a      	ldr	r0, [pc, #232]	; (81051f4 <I2C_ITError+0x134>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810510c:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 810510e:	2128      	movs	r1, #40	; 0x28
 8105110:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8105114:	6360      	str	r0, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8105116:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8105118:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 810511a:	b118      	cbz	r0, 8105124 <I2C_ITError+0x64>
 810511c:	2a11      	cmp	r2, #17
 810511e:	d014      	beq.n	810514a <I2C_ITError+0x8a>
 8105120:	2a21      	cmp	r2, #33	; 0x21
 8105122:	d012      	beq.n	810514a <I2C_ITError+0x8a>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8105124:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8105126:	b118      	cbz	r0, 8105130 <I2C_ITError+0x70>
 8105128:	2a12      	cmp	r2, #18
 810512a:	d024      	beq.n	8105176 <I2C_ITError+0xb6>
 810512c:	2a22      	cmp	r2, #34	; 0x22
 810512e:	d022      	beq.n	8105176 <I2C_ITError+0xb6>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8105130:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8105134:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8105136:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 810513a:	d04e      	beq.n	81051da <I2C_ITError+0x11a>
    hi2c->PreviousState = I2C_STATE_NONE;
 810513c:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 810513e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8105142:	4620      	mov	r0, r4
 8105144:	f7ff ff98 	bl	8105078 <HAL_I2C_ErrorCallback>
}
 8105148:	bd10      	pop	{r4, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 810514a:	681a      	ldr	r2, [r3, #0]
 810514c:	0451      	lsls	r1, r2, #17
 810514e:	d43f      	bmi.n	81051d0 <I2C_ITError+0x110>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8105150:	f7ff f980 	bl	8104454 <HAL_DMA_GetState>
 8105154:	2801      	cmp	r0, #1
 8105156:	d0eb      	beq.n	8105130 <I2C_ITError+0x70>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8105158:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 810515a:	4a27      	ldr	r2, [pc, #156]	; (81051f8 <I2C_ITError+0x138>)
 810515c:	6502      	str	r2, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 810515e:	2300      	movs	r3, #0
 8105160:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8105164:	f7fe fdee 	bl	8103d44 <HAL_DMA_Abort_IT>
 8105168:	2800      	cmp	r0, #0
 810516a:	d0ed      	beq.n	8105148 <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 810516c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 810516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8105172:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8105174:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8105176:	681a      	ldr	r2, [r3, #0]
 8105178:	0412      	lsls	r2, r2, #16
 810517a:	d503      	bpl.n	8105184 <I2C_ITError+0xc4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 810517c:	681a      	ldr	r2, [r3, #0]
 810517e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105182:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8105184:	f7ff f966 	bl	8104454 <HAL_DMA_GetState>
 8105188:	2801      	cmp	r0, #1
 810518a:	d0d1      	beq.n	8105130 <I2C_ITError+0x70>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 810518c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 810518e:	4a1a      	ldr	r2, [pc, #104]	; (81051f8 <I2C_ITError+0x138>)
 8105190:	6502      	str	r2, [r0, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8105192:	2300      	movs	r3, #0
 8105194:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8105198:	f7fe fdd4 	bl	8103d44 <HAL_DMA_Abort_IT>
 810519c:	2800      	cmp	r0, #0
 810519e:	d0d3      	beq.n	8105148 <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 81051a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 81051a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 81051a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 81051a8:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81051aa:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81051ac:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81051b0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81051b4:	681a      	ldr	r2, [r3, #0]
 81051b6:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 81051ba:	601a      	str	r2, [r3, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 81051bc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 81051c0:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 81051c2:	bf1c      	itt	ne
 81051c4:	2220      	movne	r2, #32
 81051c6:	f884 2041 	strbne.w	r2, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 81051ca:	2200      	movs	r2, #0
 81051cc:	6362      	str	r2, [r4, #52]	; 0x34
 81051ce:	e7a2      	b.n	8105116 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 81051d0:	681a      	ldr	r2, [r3, #0]
 81051d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81051d6:	601a      	str	r2, [r3, #0]
 81051d8:	e7ba      	b.n	8105150 <I2C_ITError+0x90>
    hi2c->State = HAL_I2C_STATE_READY;
 81051da:	2220      	movs	r2, #32
 81051dc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 81051e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 81051e4:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 81051e6:	4620      	mov	r0, r4
 81051e8:	f7ff ff48 	bl	810507c <HAL_I2C_AbortCpltCallback>
}
 81051ec:	bd10      	pop	{r4, pc}
 81051ee:	bf00      	nop
 81051f0:	ffff0000 	.word	0xffff0000
 81051f4:	081053e9 	.word	0x081053e9
 81051f8:	08105081 	.word	0x08105081

081051fc <I2C_ITSlaveCplt>:
{
 81051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 81051fe:	6803      	ldr	r3, [r0, #0]
{
 8105200:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8105202:	6819      	ldr	r1, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8105204:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8105208:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
{
 810520c:	4604      	mov	r4, r0
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 810520e:	2a21      	cmp	r2, #33	; 0x21
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105210:	f04f 0020 	mov.w	r0, #32
 8105214:	61d8      	str	r0, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8105216:	d072      	beq.n	81052fe <I2C_ITSlaveCplt+0x102>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8105218:	2a22      	cmp	r2, #34	; 0x22
 810521a:	f000 809b 	beq.w	8105354 <I2C_ITSlaveCplt+0x158>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 810521e:	685a      	ldr	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8105220:	486e      	ldr	r0, [pc, #440]	; (81053dc <I2C_ITSlaveCplt+0x1e0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8105222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105226:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8105228:	685a      	ldr	r2, [r3, #4]
 810522a:	4002      	ands	r2, r0
 810522c:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810522e:	699a      	ldr	r2, [r3, #24]
 8105230:	0797      	lsls	r7, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8105232:	bf44      	itt	mi
 8105234:	2200      	movmi	r2, #0
 8105236:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105238:	699a      	ldr	r2, [r3, #24]
 810523a:	07d6      	lsls	r6, r2, #31
 810523c:	d403      	bmi.n	8105246 <I2C_ITSlaveCplt+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810523e:	699a      	ldr	r2, [r3, #24]
 8105240:	f042 0201 	orr.w	r2, r2, #1
 8105244:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8105246:	0448      	lsls	r0, r1, #17
 8105248:	d561      	bpl.n	810530e <I2C_ITSlaveCplt+0x112>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810524a:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 810524c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 810524e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8105252:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8105254:	b329      	cbz	r1, 81052a2 <I2C_ITSlaveCplt+0xa6>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8105256:	680a      	ldr	r2, [r1, #0]
 8105258:	4961      	ldr	r1, [pc, #388]	; (81053e0 <I2C_ITSlaveCplt+0x1e4>)
 810525a:	428a      	cmp	r2, r1
 810525c:	d01e      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 810525e:	3118      	adds	r1, #24
 8105260:	428a      	cmp	r2, r1
 8105262:	d01b      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 8105264:	3118      	adds	r1, #24
 8105266:	428a      	cmp	r2, r1
 8105268:	d018      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 810526a:	3118      	adds	r1, #24
 810526c:	428a      	cmp	r2, r1
 810526e:	d015      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 8105270:	3118      	adds	r1, #24
 8105272:	428a      	cmp	r2, r1
 8105274:	d012      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 8105276:	3118      	adds	r1, #24
 8105278:	428a      	cmp	r2, r1
 810527a:	d00f      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 810527c:	3118      	adds	r1, #24
 810527e:	428a      	cmp	r2, r1
 8105280:	d00c      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 8105282:	3118      	adds	r1, #24
 8105284:	428a      	cmp	r2, r1
 8105286:	d009      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 8105288:	f501 7156 	add.w	r1, r1, #856	; 0x358
 810528c:	428a      	cmp	r2, r1
 810528e:	d005      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 8105290:	3118      	adds	r1, #24
 8105292:	428a      	cmp	r2, r1
 8105294:	d002      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 8105296:	3118      	adds	r1, #24
 8105298:	428a      	cmp	r2, r1
 810529a:	d0ff      	beq.n	810529c <I2C_ITSlaveCplt+0xa0>
 810529c:	6852      	ldr	r2, [r2, #4]
 810529e:	b292      	uxth	r2, r2
 81052a0:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 81052a2:	076a      	lsls	r2, r5, #29
 81052a4:	d50a      	bpl.n	81052bc <I2C_ITSlaveCplt+0xc0>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81052a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 81052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052aa:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 81052ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 81052ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 81052b0:	3301      	adds	r3, #1
    tmpITFlags &= ~I2C_FLAG_RXNE;
 81052b2:	f025 0504 	bic.w	r5, r5, #4
    hi2c->pBuffPtr++;
 81052b6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 81052b8:	2a00      	cmp	r2, #0
 81052ba:	d144      	bne.n	8105346 <I2C_ITSlaveCplt+0x14a>
  if (hi2c->XferCount != 0U)
 81052bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 81052be:	b29b      	uxth	r3, r3
 81052c0:	b11b      	cbz	r3, 81052ca <I2C_ITSlaveCplt+0xce>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81052c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 81052c4:	f043 0304 	orr.w	r3, r3, #4
 81052c8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81052ca:	2700      	movs	r7, #0
 81052cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 81052d0:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 81052d2:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 81052d4:	2e00      	cmp	r6, #0
 81052d6:	d145      	bne.n	8105364 <I2C_ITSlaveCplt+0x168>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 81052d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 81052da:	4d42      	ldr	r5, [pc, #264]	; (81053e4 <I2C_ITSlaveCplt+0x1e8>)
 81052dc:	42ab      	cmp	r3, r5
 81052de:	d124      	bne.n	810532a <I2C_ITSlaveCplt+0x12e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81052e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 81052e4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81052e8:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 81052ea:	f04f 0320 	mov.w	r3, #32
 81052ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81052f2:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 81052f4:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81052f6:	d06d      	beq.n	81053d4 <I2C_ITSlaveCplt+0x1d8>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 81052f8:	f7ff fe34 	bl	8104f64 <HAL_I2C_SlaveTxCpltCallback>
}
 81052fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81052fe:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105302:	6818      	ldr	r0, [r3, #0]
 8105304:	f020 00fa 	bic.w	r0, r0, #250	; 0xfa
 8105308:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 810530a:	6322      	str	r2, [r4, #48]	; 0x30
 810530c:	e787      	b.n	810521e <I2C_ITSlaveCplt+0x22>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 810530e:	0409      	lsls	r1, r1, #16
 8105310:	d5c7      	bpl.n	81052a2 <I2C_ITSlaveCplt+0xa6>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8105312:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8105314:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8105316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810531a:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 810531c:	2900      	cmp	r1, #0
 810531e:	d0c0      	beq.n	81052a2 <I2C_ITSlaveCplt+0xa6>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8105320:	680a      	ldr	r2, [r1, #0]
 8105322:	492f      	ldr	r1, [pc, #188]	; (81053e0 <I2C_ITSlaveCplt+0x1e4>)
 8105324:	428a      	cmp	r2, r1
 8105326:	d19a      	bne.n	810525e <I2C_ITSlaveCplt+0x62>
 8105328:	e7b8      	b.n	810529c <I2C_ITSlaveCplt+0xa0>
    I2C_ITSlaveSeqCplt(hi2c);
 810532a:	4620      	mov	r0, r4
 810532c:	f7ff fe1e 	bl	8104f6c <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8105330:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8105332:	62e5      	str	r5, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
 8105334:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8105338:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_ListenCpltCallback(hi2c);
 810533c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 810533e:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8105340:	f7ff fe98 	bl	8105074 <HAL_I2C_ListenCpltCallback>
}
 8105344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
 8105346:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8105348:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 810534a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 810534c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 810534e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8105350:	8563      	strh	r3, [r4, #42]	; 0x2a
 8105352:	e7b3      	b.n	81052bc <I2C_ITSlaveCplt+0xc0>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105354:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105358:	6818      	ldr	r0, [r3, #0]
 810535a:	f020 00fc 	bic.w	r0, r0, #252	; 0xfc
 810535e:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8105360:	6322      	str	r2, [r4, #48]	; 0x30
 8105362:	e75c      	b.n	810521e <I2C_ITSlaveCplt+0x22>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8105364:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8105366:	4620      	mov	r0, r4
 8105368:	f7ff feaa 	bl	81050c0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 810536c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8105370:	2b28      	cmp	r3, #40	; 0x28
 8105372:	d1c3      	bne.n	81052fc <I2C_ITSlaveCplt+0x100>
  hi2c->State = HAL_I2C_STATE_READY;
 8105374:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8105376:	4a1b      	ldr	r2, [pc, #108]	; (81053e4 <I2C_ITSlaveCplt+0x1e8>)
 8105378:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 810537a:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 810537c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8105380:	076b      	lsls	r3, r5, #29
  hi2c->XferISR = NULL;
 8105382:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8105388:	d512      	bpl.n	81053b0 <I2C_ITSlaveCplt+0x1b4>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810538a:	6822      	ldr	r2, [r4, #0]
 810538c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810538e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8105390:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8105392:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8105394:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8105396:	3301      	adds	r3, #1
 8105398:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 810539a:	b14a      	cbz	r2, 81053b0 <I2C_ITSlaveCplt+0x1b4>
      hi2c->XferCount--;
 810539c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 810539e:	3b01      	subs	r3, #1
 81053a0:	b29b      	uxth	r3, r3
 81053a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81053a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 81053a6:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81053a8:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 81053ac:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81053ae:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81053b0:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81053b2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81053b6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81053ba:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81053bc:	2010      	movs	r0, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81053be:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 81053c2:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81053c4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81053c6:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 81053c8:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 81053ca:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 81053ce:	f7ff fe51 	bl	8105074 <HAL_I2C_ListenCpltCallback>
}
 81053d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 81053d4:	f7ff fdc8 	bl	8104f68 <HAL_I2C_SlaveRxCpltCallback>
}
 81053d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81053da:	bf00      	nop
 81053dc:	fe00e800 	.word	0xfe00e800
 81053e0:	40020010 	.word	0x40020010
 81053e4:	ffff0000 	.word	0xffff0000

081053e8 <I2C_Slave_ISR_IT>:
{
 81053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 81053ea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 81053ee:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 81053f0:	2b01      	cmp	r3, #1
 81053f2:	d078      	beq.n	81054e6 <I2C_Slave_ISR_IT+0xfe>
 81053f4:	4617      	mov	r7, r2
 81053f6:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81053f8:	068a      	lsls	r2, r1, #26
 81053fa:	4604      	mov	r4, r0
 81053fc:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 81053fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8105402:	d501      	bpl.n	8105408 <I2C_Slave_ISR_IT+0x20>
 8105404:	06bb      	lsls	r3, r7, #26
 8105406:	d45a      	bmi.n	81054be <I2C_Slave_ISR_IT+0xd6>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8105408:	06ea      	lsls	r2, r5, #27
 810540a:	d515      	bpl.n	8105438 <I2C_Slave_ISR_IT+0x50>
 810540c:	06fb      	lsls	r3, r7, #27
 810540e:	d513      	bpl.n	8105438 <I2C_Slave_ISR_IT+0x50>
    if (hi2c->XferCount == 0U)
 8105410:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8105412:	b29b      	uxth	r3, r3
 8105414:	2b00      	cmp	r3, #0
 8105416:	d157      	bne.n	81054c8 <I2C_Slave_ISR_IT+0xe0>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8105418:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 810541c:	2a28      	cmp	r2, #40	; 0x28
 810541e:	d07c      	beq.n	810551a <I2C_Slave_ISR_IT+0x132>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8105420:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8105424:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105426:	6823      	ldr	r3, [r4, #0]
 8105428:	f04f 0210 	mov.w	r2, #16
 810542c:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 810542e:	d060      	beq.n	81054f2 <I2C_Slave_ISR_IT+0x10a>
  __HAL_UNLOCK(hi2c);
 8105430:	2000      	movs	r0, #0
 8105432:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8105436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8105438:	076a      	lsls	r2, r5, #29
 810543a:	d40d      	bmi.n	8105458 <I2C_Slave_ISR_IT+0x70>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 810543c:	0728      	lsls	r0, r5, #28
 810543e:	d529      	bpl.n	8105494 <I2C_Slave_ISR_IT+0xac>
 8105440:	0739      	lsls	r1, r7, #28
 8105442:	d527      	bpl.n	8105494 <I2C_Slave_ISR_IT+0xac>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8105444:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8105448:	f003 0328 	and.w	r3, r3, #40	; 0x28
 810544c:	2b28      	cmp	r3, #40	; 0x28
 810544e:	d060      	beq.n	8105512 <I2C_Slave_ISR_IT+0x12a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8105450:	6823      	ldr	r3, [r4, #0]
 8105452:	2208      	movs	r2, #8
 8105454:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8105456:	e7eb      	b.n	8105430 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8105458:	077b      	lsls	r3, r7, #29
 810545a:	d5ef      	bpl.n	810543c <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 810545c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 810545e:	b29b      	uxth	r3, r3
 8105460:	b16b      	cbz	r3, 810547e <I2C_Slave_ISR_IT+0x96>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105462:	6822      	ldr	r2, [r4, #0]
 8105464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105466:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8105468:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 810546a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 810546c:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 810546e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8105470:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8105472:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8105474:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8105476:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8105478:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 810547a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 810547c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 810547e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8105480:	b29b      	uxth	r3, r3
 8105482:	2b00      	cmp	r3, #0
 8105484:	d1d4      	bne.n	8105430 <I2C_Slave_ISR_IT+0x48>
 8105486:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 810548a:	d0d1      	beq.n	8105430 <I2C_Slave_ISR_IT+0x48>
        I2C_ITSlaveSeqCplt(hi2c);
 810548c:	4620      	mov	r0, r4
 810548e:	f7ff fd6d 	bl	8104f6c <I2C_ITSlaveSeqCplt>
 8105492:	e7cd      	b.n	8105430 <I2C_Slave_ISR_IT+0x48>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8105494:	07aa      	lsls	r2, r5, #30
 8105496:	d5cb      	bpl.n	8105430 <I2C_Slave_ISR_IT+0x48>
 8105498:	07bb      	lsls	r3, r7, #30
 810549a:	d5c9      	bpl.n	8105430 <I2C_Slave_ISR_IT+0x48>
    if (hi2c->XferCount > 0U)
 810549c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 810549e:	b29b      	uxth	r3, r3
 81054a0:	b31b      	cbz	r3, 81054ea <I2C_Slave_ISR_IT+0x102>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81054a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 81054a4:	6823      	ldr	r3, [r4, #0]
 81054a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 81054aa:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81054ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 81054ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 81054b0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 81054b2:	3b01      	subs	r3, #1
 81054b4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 81054b6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 81054b8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 81054ba:	8522      	strh	r2, [r4, #40]	; 0x28
 81054bc:	e7b8      	b.n	8105430 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 81054be:	f7ff fe9d 	bl	81051fc <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81054c2:	06ea      	lsls	r2, r5, #27
 81054c4:	d5b8      	bpl.n	8105438 <I2C_Slave_ISR_IT+0x50>
 81054c6:	e7a1      	b.n	810540c <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81054c8:	6823      	ldr	r3, [r4, #0]
 81054ca:	2210      	movs	r2, #16
 81054cc:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81054ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 81054d0:	f043 0304 	orr.w	r3, r3, #4
 81054d4:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 81054d6:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 81054da:	d1a9      	bne.n	8105430 <I2C_Slave_ISR_IT+0x48>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 81054dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 81054de:	4620      	mov	r0, r4
 81054e0:	f7ff fdee 	bl	81050c0 <I2C_ITError>
 81054e4:	e7a4      	b.n	8105430 <I2C_Slave_ISR_IT+0x48>
  __HAL_LOCK(hi2c);
 81054e6:	2002      	movs	r0, #2
}
 81054e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 81054ea:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 81054ee:	d0cd      	beq.n	810548c <I2C_Slave_ISR_IT+0xa4>
 81054f0:	e79e      	b.n	8105430 <I2C_Slave_ISR_IT+0x48>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81054f2:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 81054f6:	d09b      	beq.n	8105430 <I2C_Slave_ISR_IT+0x48>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81054f8:	699a      	ldr	r2, [r3, #24]
 81054fa:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 81054fc:	bf44      	itt	mi
 81054fe:	2200      	movmi	r2, #0
 8105500:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105502:	699a      	ldr	r2, [r3, #24]
 8105504:	07d1      	lsls	r1, r2, #31
 8105506:	d4c1      	bmi.n	810548c <I2C_Slave_ISR_IT+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105508:	699a      	ldr	r2, [r3, #24]
 810550a:	f042 0201 	orr.w	r2, r2, #1
 810550e:	619a      	str	r2, [r3, #24]
 8105510:	e7bc      	b.n	810548c <I2C_Slave_ISR_IT+0xa4>
 8105512:	4620      	mov	r0, r4
 8105514:	f7ff fd7c 	bl	8105010 <I2C_ITAddrCplt.part.0>
 8105518:	e78a      	b.n	8105430 <I2C_Slave_ISR_IT+0x48>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 810551a:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 810551e:	f47f af7f 	bne.w	8105420 <I2C_Slave_ISR_IT+0x38>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8105522:	4918      	ldr	r1, [pc, #96]	; (8105584 <I2C_Slave_ISR_IT+0x19c>)
 8105524:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8105526:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8105528:	076d      	lsls	r5, r5, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 810552a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 810552c:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 810552e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8105536:	d512      	bpl.n	810555e <I2C_Slave_ISR_IT+0x176>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8105538:	6822      	ldr	r2, [r4, #0]
 810553a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810553c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 810553e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8105540:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8105542:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8105544:	3301      	adds	r3, #1
 8105546:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8105548:	b14a      	cbz	r2, 810555e <I2C_Slave_ISR_IT+0x176>
      hi2c->XferCount--;
 810554a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 810554c:	3b01      	subs	r3, #1
 810554e:	b29b      	uxth	r3, r3
 8105550:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105552:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 8105554:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105556:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 810555a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810555c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810555e:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105560:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105564:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105568:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810556a:	2010      	movs	r0, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810556c:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 8105570:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105572:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105574:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 8105576:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 8105578:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 810557c:	f7ff fd7a 	bl	8105074 <HAL_I2C_ListenCpltCallback>
}
 8105580:	e756      	b.n	8105430 <I2C_Slave_ISR_IT+0x48>
 8105582:	bf00      	nop
 8105584:	ffff0000 	.word	0xffff0000

08105588 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105588:	6803      	ldr	r3, [r0, #0]
{
 810558a:	b530      	push	{r4, r5, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810558c:	2220      	movs	r2, #32
 810558e:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8105590:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8105594:	2a21      	cmp	r2, #33	; 0x21
{
 8105596:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8105598:	d050      	beq.n	810563c <I2C_ITMasterCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810559a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 810559e:	2a22      	cmp	r2, #34	; 0x22
 81055a0:	d035      	beq.n	810560e <I2C_ITMasterCplt+0x86>
  I2C_RESET_CR2(hi2c);
 81055a2:	685a      	ldr	r2, [r3, #4]
 81055a4:	4c3f      	ldr	r4, [pc, #252]	; (81056a4 <I2C_ITMasterCplt+0x11c>)
  hi2c->XferISR       = NULL;
 81055a6:	2500      	movs	r5, #0
  I2C_RESET_CR2(hi2c);
 81055a8:	4022      	ands	r2, r4
 81055aa:	605a      	str	r2, [r3, #4]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 81055ac:	4c3e      	ldr	r4, [pc, #248]	; (81056a8 <I2C_ITMasterCplt+0x120>)
  hi2c->XferISR       = NULL;
 81055ae:	6345      	str	r5, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 81055b0:	06cd      	lsls	r5, r1, #27
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 81055b2:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 81055b4:	d505      	bpl.n	81055c2 <I2C_ITMasterCplt+0x3a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81055b6:	2210      	movs	r2, #16
 81055b8:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81055ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 81055bc:	f042 0204 	orr.w	r2, r2, #4
 81055c0:	6442      	str	r2, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 81055c2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 81055c6:	2a60      	cmp	r2, #96	; 0x60
 81055c8:	d031      	beq.n	810562e <I2C_ITMasterCplt+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81055ca:	699a      	ldr	r2, [r3, #24]
 81055cc:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 81055ce:	bf44      	itt	mi
 81055d0:	2200      	movmi	r2, #0
 81055d2:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81055d4:	699a      	ldr	r2, [r3, #24]
 81055d6:	07d2      	lsls	r2, r2, #31
 81055d8:	d403      	bmi.n	81055e2 <I2C_ITMasterCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81055da:	699a      	ldr	r2, [r3, #24]
 81055dc:	f042 0201 	orr.w	r2, r2, #1
 81055e0:	619a      	str	r2, [r3, #24]
  tmperror = hi2c->ErrorCode;
 81055e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 81055e4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 81055e8:	2a60      	cmp	r2, #96	; 0x60
 81055ea:	d00a      	beq.n	8105602 <I2C_ITMasterCplt+0x7a>
 81055ec:	b94b      	cbnz	r3, 8105602 <I2C_ITMasterCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 81055ee:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 81055f2:	2a21      	cmp	r2, #33	; 0x21
 81055f4:	d041      	beq.n	810567a <I2C_ITMasterCplt+0xf2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 81055f6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 81055fa:	2a22      	cmp	r2, #34	; 0x22
 81055fc:	d02e      	beq.n	810565c <I2C_ITMasterCplt+0xd4>
}
 81055fe:	b003      	add	sp, #12
 8105600:	bd30      	pop	{r4, r5, pc}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8105602:	6c41      	ldr	r1, [r0, #68]	; 0x44
}
 8105604:	b003      	add	sp, #12
 8105606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c, hi2c->ErrorCode);
 810560a:	f7ff bd59 	b.w	81050c0 <I2C_ITError>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810560e:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105612:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105614:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8105618:	2c28      	cmp	r4, #40	; 0x28
 810561a:	bf0c      	ite	eq
 810561c:	f06f 0444 	mvneq.w	r4, #68	; 0x44
 8105620:	f06f 04f4 	mvnne.w	r4, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105624:	4022      	ands	r2, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8105626:	2412      	movs	r4, #18
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105628:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 810562a:	6304      	str	r4, [r0, #48]	; 0x30
 810562c:	e7b9      	b.n	81055a2 <I2C_ITMasterCplt+0x1a>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 810562e:	074c      	lsls	r4, r1, #29
 8105630:	d5cb      	bpl.n	81055ca <I2C_ITMasterCplt+0x42>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8105632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105634:	b2d2      	uxtb	r2, r2
 8105636:	9201      	str	r2, [sp, #4]
    UNUSED(tmpreg);
 8105638:	9a01      	ldr	r2, [sp, #4]
 810563a:	e7c6      	b.n	81055ca <I2C_ITMasterCplt+0x42>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 810563c:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105640:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105642:	f004 0428 	and.w	r4, r4, #40	; 0x28
 8105646:	2c28      	cmp	r4, #40	; 0x28
 8105648:	bf0c      	ite	eq
 810564a:	f06f 0442 	mvneq.w	r4, #66	; 0x42
 810564e:	f06f 04f2 	mvnne.w	r4, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105652:	4022      	ands	r2, r4
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8105654:	2411      	movs	r4, #17
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105656:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8105658:	6304      	str	r4, [r0, #48]	; 0x30
 810565a:	e7a2      	b.n	81055a2 <I2C_ITMasterCplt+0x1a>
    hi2c->State = HAL_I2C_STATE_READY;
 810565c:	2220      	movs	r2, #32
 810565e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105662:	6303      	str	r3, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8105664:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8105668:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 810566c:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 810566e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8105672:	d014      	beq.n	810569e <I2C_ITMasterCplt+0x116>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8105674:	f7ff fc74 	bl	8104f60 <HAL_I2C_MasterRxCpltCallback>
}
 8105678:	e7c1      	b.n	81055fe <I2C_ITMasterCplt+0x76>
    hi2c->State = HAL_I2C_STATE_READY;
 810567a:	2220      	movs	r2, #32
 810567c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8105680:	6303      	str	r3, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8105682:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8105686:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 810568a:	2a40      	cmp	r2, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 810568c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8105690:	d002      	beq.n	8105698 <I2C_ITMasterCplt+0x110>
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8105692:	f7ff fc63 	bl	8104f5c <HAL_I2C_MasterTxCpltCallback>
 8105696:	e7b2      	b.n	81055fe <I2C_ITMasterCplt+0x76>
      HAL_I2C_MemTxCpltCallback(hi2c);
 8105698:	f7fc fe02 	bl	81022a0 <HAL_I2C_MemTxCpltCallback>
 810569c:	e7af      	b.n	81055fe <I2C_ITMasterCplt+0x76>
      HAL_I2C_MemRxCpltCallback(hi2c);
 810569e:	f7fc fdfd 	bl	810229c <HAL_I2C_MemRxCpltCallback>
 81056a2:	e7ac      	b.n	81055fe <I2C_ITMasterCplt+0x76>
 81056a4:	fe00e800 	.word	0xfe00e800
 81056a8:	ffff0000 	.word	0xffff0000

081056ac <I2C_Slave_ISR_DMA>:
{
 81056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 81056ae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 81056b2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 81056b4:	2b01      	cmp	r3, #1
 81056b6:	f000 80c2 	beq.w	810583e <I2C_Slave_ISR_DMA+0x192>
 81056ba:	4617      	mov	r7, r2
 81056bc:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81056be:	068a      	lsls	r2, r1, #26
 81056c0:	4604      	mov	r4, r0
 81056c2:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 81056c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81056c8:	d501      	bpl.n	81056ce <I2C_Slave_ISR_DMA+0x22>
 81056ca:	06bb      	lsls	r3, r7, #26
 81056cc:	d44b      	bmi.n	8105766 <I2C_Slave_ISR_DMA+0xba>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81056ce:	06ea      	lsls	r2, r5, #27
 81056d0:	d538      	bpl.n	8105744 <I2C_Slave_ISR_DMA+0x98>
 81056d2:	06fb      	lsls	r3, r7, #27
 81056d4:	d536      	bpl.n	8105744 <I2C_Slave_ISR_DMA+0x98>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 81056d6:	0bfb      	lsrs	r3, r7, #15
 81056d8:	ea43 3297 	orr.w	r2, r3, r7, lsr #14
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 81056dc:	f012 0201 	ands.w	r2, r2, #1
 81056e0:	f3c7 3080 	ubfx	r0, r7, #14, #1
 81056e4:	d044      	beq.n	8105770 <I2C_Slave_ISR_DMA+0xc4>
      if (hi2c->hdmarx != NULL)
 81056e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 81056e8:	2900      	cmp	r1, #0
 81056ea:	d045      	beq.n	8105778 <I2C_Slave_ISR_DMA+0xcc>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 81056ec:	07df      	lsls	r7, r3, #31
 81056ee:	d543      	bpl.n	8105778 <I2C_Slave_ISR_DMA+0xcc>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 81056f0:	680b      	ldr	r3, [r1, #0]
 81056f2:	4971      	ldr	r1, [pc, #452]	; (81058b8 <I2C_Slave_ISR_DMA+0x20c>)
 81056f4:	428b      	cmp	r3, r1
 81056f6:	d01e      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 81056f8:	3118      	adds	r1, #24
 81056fa:	428b      	cmp	r3, r1
 81056fc:	d01b      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 81056fe:	3118      	adds	r1, #24
 8105700:	428b      	cmp	r3, r1
 8105702:	d018      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 8105704:	3118      	adds	r1, #24
 8105706:	428b      	cmp	r3, r1
 8105708:	d015      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 810570a:	3118      	adds	r1, #24
 810570c:	428b      	cmp	r3, r1
 810570e:	d012      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 8105710:	3118      	adds	r1, #24
 8105712:	428b      	cmp	r3, r1
 8105714:	d00f      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 8105716:	3118      	adds	r1, #24
 8105718:	428b      	cmp	r3, r1
 810571a:	d00c      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 810571c:	3118      	adds	r1, #24
 810571e:	428b      	cmp	r3, r1
 8105720:	d009      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 8105722:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8105726:	428b      	cmp	r3, r1
 8105728:	d005      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 810572a:	3118      	adds	r1, #24
 810572c:	428b      	cmp	r3, r1
 810572e:	d002      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 8105730:	3118      	adds	r1, #24
 8105732:	428b      	cmp	r3, r1
 8105734:	d0ff      	beq.n	8105736 <I2C_Slave_ISR_DMA+0x8a>
 8105736:	685b      	ldr	r3, [r3, #4]
 8105738:	b9f3      	cbnz	r3, 8105778 <I2C_Slave_ISR_DMA+0xcc>
      if (hi2c->hdmatx != NULL)
 810573a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 810573c:	2b00      	cmp	r3, #0
 810573e:	d047      	beq.n	81057d0 <I2C_Slave_ISR_DMA+0x124>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8105740:	bb00      	cbnz	r0, 8105784 <I2C_Slave_ISR_DMA+0xd8>
 8105742:	e045      	b.n	81057d0 <I2C_Slave_ISR_DMA+0x124>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8105744:	072a      	lsls	r2, r5, #28
 8105746:	d50a      	bpl.n	810575e <I2C_Slave_ISR_DMA+0xb2>
 8105748:	073b      	lsls	r3, r7, #28
 810574a:	d508      	bpl.n	810575e <I2C_Slave_ISR_DMA+0xb2>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 810574c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8105750:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8105754:	2b28      	cmp	r3, #40	; 0x28
 8105756:	d074      	beq.n	8105842 <I2C_Slave_ISR_DMA+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8105758:	6823      	ldr	r3, [r4, #0]
 810575a:	2208      	movs	r2, #8
 810575c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 810575e:	2000      	movs	r0, #0
 8105760:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8105764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8105766:	f7ff fd49 	bl	81051fc <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 810576a:	06ea      	lsls	r2, r5, #27
 810576c:	d5ea      	bpl.n	8105744 <I2C_Slave_ISR_DMA+0x98>
 810576e:	e7b0      	b.n	81056d2 <I2C_Slave_ISR_DMA+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105770:	6823      	ldr	r3, [r4, #0]
 8105772:	2210      	movs	r2, #16
 8105774:	61da      	str	r2, [r3, #28]
 8105776:	e7f2      	b.n	810575e <I2C_Slave_ISR_DMA+0xb2>
      if (hi2c->hdmatx != NULL)
 8105778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 810577a:	2b00      	cmp	r3, #0
 810577c:	d047      	beq.n	810580e <I2C_Slave_ISR_DMA+0x162>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 810577e:	2800      	cmp	r0, #0
 8105780:	d045      	beq.n	810580e <I2C_Slave_ISR_DMA+0x162>
 8105782:	2200      	movs	r2, #0
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8105784:	681b      	ldr	r3, [r3, #0]
 8105786:	494c      	ldr	r1, [pc, #304]	; (81058b8 <I2C_Slave_ISR_DMA+0x20c>)
 8105788:	428b      	cmp	r3, r1
 810578a:	d01e      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 810578c:	3118      	adds	r1, #24
 810578e:	428b      	cmp	r3, r1
 8105790:	d01b      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 8105792:	3118      	adds	r1, #24
 8105794:	428b      	cmp	r3, r1
 8105796:	d018      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 8105798:	3118      	adds	r1, #24
 810579a:	428b      	cmp	r3, r1
 810579c:	d015      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 810579e:	3118      	adds	r1, #24
 81057a0:	428b      	cmp	r3, r1
 81057a2:	d012      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 81057a4:	3118      	adds	r1, #24
 81057a6:	428b      	cmp	r3, r1
 81057a8:	d00f      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 81057aa:	3118      	adds	r1, #24
 81057ac:	428b      	cmp	r3, r1
 81057ae:	d00c      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 81057b0:	3118      	adds	r1, #24
 81057b2:	428b      	cmp	r3, r1
 81057b4:	d009      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 81057b6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 81057ba:	428b      	cmp	r3, r1
 81057bc:	d005      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 81057be:	3118      	adds	r1, #24
 81057c0:	428b      	cmp	r3, r1
 81057c2:	d002      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 81057c4:	3118      	adds	r1, #24
 81057c6:	428b      	cmp	r3, r1
 81057c8:	d0ff      	beq.n	81057ca <I2C_Slave_ISR_DMA+0x11e>
 81057ca:	685b      	ldr	r3, [r3, #4]
 81057cc:	b103      	cbz	r3, 81057d0 <I2C_Slave_ISR_DMA+0x124>
      if (treatdmanack == 1U)
 81057ce:	b1f2      	cbz	r2, 810580e <I2C_Slave_ISR_DMA+0x162>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 81057d0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 81057d4:	2b28      	cmp	r3, #40	; 0x28
 81057d6:	d03a      	beq.n	810584e <I2C_Slave_ISR_DMA+0x1a2>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81057d8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 81057dc:	2b29      	cmp	r3, #41	; 0x29
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81057de:	6823      	ldr	r3, [r4, #0]
 81057e0:	f04f 0210 	mov.w	r2, #16
 81057e4:	61da      	str	r2, [r3, #28]
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 81057e6:	d1ba      	bne.n	810575e <I2C_Slave_ISR_DMA+0xb2>
 81057e8:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 81057ec:	d0b7      	beq.n	810575e <I2C_Slave_ISR_DMA+0xb2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81057ee:	699a      	ldr	r2, [r3, #24]
 81057f0:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 81057f2:	bf44      	itt	mi
 81057f4:	2200      	movmi	r2, #0
 81057f6:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81057f8:	699a      	ldr	r2, [r3, #24]
 81057fa:	07d1      	lsls	r1, r2, #31
 81057fc:	d403      	bmi.n	8105806 <I2C_Slave_ISR_DMA+0x15a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81057fe:	699a      	ldr	r2, [r3, #24]
 8105800:	f042 0201 	orr.w	r2, r2, #1
 8105804:	619a      	str	r2, [r3, #24]
          I2C_ITSlaveSeqCplt(hi2c);
 8105806:	4620      	mov	r0, r4
 8105808:	f7ff fbb0 	bl	8104f6c <I2C_ITSlaveSeqCplt>
 810580c:	e7a7      	b.n	810575e <I2C_Slave_ISR_DMA+0xb2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810580e:	6823      	ldr	r3, [r4, #0]
 8105810:	2210      	movs	r2, #16
 8105812:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105814:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8105816:	f043 0304 	orr.w	r3, r3, #4
 810581a:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 810581c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8105820:	f036 7280 	bics.w	r2, r6, #16777216	; 0x1000000
        tmpstate = hi2c->State;
 8105824:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8105826:	d19a      	bne.n	810575e <I2C_Slave_ISR_DMA+0xb2>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8105828:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 810582c:	2b21      	cmp	r3, #33	; 0x21
 810582e:	d00c      	beq.n	810584a <I2C_Slave_ISR_DMA+0x19e>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8105830:	2b22      	cmp	r3, #34	; 0x22
 8105832:	d00a      	beq.n	810584a <I2C_Slave_ISR_DMA+0x19e>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8105834:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8105836:	4620      	mov	r0, r4
 8105838:	f7ff fc42 	bl	81050c0 <I2C_ITError>
 810583c:	e78f      	b.n	810575e <I2C_Slave_ISR_DMA+0xb2>
  __HAL_LOCK(hi2c);
 810583e:	2002      	movs	r0, #2
}
 8105840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8105842:	4620      	mov	r0, r4
 8105844:	f7ff fbe4 	bl	8105010 <I2C_ITAddrCplt.part.0>
 8105848:	e789      	b.n	810575e <I2C_Slave_ISR_DMA+0xb2>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 810584a:	6323      	str	r3, [r4, #48]	; 0x30
 810584c:	e7f2      	b.n	8105834 <I2C_Slave_ISR_DMA+0x188>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 810584e:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8105852:	d1c1      	bne.n	81057d8 <I2C_Slave_ISR_DMA+0x12c>
  hi2c->PreviousState = I2C_STATE_NONE;
 8105854:	2300      	movs	r3, #0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8105856:	4919      	ldr	r1, [pc, #100]	; (81058bc <I2C_Slave_ISR_DMA+0x210>)
 8105858:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 810585a:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 810585c:	076d      	lsls	r5, r5, #29
  hi2c->PreviousState = I2C_STATE_NONE;
 810585e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->XferISR = NULL;
 8105860:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8105862:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105866:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 810586a:	d512      	bpl.n	8105892 <I2C_Slave_ISR_DMA+0x1e6>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810586c:	6822      	ldr	r2, [r4, #0]
 810586e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8105870:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8105872:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8105874:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8105876:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8105878:	3301      	adds	r3, #1
 810587a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 810587c:	b14a      	cbz	r2, 8105892 <I2C_Slave_ISR_DMA+0x1e6>
      hi2c->XferCount--;
 810587e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8105880:	3b01      	subs	r3, #1
 8105882:	b29b      	uxth	r3, r3
 8105884:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105886:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->XferSize--;
 8105888:	3a01      	subs	r2, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810588a:	f043 0304 	orr.w	r3, r3, #4
      hi2c->XferSize--;
 810588e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105890:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105892:	6823      	ldr	r3, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105894:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105898:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 810589c:	681a      	ldr	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810589e:	2010      	movs	r0, #16
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81058a0:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
  __HAL_UNLOCK(hi2c);
 81058a4:	2100      	movs	r1, #0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81058a6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81058a8:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 81058aa:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 81058ac:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 81058b0:	f7ff fbe0 	bl	8105074 <HAL_I2C_ListenCpltCallback>
}
 81058b4:	e753      	b.n	810575e <I2C_Slave_ISR_DMA+0xb2>
 81058b6:	bf00      	nop
 81058b8:	40020010 	.word	0x40020010
 81058bc:	ffff0000 	.word	0xffff0000

081058c0 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 81058c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 81058c4:	2b01      	cmp	r3, #1
 81058c6:	f000 8084 	beq.w	81059d2 <I2C_Master_ISR_DMA+0x112>
{
 81058ca:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hi2c);
 81058cc:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81058ce:	06cd      	lsls	r5, r1, #27
 81058d0:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 81058d2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 81058d6:	d524      	bpl.n	8105922 <I2C_Master_ISR_DMA+0x62>
 81058d8:	06d0      	lsls	r0, r2, #27
 81058da:	d522      	bpl.n	8105922 <I2C_Master_ISR_DMA+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81058dc:	6823      	ldr	r3, [r4, #0]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 81058de:	4881      	ldr	r0, [pc, #516]	; (8105ae4 <I2C_Master_ISR_DMA+0x224>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81058e0:	2210      	movs	r2, #16
 81058e2:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81058e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 81058e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81058e8:	f041 0104 	orr.w	r1, r1, #4
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 81058ec:	4282      	cmp	r2, r0
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 81058ee:	6461      	str	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 81058f0:	d06d      	beq.n	81059ce <I2C_Master_ISR_DMA+0x10e>
 81058f2:	497d      	ldr	r1, [pc, #500]	; (8105ae8 <I2C_Master_ISR_DMA+0x228>)
      tmpisr |= I2C_IT_STOPI;
 81058f4:	428a      	cmp	r2, r1
 81058f6:	bf0c      	ite	eq
 81058f8:	2260      	moveq	r2, #96	; 0x60
 81058fa:	2220      	movne	r2, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 81058fc:	6819      	ldr	r1, [r3, #0]
 81058fe:	430a      	orrs	r2, r1
 8105900:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105902:	699a      	ldr	r2, [r3, #24]
 8105904:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8105906:	bf44      	itt	mi
 8105908:	2200      	movmi	r2, #0
 810590a:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810590c:	699a      	ldr	r2, [r3, #24]
 810590e:	07d2      	lsls	r2, r2, #31
 8105910:	d403      	bmi.n	810591a <I2C_Master_ISR_DMA+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105912:	699a      	ldr	r2, [r3, #24]
 8105914:	f042 0201 	orr.w	r2, r2, #1
 8105918:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(hi2c);
 810591a:	2000      	movs	r0, #0
 810591c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8105920:	bd70      	pop	{r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8105922:	060b      	lsls	r3, r1, #24
 8105924:	d535      	bpl.n	8105992 <I2C_Master_ISR_DMA+0xd2>
 8105926:	0656      	lsls	r6, r2, #25
 8105928:	d549      	bpl.n	81059be <I2C_Master_ISR_DMA+0xfe>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 810592a:	6823      	ldr	r3, [r4, #0]
 810592c:	681a      	ldr	r2, [r3, #0]
 810592e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8105932:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8105934:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8105936:	b292      	uxth	r2, r2
 8105938:	2a00      	cmp	r2, #0
 810593a:	d04c      	beq.n	81059d6 <I2C_Master_ISR_DMA+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 810593c:	6858      	ldr	r0, [r3, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810593e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8105940:	b289      	uxth	r1, r1
 8105942:	29ff      	cmp	r1, #255	; 0xff
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8105944:	f3c0 0009 	ubfx	r0, r0, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105948:	d86e      	bhi.n	8105a28 <I2C_Master_ISR_DMA+0x168>
        hi2c->XferSize = hi2c->XferCount;
 810594a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 810594c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 810594e:	b291      	uxth	r1, r2
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8105950:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
        hi2c->XferSize = hi2c->XferCount;
 8105954:	8521      	strh	r1, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8105956:	f000 808f 	beq.w	8105a78 <I2C_Master_ISR_DMA+0x1b8>
  MODIFY_REG(hi2c->Instance->CR2,
 810595a:	fa5f fc81 	uxtb.w	ip, r1
          xfermode = hi2c->XferOptions;
 810595e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  MODIFY_REG(hi2c->Instance->CR2,
 8105960:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8105964:	685a      	ldr	r2, [r3, #4]
 8105966:	4d61      	ldr	r5, [pc, #388]	; (8105aec <I2C_Master_ISR_DMA+0x22c>)
 8105968:	402a      	ands	r2, r5
 810596a:	4302      	orrs	r2, r0
 810596c:	4332      	orrs	r2, r6
 810596e:	ea42 020c 	orr.w	r2, r2, ip
 8105972:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8105974:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8105976:	1a52      	subs	r2, r2, r1
 8105978:	b292      	uxth	r2, r2
 810597a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 810597c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8105980:	2a22      	cmp	r2, #34	; 0x22
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8105982:	681a      	ldr	r2, [r3, #0]
 8105984:	bf0c      	ite	eq
 8105986:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 810598a:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
 810598e:	601a      	str	r2, [r3, #0]
 8105990:	e7c3      	b.n	810591a <I2C_Master_ISR_DMA+0x5a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8105992:	064d      	lsls	r5, r1, #25
 8105994:	d513      	bpl.n	81059be <I2C_Master_ISR_DMA+0xfe>
 8105996:	0650      	lsls	r0, r2, #25
 8105998:	d511      	bpl.n	81059be <I2C_Master_ISR_DMA+0xfe>
    if (hi2c->XferCount == 0U)
 810599a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 810599c:	b29b      	uxth	r3, r3
 810599e:	2b00      	cmp	r3, #0
 81059a0:	d13d      	bne.n	8105a1e <I2C_Master_ISR_DMA+0x15e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 81059a2:	6822      	ldr	r2, [r4, #0]
 81059a4:	6853      	ldr	r3, [r2, #4]
 81059a6:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 81059aa:	d1b6      	bne.n	810591a <I2C_Master_ISR_DMA+0x5a>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 81059ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 81059ae:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 81059b2:	d141      	bne.n	8105a38 <I2C_Master_ISR_DMA+0x178>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81059b4:	6853      	ldr	r3, [r2, #4]
 81059b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81059ba:	6053      	str	r3, [r2, #4]
 81059bc:	e7ad      	b.n	810591a <I2C_Master_ISR_DMA+0x5a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 81059be:	068b      	lsls	r3, r1, #26
 81059c0:	d5ab      	bpl.n	810591a <I2C_Master_ISR_DMA+0x5a>
 81059c2:	0692      	lsls	r2, r2, #26
 81059c4:	d5a9      	bpl.n	810591a <I2C_Master_ISR_DMA+0x5a>
    I2C_ITMasterCplt(hi2c, ITFlags);
 81059c6:	4620      	mov	r0, r4
 81059c8:	f7ff fdde 	bl	8105588 <I2C_ITMasterCplt>
 81059cc:	e7a5      	b.n	810591a <I2C_Master_ISR_DMA+0x5a>
 81059ce:	2260      	movs	r2, #96	; 0x60
 81059d0:	e794      	b.n	81058fc <I2C_Master_ISR_DMA+0x3c>
  __HAL_LOCK(hi2c);
 81059d2:	2002      	movs	r0, #2
}
 81059d4:	4770      	bx	lr
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 81059d6:	685a      	ldr	r2, [r3, #4]
 81059d8:	f012 7200 	ands.w	r2, r2, #33554432	; 0x2000000
 81059dc:	d11f      	bne.n	8105a1e <I2C_Master_ISR_DMA+0x15e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81059de:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 81059e2:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 81059e6:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 81059e8:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 81059ec:	d04a      	beq.n	8105a84 <I2C_Master_ISR_DMA+0x1c4>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 81059ee:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 81059f0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 81059f4:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81059f6:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 81059fa:	681d      	ldr	r5, [r3, #0]
    hi2c->XferISR       = NULL;
 81059fc:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 81059fe:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8105a02:	2828      	cmp	r0, #40	; 0x28
 8105a04:	bf0c      	ite	eq
 8105a06:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 8105a0a:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105a0e:	4029      	ands	r1, r5
 8105a10:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8105a12:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8105a14:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8105a18:	f7ff faa2 	bl	8104f60 <HAL_I2C_MasterRxCpltCallback>
 8105a1c:	e77d      	b.n	810591a <I2C_Master_ISR_DMA+0x5a>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8105a1e:	2140      	movs	r1, #64	; 0x40
 8105a20:	4620      	mov	r0, r4
 8105a22:	f7ff fb4d 	bl	81050c0 <I2C_ITError>
 8105a26:	e778      	b.n	810591a <I2C_Master_ISR_DMA+0x5a>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8105a28:	22ff      	movs	r2, #255	; 0xff
 8105a2a:	8522      	strh	r2, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8105a2c:	f44f 0c7f 	mov.w	ip, #16711680	; 0xff0000
 8105a30:	4611      	mov	r1, r2
 8105a32:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8105a36:	e795      	b.n	8105964 <I2C_Master_ISR_DMA+0xa4>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8105a3c:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8105a40:	2921      	cmp	r1, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_READY;
 8105a42:	f04f 0020 	mov.w	r0, #32
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8105a46:	d035      	beq.n	8105ab4 <I2C_Master_ISR_DMA+0x1f4>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8105a48:	2112      	movs	r1, #18
    hi2c->State         = HAL_I2C_STATE_READY;
 8105a4a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8105a4e:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105a50:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105a54:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8105a56:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105a58:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8105a5c:	2928      	cmp	r1, #40	; 0x28
 8105a5e:	bf0c      	ite	eq
 8105a60:	f06f 0144 	mvneq.w	r1, #68	; 0x44
 8105a64:	f06f 01f4 	mvnne.w	r1, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105a68:	4001      	ands	r1, r0
 8105a6a:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8105a6c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8105a6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8105a72:	f7ff fa75 	bl	8104f60 <HAL_I2C_MasterRxCpltCallback>
 8105a76:	e750      	b.n	810591a <I2C_Master_ISR_DMA+0x5a>
  MODIFY_REG(hi2c->Instance->CR2,
 8105a78:	b2ca      	uxtb	r2, r1
 8105a7a:	ea4f 4c02 	mov.w	ip, r2, lsl #16
          xfermode = I2C_AUTOEND_MODE;
 8105a7e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8105a82:	e76f      	b.n	8105964 <I2C_Master_ISR_DMA+0xa4>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8105a84:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8105a86:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8105a8a:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105a8c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105a90:	6819      	ldr	r1, [r3, #0]
    hi2c->XferISR       = NULL;
 8105a92:	6362      	str	r2, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105a94:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8105a98:	2828      	cmp	r0, #40	; 0x28
 8105a9a:	bf0c      	ite	eq
 8105a9c:	f06f 0042 	mvneq.w	r0, #66	; 0x42
 8105aa0:	f06f 00f2 	mvnne.w	r0, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105aa4:	4001      	ands	r1, r0
 8105aa6:	6019      	str	r1, [r3, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8105aa8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8105aaa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8105aae:	f7ff fa55 	bl	8104f5c <HAL_I2C_MasterTxCpltCallback>
}
 8105ab2:	e732      	b.n	810591a <I2C_Master_ISR_DMA+0x5a>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8105ab4:	2111      	movs	r1, #17
    hi2c->State         = HAL_I2C_STATE_READY;
 8105ab6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8105aba:	6321      	str	r1, [r4, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105abc:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105ac0:	6810      	ldr	r0, [r2, #0]
    hi2c->XferISR       = NULL;
 8105ac2:	6363      	str	r3, [r4, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8105ac4:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8105ac8:	2928      	cmp	r1, #40	; 0x28
 8105aca:	bf0c      	ite	eq
 8105acc:	f06f 0142 	mvneq.w	r1, #66	; 0x42
 8105ad0:	f06f 01f2 	mvnne.w	r1, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8105ad4:	4001      	ands	r1, r0
 8105ad6:	6011      	str	r1, [r2, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8105ad8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8105ada:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8105ade:	f7ff fa3d 	bl	8104f5c <HAL_I2C_MasterTxCpltCallback>
}
 8105ae2:	e71a      	b.n	810591a <I2C_Master_ISR_DMA+0x5a>
 8105ae4:	081058c1 	.word	0x081058c1
 8105ae8:	081056ad 	.word	0x081056ad
 8105aec:	fc009c00 	.word	0xfc009c00

08105af0 <I2C_DMAError>:
{
 8105af0:	b538      	push	{r3, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8105af2:	6b85      	ldr	r5, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8105af4:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8105af6:	b33c      	cbz	r4, 8105b48 <I2C_DMAError+0x58>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8105af8:	6823      	ldr	r3, [r4, #0]
 8105afa:	4a32      	ldr	r2, [pc, #200]	; (8105bc4 <I2C_DMAError+0xd4>)
 8105afc:	4293      	cmp	r3, r2
 8105afe:	d01e      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b00:	3218      	adds	r2, #24
 8105b02:	4293      	cmp	r3, r2
 8105b04:	d01b      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b06:	3218      	adds	r2, #24
 8105b08:	4293      	cmp	r3, r2
 8105b0a:	d018      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b0c:	3218      	adds	r2, #24
 8105b0e:	4293      	cmp	r3, r2
 8105b10:	d015      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b12:	3218      	adds	r2, #24
 8105b14:	4293      	cmp	r3, r2
 8105b16:	d012      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b18:	3218      	adds	r2, #24
 8105b1a:	4293      	cmp	r3, r2
 8105b1c:	d00f      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b1e:	3218      	adds	r2, #24
 8105b20:	4293      	cmp	r3, r2
 8105b22:	d00c      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b24:	3218      	adds	r2, #24
 8105b26:	4293      	cmp	r3, r2
 8105b28:	d009      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b2a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8105b2e:	4293      	cmp	r3, r2
 8105b30:	d005      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b32:	3218      	adds	r2, #24
 8105b34:	4293      	cmp	r3, r2
 8105b36:	d002      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b38:	3218      	adds	r2, #24
 8105b3a:	4293      	cmp	r3, r2
 8105b3c:	d0ff      	beq.n	8105b3e <I2C_DMAError+0x4e>
 8105b3e:	685b      	ldr	r3, [r3, #4]
 8105b40:	fab3 f383 	clz	r3, r3
 8105b44:	095b      	lsrs	r3, r3, #5
  uint32_t treatdmaerror = 0U;
 8105b46:	461c      	mov	r4, r3
  if (hi2c->hdmarx != NULL)
 8105b48:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8105b4a:	b39b      	cbz	r3, 8105bb4 <I2C_DMAError+0xc4>
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8105b4c:	681a      	ldr	r2, [r3, #0]
 8105b4e:	4b1d      	ldr	r3, [pc, #116]	; (8105bc4 <I2C_DMAError+0xd4>)
 8105b50:	429a      	cmp	r2, r3
 8105b52:	d01e      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b54:	3318      	adds	r3, #24
 8105b56:	429a      	cmp	r2, r3
 8105b58:	d01b      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b5a:	3318      	adds	r3, #24
 8105b5c:	429a      	cmp	r2, r3
 8105b5e:	d018      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b60:	3318      	adds	r3, #24
 8105b62:	429a      	cmp	r2, r3
 8105b64:	d015      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b66:	3318      	adds	r3, #24
 8105b68:	429a      	cmp	r2, r3
 8105b6a:	d012      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b6c:	3318      	adds	r3, #24
 8105b6e:	429a      	cmp	r2, r3
 8105b70:	d00f      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b72:	3318      	adds	r3, #24
 8105b74:	429a      	cmp	r2, r3
 8105b76:	d00c      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b78:	3318      	adds	r3, #24
 8105b7a:	429a      	cmp	r2, r3
 8105b7c:	d009      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b7e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8105b82:	429a      	cmp	r2, r3
 8105b84:	d005      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b86:	3318      	adds	r3, #24
 8105b88:	429a      	cmp	r2, r3
 8105b8a:	d002      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b8c:	3318      	adds	r3, #24
 8105b8e:	429a      	cmp	r2, r3
 8105b90:	d0ff      	beq.n	8105b92 <I2C_DMAError+0xa2>
 8105b92:	6853      	ldr	r3, [r2, #4]
 8105b94:	b973      	cbnz	r3, 8105bb4 <I2C_DMAError+0xc4>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8105b96:	f7fe fc61 	bl	810445c <HAL_DMA_GetError>
 8105b9a:	2802      	cmp	r0, #2
 8105b9c:	d010      	beq.n	8105bc0 <I2C_DMAError+0xd0>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8105b9e:	682a      	ldr	r2, [r5, #0]
 8105ba0:	6853      	ldr	r3, [r2, #4]
 8105ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8105ba6:	4628      	mov	r0, r5
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8105ba8:	6053      	str	r3, [r2, #4]
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8105baa:	2110      	movs	r1, #16
}
 8105bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8105bb0:	f7ff ba86 	b.w	81050c0 <I2C_ITError>
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8105bb4:	f7fe fc52 	bl	810445c <HAL_DMA_GetError>
 8105bb8:	2802      	cmp	r0, #2
 8105bba:	d001      	beq.n	8105bc0 <I2C_DMAError+0xd0>
 8105bbc:	2c00      	cmp	r4, #0
 8105bbe:	d1ee      	bne.n	8105b9e <I2C_DMAError+0xae>
}
 8105bc0:	bd38      	pop	{r3, r4, r5, pc}
 8105bc2:	bf00      	nop
 8105bc4:	40020010 	.word	0x40020010

08105bc8 <I2C_DMAMasterTransmitCplt>:
{
 8105bc8:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8105bca:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8105bcc:	6822      	ldr	r2, [r4, #0]
 8105bce:	6813      	ldr	r3, [r2, #0]
 8105bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8105bd4:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8105bd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8105bd8:	b29b      	uxth	r3, r3
 8105bda:	b963      	cbnz	r3, 8105bf6 <I2C_DMAMasterTransmitCplt+0x2e>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8105bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8105bde:	491c      	ldr	r1, [pc, #112]	; (8105c50 <I2C_DMAMasterTransmitCplt+0x88>)
 8105be0:	428b      	cmp	r3, r1
 8105be2:	d02a      	beq.n	8105c3a <I2C_DMAMasterTransmitCplt+0x72>
 8105be4:	491b      	ldr	r1, [pc, #108]	; (8105c54 <I2C_DMAMasterTransmitCplt+0x8c>)
      tmpisr |= I2C_IT_STOPI;
 8105be6:	428b      	cmp	r3, r1
 8105be8:	bf0c      	ite	eq
 8105bea:	2360      	moveq	r3, #96	; 0x60
 8105bec:	2320      	movne	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8105bee:	6811      	ldr	r1, [r2, #0]
 8105bf0:	430b      	orrs	r3, r1
 8105bf2:	6013      	str	r3, [r2, #0]
}
 8105bf4:	bd10      	pop	{r4, pc}
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105bf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8105bf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8105bfa:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105bfc:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr += hi2c->XferSize;
 8105bfe:	4401      	add	r1, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105c00:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
 8105c02:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105c04:	d816      	bhi.n	8105c34 <I2C_DMAMasterTransmitCplt+0x6c>
      hi2c->XferSize = hi2c->XferCount;
 8105c06:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8105c08:	b280      	uxth	r0, r0
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8105c0a:	4603      	mov	r3, r0
 8105c0c:	8520      	strh	r0, [r4, #40]	; 0x28
 8105c0e:	3228      	adds	r2, #40	; 0x28
 8105c10:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8105c12:	f7fd fc0d 	bl	8103430 <HAL_DMA_Start_IT>
 8105c16:	b990      	cbnz	r0, 8105c3e <I2C_DMAMasterTransmitCplt+0x76>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8105c18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8105c1a:	4a0d      	ldr	r2, [pc, #52]	; (8105c50 <I2C_DMAMasterTransmitCplt+0x88>)
 8105c1c:	4293      	cmp	r3, r2
 8105c1e:	d014      	beq.n	8105c4a <I2C_DMAMasterTransmitCplt+0x82>
 8105c20:	4a0c      	ldr	r2, [pc, #48]	; (8105c54 <I2C_DMAMasterTransmitCplt+0x8c>)
 8105c22:	4293      	cmp	r3, r2
 8105c24:	bf0c      	ite	eq
 8105c26:	2340      	moveq	r3, #64	; 0x40
 8105c28:	2300      	movne	r3, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8105c2a:	6821      	ldr	r1, [r4, #0]
 8105c2c:	680a      	ldr	r2, [r1, #0]
 8105c2e:	4313      	orrs	r3, r2
 8105c30:	600b      	str	r3, [r1, #0]
}
 8105c32:	bd10      	pop	{r4, pc}
 8105c34:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105c36:	4618      	mov	r0, r3
 8105c38:	e7e8      	b.n	8105c0c <I2C_DMAMasterTransmitCplt+0x44>
 8105c3a:	2360      	movs	r3, #96	; 0x60
 8105c3c:	e7d7      	b.n	8105bee <I2C_DMAMasterTransmitCplt+0x26>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8105c3e:	4620      	mov	r0, r4
 8105c40:	2110      	movs	r1, #16
}
 8105c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8105c46:	f7ff ba3b 	b.w	81050c0 <I2C_ITError>
      tmpisr |= I2C_IT_TCI;
 8105c4a:	2340      	movs	r3, #64	; 0x40
 8105c4c:	e7ed      	b.n	8105c2a <I2C_DMAMasterTransmitCplt+0x62>
 8105c4e:	bf00      	nop
 8105c50:	081058c1 	.word	0x081058c1
 8105c54:	081056ad 	.word	0x081056ad

08105c58 <I2C_DMAMasterReceiveCplt>:
{
 8105c58:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8105c5a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8105c5c:	6821      	ldr	r1, [r4, #0]
 8105c5e:	680b      	ldr	r3, [r1, #0]
 8105c60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8105c64:	600b      	str	r3, [r1, #0]
  if (hi2c->XferCount == 0U)
 8105c66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8105c68:	b29b      	uxth	r3, r3
 8105c6a:	b963      	cbnz	r3, 8105c86 <I2C_DMAMasterReceiveCplt+0x2e>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8105c6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8105c6e:	4a1d      	ldr	r2, [pc, #116]	; (8105ce4 <I2C_DMAMasterReceiveCplt+0x8c>)
 8105c70:	4293      	cmp	r3, r2
 8105c72:	d02a      	beq.n	8105cca <I2C_DMAMasterReceiveCplt+0x72>
 8105c74:	4a1c      	ldr	r2, [pc, #112]	; (8105ce8 <I2C_DMAMasterReceiveCplt+0x90>)
      tmpisr |= I2C_IT_STOPI;
 8105c76:	4293      	cmp	r3, r2
 8105c78:	bf0c      	ite	eq
 8105c7a:	2360      	moveq	r3, #96	; 0x60
 8105c7c:	2320      	movne	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8105c7e:	680a      	ldr	r2, [r1, #0]
 8105c80:	4313      	orrs	r3, r2
 8105c82:	600b      	str	r3, [r1, #0]
}
 8105c84:	bd10      	pop	{r4, pc}
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105c86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8105c88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8105c8a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105c8c:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr += hi2c->XferSize;
 8105c8e:	4402      	add	r2, r0
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105c90:	2bff      	cmp	r3, #255	; 0xff
    hi2c->pBuffPtr += hi2c->XferSize;
 8105c92:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105c94:	d816      	bhi.n	8105cc4 <I2C_DMAMasterReceiveCplt+0x6c>
      hi2c->XferSize = hi2c->XferCount;
 8105c96:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8105c98:	b280      	uxth	r0, r0
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8105c9a:	4603      	mov	r3, r0
 8105c9c:	8520      	strh	r0, [r4, #40]	; 0x28
 8105c9e:	3124      	adds	r1, #36	; 0x24
 8105ca0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8105ca2:	f7fd fbc5 	bl	8103430 <HAL_DMA_Start_IT>
 8105ca6:	b9a8      	cbnz	r0, 8105cd4 <I2C_DMAMasterReceiveCplt+0x7c>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8105ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8105caa:	4a0e      	ldr	r2, [pc, #56]	; (8105ce4 <I2C_DMAMasterReceiveCplt+0x8c>)
 8105cac:	4293      	cmp	r3, r2
 8105cae:	d017      	beq.n	8105ce0 <I2C_DMAMasterReceiveCplt+0x88>
 8105cb0:	4a0d      	ldr	r2, [pc, #52]	; (8105ce8 <I2C_DMAMasterReceiveCplt+0x90>)
 8105cb2:	4293      	cmp	r3, r2
 8105cb4:	bf0c      	ite	eq
 8105cb6:	2340      	moveq	r3, #64	; 0x40
 8105cb8:	2300      	movne	r3, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8105cba:	6821      	ldr	r1, [r4, #0]
 8105cbc:	680a      	ldr	r2, [r1, #0]
 8105cbe:	4313      	orrs	r3, r2
 8105cc0:	600b      	str	r3, [r1, #0]
}
 8105cc2:	bd10      	pop	{r4, pc}
 8105cc4:	23ff      	movs	r3, #255	; 0xff
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105cc6:	4618      	mov	r0, r3
 8105cc8:	e7e8      	b.n	8105c9c <I2C_DMAMasterReceiveCplt+0x44>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8105cca:	680a      	ldr	r2, [r1, #0]
 8105ccc:	2360      	movs	r3, #96	; 0x60
 8105cce:	4313      	orrs	r3, r2
 8105cd0:	600b      	str	r3, [r1, #0]
}
 8105cd2:	bd10      	pop	{r4, pc}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8105cd4:	4620      	mov	r0, r4
 8105cd6:	2110      	movs	r1, #16
}
 8105cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8105cdc:	f7ff b9f0 	b.w	81050c0 <I2C_ITError>
      tmpisr |= I2C_IT_TCI;
 8105ce0:	2340      	movs	r3, #64	; 0x40
 8105ce2:	e7ea      	b.n	8105cba <I2C_DMAMasterReceiveCplt+0x62>
 8105ce4:	081058c1 	.word	0x081058c1
 8105ce8:	081056ad 	.word	0x081056ad

08105cec <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8105cec:	6803      	ldr	r3, [r0, #0]
 8105cee:	699a      	ldr	r2, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8105cf0:	6819      	ldr	r1, [r3, #0]
{
 8105cf2:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105cf4:	05d4      	lsls	r4, r2, #23
 8105cf6:	d52f      	bpl.n	8105d58 <HAL_I2C_ER_IRQHandler+0x6c>
 8105cf8:	060c      	lsls	r4, r1, #24
 8105cfa:	d51f      	bpl.n	8105d3c <HAL_I2C_ER_IRQHandler+0x50>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8105cfc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8105cfe:	f041 0101 	orr.w	r1, r1, #1
 8105d02:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105d04:	f44f 7480 	mov.w	r4, #256	; 0x100
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105d08:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8105d0a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105d0c:	d529      	bpl.n	8105d62 <HAL_I2C_ER_IRQHandler+0x76>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8105d0e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8105d10:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8105d14:	f041 0108 	orr.w	r1, r1, #8
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105d18:	0592      	lsls	r2, r2, #22
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8105d1a:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8105d1c:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105d1e:	d506      	bpl.n	8105d2e <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8105d20:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8105d22:	f44f 7100 	mov.w	r1, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8105d26:	f042 0202 	orr.w	r2, r2, #2
 8105d2a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8105d2c:	61d9      	str	r1, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8105d2e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8105d30:	f011 0f0b 	tst.w	r1, #11
 8105d34:	d10c      	bne.n	8105d50 <HAL_I2C_ER_IRQHandler+0x64>
}
 8105d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8105d3a:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105d3c:	0554      	lsls	r4, r2, #21
 8105d3e:	d4f6      	bmi.n	8105d2e <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105d40:	0594      	lsls	r4, r2, #22
 8105d42:	d5f4      	bpl.n	8105d2e <HAL_I2C_ER_IRQHandler+0x42>
 8105d44:	0609      	lsls	r1, r1, #24
 8105d46:	d4eb      	bmi.n	8105d20 <HAL_I2C_ER_IRQHandler+0x34>
  tmperror = hi2c->ErrorCode;
 8105d48:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8105d4a:	f011 0f0b 	tst.w	r1, #11
 8105d4e:	d0f2      	beq.n	8105d36 <HAL_I2C_ER_IRQHandler+0x4a>
}
 8105d50:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8105d54:	f7ff b9b4 	b.w	81050c0 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105d58:	0554      	lsls	r4, r2, #21
 8105d5a:	d5f1      	bpl.n	8105d40 <HAL_I2C_ER_IRQHandler+0x54>
 8105d5c:	0609      	lsls	r1, r1, #24
 8105d5e:	d4d6      	bmi.n	8105d0e <HAL_I2C_ER_IRQHandler+0x22>
 8105d60:	e7e5      	b.n	8105d2e <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8105d62:	0592      	lsls	r2, r2, #22
 8105d64:	d4dc      	bmi.n	8105d20 <HAL_I2C_ER_IRQHandler+0x34>
 8105d66:	e7e2      	b.n	8105d2e <HAL_I2C_ER_IRQHandler+0x42>

08105d68 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105d68:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8105d6c:	2a20      	cmp	r2, #32
 8105d6e:	d123      	bne.n	8105db8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8105d70:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105d74:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8105d78:	2a01      	cmp	r2, #1
 8105d7a:	4603      	mov	r3, r0
 8105d7c:	d01c      	beq.n	8105db8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105d7e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8105d80:	2024      	movs	r0, #36	; 0x24
{
 8105d82:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8105d84:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8105d88:	6810      	ldr	r0, [r2, #0]
 8105d8a:	f020 0001 	bic.w	r0, r0, #1
 8105d8e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8105d90:	6810      	ldr	r0, [r2, #0]
 8105d92:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8105d96:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8105d98:	6810      	ldr	r0, [r2, #0]
 8105d9a:	4301      	orrs	r1, r0
 8105d9c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105d9e:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105da0:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8105da4:	f041 0101 	orr.w	r1, r1, #1
 8105da8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8105daa:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8105dae:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 8105db2:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8105db4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8105db8:	2002      	movs	r0, #2
}
 8105dba:	4770      	bx	lr

08105dbc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105dbc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8105dc0:	2a20      	cmp	r2, #32
 8105dc2:	d122      	bne.n	8105e0a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8105dc4:	b500      	push	{lr}
 8105dc6:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105dca:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8105dce:	2a01      	cmp	r2, #1
 8105dd0:	4603      	mov	r3, r0
 8105dd2:	d01c      	beq.n	8105e0e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105dd4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8105dd6:	2024      	movs	r0, #36	; 0x24
 8105dd8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8105ddc:	6810      	ldr	r0, [r2, #0]
 8105dde:	f020 0001 	bic.w	r0, r0, #1
 8105de2:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8105de4:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8105de6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105dea:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105dee:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105df0:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105df2:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8105df6:	f041 0101 	orr.w	r1, r1, #1
 8105dfa:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8105dfc:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8105e00:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 8105e04:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8105e06:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8105e0a:	2002      	movs	r0, #2
}
 8105e0c:	4770      	bx	lr
    return HAL_BUSY;
 8105e0e:	2002      	movs	r0, #2
}
 8105e10:	f85d fb04 	ldr.w	pc, [sp], #4

08105e14 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105e14:	b538      	push	{r3, r4, r5, lr}
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105e16:	4c1f      	ldr	r4, [pc, #124]	; (8105e94 <HAL_PWREx_EnterSTOPMode+0x80>)
 8105e18:	6823      	ldr	r3, [r4, #0]
 8105e1a:	f023 0301 	bic.w	r3, r3, #1
 8105e1e:	4303      	orrs	r3, r0
{
 8105e20:	460d      	mov	r5, r1
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105e22:	6023      	str	r3, [r4, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105e24:	b1a2      	cbz	r2, 8105e50 <HAL_PWREx_EnterSTOPMode+0x3c>

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105e26:	2a01      	cmp	r2, #1
 8105e28:	d008      	beq.n	8105e3c <HAL_PWREx_EnterSTOPMode+0x28>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105e2a:	f7fd f849 	bl	8102ec0 <HAL_GetCurrentCPUID>
 8105e2e:	2803      	cmp	r0, #3
 8105e30:	d028      	beq.n	8105e84 <HAL_PWREx_EnterSTOPMode+0x70>
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105e32:	6963      	ldr	r3, [r4, #20]
 8105e34:	f023 0304 	bic.w	r3, r3, #4
 8105e38:	6163      	str	r3, [r4, #20]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105e3a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105e3c:	f7fd f840 	bl	8102ec0 <HAL_GetCurrentCPUID>
 8105e40:	2801      	cmp	r0, #1
 8105e42:	d1fa      	bne.n	8105e3a <HAL_PWREx_EnterSTOPMode+0x26>
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105e44:	6963      	ldr	r3, [r4, #20]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e46:	4a14      	ldr	r2, [pc, #80]	; (8105e98 <HAL_PWREx_EnterSTOPMode+0x84>)
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105e48:	f023 0302 	bic.w	r3, r3, #2
 8105e4c:	6163      	str	r3, [r4, #20]
 8105e4e:	e008      	b.n	8105e62 <HAL_PWREx_EnterSTOPMode+0x4e>
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105e50:	f7fd f836 	bl	8102ec0 <HAL_GetCurrentCPUID>
 8105e54:	2803      	cmp	r0, #3
 8105e56:	d1f0      	bne.n	8105e3a <HAL_PWREx_EnterSTOPMode+0x26>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105e58:	6923      	ldr	r3, [r4, #16]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e5a:	4a0f      	ldr	r2, [pc, #60]	; (8105e98 <HAL_PWREx_EnterSTOPMode+0x84>)
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105e5c:	f023 0301 	bic.w	r3, r3, #1
 8105e60:	6123      	str	r3, [r4, #16]
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e62:	6913      	ldr	r3, [r2, #16]
 8105e64:	f043 0304 	orr.w	r3, r3, #4
 8105e68:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8105e6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8105e6e:	f3bf 8f6f 	isb	sy
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105e72:	2d01      	cmp	r5, #1
 8105e74:	d00b      	beq.n	8105e8e <HAL_PWREx_EnterSTOPMode+0x7a>
      __WFE ();
 8105e76:	bf20      	wfe
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e78:	4a07      	ldr	r2, [pc, #28]	; (8105e98 <HAL_PWREx_EnterSTOPMode+0x84>)
 8105e7a:	6913      	ldr	r3, [r2, #16]
 8105e7c:	f023 0304 	bic.w	r3, r3, #4
 8105e80:	6113      	str	r3, [r2, #16]
}
 8105e82:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105e84:	6923      	ldr	r3, [r4, #16]
 8105e86:	f023 0304 	bic.w	r3, r3, #4
 8105e8a:	6123      	str	r3, [r4, #16]
}
 8105e8c:	bd38      	pop	{r3, r4, r5, pc}
      __WFI ();
 8105e8e:	bf30      	wfi
 8105e90:	e7f2      	b.n	8105e78 <HAL_PWREx_EnterSTOPMode+0x64>
 8105e92:	bf00      	nop
 8105e94:	58024800 	.word	0x58024800
 8105e98:	e000ed00 	.word	0xe000ed00

08105e9c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105e9c:	b508      	push	{r3, lr}
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105e9e:	f7fd f80f 	bl	8102ec0 <HAL_GetCurrentCPUID>
 8105ea2:	2803      	cmp	r0, #3
 8105ea4:	d000      	beq.n	8105ea8 <HAL_PWREx_ClearPendingEvent+0xc>
  {
    __WFE ();
  }
  else
  {
    __SEV ();
 8105ea6:	bf40      	sev
    __WFE ();
 8105ea8:	bf20      	wfe
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105eaa:	bd08      	pop	{r3, pc}

08105eac <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105eac:	4b3b      	ldr	r3, [pc, #236]	; (8105f9c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8105eae:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105eb2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105eb4:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105eb6:	6b59      	ldr	r1, [r3, #52]	; 0x34

    if (pllm != 0U)
 8105eb8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105ebc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8105ec0:	d038      	beq.n	8105f34 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105ec2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105ec6:	f005 0501 	and.w	r5, r5, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105eca:	fb05 f101 	mul.w	r1, r5, r1
 8105ece:	ee07 1a90 	vmov	s15, r1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105ed2:	f002 0203 	and.w	r2, r2, #3
 8105ed6:	2a01      	cmp	r2, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105ed8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    {
      switch (pllsource)
 8105edc:	d002      	beq.n	8105ee4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8105ede:	2a02      	cmp	r2, #2
 8105ee0:	d04e      	beq.n	8105f80 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8105ee2:	b34a      	cbz	r2, 8105f38 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105ee4:	ee07 0a90 	vmov	s15, r0
 8105ee8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8105fa0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8105eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105efa:	ee07 3a10 	vmov	s14, r3
 8105efe:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8105fa4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8105f02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f0a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8105f0e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8105f12:	ee27 7a87 	vmul.f32	s14, s15, s14
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105f16:	4b21      	ldr	r3, [pc, #132]	; (8105f9c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8105f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f1a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8105f1e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8105f20:	ee07 3a90 	vmov	s15, r3
 8105f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105f28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8105f2c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8105f30:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8105f34:	bc30      	pop	{r4, r5}
 8105f36:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105f38:	681a      	ldr	r2, [r3, #0]
 8105f3a:	0692      	lsls	r2, r2, #26
 8105f3c:	d527      	bpl.n	8105f8e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105f3e:	6819      	ldr	r1, [r3, #0]
 8105f40:	4a19      	ldr	r2, [pc, #100]	; (8105fa8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105f44:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8105fa4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105f48:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8105f4c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105f4e:	ee07 2a90 	vmov	s15, r2
 8105f52:	ee07 0a10 	vmov	s14, r0
 8105f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8105f5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8105f66:	ee07 3a10 	vmov	s14, r3
 8105f6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8105f6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8105f72:	eea5 7a86 	vfma.f32	s14, s11, s12
 8105f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8105f7a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8105f7e:	e7ca      	b.n	8105f16 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105f80:	ee07 0a90 	vmov	s15, r0
 8105f84:	eddf 6a09 	vldr	s13, [pc, #36]	; 8105fac <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8105f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105f8c:	e7b0      	b.n	8105ef0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105f8e:	ee07 0a90 	vmov	s15, r0
 8105f92:	eddf 6a07 	vldr	s13, [pc, #28]	; 8105fb0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8105f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8105f9a:	e7a9      	b.n	8105ef0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8105f9c:	58024400 	.word	0x58024400
 8105fa0:	4a742400 	.word	0x4a742400
 8105fa4:	39000000 	.word	0x39000000
 8105fa8:	03d09000 	.word	0x03d09000
 8105fac:	4b742400 	.word	0x4b742400
 8105fb0:	4c742400 	.word	0x4c742400

08105fb4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105fb4:	4a47      	ldr	r2, [pc, #284]	; (81060d4 <HAL_RCC_GetSysClockFreq+0x120>)
 8105fb6:	6913      	ldr	r3, [r2, #16]
 8105fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105fbc:	2b10      	cmp	r3, #16
 8105fbe:	d004      	beq.n	8105fca <HAL_RCC_GetSysClockFreq+0x16>
 8105fc0:	2b18      	cmp	r3, #24
 8105fc2:	d00e      	beq.n	8105fe2 <HAL_RCC_GetSysClockFreq+0x2e>
 8105fc4:	b11b      	cbz	r3, 8105fce <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8105fc6:	4844      	ldr	r0, [pc, #272]	; (81060d8 <HAL_RCC_GetSysClockFreq+0x124>)
 8105fc8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105fca:	4844      	ldr	r0, [pc, #272]	; (81060dc <HAL_RCC_GetSysClockFreq+0x128>)
 8105fcc:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105fce:	6813      	ldr	r3, [r2, #0]
 8105fd0:	0699      	lsls	r1, r3, #26
 8105fd2:	d54b      	bpl.n	810606c <HAL_RCC_GetSysClockFreq+0xb8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105fd4:	6810      	ldr	r0, [r2, #0]
 8105fd6:	4b42      	ldr	r3, [pc, #264]	; (81060e0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8105fd8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8105fdc:	fa23 f000 	lsr.w	r0, r3, r0
 8105fe0:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105fe2:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8105fe4:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105fe6:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105fe8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105fea:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if (pllm != 0U)
 8105fec:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105ff0:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8105ff4:	d038      	beq.n	8106068 <HAL_RCC_GetSysClockFreq+0xb4>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105ff6:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105ffa:	f005 0501 	and.w	r5, r5, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105ffe:	fb05 f101 	mul.w	r1, r5, r1
 8106002:	ee07 1a90 	vmov	s15, r1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106006:	f003 0303 	and.w	r3, r3, #3
 810600a:	2b01      	cmp	r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810600c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
      switch (pllsource)
 8106010:	d002      	beq.n	8106018 <HAL_RCC_GetSysClockFreq+0x64>
 8106012:	2b02      	cmp	r3, #2
 8106014:	d02c      	beq.n	8106070 <HAL_RCC_GetSysClockFreq+0xbc>
 8106016:	b393      	cbz	r3, 810607e <HAL_RCC_GetSysClockFreq+0xca>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106018:	ee07 0a90 	vmov	s15, r0
 810601c:	eddf 6a31 	vldr	s13, [pc, #196]	; 81060e4 <HAL_RCC_GetSysClockFreq+0x130>
 8106020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106028:	6b13      	ldr	r3, [r2, #48]	; 0x30
 810602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810602e:	ee07 3a90 	vmov	s15, r3
 8106032:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 81060e8 <HAL_RCC_GetSysClockFreq+0x134>
 8106036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810603a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810603e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8106042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106046:	ee27 7a27 	vmul.f32	s14, s14, s15
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810604a:	4b22      	ldr	r3, [pc, #136]	; (81060d4 <HAL_RCC_GetSysClockFreq+0x120>)
 810604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810604e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8106052:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8106054:	ee07 3a90 	vmov	s15, r3
 8106058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810605c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8106060:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8106064:	ee17 0a90 	vmov	r0, s15
}
 8106068:	bc30      	pop	{r4, r5}
 810606a:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 810606c:	481c      	ldr	r0, [pc, #112]	; (81060e0 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 810606e:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106070:	ee07 0a90 	vmov	s15, r0
 8106074:	eddf 6a1d 	vldr	s13, [pc, #116]	; 81060ec <HAL_RCC_GetSysClockFreq+0x138>
 8106078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810607c:	e7d2      	b.n	8106024 <HAL_RCC_GetSysClockFreq+0x70>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810607e:	6813      	ldr	r3, [r2, #0]
 8106080:	069b      	lsls	r3, r3, #26
 8106082:	d520      	bpl.n	81060c6 <HAL_RCC_GetSysClockFreq+0x112>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106084:	6811      	ldr	r1, [r2, #0]
 8106086:	4b16      	ldr	r3, [pc, #88]	; (81060e0 <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106088:	ed9f 6a17 	vldr	s12, [pc, #92]	; 81060e8 <HAL_RCC_GetSysClockFreq+0x134>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810608c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8106090:	40cb      	lsrs	r3, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106092:	ee07 3a90 	vmov	s15, r3
 8106096:	ee07 0a10 	vmov	s14, r0
 810609a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810609e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81060a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 81060a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81060a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060ac:	ee07 3a10 	vmov	s14, r3
 81060b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 81060b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 81060b8:	eea5 7a86 	vfma.f32	s14, s11, s12
 81060bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 81060c0:	ee27 7a26 	vmul.f32	s14, s14, s13
 81060c4:	e7c1      	b.n	810604a <HAL_RCC_GetSysClockFreq+0x96>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81060c6:	ee07 0a90 	vmov	s15, r0
 81060ca:	eddf 6a09 	vldr	s13, [pc, #36]	; 81060f0 <HAL_RCC_GetSysClockFreq+0x13c>
 81060ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81060d2:	e7a7      	b.n	8106024 <HAL_RCC_GetSysClockFreq+0x70>
 81060d4:	58024400 	.word	0x58024400
 81060d8:	003d0900 	.word	0x003d0900
 81060dc:	00f42400 	.word	0x00f42400
 81060e0:	03d09000 	.word	0x03d09000
 81060e4:	4a742400 	.word	0x4a742400
 81060e8:	39000000 	.word	0x39000000
 81060ec:	4b742400 	.word	0x4b742400
 81060f0:	4c742400 	.word	0x4c742400

081060f4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 81060f4:	4a17      	ldr	r2, [pc, #92]	; (8106154 <HAL_RCC_GetHCLKFreq+0x60>)
 81060f6:	6913      	ldr	r3, [r2, #16]
 81060f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81060fc:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81060fe:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106100:	d018      	beq.n	8106134 <HAL_RCC_GetHCLKFreq+0x40>
 8106102:	2b18      	cmp	r3, #24
 8106104:	d021      	beq.n	810614a <HAL_RCC_GetHCLKFreq+0x56>
 8106106:	b1bb      	cbz	r3, 8106138 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8106108:	4813      	ldr	r0, [pc, #76]	; (8106158 <HAL_RCC_GetHCLKFreq+0x64>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810610a:	4b12      	ldr	r3, [pc, #72]	; (8106154 <HAL_RCC_GetHCLKFreq+0x60>)
 810610c:	4913      	ldr	r1, [pc, #76]	; (810615c <HAL_RCC_GetHCLKFreq+0x68>)
 810610e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106110:	699b      	ldr	r3, [r3, #24]
 8106112:	4c13      	ldr	r4, [pc, #76]	; (8106160 <HAL_RCC_GetHCLKFreq+0x6c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106114:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106118:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810611c:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810611e:	5ccb      	ldrb	r3, [r1, r3]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106120:	4910      	ldr	r1, [pc, #64]	; (8106164 <HAL_RCC_GetHCLKFreq+0x70>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106122:	f002 021f 	and.w	r2, r2, #31
 8106126:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106128:	f003 031f 	and.w	r3, r3, #31
 810612c:	40d8      	lsrs	r0, r3
 810612e:	6020      	str	r0, [r4, #0]
  SystemCoreClock = SystemD2Clock;
 8106130:	6008      	str	r0, [r1, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8106132:	bd10      	pop	{r4, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106134:	480c      	ldr	r0, [pc, #48]	; (8106168 <HAL_RCC_GetHCLKFreq+0x74>)
 8106136:	e7e8      	b.n	810610a <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106138:	6813      	ldr	r3, [r2, #0]
 810613a:	069b      	lsls	r3, r3, #26
 810613c:	d508      	bpl.n	8106150 <HAL_RCC_GetHCLKFreq+0x5c>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810613e:	6813      	ldr	r3, [r2, #0]
 8106140:	480a      	ldr	r0, [pc, #40]	; (810616c <HAL_RCC_GetHCLKFreq+0x78>)
 8106142:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8106146:	40d8      	lsrs	r0, r3
 8106148:	e7df      	b.n	810610a <HAL_RCC_GetHCLKFreq+0x16>
 810614a:	f7ff feaf 	bl	8105eac <HAL_RCC_GetSysClockFreq.part.0>
 810614e:	e7dc      	b.n	810610a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106150:	4806      	ldr	r0, [pc, #24]	; (810616c <HAL_RCC_GetHCLKFreq+0x78>)
 8106152:	e7da      	b.n	810610a <HAL_RCC_GetHCLKFreq+0x16>
 8106154:	58024400 	.word	0x58024400
 8106158:	003d0900 	.word	0x003d0900
 810615c:	0810a050 	.word	0x0810a050
 8106160:	10000004 	.word	0x10000004
 8106164:	10000000 	.word	0x10000000
 8106168:	00f42400 	.word	0x00f42400
 810616c:	03d09000 	.word	0x03d09000

08106170 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106170:	4a1d      	ldr	r2, [pc, #116]	; (81061e8 <HAL_RCC_GetPCLK1Freq+0x78>)
 8106172:	6913      	ldr	r3, [r2, #16]
 8106174:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106178:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810617a:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 810617c:	d023      	beq.n	81061c6 <HAL_RCC_GetPCLK1Freq+0x56>
 810617e:	2b18      	cmp	r3, #24
 8106180:	d02c      	beq.n	81061dc <HAL_RCC_GetPCLK1Freq+0x6c>
 8106182:	b313      	cbz	r3, 81061ca <HAL_RCC_GetPCLK1Freq+0x5a>
    sysclockfreq = CSI_VALUE;
 8106184:	4819      	ldr	r0, [pc, #100]	; (81061ec <HAL_RCC_GetPCLK1Freq+0x7c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106186:	4a18      	ldr	r2, [pc, #96]	; (81061e8 <HAL_RCC_GetPCLK1Freq+0x78>)
 8106188:	4919      	ldr	r1, [pc, #100]	; (81061f0 <HAL_RCC_GetPCLK1Freq+0x80>)
 810618a:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810618c:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810618e:	f3c4 2c03 	ubfx	ip, r4, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106192:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106196:	f811 c00c 	ldrb.w	ip, [r1, ip]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810619a:	5ccb      	ldrb	r3, [r1, r3]
 810619c:	4c15      	ldr	r4, [pc, #84]	; (81061f4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810619e:	f00c 0c1f 	and.w	ip, ip, #31
 81061a2:	fa20 f00c 	lsr.w	r0, r0, ip
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81061a6:	f003 031f 	and.w	r3, r3, #31
 81061aa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = SystemD2Clock;
 81061ae:	4812      	ldr	r0, [pc, #72]	; (81061f8 <HAL_RCC_GetPCLK1Freq+0x88>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81061b0:	6023      	str	r3, [r4, #0]
  SystemCoreClock = SystemD2Clock;
 81061b2:	6003      	str	r3, [r0, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81061b4:	69d2      	ldr	r2, [r2, #28]
 81061b6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 81061ba:	5c88      	ldrb	r0, [r1, r2]
 81061bc:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81061c0:	fa23 f000 	lsr.w	r0, r3, r0
 81061c4:	bd10      	pop	{r4, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 81061c6:	480d      	ldr	r0, [pc, #52]	; (81061fc <HAL_RCC_GetPCLK1Freq+0x8c>)
 81061c8:	e7dd      	b.n	8106186 <HAL_RCC_GetPCLK1Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81061ca:	6813      	ldr	r3, [r2, #0]
 81061cc:	069b      	lsls	r3, r3, #26
 81061ce:	d508      	bpl.n	81061e2 <HAL_RCC_GetPCLK1Freq+0x72>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81061d0:	6813      	ldr	r3, [r2, #0]
 81061d2:	480b      	ldr	r0, [pc, #44]	; (8106200 <HAL_RCC_GetPCLK1Freq+0x90>)
 81061d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 81061d8:	40d8      	lsrs	r0, r3
 81061da:	e7d4      	b.n	8106186 <HAL_RCC_GetPCLK1Freq+0x16>
 81061dc:	f7ff fe66 	bl	8105eac <HAL_RCC_GetSysClockFreq.part.0>
 81061e0:	e7d1      	b.n	8106186 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81061e2:	4807      	ldr	r0, [pc, #28]	; (8106200 <HAL_RCC_GetPCLK1Freq+0x90>)
 81061e4:	e7cf      	b.n	8106186 <HAL_RCC_GetPCLK1Freq+0x16>
 81061e6:	bf00      	nop
 81061e8:	58024400 	.word	0x58024400
 81061ec:	003d0900 	.word	0x003d0900
 81061f0:	0810a050 	.word	0x0810a050
 81061f4:	10000004 	.word	0x10000004
 81061f8:	10000000 	.word	0x10000000
 81061fc:	00f42400 	.word	0x00f42400
 8106200:	03d09000 	.word	0x03d09000

08106204 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106204:	4a1d      	ldr	r2, [pc, #116]	; (810627c <HAL_RCC_GetPCLK2Freq+0x78>)
 8106206:	6913      	ldr	r3, [r2, #16]
 8106208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810620c:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810620e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106210:	d023      	beq.n	810625a <HAL_RCC_GetPCLK2Freq+0x56>
 8106212:	2b18      	cmp	r3, #24
 8106214:	d02c      	beq.n	8106270 <HAL_RCC_GetPCLK2Freq+0x6c>
 8106216:	b313      	cbz	r3, 810625e <HAL_RCC_GetPCLK2Freq+0x5a>
    sysclockfreq = CSI_VALUE;
 8106218:	4819      	ldr	r0, [pc, #100]	; (8106280 <HAL_RCC_GetPCLK2Freq+0x7c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810621a:	4a18      	ldr	r2, [pc, #96]	; (810627c <HAL_RCC_GetPCLK2Freq+0x78>)
 810621c:	4919      	ldr	r1, [pc, #100]	; (8106284 <HAL_RCC_GetPCLK2Freq+0x80>)
 810621e:	6994      	ldr	r4, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106220:	6993      	ldr	r3, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106222:	f3c4 2c03 	ubfx	ip, r4, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106226:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810622a:	f811 c00c 	ldrb.w	ip, [r1, ip]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810622e:	5ccb      	ldrb	r3, [r1, r3]
 8106230:	4c15      	ldr	r4, [pc, #84]	; (8106288 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106232:	f00c 0c1f 	and.w	ip, ip, #31
 8106236:	fa20 f00c 	lsr.w	r0, r0, ip
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810623a:	f003 031f 	and.w	r3, r3, #31
 810623e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = SystemD2Clock;
 8106242:	4812      	ldr	r0, [pc, #72]	; (810628c <HAL_RCC_GetPCLK2Freq+0x88>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106244:	6023      	str	r3, [r4, #0]
  SystemCoreClock = SystemD2Clock;
 8106246:	6003      	str	r3, [r0, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8106248:	69d2      	ldr	r2, [r2, #28]
 810624a:	f3c2 2202 	ubfx	r2, r2, #8, #3
 810624e:	5c88      	ldrb	r0, [r1, r2]
 8106250:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106254:	fa23 f000 	lsr.w	r0, r3, r0
 8106258:	bd10      	pop	{r4, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 810625a:	480d      	ldr	r0, [pc, #52]	; (8106290 <HAL_RCC_GetPCLK2Freq+0x8c>)
 810625c:	e7dd      	b.n	810621a <HAL_RCC_GetPCLK2Freq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810625e:	6813      	ldr	r3, [r2, #0]
 8106260:	069b      	lsls	r3, r3, #26
 8106262:	d508      	bpl.n	8106276 <HAL_RCC_GetPCLK2Freq+0x72>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106264:	6813      	ldr	r3, [r2, #0]
 8106266:	480b      	ldr	r0, [pc, #44]	; (8106294 <HAL_RCC_GetPCLK2Freq+0x90>)
 8106268:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 810626c:	40d8      	lsrs	r0, r3
 810626e:	e7d4      	b.n	810621a <HAL_RCC_GetPCLK2Freq+0x16>
 8106270:	f7ff fe1c 	bl	8105eac <HAL_RCC_GetSysClockFreq.part.0>
 8106274:	e7d1      	b.n	810621a <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106276:	4807      	ldr	r0, [pc, #28]	; (8106294 <HAL_RCC_GetPCLK2Freq+0x90>)
 8106278:	e7cf      	b.n	810621a <HAL_RCC_GetPCLK2Freq+0x16>
 810627a:	bf00      	nop
 810627c:	58024400 	.word	0x58024400
 8106280:	003d0900 	.word	0x003d0900
 8106284:	0810a050 	.word	0x0810a050
 8106288:	10000004 	.word	0x10000004
 810628c:	10000000 	.word	0x10000000
 8106290:	00f42400 	.word	0x00f42400
 8106294:	03d09000 	.word	0x03d09000

08106298 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810629a:	4c3b      	ldr	r4, [pc, #236]	; (8106388 <RCCEx_PLL2_Config+0xf0>)
 810629c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 810629e:	f003 0303 	and.w	r3, r3, #3
 81062a2:	2b03      	cmp	r3, #3
 81062a4:	d069      	beq.n	810637a <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81062a6:	6823      	ldr	r3, [r4, #0]
 81062a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81062ac:	6023      	str	r3, [r4, #0]
 81062ae:	4606      	mov	r6, r0
 81062b0:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81062b2:	f7fc fc23 	bl	8102afc <HAL_GetTick>
 81062b6:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81062b8:	e004      	b.n	81062c4 <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81062ba:	f7fc fc1f 	bl	8102afc <HAL_GetTick>
 81062be:	1b43      	subs	r3, r0, r5
 81062c0:	2b02      	cmp	r3, #2
 81062c2:	d858      	bhi.n	8106376 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81062c4:	6823      	ldr	r3, [r4, #0]
 81062c6:	011a      	lsls	r2, r3, #4
 81062c8:	d4f7      	bmi.n	81062ba <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81062ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81062cc:	6832      	ldr	r2, [r6, #0]
 81062ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 81062d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 81062d6:	62a3      	str	r3, [r4, #40]	; 0x28
 81062d8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 81062dc:	3b01      	subs	r3, #1
 81062de:	3a01      	subs	r2, #1
 81062e0:	025b      	lsls	r3, r3, #9
 81062e2:	0412      	lsls	r2, r2, #16
 81062e4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 81062e8:	b29b      	uxth	r3, r3
 81062ea:	4313      	orrs	r3, r2
 81062ec:	6872      	ldr	r2, [r6, #4]
 81062ee:	3a01      	subs	r2, #1
 81062f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81062f4:	4313      	orrs	r3, r2
 81062f6:	6932      	ldr	r2, [r6, #16]
 81062f8:	3a01      	subs	r2, #1
 81062fa:	0612      	lsls	r2, r2, #24
 81062fc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8106300:	4313      	orrs	r3, r2
 8106302:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106304:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8106306:	6972      	ldr	r2, [r6, #20]
 8106308:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 810630c:	4313      	orrs	r3, r2
 810630e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8106312:	69b2      	ldr	r2, [r6, #24]
 8106314:	f023 0320 	bic.w	r3, r3, #32
 8106318:	4313      	orrs	r3, r2
 810631a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810631c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810631e:	f023 0310 	bic.w	r3, r3, #16
 8106322:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8106324:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8106326:	69f2      	ldr	r2, [r6, #28]
 8106328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810632c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106330:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8106334:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106336:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8106338:	f043 0310 	orr.w	r3, r3, #16
 810633c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810633e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8106340:	b1ef      	cbz	r7, 810637e <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106342:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106344:	bf0c      	ite	eq
 8106346:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810634a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 810634e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106350:	4c0d      	ldr	r4, [pc, #52]	; (8106388 <RCCEx_PLL2_Config+0xf0>)
 8106352:	6823      	ldr	r3, [r4, #0]
 8106354:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8106358:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810635a:	f7fc fbcf 	bl	8102afc <HAL_GetTick>
 810635e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106360:	e004      	b.n	810636c <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8106362:	f7fc fbcb 	bl	8102afc <HAL_GetTick>
 8106366:	1b40      	subs	r0, r0, r5
 8106368:	2802      	cmp	r0, #2
 810636a:	d804      	bhi.n	8106376 <RCCEx_PLL2_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810636c:	6823      	ldr	r3, [r4, #0]
 810636e:	011b      	lsls	r3, r3, #4
 8106370:	d5f7      	bpl.n	8106362 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8106372:	2000      	movs	r0, #0
}
 8106374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8106376:	2003      	movs	r0, #3
}
 8106378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 810637a:	2001      	movs	r0, #1
}
 810637c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810637e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106382:	62e3      	str	r3, [r4, #44]	; 0x2c
 8106384:	e7e4      	b.n	8106350 <RCCEx_PLL2_Config+0xb8>
 8106386:	bf00      	nop
 8106388:	58024400 	.word	0x58024400

0810638c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810638e:	4c3b      	ldr	r4, [pc, #236]	; (810647c <RCCEx_PLL3_Config+0xf0>)
 8106390:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8106392:	f003 0303 	and.w	r3, r3, #3
 8106396:	2b03      	cmp	r3, #3
 8106398:	d069      	beq.n	810646e <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810639a:	6823      	ldr	r3, [r4, #0]
 810639c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81063a0:	6023      	str	r3, [r4, #0]
 81063a2:	4606      	mov	r6, r0
 81063a4:	460f      	mov	r7, r1

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81063a6:	f7fc fba9 	bl	8102afc <HAL_GetTick>
 81063aa:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81063ac:	e004      	b.n	81063b8 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81063ae:	f7fc fba5 	bl	8102afc <HAL_GetTick>
 81063b2:	1b43      	subs	r3, r0, r5
 81063b4:	2b02      	cmp	r3, #2
 81063b6:	d858      	bhi.n	810646a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81063b8:	6823      	ldr	r3, [r4, #0]
 81063ba:	009a      	lsls	r2, r3, #2
 81063bc:	d4f7      	bmi.n	81063ae <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81063be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 81063c0:	6832      	ldr	r2, [r6, #0]
 81063c2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 81063c6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 81063ca:	62a3      	str	r3, [r4, #40]	; 0x28
 81063cc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 81063d0:	3b01      	subs	r3, #1
 81063d2:	3a01      	subs	r2, #1
 81063d4:	025b      	lsls	r3, r3, #9
 81063d6:	0412      	lsls	r2, r2, #16
 81063d8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 81063dc:	b29b      	uxth	r3, r3
 81063de:	4313      	orrs	r3, r2
 81063e0:	6872      	ldr	r2, [r6, #4]
 81063e2:	3a01      	subs	r2, #1
 81063e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81063e8:	4313      	orrs	r3, r2
 81063ea:	6932      	ldr	r2, [r6, #16]
 81063ec:	3a01      	subs	r2, #1
 81063ee:	0612      	lsls	r2, r2, #24
 81063f0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 81063f4:	4313      	orrs	r3, r2
 81063f6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81063f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 81063fa:	6972      	ldr	r2, [r6, #20]
 81063fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8106400:	4313      	orrs	r3, r2
 8106402:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106404:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8106406:	69b2      	ldr	r2, [r6, #24]
 8106408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810640c:	4313      	orrs	r3, r2
 810640e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8106412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106416:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 810641a:	69f2      	ldr	r2, [r6, #28]
 810641c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106420:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106424:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8106428:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810642a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 810642c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106430:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106432:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8106434:	b1ef      	cbz	r7, 8106472 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8106436:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106438:	bf0c      	ite	eq
 810643a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810643e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8106442:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106444:	4c0d      	ldr	r4, [pc, #52]	; (810647c <RCCEx_PLL3_Config+0xf0>)
 8106446:	6823      	ldr	r3, [r4, #0]
 8106448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810644c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810644e:	f7fc fb55 	bl	8102afc <HAL_GetTick>
 8106452:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106454:	e004      	b.n	8106460 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8106456:	f7fc fb51 	bl	8102afc <HAL_GetTick>
 810645a:	1b40      	subs	r0, r0, r5
 810645c:	2802      	cmp	r0, #2
 810645e:	d804      	bhi.n	810646a <RCCEx_PLL3_Config+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106460:	6823      	ldr	r3, [r4, #0]
 8106462:	009b      	lsls	r3, r3, #2
 8106464:	d5f7      	bpl.n	8106456 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8106466:	2000      	movs	r0, #0
}
 8106468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 810646a:	2003      	movs	r0, #3
}
 810646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 810646e:	2001      	movs	r0, #1
}
 8106470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106476:	62e3      	str	r3, [r4, #44]	; 0x2c
 8106478:	e7e4      	b.n	8106444 <RCCEx_PLL3_Config+0xb8>
 810647a:	bf00      	nop
 810647c:	58024400 	.word	0x58024400

08106480 <HAL_RCCEx_PeriphCLKConfig>:
{
 8106480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8106484:	6803      	ldr	r3, [r0, #0]
 8106486:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
{
 810648a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810648c:	d022      	beq.n	81064d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->SpdifrxClockSelection)
 810648e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8106490:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8106494:	f000 849b 	beq.w	8106dce <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8106498:	d811      	bhi.n	81064be <HAL_RCCEx_PeriphCLKConfig+0x3e>
 810649a:	2a00      	cmp	r2, #0
 810649c:	f000 8505 	beq.w	8106eaa <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 81064a0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 81064a4:	f040 84fe 	bne.w	8106ea4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81064a8:	2102      	movs	r1, #2
 81064aa:	3004      	adds	r0, #4
 81064ac:	f7ff fef4 	bl	8106298 <RCCEx_PLL2_Config>
 81064b0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 81064b2:	2e00      	cmp	r6, #0
 81064b4:	f040 8493 	bne.w	8106dde <HAL_RCCEx_PeriphCLKConfig+0x95e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81064b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81064ba:	6823      	ldr	r3, [r4, #0]
 81064bc:	e003      	b.n	81064c6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    switch(PeriphClkInit->SpdifrxClockSelection)
 81064be:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 81064c2:	f040 84ef 	bne.w	8106ea4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81064c6:	48a8      	ldr	r0, [pc, #672]	; (8106768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 81064c8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 81064ca:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 81064ce:	430a      	orrs	r2, r1
 81064d0:	6502      	str	r2, [r0, #80]	; 0x50
 81064d2:	2600      	movs	r6, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81064d4:	05dd      	lsls	r5, r3, #23
 81064d6:	d50a      	bpl.n	81064ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 81064d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 81064da:	2a04      	cmp	r2, #4
 81064dc:	d806      	bhi.n	81064ec <HAL_RCCEx_PeriphCLKConfig+0x6c>
 81064de:	e8df f012 	tbh	[pc, r2, lsl #1]
 81064e2:	04af      	.short	0x04af
 81064e4:	0495048e 	.word	0x0495048e
 81064e8:	02ea02ea 	.word	0x02ea02ea
 81064ec:	2601      	movs	r6, #1
 81064ee:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81064f0:	0598      	lsls	r0, r3, #22
 81064f2:	d51b      	bpl.n	810652c <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai23ClockSelection)
 81064f4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 81064f6:	2a80      	cmp	r2, #128	; 0x80
 81064f8:	f000 8499 	beq.w	8106e2e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 81064fc:	f200 80ec 	bhi.w	81066d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8106500:	2a00      	cmp	r2, #0
 8106502:	f000 8396 	beq.w	8106c32 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
 8106506:	2a40      	cmp	r2, #64	; 0x40
 8106508:	f040 80ed 	bne.w	81066e6 <HAL_RCCEx_PeriphCLKConfig+0x266>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810650c:	2100      	movs	r1, #0
 810650e:	1d20      	adds	r0, r4, #4
 8106510:	f7ff fec2 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8106514:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106516:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106518:	2d00      	cmp	r5, #0
 810651a:	f040 8370 	bne.w	8106bfe <HAL_RCCEx_PeriphCLKConfig+0x77e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810651e:	4992      	ldr	r1, [pc, #584]	; (8106768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8106520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106522:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8106524:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8106528:	4302      	orrs	r2, r0
 810652a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810652c:	0559      	lsls	r1, r3, #21
 810652e:	d51f      	bpl.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4AClockSelection)
 8106530:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8106534:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8106538:	f000 8458 	beq.w	8106dec <HAL_RCCEx_PeriphCLKConfig+0x96c>
 810653c:	f200 80d6 	bhi.w	81066ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8106540:	2a00      	cmp	r2, #0
 8106542:	f000 837c 	beq.w	8106c3e <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8106546:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 810654a:	f040 80d7 	bne.w	81066fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810654e:	2100      	movs	r1, #0
 8106550:	1d20      	adds	r0, r4, #4
 8106552:	f7ff fea1 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106556:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106558:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810655a:	2d00      	cmp	r5, #0
 810655c:	f040 8353 	bne.w	8106c06 <HAL_RCCEx_PeriphCLKConfig+0x786>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8106560:	4981      	ldr	r1, [pc, #516]	; (8106768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8106562:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8106566:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8106568:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 810656c:	4302      	orrs	r2, r0
 810656e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106570:	051a      	lsls	r2, r3, #20
 8106572:	d51f      	bpl.n	81065b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->Sai4BClockSelection)
 8106574:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8106578:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 810657c:	f000 8467 	beq.w	8106e4e <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8106580:	f200 80bf 	bhi.w	8106702 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8106584:	2a00      	cmp	r2, #0
 8106586:	f000 8360 	beq.w	8106c4a <HAL_RCCEx_PeriphCLKConfig+0x7ca>
 810658a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 810658e:	f040 80c0 	bne.w	8106712 <HAL_RCCEx_PeriphCLKConfig+0x292>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106592:	2100      	movs	r1, #0
 8106594:	1d20      	adds	r0, r4, #4
 8106596:	f7ff fe7f 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810659a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810659c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810659e:	2d00      	cmp	r5, #0
 81065a0:	f040 8335 	bne.w	8106c0e <HAL_RCCEx_PeriphCLKConfig+0x78e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81065a4:	4970      	ldr	r1, [pc, #448]	; (8106768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 81065a6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 81065aa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 81065ac:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 81065b0:	4302      	orrs	r2, r0
 81065b2:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81065b4:	019f      	lsls	r7, r3, #6
 81065b6:	d518      	bpl.n	81065ea <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->QspiClockSelection)
 81065b8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 81065ba:	2a20      	cmp	r2, #32
 81065bc:	f000 83d0 	beq.w	8106d60 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 81065c0:	f200 80aa 	bhi.w	8106718 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81065c4:	b13a      	cbz	r2, 81065d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 81065c6:	2a10      	cmp	r2, #16
 81065c8:	f040 80a9 	bne.w	810671e <HAL_RCCEx_PeriphCLKConfig+0x29e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065cc:	4966      	ldr	r1, [pc, #408]	; (8106768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 81065ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 81065d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 81065d4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 81065d6:	2d00      	cmp	r5, #0
 81065d8:	f040 8362 	bne.w	8106ca0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81065dc:	4962      	ldr	r1, [pc, #392]	; (8106768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 81065de:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 81065e0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 81065e2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 81065e6:	4302      	orrs	r2, r0
 81065e8:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81065ea:	04d8      	lsls	r0, r3, #19
 81065ec:	d51d      	bpl.n	810662a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi123ClockSelection)
 81065ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 81065f0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 81065f4:	f000 8412 	beq.w	8106e1c <HAL_RCCEx_PeriphCLKConfig+0x99c>
 81065f8:	f200 8094 	bhi.w	8106724 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 81065fc:	2a00      	cmp	r2, #0
 81065fe:	f000 832a 	beq.w	8106c56 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8106602:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8106606:	f040 8095 	bne.w	8106734 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810660a:	2100      	movs	r1, #0
 810660c:	1d20      	adds	r0, r4, #4
 810660e:	f7ff fe43 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106612:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106614:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106616:	2d00      	cmp	r5, #0
 8106618:	f040 82f3 	bne.w	8106c02 <HAL_RCCEx_PeriphCLKConfig+0x782>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810661c:	4952      	ldr	r1, [pc, #328]	; (8106768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 810661e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8106620:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8106622:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8106626:	4302      	orrs	r2, r0
 8106628:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810662a:	0499      	lsls	r1, r3, #18
 810662c:	d51a      	bpl.n	8106664 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi45ClockSelection)
 810662e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8106630:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8106634:	f000 8378 	beq.w	8106d28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8106638:	d87f      	bhi.n	810673a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 810663a:	b14a      	cbz	r2, 8106650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 810663c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8106640:	f040 8083 	bne.w	810674a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106644:	2101      	movs	r1, #1
 8106646:	1d20      	adds	r0, r4, #4
 8106648:	f7ff fe26 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810664c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810664e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106650:	2d00      	cmp	r5, #0
 8106652:	f040 8327 	bne.w	8106ca4 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106656:	4944      	ldr	r1, [pc, #272]	; (8106768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8106658:	6e20      	ldr	r0, [r4, #96]	; 0x60
 810665a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 810665c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8106660:	4302      	orrs	r2, r0
 8106662:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106664:	045a      	lsls	r2, r3, #17
 8106666:	d51b      	bpl.n	81066a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    switch(PeriphClkInit->Spi6ClockSelection)
 8106668:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 810666c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8106670:	f000 8364 	beq.w	8106d3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8106674:	d86c      	bhi.n	8106750 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8106676:	b142      	cbz	r2, 810668a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8106678:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 810667c:	d170      	bne.n	8106760 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810667e:	2101      	movs	r1, #1
 8106680:	1d20      	adds	r0, r4, #4
 8106682:	f7ff fe09 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106686:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106688:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810668a:	2d00      	cmp	r5, #0
 810668c:	f040 830c 	bne.w	8106ca8 <HAL_RCCEx_PeriphCLKConfig+0x828>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106690:	4935      	ldr	r1, [pc, #212]	; (8106768 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8106692:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8106696:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8106698:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 810669c:	4302      	orrs	r2, r0
 810669e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81066a0:	041f      	lsls	r7, r3, #16
 81066a2:	d50d      	bpl.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch(PeriphClkInit->FdcanClockSelection)
 81066a4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 81066a6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 81066aa:	f000 8351 	beq.w	8106d50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 81066ae:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 81066b2:	f000 820c 	beq.w	8106ace <HAL_RCCEx_PeriphCLKConfig+0x64e>
 81066b6:	2a00      	cmp	r2, #0
 81066b8:	f000 820f 	beq.w	8106ada <HAL_RCCEx_PeriphCLKConfig+0x65a>
 81066bc:	2601      	movs	r6, #1
 81066be:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81066c0:	01d8      	lsls	r0, r3, #7
 81066c2:	d55d      	bpl.n	8106780 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->FmcClockSelection)
 81066c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 81066c6:	2a03      	cmp	r2, #3
 81066c8:	f200 841a 	bhi.w	8106f00 <HAL_RCCEx_PeriphCLKConfig+0xa80>
 81066cc:	e8df f012 	tbh	[pc, r2, lsl #1]
 81066d0:	035c0054 	.word	0x035c0054
 81066d4:	0054004e 	.word	0x0054004e
    switch(PeriphClkInit->Sai23ClockSelection)
 81066d8:	2ac0      	cmp	r2, #192	; 0xc0
 81066da:	f43f af1d 	beq.w	8106518 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81066de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 81066e2:	f43f af19 	beq.w	8106518 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81066e6:	2601      	movs	r6, #1
 81066e8:	4635      	mov	r5, r6
 81066ea:	e71f      	b.n	810652c <HAL_RCCEx_PeriphCLKConfig+0xac>
    switch(PeriphClkInit->Sai4AClockSelection)
 81066ec:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 81066f0:	f43f af33 	beq.w	810655a <HAL_RCCEx_PeriphCLKConfig+0xda>
 81066f4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 81066f8:	f43f af2f 	beq.w	810655a <HAL_RCCEx_PeriphCLKConfig+0xda>
 81066fc:	2601      	movs	r6, #1
 81066fe:	4635      	mov	r5, r6
 8106700:	e736      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8106702:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8106706:	f43f af4a 	beq.w	810659e <HAL_RCCEx_PeriphCLKConfig+0x11e>
 810670a:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 810670e:	f43f af46 	beq.w	810659e <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8106712:	2601      	movs	r6, #1
 8106714:	4635      	mov	r5, r6
 8106716:	e74d      	b.n	81065b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
    switch(PeriphClkInit->QspiClockSelection)
 8106718:	2a30      	cmp	r2, #48	; 0x30
 810671a:	f43f af5c 	beq.w	81065d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 810671e:	2601      	movs	r6, #1
 8106720:	4635      	mov	r5, r6
 8106722:	e762      	b.n	81065ea <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8106724:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8106728:	f43f af75 	beq.w	8106616 <HAL_RCCEx_PeriphCLKConfig+0x196>
 810672c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8106730:	f43f af71 	beq.w	8106616 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8106734:	2601      	movs	r6, #1
 8106736:	4635      	mov	r5, r6
 8106738:	e777      	b.n	810662a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch(PeriphClkInit->Spi45ClockSelection)
 810673a:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 810673e:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8106742:	d085      	beq.n	8106650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8106744:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8106748:	d082      	beq.n	8106650 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 810674a:	2601      	movs	r6, #1
 810674c:	4635      	mov	r5, r6
 810674e:	e789      	b.n	8106664 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi6ClockSelection)
 8106750:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8106754:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8106758:	d097      	beq.n	810668a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 810675a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 810675e:	d094      	beq.n	810668a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8106760:	2601      	movs	r6, #1
 8106762:	4635      	mov	r5, r6
 8106764:	e79c      	b.n	81066a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8106766:	bf00      	nop
 8106768:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810676c:	2102      	movs	r1, #2
 810676e:	1d20      	adds	r0, r4, #4
 8106770:	f7ff fd92 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106774:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106776:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106778:	2d00      	cmp	r5, #0
 810677a:	f000 8274 	beq.w	8106c66 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 810677e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106780:	0259      	lsls	r1, r3, #9
 8106782:	f100 81f0 	bmi.w	8106b66 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106786:	07df      	lsls	r7, r3, #31
 8106788:	d52f      	bpl.n	81067ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    switch(PeriphClkInit->Usart16ClockSelection)
 810678a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 810678c:	2a28      	cmp	r2, #40	; 0x28
 810678e:	d82a      	bhi.n	81067e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8106790:	e8df f012 	tbh	[pc, r2, lsl #1]
 8106794:	002901de 	.word	0x002901de
 8106798:	00290029 	.word	0x00290029
 810679c:	00290029 	.word	0x00290029
 81067a0:	00290029 	.word	0x00290029
 81067a4:	0029037a 	.word	0x0029037a
 81067a8:	00290029 	.word	0x00290029
 81067ac:	00290029 	.word	0x00290029
 81067b0:	00290029 	.word	0x00290029
 81067b4:	002901d7 	.word	0x002901d7
 81067b8:	00290029 	.word	0x00290029
 81067bc:	00290029 	.word	0x00290029
 81067c0:	00290029 	.word	0x00290029
 81067c4:	002901de 	.word	0x002901de
 81067c8:	00290029 	.word	0x00290029
 81067cc:	00290029 	.word	0x00290029
 81067d0:	00290029 	.word	0x00290029
 81067d4:	002901de 	.word	0x002901de
 81067d8:	00290029 	.word	0x00290029
 81067dc:	00290029 	.word	0x00290029
 81067e0:	00290029 	.word	0x00290029
 81067e4:	01de      	.short	0x01de
 81067e6:	2601      	movs	r6, #1
 81067e8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81067ea:	0798      	lsls	r0, r3, #30
 81067ec:	d516      	bpl.n	810681c <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 81067ee:	6f62      	ldr	r2, [r4, #116]	; 0x74
 81067f0:	2a05      	cmp	r2, #5
 81067f2:	f200 8382 	bhi.w	8106efa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81067f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 81067fa:	000d      	.short	0x000d
 81067fc:	00060333 	.word	0x00060333
 8106800:	000d000d 	.word	0x000d000d
 8106804:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106806:	2101      	movs	r1, #1
 8106808:	f104 0024 	add.w	r0, r4, #36	; 0x24
 810680c:	f7ff fdbe 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106810:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106812:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106814:	2d00      	cmp	r5, #0
 8106816:	f000 8230 	beq.w	8106c7a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
 810681a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810681c:	0759      	lsls	r1, r3, #29
 810681e:	d517      	bpl.n	8106850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8106820:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8106824:	2a05      	cmp	r2, #5
 8106826:	f200 836e 	bhi.w	8106f06 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810682a:	e8df f012 	tbh	[pc, r2, lsl #1]
 810682e:	000d      	.short	0x000d
 8106830:	00060323 	.word	0x00060323
 8106834:	000d000d 	.word	0x000d000d
 8106838:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810683a:	2101      	movs	r1, #1
 810683c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106840:	f7ff fda4 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106844:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106846:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106848:	2d00      	cmp	r5, #0
 810684a:	f000 821e 	beq.w	8106c8a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 810684e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106850:	069a      	lsls	r2, r3, #26
 8106852:	d51d      	bpl.n	8106890 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8106854:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8106858:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 810685c:	f000 8289 	beq.w	8106d72 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8106860:	f200 80e6 	bhi.w	8106a30 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
 8106864:	b14a      	cbz	r2, 810687a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8106866:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 810686a:	f040 80eb 	bne.w	8106a44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810686e:	2100      	movs	r1, #0
 8106870:	1d20      	adds	r0, r4, #4
 8106872:	f7ff fd11 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106876:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106878:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 810687a:	2d00      	cmp	r5, #0
 810687c:	f040 81f1 	bne.w	8106c62 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106880:	49a5      	ldr	r1, [pc, #660]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8106882:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8106886:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8106888:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 810688c:	4302      	orrs	r2, r0
 810688e:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106890:	065f      	lsls	r7, r3, #25
 8106892:	d51d      	bpl.n	81068d0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8106894:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8106898:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 810689c:	f000 8230 	beq.w	8106d00 <HAL_RCCEx_PeriphCLKConfig+0x880>
 81068a0:	f200 80d3 	bhi.w	8106a4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 81068a4:	b14a      	cbz	r2, 81068ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
 81068a6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 81068aa:	f040 80d8 	bne.w	8106a5e <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81068ae:	2100      	movs	r1, #0
 81068b0:	1d20      	adds	r0, r4, #4
 81068b2:	f7ff fcf1 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81068b6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81068b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 81068ba:	2d00      	cmp	r5, #0
 81068bc:	f040 81f6 	bne.w	8106cac <HAL_RCCEx_PeriphCLKConfig+0x82c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81068c0:	4995      	ldr	r1, [pc, #596]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81068c2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 81068c6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 81068c8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 81068cc:	4302      	orrs	r2, r0
 81068ce:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81068d0:	0618      	lsls	r0, r3, #24
 81068d2:	d51d      	bpl.n	8106910 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->Lptim345ClockSelection)
 81068d4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 81068d8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 81068dc:	f000 821a 	beq.w	8106d14 <HAL_RCCEx_PeriphCLKConfig+0x894>
 81068e0:	f200 80c0 	bhi.w	8106a64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 81068e4:	b14a      	cbz	r2, 81068fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 81068e6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 81068ea:	f040 80c5 	bne.w	8106a78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81068ee:	2100      	movs	r1, #0
 81068f0:	1d20      	adds	r0, r4, #4
 81068f2:	f7ff fcd1 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81068f6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81068f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 81068fa:	2d00      	cmp	r5, #0
 81068fc:	f040 81bb 	bne.w	8106c76 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106900:	4985      	ldr	r1, [pc, #532]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8106902:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8106906:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8106908:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 810690c:	4302      	orrs	r2, r0
 810690e:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106910:	0719      	lsls	r1, r3, #28
 8106912:	d50b      	bpl.n	810692c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8106914:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8106918:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 810691c:	f000 823d 	beq.w	8106d9a <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106920:	487d      	ldr	r0, [pc, #500]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8106922:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8106924:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8106928:	430a      	orrs	r2, r1
 810692a:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810692c:	06da      	lsls	r2, r3, #27
 810692e:	d50b      	bpl.n	8106948 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8106930:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8106934:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8106938:	f000 823c 	beq.w	8106db4 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810693c:	4876      	ldr	r0, [pc, #472]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 810693e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8106940:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8106944:	430a      	orrs	r2, r1
 8106946:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106948:	031f      	lsls	r7, r3, #12
 810694a:	d50e      	bpl.n	810696a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch(PeriphClkInit->AdcClockSelection)
 810694c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8106950:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8106954:	f000 80e2 	beq.w	8106b1c <HAL_RCCEx_PeriphCLKConfig+0x69c>
 8106958:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 810695c:	f000 80e5 	beq.w	8106b2a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8106960:	2900      	cmp	r1, #0
 8106962:	f000 81c5 	beq.w	8106cf0 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8106966:	2601      	movs	r6, #1
 8106968:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810696a:	0358      	lsls	r0, r3, #13
 810696c:	d50f      	bpl.n	810698e <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch(PeriphClkInit->UsbClockSelection)
 810696e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8106972:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8106976:	f000 80bb 	beq.w	8106af0 <HAL_RCCEx_PeriphCLKConfig+0x670>
 810697a:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 810697e:	f000 80be 	beq.w	8106afe <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8106982:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8106986:	f000 81ab 	beq.w	8106ce0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 810698a:	2601      	movs	r6, #1
 810698c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810698e:	03d9      	lsls	r1, r3, #15
 8106990:	d509      	bpl.n	81069a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
    switch(PeriphClkInit->SdmmcClockSelection)
 8106992:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8106994:	2a00      	cmp	r2, #0
 8106996:	f000 8191 	beq.w	8106cbc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 810699a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 810699e:	f000 8138 	beq.w	8106c12 <HAL_RCCEx_PeriphCLKConfig+0x792>
 81069a2:	2601      	movs	r6, #1
 81069a4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81069a6:	009a      	lsls	r2, r3, #2
 81069a8:	f100 811e 	bmi.w	8106be8 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81069ac:	039f      	lsls	r7, r3, #14
 81069ae:	d466      	bmi.n	8106a7e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    return HAL_OK;
 81069b0:	1e30      	subs	r0, r6, #0
 81069b2:	bf18      	it	ne
 81069b4:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81069b6:	02de      	lsls	r6, r3, #11
 81069b8:	d506      	bpl.n	81069c8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81069ba:	4957      	ldr	r1, [pc, #348]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81069bc:	6f25      	ldr	r5, [r4, #112]	; 0x70
 81069be:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 81069c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81069c4:	432a      	orrs	r2, r5
 81069c6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81069c8:	00dd      	lsls	r5, r3, #3
 81069ca:	d507      	bpl.n	81069dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81069cc:	4952      	ldr	r1, [pc, #328]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81069ce:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 81069d2:	690a      	ldr	r2, [r1, #16]
 81069d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81069d8:	432a      	orrs	r2, r5
 81069da:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81069dc:	0299      	lsls	r1, r3, #10
 81069de:	d506      	bpl.n	81069ee <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81069e0:	494d      	ldr	r1, [pc, #308]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81069e2:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 81069e4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 81069e6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 81069ea:	432a      	orrs	r2, r5
 81069ec:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81069ee:	005a      	lsls	r2, r3, #1
 81069f0:	d509      	bpl.n	8106a06 <HAL_RCCEx_PeriphCLKConfig+0x586>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81069f2:	4a49      	ldr	r2, [pc, #292]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 81069f4:	6911      	ldr	r1, [r2, #16]
 81069f6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 81069fa:	6111      	str	r1, [r2, #16]
 81069fc:	6911      	ldr	r1, [r2, #16]
 81069fe:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8106a02:	4329      	orrs	r1, r5
 8106a04:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106a06:	2b00      	cmp	r3, #0
 8106a08:	da06      	bge.n	8106a18 <HAL_RCCEx_PeriphCLKConfig+0x598>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106a0a:	4943      	ldr	r1, [pc, #268]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8106a0c:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8106a0e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8106a10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8106a14:	432a      	orrs	r2, r5
 8106a16:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106a18:	021b      	lsls	r3, r3, #8
 8106a1a:	d507      	bpl.n	8106a2c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106a1c:	4a3e      	ldr	r2, [pc, #248]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8106a1e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8106a22:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8106a24:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8106a28:	430b      	orrs	r3, r1
 8106a2a:	6553      	str	r3, [r2, #84]	; 0x54
}
 8106a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 8106a30:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 8106a34:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8106a38:	f43f af1f 	beq.w	810687a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8106a3c:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8106a40:	f43f af1b 	beq.w	810687a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8106a44:	2601      	movs	r6, #1
 8106a46:	4635      	mov	r5, r6
 8106a48:	e722      	b.n	8106890 <HAL_RCCEx_PeriphCLKConfig+0x410>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8106a4a:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8106a4e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8106a52:	f43f af32 	beq.w	81068ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8106a56:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8106a5a:	f43f af2e 	beq.w	81068ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8106a5e:	2601      	movs	r6, #1
 8106a60:	4635      	mov	r5, r6
 8106a62:	e735      	b.n	81068d0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8106a64:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8106a68:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8106a6c:	f43f af45 	beq.w	81068fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8106a70:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8106a74:	f43f af41 	beq.w	81068fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8106a78:	2601      	movs	r6, #1
 8106a7a:	4635      	mov	r5, r6
 8106a7c:	e748      	b.n	8106910 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch(PeriphClkInit->RngClockSelection)
 8106a7e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8106a80:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8106a84:	f000 8123 	beq.w	8106cce <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8106a88:	d906      	bls.n	8106a98 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8106a8a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 8106a8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8106a92:	d003      	beq.n	8106a9c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8106a94:	2001      	movs	r0, #1
 8106a96:	e78e      	b.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8106a98:	2a00      	cmp	r2, #0
 8106a9a:	d1fb      	bne.n	8106a94 <HAL_RCCEx_PeriphCLKConfig+0x614>
    if(ret == HAL_OK)
 8106a9c:	2d00      	cmp	r5, #0
 8106a9e:	d1f9      	bne.n	8106a94 <HAL_RCCEx_PeriphCLKConfig+0x614>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106aa0:	4d1d      	ldr	r5, [pc, #116]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8106aa2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8106aa4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    return HAL_OK;
 8106aa8:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106aaa:	ea42 0201 	orr.w	r2, r2, r1
    return HAL_OK;
 8106aae:	bf18      	it	ne
 8106ab0:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106ab2:	656a      	str	r2, [r5, #84]	; 0x54
 8106ab4:	e77f      	b.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0x536>
    switch(PeriphClkInit->Sai1ClockSelection)
 8106ab6:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8106ab8:	2d00      	cmp	r5, #0
 8106aba:	f040 80a6 	bne.w	8106c0a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8106abe:	4916      	ldr	r1, [pc, #88]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8106ac0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8106ac2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8106ac4:	f022 0207 	bic.w	r2, r2, #7
 8106ac8:	4302      	orrs	r2, r0
 8106aca:	650a      	str	r2, [r1, #80]	; 0x50
 8106acc:	e510      	b.n	81064f0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106ace:	2101      	movs	r1, #1
 8106ad0:	1d20      	adds	r0, r4, #4
 8106ad2:	f7ff fbe1 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106ad6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106ad8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106ada:	2d00      	cmp	r5, #0
 8106adc:	f040 80de 	bne.w	8106c9c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106ae0:	490d      	ldr	r1, [pc, #52]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8106ae2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8106ae4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8106ae6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8106aea:	4302      	orrs	r2, r0
 8106aec:	650a      	str	r2, [r1, #80]	; 0x50
 8106aee:	e5e7      	b.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106af0:	2101      	movs	r1, #1
 8106af2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106af6:	f7ff fc49 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106afa:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106afc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106afe:	2d00      	cmp	r5, #0
 8106b00:	f040 80da 	bne.w	8106cb8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106b04:	4904      	ldr	r1, [pc, #16]	; (8106b18 <HAL_RCCEx_PeriphCLKConfig+0x698>)
 8106b06:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8106b0a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8106b0c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8106b10:	4302      	orrs	r2, r0
 8106b12:	654a      	str	r2, [r1, #84]	; 0x54
 8106b14:	e73b      	b.n	810698e <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8106b16:	bf00      	nop
 8106b18:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106b1c:	2102      	movs	r1, #2
 8106b1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106b22:	f7ff fc33 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106b26:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106b28:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106b2a:	2d00      	cmp	r5, #0
 8106b2c:	f040 80c2 	bne.w	8106cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8106b30:	49ac      	ldr	r1, [pc, #688]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106b32:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8106b36:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8106b38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8106b3c:	4302      	orrs	r2, r0
 8106b3e:	658a      	str	r2, [r1, #88]	; 0x58
 8106b40:	e713      	b.n	810696a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106b42:	2101      	movs	r1, #1
 8106b44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106b48:	f7ff fc20 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106b4c:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106b4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8106b50:	2d00      	cmp	r5, #0
 8106b52:	f040 80ad 	bne.w	8106cb0 <HAL_RCCEx_PeriphCLKConfig+0x830>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106b56:	49a3      	ldr	r1, [pc, #652]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106b58:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8106b5a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8106b5c:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8106b60:	4302      	orrs	r2, r0
 8106b62:	654a      	str	r2, [r1, #84]	; 0x54
 8106b64:	e641      	b.n	81067ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106b66:	4fa0      	ldr	r7, [pc, #640]	; (8106de8 <HAL_RCCEx_PeriphCLKConfig+0x968>)
 8106b68:	683b      	ldr	r3, [r7, #0]
 8106b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106b6e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8106b70:	f7fb ffc4 	bl	8102afc <HAL_GetTick>
 8106b74:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106b76:	e006      	b.n	8106b86 <HAL_RCCEx_PeriphCLKConfig+0x706>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106b78:	f7fb ffc0 	bl	8102afc <HAL_GetTick>
 8106b7c:	eba0 0008 	sub.w	r0, r0, r8
 8106b80:	2864      	cmp	r0, #100	; 0x64
 8106b82:	f200 818b 	bhi.w	8106e9c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106b86:	683b      	ldr	r3, [r7, #0]
 8106b88:	05da      	lsls	r2, r3, #23
 8106b8a:	d5f5      	bpl.n	8106b78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
    if(ret == HAL_OK)
 8106b8c:	2d00      	cmp	r5, #0
 8106b8e:	f040 81b1 	bne.w	8106ef4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106b92:	4a94      	ldr	r2, [pc, #592]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106b94:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8106b98:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8106b9a:	4059      	eors	r1, r3
 8106b9c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8106ba0:	d00b      	beq.n	8106bba <HAL_RCCEx_PeriphCLKConfig+0x73a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106ba2:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8106ba4:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8106ba6:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8106baa:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106bac:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106bae:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106bb2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8106bb6:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8106bb8:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106bbe:	f000 817b 	beq.w	8106eb8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106bc2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8106bc6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8106bca:	f000 8189 	beq.w	8106ee0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8106bce:	4985      	ldr	r1, [pc, #532]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106bd0:	690a      	ldr	r2, [r1, #16]
 8106bd2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8106bd6:	610a      	str	r2, [r1, #16]
 8106bd8:	4a82      	ldr	r2, [pc, #520]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106bda:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8106bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106be0:	430b      	orrs	r3, r1
 8106be2:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106be4:	6823      	ldr	r3, [r4, #0]
 8106be6:	e5ce      	b.n	8106786 <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8106be8:	2102      	movs	r1, #2
 8106bea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106bee:	f7ff fbcd 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106bf2:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8106bf4:	2800      	cmp	r0, #0
 8106bf6:	f43f aed9 	beq.w	81069ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      status=HAL_ERROR;
 8106bfa:	2601      	movs	r6, #1
 8106bfc:	e6d6      	b.n	81069ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8106bfe:	462e      	mov	r6, r5
 8106c00:	e494      	b.n	810652c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8106c02:	462e      	mov	r6, r5
 8106c04:	e511      	b.n	810662a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8106c06:	462e      	mov	r6, r5
 8106c08:	e4b2      	b.n	8106570 <HAL_RCCEx_PeriphCLKConfig+0xf0>
 8106c0a:	462e      	mov	r6, r5
 8106c0c:	e470      	b.n	81064f0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8106c0e:	462e      	mov	r6, r5
 8106c10:	e4d0      	b.n	81065b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106c12:	2102      	movs	r1, #2
 8106c14:	1d20      	adds	r0, r4, #4
 8106c16:	f7ff fb3f 	bl	8106298 <RCCEx_PLL2_Config>
 8106c1a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106c1c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106c1e:	2d00      	cmp	r5, #0
 8106c20:	d153      	bne.n	8106cca <HAL_RCCEx_PeriphCLKConfig+0x84a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106c22:	4970      	ldr	r1, [pc, #448]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106c24:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8106c26:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8106c28:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8106c2c:	4302      	orrs	r2, r0
 8106c2e:	64ca      	str	r2, [r1, #76]	; 0x4c
 8106c30:	e6b9      	b.n	81069a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c32:	496c      	ldr	r1, [pc, #432]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106c34:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8106c36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8106c3a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8106c3c:	e46c      	b.n	8106518 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c3e:	4969      	ldr	r1, [pc, #420]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106c40:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8106c42:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8106c46:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8106c48:	e487      	b.n	810655a <HAL_RCCEx_PeriphCLKConfig+0xda>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c4a:	4966      	ldr	r1, [pc, #408]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106c4c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8106c4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8106c52:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8106c54:	e4a3      	b.n	810659e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c56:	4963      	ldr	r1, [pc, #396]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106c58:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8106c5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8106c5e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8106c60:	e4d9      	b.n	8106616 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8106c62:	462e      	mov	r6, r5
 8106c64:	e614      	b.n	8106890 <HAL_RCCEx_PeriphCLKConfig+0x410>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106c66:	495f      	ldr	r1, [pc, #380]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106c68:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8106c6a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8106c6c:	f022 0203 	bic.w	r2, r2, #3
 8106c70:	4302      	orrs	r2, r0
 8106c72:	64ca      	str	r2, [r1, #76]	; 0x4c
 8106c74:	e584      	b.n	8106780 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8106c76:	462e      	mov	r6, r5
 8106c78:	e64a      	b.n	8106910 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106c7a:	495a      	ldr	r1, [pc, #360]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106c7c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8106c7e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8106c80:	f022 0207 	bic.w	r2, r2, #7
 8106c84:	4302      	orrs	r2, r0
 8106c86:	654a      	str	r2, [r1, #84]	; 0x54
 8106c88:	e5c8      	b.n	810681c <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106c8a:	4956      	ldr	r1, [pc, #344]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106c8c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8106c90:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8106c92:	f022 0207 	bic.w	r2, r2, #7
 8106c96:	4302      	orrs	r2, r0
 8106c98:	658a      	str	r2, [r1, #88]	; 0x58
 8106c9a:	e5d9      	b.n	8106850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8106c9c:	462e      	mov	r6, r5
 8106c9e:	e50f      	b.n	81066c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8106ca0:	462e      	mov	r6, r5
 8106ca2:	e4a2      	b.n	81065ea <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8106ca4:	462e      	mov	r6, r5
 8106ca6:	e4dd      	b.n	8106664 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8106ca8:	462e      	mov	r6, r5
 8106caa:	e4f9      	b.n	81066a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8106cac:	462e      	mov	r6, r5
 8106cae:	e60f      	b.n	81068d0 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8106cb0:	462e      	mov	r6, r5
 8106cb2:	e59a      	b.n	81067ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8106cb4:	462e      	mov	r6, r5
 8106cb6:	e658      	b.n	810696a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8106cb8:	462e      	mov	r6, r5
 8106cba:	e668      	b.n	810698e <HAL_RCCEx_PeriphCLKConfig+0x50e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106cbc:	4949      	ldr	r1, [pc, #292]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106cbe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8106cc0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8106cc4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8106cc6:	2d00      	cmp	r5, #0
 8106cc8:	d0ab      	beq.n	8106c22 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
 8106cca:	462e      	mov	r6, r5
 8106ccc:	e66b      	b.n	81069a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106cce:	4845      	ldr	r0, [pc, #276]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106cd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8106cd2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8106cd6:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8106cd8:	2d00      	cmp	r5, #0
 8106cda:	f47f aedb 	bne.w	8106a94 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8106cde:	e6df      	b.n	8106aa0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106ce0:	4940      	ldr	r1, [pc, #256]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106ce2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8106ce4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8106ce8:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8106cea:	2d00      	cmp	r5, #0
 8106cec:	d1e4      	bne.n	8106cb8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8106cee:	e709      	b.n	8106b04 <HAL_RCCEx_PeriphCLKConfig+0x684>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106cf0:	1d20      	adds	r0, r4, #4
 8106cf2:	f7ff fad1 	bl	8106298 <RCCEx_PLL2_Config>
 8106cf6:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106cf8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106cfa:	2d00      	cmp	r5, #0
 8106cfc:	d1da      	bne.n	8106cb4 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8106cfe:	e717      	b.n	8106b30 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106d00:	2102      	movs	r1, #2
 8106d02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106d06:	f7ff fb41 	bl	810638c <RCCEx_PLL3_Config>
 8106d0a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106d0c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106d0e:	2d00      	cmp	r5, #0
 8106d10:	d1cc      	bne.n	8106cac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8106d12:	e5d5      	b.n	81068c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106d14:	2102      	movs	r1, #2
 8106d16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106d1a:	f7ff fb37 	bl	810638c <RCCEx_PLL3_Config>
 8106d1e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106d20:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106d22:	2d00      	cmp	r5, #0
 8106d24:	d1a7      	bne.n	8106c76 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8106d26:	e5eb      	b.n	8106900 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106d28:	2101      	movs	r1, #1
 8106d2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106d2e:	f7ff fb2d 	bl	810638c <RCCEx_PLL3_Config>
 8106d32:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106d34:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106d36:	2d00      	cmp	r5, #0
 8106d38:	d1b4      	bne.n	8106ca4 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8106d3a:	e48c      	b.n	8106656 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106d3c:	2101      	movs	r1, #1
 8106d3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106d42:	f7ff fb23 	bl	810638c <RCCEx_PLL3_Config>
 8106d46:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106d48:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106d4a:	2d00      	cmp	r5, #0
 8106d4c:	d1ac      	bne.n	8106ca8 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8106d4e:	e49f      	b.n	8106690 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d50:	4924      	ldr	r1, [pc, #144]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106d52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8106d54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8106d58:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8106d5a:	2d00      	cmp	r5, #0
 8106d5c:	d19e      	bne.n	8106c9c <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8106d5e:	e6bf      	b.n	8106ae0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106d60:	2102      	movs	r1, #2
 8106d62:	1d20      	adds	r0, r4, #4
 8106d64:	f7ff fa98 	bl	8106298 <RCCEx_PLL2_Config>
 8106d68:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8106d6a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106d6c:	2d00      	cmp	r5, #0
 8106d6e:	d197      	bne.n	8106ca0 <HAL_RCCEx_PeriphCLKConfig+0x820>
 8106d70:	e434      	b.n	81065dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106d72:	2102      	movs	r1, #2
 8106d74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106d78:	f7ff fb08 	bl	810638c <RCCEx_PLL3_Config>
 8106d7c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106d7e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106d80:	2d00      	cmp	r5, #0
 8106d82:	f47f af6e 	bne.w	8106c62 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8106d86:	e57b      	b.n	8106880 <HAL_RCCEx_PeriphCLKConfig+0x400>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d88:	4916      	ldr	r1, [pc, #88]	; (8106de4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106d8a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8106d8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8106d90:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8106d92:	2d00      	cmp	r5, #0
 8106d94:	f47f acf3 	bne.w	810677e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8106d98:	e765      	b.n	8106c66 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106d9a:	2102      	movs	r1, #2
 8106d9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106da0:	f7ff faf4 	bl	810638c <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106da4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106da8:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106daa:	2800      	cmp	r0, #0
 8106dac:	f43f adb8 	beq.w	8106920 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
          status = HAL_ERROR;
 8106db0:	2601      	movs	r6, #1
 8106db2:	e5b5      	b.n	8106920 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106db4:	2102      	movs	r1, #2
 8106db6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106dba:	f7ff fae7 	bl	810638c <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106dbe:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106dc2:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106dc4:	2800      	cmp	r0, #0
 8106dc6:	f43f adb9 	beq.w	810693c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        status = HAL_ERROR;
 8106dca:	2601      	movs	r6, #1
 8106dcc:	e5b6      	b.n	810693c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106dce:	2102      	movs	r1, #2
 8106dd0:	3024      	adds	r0, #36	; 0x24
 8106dd2:	f7ff fadb 	bl	810638c <RCCEx_PLL3_Config>
 8106dd6:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8106dd8:	2e00      	cmp	r6, #0
 8106dda:	f43f ab6d 	beq.w	81064b8 <HAL_RCCEx_PeriphCLKConfig+0x38>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106dde:	6823      	ldr	r3, [r4, #0]
 8106de0:	f7ff bb78 	b.w	81064d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8106de4:	58024400 	.word	0x58024400
 8106de8:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106dec:	2100      	movs	r1, #0
 8106dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106df2:	f7ff facb 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106df6:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106df8:	4605      	mov	r5, r0
      break;
 8106dfa:	f7ff bbae 	b.w	810655a <HAL_RCCEx_PeriphCLKConfig+0xda>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106dfe:	2100      	movs	r1, #0
 8106e00:	1d20      	adds	r0, r4, #4
 8106e02:	f7ff fa49 	bl	8106298 <RCCEx_PLL2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106e06:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106e08:	4605      	mov	r5, r0
      break;
 8106e0a:	e655      	b.n	8106ab8 <HAL_RCCEx_PeriphCLKConfig+0x638>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106e0c:	2100      	movs	r1, #0
 8106e0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106e12:	f7ff fabb 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106e16:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106e18:	4605      	mov	r5, r0
      break;
 8106e1a:	e64d      	b.n	8106ab8 <HAL_RCCEx_PeriphCLKConfig+0x638>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106e1c:	2100      	movs	r1, #0
 8106e1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106e22:	f7ff fab3 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106e26:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106e28:	4605      	mov	r5, r0
      break;
 8106e2a:	f7ff bbf4 	b.w	8106616 <HAL_RCCEx_PeriphCLKConfig+0x196>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106e2e:	2100      	movs	r1, #0
 8106e30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106e34:	f7ff faaa 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8106e38:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106e3a:	4605      	mov	r5, r0
      break;
 8106e3c:	f7ff bb6c 	b.w	8106518 <HAL_RCCEx_PeriphCLKConfig+0x98>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106e40:	4932      	ldr	r1, [pc, #200]	; (8106f0c <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8106e42:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8106e44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8106e48:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8106e4a:	4635      	mov	r5, r6
 8106e4c:	e634      	b.n	8106ab8 <HAL_RCCEx_PeriphCLKConfig+0x638>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106e4e:	2100      	movs	r1, #0
 8106e50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8106e54:	f7ff fa9a 	bl	810638c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106e58:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106e5a:	4605      	mov	r5, r0
      break;
 8106e5c:	f7ff bb9f 	b.w	810659e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106e60:	2101      	movs	r1, #1
 8106e62:	1d20      	adds	r0, r4, #4
 8106e64:	f7ff fa18 	bl	8106298 <RCCEx_PLL2_Config>
 8106e68:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106e6a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106e6c:	2d00      	cmp	r5, #0
 8106e6e:	f47f acd4 	bne.w	810681a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8106e72:	e702      	b.n	8106c7a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106e74:	2101      	movs	r1, #1
 8106e76:	1d20      	adds	r0, r4, #4
 8106e78:	f7ff fa0e 	bl	8106298 <RCCEx_PLL2_Config>
 8106e7c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106e7e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106e80:	2d00      	cmp	r5, #0
 8106e82:	f47f ace4 	bne.w	810684e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8106e86:	e700      	b.n	8106c8a <HAL_RCCEx_PeriphCLKConfig+0x80a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106e88:	2101      	movs	r1, #1
 8106e8a:	1d20      	adds	r0, r4, #4
 8106e8c:	f7ff fa04 	bl	8106298 <RCCEx_PLL2_Config>
 8106e90:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106e92:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8106e94:	2d00      	cmp	r5, #0
 8106e96:	f47f af0b 	bne.w	8106cb0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8106e9a:	e65c      	b.n	8106b56 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
            ret = HAL_TIMEOUT;
 8106e9c:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106e9e:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 8106ea0:	4635      	mov	r5, r6
 8106ea2:	e470      	b.n	8106786 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8106ea4:	2601      	movs	r6, #1
 8106ea6:	f7ff bb15 	b.w	81064d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106eaa:	4818      	ldr	r0, [pc, #96]	; (8106f0c <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8106eac:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8106eae:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8106eb2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8106eb4:	f7ff bb07 	b.w	81064c6 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8106eb8:	f7fb fe20 	bl	8102afc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106ebc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8106f0c <HAL_RCCEx_PeriphCLKConfig+0xa8c>
        tickstart = HAL_GetTick();
 8106ec0:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106ec2:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106ec6:	e004      	b.n	8106ed2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106ec8:	f7fb fe18 	bl	8102afc <HAL_GetTick>
 8106ecc:	1bc0      	subs	r0, r0, r7
 8106ece:	4548      	cmp	r0, r9
 8106ed0:	d8e4      	bhi.n	8106e9c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106ed2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8106ed6:	079b      	lsls	r3, r3, #30
 8106ed8:	d5f6      	bpl.n	8106ec8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106eda:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8106ede:	e670      	b.n	8106bc2 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8106ee0:	480a      	ldr	r0, [pc, #40]	; (8106f0c <HAL_RCCEx_PeriphCLKConfig+0xa8c>)
 8106ee2:	4a0b      	ldr	r2, [pc, #44]	; (8106f10 <HAL_RCCEx_PeriphCLKConfig+0xa90>)
 8106ee4:	6901      	ldr	r1, [r0, #16]
 8106ee6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8106eea:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8106eee:	430a      	orrs	r2, r1
 8106ef0:	6102      	str	r2, [r0, #16]
 8106ef2:	e671      	b.n	8106bd8 <HAL_RCCEx_PeriphCLKConfig+0x758>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106ef4:	6823      	ldr	r3, [r4, #0]
 8106ef6:	462e      	mov	r6, r5
 8106ef8:	e445      	b.n	8106786 <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8106efa:	2601      	movs	r6, #1
 8106efc:	4635      	mov	r5, r6
 8106efe:	e48d      	b.n	810681c <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->FmcClockSelection)
 8106f00:	2601      	movs	r6, #1
 8106f02:	4635      	mov	r5, r6
 8106f04:	e43c      	b.n	8106780 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8106f06:	2601      	movs	r6, #1
 8106f08:	4635      	mov	r5, r6
 8106f0a:	e4a1      	b.n	8106850 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8106f0c:	58024400 	.word	0x58024400
 8106f10:	00ffffcf 	.word	0x00ffffcf

08106f14 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8106f14:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106f16:	f7ff f8ed 	bl	81060f4 <HAL_RCC_GetHCLKFreq>
 8106f1a:	4b05      	ldr	r3, [pc, #20]	; (8106f30 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8106f1c:	4a05      	ldr	r2, [pc, #20]	; (8106f34 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8106f1e:	6a1b      	ldr	r3, [r3, #32]
 8106f20:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8106f24:	5cd3      	ldrb	r3, [r2, r3]
 8106f26:	f003 031f 	and.w	r3, r3, #31
}
 8106f2a:	40d8      	lsrs	r0, r3
 8106f2c:	bd08      	pop	{r3, pc}
 8106f2e:	bf00      	nop
 8106f30:	58024400 	.word	0x58024400
 8106f34:	0810a050 	.word	0x0810a050

08106f38 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106f38:	4b4f      	ldr	r3, [pc, #316]	; (8107078 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8106f3a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106f3c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106f3e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106f40:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8106f42:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8106f44:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8106f48:	f3c5 3205 	ubfx	r2, r5, #12, #6
  if (pll2m != 0U)
 8106f4c:	d05c      	beq.n	8107008 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8106f4e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106f52:	f3c6 1600 	ubfx	r6, r6, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8106f56:	fb06 f404 	mul.w	r4, r6, r4
 8106f5a:	ee07 4a90 	vmov	s15, r4
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106f5e:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8106f62:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8106f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 8106f68:	d003      	beq.n	8106f72 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8106f6a:	2902      	cmp	r1, #2
 8106f6c:	d075      	beq.n	810705a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8106f6e:	2900      	cmp	r1, #0
 8106f70:	d04f      	beq.n	8107012 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106f72:	ee07 2a10 	vmov	s14, r2
 8106f76:	ed9f 6a41 	vldr	s12, [pc, #260]	; 810707c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8106f7a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8106f7e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8106f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106f88:	ee06 3a90 	vmov	s13, r3
 8106f8c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8107080 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8106f90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8106f94:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8106f98:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8106f9c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8106fa0:	ee67 6a26 	vmul.f32	s13, s14, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106fa4:	4a34      	ldr	r2, [pc, #208]	; (8107078 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8106fa6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8106fa8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8106fac:	ee07 3a10 	vmov	s14, r3
 8106fb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8106fb4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8106fb8:	ee37 7a06 	vadd.f32	s14, s14, s12
}
 8106fbc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8106fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106fc6:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8106fca:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8106fcc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8106fd0:	ee07 3a10 	vmov	s14, r3
 8106fd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8106fd8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8106fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106fe4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8106fe8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8106fea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8106fee:	ee07 3a90 	vmov	s15, r3
 8106ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106ff6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8106ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ffe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8107002:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8107006:	4770      	bx	lr
 8107008:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810700a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810700e:	6082      	str	r2, [r0, #8]
}
 8107010:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107012:	6819      	ldr	r1, [r3, #0]
 8107014:	0689      	lsls	r1, r1, #26
 8107016:	d527      	bpl.n	8107068 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107018:	681c      	ldr	r4, [r3, #0]
 810701a:	491a      	ldr	r1, [pc, #104]	; (8107084 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810701e:	eddf 5a18 	vldr	s11, [pc, #96]	; 8107080 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107022:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8107026:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107028:	ee07 1a10 	vmov	s14, r1
 810702c:	ee06 2a90 	vmov	s13, r2
 8107030:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8107034:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8107038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810703c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8107040:	ee06 3a90 	vmov	s13, r3
 8107044:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8107048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810704c:	eee7 6aa5 	vfma.f32	s13, s15, s11
 8107050:	ee76 6a87 	vadd.f32	s13, s13, s14
 8107054:	ee66 6a86 	vmul.f32	s13, s13, s12
 8107058:	e7a4      	b.n	8106fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810705a:	ee07 2a10 	vmov	s14, r2
 810705e:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8107088 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8107062:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8107066:	e78a      	b.n	8106f7e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107068:	ee07 2a10 	vmov	s14, r2
 810706c:	ed9f 6a07 	vldr	s12, [pc, #28]	; 810708c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8107070:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8107074:	e783      	b.n	8106f7e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8107076:	bf00      	nop
 8107078:	58024400 	.word	0x58024400
 810707c:	4a742400 	.word	0x4a742400
 8107080:	39000000 	.word	0x39000000
 8107084:	03d09000 	.word	0x03d09000
 8107088:	4b742400 	.word	0x4b742400
 810708c:	4c742400 	.word	0x4c742400

08107090 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107090:	4b4f      	ldr	r3, [pc, #316]	; (81071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8107092:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107094:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8107096:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107098:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810709a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 810709c:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81070a0:	f3c5 5205 	ubfx	r2, r5, #20, #6
  if (pll3m != 0U)
 81070a4:	d05c      	beq.n	8107160 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81070a6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81070aa:	f3c6 2600 	ubfx	r6, r6, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81070ae:	fb06 f404 	mul.w	r4, r6, r4
 81070b2:	ee07 4a90 	vmov	s15, r4
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81070b6:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 81070ba:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81070bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    switch (pllsource)
 81070c0:	d003      	beq.n	81070ca <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 81070c2:	2902      	cmp	r1, #2
 81070c4:	d075      	beq.n	81071b2 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 81070c6:	2900      	cmp	r1, #0
 81070c8:	d04f      	beq.n	810716a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81070ca:	ee07 2a10 	vmov	s14, r2
 81070ce:	ed9f 6a41 	vldr	s12, [pc, #260]	; 81071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 81070d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 81070d6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 81070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81070dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81070e0:	ee06 3a90 	vmov	s13, r3
 81070e4:	eddf 5a3c 	vldr	s11, [pc, #240]	; 81071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 81070e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81070ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 81070f0:	eee7 6aa5 	vfma.f32	s13, s15, s11
 81070f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 81070f8:	ee67 6a26 	vmul.f32	s13, s14, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81070fc:	4a34      	ldr	r2, [pc, #208]	; (81071d0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 81070fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8107100:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8107104:	ee07 3a10 	vmov	s14, r3
 8107108:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810710c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8107110:	ee37 7a06 	vadd.f32	s14, s14, s12
}
 8107114:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8107116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810711a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810711e:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8107122:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8107124:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8107128:	ee07 3a10 	vmov	s14, r3
 810712c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8107130:	ee37 7a06 	vadd.f32	s14, s14, s12
 8107134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810713c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8107140:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8107142:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8107146:	ee07 3a90 	vmov	s15, r3
 810714a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810714e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8107152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107156:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 810715a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 810715e:	4770      	bx	lr
 8107160:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107162:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107166:	6082      	str	r2, [r0, #8]
}
 8107168:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810716a:	6819      	ldr	r1, [r3, #0]
 810716c:	0689      	lsls	r1, r1, #26
 810716e:	d527      	bpl.n	81071c0 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107170:	681c      	ldr	r4, [r3, #0]
 8107172:	491a      	ldr	r1, [pc, #104]	; (81071dc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107176:	eddf 5a18 	vldr	s11, [pc, #96]	; 81071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810717a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 810717e:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107180:	ee07 1a10 	vmov	s14, r1
 8107184:	ee06 2a90 	vmov	s13, r2
 8107188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 810718c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8107190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107194:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8107198:	ee06 3a90 	vmov	s13, r3
 810719c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 81071a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81071a4:	eee7 6aa5 	vfma.f32	s13, s15, s11
 81071a8:	ee76 6a87 	vadd.f32	s13, s13, s14
 81071ac:	ee66 6a86 	vmul.f32	s13, s13, s12
 81071b0:	e7a4      	b.n	81070fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81071b2:	ee07 2a10 	vmov	s14, r2
 81071b6:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 81071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 81071ba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 81071be:	e78a      	b.n	81070d6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81071c0:	ee07 2a10 	vmov	s14, r2
 81071c4:	ed9f 6a07 	vldr	s12, [pc, #28]	; 81071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 81071c8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 81071cc:	e783      	b.n	81070d6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 81071ce:	bf00      	nop
 81071d0:	58024400 	.word	0x58024400
 81071d4:	4a742400 	.word	0x4a742400
 81071d8:	39000000 	.word	0x39000000
 81071dc:	03d09000 	.word	0x03d09000
 81071e0:	4b742400 	.word	0x4b742400
 81071e4:	4c742400 	.word	0x4c742400

081071e8 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 81071e8:	6803      	ldr	r3, [r0, #0]
 81071ea:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81071ec:	699a      	ldr	r2, [r3, #24]
 81071ee:	f042 0208 	orr.w	r2, r2, #8
 81071f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81071f4:	699a      	ldr	r2, [r3, #24]
 81071f6:	f042 0210 	orr.w	r2, r2, #16
 81071fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81071fc:	681a      	ldr	r2, [r3, #0]
 81071fe:	f022 0201 	bic.w	r2, r2, #1
 8107202:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8107204:	691a      	ldr	r2, [r3, #16]
 8107206:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 810720a:	f022 0203 	bic.w	r2, r2, #3
 810720e:	611a      	str	r2, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8107210:	689a      	ldr	r2, [r3, #8]
 8107212:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8107216:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8107218:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 810721c:	2a04      	cmp	r2, #4
 810721e:	d001      	beq.n	8107224 <SPI_CloseTransfer+0x3c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8107220:	068a      	lsls	r2, r1, #26
 8107222:	d42e      	bmi.n	8107282 <SPI_CloseTransfer+0x9a>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8107224:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8107228:	2a03      	cmp	r2, #3
 810722a:	d001      	beq.n	8107230 <SPI_CloseTransfer+0x48>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810722c:	064a      	lsls	r2, r1, #25
 810722e:	d41d      	bmi.n	810726c <SPI_CloseTransfer+0x84>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8107230:	058a      	lsls	r2, r1, #22
 8107232:	d509      	bpl.n	8107248 <SPI_CloseTransfer+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8107234:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8107238:	f042 0201 	orr.w	r2, r2, #1
 810723c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8107240:	699a      	ldr	r2, [r3, #24]
 8107242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8107246:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8107248:	05ca      	lsls	r2, r1, #23
 810724a:	d509      	bpl.n	8107260 <SPI_CloseTransfer+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810724c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8107250:	f042 0208 	orr.w	r2, r2, #8
 8107254:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8107258:	699a      	ldr	r2, [r3, #24]
 810725a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810725e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8107260:	2300      	movs	r3, #0
 8107262:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8107266:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 810726a:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810726c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8107270:	f042 0204 	orr.w	r2, r2, #4
 8107274:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8107278:	699a      	ldr	r2, [r3, #24]
 810727a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810727e:	619a      	str	r2, [r3, #24]
 8107280:	e7d6      	b.n	8107230 <SPI_CloseTransfer+0x48>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8107282:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8107286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810728a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810728e:	699a      	ldr	r2, [r3, #24]
 8107290:	f042 0220 	orr.w	r2, r2, #32
 8107294:	619a      	str	r2, [r3, #24]
 8107296:	e7c5      	b.n	8107224 <SPI_CloseTransfer+0x3c>

08107298 <HAL_SPI_Init>:
  if (hspi == NULL)
 8107298:	2800      	cmp	r0, #0
 810729a:	f000 8094 	beq.w	81073c6 <HAL_SPI_Init+0x12e>
{
 810729e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81072a0:	6802      	ldr	r2, [r0, #0]
 81072a2:	4b4b      	ldr	r3, [pc, #300]	; (81073d0 <HAL_SPI_Init+0x138>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81072a4:	2100      	movs	r1, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81072a6:	429a      	cmp	r2, r3
 81072a8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81072aa:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81072ac:	d015      	beq.n	81072da <HAL_SPI_Init+0x42>
 81072ae:	f5a3 4378 	sub.w	r3, r3, #63488	; 0xf800
 81072b2:	429a      	cmp	r2, r3
 81072b4:	d011      	beq.n	81072da <HAL_SPI_Init+0x42>
 81072b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 81072ba:	429a      	cmp	r2, r3
 81072bc:	d00d      	beq.n	81072da <HAL_SPI_Init+0x42>
 81072be:	68c0      	ldr	r0, [r0, #12]
 81072c0:	280f      	cmp	r0, #15
 81072c2:	d808      	bhi.n	81072d6 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81072c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81072c6:	f100 0308 	add.w	r3, r0, #8
 81072ca:	08db      	lsrs	r3, r3, #3
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81072cc:	094d      	lsrs	r5, r1, #5

  return data_size * fifo_threashold;
 81072ce:	fb05 3303 	mla	r3, r5, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81072d2:	2b08      	cmp	r3, #8
 81072d4:	d90b      	bls.n	81072ee <HAL_SPI_Init+0x56>
    return HAL_ERROR;
 81072d6:	2001      	movs	r0, #1
}
 81072d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81072da:	68e0      	ldr	r0, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81072dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 81072de:	f100 0308 	add.w	r3, r0, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81072e2:	094d      	lsrs	r5, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 81072e4:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 81072e6:	fb05 3303 	mla	r3, r5, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81072ea:	2b10      	cmp	r3, #16
 81072ec:	d8f3      	bhi.n	81072d6 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 81072ee:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 81072f2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 81072f6:	2b00      	cmp	r3, #0
 81072f8:	d05b      	beq.n	81073b2 <HAL_SPI_Init+0x11a>
 81072fa:	2700      	movs	r7, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 81072fc:	2302      	movs	r3, #2
 81072fe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8107302:	6813      	ldr	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107304:	6865      	ldr	r5, [r4, #4]
 8107306:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8107308:	f023 0301 	bic.w	r3, r3, #1
 810730c:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810730e:	69a3      	ldr	r3, [r4, #24]
 8107310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107314:	d03e      	beq.n	8107394 <HAL_SPI_Init+0xfc>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8107316:	4339      	orrs	r1, r7
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8107318:	6b67      	ldr	r7, [r4, #52]	; 0x34
 810731a:	433b      	orrs	r3, r7
 810731c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 810731e:	433b      	orrs	r3, r7
 8107320:	6927      	ldr	r7, [r4, #16]
 8107322:	433b      	orrs	r3, r7
 8107324:	6967      	ldr	r7, [r4, #20]
 8107326:	433b      	orrs	r3, r7
 8107328:	6a27      	ldr	r7, [r4, #32]
 810732a:	433b      	orrs	r3, r7
 810732c:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 810732e:	433b      	orrs	r3, r7
 8107330:	68a7      	ldr	r7, [r4, #8]
 8107332:	433b      	orrs	r3, r7
 8107334:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8107336:	433b      	orrs	r3, r7
 8107338:	6da7      	ldr	r7, [r4, #88]	; 0x58
 810733a:	433b      	orrs	r3, r7
 810733c:	432b      	orrs	r3, r5
 810733e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8107340:	69e6      	ldr	r6, [r4, #28]
 8107342:	4331      	orrs	r1, r6
 8107344:	4308      	orrs	r0, r1
 8107346:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8107348:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810734a:	b9b5      	cbnz	r5, 810737a <HAL_SPI_Init+0xe2>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810734c:	6893      	ldr	r3, [r2, #8]
 810734e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8107352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8107356:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8107358:	6893      	ldr	r3, [r2, #8]
 810735a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 810735e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8107362:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8107364:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8107366:	f023 0301 	bic.w	r3, r3, #1
 810736a:	6513      	str	r3, [r2, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810736c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 810736e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8107370:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8107374:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8107378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810737a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 810737c:	f023 0301 	bic.w	r3, r3, #1
 8107380:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8107382:	026b      	lsls	r3, r5, #9
 8107384:	d5f2      	bpl.n	810736c <HAL_SPI_Init+0xd4>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8107386:	68d3      	ldr	r3, [r2, #12]
 8107388:	6d61      	ldr	r1, [r4, #84]	; 0x54
 810738a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810738e:	430b      	orrs	r3, r1
 8107390:	60d3      	str	r3, [r2, #12]
 8107392:	e7eb      	b.n	810736c <HAL_SPI_Init+0xd4>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107394:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8107398:	d017      	beq.n	81073ca <HAL_SPI_Init+0x132>
 810739a:	2d00      	cmp	r5, #0
 810739c:	d1bb      	bne.n	8107316 <HAL_SPI_Init+0x7e>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810739e:	f1b6 5f80 	cmp.w	r6, #268435456	; 0x10000000
 81073a2:	d1b8      	bne.n	8107316 <HAL_SPI_Init+0x7e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81073a4:	f8d2 c000 	ldr.w	ip, [r2]
 81073a8:	f44c 5c80 	orr.w	ip, ip, #4096	; 0x1000
 81073ac:	f8c2 c000 	str.w	ip, [r2]
 81073b0:	e7b1      	b.n	8107316 <HAL_SPI_Init+0x7e>
    HAL_SPI_MspInit(hspi);
 81073b2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 81073b4:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 81073b8:	f7fa ffec 	bl	8102394 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 81073bc:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81073be:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 81073c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 81073c2:	68e0      	ldr	r0, [r4, #12]
 81073c4:	e79a      	b.n	81072fc <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 81073c6:	2001      	movs	r0, #1
}
 81073c8:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81073ca:	2e00      	cmp	r6, #0
 81073cc:	d0ea      	beq.n	81073a4 <HAL_SPI_Init+0x10c>
 81073ce:	e7a2      	b.n	8107316 <HAL_SPI_Init+0x7e>
 81073d0:	40013000 	.word	0x40013000

081073d4 <HAL_SPI_Transmit>:
{
 81073d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81073d8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 81073da:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 81073de:	2801      	cmp	r0, #1
 81073e0:	f000 808a 	beq.w	81074f8 <HAL_SPI_Transmit+0x124>
 81073e4:	461f      	mov	r7, r3
 81073e6:	2301      	movs	r3, #1
 81073e8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81073ec:	6826      	ldr	r6, [r4, #0]
  tickstart = HAL_GetTick();
 81073ee:	468a      	mov	sl, r1
 81073f0:	4615      	mov	r5, r2
 81073f2:	f7fb fb83 	bl	8102afc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 81073f6:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 81073fa:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 81073fc:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 81073fe:	fa5f f983 	uxtb.w	r9, r3
 8107402:	d171      	bne.n	81074e8 <HAL_SPI_Transmit+0x114>
  if ((pData == NULL) || (Size == 0UL))
 8107404:	f1ba 0f00 	cmp.w	sl, #0
 8107408:	d068      	beq.n	81074dc <HAL_SPI_Transmit+0x108>
 810740a:	2d00      	cmp	r5, #0
 810740c:	d066      	beq.n	81074dc <HAL_SPI_Transmit+0x108>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810740e:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8107410:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8107414:	2103      	movs	r1, #3
 8107416:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810741a:	2300      	movs	r3, #0
    SPI_1LINE_TX(hspi);
 810741c:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810741e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8107422:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->TxXferCount = Size;
 8107426:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t) 0UL;
 810742a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
 810742e:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  hspi->pRxBuffPtr  = NULL;
 8107432:	6663      	str	r3, [r4, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8107434:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    SPI_1LINE_TX(hspi);
 8107438:	bf08      	it	eq
 810743a:	680b      	ldreq	r3, [r1, #0]
  hspi->TxXferSize  = Size;
 810743c:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
    SPI_1LINE_TX(hspi);
 8107440:	bf04      	itt	eq
 8107442:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 8107446:	600b      	streq	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8107448:	684b      	ldr	r3, [r1, #4]
 810744a:	0c1b      	lsrs	r3, r3, #16
 810744c:	041b      	lsls	r3, r3, #16
 810744e:	432b      	orrs	r3, r5
 8107450:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8107452:	680b      	ldr	r3, [r1, #0]
 8107454:	f043 0301 	orr.w	r3, r3, #1
 8107458:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810745a:	6863      	ldr	r3, [r4, #4]
 810745c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107460:	f000 8087 	beq.w	8107572 <HAL_SPI_Transmit+0x19e>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8107464:	68e3      	ldr	r3, [r4, #12]
 8107466:	2b0f      	cmp	r3, #15
 8107468:	d84b      	bhi.n	8107502 <HAL_SPI_Transmit+0x12e>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810746a:	2b07      	cmp	r3, #7
    while (hspi->TxXferCount > 0UL)
 810746c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107470:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8107472:	f200 80b7 	bhi.w	81075e4 <HAL_SPI_Transmit+0x210>
    while (hspi->TxXferCount > 0UL)
 8107476:	b9a3      	cbnz	r3, 81074a2 <HAL_SPI_Transmit+0xce>
 8107478:	e0e2      	b.n	8107640 <HAL_SPI_Transmit+0x26c>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810747a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810747c:	2b40      	cmp	r3, #64	; 0x40
 810747e:	d919      	bls.n	81074b4 <HAL_SPI_Transmit+0xe0>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8107480:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8107482:	f853 2b04 	ldr.w	r2, [r3], #4
 8107486:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8107488:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810748a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 810748e:	3b04      	subs	r3, #4
 8107490:	b29b      	uxth	r3, r3
 8107492:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8107496:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 810749a:	b292      	uxth	r2, r2
 810749c:	2a00      	cmp	r2, #0
 810749e:	f000 80cf 	beq.w	8107640 <HAL_SPI_Transmit+0x26c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81074a2:	694b      	ldr	r3, [r1, #20]
 81074a4:	079a      	lsls	r2, r3, #30
 81074a6:	f140 8081 	bpl.w	81075ac <HAL_SPI_Transmit+0x1d8>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81074aa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81074ae:	b29b      	uxth	r3, r3
 81074b0:	2b03      	cmp	r3, #3
 81074b2:	d8e2      	bhi.n	810747a <HAL_SPI_Transmit+0xa6>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81074b4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81074b8:	b29b      	uxth	r3, r3
 81074ba:	2b01      	cmp	r3, #1
 81074bc:	d967      	bls.n	810758e <HAL_SPI_Transmit+0x1ba>
 81074be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 81074c0:	2b00      	cmp	r3, #0
 81074c2:	d064      	beq.n	810758e <HAL_SPI_Transmit+0x1ba>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81074c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81074c6:	f833 2b02 	ldrh.w	r2, [r3], #2
 81074ca:	8432      	strh	r2, [r6, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81074cc:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81074ce:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81074d2:	3b02      	subs	r3, #2
 81074d4:	b29b      	uxth	r3, r3
 81074d6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 81074da:	e7dc      	b.n	8107496 <HAL_SPI_Transmit+0xc2>
    __HAL_UNLOCK(hspi);
 81074dc:	2300      	movs	r3, #0
 81074de:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 81074e2:	4648      	mov	r0, r9
 81074e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 81074e8:	2300      	movs	r3, #0
    return errorcode;
 81074ea:	f04f 0902 	mov.w	r9, #2
    __HAL_UNLOCK(hspi);
 81074ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 81074f2:	4648      	mov	r0, r9
 81074f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 81074f8:	f04f 0902 	mov.w	r9, #2
}
 81074fc:	4648      	mov	r0, r9
 81074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (hspi->TxXferCount > 0UL)
 8107502:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107506:	b29b      	uxth	r3, r3
 8107508:	2b00      	cmp	r3, #0
 810750a:	f000 8099 	beq.w	8107640 <HAL_SPI_Transmit+0x26c>
 810750e:	1c7e      	adds	r6, r7, #1
 8107510:	f040 80b4 	bne.w	810767c <HAL_SPI_Transmit+0x2a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8107514:	694b      	ldr	r3, [r1, #20]
 8107516:	079d      	lsls	r5, r3, #30
 8107518:	d530      	bpl.n	810757c <HAL_SPI_Transmit+0x1a8>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810751a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 810751c:	f852 3b04 	ldr.w	r3, [r2], #4
 8107520:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 8107522:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8107526:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 8107528:	3b01      	subs	r3, #1
 810752a:	b29b      	uxth	r3, r3
 810752c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8107530:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107534:	b29b      	uxth	r3, r3
 8107536:	2b00      	cmp	r3, #0
 8107538:	d1ec      	bne.n	8107514 <HAL_SPI_Transmit+0x140>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810753a:	694b      	ldr	r3, [r1, #20]
 810753c:	0719      	lsls	r1, r3, #28
 810753e:	d405      	bmi.n	810754c <HAL_SPI_Transmit+0x178>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107540:	f7fb fadc 	bl	8102afc <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107544:	6823      	ldr	r3, [r4, #0]
 8107546:	695b      	ldr	r3, [r3, #20]
 8107548:	071a      	lsls	r2, r3, #28
 810754a:	d5f9      	bpl.n	8107540 <HAL_SPI_Transmit+0x16c>
  SPI_CloseTransfer(hspi);
 810754c:	4620      	mov	r0, r4
 810754e:	f7ff fe4b 	bl	81071e8 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8107552:	2301      	movs	r3, #1
 8107554:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107558:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 810755c:	2200      	movs	r2, #0
  __HAL_LOCK(hspi);
 810755e:	ebb3 0902 	subs.w	r9, r3, r2
 8107562:	bf18      	it	ne
 8107564:	f04f 0901 	movne.w	r9, #1
  __HAL_UNLOCK(hspi);
 8107568:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 810756c:	4648      	mov	r0, r9
 810756e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8107572:	680b      	ldr	r3, [r1, #0]
 8107574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8107578:	600b      	str	r3, [r1, #0]
 810757a:	e773      	b.n	8107464 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810757c:	f7fb fabe 	bl	8102afc <HAL_GetTick>
    while (hspi->TxXferCount > 0UL)
 8107580:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107584:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 8107586:	b29b      	uxth	r3, r3
 8107588:	2b00      	cmp	r3, #0
 810758a:	d1c3      	bne.n	8107514 <HAL_SPI_Transmit+0x140>
 810758c:	e7d5      	b.n	810753a <HAL_SPI_Transmit+0x166>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810758e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8107590:	781b      	ldrb	r3, [r3, #0]
 8107592:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->TxXferCount--;
 8107596:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810759a:	6821      	ldr	r1, [r4, #0]
          hspi->TxXferCount--;
 810759c:	3b01      	subs	r3, #1
 810759e:	b29b      	uxth	r3, r3
 81075a0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 81075a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81075a6:	3301      	adds	r3, #1
 81075a8:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 81075aa:	e774      	b.n	8107496 <HAL_SPI_Transmit+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81075ac:	f7fb faa6 	bl	8102afc <HAL_GetTick>
 81075b0:	eba0 0008 	sub.w	r0, r0, r8
 81075b4:	42b8      	cmp	r0, r7
 81075b6:	d303      	bcc.n	81075c0 <HAL_SPI_Transmit+0x1ec>
 81075b8:	1c7b      	adds	r3, r7, #1
 81075ba:	d103      	bne.n	81075c4 <HAL_SPI_Transmit+0x1f0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81075bc:	6821      	ldr	r1, [r4, #0]
 81075be:	e76a      	b.n	8107496 <HAL_SPI_Transmit+0xc2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81075c0:	2f00      	cmp	r7, #0
 81075c2:	d1fb      	bne.n	81075bc <HAL_SPI_Transmit+0x1e8>
          SPI_CloseTransfer(hspi);
 81075c4:	4620      	mov	r0, r4
 81075c6:	f7ff fe0f 	bl	81071e8 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81075ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 81075ce:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81075d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
          hspi->State = HAL_SPI_STATE_READY;
 81075d4:	2201      	movs	r2, #1
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81075d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 81075da:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
          hspi->State = HAL_SPI_STATE_READY;
 81075de:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
          return HAL_ERROR;
 81075e2:	e77e      	b.n	81074e2 <HAL_SPI_Transmit+0x10e>
    while (hspi->TxXferCount > 0UL)
 81075e4:	b363      	cbz	r3, 8107640 <HAL_SPI_Transmit+0x26c>
 81075e6:	1c7b      	adds	r3, r7, #1
 81075e8:	d017      	beq.n	810761a <HAL_SPI_Transmit+0x246>
 81075ea:	e07a      	b.n	81076e2 <HAL_SPI_Transmit+0x30e>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81075ec:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81075f0:	b29b      	uxth	r3, r3
 81075f2:	2b01      	cmp	r3, #1
 81075f4:	d918      	bls.n	8107628 <HAL_SPI_Transmit+0x254>
 81075f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 81075f8:	b1b3      	cbz	r3, 8107628 <HAL_SPI_Transmit+0x254>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81075fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 81075fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8107600:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8107602:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8107606:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8107608:	3b02      	subs	r3, #2
 810760a:	b29b      	uxth	r3, r3
 810760c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8107610:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107614:	b29b      	uxth	r3, r3
 8107616:	2b00      	cmp	r3, #0
 8107618:	d08f      	beq.n	810753a <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810761a:	694b      	ldr	r3, [r1, #20]
 810761c:	079f      	lsls	r7, r3, #30
 810761e:	d4e5      	bmi.n	81075ec <HAL_SPI_Transmit+0x218>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107620:	f7fb fa6c 	bl	8102afc <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107624:	6821      	ldr	r1, [r4, #0]
 8107626:	e7f3      	b.n	8107610 <HAL_SPI_Transmit+0x23c>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8107628:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 810762a:	f832 3b02 	ldrh.w	r3, [r2], #2
 810762e:	8433      	strh	r3, [r6, #32]
          hspi->TxXferCount--;
 8107630:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8107634:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8107636:	3b01      	subs	r3, #1
 8107638:	b29b      	uxth	r3, r3
 810763a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 810763e:	e7e7      	b.n	8107610 <HAL_SPI_Transmit+0x23c>
 8107640:	1c7d      	adds	r5, r7, #1
 8107642:	f43f af7a 	beq.w	810753a <HAL_SPI_Transmit+0x166>
 8107646:	b90f      	cbnz	r7, 810764c <HAL_SPI_Transmit+0x278>
 8107648:	e011      	b.n	810766e <HAL_SPI_Transmit+0x29a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810764a:	6821      	ldr	r1, [r4, #0]
 810764c:	694b      	ldr	r3, [r1, #20]
 810764e:	0718      	lsls	r0, r3, #28
 8107650:	f53f af7c 	bmi.w	810754c <HAL_SPI_Transmit+0x178>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107654:	f7fb fa52 	bl	8102afc <HAL_GetTick>
 8107658:	eba0 0008 	sub.w	r0, r0, r8
 810765c:	4287      	cmp	r7, r0
 810765e:	d8f4      	bhi.n	810764a <HAL_SPI_Transmit+0x276>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8107660:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8107664:	f043 0320 	orr.w	r3, r3, #32
 8107668:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 810766c:	e76e      	b.n	810754c <HAL_SPI_Transmit+0x178>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810766e:	694b      	ldr	r3, [r1, #20]
 8107670:	071b      	lsls	r3, r3, #28
 8107672:	f53f af6b 	bmi.w	810754c <HAL_SPI_Transmit+0x178>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107676:	f7fb fa41 	bl	8102afc <HAL_GetTick>
 810767a:	e7f1      	b.n	8107660 <HAL_SPI_Transmit+0x28c>
 810767c:	b987      	cbnz	r7, 81076a0 <HAL_SPI_Transmit+0x2cc>
 810767e:	e02a      	b.n	81076d6 <HAL_SPI_Transmit+0x302>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8107680:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8107682:	f852 3b04 	ldr.w	r3, [r2], #4
 8107686:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 8107688:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 810768c:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 810768e:	3b01      	subs	r3, #1
 8107690:	b29b      	uxth	r3, r3
 8107692:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8107696:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 810769a:	b29b      	uxth	r3, r3
 810769c:	2b00      	cmp	r3, #0
 810769e:	d0d5      	beq.n	810764c <HAL_SPI_Transmit+0x278>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81076a0:	694b      	ldr	r3, [r1, #20]
 81076a2:	0798      	lsls	r0, r3, #30
 81076a4:	d4ec      	bmi.n	8107680 <HAL_SPI_Transmit+0x2ac>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81076a6:	f7fb fa29 	bl	8102afc <HAL_GetTick>
 81076aa:	eba0 0008 	sub.w	r0, r0, r8
 81076ae:	4287      	cmp	r7, r0
 81076b0:	d988      	bls.n	81075c4 <HAL_SPI_Transmit+0x1f0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81076b2:	6821      	ldr	r1, [r4, #0]
 81076b4:	e7ef      	b.n	8107696 <HAL_SPI_Transmit+0x2c2>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81076b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 81076b8:	f852 3b04 	ldr.w	r3, [r2], #4
 81076bc:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 81076be:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81076c2:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount--;
 81076c4:	3b01      	subs	r3, #1
 81076c6:	b29b      	uxth	r3, r3
 81076c8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 81076cc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81076d0:	b29b      	uxth	r3, r3
 81076d2:	2b00      	cmp	r3, #0
 81076d4:	d0cb      	beq.n	810766e <HAL_SPI_Transmit+0x29a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81076d6:	694b      	ldr	r3, [r1, #20]
 81076d8:	079a      	lsls	r2, r3, #30
 81076da:	d4ec      	bmi.n	81076b6 <HAL_SPI_Transmit+0x2e2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81076dc:	f7fb fa0e 	bl	8102afc <HAL_GetTick>
          SPI_CloseTransfer(hspi);
 81076e0:	e770      	b.n	81075c4 <HAL_SPI_Transmit+0x1f0>
 81076e2:	b9c7      	cbnz	r7, 8107716 <HAL_SPI_Transmit+0x342>
 81076e4:	e03a      	b.n	810775c <HAL_SPI_Transmit+0x388>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81076e6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 81076ea:	b29b      	uxth	r3, r3
 81076ec:	2b01      	cmp	r3, #1
 81076ee:	d939      	bls.n	8107764 <HAL_SPI_Transmit+0x390>
 81076f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 81076f2:	2b00      	cmp	r3, #0
 81076f4:	d036      	beq.n	8107764 <HAL_SPI_Transmit+0x390>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81076f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 81076f8:	f853 2b04 	ldr.w	r2, [r3], #4
 81076fc:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81076fe:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8107700:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107704:	3b02      	subs	r3, #2
 8107706:	b29b      	uxth	r3, r3
 8107708:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 810770c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107710:	b29b      	uxth	r3, r3
 8107712:	2b00      	cmp	r3, #0
 8107714:	d09a      	beq.n	810764c <HAL_SPI_Transmit+0x278>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8107716:	694b      	ldr	r3, [r1, #20]
 8107718:	079d      	lsls	r5, r3, #30
 810771a:	d4e4      	bmi.n	81076e6 <HAL_SPI_Transmit+0x312>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810771c:	f7fb f9ee 	bl	8102afc <HAL_GetTick>
 8107720:	eba0 0008 	sub.w	r0, r0, r8
 8107724:	4287      	cmp	r7, r0
 8107726:	f67f af4d 	bls.w	81075c4 <HAL_SPI_Transmit+0x1f0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810772a:	6821      	ldr	r1, [r4, #0]
 810772c:	e7ee      	b.n	810770c <HAL_SPI_Transmit+0x338>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810772e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107732:	b29b      	uxth	r3, r3
 8107734:	2b01      	cmp	r3, #1
 8107736:	d921      	bls.n	810777c <HAL_SPI_Transmit+0x3a8>
 8107738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810773a:	b1fb      	cbz	r3, 810777c <HAL_SPI_Transmit+0x3a8>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810773c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 810773e:	f852 3b04 	ldr.w	r3, [r2], #4
 8107742:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 8107744:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8107748:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810774a:	3b02      	subs	r3, #2
 810774c:	b29b      	uxth	r3, r3
 810774e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    while (hspi->TxXferCount > 0UL)
 8107752:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107756:	b29b      	uxth	r3, r3
 8107758:	2b00      	cmp	r3, #0
 810775a:	d088      	beq.n	810766e <HAL_SPI_Transmit+0x29a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810775c:	694b      	ldr	r3, [r1, #20]
 810775e:	0798      	lsls	r0, r3, #30
 8107760:	d5bc      	bpl.n	81076dc <HAL_SPI_Transmit+0x308>
 8107762:	e7e4      	b.n	810772e <HAL_SPI_Transmit+0x35a>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8107764:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8107766:	f833 2b02 	ldrh.w	r2, [r3], #2
 810776a:	8432      	strh	r2, [r6, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810776c:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 810776e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107772:	3b01      	subs	r3, #1
 8107774:	b29b      	uxth	r3, r3
 8107776:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 810777a:	e7c7      	b.n	810770c <HAL_SPI_Transmit+0x338>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810777c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 810777e:	f832 3b02 	ldrh.w	r3, [r2], #2
 8107782:	8433      	strh	r3, [r6, #32]
          hspi->TxXferCount--;
 8107784:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8107788:	65e2      	str	r2, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 810778a:	3b01      	subs	r3, #1
 810778c:	b29b      	uxth	r3, r3
 810778e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8107792:	e7de      	b.n	8107752 <HAL_SPI_Transmit+0x37e>

08107794 <HAL_SPI_TransmitReceive>:
{
 8107794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107798:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 810779a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 810779e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 81077a0:	2b01      	cmp	r3, #1
 81077a2:	f000 8095 	beq.w	81078d0 <HAL_SPI_TransmitReceive+0x13c>
 81077a6:	4604      	mov	r4, r0
 81077a8:	2301      	movs	r3, #1
 81077aa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 81077ae:	4689      	mov	r9, r1
 81077b0:	4692      	mov	sl, r2
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81077b2:	f8d0 b000 	ldr.w	fp, [r0]
  tickstart = HAL_GetTick();
 81077b6:	f7fb f9a1 	bl	8102afc <HAL_GetTick>
  tmp_state           = hspi->State;
 81077ba:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  tmp_mode            = hspi->Init.Mode;
 81077be:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 81077c0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 81077c2:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 81077c4:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 81077c6:	d007      	beq.n	81077d8 <HAL_SPI_TransmitReceive+0x44>
 81077c8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 81077cc:	d174      	bne.n	81078b8 <HAL_SPI_TransmitReceive+0x124>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 81077ce:	68a3      	ldr	r3, [r4, #8]
 81077d0:	2b00      	cmp	r3, #0
 81077d2:	d171      	bne.n	81078b8 <HAL_SPI_TransmitReceive+0x124>
 81077d4:	2904      	cmp	r1, #4
 81077d6:	d16f      	bne.n	81078b8 <HAL_SPI_TransmitReceive+0x124>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 81077d8:	f1b9 0f00 	cmp.w	r9, #0
 81077dc:	d072      	beq.n	81078c4 <HAL_SPI_TransmitReceive+0x130>
 81077de:	f1ba 0f00 	cmp.w	sl, #0
 81077e2:	d06f      	beq.n	81078c4 <HAL_SPI_TransmitReceive+0x130>
 81077e4:	2e00      	cmp	r6, #0
 81077e6:	d06d      	beq.n	81078c4 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81077e8:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81077ec:	6825      	ldr	r5, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 81077ee:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81077f2:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 81077f4:	bf1c      	itt	ne
 81077f6:	2305      	movne	r3, #5
 81077f8:	f884 3081 	strbne.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81077fc:	2300      	movs	r3, #0
 81077fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8107802:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
  hspi->TxXferCount = Size;
 8107806:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 810780a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810780e:	686b      	ldr	r3, [r5, #4]
  hspi->RxXferSize  = Size;
 8107810:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8107814:	0c1b      	lsrs	r3, r3, #16
 8107816:	041b      	lsls	r3, r3, #16
 8107818:	4333      	orrs	r3, r6
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810781a:	f8c4 905c 	str.w	r9, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810781e:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8107822:	606b      	str	r3, [r5, #4]
  __HAL_SPI_ENABLE(hspi);
 8107824:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8107826:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
  __HAL_SPI_ENABLE(hspi);
 810782a:	f043 0301 	orr.w	r3, r3, #1
 810782e:	602b      	str	r3, [r5, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8107830:	d103      	bne.n	810783a <HAL_SPI_TransmitReceive+0xa6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8107832:	682b      	ldr	r3, [r5, #0]
 8107834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8107838:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810783a:	68e3      	ldr	r3, [r4, #12]
 810783c:	2b0f      	cmp	r3, #15
 810783e:	d967      	bls.n	8107910 <HAL_SPI_TransmitReceive+0x17c>
 8107840:	1c78      	adds	r0, r7, #1
 8107842:	f040 8187 	bne.w	8107b54 <HAL_SPI_TransmitReceive+0x3c0>
 8107846:	4637      	mov	r7, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8107848:	f248 0808 	movw	r8, #32776	; 0x8008
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810784c:	2f00      	cmp	r7, #0
 810784e:	d042      	beq.n	81078d6 <HAL_SPI_TransmitReceive+0x142>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107850:	696b      	ldr	r3, [r5, #20]
 8107852:	079a      	lsls	r2, r3, #30
 8107854:	d50d      	bpl.n	8107872 <HAL_SPI_TransmitReceive+0xde>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8107856:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8107858:	f852 3b04 	ldr.w	r3, [r2], #4
 810785c:	622b      	str	r3, [r5, #32]
        hspi->TxXferCount --;
 810785e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8107862:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8107864:	3b01      	subs	r3, #1
 8107866:	b29b      	uxth	r3, r3
 8107868:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 810786c:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
 8107870:	b2bf      	uxth	r7, r7
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8107872:	696b      	ldr	r3, [r5, #20]
 8107874:	ea13 0f08 	tst.w	r3, r8
 8107878:	d046      	beq.n	8107908 <HAL_SPI_TransmitReceive+0x174>
 810787a:	2e00      	cmp	r6, #0
 810787c:	d136      	bne.n	81078ec <HAL_SPI_TransmitReceive+0x158>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810787e:	f7fb f93d 	bl	8102afc <HAL_GetTick>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107882:	6825      	ldr	r5, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107884:	2f00      	cmp	r7, #0
 8107886:	d1e3      	bne.n	8107850 <HAL_SPI_TransmitReceive+0xbc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107888:	696b      	ldr	r3, [r5, #20]
 810788a:	071e      	lsls	r6, r3, #28
 810788c:	d405      	bmi.n	810789a <HAL_SPI_TransmitReceive+0x106>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810788e:	f7fb f935 	bl	8102afc <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107892:	6823      	ldr	r3, [r4, #0]
 8107894:	695b      	ldr	r3, [r3, #20]
 8107896:	071d      	lsls	r5, r3, #28
 8107898:	d5f9      	bpl.n	810788e <HAL_SPI_TransmitReceive+0xfa>
  SPI_CloseTransfer(hspi);
 810789a:	4620      	mov	r0, r4
 810789c:	f7ff fca4 	bl	81071e8 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 81078a0:	2301      	movs	r3, #1
 81078a2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81078a6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 81078aa:	2300      	movs	r3, #0
  __HAL_LOCK(hspi);
 81078ac:	1ac0      	subs	r0, r0, r3
  __HAL_UNLOCK(hspi);
 81078ae:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __HAL_LOCK(hspi);
 81078b2:	bf18      	it	ne
 81078b4:	2001      	movne	r0, #1
 81078b6:	e003      	b.n	81078c0 <HAL_SPI_TransmitReceive+0x12c>
    __HAL_UNLOCK(hspi);
 81078b8:	2300      	movs	r3, #0
 81078ba:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 81078be:	2002      	movs	r0, #2
}
 81078c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_UNLOCK(hspi);
 81078c4:	2300      	movs	r3, #0
 81078c6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 81078ca:	2001      	movs	r0, #1
}
 81078cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hspi);
 81078d0:	2002      	movs	r0, #2
}
 81078d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81078d6:	2e00      	cmp	r6, #0
 81078d8:	d0d6      	beq.n	8107888 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81078da:	696b      	ldr	r3, [r5, #20]
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 81078dc:	696b      	ldr	r3, [r5, #20]
 81078de:	ea13 0f08 	tst.w	r3, r8
 81078e2:	d103      	bne.n	81078ec <HAL_SPI_TransmitReceive+0x158>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81078e4:	f7fb f90a 	bl	8102afc <HAL_GetTick>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81078e8:	6825      	ldr	r5, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81078ea:	e7f4      	b.n	81078d6 <HAL_SPI_TransmitReceive+0x142>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81078ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81078ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 81078f0:	f842 3b04 	str.w	r3, [r2], #4
        hspi->RxXferCount --;
 81078f4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81078f8:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 81078fa:	3b01      	subs	r3, #1
 81078fc:	b29b      	uxth	r3, r3
 81078fe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8107902:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
 8107906:	b2b6      	uxth	r6, r6
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107908:	f7fb f8f8 	bl	8102afc <HAL_GetTick>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810790c:	6825      	ldr	r5, [r4, #0]
 810790e:	e79d      	b.n	810784c <HAL_SPI_TransmitReceive+0xb8>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8107910:	2b07      	cmp	r3, #7
 8107912:	46b1      	mov	r9, r6
 8107914:	d960      	bls.n	81079d8 <HAL_SPI_TransmitReceive+0x244>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107916:	bb36      	cbnz	r6, 8107966 <HAL_SPI_TransmitReceive+0x1d2>
 8107918:	f1b9 0f00 	cmp.w	r9, #0
 810791c:	f000 8190 	beq.w	8107c40 <HAL_SPI_TransmitReceive+0x4ac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8107920:	696b      	ldr	r3, [r5, #20]
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8107922:	696b      	ldr	r3, [r5, #20]
 8107924:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8107928:	d012      	beq.n	8107950 <HAL_SPI_TransmitReceive+0x1bc>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810792a:	696b      	ldr	r3, [r5, #20]
 810792c:	041b      	lsls	r3, r3, #16
 810792e:	f140 80de 	bpl.w	8107aee <HAL_SPI_TransmitReceive+0x35a>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107932:	6b29      	ldr	r1, [r5, #48]	; 0x30
          hspi->RxXferCount -= (uint16_t)2UL;
 8107934:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107938:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810793a:	3b02      	subs	r3, #2
 810793c:	b29b      	uxth	r3, r3
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810793e:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8107942:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8107946:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810794a:	6662      	str	r2, [r4, #100]	; 0x64
          initial_RxXferCount = hspi->RxXferCount;
 810794c:	fa1f f989 	uxth.w	r9, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107950:	f7fb f8d4 	bl	8102afc <HAL_GetTick>
 8107954:	eba0 0008 	sub.w	r0, r0, r8
 8107958:	42b8      	cmp	r0, r7
 810795a:	d329      	bcc.n	81079b0 <HAL_SPI_TransmitReceive+0x21c>
 810795c:	1c7d      	adds	r5, r7, #1
 810795e:	d129      	bne.n	81079b4 <HAL_SPI_TransmitReceive+0x220>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8107960:	6825      	ldr	r5, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107962:	2e00      	cmp	r6, #0
 8107964:	d0d8      	beq.n	8107918 <HAL_SPI_TransmitReceive+0x184>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8107966:	696b      	ldr	r3, [r5, #20]
 8107968:	079a      	lsls	r2, r3, #30
 810796a:	d514      	bpl.n	8107996 <HAL_SPI_TransmitReceive+0x202>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810796c:	2e01      	cmp	r6, #1
 810796e:	f000 8097 	beq.w	8107aa0 <HAL_SPI_TransmitReceive+0x30c>
 8107972:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8107974:	2b00      	cmp	r3, #0
 8107976:	f000 8093 	beq.w	8107aa0 <HAL_SPI_TransmitReceive+0x30c>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810797a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 810797c:	f853 2b04 	ldr.w	r2, [r3], #4
 8107980:	622a      	str	r2, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8107982:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8107984:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107988:	3b02      	subs	r3, #2
 810798a:	b29b      	uxth	r3, r3
 810798c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8107990:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8107994:	b2b6      	uxth	r6, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8107996:	696b      	ldr	r3, [r5, #20]
 8107998:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 810799c:	d0d8      	beq.n	8107950 <HAL_SPI_TransmitReceive+0x1bc>
 810799e:	f1b9 0f00 	cmp.w	r9, #0
 81079a2:	d1c2      	bne.n	810792a <HAL_SPI_TransmitReceive+0x196>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81079a4:	f7fb f8aa 	bl	8102afc <HAL_GetTick>
 81079a8:	eba0 0008 	sub.w	r0, r0, r8
 81079ac:	42b8      	cmp	r0, r7
 81079ae:	d2d5      	bcs.n	810795c <HAL_SPI_TransmitReceive+0x1c8>
 81079b0:	2f00      	cmp	r7, #0
 81079b2:	d1d5      	bne.n	8107960 <HAL_SPI_TransmitReceive+0x1cc>
        SPI_CloseTransfer(hspi);
 81079b4:	4620      	mov	r0, r4
 81079b6:	f7ff fc17 	bl	81071e8 <SPI_CloseTransfer>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81079ba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81079be:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 81079c0:	2100      	movs	r1, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81079c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81079c6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
        __HAL_UNLOCK(hspi);
 81079ca:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
        hspi->State = HAL_SPI_STATE_READY;
 81079ce:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        return HAL_ERROR;
 81079d2:	4618      	mov	r0, r3
}
 81079d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81079d8:	bb2e      	cbnz	r6, 8107a26 <HAL_SPI_TransmitReceive+0x292>
 81079da:	f1b9 0f00 	cmp.w	r9, #0
 81079de:	f000 812f 	beq.w	8107c40 <HAL_SPI_TransmitReceive+0x4ac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81079e2:	696b      	ldr	r3, [r5, #20]
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 81079e4:	696b      	ldr	r3, [r5, #20]
 81079e6:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 81079ea:	d011      	beq.n	8107a10 <HAL_SPI_TransmitReceive+0x27c>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 81079ec:	696b      	ldr	r3, [r5, #20]
 81079ee:	0418      	lsls	r0, r3, #16
 81079f0:	d566      	bpl.n	8107ac0 <HAL_SPI_TransmitReceive+0x32c>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81079f2:	6b29      	ldr	r1, [r5, #48]	; 0x30
          hspi->RxXferCount -= (uint16_t)4UL;
 81079f4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81079f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 81079fa:	3b04      	subs	r3, #4
 81079fc:	b29b      	uxth	r3, r3
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81079fe:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 8107a02:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8107a06:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8107a0a:	6662      	str	r2, [r4, #100]	; 0x64
          initial_RxXferCount = hspi->RxXferCount;
 8107a0c:	fa1f f989 	uxth.w	r9, r9
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107a10:	f7fb f874 	bl	8102afc <HAL_GetTick>
 8107a14:	eba0 0008 	sub.w	r0, r0, r8
 8107a18:	42b8      	cmp	r0, r7
 8107a1a:	d33e      	bcc.n	8107a9a <HAL_SPI_TransmitReceive+0x306>
 8107a1c:	1c79      	adds	r1, r7, #1
 8107a1e:	d1c9      	bne.n	81079b4 <HAL_SPI_TransmitReceive+0x220>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107a20:	6825      	ldr	r5, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107a22:	2e00      	cmp	r6, #0
 8107a24:	d0d9      	beq.n	81079da <HAL_SPI_TransmitReceive+0x246>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107a26:	696b      	ldr	r3, [r5, #20]
 8107a28:	079b      	lsls	r3, r3, #30
 8107a2a:	d529      	bpl.n	8107a80 <HAL_SPI_TransmitReceive+0x2ec>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8107a2c:	2e03      	cmp	r6, #3
 8107a2e:	d911      	bls.n	8107a54 <HAL_SPI_TransmitReceive+0x2c0>
 8107a30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8107a32:	2b40      	cmp	r3, #64	; 0x40
 8107a34:	d911      	bls.n	8107a5a <HAL_SPI_TransmitReceive+0x2c6>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8107a36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8107a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8107a3c:	622a      	str	r2, [r5, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8107a3e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8107a40:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107a44:	3b04      	subs	r3, #4
 8107a46:	b29b      	uxth	r3, r3
 8107a48:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8107a4c:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8107a50:	b2b6      	uxth	r6, r6
 8107a52:	e015      	b.n	8107a80 <HAL_SPI_TransmitReceive+0x2ec>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8107a54:	2e01      	cmp	r6, #1
 8107a56:	d002      	beq.n	8107a5e <HAL_SPI_TransmitReceive+0x2ca>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8107a58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8107a5a:	2b00      	cmp	r3, #0
 8107a5c:	d16a      	bne.n	8107b34 <HAL_SPI_TransmitReceive+0x3a0>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8107a5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8107a60:	781b      	ldrb	r3, [r3, #0]
 8107a62:	f885 3020 	strb.w	r3, [r5, #32]
          hspi->TxXferCount--;
 8107a66:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8107a6a:	6825      	ldr	r5, [r4, #0]
          hspi->TxXferCount--;
 8107a6c:	3b01      	subs	r3, #1
 8107a6e:	b29b      	uxth	r3, r3
 8107a70:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8107a74:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          initial_TxXferCount = hspi->TxXferCount;
 8107a76:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8107a7a:	3301      	adds	r3, #1
 8107a7c:	65e3      	str	r3, [r4, #92]	; 0x5c
          initial_TxXferCount = hspi->TxXferCount;
 8107a7e:	b2b6      	uxth	r6, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8107a80:	696b      	ldr	r3, [r5, #20]
 8107a82:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8107a86:	d0c3      	beq.n	8107a10 <HAL_SPI_TransmitReceive+0x27c>
 8107a88:	f1b9 0f00 	cmp.w	r9, #0
 8107a8c:	d1ae      	bne.n	81079ec <HAL_SPI_TransmitReceive+0x258>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107a8e:	f7fb f835 	bl	8102afc <HAL_GetTick>
 8107a92:	eba0 0008 	sub.w	r0, r0, r8
 8107a96:	42b8      	cmp	r0, r7
 8107a98:	d2c0      	bcs.n	8107a1c <HAL_SPI_TransmitReceive+0x288>
 8107a9a:	2f00      	cmp	r7, #0
 8107a9c:	d1c0      	bne.n	8107a20 <HAL_SPI_TransmitReceive+0x28c>
 8107a9e:	e789      	b.n	81079b4 <HAL_SPI_TransmitReceive+0x220>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8107aa0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8107aa2:	f833 2b02 	ldrh.w	r2, [r3], #2
 8107aa6:	f8ab 2020 	strh.w	r2, [fp, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8107aaa:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount--;
 8107aac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107ab0:	3b01      	subs	r3, #1
 8107ab2:	b29b      	uxth	r3, r3
 8107ab4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8107ab8:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8107abc:	b2b6      	uxth	r6, r6
 8107abe:	e76a      	b.n	8107996 <HAL_SPI_TransmitReceive+0x202>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8107ac0:	696b      	ldr	r3, [r5, #20]
 8107ac2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8107ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107aca:	d921      	bls.n	8107b10 <HAL_SPI_TransmitReceive+0x37c>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107ace:	f8bb 2030 	ldrh.w	r2, [fp, #48]	; 0x30
 8107ad2:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8107ad6:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8107ad8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107adc:	3b02      	subs	r3, #2
 8107ade:	b29b      	uxth	r3, r3
 8107ae0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8107ae4:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8107ae8:	fa1f f989 	uxth.w	r9, r9
 8107aec:	e790      	b.n	8107a10 <HAL_SPI_TransmitReceive+0x27c>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107af0:	f8bb 2030 	ldrh.w	r2, [fp, #48]	; 0x30
 8107af4:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8107af8:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8107afa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107afe:	3b01      	subs	r3, #1
 8107b00:	b29b      	uxth	r3, r3
 8107b02:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8107b06:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
 8107b0a:	fa1f f989 	uxth.w	r9, r9
 8107b0e:	e71f      	b.n	8107950 <HAL_SPI_TransmitReceive+0x1bc>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107b12:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8107b16:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8107b18:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107b1c:	3b01      	subs	r3, #1
 8107b1e:	b29b      	uxth	r3, r3
 8107b20:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
          initial_RxXferCount = hspi->RxXferCount;
 8107b26:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107b2a:	3301      	adds	r3, #1
 8107b2c:	6663      	str	r3, [r4, #100]	; 0x64
          initial_RxXferCount = hspi->RxXferCount;
 8107b2e:	fa1f f989 	uxth.w	r9, r9
 8107b32:	e76d      	b.n	8107a10 <HAL_SPI_TransmitReceive+0x27c>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8107b34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8107b36:	f833 2b02 	ldrh.w	r2, [r3], #2
 8107b3a:	f8ab 2020 	strh.w	r2, [fp, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8107b3e:	65e3      	str	r3, [r4, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8107b40:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107b44:	3b02      	subs	r3, #2
 8107b46:	b29b      	uxth	r3, r3
 8107b48:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8107b4c:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8107b50:	b2b6      	uxth	r6, r6
 8107b52:	e795      	b.n	8107a80 <HAL_SPI_TransmitReceive+0x2ec>
 8107b54:	2f00      	cmp	r7, #0
 8107b56:	d04e      	beq.n	8107bf6 <HAL_SPI_TransmitReceive+0x462>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8107b58:	46b1      	mov	r9, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8107b5a:	f248 0a08 	movw	sl, #32776	; 0x8008
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107b5e:	b306      	cbz	r6, 8107ba2 <HAL_SPI_TransmitReceive+0x40e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107b60:	696b      	ldr	r3, [r5, #20]
 8107b62:	0799      	lsls	r1, r3, #30
 8107b64:	d50d      	bpl.n	8107b82 <HAL_SPI_TransmitReceive+0x3ee>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8107b66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8107b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8107b6c:	622a      	str	r2, [r5, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8107b6e:	65e3      	str	r3, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8107b70:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8107b74:	3b01      	subs	r3, #1
 8107b76:	b29b      	uxth	r3, r3
 8107b78:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8107b7c:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8107b80:	b2b6      	uxth	r6, r6
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8107b82:	696b      	ldr	r3, [r5, #20]
 8107b84:	ea13 0f0a 	tst.w	r3, sl
 8107b88:	d002      	beq.n	8107b90 <HAL_SPI_TransmitReceive+0x3fc>
 8107b8a:	f1b9 0f00 	cmp.w	r9, #0
 8107b8e:	d110      	bne.n	8107bb2 <HAL_SPI_TransmitReceive+0x41e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107b90:	f7fa ffb4 	bl	8102afc <HAL_GetTick>
 8107b94:	eba0 0008 	sub.w	r0, r0, r8
 8107b98:	4287      	cmp	r7, r0
 8107b9a:	f67f af0b 	bls.w	81079b4 <HAL_SPI_TransmitReceive+0x220>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107b9e:	6825      	ldr	r5, [r4, #0]
 8107ba0:	e7dd      	b.n	8107b5e <HAL_SPI_TransmitReceive+0x3ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8107ba2:	f1b9 0f00 	cmp.w	r9, #0
 8107ba6:	d015      	beq.n	8107bd4 <HAL_SPI_TransmitReceive+0x440>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107ba8:	696b      	ldr	r3, [r5, #20]
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8107baa:	696b      	ldr	r3, [r5, #20]
 8107bac:	ea13 0f0a 	tst.w	r3, sl
 8107bb0:	d0ee      	beq.n	8107b90 <HAL_SPI_TransmitReceive+0x3fc>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107bb2:	6b29      	ldr	r1, [r5, #48]	; 0x30
        hspi->RxXferCount --;
 8107bb4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107bb8:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount --;
 8107bba:	3b01      	subs	r3, #1
 8107bbc:	b29b      	uxth	r3, r3
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107bbe:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 8107bc2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8107bc6:	f8b4 906a 	ldrh.w	r9, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8107bca:	6662      	str	r2, [r4, #100]	; 0x64
        initial_RxXferCount = hspi->RxXferCount;
 8107bcc:	fa1f f989 	uxth.w	r9, r9
 8107bd0:	e7de      	b.n	8107b90 <HAL_SPI_TransmitReceive+0x3fc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107bd2:	6825      	ldr	r5, [r4, #0]
 8107bd4:	696b      	ldr	r3, [r5, #20]
 8107bd6:	071b      	lsls	r3, r3, #28
 8107bd8:	f53f ae5f 	bmi.w	810789a <HAL_SPI_TransmitReceive+0x106>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107bdc:	f7fa ff8e 	bl	8102afc <HAL_GetTick>
 8107be0:	eba0 0008 	sub.w	r0, r0, r8
 8107be4:	4287      	cmp	r7, r0
 8107be6:	d8f4      	bhi.n	8107bd2 <HAL_SPI_TransmitReceive+0x43e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8107be8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8107bec:	f043 0320 	orr.w	r3, r3, #32
 8107bf0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8107bf4:	e651      	b.n	810789a <HAL_SPI_TransmitReceive+0x106>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8107bf6:	696b      	ldr	r3, [r5, #20]
 8107bf8:	0799      	lsls	r1, r3, #30
 8107bfa:	d50c      	bpl.n	8107c16 <HAL_SPI_TransmitReceive+0x482>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8107bfc:	464a      	mov	r2, r9
 8107bfe:	f852 3b04 	ldr.w	r3, [r2], #4
 8107c02:	622b      	str	r3, [r5, #32]
        hspi->TxXferCount --;
 8107c04:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8107c08:	65e2      	str	r2, [r4, #92]	; 0x5c
        hspi->TxXferCount --;
 8107c0a:	3b01      	subs	r3, #1
 8107c0c:	b29b      	uxth	r3, r3
 8107c0e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8107c12:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8107c16:	696a      	ldr	r2, [r5, #20]
 8107c18:	f248 0308 	movw	r3, #32776	; 0x8008
 8107c1c:	421a      	tst	r2, r3
 8107c1e:	d00c      	beq.n	8107c3a <HAL_SPI_TransmitReceive+0x4a6>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107c20:	6b29      	ldr	r1, [r5, #48]	; 0x30
        hspi->RxXferCount --;
 8107c22:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107c26:	4652      	mov	r2, sl
        hspi->RxXferCount --;
 8107c28:	3b01      	subs	r3, #1
 8107c2a:	b29b      	uxth	r3, r3
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107c2c:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 8107c30:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8107c34:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8107c38:	6662      	str	r2, [r4, #100]	; 0x64
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107c3a:	f7fa ff5f 	bl	8102afc <HAL_GetTick>
        SPI_CloseTransfer(hspi);
 8107c3e:	e6b9      	b.n	81079b4 <HAL_SPI_TransmitReceive+0x220>
 8107c40:	1c7a      	adds	r2, r7, #1
 8107c42:	f43f ae21 	beq.w	8107888 <HAL_SPI_TransmitReceive+0xf4>
 8107c46:	2f00      	cmp	r7, #0
 8107c48:	d1c4      	bne.n	8107bd4 <HAL_SPI_TransmitReceive+0x440>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8107c4a:	696b      	ldr	r3, [r5, #20]
 8107c4c:	0718      	lsls	r0, r3, #28
 8107c4e:	f53f ae24 	bmi.w	810789a <HAL_SPI_TransmitReceive+0x106>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107c52:	f7fa ff53 	bl	8102afc <HAL_GetTick>
 8107c56:	e7c7      	b.n	8107be8 <HAL_SPI_TransmitReceive+0x454>

08107c58 <HAL_SPI_Receive>:
{
 8107c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107c5c:	4698      	mov	r8, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8107c5e:	6843      	ldr	r3, [r0, #4]
 8107c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
{
 8107c64:	b082      	sub	sp, #8
 8107c66:	4604      	mov	r4, r0
 8107c68:	4616      	mov	r6, r2
 8107c6a:	460d      	mov	r5, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8107c6c:	f000 808b 	beq.w	8107d86 <HAL_SPI_Receive+0x12e>
  __HAL_LOCK(hspi);
 8107c70:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8107c74:	2b01      	cmp	r3, #1
 8107c76:	f000 809c 	beq.w	8107db2 <HAL_SPI_Receive+0x15a>
 8107c7a:	2301      	movs	r3, #1
 8107c7c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8107c80:	6827      	ldr	r7, [r4, #0]
  tickstart = HAL_GetTick();
 8107c82:	f7fa ff3b 	bl	8102afc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8107c86:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8107c8a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8107c8c:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8107c8e:	fa5f f983 	uxtb.w	r9, r3
 8107c92:	d16f      	bne.n	8107d74 <HAL_SPI_Receive+0x11c>
  if ((pData == NULL) || (Size == 0UL))
 8107c94:	2d00      	cmp	r5, #0
 8107c96:	f000 8085 	beq.w	8107da4 <HAL_SPI_Receive+0x14c>
 8107c9a:	2e00      	cmp	r6, #0
 8107c9c:	f000 8082 	beq.w	8107da4 <HAL_SPI_Receive+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8107ca0:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8107ca2:	6665      	str	r5, [r4, #100]	; 0x64
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8107ca4:	2300      	movs	r3, #0
    SPI_1LINE_RX(hspi);
 8107ca6:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = NULL;
 8107ca8:	65e3      	str	r3, [r4, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8107caa:	2104      	movs	r1, #4
 8107cac:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8107cb0:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8107cb4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->RxXferCount = Size;
 8107cb8:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8107cbc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 8107cc0:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  hspi->TxXferSize  = (uint16_t) 0UL;
 8107cc4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    SPI_1LINE_RX(hspi);
 8107cc8:	bf08      	it	eq
 8107cca:	682b      	ldreq	r3, [r5, #0]
  hspi->RxXferSize  = Size;
 8107ccc:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
    SPI_1LINE_RX(hspi);
 8107cd0:	bf04      	itt	eq
 8107cd2:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 8107cd6:	602b      	streq	r3, [r5, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8107cd8:	686b      	ldr	r3, [r5, #4]
 8107cda:	0c1b      	lsrs	r3, r3, #16
 8107cdc:	041b      	lsls	r3, r3, #16
 8107cde:	4333      	orrs	r3, r6
 8107ce0:	606b      	str	r3, [r5, #4]
  __HAL_SPI_ENABLE(hspi);
 8107ce2:	682b      	ldr	r3, [r5, #0]
 8107ce4:	f043 0301 	orr.w	r3, r3, #1
 8107ce8:	602b      	str	r3, [r5, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8107cea:	6863      	ldr	r3, [r4, #4]
 8107cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    SPI_1LINE_RX(hspi);
 8107cf0:	4629      	mov	r1, r5
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8107cf2:	f000 809b 	beq.w	8107e2c <HAL_SPI_Receive+0x1d4>
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8107cf6:	68e3      	ldr	r3, [r4, #12]
 8107cf8:	2b0f      	cmp	r3, #15
 8107cfa:	d860      	bhi.n	8107dbe <HAL_SPI_Receive+0x166>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8107cfc:	2b07      	cmp	r3, #7
    while (hspi->RxXferCount > 0UL)
 8107cfe:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107d02:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8107d04:	f200 80db 	bhi.w	8107ebe <HAL_SPI_Receive+0x266>
    while (hspi->RxXferCount > 0UL)
 8107d08:	2b00      	cmp	r3, #0
 8107d0a:	d07b      	beq.n	8107e04 <HAL_SPI_Receive+0x1ac>
 8107d0c:	f1b8 0f00 	cmp.w	r8, #0
 8107d10:	f000 816c 	beq.w	8107fec <HAL_SPI_Receive+0x394>
 8107d14:	f1b8 3fff 	cmp.w	r8, #4294967295
 8107d18:	d011      	beq.n	8107d3e <HAL_SPI_Receive+0xe6>
 8107d1a:	e11c      	b.n	8107f56 <HAL_SPI_Receive+0x2fe>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107d1c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8107d1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8107d20:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107d24:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 8107d28:	3b04      	subs	r3, #4
 8107d2a:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8107d2c:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8107d2e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8107d32:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107d36:	b29b      	uxth	r3, r3
 8107d38:	2b00      	cmp	r3, #0
 8107d3a:	d063      	beq.n	8107e04 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8107d3c:	6821      	ldr	r1, [r4, #0]
 8107d3e:	694b      	ldr	r3, [r1, #20]
 8107d40:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8107d44:	f000 80aa 	beq.w	8107e9c <HAL_SPI_Receive+0x244>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8107d48:	694b      	ldr	r3, [r1, #20]
 8107d4a:	041b      	lsls	r3, r3, #16
 8107d4c:	d4e6      	bmi.n	8107d1c <HAL_SPI_Receive+0xc4>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8107d4e:	694b      	ldr	r3, [r1, #20]
 8107d50:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8107d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107d58:	f240 80a3 	bls.w	8107ea2 <HAL_SPI_Receive+0x24a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107d5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8107d5e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8107d60:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount -= (uint16_t)2UL;
 8107d64:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8107d68:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8107d6a:	3b02      	subs	r3, #2
 8107d6c:	b29b      	uxth	r3, r3
 8107d6e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8107d72:	e7de      	b.n	8107d32 <HAL_SPI_Receive+0xda>
    __HAL_UNLOCK(hspi);
 8107d74:	2300      	movs	r3, #0
 8107d76:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 8107d7a:	f04f 0902 	mov.w	r9, #2
}
 8107d7e:	4648      	mov	r0, r9
 8107d80:	b002      	add	sp, #8
 8107d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8107d86:	6883      	ldr	r3, [r0, #8]
 8107d88:	2b00      	cmp	r3, #0
 8107d8a:	f47f af71 	bne.w	8107c70 <HAL_SPI_Receive+0x18>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8107d8e:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8107d90:	f8cd 8000 	str.w	r8, [sp]
 8107d94:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8107d96:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8107d9a:	460a      	mov	r2, r1
 8107d9c:	f7ff fcfa 	bl	8107794 <HAL_SPI_TransmitReceive>
 8107da0:	4681      	mov	r9, r0
 8107da2:	e7ec      	b.n	8107d7e <HAL_SPI_Receive+0x126>
    __HAL_UNLOCK(hspi);
 8107da4:	2300      	movs	r3, #0
}
 8107da6:	4648      	mov	r0, r9
    __HAL_UNLOCK(hspi);
 8107da8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8107dac:	b002      	add	sp, #8
 8107dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hspi);
 8107db2:	f04f 0902 	mov.w	r9, #2
}
 8107db6:	4648      	mov	r0, r9
 8107db8:	b002      	add	sp, #8
 8107dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (hspi->RxXferCount > 0UL)
 8107dbe:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107dc2:	b29b      	uxth	r3, r3
 8107dc4:	b1f3      	cbz	r3, 8107e04 <HAL_SPI_Receive+0x1ac>
 8107dc6:	f1b8 0f00 	cmp.w	r8, #0
 8107dca:	f000 8151 	beq.w	8108070 <HAL_SPI_Receive+0x418>
 8107dce:	f1b8 3fff 	cmp.w	r8, #4294967295
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8107dd2:	bf18      	it	ne
 8107dd4:	f248 0508 	movwne	r5, #32776	; 0x8008
 8107dd8:	d13e      	bne.n	8107e58 <HAL_SPI_Receive+0x200>
 8107dda:	f248 0608 	movw	r6, #32776	; 0x8008
 8107dde:	696b      	ldr	r3, [r5, #20]
 8107de0:	4233      	tst	r3, r6
 8107de2:	d052      	beq.n	8107e8a <HAL_SPI_Receive+0x232>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107de4:	6b29      	ldr	r1, [r5, #48]	; 0x30
        hspi->RxXferCount--;
 8107de6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8107dec:	3b01      	subs	r3, #1
 8107dee:	b29b      	uxth	r3, r3
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107df0:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount--;
 8107df4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8107df8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8107dfc:	6662      	str	r2, [r4, #100]	; 0x64
    while (hspi->RxXferCount > 0UL)
 8107dfe:	b29b      	uxth	r3, r3
 8107e00:	2b00      	cmp	r3, #0
 8107e02:	d1ec      	bne.n	8107dde <HAL_SPI_Receive+0x186>
  SPI_CloseTransfer(hspi);
 8107e04:	4620      	mov	r0, r4
 8107e06:	f7ff f9ef 	bl	81071e8 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8107e0a:	2301      	movs	r3, #1
 8107e0c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8107e10:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 8107e14:	2300      	movs	r3, #0
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8107e16:	ebb0 0903 	subs.w	r9, r0, r3
 8107e1a:	bf18      	it	ne
 8107e1c:	f04f 0901 	movne.w	r9, #1
}
 8107e20:	4648      	mov	r0, r9
  __HAL_UNLOCK(hspi);
 8107e22:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8107e26:	b002      	add	sp, #8
 8107e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8107e2c:	682b      	ldr	r3, [r5, #0]
 8107e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8107e32:	602b      	str	r3, [r5, #0]
 8107e34:	e75f      	b.n	8107cf6 <HAL_SPI_Receive+0x9e>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8107e38:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8107e3a:	f842 3b04 	str.w	r3, [r2], #4
        hspi->RxXferCount--;
 8107e3e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8107e42:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 8107e44:	3b01      	subs	r3, #1
 8107e46:	b29b      	uxth	r3, r3
 8107e48:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8107e4c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107e50:	b29b      	uxth	r3, r3
 8107e52:	2b00      	cmp	r3, #0
 8107e54:	d0d6      	beq.n	8107e04 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8107e56:	6821      	ldr	r1, [r4, #0]
 8107e58:	694b      	ldr	r3, [r1, #20]
 8107e5a:	422b      	tst	r3, r5
 8107e5c:	d1eb      	bne.n	8107e36 <HAL_SPI_Receive+0x1de>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107e5e:	f7fa fe4d 	bl	8102afc <HAL_GetTick>
 8107e62:	eba0 000a 	sub.w	r0, r0, sl
 8107e66:	4580      	cmp	r8, r0
 8107e68:	d8f0      	bhi.n	8107e4c <HAL_SPI_Receive+0x1f4>
          SPI_CloseTransfer(hspi);
 8107e6a:	4620      	mov	r0, r4
 8107e6c:	f7ff f9bc 	bl	81071e8 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107e70:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 8107e74:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
          hspi->State = HAL_SPI_STATE_READY;
 8107e7a:	2201      	movs	r2, #1
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8107e7c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(hspi);
 8107e80:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
          hspi->State = HAL_SPI_STATE_READY;
 8107e84:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
          return HAL_ERROR;
 8107e88:	e779      	b.n	8107d7e <HAL_SPI_Receive+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107e8a:	f7fa fe37 	bl	8102afc <HAL_GetTick>
    while (hspi->RxXferCount > 0UL)
 8107e8e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107e92:	b29b      	uxth	r3, r3
 8107e94:	2b00      	cmp	r3, #0
 8107e96:	d0b5      	beq.n	8107e04 <HAL_SPI_Receive+0x1ac>
 8107e98:	6825      	ldr	r5, [r4, #0]
 8107e9a:	e7a0      	b.n	8107dde <HAL_SPI_Receive+0x186>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107e9c:	f7fa fe2e 	bl	8102afc <HAL_GetTick>
 8107ea0:	e747      	b.n	8107d32 <HAL_SPI_Receive+0xda>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107ea4:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8107ea8:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8107eaa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8107eb0:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107eb2:	3201      	adds	r2, #1
          hspi->RxXferCount--;
 8107eb4:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107eb6:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8107eb8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8107ebc:	e739      	b.n	8107d32 <HAL_SPI_Receive+0xda>
    while (hspi->RxXferCount > 0UL)
 8107ebe:	2b00      	cmp	r3, #0
 8107ec0:	d0a0      	beq.n	8107e04 <HAL_SPI_Receive+0x1ac>
 8107ec2:	f1b8 0f00 	cmp.w	r8, #0
 8107ec6:	f000 80bb 	beq.w	8108040 <HAL_SPI_Receive+0x3e8>
 8107eca:	f1b8 3fff 	cmp.w	r8, #4294967295
 8107ece:	d011      	beq.n	8107ef4 <HAL_SPI_Receive+0x29c>
 8107ed0:	e067      	b.n	8107fa2 <HAL_SPI_Receive+0x34a>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107ed2:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8107ed4:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8107ed6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107eda:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8107ede:	3b02      	subs	r3, #2
 8107ee0:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8107ee2:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8107ee4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8107ee8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107eec:	b29b      	uxth	r3, r3
 8107eee:	2b00      	cmp	r3, #0
 8107ef0:	d088      	beq.n	8107e04 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8107ef2:	6821      	ldr	r1, [r4, #0]
 8107ef4:	694b      	ldr	r3, [r1, #20]
 8107ef6:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8107efa:	d00e      	beq.n	8107f1a <HAL_SPI_Receive+0x2c2>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8107efc:	694b      	ldr	r3, [r1, #20]
 8107efe:	041d      	lsls	r5, r3, #16
 8107f00:	d4e7      	bmi.n	8107ed2 <HAL_SPI_Receive+0x27a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8107f04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8107f06:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8107f0a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8107f0e:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8107f10:	3b01      	subs	r3, #1
 8107f12:	b29b      	uxth	r3, r3
 8107f14:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8107f18:	e7e6      	b.n	8107ee8 <HAL_SPI_Receive+0x290>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8107f1a:	f7fa fdef 	bl	8102afc <HAL_GetTick>
 8107f1e:	e7e3      	b.n	8107ee8 <HAL_SPI_Receive+0x290>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8107f20:	694b      	ldr	r3, [r1, #20]
 8107f22:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8107f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107f2a:	f200 80cb 	bhi.w	81080c4 <HAL_SPI_Receive+0x46c>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8107f2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107f30:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 8107f34:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8107f36:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107f3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8107f3c:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107f3e:	3201      	adds	r2, #1
          hspi->RxXferCount--;
 8107f40:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8107f42:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8107f44:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8107f48:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107f4c:	b29b      	uxth	r3, r3
 8107f4e:	2b00      	cmp	r3, #0
 8107f50:	f43f af58 	beq.w	8107e04 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8107f54:	6821      	ldr	r1, [r4, #0]
 8107f56:	694b      	ldr	r3, [r1, #20]
 8107f58:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8107f5c:	f000 80aa 	beq.w	81080b4 <HAL_SPI_Receive+0x45c>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8107f60:	694b      	ldr	r3, [r1, #20]
 8107f62:	041e      	lsls	r6, r3, #16
 8107f64:	d5dc      	bpl.n	8107f20 <HAL_SPI_Receive+0x2c8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8107f68:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8107f6a:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 8107f6e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8107f72:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8107f74:	3b04      	subs	r3, #4
 8107f76:	b29b      	uxth	r3, r3
 8107f78:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8107f7c:	e7e4      	b.n	8107f48 <HAL_SPI_Receive+0x2f0>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8107f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8107f80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8107f82:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8107f86:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8107f8a:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 8107f8c:	3b01      	subs	r3, #1
 8107f8e:	b29b      	uxth	r3, r3
 8107f90:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8107f94:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107f98:	b29b      	uxth	r3, r3
 8107f9a:	2b00      	cmp	r3, #0
 8107f9c:	f43f af32 	beq.w	8107e04 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8107fa0:	6821      	ldr	r1, [r4, #0]
 8107fa2:	694b      	ldr	r3, [r1, #20]
 8107fa4:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8107fa8:	d07c      	beq.n	81080a4 <HAL_SPI_Receive+0x44c>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8107faa:	694b      	ldr	r3, [r1, #20]
 8107fac:	0418      	lsls	r0, r3, #16
 8107fae:	d5e6      	bpl.n	8107f7e <HAL_SPI_Receive+0x326>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107fb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8107fb2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8107fb4:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 8107fb8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8107fbc:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8107fbe:	3b02      	subs	r3, #2
 8107fc0:	b29b      	uxth	r3, r3
 8107fc2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8107fc6:	e7e5      	b.n	8107f94 <HAL_SPI_Receive+0x33c>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107fc8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8107fca:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8107fcc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8107fd0:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 8107fd4:	3b04      	subs	r3, #4
 8107fd6:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8107fd8:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8107fda:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8107fde:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8107fe2:	b29b      	uxth	r3, r3
 8107fe4:	2b00      	cmp	r3, #0
 8107fe6:	f43f af0d 	beq.w	8107e04 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8107fea:	6821      	ldr	r1, [r4, #0]
 8107fec:	694b      	ldr	r3, [r1, #20]
 8107fee:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8107ff2:	d054      	beq.n	810809e <HAL_SPI_Receive+0x446>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8107ff4:	694b      	ldr	r3, [r1, #20]
 8107ff6:	041b      	lsls	r3, r3, #16
 8107ff8:	d4e6      	bmi.n	8107fc8 <HAL_SPI_Receive+0x370>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8107ffa:	694b      	ldr	r3, [r1, #20]
 8107ffc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8108000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108004:	d96a      	bls.n	81080dc <HAL_SPI_Receive+0x484>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8108006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8108008:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 810800a:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount -= (uint16_t)2UL;
 810800e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8108012:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8108014:	3b02      	subs	r3, #2
 8108016:	b29b      	uxth	r3, r3
 8108018:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 810801c:	e7df      	b.n	8107fde <HAL_SPI_Receive+0x386>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810801e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8108020:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8108022:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8108026:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810802a:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 810802c:	3b01      	subs	r3, #1
 810802e:	b29b      	uxth	r3, r3
 8108030:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8108034:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8108038:	b29b      	uxth	r3, r3
 810803a:	2b00      	cmp	r3, #0
 810803c:	f43f aee2 	beq.w	8107e04 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8108040:	696b      	ldr	r3, [r5, #20]
 8108042:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8108046:	d02a      	beq.n	810809e <HAL_SPI_Receive+0x446>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8108048:	696b      	ldr	r3, [r5, #20]
 810804a:	041a      	lsls	r2, r3, #16
 810804c:	d5e7      	bpl.n	810801e <HAL_SPI_Receive+0x3c6>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810804e:	6b29      	ldr	r1, [r5, #48]	; 0x30
          hspi->RxXferCount -= (uint16_t)2UL;
 8108050:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8108054:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8108056:	3b02      	subs	r3, #2
 8108058:	b29b      	uxth	r3, r3
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810805a:	f842 1b04 	str.w	r1, [r2], #4
          hspi->RxXferCount -= (uint16_t)2UL;
 810805e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 8108062:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8108066:	6662      	str	r2, [r4, #100]	; 0x64
    while (hspi->RxXferCount > 0UL)
 8108068:	b29b      	uxth	r3, r3
 810806a:	2b00      	cmp	r3, #0
 810806c:	d1e8      	bne.n	8108040 <HAL_SPI_Receive+0x3e8>
 810806e:	e6c9      	b.n	8107e04 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8108070:	f248 0108 	movw	r1, #32776	; 0x8008
 8108074:	e010      	b.n	8108098 <HAL_SPI_Receive+0x440>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8108076:	6b28      	ldr	r0, [r5, #48]	; 0x30
        hspi->RxXferCount--;
 8108078:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810807c:	6e62      	ldr	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 810807e:	3b01      	subs	r3, #1
 8108080:	b29b      	uxth	r3, r3
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8108082:	f842 0b04 	str.w	r0, [r2], #4
        hspi->RxXferCount--;
 8108086:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->RxXferCount > 0UL)
 810808a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810808e:	6662      	str	r2, [r4, #100]	; 0x64
    while (hspi->RxXferCount > 0UL)
 8108090:	b29b      	uxth	r3, r3
 8108092:	2b00      	cmp	r3, #0
 8108094:	f43f aeb6 	beq.w	8107e04 <HAL_SPI_Receive+0x1ac>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8108098:	696b      	ldr	r3, [r5, #20]
 810809a:	420b      	tst	r3, r1
 810809c:	d1eb      	bne.n	8108076 <HAL_SPI_Receive+0x41e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810809e:	f7fa fd2d 	bl	8102afc <HAL_GetTick>
 81080a2:	e6e2      	b.n	8107e6a <HAL_SPI_Receive+0x212>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81080a4:	f7fa fd2a 	bl	8102afc <HAL_GetTick>
 81080a8:	eba0 000a 	sub.w	r0, r0, sl
 81080ac:	4580      	cmp	r8, r0
 81080ae:	f67f aedc 	bls.w	8107e6a <HAL_SPI_Receive+0x212>
 81080b2:	e76f      	b.n	8107f94 <HAL_SPI_Receive+0x33c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81080b4:	f7fa fd22 	bl	8102afc <HAL_GetTick>
 81080b8:	eba0 000a 	sub.w	r0, r0, sl
 81080bc:	4580      	cmp	r8, r0
 81080be:	f67f aed4 	bls.w	8107e6a <HAL_SPI_Receive+0x212>
 81080c2:	e741      	b.n	8107f48 <HAL_SPI_Receive+0x2f0>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81080c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81080c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 81080c8:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount -= (uint16_t)2UL;
 81080cc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81080d0:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 81080d2:	3b02      	subs	r3, #2
 81080d4:	b29b      	uxth	r3, r3
 81080d6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 81080da:	e735      	b.n	8107f48 <HAL_SPI_Receive+0x2f0>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81080dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81080de:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
 81080e2:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 81080e4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81080e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 81080ea:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81080ec:	3201      	adds	r2, #1
          hspi->RxXferCount--;
 81080ee:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81080f0:	6662      	str	r2, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 81080f2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 81080f6:	e772      	b.n	8107fde <HAL_SPI_Receive+0x386>

081080f8 <HAL_SPI_TxCpltCallback>:
 81080f8:	4770      	bx	lr
 81080fa:	bf00      	nop

081080fc <HAL_SPI_RxCpltCallback>:
 81080fc:	4770      	bx	lr
 81080fe:	bf00      	nop

08108100 <HAL_SPI_TxRxCpltCallback>:
 8108100:	4770      	bx	lr
 8108102:	bf00      	nop

08108104 <HAL_SPI_ErrorCallback>:
 8108104:	4770      	bx	lr
 8108106:	bf00      	nop

08108108 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 8108108:	6803      	ldr	r3, [r0, #0]
{
 810810a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 810810e:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8108110:	695a      	ldr	r2, [r3, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8108112:	689f      	ldr	r7, [r3, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 8108114:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
 8108118:	ea01 0502 	and.w	r5, r1, r2
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810811c:	f005 0c64 	and.w	ip, r5, #100	; 0x64
 8108120:	f1bc 0f04 	cmp.w	ip, #4
{
 8108124:	4604      	mov	r4, r0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8108126:	d02f      	beq.n	8108188 <HAL_SPI_IRQHandler+0x80>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8108128:	f005 0045 	and.w	r0, r5, #69	; 0x45
 810812c:	2801      	cmp	r0, #1
 810812e:	d034      	beq.n	810819a <HAL_SPI_IRQHandler+0x92>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8108130:	f005 0026 	and.w	r0, r5, #38	; 0x26
 8108134:	2802      	cmp	r0, #2
 8108136:	f000 80e1 	beq.w	81082fc <HAL_SPI_IRQHandler+0x1f4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810813a:	0728      	lsls	r0, r5, #28
 810813c:	d571      	bpl.n	8108222 <HAL_SPI_IRQHandler+0x11a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810813e:	699a      	ldr	r2, [r3, #24]
 8108140:	f042 0208 	orr.w	r2, r2, #8
 8108144:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8108146:	699a      	ldr	r2, [r3, #24]
 8108148:	f042 0210 	orr.w	r2, r2, #16
 810814c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810814e:	699a      	ldr	r2, [r3, #24]
 8108150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108154:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8108156:	691a      	ldr	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8108158:	f417 4f40 	tst.w	r7, #49152	; 0xc000
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810815c:	f022 0208 	bic.w	r2, r2, #8
 8108160:	b2f6      	uxtb	r6, r6
 8108162:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8108164:	d023      	beq.n	81081ae <HAL_SPI_IRQHandler+0xa6>
 8108166:	2e04      	cmp	r6, #4
 8108168:	f000 80e1 	beq.w	810832e <HAL_SPI_IRQHandler+0x226>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810816c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 810816e:	69d2      	ldr	r2, [r2, #28]
 8108170:	b1ea      	cbz	r2, 81081ae <HAL_SPI_IRQHandler+0xa6>
 8108172:	2e03      	cmp	r6, #3
 8108174:	d051      	beq.n	810821a <HAL_SPI_IRQHandler+0x112>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8108176:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8108178:	69d2      	ldr	r2, [r2, #28]
 810817a:	b1c2      	cbz	r2, 81081ae <HAL_SPI_IRQHandler+0xa6>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810817c:	2e05      	cmp	r6, #5
 810817e:	d114      	bne.n	81081aa <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxRxCpltCallback(hspi);
 8108180:	4620      	mov	r0, r4
 8108182:	f7ff ffbd 	bl	8108100 <HAL_SPI_TxRxCpltCallback>
 8108186:	e010      	b.n	81081aa <HAL_SPI_IRQHandler+0xa2>
    hspi->TxISR(hspi);
 8108188:	6f43      	ldr	r3, [r0, #116]	; 0x74
 810818a:	4798      	blx	r3
    hspi->RxISR(hspi);
 810818c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 810818e:	4620      	mov	r0, r4
 8108190:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8108192:	f005 0345 	and.w	r3, r5, #69	; 0x45
 8108196:	2b01      	cmp	r3, #1
 8108198:	d102      	bne.n	81081a0 <HAL_SPI_IRQHandler+0x98>
    hspi->RxISR(hspi);
 810819a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 810819c:	4620      	mov	r0, r4
 810819e:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 81081a0:	f005 0526 	and.w	r5, r5, #38	; 0x26
 81081a4:	2d02      	cmp	r5, #2
 81081a6:	f000 80a9 	beq.w	81082fc <HAL_SPI_IRQHandler+0x1f4>
}
 81081aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81081ae:	689a      	ldr	r2, [r3, #8]
 81081b0:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 81081b4:	d11f      	bne.n	81081f6 <HAL_SPI_IRQHandler+0xee>
        while (hspi->RxXferCount != 0UL)
 81081b6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 81081ba:	b292      	uxth	r2, r2
 81081bc:	b1da      	cbz	r2, 81081f6 <HAL_SPI_IRQHandler+0xee>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81081be:	6e61      	ldr	r1, [r4, #100]	; 0x64
 81081c0:	e00e      	b.n	81081e0 <HAL_SPI_IRQHandler+0xd8>
 81081c2:	6822      	ldr	r2, [r4, #0]
 81081c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81081c6:	f841 2b04 	str.w	r2, [r1], #4
            hspi->pRxBuffPtr += sizeof(uint32_t);
 81081ca:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 81081cc:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 81081d0:	3a01      	subs	r2, #1
 81081d2:	b292      	uxth	r2, r2
 81081d4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 81081d8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 81081dc:	b292      	uxth	r2, r2
 81081de:	b152      	cbz	r2, 81081f6 <HAL_SPI_IRQHandler+0xee>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81081e0:	68e2      	ldr	r2, [r4, #12]
 81081e2:	2a0f      	cmp	r2, #15
 81081e4:	d8ed      	bhi.n	81081c2 <HAL_SPI_IRQHandler+0xba>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81081e6:	2a07      	cmp	r2, #7
 81081e8:	f240 8094 	bls.w	8108314 <HAL_SPI_IRQHandler+0x20c>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81081ec:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 81081ee:	f821 2b02 	strh.w	r2, [r1], #2
            hspi->pRxBuffPtr += sizeof(uint16_t);
 81081f2:	6661      	str	r1, [r4, #100]	; 0x64
 81081f4:	e7ea      	b.n	81081cc <HAL_SPI_IRQHandler+0xc4>
      SPI_CloseTransfer(hspi);
 81081f6:	4620      	mov	r0, r4
 81081f8:	f7fe fff6 	bl	81071e8 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 81081fc:	2301      	movs	r3, #1
 81081fe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8108202:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8108206:	2b00      	cmp	r3, #0
 8108208:	f040 8081 	bne.w	810830e <HAL_SPI_IRQHandler+0x206>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810820c:	2e05      	cmp	r6, #5
 810820e:	d0b7      	beq.n	8108180 <HAL_SPI_IRQHandler+0x78>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8108210:	2e04      	cmp	r6, #4
 8108212:	f000 8091 	beq.w	8108338 <HAL_SPI_IRQHandler+0x230>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8108216:	2e03      	cmp	r6, #3
 8108218:	d1c7      	bne.n	81081aa <HAL_SPI_IRQHandler+0xa2>
      HAL_SPI_TxCpltCallback(hspi);
 810821a:	4620      	mov	r0, r4
 810821c:	f7ff ff6c 	bl	81080f8 <HAL_SPI_TxCpltCallback>
 8108220:	e7c3      	b.n	81081aa <HAL_SPI_IRQHandler+0xa2>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8108222:	0510      	lsls	r0, r2, #20
 8108224:	d501      	bpl.n	810822a <HAL_SPI_IRQHandler+0x122>
 8108226:	070a      	lsls	r2, r1, #28
 8108228:	d47c      	bmi.n	8108324 <HAL_SPI_IRQHandler+0x21c>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810822a:	f415 7f58 	tst.w	r5, #864	; 0x360
 810822e:	d0bc      	beq.n	81081aa <HAL_SPI_IRQHandler+0xa2>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8108230:	066e      	lsls	r6, r5, #25
 8108232:	d509      	bpl.n	8108248 <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8108234:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8108238:	f042 0204 	orr.w	r2, r2, #4
 810823c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8108240:	699a      	ldr	r2, [r3, #24]
 8108242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8108246:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8108248:	05a8      	lsls	r0, r5, #22
 810824a:	d509      	bpl.n	8108260 <HAL_SPI_IRQHandler+0x158>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810824c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8108250:	f042 0201 	orr.w	r2, r2, #1
 8108254:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8108258:	699a      	ldr	r2, [r3, #24]
 810825a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810825e:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8108260:	05e9      	lsls	r1, r5, #23
 8108262:	d509      	bpl.n	8108278 <HAL_SPI_IRQHandler+0x170>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8108264:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8108268:	f042 0208 	orr.w	r2, r2, #8
 810826c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8108270:	699a      	ldr	r2, [r3, #24]
 8108272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8108276:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8108278:	06aa      	lsls	r2, r5, #26
 810827a:	d509      	bpl.n	8108290 <HAL_SPI_IRQHandler+0x188>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810827c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8108280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8108284:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8108288:	699a      	ldr	r2, [r3, #24]
 810828a:	f042 0220 	orr.w	r2, r2, #32
 810828e:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8108290:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8108294:	2a00      	cmp	r2, #0
 8108296:	d088      	beq.n	81081aa <HAL_SPI_IRQHandler+0xa2>
      __HAL_SPI_DISABLE(hspi);
 8108298:	681a      	ldr	r2, [r3, #0]
 810829a:	f022 0201 	bic.w	r2, r2, #1
 810829e:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 81082a0:	691a      	ldr	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81082a2:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 81082a6:	f422 725a 	bic.w	r2, r2, #872	; 0x368
 81082aa:	f022 0203 	bic.w	r2, r2, #3
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81082ae:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 81082b2:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81082b4:	d127      	bne.n	8108306 <HAL_SPI_IRQHandler+0x1fe>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81082b6:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 81082b8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81082ba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81082be:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 81082c0:	b150      	cbz	r0, 81082d8 <HAL_SPI_IRQHandler+0x1d0>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 81082c2:	4b1f      	ldr	r3, [pc, #124]	; (8108340 <HAL_SPI_IRQHandler+0x238>)
 81082c4:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 81082c6:	f7fb fd3d 	bl	8103d44 <HAL_DMA_Abort_IT>
 81082ca:	b128      	cbz	r0, 81082d8 <HAL_SPI_IRQHandler+0x1d0>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81082cc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 81082d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81082d4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 81082d8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 81082da:	2800      	cmp	r0, #0
 81082dc:	f43f af65 	beq.w	81081aa <HAL_SPI_IRQHandler+0xa2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 81082e0:	4b17      	ldr	r3, [pc, #92]	; (8108340 <HAL_SPI_IRQHandler+0x238>)
 81082e2:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 81082e4:	f7fb fd2e 	bl	8103d44 <HAL_DMA_Abort_IT>
 81082e8:	2800      	cmp	r0, #0
 81082ea:	f43f af5e 	beq.w	81081aa <HAL_SPI_IRQHandler+0xa2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 81082ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 81082f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81082f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 81082fa:	e756      	b.n	81081aa <HAL_SPI_IRQHandler+0xa2>
    hspi->TxISR(hspi);
 81082fc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 81082fe:	4620      	mov	r0, r4
}
 8108300:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8108304:	4718      	bx	r3
        hspi->State = HAL_SPI_STATE_READY;
 8108306:	2301      	movs	r3, #1
 8108308:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810830c:	4620      	mov	r0, r4
 810830e:	f7ff fef9 	bl	8108104 <HAL_SPI_ErrorCallback>
 8108312:	e74a      	b.n	81081aa <HAL_SPI_IRQHandler+0xa2>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8108314:	6822      	ldr	r2, [r4, #0]
 8108316:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 810831a:	700a      	strb	r2, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810831c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 810831e:	3101      	adds	r1, #1
 8108320:	6661      	str	r1, [r4, #100]	; 0x64
 8108322:	e753      	b.n	81081cc <HAL_SPI_IRQHandler+0xc4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8108324:	699a      	ldr	r2, [r3, #24]
 8108326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810832a:	619a      	str	r2, [r3, #24]
    return;
 810832c:	e73d      	b.n	81081aa <HAL_SPI_IRQHandler+0xa2>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810832e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8108330:	69d2      	ldr	r2, [r2, #28]
 8108332:	2a00      	cmp	r2, #0
 8108334:	f43f af3b 	beq.w	81081ae <HAL_SPI_IRQHandler+0xa6>
      HAL_SPI_RxCpltCallback(hspi);
 8108338:	4620      	mov	r0, r4
 810833a:	f7ff fedf 	bl	81080fc <HAL_SPI_RxCpltCallback>
 810833e:	e734      	b.n	81081aa <HAL_SPI_IRQHandler+0xa2>
 8108340:	08108345 	.word	0x08108345

08108344 <SPI_DMAAbortOnError>:
{
 8108344:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8108346:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8108348:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 810834a:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 810834c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8108350:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8108354:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8108358:	f7ff fed4 	bl	8108104 <HAL_SPI_ErrorCallback>
}
 810835c:	bd08      	pop	{r3, pc}
 810835e:	bf00      	nop

08108360 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8108360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8108362:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8108366:	2e20      	cmp	r6, #32
 8108368:	d13f      	bne.n	81083ea <HAL_UART_Transmit_DMA+0x8a>
  {
    if ((pData == NULL) || (Size == 0U))
 810836a:	b389      	cbz	r1, 81083d0 <HAL_UART_Transmit_DMA+0x70>
 810836c:	b382      	cbz	r2, 81083d0 <HAL_UART_Transmit_DMA+0x70>
 810836e:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8108370:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 8108374:	2801      	cmp	r0, #1
 8108376:	d038      	beq.n	81083ea <HAL_UART_Transmit_DMA+0x8a>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 8108378:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 810837a:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810837e:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8108380:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108382:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108384:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    huart->pTxBuffPtr  = pData;
 8108388:	6521      	str	r1, [r4, #80]	; 0x50
    huart->TxXferSize  = Size;
 810838a:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    __HAL_LOCK(huart);
 810838e:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108392:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8108396:	b1e8      	cbz	r0, 81083d4 <HAL_UART_Transmit_DMA+0x74>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8108398:	f8df c054 	ldr.w	ip, [pc, #84]	; 81083f0 <HAL_UART_Transmit_DMA+0x90>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810839c:	6507      	str	r7, [r0, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810839e:	4613      	mov	r3, r2
 81083a0:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 81083a2:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 81083a6:	f8df c04c 	ldr.w	ip, [pc, #76]	; 81083f4 <HAL_UART_Transmit_DMA+0x94>
 81083aa:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 81083ae:	f8df c048 	ldr.w	ip, [pc, #72]	; 81083f8 <HAL_UART_Transmit_DMA+0x98>
 81083b2:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 81083b6:	3228      	adds	r2, #40	; 0x28
 81083b8:	f7fb f83a 	bl	8103430 <HAL_DMA_Start_IT>
 81083bc:	b150      	cbz	r0, 81083d4 <HAL_UART_Transmit_DMA+0x74>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 81083be:	2310      	movs	r3, #16

        __HAL_UNLOCK(huart);
 81083c0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 81083c4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 81083c8:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 81083ca:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  }
  else
  {
    return HAL_BUSY;
  }
}
 81083ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 81083d0:	2001      	movs	r0, #1
}
 81083d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 81083d4:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 81083d6:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 81083d8:	2240      	movs	r2, #64	; 0x40
 81083da:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 81083dc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81083e0:	689a      	ldr	r2, [r3, #8]
 81083e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 81083e6:	609a      	str	r2, [r3, #8]
}
 81083e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 81083ea:	2002      	movs	r0, #2
}
 81083ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81083ee:	bf00      	nop
 81083f0:	081084bd 	.word	0x081084bd
 81083f4:	081084ed 	.word	0x081084ed
 81083f8:	08108501 	.word	0x08108501

081083fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 81083fc:	b570      	push	{r4, r5, r6, lr}
 81083fe:	4604      	mov	r4, r0
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8108400:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8108404:	2820      	cmp	r0, #32
 8108406:	d144      	bne.n	8108492 <HAL_UART_Receive_DMA+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8108408:	2900      	cmp	r1, #0
 810840a:	d040      	beq.n	810848e <HAL_UART_Receive_DMA+0x92>
 810840c:	2a00      	cmp	r2, #0
 810840e:	d03e      	beq.n	810848e <HAL_UART_Receive_DMA+0x92>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8108410:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8108414:	2b01      	cmp	r3, #1
 8108416:	d03c      	beq.n	8108492 <HAL_UART_Receive_DMA+0x96>

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8108418:	6825      	ldr	r5, [r4, #0]
 810841a:	4b24      	ldr	r3, [pc, #144]	; (81084ac <HAL_UART_Receive_DMA+0xb0>)
    __HAL_LOCK(huart);
 810841c:	2001      	movs	r0, #1
 810841e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8108422:	429d      	cmp	r5, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108424:	f04f 0000 	mov.w	r0, #0
 8108428:	66e0      	str	r0, [r4, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 810842a:	d006      	beq.n	810843a <HAL_UART_Receive_DMA+0x3e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 810842c:	686b      	ldr	r3, [r5, #4]
 810842e:	021b      	lsls	r3, r3, #8
 8108430:	d503      	bpl.n	810843a <HAL_UART_Receive_DMA+0x3e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8108432:	682b      	ldr	r3, [r5, #0]
 8108434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8108438:	602b      	str	r3, [r5, #0]
  huart->RxXferSize = Size;

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->RxState = HAL_UART_STATE_BUSY_RX;

  if (huart->hdmarx != NULL)
 810843a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  huart->pRxBuffPtr = pData;
 810843c:	65a1      	str	r1, [r4, #88]	; 0x58
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810843e:	2600      	movs	r6, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8108440:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108442:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  huart->RxXferSize = Size;
 8108446:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810844a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  if (huart->hdmarx != NULL)
 810844e:	b170      	cbz	r0, 810846e <HAL_UART_Receive_DMA+0x72>

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8108450:	4613      	mov	r3, r2
 8108452:	460a      	mov	r2, r1
 8108454:	f105 0124 	add.w	r1, r5, #36	; 0x24
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8108458:	4d15      	ldr	r5, [pc, #84]	; (81084b0 <HAL_UART_Receive_DMA+0xb4>)
 810845a:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810845c:	4d15      	ldr	r5, [pc, #84]	; (81084b4 <HAL_UART_Receive_DMA+0xb8>)
 810845e:	6405      	str	r5, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8108460:	4d15      	ldr	r5, [pc, #84]	; (81084b8 <HAL_UART_Receive_DMA+0xbc>)
    huart->hdmarx->XferAbortCallback = NULL;
 8108462:	6506      	str	r6, [r0, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8108464:	64c5      	str	r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8108466:	f7fa ffe3 	bl	8103430 <HAL_DMA_Start_IT>
 810846a:	b9a0      	cbnz	r0, 8108496 <HAL_UART_Receive_DMA+0x9a>
    }
  }
  __HAL_UNLOCK(huart);

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810846c:	6825      	ldr	r5, [r4, #0]
  __HAL_UNLOCK(huart);
 810846e:	2000      	movs	r0, #0
 8108470:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108474:	682b      	ldr	r3, [r5, #0]
 8108476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810847a:	602b      	str	r3, [r5, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810847c:	68ab      	ldr	r3, [r5, #8]
 810847e:	f043 0301 	orr.w	r3, r3, #1
 8108482:	60ab      	str	r3, [r5, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108484:	68ab      	ldr	r3, [r5, #8]
 8108486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810848a:	60ab      	str	r3, [r5, #8]
}
 810848c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 810848e:	2001      	movs	r0, #1
}
 8108490:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8108492:	2002      	movs	r0, #2
}
 8108494:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8108496:	2210      	movs	r2, #16
      huart->gState = HAL_UART_STATE_READY;
 8108498:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 810849a:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810849e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      return HAL_ERROR;
 81084a2:	2001      	movs	r0, #1
      huart->gState = HAL_UART_STATE_READY;
 81084a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 81084a8:	bd70      	pop	{r4, r5, r6, pc}
 81084aa:	bf00      	nop
 81084ac:	58000c00 	.word	0x58000c00
 81084b0:	081088e1 	.word	0x081088e1
 81084b4:	081088c5 	.word	0x081088c5
 81084b8:	08108501 	.word	0x08108501

081084bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 81084bc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81084be:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81084c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81084c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81084c6:	d00c      	beq.n	81084e2 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81084c8:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 81084ca:	2200      	movs	r2, #0
 81084cc:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81084d0:	689a      	ldr	r2, [r3, #8]
 81084d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81084d6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81084d8:	681a      	ldr	r2, [r3, #0]
 81084da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81084de:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 81084e0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 81084e2:	f7fa f981 	bl	81027e8 <HAL_UART_TxCpltCallback>
}
 81084e6:	bd08      	pop	{r3, pc}

081084e8 <HAL_UART_TxHalfCpltCallback>:
 81084e8:	4770      	bx	lr
 81084ea:	bf00      	nop

081084ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81084ec:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 81084ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 81084f0:	f7ff fffa 	bl	81084e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81084f4:	bd08      	pop	{r3, pc}
 81084f6:	bf00      	nop

081084f8 <HAL_UART_RxHalfCpltCallback>:
 81084f8:	4770      	bx	lr
 81084fa:	bf00      	nop

081084fc <HAL_UART_ErrorCallback>:
 81084fc:	4770      	bx	lr
 81084fe:	bf00      	nop

08108500 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108500:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8108502:	6803      	ldr	r3, [r0, #0]
{
 8108504:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8108506:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810850a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810850e:	689a      	ldr	r2, [r3, #8]
 8108510:	0612      	lsls	r2, r2, #24
 8108512:	d501      	bpl.n	8108518 <UART_DMAError+0x18>
 8108514:	2c21      	cmp	r4, #33	; 0x21
 8108516:	d028      	beq.n	810856a <UART_DMAError+0x6a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8108518:	689a      	ldr	r2, [r3, #8]
 810851a:	0652      	lsls	r2, r2, #25
 810851c:	d501      	bpl.n	8108522 <UART_DMAError+0x22>
 810851e:	2922      	cmp	r1, #34	; 0x22
 8108520:	d008      	beq.n	8108534 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8108522:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8108526:	f043 0310 	orr.w	r3, r3, #16
 810852a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810852e:	f7ff ffe5 	bl	81084fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108532:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 8108534:	2200      	movs	r2, #0
 8108536:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810853a:	681a      	ldr	r2, [r3, #0]
 810853c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8108540:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108542:	689a      	ldr	r2, [r3, #8]
 8108544:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8108548:	f022 0201 	bic.w	r2, r2, #1
 810854c:	609a      	str	r2, [r3, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810854e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8108550:	2a01      	cmp	r2, #1
 8108552:	d103      	bne.n	810855c <UART_DMAError+0x5c>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108554:	681a      	ldr	r2, [r3, #0]
 8108556:	f022 0210 	bic.w	r2, r2, #16
 810855a:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810855c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 810855e:	2220      	movs	r2, #32
 8108560:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  huart->RxISR = NULL;
 8108564:	6703      	str	r3, [r0, #112]	; 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108566:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8108568:	e7db      	b.n	8108522 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 810856a:	2200      	movs	r2, #0
 810856c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8108570:	681a      	ldr	r2, [r3, #0]
 8108572:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8108576:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8108578:	689a      	ldr	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 810857a:	2420      	movs	r4, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810857c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8108580:	609a      	str	r2, [r3, #8]
  huart->gState = HAL_UART_STATE_READY;
 8108582:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
}
 8108586:	e7c7      	b.n	8108518 <UART_DMAError+0x18>

08108588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8108588:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810858a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 810858c:	2300      	movs	r3, #0
 810858e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8108592:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8108596:	f7ff ffb1 	bl	81084fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810859a:	bd08      	pop	{r3, pc}

0810859c <HAL_UARTEx_RxEventCallback>:
}
 810859c:	4770      	bx	lr
 810859e:	bf00      	nop

081085a0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 81085a0:	6802      	ldr	r2, [r0, #0]
 81085a2:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 81085a4:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 81085a8:	ea13 0f0c 	tst.w	r3, ip
{
 81085ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 81085ae:	6815      	ldr	r5, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 81085b0:	6891      	ldr	r1, [r2, #8]
{
 81085b2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 81085b4:	f000 80ff 	beq.w	81087b6 <HAL_UART_IRQHandler+0x216>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81085b8:	4ea5      	ldr	r6, [pc, #660]	; (8108850 <HAL_UART_IRQHandler+0x2b0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81085ba:	48a6      	ldr	r0, [pc, #664]	; (8108854 <HAL_UART_IRQHandler+0x2b4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81085bc:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 81085c0:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 81085c2:	ea5c 0600 	orrs.w	r6, ip, r0
 81085c6:	d17e      	bne.n	81086c6 <HAL_UART_IRQHandler+0x126>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81085c8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 81085ca:	2801      	cmp	r0, #1
 81085cc:	d01d      	beq.n	810860a <HAL_UART_IRQHandler+0x6a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81085ce:	02d8      	lsls	r0, r3, #11
 81085d0:	d502      	bpl.n	81085d8 <HAL_UART_IRQHandler+0x38>
 81085d2:	024e      	lsls	r6, r1, #9
 81085d4:	f100 8116 	bmi.w	8108804 <HAL_UART_IRQHandler+0x264>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81085d8:	0618      	lsls	r0, r3, #24
 81085da:	d506      	bpl.n	81085ea <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 81085dc:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 81085e0:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 81085e4:	4301      	orrs	r1, r0
 81085e6:	f040 8105 	bne.w	81087f4 <HAL_UART_IRQHandler+0x254>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 81085ea:	065e      	lsls	r6, r3, #25
 81085ec:	d502      	bpl.n	81085f4 <HAL_UART_IRQHandler+0x54>
 81085ee:	0668      	lsls	r0, r5, #25
 81085f0:	f100 8114 	bmi.w	810881c <HAL_UART_IRQHandler+0x27c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 81085f4:	0219      	lsls	r1, r3, #8
 81085f6:	d502      	bpl.n	81085fe <HAL_UART_IRQHandler+0x5e>
 81085f8:	006a      	lsls	r2, r5, #1
 81085fa:	f100 811c 	bmi.w	8108836 <HAL_UART_IRQHandler+0x296>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 81085fe:	01db      	lsls	r3, r3, #7
 8108600:	d502      	bpl.n	8108608 <HAL_UART_IRQHandler+0x68>
 8108602:	2d00      	cmp	r5, #0
 8108604:	f2c0 8153 	blt.w	81088ae <HAL_UART_IRQHandler+0x30e>
}
 8108608:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810860a:	06d8      	lsls	r0, r3, #27
 810860c:	d5df      	bpl.n	81085ce <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810860e:	06ee      	lsls	r6, r5, #27
 8108610:	d5dd      	bpl.n	81085ce <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8108612:	2310      	movs	r3, #16
 8108614:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108616:	6893      	ldr	r3, [r2, #8]
 8108618:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 810861c:	f000 8120 	beq.w	8108860 <HAL_UART_IRQHandler+0x2c0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8108620:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8108622:	498d      	ldr	r1, [pc, #564]	; (8108858 <HAL_UART_IRQHandler+0x2b8>)
 8108624:	6803      	ldr	r3, [r0, #0]
 8108626:	428b      	cmp	r3, r1
 8108628:	d01e      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 810862a:	3118      	adds	r1, #24
 810862c:	428b      	cmp	r3, r1
 810862e:	d01b      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 8108630:	3118      	adds	r1, #24
 8108632:	428b      	cmp	r3, r1
 8108634:	d018      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 8108636:	3118      	adds	r1, #24
 8108638:	428b      	cmp	r3, r1
 810863a:	d015      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 810863c:	3118      	adds	r1, #24
 810863e:	428b      	cmp	r3, r1
 8108640:	d012      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 8108642:	3118      	adds	r1, #24
 8108644:	428b      	cmp	r3, r1
 8108646:	d00f      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 8108648:	3118      	adds	r1, #24
 810864a:	428b      	cmp	r3, r1
 810864c:	d00c      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 810864e:	3118      	adds	r1, #24
 8108650:	428b      	cmp	r3, r1
 8108652:	d009      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 8108654:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8108658:	428b      	cmp	r3, r1
 810865a:	d005      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 810865c:	3118      	adds	r1, #24
 810865e:	428b      	cmp	r3, r1
 8108660:	d002      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 8108662:	3118      	adds	r1, #24
 8108664:	428b      	cmp	r3, r1
 8108666:	d0ff      	beq.n	8108668 <HAL_UART_IRQHandler+0xc8>
 8108668:	685b      	ldr	r3, [r3, #4]
 810866a:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 810866c:	2b00      	cmp	r3, #0
 810866e:	d0cb      	beq.n	8108608 <HAL_UART_IRQHandler+0x68>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8108670:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8108674:	4299      	cmp	r1, r3
 8108676:	d9c7      	bls.n	8108608 <HAL_UART_IRQHandler+0x68>
        huart->RxXferCount = nb_remaining_rx_data;
 8108678:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810867c:	69c3      	ldr	r3, [r0, #28]
 810867e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108682:	d018      	beq.n	81086b6 <HAL_UART_IRQHandler+0x116>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8108684:	6813      	ldr	r3, [r2, #0]
 8108686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810868a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810868c:	6893      	ldr	r3, [r2, #8]
 810868e:	f023 0301 	bic.w	r3, r3, #1
 8108692:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108694:	6893      	ldr	r3, [r2, #8]
 8108696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810869a:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 810869c:	2120      	movs	r1, #32
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810869e:	2300      	movs	r3, #0
          huart->RxState = HAL_UART_STATE_READY;
 81086a0:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81086a4:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81086a6:	6813      	ldr	r3, [r2, #0]
 81086a8:	f023 0310 	bic.w	r3, r3, #16
 81086ac:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 81086ae:	f7fb f9b9 	bl	8103a24 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 81086b2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 81086b6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 81086ba:	1ac9      	subs	r1, r1, r3
 81086bc:	4620      	mov	r0, r4
 81086be:	b289      	uxth	r1, r1
 81086c0:	f7ff ff6c 	bl	810859c <HAL_UARTEx_RxEventCallback>
}
 81086c4:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81086c6:	07de      	lsls	r6, r3, #31
 81086c8:	d509      	bpl.n	81086de <HAL_UART_IRQHandler+0x13e>
 81086ca:	05ee      	lsls	r6, r5, #23
 81086cc:	d507      	bpl.n	81086de <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81086ce:	2601      	movs	r6, #1
 81086d0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81086d2:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 81086d6:	f046 0601 	orr.w	r6, r6, #1
 81086da:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81086de:	079e      	lsls	r6, r3, #30
 81086e0:	d57b      	bpl.n	81087da <HAL_UART_IRQHandler+0x23a>
 81086e2:	07ce      	lsls	r6, r1, #31
 81086e4:	d509      	bpl.n	81086fa <HAL_UART_IRQHandler+0x15a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81086e6:	2602      	movs	r6, #2
 81086e8:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 81086ea:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 81086ee:	f046 0604 	orr.w	r6, r6, #4
 81086f2:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81086f6:	075e      	lsls	r6, r3, #29
 81086f8:	d473      	bmi.n	81087e2 <HAL_UART_IRQHandler+0x242>
    if (((isrflags & USART_ISR_ORE) != 0U)
 81086fa:	071e      	lsls	r6, r3, #28
 81086fc:	d50b      	bpl.n	8108716 <HAL_UART_IRQHandler+0x176>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81086fe:	f005 0620 	and.w	r6, r5, #32
 8108702:	4330      	orrs	r0, r6
 8108704:	d007      	beq.n	8108716 <HAL_UART_IRQHandler+0x176>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8108706:	2008      	movs	r0, #8
 8108708:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 810870a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 810870e:	f040 0008 	orr.w	r0, r0, #8
 8108712:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8108716:	051e      	lsls	r6, r3, #20
 8108718:	d50a      	bpl.n	8108730 <HAL_UART_IRQHandler+0x190>
 810871a:	0168      	lsls	r0, r5, #5
 810871c:	d508      	bpl.n	8108730 <HAL_UART_IRQHandler+0x190>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810871e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8108722:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8108724:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8108728:	f040 0020 	orr.w	r0, r0, #32
 810872c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8108730:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8108734:	2800      	cmp	r0, #0
 8108736:	f43f af67 	beq.w	8108608 <HAL_UART_IRQHandler+0x68>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810873a:	069e      	lsls	r6, r3, #26
 810873c:	d506      	bpl.n	810874c <HAL_UART_IRQHandler+0x1ac>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 810873e:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8108742:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8108746:	ea55 0301 	orrs.w	r3, r5, r1
 810874a:	d179      	bne.n	8108840 <HAL_UART_IRQHandler+0x2a0>
      errorcode = huart->ErrorCode;
 810874c:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8108750:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8108752:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8108756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810875a:	431d      	orrs	r5, r3
 810875c:	f000 80ac 	beq.w	81088b8 <HAL_UART_IRQHandler+0x318>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108760:	6813      	ldr	r3, [r2, #0]
 8108762:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108766:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108768:	6893      	ldr	r3, [r2, #8]
 810876a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810876e:	f023 0301 	bic.w	r3, r3, #1
 8108772:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108774:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8108776:	2b01      	cmp	r3, #1
 8108778:	d103      	bne.n	8108782 <HAL_UART_IRQHandler+0x1e2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810877a:	6813      	ldr	r3, [r2, #0]
 810877c:	f023 0310 	bic.w	r3, r3, #16
 8108780:	6013      	str	r3, [r2, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108782:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8108784:	2120      	movs	r1, #32
 8108786:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810878a:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810878c:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 810878e:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108790:	064d      	lsls	r5, r1, #25
 8108792:	d53f      	bpl.n	8108814 <HAL_UART_IRQHandler+0x274>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108794:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8108796:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810879c:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 810879e:	2800      	cmp	r0, #0
 81087a0:	d038      	beq.n	8108814 <HAL_UART_IRQHandler+0x274>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81087a2:	4b2e      	ldr	r3, [pc, #184]	; (810885c <HAL_UART_IRQHandler+0x2bc>)
 81087a4:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81087a6:	f7fb facd 	bl	8103d44 <HAL_DMA_Abort_IT>
 81087aa:	2800      	cmp	r0, #0
 81087ac:	f43f af2c 	beq.w	8108608 <HAL_UART_IRQHandler+0x68>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81087b0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 81087b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 81087b4:	e00e      	b.n	81087d4 <HAL_UART_IRQHandler+0x234>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81087b6:	069e      	lsls	r6, r3, #26
 81087b8:	f57f af06 	bpl.w	81085c8 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81087bc:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81087c0:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
 81087c4:	ea56 060c 	orrs.w	r6, r6, ip
 81087c8:	f43f aefe 	beq.w	81085c8 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 81087cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 81087ce:	2b00      	cmp	r3, #0
 81087d0:	f43f af1a 	beq.w	8108608 <HAL_UART_IRQHandler+0x68>
}
 81087d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81087d8:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81087da:	075e      	lsls	r6, r3, #29
 81087dc:	d58d      	bpl.n	81086fa <HAL_UART_IRQHandler+0x15a>
 81087de:	07ce      	lsls	r6, r1, #31
 81087e0:	d58b      	bpl.n	81086fa <HAL_UART_IRQHandler+0x15a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81087e2:	2604      	movs	r6, #4
 81087e4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81087e6:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 81087ea:	f046 0602 	orr.w	r6, r6, #2
 81087ee:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 81087f2:	e782      	b.n	81086fa <HAL_UART_IRQHandler+0x15a>
    if (huart->TxISR != NULL)
 81087f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 81087f6:	2b00      	cmp	r3, #0
 81087f8:	f43f af06 	beq.w	8108608 <HAL_UART_IRQHandler+0x68>
      huart->TxISR(huart);
 81087fc:	4620      	mov	r0, r4
}
 81087fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8108802:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8108804:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8108808:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810880a:	6213      	str	r3, [r2, #32]
}
 810880c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8108810:	f000 bc1e 	b.w	8109050 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8108814:	4620      	mov	r0, r4
 8108816:	f7ff fe71 	bl	81084fc <HAL_UART_ErrorCallback>
}
 810881a:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810881c:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810881e:	2020      	movs	r0, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108820:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8108824:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108826:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8108828:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 810882c:	6761      	str	r1, [r4, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810882e:	4620      	mov	r0, r4
 8108830:	f7f9 ffda 	bl	81027e8 <HAL_UART_TxCpltCallback>
}
 8108834:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8108836:	4620      	mov	r0, r4
}
 8108838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810883c:	f000 bc0c 	b.w	8109058 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8108840:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8108842:	2b00      	cmp	r3, #0
 8108844:	d082      	beq.n	810874c <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 8108846:	4620      	mov	r0, r4
 8108848:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810884a:	6822      	ldr	r2, [r4, #0]
 810884c:	e77e      	b.n	810874c <HAL_UART_IRQHandler+0x1ac>
 810884e:	bf00      	nop
 8108850:	04000120 	.word	0x04000120
 8108854:	10000001 	.word	0x10000001
 8108858:	40020010 	.word	0x40020010
 810885c:	08108589 	.word	0x08108589
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8108860:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8108864:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8108868:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810886a:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 810886c:	2900      	cmp	r1, #0
 810886e:	f43f aecb 	beq.w	8108608 <HAL_UART_IRQHandler+0x68>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8108872:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8108876:	1a08      	subs	r0, r1, r0
 8108878:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 810887a:	2900      	cmp	r1, #0
 810887c:	f43f aec4 	beq.w	8108608 <HAL_UART_IRQHandler+0x68>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108880:	6810      	ldr	r0, [r2, #0]
 8108882:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8108886:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108888:	6890      	ldr	r0, [r2, #8]
 810888a:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 810888e:	f020 0001 	bic.w	r0, r0, #1
 8108892:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8108894:	2020      	movs	r0, #32
 8108896:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810889a:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810889c:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 810889e:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81088a0:	f020 0010 	bic.w	r0, r0, #16
 81088a4:	6010      	str	r0, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 81088a6:	4620      	mov	r0, r4
 81088a8:	f7ff fe78 	bl	810859c <HAL_UARTEx_RxEventCallback>
}
 81088ac:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxFifoFullCallback(huart);
 81088ae:	4620      	mov	r0, r4
}
 81088b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 81088b4:	f000 bbce 	b.w	8109054 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 81088b8:	4620      	mov	r0, r4
 81088ba:	f7ff fe1f 	bl	81084fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81088be:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
}
 81088c2:	bd70      	pop	{r4, r5, r6, pc}

081088c4 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81088c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 81088c6:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81088c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 81088ca:	2b01      	cmp	r3, #1
 81088cc:	d002      	beq.n	81088d4 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 81088ce:	f7ff fe13 	bl	81084f8 <HAL_UART_RxHalfCpltCallback>
}
 81088d2:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 81088d4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 81088d8:	0849      	lsrs	r1, r1, #1
 81088da:	f7ff fe5f 	bl	810859c <HAL_UARTEx_RxEventCallback>
}
 81088de:	bd08      	pop	{r3, pc}

081088e0 <UART_DMAReceiveCplt>:
{
 81088e0:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81088e2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81088e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81088e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81088ea:	d015      	beq.n	8108918 <UART_DMAReceiveCplt+0x38>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81088ec:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 81088ee:	2200      	movs	r2, #0
 81088f0:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 81088f4:	681a      	ldr	r2, [r3, #0]
 81088f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81088fa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81088fc:	689a      	ldr	r2, [r3, #8]
 81088fe:	f022 0201 	bic.w	r2, r2, #1
 8108902:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108904:	689a      	ldr	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8108906:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810890c:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 810890e:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108912:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8108914:	2a01      	cmp	r2, #1
 8108916:	d005      	beq.n	8108924 <UART_DMAReceiveCplt+0x44>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108918:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 810891a:	2b01      	cmp	r3, #1
 810891c:	d009      	beq.n	8108932 <UART_DMAReceiveCplt+0x52>
    HAL_UART_RxCpltCallback(huart);
 810891e:	f7f9 ff15 	bl	810274c <HAL_UART_RxCpltCallback>
}
 8108922:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108924:	681a      	ldr	r2, [r3, #0]
 8108926:	f022 0210 	bic.w	r2, r2, #16
 810892a:	601a      	str	r2, [r3, #0]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810892c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 810892e:	2b01      	cmp	r3, #1
 8108930:	d1f5      	bne.n	810891e <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8108932:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8108936:	f7ff fe31 	bl	810859c <HAL_UARTEx_RxEventCallback>
}
 810893a:	bd08      	pop	{r3, pc}

0810893c <UART_SetConfig>:
{
 810893c:	b530      	push	{r4, r5, lr}
 810893e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8108940:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108942:	6882      	ldr	r2, [r0, #8]
 8108944:	6900      	ldr	r0, [r0, #16]
 8108946:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108948:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810894a:	4302      	orrs	r2, r0
 810894c:	430a      	orrs	r2, r1
 810894e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108950:	49bd      	ldr	r1, [pc, #756]	; (8108c48 <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108952:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108954:	4029      	ands	r1, r5
 8108956:	430a      	orrs	r2, r1
 8108958:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810895a:	685a      	ldr	r2, [r3, #4]
 810895c:	68e1      	ldr	r1, [r4, #12]
 810895e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8108962:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108964:	49b9      	ldr	r1, [pc, #740]	; (8108c4c <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108966:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108968:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810896a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810896c:	6899      	ldr	r1, [r3, #8]
{
 810896e:	b087      	sub	sp, #28
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108970:	f000 80e0 	beq.w	8108b34 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 8108974:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108976:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 810897a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 810897e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108980:	430a      	orrs	r2, r1
 8108982:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108986:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8108988:	f022 020f 	bic.w	r2, r2, #15
 810898c:	430a      	orrs	r2, r1
 810898e:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108990:	4aaf      	ldr	r2, [pc, #700]	; (8108c50 <UART_SetConfig+0x314>)
 8108992:	4293      	cmp	r3, r2
 8108994:	d023      	beq.n	81089de <UART_SetConfig+0xa2>
 8108996:	4aaf      	ldr	r2, [pc, #700]	; (8108c54 <UART_SetConfig+0x318>)
 8108998:	4293      	cmp	r3, r2
 810899a:	d075      	beq.n	8108a88 <UART_SetConfig+0x14c>
 810899c:	4aae      	ldr	r2, [pc, #696]	; (8108c58 <UART_SetConfig+0x31c>)
 810899e:	4293      	cmp	r3, r2
 81089a0:	f000 818e 	beq.w	8108cc0 <UART_SetConfig+0x384>
 81089a4:	4aad      	ldr	r2, [pc, #692]	; (8108c5c <UART_SetConfig+0x320>)
 81089a6:	4293      	cmp	r3, r2
 81089a8:	f000 81e1 	beq.w	8108d6e <UART_SetConfig+0x432>
 81089ac:	4aac      	ldr	r2, [pc, #688]	; (8108c60 <UART_SetConfig+0x324>)
 81089ae:	4293      	cmp	r3, r2
 81089b0:	f000 8120 	beq.w	8108bf4 <UART_SetConfig+0x2b8>
 81089b4:	4aab      	ldr	r2, [pc, #684]	; (8108c64 <UART_SetConfig+0x328>)
 81089b6:	4293      	cmp	r3, r2
 81089b8:	f000 81e3 	beq.w	8108d82 <UART_SetConfig+0x446>
 81089bc:	4aaa      	ldr	r2, [pc, #680]	; (8108c68 <UART_SetConfig+0x32c>)
 81089be:	4293      	cmp	r3, r2
 81089c0:	f000 8234 	beq.w	8108e2c <UART_SetConfig+0x4f0>
 81089c4:	4aa9      	ldr	r2, [pc, #676]	; (8108c6c <UART_SetConfig+0x330>)
 81089c6:	4293      	cmp	r3, r2
 81089c8:	f000 81e7 	beq.w	8108d9a <UART_SetConfig+0x45e>
        ret = HAL_ERROR;
 81089cc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 81089ce:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 81089d0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 81089d4:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 81089d8:	66a2      	str	r2, [r4, #104]	; 0x68
}
 81089da:	b007      	add	sp, #28
 81089dc:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 81089de:	4ba4      	ldr	r3, [pc, #656]	; (8108c70 <UART_SetConfig+0x334>)
 81089e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81089e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81089e6:	2b28      	cmp	r3, #40	; 0x28
 81089e8:	d8f0      	bhi.n	81089cc <UART_SetConfig+0x90>
 81089ea:	4aa2      	ldr	r2, [pc, #648]	; (8108c74 <UART_SetConfig+0x338>)
 81089ec:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81089ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 81089f2:	d054      	beq.n	8108a9e <UART_SetConfig+0x162>
    switch (clocksource)
 81089f4:	2b20      	cmp	r3, #32
 81089f6:	f200 8147 	bhi.w	8108c88 <UART_SetConfig+0x34c>
 81089fa:	2b20      	cmp	r3, #32
 81089fc:	d8e6      	bhi.n	81089cc <UART_SetConfig+0x90>
 81089fe:	a201      	add	r2, pc, #4	; (adr r2, 8108a04 <UART_SetConfig+0xc8>)
 8108a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a04:	08108c43 	.word	0x08108c43
 8108a08:	08108c3d 	.word	0x08108c3d
 8108a0c:	081089cd 	.word	0x081089cd
 8108a10:	081089cd 	.word	0x081089cd
 8108a14:	08108c2d 	.word	0x08108c2d
 8108a18:	081089cd 	.word	0x081089cd
 8108a1c:	081089cd 	.word	0x081089cd
 8108a20:	081089cd 	.word	0x081089cd
 8108a24:	08108c1f 	.word	0x08108c1f
 8108a28:	081089cd 	.word	0x081089cd
 8108a2c:	081089cd 	.word	0x081089cd
 8108a30:	081089cd 	.word	0x081089cd
 8108a34:	081089cd 	.word	0x081089cd
 8108a38:	081089cd 	.word	0x081089cd
 8108a3c:	081089cd 	.word	0x081089cd
 8108a40:	081089cd 	.word	0x081089cd
 8108a44:	08108c09 	.word	0x08108c09
 8108a48:	081089cd 	.word	0x081089cd
 8108a4c:	081089cd 	.word	0x081089cd
 8108a50:	081089cd 	.word	0x081089cd
 8108a54:	081089cd 	.word	0x081089cd
 8108a58:	081089cd 	.word	0x081089cd
 8108a5c:	081089cd 	.word	0x081089cd
 8108a60:	081089cd 	.word	0x081089cd
 8108a64:	081089cd 	.word	0x081089cd
 8108a68:	081089cd 	.word	0x081089cd
 8108a6c:	081089cd 	.word	0x081089cd
 8108a70:	081089cd 	.word	0x081089cd
 8108a74:	081089cd 	.word	0x081089cd
 8108a78:	081089cd 	.word	0x081089cd
 8108a7c:	081089cd 	.word	0x081089cd
 8108a80:	081089cd 	.word	0x081089cd
 8108a84:	08108daf 	.word	0x08108daf
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108a88:	4b79      	ldr	r3, [pc, #484]	; (8108c70 <UART_SetConfig+0x334>)
 8108a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108a8c:	f003 0307 	and.w	r3, r3, #7
 8108a90:	2b05      	cmp	r3, #5
 8108a92:	d89b      	bhi.n	81089cc <UART_SetConfig+0x90>
 8108a94:	4a78      	ldr	r2, [pc, #480]	; (8108c78 <UART_SetConfig+0x33c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108a96:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8108a9a:	5cd3      	ldrb	r3, [r2, r3]
 8108a9c:	d1aa      	bne.n	81089f4 <UART_SetConfig+0xb8>
    switch (clocksource)
 8108a9e:	2b20      	cmp	r3, #32
 8108aa0:	f200 8146 	bhi.w	8108d30 <UART_SetConfig+0x3f4>
 8108aa4:	2b20      	cmp	r3, #32
 8108aa6:	d891      	bhi.n	81089cc <UART_SetConfig+0x90>
 8108aa8:	a201      	add	r2, pc, #4	; (adr r2, 8108ab0 <UART_SetConfig+0x174>)
 8108aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108aae:	bf00      	nop
 8108ab0:	08108e19 	.word	0x08108e19
 8108ab4:	08108e13 	.word	0x08108e13
 8108ab8:	081089cd 	.word	0x081089cd
 8108abc:	081089cd 	.word	0x081089cd
 8108ac0:	08108e1f 	.word	0x08108e1f
 8108ac4:	081089cd 	.word	0x081089cd
 8108ac8:	081089cd 	.word	0x081089cd
 8108acc:	081089cd 	.word	0x081089cd
 8108ad0:	08108e01 	.word	0x08108e01
 8108ad4:	081089cd 	.word	0x081089cd
 8108ad8:	081089cd 	.word	0x081089cd
 8108adc:	081089cd 	.word	0x081089cd
 8108ae0:	081089cd 	.word	0x081089cd
 8108ae4:	081089cd 	.word	0x081089cd
 8108ae8:	081089cd 	.word	0x081089cd
 8108aec:	081089cd 	.word	0x081089cd
 8108af0:	08108ded 	.word	0x08108ded
 8108af4:	081089cd 	.word	0x081089cd
 8108af8:	081089cd 	.word	0x081089cd
 8108afc:	081089cd 	.word	0x081089cd
 8108b00:	081089cd 	.word	0x081089cd
 8108b04:	081089cd 	.word	0x081089cd
 8108b08:	081089cd 	.word	0x081089cd
 8108b0c:	081089cd 	.word	0x081089cd
 8108b10:	081089cd 	.word	0x081089cd
 8108b14:	081089cd 	.word	0x081089cd
 8108b18:	081089cd 	.word	0x081089cd
 8108b1c:	081089cd 	.word	0x081089cd
 8108b20:	081089cd 	.word	0x081089cd
 8108b24:	081089cd 	.word	0x081089cd
 8108b28:	081089cd 	.word	0x081089cd
 8108b2c:	081089cd 	.word	0x081089cd
 8108b30:	08108e29 	.word	0x08108e29
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108b34:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8108b38:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8108b3c:	430a      	orrs	r2, r1
 8108b3e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108b42:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108b44:	484a      	ldr	r0, [pc, #296]	; (8108c70 <UART_SetConfig+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108b46:	f022 020f 	bic.w	r2, r2, #15
 8108b4a:	430a      	orrs	r2, r1
 8108b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108b4e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8108b50:	f003 0307 	and.w	r3, r3, #7
 8108b54:	2b05      	cmp	r3, #5
 8108b56:	f63f af39 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108b5a:	4a48      	ldr	r2, [pc, #288]	; (8108c7c <UART_SetConfig+0x340>)
 8108b5c:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8108b5e:	2b20      	cmp	r3, #32
 8108b60:	f200 80b8 	bhi.w	8108cd4 <UART_SetConfig+0x398>
 8108b64:	2b01      	cmp	r3, #1
 8108b66:	f67f af31 	bls.w	81089cc <UART_SetConfig+0x90>
 8108b6a:	3b02      	subs	r3, #2
 8108b6c:	2b1e      	cmp	r3, #30
 8108b6e:	f63f af2d 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108b72:	a201      	add	r2, pc, #4	; (adr r2, 8108b78 <UART_SetConfig+0x23c>)
 8108b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b78:	08108de3 	.word	0x08108de3
 8108b7c:	081089cd 	.word	0x081089cd
 8108b80:	08108dd9 	.word	0x08108dd9
 8108b84:	081089cd 	.word	0x081089cd
 8108b88:	081089cd 	.word	0x081089cd
 8108b8c:	081089cd 	.word	0x081089cd
 8108b90:	08108dc7 	.word	0x08108dc7
 8108b94:	081089cd 	.word	0x081089cd
 8108b98:	081089cd 	.word	0x081089cd
 8108b9c:	081089cd 	.word	0x081089cd
 8108ba0:	081089cd 	.word	0x081089cd
 8108ba4:	081089cd 	.word	0x081089cd
 8108ba8:	081089cd 	.word	0x081089cd
 8108bac:	081089cd 	.word	0x081089cd
 8108bb0:	08108db3 	.word	0x08108db3
 8108bb4:	081089cd 	.word	0x081089cd
 8108bb8:	081089cd 	.word	0x081089cd
 8108bbc:	081089cd 	.word	0x081089cd
 8108bc0:	081089cd 	.word	0x081089cd
 8108bc4:	081089cd 	.word	0x081089cd
 8108bc8:	081089cd 	.word	0x081089cd
 8108bcc:	081089cd 	.word	0x081089cd
 8108bd0:	081089cd 	.word	0x081089cd
 8108bd4:	081089cd 	.word	0x081089cd
 8108bd8:	081089cd 	.word	0x081089cd
 8108bdc:	081089cd 	.word	0x081089cd
 8108be0:	081089cd 	.word	0x081089cd
 8108be4:	081089cd 	.word	0x081089cd
 8108be8:	081089cd 	.word	0x081089cd
 8108bec:	081089cd 	.word	0x081089cd
 8108bf0:	08108de9 	.word	0x08108de9
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108bf4:	4b1e      	ldr	r3, [pc, #120]	; (8108c70 <UART_SetConfig+0x334>)
 8108bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108bf8:	f003 0307 	and.w	r3, r3, #7
 8108bfc:	2b05      	cmp	r3, #5
 8108bfe:	f63f aee5 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108c02:	4a1f      	ldr	r2, [pc, #124]	; (8108c80 <UART_SetConfig+0x344>)
 8108c04:	5cd3      	ldrb	r3, [r2, r3]
 8108c06:	e6f2      	b.n	81089ee <UART_SetConfig+0xb2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108c08:	4b19      	ldr	r3, [pc, #100]	; (8108c70 <UART_SetConfig+0x334>)
 8108c0a:	681a      	ldr	r2, [r3, #0]
 8108c0c:	0692      	lsls	r2, r2, #26
 8108c0e:	f140 80c2 	bpl.w	8108d96 <UART_SetConfig+0x45a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108c12:	681b      	ldr	r3, [r3, #0]
 8108c14:	481b      	ldr	r0, [pc, #108]	; (8108c84 <UART_SetConfig+0x348>)
 8108c16:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8108c1a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8108c1c:	e03a      	b.n	8108c94 <UART_SetConfig+0x358>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108c1e:	a803      	add	r0, sp, #12
 8108c20:	f7fe fa36 	bl	8107090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108c24:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8108c26:	b938      	cbnz	r0, 8108c38 <UART_SetConfig+0x2fc>
 8108c28:	2000      	movs	r0, #0
 8108c2a:	e6d0      	b.n	81089ce <UART_SetConfig+0x92>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108c2c:	4668      	mov	r0, sp
 8108c2e:	f7fe f983 	bl	8106f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108c32:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8108c34:	2800      	cmp	r0, #0
 8108c36:	d0f7      	beq.n	8108c28 <UART_SetConfig+0x2ec>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108c38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8108c3a:	e02b      	b.n	8108c94 <UART_SetConfig+0x358>
        pclk = HAL_RCC_GetPCLK2Freq();
 8108c3c:	f7fd fae2 	bl	8106204 <HAL_RCC_GetPCLK2Freq>
        break;
 8108c40:	e7f1      	b.n	8108c26 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8108c42:	f7fd fa95 	bl	8106170 <HAL_RCC_GetPCLK1Freq>
        break;
 8108c46:	e7ee      	b.n	8108c26 <UART_SetConfig+0x2ea>
 8108c48:	cfff69f3 	.word	0xcfff69f3
 8108c4c:	58000c00 	.word	0x58000c00
 8108c50:	40011000 	.word	0x40011000
 8108c54:	40004400 	.word	0x40004400
 8108c58:	40004800 	.word	0x40004800
 8108c5c:	40004c00 	.word	0x40004c00
 8108c60:	40005000 	.word	0x40005000
 8108c64:	40011400 	.word	0x40011400
 8108c68:	40007800 	.word	0x40007800
 8108c6c:	40007c00 	.word	0x40007c00
 8108c70:	58024400 	.word	0x58024400
 8108c74:	0810a0ec 	.word	0x0810a0ec
 8108c78:	0810a118 	.word	0x0810a118
 8108c7c:	0810a120 	.word	0x0810a120
 8108c80:	0810a118 	.word	0x0810a118
 8108c84:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8108c88:	2b40      	cmp	r3, #64	; 0x40
 8108c8a:	bf08      	it	eq
 8108c8c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8108c90:	f47f ae9c 	bne.w	81089cc <UART_SetConfig+0x90>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108c94:	6862      	ldr	r2, [r4, #4]
 8108c96:	4b6c      	ldr	r3, [pc, #432]	; (8108e48 <UART_SetConfig+0x50c>)
 8108c98:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8108c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8108ca0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8108ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8108ca8:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108caa:	f1a3 0110 	sub.w	r1, r3, #16
 8108cae:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8108cb2:	4291      	cmp	r1, r2
 8108cb4:	f63f ae8a 	bhi.w	81089cc <UART_SetConfig+0x90>
        huart->Instance->BRR = usartdiv;
 8108cb8:	6822      	ldr	r2, [r4, #0]
 8108cba:	2000      	movs	r0, #0
 8108cbc:	60d3      	str	r3, [r2, #12]
 8108cbe:	e686      	b.n	81089ce <UART_SetConfig+0x92>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108cc0:	4b62      	ldr	r3, [pc, #392]	; (8108e4c <UART_SetConfig+0x510>)
 8108cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108cc4:	f003 0307 	and.w	r3, r3, #7
 8108cc8:	2b05      	cmp	r3, #5
 8108cca:	f63f ae7f 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108cce:	4a60      	ldr	r2, [pc, #384]	; (8108e50 <UART_SetConfig+0x514>)
 8108cd0:	5cd3      	ldrb	r3, [r2, r3]
 8108cd2:	e68c      	b.n	81089ee <UART_SetConfig+0xb2>
    switch (clocksource)
 8108cd4:	2b40      	cmp	r3, #64	; 0x40
 8108cd6:	bf08      	it	eq
 8108cd8:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8108cdc:	f47f ae76 	bne.w	81089cc <UART_SetConfig+0x90>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108ce0:	4b59      	ldr	r3, [pc, #356]	; (8108e48 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108ce2:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108ce4:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8108ce8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108cec:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8108cf0:	4299      	cmp	r1, r3
 8108cf2:	f63f ae6b 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108cf6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8108cfa:	f63f ae67 	bhi.w	81089cc <UART_SetConfig+0x90>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108cfe:	2300      	movs	r3, #0
 8108d00:	4619      	mov	r1, r3
 8108d02:	f7f8 f903 	bl	8100f0c <__aeabi_uldivmod>
 8108d06:	0209      	lsls	r1, r1, #8
 8108d08:	0203      	lsls	r3, r0, #8
 8108d0a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8108d0e:	0868      	lsrs	r0, r5, #1
 8108d10:	1818      	adds	r0, r3, r0
 8108d12:	462a      	mov	r2, r5
 8108d14:	f04f 0300 	mov.w	r3, #0
 8108d18:	f141 0100 	adc.w	r1, r1, #0
 8108d1c:	f7f8 f8f6 	bl	8100f0c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108d20:	4a4c      	ldr	r2, [pc, #304]	; (8108e54 <UART_SetConfig+0x518>)
 8108d22:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8108d26:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108d28:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108d2a:	f63f ae4f 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108d2e:	e7c3      	b.n	8108cb8 <UART_SetConfig+0x37c>
    switch (clocksource)
 8108d30:	2b40      	cmp	r3, #64	; 0x40
 8108d32:	f47f ae4b 	bne.w	81089cc <UART_SetConfig+0x90>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108d36:	6862      	ldr	r2, [r4, #4]
 8108d38:	4b43      	ldr	r3, [pc, #268]	; (8108e48 <UART_SetConfig+0x50c>)
 8108d3a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8108d3e:	fbb0 f0f1 	udiv	r0, r0, r1
 8108d42:	0853      	lsrs	r3, r2, #1
 8108d44:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8108d48:	fbb0 f0f2 	udiv	r0, r0, r2
 8108d4c:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108d4e:	f1a3 0110 	sub.w	r1, r3, #16
 8108d52:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8108d56:	4291      	cmp	r1, r2
 8108d58:	f63f ae38 	bhi.w	81089cc <UART_SetConfig+0x90>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108d5c:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 8108d60:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108d62:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108d64:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8108d68:	4318      	orrs	r0, r3
 8108d6a:	60d0      	str	r0, [r2, #12]
 8108d6c:	e75c      	b.n	8108c28 <UART_SetConfig+0x2ec>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108d6e:	4b37      	ldr	r3, [pc, #220]	; (8108e4c <UART_SetConfig+0x510>)
 8108d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d72:	f003 0307 	and.w	r3, r3, #7
 8108d76:	2b05      	cmp	r3, #5
 8108d78:	f63f ae28 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108d7c:	4a36      	ldr	r2, [pc, #216]	; (8108e58 <UART_SetConfig+0x51c>)
 8108d7e:	5cd3      	ldrb	r3, [r2, r3]
 8108d80:	e635      	b.n	81089ee <UART_SetConfig+0xb2>
 8108d82:	4b32      	ldr	r3, [pc, #200]	; (8108e4c <UART_SetConfig+0x510>)
 8108d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108d8a:	2b28      	cmp	r3, #40	; 0x28
 8108d8c:	f63f ae1e 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108d90:	4a32      	ldr	r2, [pc, #200]	; (8108e5c <UART_SetConfig+0x520>)
 8108d92:	5cd3      	ldrb	r3, [r2, r3]
 8108d94:	e62b      	b.n	81089ee <UART_SetConfig+0xb2>
          pclk = (uint32_t) HSI_VALUE;
 8108d96:	4832      	ldr	r0, [pc, #200]	; (8108e60 <UART_SetConfig+0x524>)
 8108d98:	e77c      	b.n	8108c94 <UART_SetConfig+0x358>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108d9a:	4b2c      	ldr	r3, [pc, #176]	; (8108e4c <UART_SetConfig+0x510>)
 8108d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d9e:	f003 0307 	and.w	r3, r3, #7
 8108da2:	2b05      	cmp	r3, #5
 8108da4:	f63f ae12 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108da8:	4a2e      	ldr	r2, [pc, #184]	; (8108e64 <UART_SetConfig+0x528>)
 8108daa:	5cd3      	ldrb	r3, [r2, r3]
 8108dac:	e61f      	b.n	81089ee <UART_SetConfig+0xb2>
        pclk = (uint32_t) CSI_VALUE;
 8108dae:	482e      	ldr	r0, [pc, #184]	; (8108e68 <UART_SetConfig+0x52c>)
 8108db0:	e770      	b.n	8108c94 <UART_SetConfig+0x358>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108db2:	4b26      	ldr	r3, [pc, #152]	; (8108e4c <UART_SetConfig+0x510>)
 8108db4:	681a      	ldr	r2, [r3, #0]
 8108db6:	0695      	lsls	r5, r2, #26
 8108db8:	d542      	bpl.n	8108e40 <UART_SetConfig+0x504>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108dba:	681b      	ldr	r3, [r3, #0]
 8108dbc:	4828      	ldr	r0, [pc, #160]	; (8108e60 <UART_SetConfig+0x524>)
 8108dbe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8108dc2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8108dc4:	e78c      	b.n	8108ce0 <UART_SetConfig+0x3a4>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108dc6:	a803      	add	r0, sp, #12
 8108dc8:	f7fe f962 	bl	8107090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108dcc:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8108dce:	2800      	cmp	r0, #0
 8108dd0:	f43f af2a 	beq.w	8108c28 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108dd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8108dd6:	e783      	b.n	8108ce0 <UART_SetConfig+0x3a4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108dd8:	4668      	mov	r0, sp
 8108dda:	f7fe f8ad 	bl	8106f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108dde:	9801      	ldr	r0, [sp, #4]
        break;
 8108de0:	e7f5      	b.n	8108dce <UART_SetConfig+0x492>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108de2:	f7fe f897 	bl	8106f14 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8108de6:	e7f2      	b.n	8108dce <UART_SetConfig+0x492>
        pclk = (uint32_t) CSI_VALUE;
 8108de8:	481f      	ldr	r0, [pc, #124]	; (8108e68 <UART_SetConfig+0x52c>)
 8108dea:	e779      	b.n	8108ce0 <UART_SetConfig+0x3a4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108dec:	4b17      	ldr	r3, [pc, #92]	; (8108e4c <UART_SetConfig+0x510>)
 8108dee:	681a      	ldr	r2, [r3, #0]
 8108df0:	0690      	lsls	r0, r2, #26
 8108df2:	d527      	bpl.n	8108e44 <UART_SetConfig+0x508>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108df4:	681b      	ldr	r3, [r3, #0]
 8108df6:	481a      	ldr	r0, [pc, #104]	; (8108e60 <UART_SetConfig+0x524>)
 8108df8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8108dfc:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8108dfe:	e79a      	b.n	8108d36 <UART_SetConfig+0x3fa>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108e00:	a803      	add	r0, sp, #12
 8108e02:	f7fe f945 	bl	8107090 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108e06:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8108e08:	2800      	cmp	r0, #0
 8108e0a:	f43f af0d 	beq.w	8108c28 <UART_SetConfig+0x2ec>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108e0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8108e10:	e791      	b.n	8108d36 <UART_SetConfig+0x3fa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8108e12:	f7fd f9f7 	bl	8106204 <HAL_RCC_GetPCLK2Freq>
        break;
 8108e16:	e7f7      	b.n	8108e08 <UART_SetConfig+0x4cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8108e18:	f7fd f9aa 	bl	8106170 <HAL_RCC_GetPCLK1Freq>
        break;
 8108e1c:	e7f4      	b.n	8108e08 <UART_SetConfig+0x4cc>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108e1e:	4668      	mov	r0, sp
 8108e20:	f7fe f88a 	bl	8106f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108e24:	9801      	ldr	r0, [sp, #4]
        break;
 8108e26:	e7ef      	b.n	8108e08 <UART_SetConfig+0x4cc>
        pclk = (uint32_t) CSI_VALUE;
 8108e28:	480f      	ldr	r0, [pc, #60]	; (8108e68 <UART_SetConfig+0x52c>)
 8108e2a:	e784      	b.n	8108d36 <UART_SetConfig+0x3fa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108e2c:	4b07      	ldr	r3, [pc, #28]	; (8108e4c <UART_SetConfig+0x510>)
 8108e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108e30:	f003 0307 	and.w	r3, r3, #7
 8108e34:	2b05      	cmp	r3, #5
 8108e36:	f63f adc9 	bhi.w	81089cc <UART_SetConfig+0x90>
 8108e3a:	4a0c      	ldr	r2, [pc, #48]	; (8108e6c <UART_SetConfig+0x530>)
 8108e3c:	5cd3      	ldrb	r3, [r2, r3]
 8108e3e:	e5d6      	b.n	81089ee <UART_SetConfig+0xb2>
          pclk = (uint32_t) HSI_VALUE;
 8108e40:	4807      	ldr	r0, [pc, #28]	; (8108e60 <UART_SetConfig+0x524>)
 8108e42:	e74d      	b.n	8108ce0 <UART_SetConfig+0x3a4>
          pclk = (uint32_t) HSI_VALUE;
 8108e44:	4806      	ldr	r0, [pc, #24]	; (8108e60 <UART_SetConfig+0x524>)
 8108e46:	e776      	b.n	8108d36 <UART_SetConfig+0x3fa>
 8108e48:	0810a128 	.word	0x0810a128
 8108e4c:	58024400 	.word	0x58024400
 8108e50:	0810a118 	.word	0x0810a118
 8108e54:	000ffcff 	.word	0x000ffcff
 8108e58:	0810a118 	.word	0x0810a118
 8108e5c:	0810a0ec 	.word	0x0810a0ec
 8108e60:	03d09000 	.word	0x03d09000
 8108e64:	0810a118 	.word	0x0810a118
 8108e68:	003d0900 	.word	0x003d0900
 8108e6c:	0810a118 	.word	0x0810a118

08108e70 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108e70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8108e72:	07da      	lsls	r2, r3, #31
{
 8108e74:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108e76:	d506      	bpl.n	8108e86 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108e78:	6801      	ldr	r1, [r0, #0]
 8108e7a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8108e7c:	684a      	ldr	r2, [r1, #4]
 8108e7e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8108e82:	4322      	orrs	r2, r4
 8108e84:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108e86:	079c      	lsls	r4, r3, #30
 8108e88:	d506      	bpl.n	8108e98 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108e8a:	6801      	ldr	r1, [r0, #0]
 8108e8c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8108e8e:	684a      	ldr	r2, [r1, #4]
 8108e90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8108e94:	4322      	orrs	r2, r4
 8108e96:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108e98:	0759      	lsls	r1, r3, #29
 8108e9a:	d506      	bpl.n	8108eaa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108e9c:	6801      	ldr	r1, [r0, #0]
 8108e9e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8108ea0:	684a      	ldr	r2, [r1, #4]
 8108ea2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8108ea6:	4322      	orrs	r2, r4
 8108ea8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108eaa:	071a      	lsls	r2, r3, #28
 8108eac:	d506      	bpl.n	8108ebc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108eae:	6801      	ldr	r1, [r0, #0]
 8108eb0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8108eb2:	684a      	ldr	r2, [r1, #4]
 8108eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8108eb8:	4322      	orrs	r2, r4
 8108eba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108ebc:	06dc      	lsls	r4, r3, #27
 8108ebe:	d506      	bpl.n	8108ece <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108ec0:	6801      	ldr	r1, [r0, #0]
 8108ec2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8108ec4:	688a      	ldr	r2, [r1, #8]
 8108ec6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8108eca:	4322      	orrs	r2, r4
 8108ecc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108ece:	0699      	lsls	r1, r3, #26
 8108ed0:	d506      	bpl.n	8108ee0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108ed2:	6801      	ldr	r1, [r0, #0]
 8108ed4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8108ed6:	688a      	ldr	r2, [r1, #8]
 8108ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8108edc:	4322      	orrs	r2, r4
 8108ede:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108ee0:	065a      	lsls	r2, r3, #25
 8108ee2:	d509      	bpl.n	8108ef8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108ee4:	6801      	ldr	r1, [r0, #0]
 8108ee6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8108ee8:	684a      	ldr	r2, [r1, #4]
 8108eea:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8108eee:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108ef0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108ef4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108ef6:	d00b      	beq.n	8108f10 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108ef8:	061b      	lsls	r3, r3, #24
 8108efa:	d506      	bpl.n	8108f0a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108efc:	6802      	ldr	r2, [r0, #0]
 8108efe:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8108f00:	6853      	ldr	r3, [r2, #4]
 8108f02:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8108f06:	430b      	orrs	r3, r1
 8108f08:	6053      	str	r3, [r2, #4]
}
 8108f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108f0e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108f10:	684a      	ldr	r2, [r1, #4]
 8108f12:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8108f14:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8108f18:	4322      	orrs	r2, r4
 8108f1a:	604a      	str	r2, [r1, #4]
 8108f1c:	e7ec      	b.n	8108ef8 <UART_AdvFeatureConfig+0x88>
 8108f1e:	bf00      	nop

08108f20 <UART_CheckIdleState>:
{
 8108f20:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108f22:	2300      	movs	r3, #0
{
 8108f24:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108f26:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8108f2a:	f7f9 fde7 	bl	8102afc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108f2e:	6823      	ldr	r3, [r4, #0]
 8108f30:	681a      	ldr	r2, [r3, #0]
 8108f32:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8108f34:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108f36:	d40d      	bmi.n	8108f54 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108f38:	681a      	ldr	r2, [r3, #0]
 8108f3a:	0752      	lsls	r2, r2, #29
 8108f3c:	d431      	bmi.n	8108fa2 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108f3e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8108f40:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8108f42:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8108f46:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  return HAL_OK;
 8108f4a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8108f4c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108f50:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8108f52:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108f54:	69da      	ldr	r2, [r3, #28]
 8108f56:	0292      	lsls	r2, r2, #10
 8108f58:	d4ee      	bmi.n	8108f38 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108f5a:	f7f9 fdcf 	bl	8102afc <HAL_GetTick>
 8108f5e:	1b43      	subs	r3, r0, r5
 8108f60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108f64:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108f66:	d22d      	bcs.n	8108fc4 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108f68:	681a      	ldr	r2, [r3, #0]
 8108f6a:	0750      	lsls	r0, r2, #29
 8108f6c:	d5f2      	bpl.n	8108f54 <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108f6e:	69da      	ldr	r2, [r3, #28]
 8108f70:	0511      	lsls	r1, r2, #20
 8108f72:	d5ef      	bpl.n	8108f54 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108f78:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108f7a:	6819      	ldr	r1, [r3, #0]
 8108f7c:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8108f80:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108f82:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 8108f84:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108f86:	f021 0101 	bic.w	r1, r1, #1
 8108f8a:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8108f8c:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8108f8e:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 8108f92:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8108f96:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8108f98:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108f9c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8108fa0:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108fa2:	69db      	ldr	r3, [r3, #28]
 8108fa4:	0258      	lsls	r0, r3, #9
 8108fa6:	d4ca      	bmi.n	8108f3e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108fa8:	f7f9 fda8 	bl	8102afc <HAL_GetTick>
 8108fac:	1b43      	subs	r3, r0, r5
 8108fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108fb2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108fb4:	d206      	bcs.n	8108fc4 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108fb6:	681a      	ldr	r2, [r3, #0]
 8108fb8:	0751      	lsls	r1, r2, #29
 8108fba:	d5f2      	bpl.n	8108fa2 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108fbc:	69da      	ldr	r2, [r3, #28]
 8108fbe:	0512      	lsls	r2, r2, #20
 8108fc0:	d5ef      	bpl.n	8108fa2 <UART_CheckIdleState+0x82>
 8108fc2:	e7d7      	b.n	8108f74 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108fc4:	681a      	ldr	r2, [r3, #0]
 8108fc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8108fca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108fcc:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8108fce:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108fd0:	f022 0201 	bic.w	r2, r2, #1
 8108fd4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8108fd6:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8108fd8:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8108fdc:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 8108fe0:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8108fe2:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8108fe6:	bd38      	pop	{r3, r4, r5, pc}

08108fe8 <HAL_UART_Init>:
  if (huart == NULL)
 8108fe8:	b380      	cbz	r0, 810904c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8108fea:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8108fee:	b510      	push	{r4, lr}
 8108ff0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8108ff2:	b333      	cbz	r3, 8109042 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8108ff4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8108ff6:	2324      	movs	r3, #36	; 0x24
 8108ff8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8108ffc:	6813      	ldr	r3, [r2, #0]
 8108ffe:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109002:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8109004:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109006:	f7ff fc99 	bl	810893c <UART_SetConfig>
 810900a:	2801      	cmp	r0, #1
 810900c:	d017      	beq.n	810903e <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810900e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8109010:	b98b      	cbnz	r3, 8109036 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109012:	6823      	ldr	r3, [r4, #0]
 8109014:	685a      	ldr	r2, [r3, #4]
 8109016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810901a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810901c:	689a      	ldr	r2, [r3, #8]
 810901e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8109022:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8109024:	681a      	ldr	r2, [r3, #0]
 8109026:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 810902a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 810902c:	601a      	str	r2, [r3, #0]
}
 810902e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8109032:	f7ff bf75 	b.w	8108f20 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8109036:	4620      	mov	r0, r4
 8109038:	f7ff ff1a 	bl	8108e70 <UART_AdvFeatureConfig>
 810903c:	e7e9      	b.n	8109012 <HAL_UART_Init+0x2a>
}
 810903e:	2001      	movs	r0, #1
 8109040:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8109042:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8109046:	f7f9 fc15 	bl	8102874 <HAL_UART_MspInit>
 810904a:	e7d3      	b.n	8108ff4 <HAL_UART_Init+0xc>
}
 810904c:	2001      	movs	r0, #1
 810904e:	4770      	bx	lr

08109050 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8109050:	4770      	bx	lr
 8109052:	bf00      	nop

08109054 <HAL_UARTEx_RxFifoFullCallback>:
 8109054:	4770      	bx	lr
 8109056:	bf00      	nop

08109058 <HAL_UARTEx_TxFifoEmptyCallback>:
 8109058:	4770      	bx	lr
 810905a:	bf00      	nop

0810905c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810905c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8109060:	2b01      	cmp	r3, #1
 8109062:	d017      	beq.n	8109094 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109064:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8109066:	2324      	movs	r3, #36	; 0x24
{
 8109068:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 810906a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810906e:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109070:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109072:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8109074:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109078:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 810907c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810907e:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109080:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109082:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8109086:	2220      	movs	r2, #32
 8109088:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 810908c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8109090:	4618      	mov	r0, r3
}
 8109092:	4770      	bx	lr
  __HAL_LOCK(huart);
 8109094:	2002      	movs	r0, #2
}
 8109096:	4770      	bx	lr

08109098 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109098:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 810909c:	2a01      	cmp	r2, #1
 810909e:	d037      	beq.n	8109110 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 81090a0:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81090a2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 81090a4:	2024      	movs	r0, #36	; 0x24
{
 81090a6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 81090a8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81090ac:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81090ae:	6810      	ldr	r0, [r2, #0]
 81090b0:	f020 0001 	bic.w	r0, r0, #1
 81090b4:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81090b6:	6890      	ldr	r0, [r2, #8]
 81090b8:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 81090bc:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81090be:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81090c0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81090c2:	b310      	cbz	r0, 810910a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81090c4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81090c6:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 81090c8:	4d12      	ldr	r5, [pc, #72]	; (8109114 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81090ca:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81090ce:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81090d2:	4911      	ldr	r1, [pc, #68]	; (8109118 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 81090d4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81090d8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 81090dc:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 81090e0:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81090e4:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81090e6:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81090e8:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81090ec:	fbb1 f1f5 	udiv	r1, r1, r5
 81090f0:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 81090f4:	2100      	movs	r1, #0
 81090f6:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 81090fa:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81090fc:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 81090fe:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8109102:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8109104:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8109108:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 810910a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 810910c:	4608      	mov	r0, r1
 810910e:	e7ef      	b.n	81090f0 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8109110:	2002      	movs	r0, #2
}
 8109112:	4770      	bx	lr
 8109114:	0810a140 	.word	0x0810a140
 8109118:	0810a148 	.word	0x0810a148

0810911c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 810911c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8109120:	2a01      	cmp	r2, #1
 8109122:	d037      	beq.n	8109194 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8109124:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109126:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8109128:	2024      	movs	r0, #36	; 0x24
{
 810912a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 810912c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109130:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8109132:	6810      	ldr	r0, [r2, #0]
 8109134:	f020 0001 	bic.w	r0, r0, #1
 8109138:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810913a:	6890      	ldr	r0, [r2, #8]
 810913c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8109140:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109142:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109144:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109146:	b310      	cbz	r0, 810918e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109148:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810914a:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 810914c:	4d12      	ldr	r5, [pc, #72]	; (8109198 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810914e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109152:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109156:	4911      	ldr	r1, [pc, #68]	; (810919c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8109158:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810915c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8109160:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8109164:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109168:	0100      	lsls	r0, r0, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810916a:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810916c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109170:	fbb1 f1f5 	udiv	r1, r1, r5
 8109174:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8109178:	2100      	movs	r1, #0
 810917a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 810917e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109180:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8109182:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8109186:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8109188:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 810918c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 810918e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8109190:	4608      	mov	r0, r1
 8109192:	e7ef      	b.n	8109174 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8109194:	2002      	movs	r0, #2
}
 8109196:	4770      	bx	lr
 8109198:	0810a140 	.word	0x0810a140
 810919c:	0810a148 	.word	0x0810a148

081091a0 <pow>:
 81091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81091a2:	ed2d 8b02 	vpush	{d8}
 81091a6:	eeb0 8a40 	vmov.f32	s16, s0
 81091aa:	eef0 8a60 	vmov.f32	s17, s1
 81091ae:	ec55 4b11 	vmov	r4, r5, d1
 81091b2:	f000 f865 	bl	8109280 <__ieee754_pow>
 81091b6:	4622      	mov	r2, r4
 81091b8:	462b      	mov	r3, r5
 81091ba:	4620      	mov	r0, r4
 81091bc:	4629      	mov	r1, r5
 81091be:	ec57 6b10 	vmov	r6, r7, d0
 81091c2:	f7f7 fcdf 	bl	8100b84 <__aeabi_dcmpun>
 81091c6:	2800      	cmp	r0, #0
 81091c8:	d13b      	bne.n	8109242 <pow+0xa2>
 81091ca:	ec51 0b18 	vmov	r0, r1, d8
 81091ce:	2200      	movs	r2, #0
 81091d0:	2300      	movs	r3, #0
 81091d2:	f7f7 fca5 	bl	8100b20 <__aeabi_dcmpeq>
 81091d6:	b1b8      	cbz	r0, 8109208 <pow+0x68>
 81091d8:	2200      	movs	r2, #0
 81091da:	2300      	movs	r3, #0
 81091dc:	4620      	mov	r0, r4
 81091de:	4629      	mov	r1, r5
 81091e0:	f7f7 fc9e 	bl	8100b20 <__aeabi_dcmpeq>
 81091e4:	2800      	cmp	r0, #0
 81091e6:	d146      	bne.n	8109276 <pow+0xd6>
 81091e8:	ec45 4b10 	vmov	d0, r4, r5
 81091ec:	f000 fe61 	bl	8109eb2 <finite>
 81091f0:	b338      	cbz	r0, 8109242 <pow+0xa2>
 81091f2:	2200      	movs	r2, #0
 81091f4:	2300      	movs	r3, #0
 81091f6:	4620      	mov	r0, r4
 81091f8:	4629      	mov	r1, r5
 81091fa:	f7f7 fc9b 	bl	8100b34 <__aeabi_dcmplt>
 81091fe:	b300      	cbz	r0, 8109242 <pow+0xa2>
 8109200:	f000 fee8 	bl	8109fd4 <__errno>
 8109204:	2322      	movs	r3, #34	; 0x22
 8109206:	e01b      	b.n	8109240 <pow+0xa0>
 8109208:	ec47 6b10 	vmov	d0, r6, r7
 810920c:	f000 fe51 	bl	8109eb2 <finite>
 8109210:	b9e0      	cbnz	r0, 810924c <pow+0xac>
 8109212:	eeb0 0a48 	vmov.f32	s0, s16
 8109216:	eef0 0a68 	vmov.f32	s1, s17
 810921a:	f000 fe4a 	bl	8109eb2 <finite>
 810921e:	b1a8      	cbz	r0, 810924c <pow+0xac>
 8109220:	ec45 4b10 	vmov	d0, r4, r5
 8109224:	f000 fe45 	bl	8109eb2 <finite>
 8109228:	b180      	cbz	r0, 810924c <pow+0xac>
 810922a:	4632      	mov	r2, r6
 810922c:	463b      	mov	r3, r7
 810922e:	4630      	mov	r0, r6
 8109230:	4639      	mov	r1, r7
 8109232:	f7f7 fca7 	bl	8100b84 <__aeabi_dcmpun>
 8109236:	2800      	cmp	r0, #0
 8109238:	d0e2      	beq.n	8109200 <pow+0x60>
 810923a:	f000 fecb 	bl	8109fd4 <__errno>
 810923e:	2321      	movs	r3, #33	; 0x21
 8109240:	6003      	str	r3, [r0, #0]
 8109242:	ecbd 8b02 	vpop	{d8}
 8109246:	ec47 6b10 	vmov	d0, r6, r7
 810924a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810924c:	2200      	movs	r2, #0
 810924e:	2300      	movs	r3, #0
 8109250:	4630      	mov	r0, r6
 8109252:	4639      	mov	r1, r7
 8109254:	f7f7 fc64 	bl	8100b20 <__aeabi_dcmpeq>
 8109258:	2800      	cmp	r0, #0
 810925a:	d0f2      	beq.n	8109242 <pow+0xa2>
 810925c:	eeb0 0a48 	vmov.f32	s0, s16
 8109260:	eef0 0a68 	vmov.f32	s1, s17
 8109264:	f000 fe25 	bl	8109eb2 <finite>
 8109268:	2800      	cmp	r0, #0
 810926a:	d0ea      	beq.n	8109242 <pow+0xa2>
 810926c:	ec45 4b10 	vmov	d0, r4, r5
 8109270:	f000 fe1f 	bl	8109eb2 <finite>
 8109274:	e7c3      	b.n	81091fe <pow+0x5e>
 8109276:	4f01      	ldr	r7, [pc, #4]	; (810927c <pow+0xdc>)
 8109278:	2600      	movs	r6, #0
 810927a:	e7e2      	b.n	8109242 <pow+0xa2>
 810927c:	3ff00000 	.word	0x3ff00000

08109280 <__ieee754_pow>:
 8109280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109284:	ed2d 8b06 	vpush	{d8-d10}
 8109288:	b089      	sub	sp, #36	; 0x24
 810928a:	ed8d 1b00 	vstr	d1, [sp]
 810928e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8109292:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8109296:	ea58 0102 	orrs.w	r1, r8, r2
 810929a:	ec57 6b10 	vmov	r6, r7, d0
 810929e:	d115      	bne.n	81092cc <__ieee754_pow+0x4c>
 81092a0:	19b3      	adds	r3, r6, r6
 81092a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 81092a6:	4152      	adcs	r2, r2
 81092a8:	4299      	cmp	r1, r3
 81092aa:	4b89      	ldr	r3, [pc, #548]	; (81094d0 <__ieee754_pow+0x250>)
 81092ac:	4193      	sbcs	r3, r2
 81092ae:	f080 84d2 	bcs.w	8109c56 <__ieee754_pow+0x9d6>
 81092b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 81092b6:	4630      	mov	r0, r6
 81092b8:	4639      	mov	r1, r7
 81092ba:	f7f7 f813 	bl	81002e4 <__adddf3>
 81092be:	ec41 0b10 	vmov	d0, r0, r1
 81092c2:	b009      	add	sp, #36	; 0x24
 81092c4:	ecbd 8b06 	vpop	{d8-d10}
 81092c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81092cc:	4b81      	ldr	r3, [pc, #516]	; (81094d4 <__ieee754_pow+0x254>)
 81092ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 81092d2:	429c      	cmp	r4, r3
 81092d4:	ee10 aa10 	vmov	sl, s0
 81092d8:	463d      	mov	r5, r7
 81092da:	dc06      	bgt.n	81092ea <__ieee754_pow+0x6a>
 81092dc:	d101      	bne.n	81092e2 <__ieee754_pow+0x62>
 81092de:	2e00      	cmp	r6, #0
 81092e0:	d1e7      	bne.n	81092b2 <__ieee754_pow+0x32>
 81092e2:	4598      	cmp	r8, r3
 81092e4:	dc01      	bgt.n	81092ea <__ieee754_pow+0x6a>
 81092e6:	d10f      	bne.n	8109308 <__ieee754_pow+0x88>
 81092e8:	b172      	cbz	r2, 8109308 <__ieee754_pow+0x88>
 81092ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 81092ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 81092f2:	ea55 050a 	orrs.w	r5, r5, sl
 81092f6:	d1dc      	bne.n	81092b2 <__ieee754_pow+0x32>
 81092f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 81092fc:	18db      	adds	r3, r3, r3
 81092fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8109302:	4152      	adcs	r2, r2
 8109304:	429d      	cmp	r5, r3
 8109306:	e7d0      	b.n	81092aa <__ieee754_pow+0x2a>
 8109308:	2d00      	cmp	r5, #0
 810930a:	da3b      	bge.n	8109384 <__ieee754_pow+0x104>
 810930c:	4b72      	ldr	r3, [pc, #456]	; (81094d8 <__ieee754_pow+0x258>)
 810930e:	4598      	cmp	r8, r3
 8109310:	dc51      	bgt.n	81093b6 <__ieee754_pow+0x136>
 8109312:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8109316:	4598      	cmp	r8, r3
 8109318:	f340 84ac 	ble.w	8109c74 <__ieee754_pow+0x9f4>
 810931c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8109320:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8109324:	2b14      	cmp	r3, #20
 8109326:	dd0f      	ble.n	8109348 <__ieee754_pow+0xc8>
 8109328:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 810932c:	fa22 f103 	lsr.w	r1, r2, r3
 8109330:	fa01 f303 	lsl.w	r3, r1, r3
 8109334:	4293      	cmp	r3, r2
 8109336:	f040 849d 	bne.w	8109c74 <__ieee754_pow+0x9f4>
 810933a:	f001 0101 	and.w	r1, r1, #1
 810933e:	f1c1 0302 	rsb	r3, r1, #2
 8109342:	9304      	str	r3, [sp, #16]
 8109344:	b182      	cbz	r2, 8109368 <__ieee754_pow+0xe8>
 8109346:	e05f      	b.n	8109408 <__ieee754_pow+0x188>
 8109348:	2a00      	cmp	r2, #0
 810934a:	d15b      	bne.n	8109404 <__ieee754_pow+0x184>
 810934c:	f1c3 0314 	rsb	r3, r3, #20
 8109350:	fa48 f103 	asr.w	r1, r8, r3
 8109354:	fa01 f303 	lsl.w	r3, r1, r3
 8109358:	4543      	cmp	r3, r8
 810935a:	f040 8488 	bne.w	8109c6e <__ieee754_pow+0x9ee>
 810935e:	f001 0101 	and.w	r1, r1, #1
 8109362:	f1c1 0302 	rsb	r3, r1, #2
 8109366:	9304      	str	r3, [sp, #16]
 8109368:	4b5c      	ldr	r3, [pc, #368]	; (81094dc <__ieee754_pow+0x25c>)
 810936a:	4598      	cmp	r8, r3
 810936c:	d132      	bne.n	81093d4 <__ieee754_pow+0x154>
 810936e:	f1b9 0f00 	cmp.w	r9, #0
 8109372:	f280 8478 	bge.w	8109c66 <__ieee754_pow+0x9e6>
 8109376:	4959      	ldr	r1, [pc, #356]	; (81094dc <__ieee754_pow+0x25c>)
 8109378:	4632      	mov	r2, r6
 810937a:	463b      	mov	r3, r7
 810937c:	2000      	movs	r0, #0
 810937e:	f7f7 fa91 	bl	81008a4 <__aeabi_ddiv>
 8109382:	e79c      	b.n	81092be <__ieee754_pow+0x3e>
 8109384:	2300      	movs	r3, #0
 8109386:	9304      	str	r3, [sp, #16]
 8109388:	2a00      	cmp	r2, #0
 810938a:	d13d      	bne.n	8109408 <__ieee754_pow+0x188>
 810938c:	4b51      	ldr	r3, [pc, #324]	; (81094d4 <__ieee754_pow+0x254>)
 810938e:	4598      	cmp	r8, r3
 8109390:	d1ea      	bne.n	8109368 <__ieee754_pow+0xe8>
 8109392:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8109396:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810939a:	ea53 030a 	orrs.w	r3, r3, sl
 810939e:	f000 845a 	beq.w	8109c56 <__ieee754_pow+0x9d6>
 81093a2:	4b4f      	ldr	r3, [pc, #316]	; (81094e0 <__ieee754_pow+0x260>)
 81093a4:	429c      	cmp	r4, r3
 81093a6:	dd08      	ble.n	81093ba <__ieee754_pow+0x13a>
 81093a8:	f1b9 0f00 	cmp.w	r9, #0
 81093ac:	f2c0 8457 	blt.w	8109c5e <__ieee754_pow+0x9de>
 81093b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 81093b4:	e783      	b.n	81092be <__ieee754_pow+0x3e>
 81093b6:	2302      	movs	r3, #2
 81093b8:	e7e5      	b.n	8109386 <__ieee754_pow+0x106>
 81093ba:	f1b9 0f00 	cmp.w	r9, #0
 81093be:	f04f 0000 	mov.w	r0, #0
 81093c2:	f04f 0100 	mov.w	r1, #0
 81093c6:	f6bf af7a 	bge.w	81092be <__ieee754_pow+0x3e>
 81093ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 81093ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 81093d2:	e774      	b.n	81092be <__ieee754_pow+0x3e>
 81093d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 81093d8:	d106      	bne.n	81093e8 <__ieee754_pow+0x168>
 81093da:	4632      	mov	r2, r6
 81093dc:	463b      	mov	r3, r7
 81093de:	4630      	mov	r0, r6
 81093e0:	4639      	mov	r1, r7
 81093e2:	f7f7 f935 	bl	8100650 <__aeabi_dmul>
 81093e6:	e76a      	b.n	81092be <__ieee754_pow+0x3e>
 81093e8:	4b3e      	ldr	r3, [pc, #248]	; (81094e4 <__ieee754_pow+0x264>)
 81093ea:	4599      	cmp	r9, r3
 81093ec:	d10c      	bne.n	8109408 <__ieee754_pow+0x188>
 81093ee:	2d00      	cmp	r5, #0
 81093f0:	db0a      	blt.n	8109408 <__ieee754_pow+0x188>
 81093f2:	ec47 6b10 	vmov	d0, r6, r7
 81093f6:	b009      	add	sp, #36	; 0x24
 81093f8:	ecbd 8b06 	vpop	{d8-d10}
 81093fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109400:	f000 bc6c 	b.w	8109cdc <__ieee754_sqrt>
 8109404:	2300      	movs	r3, #0
 8109406:	9304      	str	r3, [sp, #16]
 8109408:	ec47 6b10 	vmov	d0, r6, r7
 810940c:	f000 fd48 	bl	8109ea0 <fabs>
 8109410:	ec51 0b10 	vmov	r0, r1, d0
 8109414:	f1ba 0f00 	cmp.w	sl, #0
 8109418:	d129      	bne.n	810946e <__ieee754_pow+0x1ee>
 810941a:	b124      	cbz	r4, 8109426 <__ieee754_pow+0x1a6>
 810941c:	4b2f      	ldr	r3, [pc, #188]	; (81094dc <__ieee754_pow+0x25c>)
 810941e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8109422:	429a      	cmp	r2, r3
 8109424:	d123      	bne.n	810946e <__ieee754_pow+0x1ee>
 8109426:	f1b9 0f00 	cmp.w	r9, #0
 810942a:	da05      	bge.n	8109438 <__ieee754_pow+0x1b8>
 810942c:	4602      	mov	r2, r0
 810942e:	460b      	mov	r3, r1
 8109430:	2000      	movs	r0, #0
 8109432:	492a      	ldr	r1, [pc, #168]	; (81094dc <__ieee754_pow+0x25c>)
 8109434:	f7f7 fa36 	bl	81008a4 <__aeabi_ddiv>
 8109438:	2d00      	cmp	r5, #0
 810943a:	f6bf af40 	bge.w	81092be <__ieee754_pow+0x3e>
 810943e:	9b04      	ldr	r3, [sp, #16]
 8109440:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8109444:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8109448:	4323      	orrs	r3, r4
 810944a:	d108      	bne.n	810945e <__ieee754_pow+0x1de>
 810944c:	4602      	mov	r2, r0
 810944e:	460b      	mov	r3, r1
 8109450:	4610      	mov	r0, r2
 8109452:	4619      	mov	r1, r3
 8109454:	f7f6 ff44 	bl	81002e0 <__aeabi_dsub>
 8109458:	4602      	mov	r2, r0
 810945a:	460b      	mov	r3, r1
 810945c:	e78f      	b.n	810937e <__ieee754_pow+0xfe>
 810945e:	9b04      	ldr	r3, [sp, #16]
 8109460:	2b01      	cmp	r3, #1
 8109462:	f47f af2c 	bne.w	81092be <__ieee754_pow+0x3e>
 8109466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810946a:	4619      	mov	r1, r3
 810946c:	e727      	b.n	81092be <__ieee754_pow+0x3e>
 810946e:	0feb      	lsrs	r3, r5, #31
 8109470:	3b01      	subs	r3, #1
 8109472:	9306      	str	r3, [sp, #24]
 8109474:	9a06      	ldr	r2, [sp, #24]
 8109476:	9b04      	ldr	r3, [sp, #16]
 8109478:	4313      	orrs	r3, r2
 810947a:	d102      	bne.n	8109482 <__ieee754_pow+0x202>
 810947c:	4632      	mov	r2, r6
 810947e:	463b      	mov	r3, r7
 8109480:	e7e6      	b.n	8109450 <__ieee754_pow+0x1d0>
 8109482:	4b19      	ldr	r3, [pc, #100]	; (81094e8 <__ieee754_pow+0x268>)
 8109484:	4598      	cmp	r8, r3
 8109486:	f340 80fb 	ble.w	8109680 <__ieee754_pow+0x400>
 810948a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810948e:	4598      	cmp	r8, r3
 8109490:	4b13      	ldr	r3, [pc, #76]	; (81094e0 <__ieee754_pow+0x260>)
 8109492:	dd0c      	ble.n	81094ae <__ieee754_pow+0x22e>
 8109494:	429c      	cmp	r4, r3
 8109496:	dc0f      	bgt.n	81094b8 <__ieee754_pow+0x238>
 8109498:	f1b9 0f00 	cmp.w	r9, #0
 810949c:	da0f      	bge.n	81094be <__ieee754_pow+0x23e>
 810949e:	2000      	movs	r0, #0
 81094a0:	b009      	add	sp, #36	; 0x24
 81094a2:	ecbd 8b06 	vpop	{d8-d10}
 81094a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81094aa:	f000 bcf0 	b.w	8109e8e <__math_oflow>
 81094ae:	429c      	cmp	r4, r3
 81094b0:	dbf2      	blt.n	8109498 <__ieee754_pow+0x218>
 81094b2:	4b0a      	ldr	r3, [pc, #40]	; (81094dc <__ieee754_pow+0x25c>)
 81094b4:	429c      	cmp	r4, r3
 81094b6:	dd19      	ble.n	81094ec <__ieee754_pow+0x26c>
 81094b8:	f1b9 0f00 	cmp.w	r9, #0
 81094bc:	dcef      	bgt.n	810949e <__ieee754_pow+0x21e>
 81094be:	2000      	movs	r0, #0
 81094c0:	b009      	add	sp, #36	; 0x24
 81094c2:	ecbd 8b06 	vpop	{d8-d10}
 81094c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81094ca:	f000 bcd7 	b.w	8109e7c <__math_uflow>
 81094ce:	bf00      	nop
 81094d0:	fff00000 	.word	0xfff00000
 81094d4:	7ff00000 	.word	0x7ff00000
 81094d8:	433fffff 	.word	0x433fffff
 81094dc:	3ff00000 	.word	0x3ff00000
 81094e0:	3fefffff 	.word	0x3fefffff
 81094e4:	3fe00000 	.word	0x3fe00000
 81094e8:	41e00000 	.word	0x41e00000
 81094ec:	4b60      	ldr	r3, [pc, #384]	; (8109670 <__ieee754_pow+0x3f0>)
 81094ee:	2200      	movs	r2, #0
 81094f0:	f7f6 fef6 	bl	81002e0 <__aeabi_dsub>
 81094f4:	a354      	add	r3, pc, #336	; (adr r3, 8109648 <__ieee754_pow+0x3c8>)
 81094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81094fa:	4604      	mov	r4, r0
 81094fc:	460d      	mov	r5, r1
 81094fe:	f7f7 f8a7 	bl	8100650 <__aeabi_dmul>
 8109502:	a353      	add	r3, pc, #332	; (adr r3, 8109650 <__ieee754_pow+0x3d0>)
 8109504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109508:	4606      	mov	r6, r0
 810950a:	460f      	mov	r7, r1
 810950c:	4620      	mov	r0, r4
 810950e:	4629      	mov	r1, r5
 8109510:	f7f7 f89e 	bl	8100650 <__aeabi_dmul>
 8109514:	4b57      	ldr	r3, [pc, #348]	; (8109674 <__ieee754_pow+0x3f4>)
 8109516:	4682      	mov	sl, r0
 8109518:	468b      	mov	fp, r1
 810951a:	2200      	movs	r2, #0
 810951c:	4620      	mov	r0, r4
 810951e:	4629      	mov	r1, r5
 8109520:	f7f7 f896 	bl	8100650 <__aeabi_dmul>
 8109524:	4602      	mov	r2, r0
 8109526:	460b      	mov	r3, r1
 8109528:	a14b      	add	r1, pc, #300	; (adr r1, 8109658 <__ieee754_pow+0x3d8>)
 810952a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810952e:	f7f6 fed7 	bl	81002e0 <__aeabi_dsub>
 8109532:	4622      	mov	r2, r4
 8109534:	462b      	mov	r3, r5
 8109536:	f7f7 f88b 	bl	8100650 <__aeabi_dmul>
 810953a:	4602      	mov	r2, r0
 810953c:	460b      	mov	r3, r1
 810953e:	2000      	movs	r0, #0
 8109540:	494d      	ldr	r1, [pc, #308]	; (8109678 <__ieee754_pow+0x3f8>)
 8109542:	f7f6 fecd 	bl	81002e0 <__aeabi_dsub>
 8109546:	4622      	mov	r2, r4
 8109548:	4680      	mov	r8, r0
 810954a:	4689      	mov	r9, r1
 810954c:	462b      	mov	r3, r5
 810954e:	4620      	mov	r0, r4
 8109550:	4629      	mov	r1, r5
 8109552:	f7f7 f87d 	bl	8100650 <__aeabi_dmul>
 8109556:	4602      	mov	r2, r0
 8109558:	460b      	mov	r3, r1
 810955a:	4640      	mov	r0, r8
 810955c:	4649      	mov	r1, r9
 810955e:	f7f7 f877 	bl	8100650 <__aeabi_dmul>
 8109562:	a33f      	add	r3, pc, #252	; (adr r3, 8109660 <__ieee754_pow+0x3e0>)
 8109564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109568:	f7f7 f872 	bl	8100650 <__aeabi_dmul>
 810956c:	4602      	mov	r2, r0
 810956e:	460b      	mov	r3, r1
 8109570:	4650      	mov	r0, sl
 8109572:	4659      	mov	r1, fp
 8109574:	f7f6 feb4 	bl	81002e0 <__aeabi_dsub>
 8109578:	4602      	mov	r2, r0
 810957a:	460b      	mov	r3, r1
 810957c:	4680      	mov	r8, r0
 810957e:	4689      	mov	r9, r1
 8109580:	4630      	mov	r0, r6
 8109582:	4639      	mov	r1, r7
 8109584:	f7f6 feae 	bl	81002e4 <__adddf3>
 8109588:	2000      	movs	r0, #0
 810958a:	4632      	mov	r2, r6
 810958c:	463b      	mov	r3, r7
 810958e:	4604      	mov	r4, r0
 8109590:	460d      	mov	r5, r1
 8109592:	f7f6 fea5 	bl	81002e0 <__aeabi_dsub>
 8109596:	4602      	mov	r2, r0
 8109598:	460b      	mov	r3, r1
 810959a:	4640      	mov	r0, r8
 810959c:	4649      	mov	r1, r9
 810959e:	f7f6 fe9f 	bl	81002e0 <__aeabi_dsub>
 81095a2:	9b04      	ldr	r3, [sp, #16]
 81095a4:	9a06      	ldr	r2, [sp, #24]
 81095a6:	3b01      	subs	r3, #1
 81095a8:	4313      	orrs	r3, r2
 81095aa:	4682      	mov	sl, r0
 81095ac:	468b      	mov	fp, r1
 81095ae:	f040 81e7 	bne.w	8109980 <__ieee754_pow+0x700>
 81095b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8109668 <__ieee754_pow+0x3e8>
 81095b6:	eeb0 8a47 	vmov.f32	s16, s14
 81095ba:	eef0 8a67 	vmov.f32	s17, s15
 81095be:	e9dd 6700 	ldrd	r6, r7, [sp]
 81095c2:	2600      	movs	r6, #0
 81095c4:	4632      	mov	r2, r6
 81095c6:	463b      	mov	r3, r7
 81095c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 81095cc:	f7f6 fe88 	bl	81002e0 <__aeabi_dsub>
 81095d0:	4622      	mov	r2, r4
 81095d2:	462b      	mov	r3, r5
 81095d4:	f7f7 f83c 	bl	8100650 <__aeabi_dmul>
 81095d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 81095dc:	4680      	mov	r8, r0
 81095de:	4689      	mov	r9, r1
 81095e0:	4650      	mov	r0, sl
 81095e2:	4659      	mov	r1, fp
 81095e4:	f7f7 f834 	bl	8100650 <__aeabi_dmul>
 81095e8:	4602      	mov	r2, r0
 81095ea:	460b      	mov	r3, r1
 81095ec:	4640      	mov	r0, r8
 81095ee:	4649      	mov	r1, r9
 81095f0:	f7f6 fe78 	bl	81002e4 <__adddf3>
 81095f4:	4632      	mov	r2, r6
 81095f6:	463b      	mov	r3, r7
 81095f8:	4680      	mov	r8, r0
 81095fa:	4689      	mov	r9, r1
 81095fc:	4620      	mov	r0, r4
 81095fe:	4629      	mov	r1, r5
 8109600:	f7f7 f826 	bl	8100650 <__aeabi_dmul>
 8109604:	460b      	mov	r3, r1
 8109606:	4604      	mov	r4, r0
 8109608:	460d      	mov	r5, r1
 810960a:	4602      	mov	r2, r0
 810960c:	4649      	mov	r1, r9
 810960e:	4640      	mov	r0, r8
 8109610:	f7f6 fe68 	bl	81002e4 <__adddf3>
 8109614:	4b19      	ldr	r3, [pc, #100]	; (810967c <__ieee754_pow+0x3fc>)
 8109616:	4299      	cmp	r1, r3
 8109618:	ec45 4b19 	vmov	d9, r4, r5
 810961c:	4606      	mov	r6, r0
 810961e:	460f      	mov	r7, r1
 8109620:	468b      	mov	fp, r1
 8109622:	f340 82f1 	ble.w	8109c08 <__ieee754_pow+0x988>
 8109626:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810962a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810962e:	4303      	orrs	r3, r0
 8109630:	f000 81e4 	beq.w	81099fc <__ieee754_pow+0x77c>
 8109634:	ec51 0b18 	vmov	r0, r1, d8
 8109638:	2200      	movs	r2, #0
 810963a:	2300      	movs	r3, #0
 810963c:	f7f7 fa7a 	bl	8100b34 <__aeabi_dcmplt>
 8109640:	3800      	subs	r0, #0
 8109642:	bf18      	it	ne
 8109644:	2001      	movne	r0, #1
 8109646:	e72b      	b.n	81094a0 <__ieee754_pow+0x220>
 8109648:	60000000 	.word	0x60000000
 810964c:	3ff71547 	.word	0x3ff71547
 8109650:	f85ddf44 	.word	0xf85ddf44
 8109654:	3e54ae0b 	.word	0x3e54ae0b
 8109658:	55555555 	.word	0x55555555
 810965c:	3fd55555 	.word	0x3fd55555
 8109660:	652b82fe 	.word	0x652b82fe
 8109664:	3ff71547 	.word	0x3ff71547
 8109668:	00000000 	.word	0x00000000
 810966c:	bff00000 	.word	0xbff00000
 8109670:	3ff00000 	.word	0x3ff00000
 8109674:	3fd00000 	.word	0x3fd00000
 8109678:	3fe00000 	.word	0x3fe00000
 810967c:	408fffff 	.word	0x408fffff
 8109680:	4bd5      	ldr	r3, [pc, #852]	; (81099d8 <__ieee754_pow+0x758>)
 8109682:	402b      	ands	r3, r5
 8109684:	2200      	movs	r2, #0
 8109686:	b92b      	cbnz	r3, 8109694 <__ieee754_pow+0x414>
 8109688:	4bd4      	ldr	r3, [pc, #848]	; (81099dc <__ieee754_pow+0x75c>)
 810968a:	f7f6 ffe1 	bl	8100650 <__aeabi_dmul>
 810968e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8109692:	460c      	mov	r4, r1
 8109694:	1523      	asrs	r3, r4, #20
 8109696:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810969a:	4413      	add	r3, r2
 810969c:	9305      	str	r3, [sp, #20]
 810969e:	4bd0      	ldr	r3, [pc, #832]	; (81099e0 <__ieee754_pow+0x760>)
 81096a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 81096a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 81096a8:	429c      	cmp	r4, r3
 81096aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 81096ae:	dd08      	ble.n	81096c2 <__ieee754_pow+0x442>
 81096b0:	4bcc      	ldr	r3, [pc, #816]	; (81099e4 <__ieee754_pow+0x764>)
 81096b2:	429c      	cmp	r4, r3
 81096b4:	f340 8162 	ble.w	810997c <__ieee754_pow+0x6fc>
 81096b8:	9b05      	ldr	r3, [sp, #20]
 81096ba:	3301      	adds	r3, #1
 81096bc:	9305      	str	r3, [sp, #20]
 81096be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 81096c2:	2400      	movs	r4, #0
 81096c4:	00e3      	lsls	r3, r4, #3
 81096c6:	9307      	str	r3, [sp, #28]
 81096c8:	4bc7      	ldr	r3, [pc, #796]	; (81099e8 <__ieee754_pow+0x768>)
 81096ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 81096ce:	ed93 7b00 	vldr	d7, [r3]
 81096d2:	4629      	mov	r1, r5
 81096d4:	ec53 2b17 	vmov	r2, r3, d7
 81096d8:	eeb0 9a47 	vmov.f32	s18, s14
 81096dc:	eef0 9a67 	vmov.f32	s19, s15
 81096e0:	4682      	mov	sl, r0
 81096e2:	f7f6 fdfd 	bl	81002e0 <__aeabi_dsub>
 81096e6:	4652      	mov	r2, sl
 81096e8:	4606      	mov	r6, r0
 81096ea:	460f      	mov	r7, r1
 81096ec:	462b      	mov	r3, r5
 81096ee:	ec51 0b19 	vmov	r0, r1, d9
 81096f2:	f7f6 fdf7 	bl	81002e4 <__adddf3>
 81096f6:	4602      	mov	r2, r0
 81096f8:	460b      	mov	r3, r1
 81096fa:	2000      	movs	r0, #0
 81096fc:	49bb      	ldr	r1, [pc, #748]	; (81099ec <__ieee754_pow+0x76c>)
 81096fe:	f7f7 f8d1 	bl	81008a4 <__aeabi_ddiv>
 8109702:	ec41 0b1a 	vmov	d10, r0, r1
 8109706:	4602      	mov	r2, r0
 8109708:	460b      	mov	r3, r1
 810970a:	4630      	mov	r0, r6
 810970c:	4639      	mov	r1, r7
 810970e:	f7f6 ff9f 	bl	8100650 <__aeabi_dmul>
 8109712:	2300      	movs	r3, #0
 8109714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109718:	9302      	str	r3, [sp, #8]
 810971a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810971e:	46ab      	mov	fp, r5
 8109720:	106d      	asrs	r5, r5, #1
 8109722:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8109726:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810972a:	ec41 0b18 	vmov	d8, r0, r1
 810972e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8109732:	2200      	movs	r2, #0
 8109734:	4640      	mov	r0, r8
 8109736:	4649      	mov	r1, r9
 8109738:	4614      	mov	r4, r2
 810973a:	461d      	mov	r5, r3
 810973c:	f7f6 ff88 	bl	8100650 <__aeabi_dmul>
 8109740:	4602      	mov	r2, r0
 8109742:	460b      	mov	r3, r1
 8109744:	4630      	mov	r0, r6
 8109746:	4639      	mov	r1, r7
 8109748:	f7f6 fdca 	bl	81002e0 <__aeabi_dsub>
 810974c:	ec53 2b19 	vmov	r2, r3, d9
 8109750:	4606      	mov	r6, r0
 8109752:	460f      	mov	r7, r1
 8109754:	4620      	mov	r0, r4
 8109756:	4629      	mov	r1, r5
 8109758:	f7f6 fdc2 	bl	81002e0 <__aeabi_dsub>
 810975c:	4602      	mov	r2, r0
 810975e:	460b      	mov	r3, r1
 8109760:	4650      	mov	r0, sl
 8109762:	4659      	mov	r1, fp
 8109764:	f7f6 fdbc 	bl	81002e0 <__aeabi_dsub>
 8109768:	4642      	mov	r2, r8
 810976a:	464b      	mov	r3, r9
 810976c:	f7f6 ff70 	bl	8100650 <__aeabi_dmul>
 8109770:	4602      	mov	r2, r0
 8109772:	460b      	mov	r3, r1
 8109774:	4630      	mov	r0, r6
 8109776:	4639      	mov	r1, r7
 8109778:	f7f6 fdb2 	bl	81002e0 <__aeabi_dsub>
 810977c:	ec53 2b1a 	vmov	r2, r3, d10
 8109780:	f7f6 ff66 	bl	8100650 <__aeabi_dmul>
 8109784:	ec53 2b18 	vmov	r2, r3, d8
 8109788:	ec41 0b19 	vmov	d9, r0, r1
 810978c:	ec51 0b18 	vmov	r0, r1, d8
 8109790:	f7f6 ff5e 	bl	8100650 <__aeabi_dmul>
 8109794:	a37c      	add	r3, pc, #496	; (adr r3, 8109988 <__ieee754_pow+0x708>)
 8109796:	e9d3 2300 	ldrd	r2, r3, [r3]
 810979a:	4604      	mov	r4, r0
 810979c:	460d      	mov	r5, r1
 810979e:	f7f6 ff57 	bl	8100650 <__aeabi_dmul>
 81097a2:	a37b      	add	r3, pc, #492	; (adr r3, 8109990 <__ieee754_pow+0x710>)
 81097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81097a8:	f7f6 fd9c 	bl	81002e4 <__adddf3>
 81097ac:	4622      	mov	r2, r4
 81097ae:	462b      	mov	r3, r5
 81097b0:	f7f6 ff4e 	bl	8100650 <__aeabi_dmul>
 81097b4:	a378      	add	r3, pc, #480	; (adr r3, 8109998 <__ieee754_pow+0x718>)
 81097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81097ba:	f7f6 fd93 	bl	81002e4 <__adddf3>
 81097be:	4622      	mov	r2, r4
 81097c0:	462b      	mov	r3, r5
 81097c2:	f7f6 ff45 	bl	8100650 <__aeabi_dmul>
 81097c6:	a376      	add	r3, pc, #472	; (adr r3, 81099a0 <__ieee754_pow+0x720>)
 81097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81097cc:	f7f6 fd8a 	bl	81002e4 <__adddf3>
 81097d0:	4622      	mov	r2, r4
 81097d2:	462b      	mov	r3, r5
 81097d4:	f7f6 ff3c 	bl	8100650 <__aeabi_dmul>
 81097d8:	a373      	add	r3, pc, #460	; (adr r3, 81099a8 <__ieee754_pow+0x728>)
 81097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81097de:	f7f6 fd81 	bl	81002e4 <__adddf3>
 81097e2:	4622      	mov	r2, r4
 81097e4:	462b      	mov	r3, r5
 81097e6:	f7f6 ff33 	bl	8100650 <__aeabi_dmul>
 81097ea:	a371      	add	r3, pc, #452	; (adr r3, 81099b0 <__ieee754_pow+0x730>)
 81097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81097f0:	f7f6 fd78 	bl	81002e4 <__adddf3>
 81097f4:	4622      	mov	r2, r4
 81097f6:	4606      	mov	r6, r0
 81097f8:	460f      	mov	r7, r1
 81097fa:	462b      	mov	r3, r5
 81097fc:	4620      	mov	r0, r4
 81097fe:	4629      	mov	r1, r5
 8109800:	f7f6 ff26 	bl	8100650 <__aeabi_dmul>
 8109804:	4602      	mov	r2, r0
 8109806:	460b      	mov	r3, r1
 8109808:	4630      	mov	r0, r6
 810980a:	4639      	mov	r1, r7
 810980c:	f7f6 ff20 	bl	8100650 <__aeabi_dmul>
 8109810:	4642      	mov	r2, r8
 8109812:	4604      	mov	r4, r0
 8109814:	460d      	mov	r5, r1
 8109816:	464b      	mov	r3, r9
 8109818:	ec51 0b18 	vmov	r0, r1, d8
 810981c:	f7f6 fd62 	bl	81002e4 <__adddf3>
 8109820:	ec53 2b19 	vmov	r2, r3, d9
 8109824:	f7f6 ff14 	bl	8100650 <__aeabi_dmul>
 8109828:	4622      	mov	r2, r4
 810982a:	462b      	mov	r3, r5
 810982c:	f7f6 fd5a 	bl	81002e4 <__adddf3>
 8109830:	4642      	mov	r2, r8
 8109832:	4682      	mov	sl, r0
 8109834:	468b      	mov	fp, r1
 8109836:	464b      	mov	r3, r9
 8109838:	4640      	mov	r0, r8
 810983a:	4649      	mov	r1, r9
 810983c:	f7f6 ff08 	bl	8100650 <__aeabi_dmul>
 8109840:	4b6b      	ldr	r3, [pc, #428]	; (81099f0 <__ieee754_pow+0x770>)
 8109842:	2200      	movs	r2, #0
 8109844:	4606      	mov	r6, r0
 8109846:	460f      	mov	r7, r1
 8109848:	f7f6 fd4c 	bl	81002e4 <__adddf3>
 810984c:	4652      	mov	r2, sl
 810984e:	465b      	mov	r3, fp
 8109850:	f7f6 fd48 	bl	81002e4 <__adddf3>
 8109854:	2000      	movs	r0, #0
 8109856:	4604      	mov	r4, r0
 8109858:	460d      	mov	r5, r1
 810985a:	4602      	mov	r2, r0
 810985c:	460b      	mov	r3, r1
 810985e:	4640      	mov	r0, r8
 8109860:	4649      	mov	r1, r9
 8109862:	f7f6 fef5 	bl	8100650 <__aeabi_dmul>
 8109866:	4b62      	ldr	r3, [pc, #392]	; (81099f0 <__ieee754_pow+0x770>)
 8109868:	4680      	mov	r8, r0
 810986a:	4689      	mov	r9, r1
 810986c:	2200      	movs	r2, #0
 810986e:	4620      	mov	r0, r4
 8109870:	4629      	mov	r1, r5
 8109872:	f7f6 fd35 	bl	81002e0 <__aeabi_dsub>
 8109876:	4632      	mov	r2, r6
 8109878:	463b      	mov	r3, r7
 810987a:	f7f6 fd31 	bl	81002e0 <__aeabi_dsub>
 810987e:	4602      	mov	r2, r0
 8109880:	460b      	mov	r3, r1
 8109882:	4650      	mov	r0, sl
 8109884:	4659      	mov	r1, fp
 8109886:	f7f6 fd2b 	bl	81002e0 <__aeabi_dsub>
 810988a:	ec53 2b18 	vmov	r2, r3, d8
 810988e:	f7f6 fedf 	bl	8100650 <__aeabi_dmul>
 8109892:	4622      	mov	r2, r4
 8109894:	4606      	mov	r6, r0
 8109896:	460f      	mov	r7, r1
 8109898:	462b      	mov	r3, r5
 810989a:	ec51 0b19 	vmov	r0, r1, d9
 810989e:	f7f6 fed7 	bl	8100650 <__aeabi_dmul>
 81098a2:	4602      	mov	r2, r0
 81098a4:	460b      	mov	r3, r1
 81098a6:	4630      	mov	r0, r6
 81098a8:	4639      	mov	r1, r7
 81098aa:	f7f6 fd1b 	bl	81002e4 <__adddf3>
 81098ae:	4606      	mov	r6, r0
 81098b0:	460f      	mov	r7, r1
 81098b2:	4602      	mov	r2, r0
 81098b4:	460b      	mov	r3, r1
 81098b6:	4640      	mov	r0, r8
 81098b8:	4649      	mov	r1, r9
 81098ba:	f7f6 fd13 	bl	81002e4 <__adddf3>
 81098be:	a33e      	add	r3, pc, #248	; (adr r3, 81099b8 <__ieee754_pow+0x738>)
 81098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098c4:	2000      	movs	r0, #0
 81098c6:	4604      	mov	r4, r0
 81098c8:	460d      	mov	r5, r1
 81098ca:	f7f6 fec1 	bl	8100650 <__aeabi_dmul>
 81098ce:	4642      	mov	r2, r8
 81098d0:	ec41 0b18 	vmov	d8, r0, r1
 81098d4:	464b      	mov	r3, r9
 81098d6:	4620      	mov	r0, r4
 81098d8:	4629      	mov	r1, r5
 81098da:	f7f6 fd01 	bl	81002e0 <__aeabi_dsub>
 81098de:	4602      	mov	r2, r0
 81098e0:	460b      	mov	r3, r1
 81098e2:	4630      	mov	r0, r6
 81098e4:	4639      	mov	r1, r7
 81098e6:	f7f6 fcfb 	bl	81002e0 <__aeabi_dsub>
 81098ea:	a335      	add	r3, pc, #212	; (adr r3, 81099c0 <__ieee754_pow+0x740>)
 81098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098f0:	f7f6 feae 	bl	8100650 <__aeabi_dmul>
 81098f4:	a334      	add	r3, pc, #208	; (adr r3, 81099c8 <__ieee754_pow+0x748>)
 81098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098fa:	4606      	mov	r6, r0
 81098fc:	460f      	mov	r7, r1
 81098fe:	4620      	mov	r0, r4
 8109900:	4629      	mov	r1, r5
 8109902:	f7f6 fea5 	bl	8100650 <__aeabi_dmul>
 8109906:	4602      	mov	r2, r0
 8109908:	460b      	mov	r3, r1
 810990a:	4630      	mov	r0, r6
 810990c:	4639      	mov	r1, r7
 810990e:	f7f6 fce9 	bl	81002e4 <__adddf3>
 8109912:	9a07      	ldr	r2, [sp, #28]
 8109914:	4b37      	ldr	r3, [pc, #220]	; (81099f4 <__ieee754_pow+0x774>)
 8109916:	4413      	add	r3, r2
 8109918:	e9d3 2300 	ldrd	r2, r3, [r3]
 810991c:	f7f6 fce2 	bl	81002e4 <__adddf3>
 8109920:	4682      	mov	sl, r0
 8109922:	9805      	ldr	r0, [sp, #20]
 8109924:	468b      	mov	fp, r1
 8109926:	f7f6 fe29 	bl	810057c <__aeabi_i2d>
 810992a:	9a07      	ldr	r2, [sp, #28]
 810992c:	4b32      	ldr	r3, [pc, #200]	; (81099f8 <__ieee754_pow+0x778>)
 810992e:	4413      	add	r3, r2
 8109930:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109934:	4606      	mov	r6, r0
 8109936:	460f      	mov	r7, r1
 8109938:	4652      	mov	r2, sl
 810993a:	465b      	mov	r3, fp
 810993c:	ec51 0b18 	vmov	r0, r1, d8
 8109940:	f7f6 fcd0 	bl	81002e4 <__adddf3>
 8109944:	4642      	mov	r2, r8
 8109946:	464b      	mov	r3, r9
 8109948:	f7f6 fccc 	bl	81002e4 <__adddf3>
 810994c:	4632      	mov	r2, r6
 810994e:	463b      	mov	r3, r7
 8109950:	f7f6 fcc8 	bl	81002e4 <__adddf3>
 8109954:	2000      	movs	r0, #0
 8109956:	4632      	mov	r2, r6
 8109958:	463b      	mov	r3, r7
 810995a:	4604      	mov	r4, r0
 810995c:	460d      	mov	r5, r1
 810995e:	f7f6 fcbf 	bl	81002e0 <__aeabi_dsub>
 8109962:	4642      	mov	r2, r8
 8109964:	464b      	mov	r3, r9
 8109966:	f7f6 fcbb 	bl	81002e0 <__aeabi_dsub>
 810996a:	ec53 2b18 	vmov	r2, r3, d8
 810996e:	f7f6 fcb7 	bl	81002e0 <__aeabi_dsub>
 8109972:	4602      	mov	r2, r0
 8109974:	460b      	mov	r3, r1
 8109976:	4650      	mov	r0, sl
 8109978:	4659      	mov	r1, fp
 810997a:	e610      	b.n	810959e <__ieee754_pow+0x31e>
 810997c:	2401      	movs	r4, #1
 810997e:	e6a1      	b.n	81096c4 <__ieee754_pow+0x444>
 8109980:	ed9f 7b13 	vldr	d7, [pc, #76]	; 81099d0 <__ieee754_pow+0x750>
 8109984:	e617      	b.n	81095b6 <__ieee754_pow+0x336>
 8109986:	bf00      	nop
 8109988:	4a454eef 	.word	0x4a454eef
 810998c:	3fca7e28 	.word	0x3fca7e28
 8109990:	93c9db65 	.word	0x93c9db65
 8109994:	3fcd864a 	.word	0x3fcd864a
 8109998:	a91d4101 	.word	0xa91d4101
 810999c:	3fd17460 	.word	0x3fd17460
 81099a0:	518f264d 	.word	0x518f264d
 81099a4:	3fd55555 	.word	0x3fd55555
 81099a8:	db6fabff 	.word	0xdb6fabff
 81099ac:	3fdb6db6 	.word	0x3fdb6db6
 81099b0:	33333303 	.word	0x33333303
 81099b4:	3fe33333 	.word	0x3fe33333
 81099b8:	e0000000 	.word	0xe0000000
 81099bc:	3feec709 	.word	0x3feec709
 81099c0:	dc3a03fd 	.word	0xdc3a03fd
 81099c4:	3feec709 	.word	0x3feec709
 81099c8:	145b01f5 	.word	0x145b01f5
 81099cc:	be3e2fe0 	.word	0xbe3e2fe0
 81099d0:	00000000 	.word	0x00000000
 81099d4:	3ff00000 	.word	0x3ff00000
 81099d8:	7ff00000 	.word	0x7ff00000
 81099dc:	43400000 	.word	0x43400000
 81099e0:	0003988e 	.word	0x0003988e
 81099e4:	000bb679 	.word	0x000bb679
 81099e8:	0810a150 	.word	0x0810a150
 81099ec:	3ff00000 	.word	0x3ff00000
 81099f0:	40080000 	.word	0x40080000
 81099f4:	0810a170 	.word	0x0810a170
 81099f8:	0810a160 	.word	0x0810a160
 81099fc:	a3b5      	add	r3, pc, #724	; (adr r3, 8109cd4 <__ieee754_pow+0xa54>)
 81099fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109a02:	4640      	mov	r0, r8
 8109a04:	4649      	mov	r1, r9
 8109a06:	f7f6 fc6d 	bl	81002e4 <__adddf3>
 8109a0a:	4622      	mov	r2, r4
 8109a0c:	ec41 0b1a 	vmov	d10, r0, r1
 8109a10:	462b      	mov	r3, r5
 8109a12:	4630      	mov	r0, r6
 8109a14:	4639      	mov	r1, r7
 8109a16:	f7f6 fc63 	bl	81002e0 <__aeabi_dsub>
 8109a1a:	4602      	mov	r2, r0
 8109a1c:	460b      	mov	r3, r1
 8109a1e:	ec51 0b1a 	vmov	r0, r1, d10
 8109a22:	f7f7 f8a5 	bl	8100b70 <__aeabi_dcmpgt>
 8109a26:	2800      	cmp	r0, #0
 8109a28:	f47f ae04 	bne.w	8109634 <__ieee754_pow+0x3b4>
 8109a2c:	4aa4      	ldr	r2, [pc, #656]	; (8109cc0 <__ieee754_pow+0xa40>)
 8109a2e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109a32:	4293      	cmp	r3, r2
 8109a34:	f340 8108 	ble.w	8109c48 <__ieee754_pow+0x9c8>
 8109a38:	151b      	asrs	r3, r3, #20
 8109a3a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8109a3e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8109a42:	fa4a f303 	asr.w	r3, sl, r3
 8109a46:	445b      	add	r3, fp
 8109a48:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8109a4c:	4e9d      	ldr	r6, [pc, #628]	; (8109cc4 <__ieee754_pow+0xa44>)
 8109a4e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8109a52:	4116      	asrs	r6, r2
 8109a54:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8109a58:	2000      	movs	r0, #0
 8109a5a:	ea23 0106 	bic.w	r1, r3, r6
 8109a5e:	f1c2 0214 	rsb	r2, r2, #20
 8109a62:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8109a66:	fa4a fa02 	asr.w	sl, sl, r2
 8109a6a:	f1bb 0f00 	cmp.w	fp, #0
 8109a6e:	4602      	mov	r2, r0
 8109a70:	460b      	mov	r3, r1
 8109a72:	4620      	mov	r0, r4
 8109a74:	4629      	mov	r1, r5
 8109a76:	bfb8      	it	lt
 8109a78:	f1ca 0a00 	rsblt	sl, sl, #0
 8109a7c:	f7f6 fc30 	bl	81002e0 <__aeabi_dsub>
 8109a80:	ec41 0b19 	vmov	d9, r0, r1
 8109a84:	4642      	mov	r2, r8
 8109a86:	464b      	mov	r3, r9
 8109a88:	ec51 0b19 	vmov	r0, r1, d9
 8109a8c:	f7f6 fc2a 	bl	81002e4 <__adddf3>
 8109a90:	a37b      	add	r3, pc, #492	; (adr r3, 8109c80 <__ieee754_pow+0xa00>)
 8109a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109a96:	2000      	movs	r0, #0
 8109a98:	4604      	mov	r4, r0
 8109a9a:	460d      	mov	r5, r1
 8109a9c:	f7f6 fdd8 	bl	8100650 <__aeabi_dmul>
 8109aa0:	ec53 2b19 	vmov	r2, r3, d9
 8109aa4:	4606      	mov	r6, r0
 8109aa6:	460f      	mov	r7, r1
 8109aa8:	4620      	mov	r0, r4
 8109aaa:	4629      	mov	r1, r5
 8109aac:	f7f6 fc18 	bl	81002e0 <__aeabi_dsub>
 8109ab0:	4602      	mov	r2, r0
 8109ab2:	460b      	mov	r3, r1
 8109ab4:	4640      	mov	r0, r8
 8109ab6:	4649      	mov	r1, r9
 8109ab8:	f7f6 fc12 	bl	81002e0 <__aeabi_dsub>
 8109abc:	a372      	add	r3, pc, #456	; (adr r3, 8109c88 <__ieee754_pow+0xa08>)
 8109abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ac2:	f7f6 fdc5 	bl	8100650 <__aeabi_dmul>
 8109ac6:	a372      	add	r3, pc, #456	; (adr r3, 8109c90 <__ieee754_pow+0xa10>)
 8109ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109acc:	4680      	mov	r8, r0
 8109ace:	4689      	mov	r9, r1
 8109ad0:	4620      	mov	r0, r4
 8109ad2:	4629      	mov	r1, r5
 8109ad4:	f7f6 fdbc 	bl	8100650 <__aeabi_dmul>
 8109ad8:	4602      	mov	r2, r0
 8109ada:	460b      	mov	r3, r1
 8109adc:	4640      	mov	r0, r8
 8109ade:	4649      	mov	r1, r9
 8109ae0:	f7f6 fc00 	bl	81002e4 <__adddf3>
 8109ae4:	4604      	mov	r4, r0
 8109ae6:	460d      	mov	r5, r1
 8109ae8:	4602      	mov	r2, r0
 8109aea:	460b      	mov	r3, r1
 8109aec:	4630      	mov	r0, r6
 8109aee:	4639      	mov	r1, r7
 8109af0:	f7f6 fbf8 	bl	81002e4 <__adddf3>
 8109af4:	4632      	mov	r2, r6
 8109af6:	463b      	mov	r3, r7
 8109af8:	4680      	mov	r8, r0
 8109afa:	4689      	mov	r9, r1
 8109afc:	f7f6 fbf0 	bl	81002e0 <__aeabi_dsub>
 8109b00:	4602      	mov	r2, r0
 8109b02:	460b      	mov	r3, r1
 8109b04:	4620      	mov	r0, r4
 8109b06:	4629      	mov	r1, r5
 8109b08:	f7f6 fbea 	bl	81002e0 <__aeabi_dsub>
 8109b0c:	4642      	mov	r2, r8
 8109b0e:	4606      	mov	r6, r0
 8109b10:	460f      	mov	r7, r1
 8109b12:	464b      	mov	r3, r9
 8109b14:	4640      	mov	r0, r8
 8109b16:	4649      	mov	r1, r9
 8109b18:	f7f6 fd9a 	bl	8100650 <__aeabi_dmul>
 8109b1c:	a35e      	add	r3, pc, #376	; (adr r3, 8109c98 <__ieee754_pow+0xa18>)
 8109b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b22:	4604      	mov	r4, r0
 8109b24:	460d      	mov	r5, r1
 8109b26:	f7f6 fd93 	bl	8100650 <__aeabi_dmul>
 8109b2a:	a35d      	add	r3, pc, #372	; (adr r3, 8109ca0 <__ieee754_pow+0xa20>)
 8109b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b30:	f7f6 fbd6 	bl	81002e0 <__aeabi_dsub>
 8109b34:	4622      	mov	r2, r4
 8109b36:	462b      	mov	r3, r5
 8109b38:	f7f6 fd8a 	bl	8100650 <__aeabi_dmul>
 8109b3c:	a35a      	add	r3, pc, #360	; (adr r3, 8109ca8 <__ieee754_pow+0xa28>)
 8109b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b42:	f7f6 fbcf 	bl	81002e4 <__adddf3>
 8109b46:	4622      	mov	r2, r4
 8109b48:	462b      	mov	r3, r5
 8109b4a:	f7f6 fd81 	bl	8100650 <__aeabi_dmul>
 8109b4e:	a358      	add	r3, pc, #352	; (adr r3, 8109cb0 <__ieee754_pow+0xa30>)
 8109b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b54:	f7f6 fbc4 	bl	81002e0 <__aeabi_dsub>
 8109b58:	4622      	mov	r2, r4
 8109b5a:	462b      	mov	r3, r5
 8109b5c:	f7f6 fd78 	bl	8100650 <__aeabi_dmul>
 8109b60:	a355      	add	r3, pc, #340	; (adr r3, 8109cb8 <__ieee754_pow+0xa38>)
 8109b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109b66:	f7f6 fbbd 	bl	81002e4 <__adddf3>
 8109b6a:	4622      	mov	r2, r4
 8109b6c:	462b      	mov	r3, r5
 8109b6e:	f7f6 fd6f 	bl	8100650 <__aeabi_dmul>
 8109b72:	4602      	mov	r2, r0
 8109b74:	460b      	mov	r3, r1
 8109b76:	4640      	mov	r0, r8
 8109b78:	4649      	mov	r1, r9
 8109b7a:	f7f6 fbb1 	bl	81002e0 <__aeabi_dsub>
 8109b7e:	4604      	mov	r4, r0
 8109b80:	460d      	mov	r5, r1
 8109b82:	4602      	mov	r2, r0
 8109b84:	460b      	mov	r3, r1
 8109b86:	4640      	mov	r0, r8
 8109b88:	4649      	mov	r1, r9
 8109b8a:	f7f6 fd61 	bl	8100650 <__aeabi_dmul>
 8109b8e:	2200      	movs	r2, #0
 8109b90:	ec41 0b19 	vmov	d9, r0, r1
 8109b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8109b98:	4620      	mov	r0, r4
 8109b9a:	4629      	mov	r1, r5
 8109b9c:	f7f6 fba0 	bl	81002e0 <__aeabi_dsub>
 8109ba0:	4602      	mov	r2, r0
 8109ba2:	460b      	mov	r3, r1
 8109ba4:	ec51 0b19 	vmov	r0, r1, d9
 8109ba8:	f7f6 fe7c 	bl	81008a4 <__aeabi_ddiv>
 8109bac:	4632      	mov	r2, r6
 8109bae:	4604      	mov	r4, r0
 8109bb0:	460d      	mov	r5, r1
 8109bb2:	463b      	mov	r3, r7
 8109bb4:	4640      	mov	r0, r8
 8109bb6:	4649      	mov	r1, r9
 8109bb8:	f7f6 fd4a 	bl	8100650 <__aeabi_dmul>
 8109bbc:	4632      	mov	r2, r6
 8109bbe:	463b      	mov	r3, r7
 8109bc0:	f7f6 fb90 	bl	81002e4 <__adddf3>
 8109bc4:	4602      	mov	r2, r0
 8109bc6:	460b      	mov	r3, r1
 8109bc8:	4620      	mov	r0, r4
 8109bca:	4629      	mov	r1, r5
 8109bcc:	f7f6 fb88 	bl	81002e0 <__aeabi_dsub>
 8109bd0:	4642      	mov	r2, r8
 8109bd2:	464b      	mov	r3, r9
 8109bd4:	f7f6 fb84 	bl	81002e0 <__aeabi_dsub>
 8109bd8:	460b      	mov	r3, r1
 8109bda:	4602      	mov	r2, r0
 8109bdc:	493a      	ldr	r1, [pc, #232]	; (8109cc8 <__ieee754_pow+0xa48>)
 8109bde:	2000      	movs	r0, #0
 8109be0:	f7f6 fb7e 	bl	81002e0 <__aeabi_dsub>
 8109be4:	ec41 0b10 	vmov	d0, r0, r1
 8109be8:	ee10 3a90 	vmov	r3, s1
 8109bec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8109bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109bf4:	da2b      	bge.n	8109c4e <__ieee754_pow+0x9ce>
 8109bf6:	4650      	mov	r0, sl
 8109bf8:	f000 f966 	bl	8109ec8 <scalbn>
 8109bfc:	ec51 0b10 	vmov	r0, r1, d0
 8109c00:	ec53 2b18 	vmov	r2, r3, d8
 8109c04:	f7ff bbed 	b.w	81093e2 <__ieee754_pow+0x162>
 8109c08:	4b30      	ldr	r3, [pc, #192]	; (8109ccc <__ieee754_pow+0xa4c>)
 8109c0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8109c0e:	429e      	cmp	r6, r3
 8109c10:	f77f af0c 	ble.w	8109a2c <__ieee754_pow+0x7ac>
 8109c14:	4b2e      	ldr	r3, [pc, #184]	; (8109cd0 <__ieee754_pow+0xa50>)
 8109c16:	440b      	add	r3, r1
 8109c18:	4303      	orrs	r3, r0
 8109c1a:	d009      	beq.n	8109c30 <__ieee754_pow+0x9b0>
 8109c1c:	ec51 0b18 	vmov	r0, r1, d8
 8109c20:	2200      	movs	r2, #0
 8109c22:	2300      	movs	r3, #0
 8109c24:	f7f6 ff86 	bl	8100b34 <__aeabi_dcmplt>
 8109c28:	3800      	subs	r0, #0
 8109c2a:	bf18      	it	ne
 8109c2c:	2001      	movne	r0, #1
 8109c2e:	e447      	b.n	81094c0 <__ieee754_pow+0x240>
 8109c30:	4622      	mov	r2, r4
 8109c32:	462b      	mov	r3, r5
 8109c34:	f7f6 fb54 	bl	81002e0 <__aeabi_dsub>
 8109c38:	4642      	mov	r2, r8
 8109c3a:	464b      	mov	r3, r9
 8109c3c:	f7f6 ff8e 	bl	8100b5c <__aeabi_dcmpge>
 8109c40:	2800      	cmp	r0, #0
 8109c42:	f43f aef3 	beq.w	8109a2c <__ieee754_pow+0x7ac>
 8109c46:	e7e9      	b.n	8109c1c <__ieee754_pow+0x99c>
 8109c48:	f04f 0a00 	mov.w	sl, #0
 8109c4c:	e71a      	b.n	8109a84 <__ieee754_pow+0x804>
 8109c4e:	ec51 0b10 	vmov	r0, r1, d0
 8109c52:	4619      	mov	r1, r3
 8109c54:	e7d4      	b.n	8109c00 <__ieee754_pow+0x980>
 8109c56:	491c      	ldr	r1, [pc, #112]	; (8109cc8 <__ieee754_pow+0xa48>)
 8109c58:	2000      	movs	r0, #0
 8109c5a:	f7ff bb30 	b.w	81092be <__ieee754_pow+0x3e>
 8109c5e:	2000      	movs	r0, #0
 8109c60:	2100      	movs	r1, #0
 8109c62:	f7ff bb2c 	b.w	81092be <__ieee754_pow+0x3e>
 8109c66:	4630      	mov	r0, r6
 8109c68:	4639      	mov	r1, r7
 8109c6a:	f7ff bb28 	b.w	81092be <__ieee754_pow+0x3e>
 8109c6e:	9204      	str	r2, [sp, #16]
 8109c70:	f7ff bb7a 	b.w	8109368 <__ieee754_pow+0xe8>
 8109c74:	2300      	movs	r3, #0
 8109c76:	f7ff bb64 	b.w	8109342 <__ieee754_pow+0xc2>
 8109c7a:	bf00      	nop
 8109c7c:	f3af 8000 	nop.w
 8109c80:	00000000 	.word	0x00000000
 8109c84:	3fe62e43 	.word	0x3fe62e43
 8109c88:	fefa39ef 	.word	0xfefa39ef
 8109c8c:	3fe62e42 	.word	0x3fe62e42
 8109c90:	0ca86c39 	.word	0x0ca86c39
 8109c94:	be205c61 	.word	0xbe205c61
 8109c98:	72bea4d0 	.word	0x72bea4d0
 8109c9c:	3e663769 	.word	0x3e663769
 8109ca0:	c5d26bf1 	.word	0xc5d26bf1
 8109ca4:	3ebbbd41 	.word	0x3ebbbd41
 8109ca8:	af25de2c 	.word	0xaf25de2c
 8109cac:	3f11566a 	.word	0x3f11566a
 8109cb0:	16bebd93 	.word	0x16bebd93
 8109cb4:	3f66c16c 	.word	0x3f66c16c
 8109cb8:	5555553e 	.word	0x5555553e
 8109cbc:	3fc55555 	.word	0x3fc55555
 8109cc0:	3fe00000 	.word	0x3fe00000
 8109cc4:	000fffff 	.word	0x000fffff
 8109cc8:	3ff00000 	.word	0x3ff00000
 8109ccc:	4090cbff 	.word	0x4090cbff
 8109cd0:	3f6f3400 	.word	0x3f6f3400
 8109cd4:	652b82fe 	.word	0x652b82fe
 8109cd8:	3c971547 	.word	0x3c971547

08109cdc <__ieee754_sqrt>:
 8109cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109ce0:	ec55 4b10 	vmov	r4, r5, d0
 8109ce4:	4e55      	ldr	r6, [pc, #340]	; (8109e3c <__ieee754_sqrt+0x160>)
 8109ce6:	43ae      	bics	r6, r5
 8109ce8:	ee10 0a10 	vmov	r0, s0
 8109cec:	ee10 3a10 	vmov	r3, s0
 8109cf0:	462a      	mov	r2, r5
 8109cf2:	4629      	mov	r1, r5
 8109cf4:	d110      	bne.n	8109d18 <__ieee754_sqrt+0x3c>
 8109cf6:	ee10 2a10 	vmov	r2, s0
 8109cfa:	462b      	mov	r3, r5
 8109cfc:	f7f6 fca8 	bl	8100650 <__aeabi_dmul>
 8109d00:	4602      	mov	r2, r0
 8109d02:	460b      	mov	r3, r1
 8109d04:	4620      	mov	r0, r4
 8109d06:	4629      	mov	r1, r5
 8109d08:	f7f6 faec 	bl	81002e4 <__adddf3>
 8109d0c:	4604      	mov	r4, r0
 8109d0e:	460d      	mov	r5, r1
 8109d10:	ec45 4b10 	vmov	d0, r4, r5
 8109d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109d18:	2d00      	cmp	r5, #0
 8109d1a:	dc10      	bgt.n	8109d3e <__ieee754_sqrt+0x62>
 8109d1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8109d20:	4330      	orrs	r0, r6
 8109d22:	d0f5      	beq.n	8109d10 <__ieee754_sqrt+0x34>
 8109d24:	b15d      	cbz	r5, 8109d3e <__ieee754_sqrt+0x62>
 8109d26:	ee10 2a10 	vmov	r2, s0
 8109d2a:	462b      	mov	r3, r5
 8109d2c:	ee10 0a10 	vmov	r0, s0
 8109d30:	f7f6 fad6 	bl	81002e0 <__aeabi_dsub>
 8109d34:	4602      	mov	r2, r0
 8109d36:	460b      	mov	r3, r1
 8109d38:	f7f6 fdb4 	bl	81008a4 <__aeabi_ddiv>
 8109d3c:	e7e6      	b.n	8109d0c <__ieee754_sqrt+0x30>
 8109d3e:	1512      	asrs	r2, r2, #20
 8109d40:	d074      	beq.n	8109e2c <__ieee754_sqrt+0x150>
 8109d42:	07d4      	lsls	r4, r2, #31
 8109d44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8109d48:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8109d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8109d50:	bf5e      	ittt	pl
 8109d52:	0fda      	lsrpl	r2, r3, #31
 8109d54:	005b      	lslpl	r3, r3, #1
 8109d56:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8109d5a:	2400      	movs	r4, #0
 8109d5c:	0fda      	lsrs	r2, r3, #31
 8109d5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8109d62:	107f      	asrs	r7, r7, #1
 8109d64:	005b      	lsls	r3, r3, #1
 8109d66:	2516      	movs	r5, #22
 8109d68:	4620      	mov	r0, r4
 8109d6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8109d6e:	1886      	adds	r6, r0, r2
 8109d70:	428e      	cmp	r6, r1
 8109d72:	bfde      	ittt	le
 8109d74:	1b89      	suble	r1, r1, r6
 8109d76:	18b0      	addle	r0, r6, r2
 8109d78:	18a4      	addle	r4, r4, r2
 8109d7a:	0049      	lsls	r1, r1, #1
 8109d7c:	3d01      	subs	r5, #1
 8109d7e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8109d82:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8109d86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8109d8a:	d1f0      	bne.n	8109d6e <__ieee754_sqrt+0x92>
 8109d8c:	462a      	mov	r2, r5
 8109d8e:	f04f 0e20 	mov.w	lr, #32
 8109d92:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8109d96:	4281      	cmp	r1, r0
 8109d98:	eb06 0c05 	add.w	ip, r6, r5
 8109d9c:	dc02      	bgt.n	8109da4 <__ieee754_sqrt+0xc8>
 8109d9e:	d113      	bne.n	8109dc8 <__ieee754_sqrt+0xec>
 8109da0:	459c      	cmp	ip, r3
 8109da2:	d811      	bhi.n	8109dc8 <__ieee754_sqrt+0xec>
 8109da4:	f1bc 0f00 	cmp.w	ip, #0
 8109da8:	eb0c 0506 	add.w	r5, ip, r6
 8109dac:	da43      	bge.n	8109e36 <__ieee754_sqrt+0x15a>
 8109dae:	2d00      	cmp	r5, #0
 8109db0:	db41      	blt.n	8109e36 <__ieee754_sqrt+0x15a>
 8109db2:	f100 0801 	add.w	r8, r0, #1
 8109db6:	1a09      	subs	r1, r1, r0
 8109db8:	459c      	cmp	ip, r3
 8109dba:	bf88      	it	hi
 8109dbc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8109dc0:	eba3 030c 	sub.w	r3, r3, ip
 8109dc4:	4432      	add	r2, r6
 8109dc6:	4640      	mov	r0, r8
 8109dc8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8109dcc:	f1be 0e01 	subs.w	lr, lr, #1
 8109dd0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8109dd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8109dd8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8109ddc:	d1db      	bne.n	8109d96 <__ieee754_sqrt+0xba>
 8109dde:	430b      	orrs	r3, r1
 8109de0:	d006      	beq.n	8109df0 <__ieee754_sqrt+0x114>
 8109de2:	1c50      	adds	r0, r2, #1
 8109de4:	bf13      	iteet	ne
 8109de6:	3201      	addne	r2, #1
 8109de8:	3401      	addeq	r4, #1
 8109dea:	4672      	moveq	r2, lr
 8109dec:	f022 0201 	bicne.w	r2, r2, #1
 8109df0:	1063      	asrs	r3, r4, #1
 8109df2:	0852      	lsrs	r2, r2, #1
 8109df4:	07e1      	lsls	r1, r4, #31
 8109df6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8109dfa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8109dfe:	bf48      	it	mi
 8109e00:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8109e04:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8109e08:	4614      	mov	r4, r2
 8109e0a:	e781      	b.n	8109d10 <__ieee754_sqrt+0x34>
 8109e0c:	0ad9      	lsrs	r1, r3, #11
 8109e0e:	3815      	subs	r0, #21
 8109e10:	055b      	lsls	r3, r3, #21
 8109e12:	2900      	cmp	r1, #0
 8109e14:	d0fa      	beq.n	8109e0c <__ieee754_sqrt+0x130>
 8109e16:	02cd      	lsls	r5, r1, #11
 8109e18:	d50a      	bpl.n	8109e30 <__ieee754_sqrt+0x154>
 8109e1a:	f1c2 0420 	rsb	r4, r2, #32
 8109e1e:	fa23 f404 	lsr.w	r4, r3, r4
 8109e22:	1e55      	subs	r5, r2, #1
 8109e24:	4093      	lsls	r3, r2
 8109e26:	4321      	orrs	r1, r4
 8109e28:	1b42      	subs	r2, r0, r5
 8109e2a:	e78a      	b.n	8109d42 <__ieee754_sqrt+0x66>
 8109e2c:	4610      	mov	r0, r2
 8109e2e:	e7f0      	b.n	8109e12 <__ieee754_sqrt+0x136>
 8109e30:	0049      	lsls	r1, r1, #1
 8109e32:	3201      	adds	r2, #1
 8109e34:	e7ef      	b.n	8109e16 <__ieee754_sqrt+0x13a>
 8109e36:	4680      	mov	r8, r0
 8109e38:	e7bd      	b.n	8109db6 <__ieee754_sqrt+0xda>
 8109e3a:	bf00      	nop
 8109e3c:	7ff00000 	.word	0x7ff00000

08109e40 <with_errno>:
 8109e40:	b570      	push	{r4, r5, r6, lr}
 8109e42:	4604      	mov	r4, r0
 8109e44:	460d      	mov	r5, r1
 8109e46:	4616      	mov	r6, r2
 8109e48:	f000 f8c4 	bl	8109fd4 <__errno>
 8109e4c:	4629      	mov	r1, r5
 8109e4e:	6006      	str	r6, [r0, #0]
 8109e50:	4620      	mov	r0, r4
 8109e52:	bd70      	pop	{r4, r5, r6, pc}

08109e54 <xflow>:
 8109e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8109e56:	4614      	mov	r4, r2
 8109e58:	461d      	mov	r5, r3
 8109e5a:	b108      	cbz	r0, 8109e60 <xflow+0xc>
 8109e5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8109e60:	e9cd 2300 	strd	r2, r3, [sp]
 8109e64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8109e68:	4620      	mov	r0, r4
 8109e6a:	4629      	mov	r1, r5
 8109e6c:	f7f6 fbf0 	bl	8100650 <__aeabi_dmul>
 8109e70:	2222      	movs	r2, #34	; 0x22
 8109e72:	b003      	add	sp, #12
 8109e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8109e78:	f7ff bfe2 	b.w	8109e40 <with_errno>

08109e7c <__math_uflow>:
 8109e7c:	b508      	push	{r3, lr}
 8109e7e:	2200      	movs	r2, #0
 8109e80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8109e84:	f7ff ffe6 	bl	8109e54 <xflow>
 8109e88:	ec41 0b10 	vmov	d0, r0, r1
 8109e8c:	bd08      	pop	{r3, pc}

08109e8e <__math_oflow>:
 8109e8e:	b508      	push	{r3, lr}
 8109e90:	2200      	movs	r2, #0
 8109e92:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8109e96:	f7ff ffdd 	bl	8109e54 <xflow>
 8109e9a:	ec41 0b10 	vmov	d0, r0, r1
 8109e9e:	bd08      	pop	{r3, pc}

08109ea0 <fabs>:
 8109ea0:	ec51 0b10 	vmov	r0, r1, d0
 8109ea4:	ee10 2a10 	vmov	r2, s0
 8109ea8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8109eac:	ec43 2b10 	vmov	d0, r2, r3
 8109eb0:	4770      	bx	lr

08109eb2 <finite>:
 8109eb2:	b082      	sub	sp, #8
 8109eb4:	ed8d 0b00 	vstr	d0, [sp]
 8109eb8:	9801      	ldr	r0, [sp, #4]
 8109eba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8109ebe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8109ec2:	0fc0      	lsrs	r0, r0, #31
 8109ec4:	b002      	add	sp, #8
 8109ec6:	4770      	bx	lr

08109ec8 <scalbn>:
 8109ec8:	b570      	push	{r4, r5, r6, lr}
 8109eca:	ec55 4b10 	vmov	r4, r5, d0
 8109ece:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8109ed2:	4606      	mov	r6, r0
 8109ed4:	462b      	mov	r3, r5
 8109ed6:	b99a      	cbnz	r2, 8109f00 <scalbn+0x38>
 8109ed8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8109edc:	4323      	orrs	r3, r4
 8109ede:	d036      	beq.n	8109f4e <scalbn+0x86>
 8109ee0:	4b39      	ldr	r3, [pc, #228]	; (8109fc8 <scalbn+0x100>)
 8109ee2:	4629      	mov	r1, r5
 8109ee4:	ee10 0a10 	vmov	r0, s0
 8109ee8:	2200      	movs	r2, #0
 8109eea:	f7f6 fbb1 	bl	8100650 <__aeabi_dmul>
 8109eee:	4b37      	ldr	r3, [pc, #220]	; (8109fcc <scalbn+0x104>)
 8109ef0:	429e      	cmp	r6, r3
 8109ef2:	4604      	mov	r4, r0
 8109ef4:	460d      	mov	r5, r1
 8109ef6:	da10      	bge.n	8109f1a <scalbn+0x52>
 8109ef8:	a32b      	add	r3, pc, #172	; (adr r3, 8109fa8 <scalbn+0xe0>)
 8109efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109efe:	e03a      	b.n	8109f76 <scalbn+0xae>
 8109f00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8109f04:	428a      	cmp	r2, r1
 8109f06:	d10c      	bne.n	8109f22 <scalbn+0x5a>
 8109f08:	ee10 2a10 	vmov	r2, s0
 8109f0c:	4620      	mov	r0, r4
 8109f0e:	4629      	mov	r1, r5
 8109f10:	f7f6 f9e8 	bl	81002e4 <__adddf3>
 8109f14:	4604      	mov	r4, r0
 8109f16:	460d      	mov	r5, r1
 8109f18:	e019      	b.n	8109f4e <scalbn+0x86>
 8109f1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8109f1e:	460b      	mov	r3, r1
 8109f20:	3a36      	subs	r2, #54	; 0x36
 8109f22:	4432      	add	r2, r6
 8109f24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8109f28:	428a      	cmp	r2, r1
 8109f2a:	dd08      	ble.n	8109f3e <scalbn+0x76>
 8109f2c:	2d00      	cmp	r5, #0
 8109f2e:	a120      	add	r1, pc, #128	; (adr r1, 8109fb0 <scalbn+0xe8>)
 8109f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109f34:	da1c      	bge.n	8109f70 <scalbn+0xa8>
 8109f36:	a120      	add	r1, pc, #128	; (adr r1, 8109fb8 <scalbn+0xf0>)
 8109f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109f3c:	e018      	b.n	8109f70 <scalbn+0xa8>
 8109f3e:	2a00      	cmp	r2, #0
 8109f40:	dd08      	ble.n	8109f54 <scalbn+0x8c>
 8109f42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8109f46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8109f4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8109f4e:	ec45 4b10 	vmov	d0, r4, r5
 8109f52:	bd70      	pop	{r4, r5, r6, pc}
 8109f54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8109f58:	da19      	bge.n	8109f8e <scalbn+0xc6>
 8109f5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8109f5e:	429e      	cmp	r6, r3
 8109f60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8109f64:	dd0a      	ble.n	8109f7c <scalbn+0xb4>
 8109f66:	a112      	add	r1, pc, #72	; (adr r1, 8109fb0 <scalbn+0xe8>)
 8109f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109f6c:	2b00      	cmp	r3, #0
 8109f6e:	d1e2      	bne.n	8109f36 <scalbn+0x6e>
 8109f70:	a30f      	add	r3, pc, #60	; (adr r3, 8109fb0 <scalbn+0xe8>)
 8109f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109f76:	f7f6 fb6b 	bl	8100650 <__aeabi_dmul>
 8109f7a:	e7cb      	b.n	8109f14 <scalbn+0x4c>
 8109f7c:	a10a      	add	r1, pc, #40	; (adr r1, 8109fa8 <scalbn+0xe0>)
 8109f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109f82:	2b00      	cmp	r3, #0
 8109f84:	d0b8      	beq.n	8109ef8 <scalbn+0x30>
 8109f86:	a10e      	add	r1, pc, #56	; (adr r1, 8109fc0 <scalbn+0xf8>)
 8109f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109f8c:	e7b4      	b.n	8109ef8 <scalbn+0x30>
 8109f8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8109f92:	3236      	adds	r2, #54	; 0x36
 8109f94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8109f98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8109f9c:	4620      	mov	r0, r4
 8109f9e:	4b0c      	ldr	r3, [pc, #48]	; (8109fd0 <scalbn+0x108>)
 8109fa0:	2200      	movs	r2, #0
 8109fa2:	e7e8      	b.n	8109f76 <scalbn+0xae>
 8109fa4:	f3af 8000 	nop.w
 8109fa8:	c2f8f359 	.word	0xc2f8f359
 8109fac:	01a56e1f 	.word	0x01a56e1f
 8109fb0:	8800759c 	.word	0x8800759c
 8109fb4:	7e37e43c 	.word	0x7e37e43c
 8109fb8:	8800759c 	.word	0x8800759c
 8109fbc:	fe37e43c 	.word	0xfe37e43c
 8109fc0:	c2f8f359 	.word	0xc2f8f359
 8109fc4:	81a56e1f 	.word	0x81a56e1f
 8109fc8:	43500000 	.word	0x43500000
 8109fcc:	ffff3cb0 	.word	0xffff3cb0
 8109fd0:	3c900000 	.word	0x3c900000

08109fd4 <__errno>:
 8109fd4:	4b01      	ldr	r3, [pc, #4]	; (8109fdc <__errno+0x8>)
 8109fd6:	6818      	ldr	r0, [r3, #0]
 8109fd8:	4770      	bx	lr
 8109fda:	bf00      	nop
 8109fdc:	10000010 	.word	0x10000010

08109fe0 <__libc_init_array>:
 8109fe0:	b570      	push	{r4, r5, r6, lr}
 8109fe2:	4d0d      	ldr	r5, [pc, #52]	; (810a018 <__libc_init_array+0x38>)
 8109fe4:	4c0d      	ldr	r4, [pc, #52]	; (810a01c <__libc_init_array+0x3c>)
 8109fe6:	1b64      	subs	r4, r4, r5
 8109fe8:	10a4      	asrs	r4, r4, #2
 8109fea:	2600      	movs	r6, #0
 8109fec:	42a6      	cmp	r6, r4
 8109fee:	d109      	bne.n	810a004 <__libc_init_array+0x24>
 8109ff0:	4d0b      	ldr	r5, [pc, #44]	; (810a020 <__libc_init_array+0x40>)
 8109ff2:	4c0c      	ldr	r4, [pc, #48]	; (810a024 <__libc_init_array+0x44>)
 8109ff4:	f000 f820 	bl	810a038 <_init>
 8109ff8:	1b64      	subs	r4, r4, r5
 8109ffa:	10a4      	asrs	r4, r4, #2
 8109ffc:	2600      	movs	r6, #0
 8109ffe:	42a6      	cmp	r6, r4
 810a000:	d105      	bne.n	810a00e <__libc_init_array+0x2e>
 810a002:	bd70      	pop	{r4, r5, r6, pc}
 810a004:	f855 3b04 	ldr.w	r3, [r5], #4
 810a008:	4798      	blx	r3
 810a00a:	3601      	adds	r6, #1
 810a00c:	e7ee      	b.n	8109fec <__libc_init_array+0xc>
 810a00e:	f855 3b04 	ldr.w	r3, [r5], #4
 810a012:	4798      	blx	r3
 810a014:	3601      	adds	r6, #1
 810a016:	e7f2      	b.n	8109ffe <__libc_init_array+0x1e>
 810a018:	0810a188 	.word	0x0810a188
 810a01c:	0810a188 	.word	0x0810a188
 810a020:	0810a188 	.word	0x0810a188
 810a024:	0810a18c 	.word	0x0810a18c

0810a028 <memset>:
 810a028:	4402      	add	r2, r0
 810a02a:	4603      	mov	r3, r0
 810a02c:	4293      	cmp	r3, r2
 810a02e:	d100      	bne.n	810a032 <memset+0xa>
 810a030:	4770      	bx	lr
 810a032:	f803 1b01 	strb.w	r1, [r3], #1
 810a036:	e7f9      	b.n	810a02c <memset+0x4>

0810a038 <_init>:
 810a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a03a:	bf00      	nop
 810a03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a03e:	bc08      	pop	{r3}
 810a040:	469e      	mov	lr, r3
 810a042:	4770      	bx	lr

0810a044 <_fini>:
 810a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a046:	bf00      	nop
 810a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a04a:	bc08      	pop	{r3}
 810a04c:	469e      	mov	lr, r3
 810a04e:	4770      	bx	lr
